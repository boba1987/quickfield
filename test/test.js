(function(f){typeof define==='function'&&define.amd?define(f):f();}((function(){'use strict';var companyNames = ["Kiehn Inc", "Marks and Sons", "Waelchi Schiller and Denesik", "Olson Zemlak and Maggio", "Jacobs - Von", "Auer Lowe and Gutmann", "Feeney Rempel and Cassin", "Sawayn - Marks", "Johns and Sons", "Rodriguez Champlin and Dare", "Lowe - Ritchie", "Gleichner Goldner and Becker", "Jerde - Osinski", "Baumbach Group", "Schroeder Zulauf and Rempel", "O'Reilly Mills and Denesik", "Kohler - Veum", "O'Hara Inc", "Oberbrunner and Sons", "Emmerich Group", "Murray Zieme and Franecki", "Moen - Luettgen", "Gorczany Harvey and Gulgowski", "Reilly - Ruecker", "McDermott - Hyatt", "Spinka - Marks", "Hayes and Sons", "Kilback Kiehn and Monahan", "Davis and Sons", "Hudson - Yundt", "Goodwin - Zemlak", "Beer Kuhlman and Walker", "Jones Carroll and Anderson", "Rutherford Inc", "Predovic White and Collins", "Sporer Baumbach and Crist", "Grimes and Sons", "Kunde and Sons", "Tillman - Bode", "Cronin - Koepp", "Smitham Zieme and Daniel", "Kunze Welch and Russel", "Johns Labadie and Harber", "Lesch - Waters", "Brakus - Smitham", "Bins and Sons", "Nitzsche Inc", "Wunsch Inc", "Schowalter Franecki and Kuphal", "Reynolds - Swaniawski"];var isEditable = function (element) {
  if (element.ownerDocument.designMode && element.ownerDocument.designMode.toLowerCase() === 'on') {
    return true;
  }

  switch (element.tagName.toLowerCase()) {
    case 'input':
      return isEditableInput(element);
    case 'textarea':
      return true;
  }

  if (isContentEditable(element)) {
    return true;
  }

  return false;
};

function isContentEditable(element) {
  if (element.contentEditable && element.contentEditable.toLowerCase() === 'true') {
    return true;
  }
  if (element.contentEditable && element.contentEditable.toLowerCase() === 'inherit' && element.parentNode) {
    return isContentEditable(element.parentNode);
  }
  return false;
}

function isEditableInput(input) {
  switch (input.type) {
    case 'text':
      return true;
    case 'email':
      return true;
    case 'password':
      return true;
    case 'search':
      return true;
    case 'tel':
      return true;
    case 'url':
      return true;
    default:
      return false;
  }
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var CTRL = 1 << 0;
var META = 1 << 1;
var ALT = 1 << 2;
var SHIFT = 1 << 3;

// Key Events
var KeyEvents = {
  DOWN: 1 << 0,
  PRESS: 1 << 1,
  UP: 1 << 2,
  INPUT: 1 << 3
};
KeyEvents.ALL = KeyEvents.DOWN | KeyEvents.PRESS | KeyEvents.UP | KeyEvents.INPUT;

/**
 * Represents a keystroke, or a single key code with a set of active modifiers.
 *
 * @class Keystroke
 */
var Keystroke =
/**
 * @param {number} modifiers A bitmask formed by CTRL, META, ALT, and SHIFT.
 * @param {number} keyCode
 */
function Keystroke(modifiers, keyCode) {
  classCallCheck(this, Keystroke);

  this.modifiers = modifiers;
  this.ctrlKey = !!(modifiers & CTRL);
  this.metaKey = !!(modifiers & META);
  this.altKey = !!(modifiers & ALT);
  this.shiftKey = !!(modifiers & SHIFT);
  this.keyCode = keyCode;
};

/**
 * Simulates a keyboard with a particular key-to-character and key-to-action
 * mapping. Use `US_ENGLISH` to get a pre-configured keyboard.
 */
Keystroke.CTRL = CTRL;
Keystroke.META = META;
Keystroke.ALT = ALT;
Keystroke.SHIFT = SHIFT;
var Keyboard = function () {
  /**
   * @param {Object.<number, Keystroke>} charCodeKeyCodeMap
   * @param {Object.<string, number>} actionKeyCodeMap
   */
  function Keyboard(charCodeKeyCodeMap, actionKeyCodeMap) {
    classCallCheck(this, Keyboard);

    this._charCodeKeyCodeMap = charCodeKeyCodeMap;
    this._actionKeyCodeMap = actionKeyCodeMap;
  }

  /**
   * Determines the character code generated by pressing the given keystroke.
   *
   * @param {Keystroke} keystroke
   * @return {?number}
   */


  createClass(Keyboard, [{
    key: 'charCodeForKeystroke',
    value: function charCodeForKeystroke(keystroke) {
      var map = this._charCodeKeyCodeMap;
      for (var charCode in map) {
        if (Object.prototype.hasOwnProperty.call(map, charCode)) {
          var keystrokeForCharCode = map[charCode];
          if (keystroke.keyCode === keystrokeForCharCode.keyCode && keystroke.modifiers === keystrokeForCharCode.modifiers) {
            return parseInt(charCode, 10);
          }
        }
      }
      return null;
    }

    /**
     * Creates an event ready for dispatching onto the given target.
     *
     * @param {string} type One of "keydown", "keypress", "keyup", "textInput" or "input".
     * @param {Keystroke} keystroke
     * @param {HTMLElement} target
     * @return {Event}
     */

  }, {
    key: 'createEventFromKeystroke',
    value: function createEventFromKeystroke(type, keystroke, target) {
      var document = target.ownerDocument;
      var window = document.defaultView;
      var Event = window.Event;

      var event = void 0;

      try {
        event = new Event(type);
      } catch (e) {
        event = document.createEvent('UIEvents');
      }

      event.initEvent(type, true, true);

      switch (type) {
        case 'textInput':
          event.data = String.fromCharCode(this.charCodeForKeystroke(keystroke));
          break;

        case 'keydown':case 'keypress':case 'keyup':
          event.shiftKey = keystroke.shiftKey;
          event.altKey = keystroke.altKey;
          event.metaKey = keystroke.metaKey;
          event.ctrlKey = keystroke.ctrlKey;
          event.keyCode = type === 'keypress' ? this.charCodeForKeystroke(keystroke) : keystroke.keyCode;
          event.charCode = type === 'keypress' ? event.keyCode : 0;
          event.which = event.keyCode;
          break;
      }

      return event;
    }

    /**
     * Fires the correct sequence of events on the given target as if the given
     * action was undertaken by a human.
     *
     * @param {string} action e.g. "alt+shift+left" or "backspace"
     * @param {HTMLElement} target
     */

  }, {
    key: 'dispatchEventsForAction',
    value: function dispatchEventsForAction(action, target) {
      var keystroke = this.keystrokeForAction(action);
      this.dispatchEventsForKeystroke(keystroke, target);
    }

    /**
     * Fires the correct sequence of events on the given target as if the given
     * input had been typed by a human.
     *
     * @param {string} input
     * @param {HTMLElement} target
     */

  }, {
    key: 'dispatchEventsForInput',
    value: function dispatchEventsForInput(input, target) {
      var currentModifierState = 0;
      for (var i = 0, length = input.length; i < length; i++) {
        var keystroke = this.keystrokeForCharCode(input.charCodeAt(i));
        this.dispatchModifierStateTransition(target, currentModifierState, keystroke.modifiers);
        this.dispatchEventsForKeystroke(keystroke, target, false);
        currentModifierState = keystroke.modifiers;
      }
      this.dispatchModifierStateTransition(target, currentModifierState, 0);
    }

    /**
     * Fires the correct sequence of events on the given target as if the given
     * keystroke was performed by a human. When simulating, for example, typing
     * the letter "A" (assuming a U.S. English keyboard) then the sequence will
     * look like this:
     *
     *   keydown   keyCode=16 (SHIFT) charCode=0      shiftKey=true
     *   keydown   keyCode=65 (A)     charCode=0      shiftKey=true
     *   keypress  keyCode=65 (A)     charCode=65 (A) shiftKey=true
     *   textInput data=A
     *   input
     *   keyup     keyCode=65 (A)     charCode=0      shiftKey=true
     *   keyup     keyCode=16 (SHIFT) charCode=0      shiftKey=false
     *
     * If the keystroke would not cause a character to be input, such as when
     * pressing alt+shift+left, the sequence looks like this:
     *
     *   keydown   keyCode=16 (SHIFT) charCode=0 altKey=false shiftKey=true
     *   keydown   keyCode=18 (ALT)   charCode=0 altKey=true  shiftKey=true
     *   keydown   keyCode=37 (LEFT)  charCode=0 altKey=true  shiftKey=true
     *   keyup     keyCode=37 (LEFT)  charCode=0 altKey=true  shiftKey=true
     *   keyup     keyCode=18 (ALT)   charCode=0 altKey=false shiftKey=true
     *   keyup     keyCode=16 (SHIFT) charCode=0 altKey=false shiftKey=false
     *
     * To disable handling of modifier keys, call with `transitionModifers` set
     * to false. Doing so will omit the keydown and keyup events associated with
     * shift, ctrl, alt, and meta keys surrounding the actual keystroke.
     *
     * @param {Keystroke} keystroke
     * @param {HTMLElement} target
     * @param {boolean=} transitionModifiers
     * @param {number} events
     */

  }, {
    key: 'dispatchEventsForKeystroke',
    value: function dispatchEventsForKeystroke(keystroke, target) {
      var transitionModifiers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var events = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : KeyEvents.ALL;

      if (transitionModifiers) {
        this.dispatchModifierStateTransition(target, 0, keystroke.modifiers, events);
      }

      var keydownEvent = void 0;
      if (events & KeyEvents.DOWN) {
        keydownEvent = this.createEventFromKeystroke('keydown', keystroke, target);
      }

      if (keydownEvent && target.dispatchEvent(keydownEvent) && this.targetCanReceiveTextInput(target)) {
        var keypressEvent = void 0;
        if (events & KeyEvents.PRESS) {
          keypressEvent = this.createEventFromKeystroke('keypress', keystroke, target);
        }
        if (keypressEvent && keypressEvent.charCode && target.dispatchEvent(keypressEvent)) {
          if (events & KeyEvents.INPUT) {
            var textinputEvent = this.createEventFromKeystroke('textInput', keystroke, target);
            target.dispatchEvent(textinputEvent);

            var inputEvent = this.createEventFromKeystroke('input', keystroke, target);
            target.dispatchEvent(inputEvent);
          }
        }
      }

      if (events & KeyEvents.UP) {
        var keyupEvent = this.createEventFromKeystroke('keyup', keystroke, target);
        target.dispatchEvent(keyupEvent);
      }

      if (transitionModifiers) {
        this.dispatchModifierStateTransition(target, keystroke.modifiers, 0);
      }
    }

    /**
     * Transitions from one modifier state to another by dispatching key events.
     *
     * @param {EventTarget} target
     * @param {number} fromModifierState
     * @param {number} toModifierState
     * @param {number} events
     * @private
     */

  }, {
    key: 'dispatchModifierStateTransition',
    value: function dispatchModifierStateTransition(target, fromModifierState, toModifierState) {
      var events = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : KeyEvents.ALL;

      var currentModifierState = fromModifierState;
      var didHaveMeta = (fromModifierState & META) === META;
      var willHaveMeta = (toModifierState & META) === META;
      var didHaveCtrl = (fromModifierState & CTRL) === CTRL;
      var willHaveCtrl = (toModifierState & CTRL) === CTRL;
      var didHaveShift = (fromModifierState & SHIFT) === SHIFT;
      var willHaveShift = (toModifierState & SHIFT) === SHIFT;
      var didHaveAlt = (fromModifierState & ALT) === ALT;
      var willHaveAlt = (toModifierState & ALT) === ALT;

      var includeKeyUp = events & KeyEvents.UP;
      var includeKeyDown = events & KeyEvents.DOWN;

      if (includeKeyUp && didHaveMeta === true && willHaveMeta === false) {
        // Release the meta key.
        currentModifierState &= ~META;
        target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.META), target));
      }

      if (includeKeyUp && didHaveCtrl === true && willHaveCtrl === false) {
        // Release the ctrl key.
        currentModifierState &= ~CTRL;
        target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.CTRL), target));
      }

      if (includeKeyUp && didHaveShift === true && willHaveShift === false) {
        // Release the shift key.
        currentModifierState &= ~SHIFT;
        target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.SHIFT), target));
      }

      if (includeKeyUp && didHaveAlt === true && willHaveAlt === false) {
        // Release the alt key.
        currentModifierState &= ~ALT;
        target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.ALT), target));
      }

      if (includeKeyDown && didHaveMeta === false && willHaveMeta === true) {
        // Press the meta key.
        currentModifierState |= META;
        target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.META), target));
      }

      if (includeKeyDown && didHaveCtrl === false && willHaveCtrl === true) {
        // Press the ctrl key.
        currentModifierState |= CTRL;
        target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.CTRL), target));
      }

      if (includeKeyDown && didHaveShift === false && willHaveShift === true) {
        // Press the shift key.
        currentModifierState |= SHIFT;
        target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.SHIFT), target));
      }

      if (includeKeyDown && didHaveAlt === false && willHaveAlt === true) {
        // Press the alt key.
        currentModifierState |= ALT;
        target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.ALT), target));
      }

      if (currentModifierState !== toModifierState) {
        throw new Error('internal error, expected modifier state: ' + toModifierState + (', got: ' + currentModifierState));
      }
    }

    /**
     * Returns the keystroke associated with the given action.
     *
     * @param {string} action
     * @return {?Keystroke}
     */

  }, {
    key: 'keystrokeForAction',
    value: function keystrokeForAction(action) {
      var keyCode = null;
      var modifiers = 0;

      var parts = action.split('+');
      var lastPart = parts.pop();

      parts.forEach(function (part) {
        switch (part.toUpperCase()) {
          case 'CTRL':
            modifiers |= CTRL;break;
          case 'META':
            modifiers |= META;break;
          case 'ALT':
            modifiers |= ALT;break;
          case 'SHIFT':
            modifiers |= SHIFT;break;
          default:
            throw new Error('in "' + action + '", invalid modifier: ' + part);
        }
      });

      if (lastPart.toUpperCase() in this._actionKeyCodeMap) {
        keyCode = this._actionKeyCodeMap[lastPart.toUpperCase()];
      } else if (lastPart.length === 1) {
        var lastPartKeystroke = this.keystrokeForCharCode(lastPart.charCodeAt(0));
        modifiers |= lastPartKeystroke.modifiers;
        keyCode = lastPartKeystroke.keyCode;
      } else {
        throw new Error('in "' + action + '", invalid action: ' + lastPart);
      }

      return new Keystroke(modifiers, keyCode);
    }

    /**
     * Gets the keystroke used to generate the given character code.
     *
     * @param {number} charCode
     * @return {?Keystroke}
     */

  }, {
    key: 'keystrokeForCharCode',
    value: function keystrokeForCharCode(charCode) {
      return this._charCodeKeyCodeMap[charCode] || null;
    }

    /**
     * @param {EventTarget} target
     * @private
     */

  }, {
    key: 'targetCanReceiveTextInput',
    value: function targetCanReceiveTextInput(target) {
      if (!target) {
        return false;
      }

      return isEditable(target);
    }
  }]);
  return Keyboard;
}();

var US_ENGLISH_CHARCODE_KEYCODE_MAP = {
  32: new Keystroke(0, 32), // <space>
  33: new Keystroke(SHIFT, 49), // !
  34: new Keystroke(SHIFT, 222), // "
  35: new Keystroke(SHIFT, 51), // #
  36: new Keystroke(SHIFT, 52), // $
  37: new Keystroke(SHIFT, 53), // %
  38: new Keystroke(SHIFT, 55), // &
  39: new Keystroke(0, 222), // '
  40: new Keystroke(SHIFT, 57), // (
  41: new Keystroke(SHIFT, 48), // )
  42: new Keystroke(SHIFT, 56), // *
  43: new Keystroke(SHIFT, 187), // +
  44: new Keystroke(0, 188), // ,
  45: new Keystroke(0, 189), // -
  46: new Keystroke(0, 190), // .
  47: new Keystroke(0, 191), // /
  48: new Keystroke(0, 48), // 0
  49: new Keystroke(0, 49), // 1
  50: new Keystroke(0, 50), // 2
  51: new Keystroke(0, 51), // 3
  52: new Keystroke(0, 52), // 4
  53: new Keystroke(0, 53), // 5
  54: new Keystroke(0, 54), // 6
  55: new Keystroke(0, 55), // 7
  56: new Keystroke(0, 56), // 8
  57: new Keystroke(0, 57), // 9
  58: new Keystroke(SHIFT, 186), // :
  59: new Keystroke(0, 186), // ;
  60: new Keystroke(SHIFT, 188), // <
  61: new Keystroke(0, 187), // =
  62: new Keystroke(SHIFT, 190), // >
  63: new Keystroke(SHIFT, 191), // ?
  64: new Keystroke(SHIFT, 50), // @
  65: new Keystroke(SHIFT, 65), // A
  66: new Keystroke(SHIFT, 66), // B
  67: new Keystroke(SHIFT, 67), // C
  68: new Keystroke(SHIFT, 68), // D
  69: new Keystroke(SHIFT, 69), // E
  70: new Keystroke(SHIFT, 70), // F
  71: new Keystroke(SHIFT, 71), // G
  72: new Keystroke(SHIFT, 72), // H
  73: new Keystroke(SHIFT, 73), // I
  74: new Keystroke(SHIFT, 74), // J
  75: new Keystroke(SHIFT, 75), // K
  76: new Keystroke(SHIFT, 76), // L
  77: new Keystroke(SHIFT, 77), // M
  78: new Keystroke(SHIFT, 78), // N
  79: new Keystroke(SHIFT, 79), // O
  80: new Keystroke(SHIFT, 80), // P
  81: new Keystroke(SHIFT, 81), // Q
  82: new Keystroke(SHIFT, 82), // R
  83: new Keystroke(SHIFT, 83), // S
  84: new Keystroke(SHIFT, 84), // T
  85: new Keystroke(SHIFT, 85), // U
  86: new Keystroke(SHIFT, 86), // V
  87: new Keystroke(SHIFT, 87), // W
  88: new Keystroke(SHIFT, 88), // X
  89: new Keystroke(SHIFT, 89), // Y
  90: new Keystroke(SHIFT, 90), // Z
  91: new Keystroke(0, 219), // [
  92: new Keystroke(0, 220), // \
  93: new Keystroke(0, 221), // ]
  96: new Keystroke(0, 192), // `
  97: new Keystroke(0, 65), // a
  98: new Keystroke(0, 66), // b
  99: new Keystroke(0, 67), // c
  100: new Keystroke(0, 68), // d
  101: new Keystroke(0, 69), // e
  102: new Keystroke(0, 70), // f
  103: new Keystroke(0, 71), // g
  104: new Keystroke(0, 72), // h
  105: new Keystroke(0, 73), // i
  106: new Keystroke(0, 74), // j
  107: new Keystroke(0, 75), // k
  108: new Keystroke(0, 76), // l
  109: new Keystroke(0, 77), // m
  110: new Keystroke(0, 78), // n
  111: new Keystroke(0, 79), // o
  112: new Keystroke(0, 80), // p
  113: new Keystroke(0, 81), // q
  114: new Keystroke(0, 82), // r
  115: new Keystroke(0, 83), // s
  116: new Keystroke(0, 84), // t
  117: new Keystroke(0, 85), // u
  118: new Keystroke(0, 86), // v
  119: new Keystroke(0, 87), // w
  120: new Keystroke(0, 88), // x
  121: new Keystroke(0, 89), // y
  122: new Keystroke(0, 90), // z
  123: new Keystroke(SHIFT, 219), // {
  124: new Keystroke(SHIFT, 220), // |
  125: new Keystroke(SHIFT, 221), // }
  126: new Keystroke(SHIFT, 192) // ~
};

var US_ENGLISH_ACTION_KEYCODE_MAP = {
  BACKSPACE: 8,
  TAB: 9,
  ENTER: 13,
  SHIFT: 16,
  CTRL: 17,
  ALT: 18,
  PAUSE: 19,
  CAPSLOCK: 20,
  ESCAPE: 27,
  PAGEUP: 33,
  PAGEDOWN: 34,
  END: 35,
  HOME: 36,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
  INSERT: 45,
  DELETE: 46,
  META: 91,
  F1: 112,
  F2: 113,
  F3: 114,
  F4: 115,
  F5: 116,
  F6: 117,
  F7: 118,
  F8: 119,
  F9: 120,
  F10: 121,
  F11: 122,
  F12: 123
};

/**
 * Gets a keyboard instance configured as a U.S. English keyboard would be.
 *
 * @return {Keyboard}
 */
Keyboard.US_ENGLISH = new Keyboard(US_ENGLISH_CHARCODE_KEYCODE_MAP, US_ENGLISH_ACTION_KEYCODE_MAP);var keyboard;
keyboard = Keyboard.US_ENGLISH;
function simulateKeys (target, keys, value) {
  if (target.focus) {
    target.focus();
  }

  target.value += value != null ? value || '' : keys;
  return keyboard.dispatchEventsForInput(keys, target);
}var keyboard$1;
keyboard$1 = Keyboard.US_ENGLISH;
function simulateAction (target, keys) {
  return keyboard$1.dispatchEventsForAction(keys, target);
}function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

var REGEX_LEN_VAL = /^\d+(?:[a-z]|\%)+$/i;
var REGEX_DIGITS = /\d+$/;
var REGEX_SPACE = /\s/;
var REGEX_KEBAB = /([A-Z])+/g;
var IMPORTANT = 'important';
var POSSIBLE_PREFIXES = ['webkit', 'moz', 'ms', 'o'];
var REQUIRES_UNIT_VALUE = ['background-position-x', 'background-position-y', 'block-size', 'border-width', 'columnRule-width', 'cx', 'cy', 'font-size', 'grid-column-gap', 'grid-row-gap', 'height', 'inline-size', 'line-height', 'minBlock-size', 'min-height', 'min-inline-size', 'min-width', 'max-height', 'max-width', 'outline-offset', 'outline-width', 'perspective', 'shape-margin', 'stroke-dashoffset', 'stroke-width', 'text-indent', 'width', 'word-spacing', 'top', 'bottom', 'left', 'right', 'x', 'y'];
var QUAD_SHORTHANDS = ['margin', 'padding', 'border', 'border-radius'];
var DIRECTIONS = ['top', 'bottom', 'left', 'right'];
QUAD_SHORTHANDS.forEach(function (property) {
  var direction, i, len;
  REQUIRES_UNIT_VALUE.push(property);

  for (i = 0, len = DIRECTIONS.length; i < len; i++) {
    direction = DIRECTIONS[i];
    REQUIRES_UNIT_VALUE.push(property + '-' + direction);
  }
});
var SAMPLE_STYLE, styleConfig;
SAMPLE_STYLE = document.createElement('div').style;

var includes = function includes(target, item) {
  return target && target.indexOf(item) !== -1;
};

var isIterable = function isIterable(target) {
  return target && _typeof(target) === 'object' && typeof target.length === 'number' && !target.nodeType;
};

var toKebabCase = function toKebabCase(string) {
  return string.replace(REGEX_KEBAB, function (e, letter) {
    return "-".concat(letter.toLowerCase());
  });
};

var isPropSupported = function isPropSupported(property) {
  return typeof SAMPLE_STYLE[property] !== 'undefined';
};

var isValueSupported = function isValueSupported(property, value) {
  if (window.CSS && window.CSS.supports) {
    return window.CSS.supports(property, value);
  } else {
    SAMPLE_STYLE[property] = value;
    return SAMPLE_STYLE[property] === '' + value;
  }
};

var getPrefix = function getPrefix(property, skipInitialCheck) {
  var j, len1, prefix;

  if (skipInitialCheck || !isPropSupported(property)) {
    for (j = 0, len1 = POSSIBLE_PREFIXES.length; j < len1; j++) {
      prefix = POSSIBLE_PREFIXES[j];

      if (isPropSupported("-".concat(prefix, "-").concat(property))) {
        /* istanbul ignore next */
        return "-".concat(prefix, "-");
      }
    }
  }

  return '';
};

var normalizeProperty = function normalizeProperty(property) {
  property = toKebabCase(property);

  if (isPropSupported(property)) {
    return property;
  } else {
    return "".concat(getPrefix(property, true)).concat(property);
  }
};

var normalizeValue = function normalizeValue(property, value) {
  if (includes(REQUIRES_UNIT_VALUE, property) && value !== null) {
    value = '' + value;

    if (REGEX_DIGITS.test(value) && !REGEX_LEN_VAL.test(value) && !REGEX_SPACE.test(value)) {
      value += property === 'line-height' ? 'em' : 'px';
    }
  }

  return value;
};

var sort = function sort(array) {
  var great, i, len, less, pivot;

  if (array.length < 2) {
    return array;
  } else {
    pivot = array[0];
    less = [];
    great = [];
    len = array.length;
    i = 0;

    while (++i !== len) {
      if (array[i] <= pivot) {
        less.push(array[i]);
      } else {
        great.push(array[i]);
      }
    }

    return sort(less).concat(pivot, sort(great));
  }
};

var hash = function hash(string) {
  var hsh, i, length;
  hsh = 5381;
  i = -1;
  length = string.length;

  while (++i !== string.length) {
    hsh = (hsh << 5) - hsh + string.charCodeAt(i);
    hsh |= 0;
  }

  return '_' + (hsh < 0 ? hsh * -2 : hsh);
};

var ruleToString = function ruleToString(rule, important) {
  var j, len1, output, prop, property, props, value;
  output = '';
  props = sort(Object.keys(rule));

  for (j = 0, len1 = props.length; j < len1; j++) {
    prop = props[j];

    if (typeof rule[prop] === 'string' || typeof rule[prop] === 'number') {
      property = normalizeProperty(prop);
      value = normalizeValue(property, rule[prop]);

      if (important) {
        value += " !important";
      }

      output += "".concat(property, ":").concat(value, ";");
    }
  }

  return output;
};

var inlineStyleConfig = styleConfig = Object.create(null);

var inlineStyle = function inlineStyle(rule, valueToStore, level) {
  var config, styleEl;

  if (!(config = styleConfig[level])) {
    styleEl = document.createElement('style');
    styleEl.id = "quickcss".concat(level || '');
    document.head.appendChild(styleEl);
    styleConfig[level] = config = {
      el: styleEl,
      content: '',
      cache: Object.create(null)
    };
  }

  if (!config.cache[rule]) {
    config.cache[rule] = valueToStore || true;
    config.el.textContent = config.content += rule;
  }
};

var clearInlineStyle = function clearInlineStyle(level) {
  var config, j, key, keys, len1;

  if (config = styleConfig[level]) {
    if (!config.content) {
      return;
    }

    config.el.textContent = config.content = '';
    keys = Object.keys(config.cache);

    for (j = 0, len1 = keys.length; j < len1; j++) {
      key = keys[j];
      config.cache[key] = null;
    }
  }
};

var version = "1.4.3";

var _quickcss;

var index = _quickcss = function quickcss(targetEl, property, value, important) {
  var computedStyle, i, len, subEl, subProperty, subValue;

  switch (false) {
    case !isIterable(targetEl):
      for (i = 0, len = targetEl.length; i < len; i++) {
        subEl = targetEl[i];

        _quickcss(subEl, property, value);
      }

      break;

    case _typeof(property) !== 'object':
      // Passed a style map
      for (subProperty in property) {
        subValue = property[subProperty];

        _quickcss(targetEl, subProperty, subValue);
      }

      break;

    default:
      property = normalizeProperty(property);

      if (typeof value === 'undefined') {
        computedStyle = targetEl._computedStyle || (targetEl._computedStyle = getComputedStyle(targetEl));
        return computedStyle[property];
      } else if (property) {
        targetEl.style.setProperty(property, normalizeValue(property, value), important ? IMPORTANT : void 0);
      }

  }
};

_quickcss.animation = function (name$$1, frames) {
  var frame, generated, prefix, rules;

  if (name$$1 && typeof name$$1 === 'string' && frames && _typeof(frames) === 'object') {
    prefix = getPrefix('animation');
    generated = '';

    for (frame in frames) {
      rules = frames[frame];
      generated += "".concat(frame, " {").concat(ruleToString(rules), "}");
    }

    generated = "@".concat(prefix, "keyframes ").concat(name$$1, " {").concat(generated, "}");
    return inlineStyle(generated, true, 0);
  }
};

_quickcss.register = function (rule, level, important) {
  var className, ref, style;

  if (rule && _typeof(rule) === 'object') {
    level || (level = 0);
    rule = ruleToString(rule, important);

    if (!(className = (ref = inlineStyleConfig[level]) != null ? ref[rule] : void 0)) {
      className = hash(rule);
      style = ".".concat(className, " {").concat(rule, "}");
      inlineStyle(style, className, level);
    }

    return className;
  }
};

_quickcss.clearRegistered = function (level) {
  return clearInlineStyle(level || 0);
};
/* istanbul ignore next */


_quickcss.UNSET = function () {
  switch (false) {
    case !isValueSupported('display', 'unset'):
      return 'unset';

    case !isValueSupported('display', 'initial'):
      return 'initial';

    case !isValueSupported('display', 'inherit'):
      return 'inherit';
  }
}();

_quickcss.supports = isValueSupported;
_quickcss.supportsProperty = isPropSupported;
_quickcss.normalizeProperty = normalizeProperty;
_quickcss.normalizeValue = normalizeValue;
_quickcss.version = version;function _typeof$1(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$1 = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof$1 = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof$1(obj);
}

var _extend, isArray, isObject, _shouldDeepExtend;

isArray = function isArray(target) {
  return Array.isArray(target);
};

isObject = function isObject(target) {
  return target && Object.prototype.toString.call(target) === '[object Object]' || isArray(target);
};

_shouldDeepExtend = function shouldDeepExtend(options, target, parentKey) {
  if (options.deep) {
    if (options.notDeep) {
      return !options.notDeep[target];
    } else {
      return true;
    }
  } else if (options.deepOnly) {
    return options.deepOnly[target] || parentKey && _shouldDeepExtend(options, parentKey);
  }
}; // else false


var extend = _extend = function extend(options, target, sources, parentKey) {
  var i, key, len, source, sourceValue, subTarget, targetValue;

  if (!target || _typeof$1(target) !== 'object' && typeof target !== 'function') {
    target = {};
  }

  for (i = 0, len = sources.length; i < len; i++) {
    source = sources[i];

    if (source != null) {
      for (key in source) {
        sourceValue = source[key];
        targetValue = target[key];

        if (sourceValue === target || sourceValue === void 0 || sourceValue === null && !options.allowNull && !options.nullDeletes || options.keys && !options.keys[key] || options.notKeys && options.notKeys[key] || options.own && !source.hasOwnProperty(key) || options.globalFilter && !options.globalFilter(sourceValue, key, source) || options.filters && options.filters[key] && !options.filters[key](sourceValue, key, source)) {
          continue;
        }

        if (sourceValue === null && options.nullDeletes) {
          delete target[key];
          continue;
        }

        if (options.globalTransform) {
          sourceValue = options.globalTransform(sourceValue, key, source);
        }

        if (options.transforms && options.transforms[key]) {
          sourceValue = options.transforms[key](sourceValue, key, source);
        }

        switch (false) {
          case !(options.concat && isArray(sourceValue) && isArray(targetValue)):
            target[key] = targetValue.concat(sourceValue);
            break;

          case !(_shouldDeepExtend(options, key, parentKey) && isObject(sourceValue)):
            subTarget = isObject(targetValue) ? targetValue : isArray(sourceValue) ? [] : {};
            target[key] = _extend(options, subTarget, [sourceValue], key);
            break;

          default:
            target[key] = sourceValue;
        }
      }
    }
  }

  return target;
};

var version$1 = "1.7.4";
var modifiers, newBuilder, normalizeKeys, primaryBuilder;

normalizeKeys = function normalizeKeys(keys) {
  var i, key, len, output;

  if (keys) {
    output = {};

    if (_typeof$1(keys) !== 'object') {
      output[keys] = true;
    } else {
      if (!Array.isArray(keys)) {
        keys = Object.keys(keys);
      }

      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        output[key] = true;
      }
    }

    return output;
  }
};

newBuilder = function newBuilder(isBase) {
  var _builder;

  _builder = function builder(target) {
    var theTarget;
    var $_len = arguments.length,
        $_i = -1,
        sources = new Array($_len);

    while (++$_i < $_len) sources[$_i] = arguments[$_i];

    if (_builder.options.target) {
      theTarget = _builder.options.target;
    } else {
      theTarget = target;
      sources.shift();
    }

    return extend(_builder.options, theTarget, sources);
  };

  if (isBase) {
    _builder.isBase = true;
  }

  _builder.options = {};
  Object.defineProperties(_builder, modifiers);
  return _builder;
};

modifiers = {
  'deep': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      _.options.deep = true;
      return _;
    }
  },
  'own': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      _.options.own = true;
      return _;
    }
  },
  'allowNull': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      _.options.allowNull = true;
      return _;
    }
  },
  'nullDeletes': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      _.options.nullDeletes = true;
      return _;
    }
  },
  'concat': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      _.options.concat = true;
      return _;
    }
  },
  'clone': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      _.options.target = {};
      return _;
    }
  },
  'notDeep': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      return function (keys) {
        _.options.notDeep = normalizeKeys(keys);
        return _;
      };
    }
  },
  'deepOnly': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      return function (keys) {
        _.options.deepOnly = normalizeKeys(keys);
        return _;
      };
    }
  },
  'keys': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      return function (keys) {
        _.options.keys = normalizeKeys(keys);
        return _;
      };
    }
  },
  'notKeys': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      return function (keys) {
        _.options.notKeys = normalizeKeys(keys);
        return _;
      };
    }
  },
  'transform': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      return function (transform) {
        if (typeof transform === 'function') {
          _.options.globalTransform = transform;
        } else if (transform && _typeof$1(transform) === 'object') {
          _.options.transforms = transform;
        }

        return _;
      };
    }
  },
  'filter': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      return function (filter) {
        if (typeof filter === 'function') {
          _.options.globalFilter = filter;
        } else if (filter && _typeof$1(filter) === 'object') {
          _.options.filters = filter;
        }

        return _;
      };
    }
  }
};
primaryBuilder = newBuilder(true);
primaryBuilder.version = version$1;
var primaryBuilder$1 = primaryBuilder;function _typeof$2(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$2 = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof$2 = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof$2(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var defined = function defined(subject) {
  return subject !== void 0;
};

var array = function array(subject) {
  return subject instanceof Array;
};

var object = function object(subject) {
  return _typeof$2(subject) === 'object' && subject; // 2nd check is to test against 'null' values
};

var objectPlain = function objectPlain(subject) {
  return object(subject) && Object.prototype.toString.call(subject) === '[object Object]' && subject.constructor === Object;
};

var string = function string(subject) {
  return typeof subject === 'string';
};

var number = function number(subject) {
  return typeof subject === 'number' && !isNaN(subject);
};

var numberLoose = function numberLoose(subject) {
  return number(subject) || string(subject) && number(Number(subject));
};

var iterable = function iterable(subject) {
  return object(subject) && number(subject.length);
};

var function_ = function function_(subject) {
  return typeof subject === 'function';
};

var natives =
/*#__PURE__*/
Object.freeze({
  defined: defined,
  array: array,
  object: object,
  objectPlain: objectPlain,
  string: string,
  number: number,
  numberLoose: numberLoose,
  iterable: iterable,
  function_: function_
});

var domDoc = function domDoc(subject) {
  return subject && subject.nodeType === 9;
};

var domEl = function domEl(subject) {
  return subject && subject.nodeType === 1;
};

var domText = function domText(subject) {
  return subject && subject.nodeType === 3;
};

var domNode = function domNode(subject) {
  return domEl(subject) || domText(subject);
};

var domTextarea = function domTextarea(subject) {
  return subject && subject.nodeName === 'TEXTAREA';
};

var domInput = function domInput(subject) {
  return subject && subject.nodeName === 'INPUT';
};

var domSelect = function domSelect(subject) {
  return subject && subject.nodeName === 'SELECT';
};

var domField = function domField(subject) {
  return domInput(subject) || domTextarea(subject) || domSelect(subject);
};

var dom =
/*#__PURE__*/
Object.freeze({
  domDoc: domDoc,
  domEl: domEl,
  domText: domText,
  domNode: domNode,
  domTextarea: domTextarea,
  domInput: domInput,
  domSelect: domSelect,
  domField: domField
});
var AVAIL_SETS, Checks;
AVAIL_SETS = {
  natives: natives,
  dom: dom
};

Checks =
/*#__PURE__*/
function () {
  _createClass(Checks, [{
    key: "create",
    value: function create() {
      var args;

      if (arguments.length) {
        args = Array.prototype.slice.call(arguments);
      }

      return new Checks(args);
    }
  }]);

  function Checks(sets) {
    _classCallCheck(this, Checks);

    var i, len, set;

    if (sets == null) {
      sets = ['natives'];
    }

    for (i = 0, len = sets.length; i < len; i++) {
      set = sets[i];

      if (AVAIL_SETS[set]) {
        this.load(AVAIL_SETS[set]);
      }
    }
  }

  _createClass(Checks, [{
    key: "load",
    value: function load(set) {
      var key, value;

      if (AVAIL_SETS.natives.string(set)) {
        set = AVAIL_SETS[set];
      }

      if (!AVAIL_SETS.natives.objectPlain(set)) {
        return;
      }

      for (key in set) {
        value = set[key];

        if (key === 'function_') {
          key = 'function';
        }

        this[key] = value;
      }
    }
  }]);

  return Checks;
}();

var index$1 = Checks.prototype.create();function _typeof$3(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$3 = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof$3 = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof$3(obj);
}

function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties$1(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$1(Constructor, staticProps);
  return Constructor;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var template = ['id', 'name', 'type', 'href', 'selected', 'checked', 'className']; // To copy from DOM Elements

var element = ['id', 'ref', 'type', 'name', 'text', 'style', 'class', 'className', 'url', 'href', 'selected', 'checked', 'props', 'attrs', 'passStateToChildren', 'stateTriggers', 'unpassableStates']; // Used in QuickElement::toJSON
// 'relatedInstance'

var IS;
IS = index$1.create('natives', 'dom');
IS.load({
  quickDomEl: function quickDomEl(subject) {
    return subject && subject.constructor.name === 'QuickElement';
  },
  template: function template(subject) {
    return subject && subject.constructor.name === 'QuickTemplate';
  }
}); // batch: (subject)-> subject and subject.constructor.name is 'QuickBatch'

var IS$1 = IS;

var QuickElement, QuickWindow, _quickdom;

QuickElement = null;
QuickWindow = null;

_quickdom = function quickdom() {
  var arg, args, element, i, j, len, prevCount;
  args = new Array(arguments.length);

  for (i = j = 0, len = arguments.length; j < len; i = ++j) {
    arg = arguments[i];
    args[i] = arg;
  }

  prevCount = QuickElement.count;
  element = _quickdom.create(args);

  if (element && element._postCreation && QuickElement.count !== prevCount) {
    element._postCreation();
  }

  return element;
};

_quickdom.create = function (args) {
  var argsLength, child, children, element, i, j, len, options, type;

  switch (false) {
    case !IS$1.array(args[0]):
      return _quickdom.apply(void 0, _toConsumableArray(args[0]));

    case !IS$1.template(args[0]):
      return args[0].spawn();

    case !IS$1.quickDomEl(args[0]):
      if (args[1]) {
        return args[0].updateOptions(args[1]);
      } else {
        return args[0];
      }

    case !(IS$1.domNode(args[0]) || IS$1.domDoc(args[0])):
      if (args[0]._quickElement) {
        return args[0]._quickElement;
      }

      type = args[0].nodeName.toLowerCase().replace('#', '');
      options = args[1] || {};
      options.existing = args[0];
      return new QuickElement(type, options);

    case args[0] !== window:
      return QuickWindow;

    case !IS$1.string(args[0]):
      type = args[0].toLowerCase();

      if (type === 'text') {
        options = IS$1.object(args[1]) ? args[1] : {
          text: args[1] || ''
        };
      } else {
        options = IS$1.object(args[1]) ? args[1] : {};
      }

      element = new QuickElement(type, options);

      if (args.length > 2) {
        children = new Array(argsLength = args.length);
        i = 1;

        while (++i < argsLength) {
          children[i + 1] = args[i];
        }

        for (j = 0, len = children.length; j < len; j++) {
          child = children[j];

          if (IS$1.string(child)) {
            child = _quickdom.text(child);
          }

          if (IS$1.array(child)) {
            child = _quickdom.apply(void 0, _toConsumableArray(child));
          }

          if (IS$1.quickDomEl(child)) {
            element.append(child);
          }
        }
      }

      return element;

    case !(args[0] && (IS$1.domNode(args[0][0]) || IS$1.domDoc(args[0][0]))):
      return _quickdom(args[0][0]);
  }
};

_quickdom.html = function (innerHTML) {
  var children, container;
  container = document.createElement('div');
  container.innerHTML = innerHTML;
  children = Array.prototype.slice.call(container.childNodes);
  return _quickdom.batch(children);
};

_quickdom.isQuickEl = function (target) {
  return IS$1.quickDomEl(target);
};

_quickdom.isEl = function (target) {
  return IS$1.domEl(target);
};

var init = function init(QuickElement_, QuickWindow_) {
  QuickElement = QuickElement_;
  QuickWindow = QuickWindow_;
  return _quickdom;
};

var includes$1 = function includes(target, item) {
  return target && target.indexOf(item) !== -1;
};

var removeItem = function removeItem(target, item) {
  var itemIndex;
  itemIndex = target.indexOf(item);

  if (itemIndex !== -1) {
    target.splice(itemIndex, 1);
  }

  return target;
};

var normalizeElementArg = function normalizeElementArg(targetEl) {
  switch (false) {
    case !IS$1.string(targetEl):
      return quickdom.text(targetEl);

    case !IS$1.domNode(targetEl):
      return quickdom(targetEl);

    case !IS$1.template(targetEl):
      return targetEl.spawn();

    default:
      return targetEl;
  }
};

var isStateStyle = function isStateStyle(string) {
  return string[0] === '$' || string[0] === '@';
};

var registerStyle = function registerStyle(rule, level, important) {
  var cached, i, len, output, prop, props;
  level || (level = 0);
  cached = styleCache.get(rule, level);

  if (cached) {
    return cached;
  }

  output = {
    className: [index.register(rule, level, important)],
    fns: [],
    rule: rule
  };
  props = Object.keys(rule);

  for (i = 0, len = props.length; i < len; i++) {
    prop = props[i];

    if (typeof rule[prop] === 'function') {
      output.fns.push([prop, rule[prop]]);
    }
  }

  return styleCache.set(rule, output, level);
};

var styleCache = new (
/*#__PURE__*/
function () {
  function _class() {
    _classCallCheck$1(this, _class);

    this.keys = Object.create(null);
    this.values = Object.create(null);
  }

  _createClass$1(_class, [{
    key: "get",
    value: function get(key, level) {
      var index;

      if (this.keys[level]) {
        index = this.keys[level].indexOf(key);

        if (index !== -1) {
          return this.values[level][index];
        }
      }
    }
  }, {
    key: "set",
    value: function set(key, value, level) {
      if (!this.keys[level]) {
        this.keys[level] = [];
        this.values[level] = [];
      }

      this.keys[level].push(key);
      this.values[level].push(value);
      return value;
    }
  }]);

  return _class;
}())();
var REGEX_WHITESPACE;
REGEX_WHITESPACE = /\s+/;

var on_ = function on_(eventNames, callback, useCapture, isPrivate) {
  var _this = this;

  var callbackRef, split;

  if (this._eventCallbacks == null) {
    this._eventCallbacks = {
      __refs: {}
    };
  }

  if (IS$1.string(eventNames) && IS$1.function(callback)) {
    split = eventNames.split('.');
    callbackRef = split[1];
    eventNames = split[0];

    if (eventNames === 'inserted' && this._inserted) {
      callback.call(this, this._parent);
      return this;
    }

    eventNames.split(REGEX_WHITESPACE).forEach(function (eventName) {
      var base;

      if (!_this._eventCallbacks[eventName]) {
        _this._eventCallbacks[eventName] = [];

        if (!isPrivate) {
          _this._listenTo(eventName, function (event) {
            return _this._invokeHandlers(eventName, event);
          }, useCapture);
        }
      }

      if (callbackRef) {
        if ((base = _this._eventCallbacks.__refs)[eventName] == null) {
          base[eventName] = {};
        }

        _this._eventCallbacks.__refs[eventName][callbackRef] = callback;
      }

      return _this._eventCallbacks[eventName].push(callback);
    });
  }

  return this;
};

var once = function once(eventNames, callback) {
  var _this2 = this;

  var _onceCallback;

  if (IS$1.string(eventNames) && IS$1.function(callback)) {
    this.on(eventNames, _onceCallback = function onceCallback(event) {
      _this2.off(eventNames, _onceCallback);

      return callback.call(_this2, event);
    });
  }

  return this;
};

var off_ = function off_(eventNames, callback) {
  var _this3 = this;

  var callbackRef, eventName, split;

  if (this._eventCallbacks == null) {
    this._eventCallbacks = {
      __refs: {}
    };
  }

  if (!IS$1.string(eventNames)) {
    for (eventName in this._eventCallbacks) {
      this.off(eventName);
    }
  } else {
    split = eventNames.split('.');
    callbackRef = split[1];
    eventNames = split[0];
    eventNames.split(REGEX_WHITESPACE).forEach(function (eventName) {
      var ref;

      if (_this3._eventCallbacks[eventName]) {
        if (callback == null) {
          callback = (ref = _this3._eventCallbacks.__refs[eventName]) != null ? ref[callbackRef] : void 0;
        }

        if (IS$1.function(callback)) {
          return removeItem(_this3._eventCallbacks[eventName], callback);
        } else if (!callbackRef) {
          return _this3._eventCallbacks[eventName].length = 0;
        }
      }
    });
  }

  return this;
};

var emit = function emit(eventName) {
  var bubbles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var cancelable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var data = arguments.length > 3 ? arguments[3] : undefined;
  var event;

  if (eventName && IS$1.string(eventName)) {
    event = document.createEvent('Event');
    event.initEvent(eventName, bubbles, cancelable);

    if (data && _typeof$3(data) === 'object') {
      primaryBuilder$1(event, data);
    }

    this.el.dispatchEvent(event);
  }

  return this;
};

var emitPrivate = function emitPrivate(eventName, arg) {
  var ref;

  if (eventName && IS$1.string(eventName) && ((ref = this._eventCallbacks) != null ? ref[eventName] : void 0)) {
    this._invokeHandlers(eventName, arg);
  }

  return this;
};

var _invokeHandlers = function _invokeHandlers(eventName, arg) {
  var callbacks, cb, i, len;
  callbacks = this._eventCallbacks[eventName].slice();

  for (i = 0, len = callbacks.length; i < len; i++) {
    cb = callbacks[i];
    cb.call(this, arg);
  }
};
/* istanbul ignore next */


var _listenTo = function _listenTo(eventName, callback, useCapture) {
  var eventNameToListenFor, listenMethod;
  listenMethod = this.el.addEventListener ? 'addEventListener' : 'attachEvent';
  eventNameToListenFor = this.el.addEventListener ? eventName : "on".concat(eventName);
  this.el[listenMethod](eventNameToListenFor, callback, useCapture);
  return this;
};

function events(QuickElement) {
  QuickElement.prototype.on = on_;
  QuickElement.prototype.once = once;
  QuickElement.prototype.off = off_;
  QuickElement.prototype.emit = emit;
  QuickElement.prototype.emitPrivate = emitPrivate;
  QuickElement.prototype._invokeHandlers = _invokeHandlers;
  return QuickElement.prototype._listenTo = _listenTo;
}
/**
* Sets/gets the value of a style property. In getter mode the computed property of
* the style will be returned unless the element is not inserted into the DOM. In
* webkit browsers all computed properties of a detached node are always an empty
* string but in gecko they reflect on the actual computed value, hence we need
* to "normalize" this behavior and make sure that even on gecko an empty string
* is returned
* @return {[type]} [description]
*/


var style = function style(property) {
  var _this = this;

  var args, i, key, keys, result, value;

  if (this.type === 'text') {
    return;
  }

  args = arguments;

  if (IS$1.string(property)) {
    value = typeof args[1] === 'function' ? args[1].call(this, this.related) : args[1];

    if (args[1] === null && IS$1.defined(this.currentStateStyle(property)) && !IS$1.function(this.currentStateStyle(property))) {
      value = index.UNSET;
    }

    if (value && typeof value.then === 'function') {
      value.then(function (value) {
        return index(_this.el, property, value, _this.options.forceStyle);
      });
    } else {
      result = index(this.el, property, value, this.options.forceStyle);
    }

    if (args.length === 1) {
      /* istanbul ignore next */
      if (this._inserted) {
        return result;
      } else if (!result) {
        return result;
      } else {
        return '';
      }
    }
  } else if (IS$1.object(property)) {
    keys = Object.keys(property);
    i = -1;

    while (key = keys[++i]) {
      this.style(key, property[key]);
    }
  }

  return this;
};
/**
* Attempts to resolve the value for a given property in the following order if each one isn't a valid value:
* 1. from computed style (for dom-inserted els)
* 2. from DOMElement.style object (for non-inserted els; if options.styleAfterInsert, will only have state styles)
* 3. from provided style options
* (for non-inserted els; checking only $base since state styles will always be applied to the style object even for non-inserted)
 */


var styleSafe = function styleSafe(property, skipComputed) {
  var computed, result, sample;

  if (this.type === 'text') {
    return;
  }

  sample = this.el.style[property];

  if (IS$1.string(sample) || IS$1.number(sample)) {
    computed = skipComputed ? 0 : this.style(property);
    result = computed || this.el.style[property] || this.currentStateStyle(property) || '';

    if (typeof result === 'function') {
      return result.call(this, this.related);
    } else {
      return result;
    }
  }

  return this;
};

var styleParsed = function styleParsed(property, skipComputed) {
  return parseFloat(this.styleSafe(property, skipComputed));
};

var recalcStyle = function recalcStyle(recalcChildren) {
  var child, j, len, ref, targetStyles;
  targetStyles = this._resolveFnStyles(this._getActiveStates(), true);
  this.style(targetStyles);

  if (recalcChildren) {
    ref = this._children;

    for (j = 0, len = ref.length; j < len; j++) {
      child = ref[j];
      child.recalcStyle();
    }
  }

  return this;
};

var currentStateStyle = function currentStateStyle(property) {
  var i, state, states;

  if (property) {
    if (this._state.length) {
      states = this._state.slice();

      if (this._stateShared && this._stateShared.length) {
        var _states;

        (_states = states).push.apply(_states, _toConsumableArray(this._stateShared));
      }

      i = states.length;

      while (state = states[--i]) {
        if (this._styles[state] && IS$1.defined(this._styles[state].rule[property])) {
          return this._styles[state].rule[property];
        }
      }
    }

    if (this._styles.base) {
      return this._styles.base.rule[property];
    }
  }
};

var hide = function hide() {
  return this.style('display', 'none');
};

var show = function show(display) {
  var ref;

  if (!display) {
    display = this.currentStateStyle('display');

    if (display === 'none' || !display) {
      display = 'block';
    }
  }

  if (display == null) {
    display = ((ref = this._styles.base) != null ? ref.display : void 0) || 'block';
  }

  return this.style('display', display);
};

var orientationGetter = {
  get: function get() {
    if (this.width > this.height) {
      return 'landscape';
    } else {
      return 'portrait';
    }
  }
};
var aspectRatioGetter = {
  get: function get() {
    return this.width / this.height;
  }
};

function style$1(QuickElement) {
  Object.defineProperties(QuickElement.prototype, {
    'orientation': orientationGetter,
    'aspectRatio': aspectRatioGetter,
    'rect': {
      get: function get() {
        return this.el.getBoundingClientRect();
      }
    },
    'width': {
      get: function get() {
        return parseFloat(this.style('width'));
      },
      set: function set(value) {
        return this.style('width', value);
      }
    },
    'height': {
      get: function get() {
        return parseFloat(this.style('height'));
      },
      set: function set(value) {
        return this.style('height', value);
      }
    }
  });
  QuickElement.prototype.style = style;
  QuickElement.prototype.styleSafe = styleSafe;
  QuickElement.prototype.styleParsed = styleParsed;
  QuickElement.prototype.recalcStyle = recalcStyle;
  QuickElement.prototype.currentStateStyle = currentStateStyle;
  QuickElement.prototype.hide = hide;
  return QuickElement.prototype.show = show;
}

var QuickWindow$1;
var QuickWindow$2 = QuickWindow$1 = {
  type: 'window',
  el: window,
  raw: window,
  _eventCallbacks: {
    __refs: {}
  }
};
QuickWindow$1.on = on_;
QuickWindow$1.off = off_;
QuickWindow$1.emit = emit;
QuickWindow$1.emitPrivate = emitPrivate;
QuickWindow$1._listenTo = _listenTo;
QuickWindow$1._invokeHandlers = _invokeHandlers;
Object.defineProperties(QuickWindow$1, {
  'width': {
    get: function get() {
      return window.innerWidth;
    }
  },
  'height': {
    get: function get() {
      return window.innerHeight;
    }
  },
  'orientation': orientationGetter,
  'aspectRatio': aspectRatioGetter
});
var MediaQuery, RULE_DEILIMITER;
RULE_DEILIMITER = /,\s*/;
var MediaQuery$1 = MediaQuery = new function () {
  var callbacks, testRule;
  callbacks = [];
  window.addEventListener('resize', function () {
    var callback, i, len;

    for (i = 0, len = callbacks.length; i < len; i++) {
      callback = callbacks[i];
      callback();
    }
  });

  this.parseQuery = function (target, queryString) {
    var querySplit, rules, source;
    querySplit = queryString.split('(');
    source = querySplit[0];

    source = function () {
      switch (source) {
        case 'window':
          return QuickWindow$2;

        case 'parent':
          return target.parent;

        case 'self':
          return target;

        default:
          return target.parentMatching(function (parent) {
            return parent.ref === source.slice(1);
          });
      }
    }();

    rules = querySplit[1].slice(0, -1).split(RULE_DEILIMITER).map(function (rule) {
      var getter, key, keyPrefix, max, min, split, value;
      split = rule.split(':');
      value = parseFloat(split[1]);

      if (isNaN(value)) {
        value = split[1];
      }

      key = split[0];
      keyPrefix = key.slice(0, 4);
      max = keyPrefix === 'max-';
      min = !max && keyPrefix === 'min-';

      if (max || min) {
        key = key.slice(4);
      }

      getter = function () {
        switch (key) {
          case 'orientation':
            return function () {
              return source.orientation;
            };

          case 'aspect-ratio':
            return function () {
              return source.aspectRatio;
            };

          case 'width':
          case 'height':
            return function () {
              return source[key];
            };

          default:
            return function () {
              var parsedValue, stringValue;
              stringValue = source.style(key);
              parsedValue = parseFloat(stringValue);

              if (isNaN(parsedValue)) {
                return stringValue;
              } else {
                return parsedValue;
              }
            };
        }
      }();

      return {
        key: key,
        value: value,
        min: min,
        max: max,
        getter: getter
      };
    });
    return {
      source: source,
      rules: rules
    };
  };

  this.register = function (target, queryString) {
    var callback, query;
    query = this.parseQuery(target, queryString);

    if (query.source) {
      callbacks.push(callback = function callback() {
        return testRule(target, query, queryString);
      });
      callback();
    }

    return query;
  };

  testRule = function testRule(target, query, queryString) {
    var currentValue, i, len, passed, ref, rule;
    passed = true;
    ref = query.rules;

    for (i = 0, len = ref.length; i < len; i++) {
      rule = ref[i];
      currentValue = rule.getter();

      passed = function () {
        switch (false) {
          case !rule.min:
            return currentValue >= rule.value;

          case !rule.max:
            return currentValue <= rule.value;

          default:
            return currentValue === rule.value;
        }
      }();

      if (!passed) {
        break;
      }
    }

    return target.state(queryString, passed);
  };

  return this;
}();
var StateChain;

var StateChain$1 = StateChain =
/*#__PURE__*/
function () {
  function StateChain(states) {
    _classCallCheck$1(this, StateChain);

    this.string = states.join('+');
    this.array = states.slice();
    this.length = states.length;
  }

  _createClass$1(StateChain, [{
    key: "includes",
    value: function includes(target) {
      var i, len, ref, state;
      ref = this.array;

      for (i = 0, len = ref.length; i < len; i++) {
        state = ref[i];

        if (state === target) {
          return true;
        }
      }

      return false;
    }
  }, {
    key: "without",
    value: function without(target) {
      return this.array.filter(function (state) {
        return state !== target;
      }).join('+');
    }
  }, {
    key: "isApplicable",
    value: function isApplicable(target, otherActive) {
      var active;
      active = this.array.filter(function (state) {
        return state === target || otherActive.indexOf(state) !== -1;
      });
      return active.length === this.array.length;
    }
  }]);

  return StateChain;
}();

var BASE_STATE_TRIGGERS, CACHED_FN_INSERTED;
BASE_STATE_TRIGGERS = {
  'hover': {
    on: 'mouseenter',
    off: 'mouseleave',
    bubbles: true
  },
  'focus': {
    on: 'focus',
    off: 'blur',
    bubbles: true
  }
};

var _normalizeOptions = function _normalizeOptions() {
  var base1, base2, base3, base4, base5;

  if (this.options.relatedInstance) {
    (base1 = this.options).related || (base1.related = this.options.relatedInstance);
    this.options.relatedInstance = null;
  }

  this.related = (base2 = this.options).related != null ? base2.related : base2.related = this;

  if (this.options.class) {
    this.options.className = this.options.class;
  }

  if (this.options.url) {
    this.options.href = this.options.url;
  }

  if ((base3 = this.options).unpassableStates == null) {
    base3.unpassableStates = [];
  }

  if ((base4 = this.options).passStateToChildren == null) {
    base4.passStateToChildren = true;
  }

  if ((base5 = this.options).passDataToChildren == null) {
    base5.passDataToChildren = true;
  }

  this.options.stateTriggers = this.options.stateTriggers ? primaryBuilder$1.clone.deep(BASE_STATE_TRIGGERS, this.options.stateTriggers) : BASE_STATE_TRIGGERS;

  if (this.type === 'text') {
    primaryBuilder$1(this, this._parseTexts(this.options.text, this._texts));
  } else {
    primaryBuilder$1(this, this._parseStyles(this.options.style, this._styles));
  }
};

var _parseStyles = function _parseStyles(styles, store) {
  var _mediaStates, _providedStates, _providedStatesShared, _stateShared, _styles, base, _flattenNestedStates, forceStyle, i, keys, len, specialStates, state, stateStyles, state_, states;

  if (!IS$1.objectPlain(styles)) {
    return;
  }

  keys = Object.keys(styles);
  states = keys.filter(function (key) {
    return isStateStyle(key);
  });
  specialStates = removeItem(states.slice(), '$base');
  _mediaStates = states.filter(function (key) {
    return key[0] === '@';
  }).map(function (state) {
    return state.slice(1);
  });
  _providedStates = states.map(function (state) {
    return state.slice(1); // Remove '$' prefix
  });
  _styles = store || {};
  _stateShared = _providedStatesShared = void 0;
  base = !includes$1(states, '$base') ? styles : styles.$base;
  _styles.base = registerStyle(base, 0, forceStyle = this.options.forceStyle);

  if (specialStates.length) {
    _flattenNestedStates = function flattenNestedStates(styleObject, chain, level) {
      var hasNonStateProps, i, len, output, state, stateChain, state_, styleKeys;
      styleKeys = Object.keys(styleObject);
      output = {};
      hasNonStateProps = false;

      for (i = 0, len = styleKeys.length; i < len; i++) {
        state = styleKeys[i];

        if (!isStateStyle(state)) {
          hasNonStateProps = true;
          output[state] = styleObject[state];
        } else {
          chain.push(state_ = state.slice(1));
          stateChain = new StateChain$1(chain);

          if (_stateShared == null) {
            _stateShared = [];
          }

          if (_providedStatesShared == null) {
            _providedStatesShared = [];
          }

          _providedStatesShared.push(stateChain);

          if (state[0] === '@') {
            _mediaStates.push(state_);
          }

          _styles[stateChain.string] = registerStyle(_flattenNestedStates(styleObject[state], chain, level + 1), level + 1, forceStyle);
        }
      }

      if (hasNonStateProps) {
        return output;
      }
    };

    for (i = 0, len = specialStates.length; i < len; i++) {
      state = specialStates[i];
      state_ = state.slice(1);
      stateStyles = _flattenNestedStates(styles[state], [state_], 1);

      if (stateStyles) {
        _styles[state_] = registerStyle(stateStyles, 1);
      }
    }
  }

  return {
    _styles: _styles,
    _mediaStates: _mediaStates,
    _stateShared: _stateShared,
    _providedStates: _providedStates,
    _providedStatesShared: _providedStatesShared
  };
};

var _parseTexts = function _parseTexts(texts, store) {
  var _providedStates, _texts, i, len, state, states;

  if (!IS$1.objectPlain(texts)) {
    return;
  }

  states = Object.keys(texts).map(function (state) {
    return state.slice(1);
  });
  _providedStates = states.filter(function (state) {
    return state !== 'base';
  });
  _texts = store || {};
  _texts = {
    base: ''
  };

  for (i = 0, len = states.length; i < len; i++) {
    state = states[i];
    _texts[state] = texts['$' + state];
  }

  return {
    _texts: _texts,
    _providedStates: _providedStates
  };
};

var _applyOptions = function _applyOptions() {
  var _this = this;

  var event, handler, method, ref, ref1, ref2, value;

  if (ref = this.options.id || this.options.ref) {
    this.attr('data-ref', this.ref = ref);
  }

  if (this.options.id) {
    this.el.id = this.options.id;
  }

  if (this.options.className) {
    this.el.className = this.options.className;
  }

  if (this.options.src) {
    this.el.src = this.options.src;
  }

  if (this.options.href) {
    this.el.href = this.options.href;
  }

  if (this.options.type) {
    this.el.type = this.options.type;
  }

  if (this.options.name) {
    this.el.name = this.options.name;
  }

  if (this.options.value) {
    this.el.value = this.options.value;
  }

  if (this.options.selected) {
    this.el.selected = this.options.selected;
  }

  if (this.options.checked) {
    this.el.checked = this.options.checked;
  }

  if (this.options.props) {
    this.prop(this.options.props);
  }

  if (this.options.attrs) {
    this.attr(this.options.attrs);
  }

  this._applyRegisteredStyle(this._styles.base, null, null, this.options.styleAfterInsert);

  if (this._texts) {
    this.text = this._texts.base;
  }

  this.on('inserted', CACHED_FN_INSERTED, false, true);

  if (this.options.invokeComputersOnce) {
    this._invokedComputers = {};
  }

  if (this.options.recalcOnResize) {
    window.addEventListener('resize', function () {
      return _this.recalcStyle();
    });
  }

  if (this.options.events) {
    ref1 = this.options.events;

    for (event in ref1) {
      handler = ref1[event];
      this.on(event, handler);
    }
  }

  if (this.options.methods) {
    ref2 = this.options.methods;

    for (method in ref2) {
      value = ref2[method];

      if (!this[method]) {
        if (IS$1.function(value)) {
          this[method] = value;
        } else if (IS$1.object(value)) {
          Object.defineProperty(this, method, {
            configurable: true,
            get: value.get,
            set: value.set
          });
        }
      }
    }
  }

  if (this.type !== 'text' && IS$1.object(this.options.text)) {
    this.append(_quickdom('text', {
      text: this.options.text
    }));
  }
};

var _postCreation = function _postCreation(data) {
  if (this.options.computers) {
    if (data && this.options.data) {
      data = primaryBuilder$1.clone(this.options.data, data);
    }

    data || (data = this.options.data);
    this.applyData(data, false);

    if (this.options.computers._init) {
      this._runComputer('_init', data);
    }
  }

  if (this.options.state) {
    this.state(this.options.state);
  }
};

var _attachStateEvents = function _attachStateEvents(force) {
  var _this2 = this;

  var states;
  states = Object.keys(this.options.stateTriggers);
  states.forEach(function (state) {
    var disabler, enabler, trigger;
    trigger = _this2.options.stateTriggers[state];

    if (!includes$1(_this2._providedStates, state) && !force && !trigger.force) {
      return;
    }

    enabler = IS$1.string(trigger) ? trigger : trigger.on;

    if (IS$1.object(trigger)) {
      disabler = trigger.off;
    }

    _this2._listenTo(enabler, function () {
      return _this2.state(state, true, trigger.bubbles);
    });

    if (disabler) {
      return _this2._listenTo(disabler, function () {
        return _this2.state(state, false, trigger.bubbles);
      });
    }
  });
};

var _proxyParent = function _proxyParent() {
  var parent;
  parent = void 0;
  return Object.defineProperty(this, '_parent', {
    get: function get() {
      return parent;
    },
    set: function set(newParent) {
      var _this3 = this;

      var lastParent;

      if (parent = newParent) {
        lastParent = this.parents.slice(-1)[0];

        if (lastParent.raw === document.documentElement) {
          this._unproxyParent(newParent);
        } else {
          parent.on('inserted', function () {
            if (parent === newParent) {
              return _this3._unproxyParent(newParent);
            }
          });
        }
      }
    }
  });
};

var _unproxyParent = function _unproxyParent(newParent) {
  delete this._parent;
  this._parent = newParent;
  this.emitPrivate('inserted', newParent);
};

CACHED_FN_INSERTED = function CACHED_FN_INSERTED() {
  var i, len, mediaStates, queryString, results;
  this._inserted = this;

  if (this.options.styleAfterInsert) {
    this.recalcStyle();
  }

  if ((mediaStates = this._mediaStates) && this._mediaStates.length) {
    this._mediaStates = Object.create(null);
    results = [];

    for (i = 0, len = mediaStates.length; i < len; i++) {
      queryString = mediaStates[i];
      results.push(this._mediaStates[queryString] = MediaQuery$1.register(this, queryString));
    }

    return results;
  }
};

function init$1(QuickElement) {
  QuickElement.prototype._normalizeOptions = _normalizeOptions;
  QuickElement.prototype._parseStyles = _parseStyles;
  QuickElement.prototype._parseTexts = _parseTexts;
  QuickElement.prototype._applyOptions = _applyOptions;
  QuickElement.prototype._postCreation = _postCreation;
  QuickElement.prototype._attachStateEvents = _attachStateEvents;
  QuickElement.prototype._proxyParent = _proxyParent;
  return QuickElement.prototype._unproxyParent = _unproxyParent;
}

function aliases(QuickElement) {
  return Object.defineProperties(QuickElement.prototype, {
    'raw': {
      get: function get() {
        return this.el;
      }
    },
    '0': {
      get: function get() {
        return this.el;
      }
    },
    'css': {
      get: function get() {
        return this.style;
      }
    },
    'replaceWith': {
      get: function get() {
        return this.replace;
      }
    },
    'removeListener': {
      get: function get() {
        return this.off;
      }
    }
  });
}

var parentsUntil = function parentsUntil(filter) {
  return _getParents(this, filter);
};

var parentMatching = function parentMatching(filter) {
  var isRef, nextParent;

  if (IS$1.function(filter) || (isRef = IS$1.string(filter))) {
    nextParent = this.parent;

    while (nextParent) {
      if (isRef) {
        if (nextParent.ref === filter) {
          return nextParent;
        }
      } else {
        if (filter(nextParent)) {
          return nextParent;
        }
      }

      nextParent = nextParent.parent;
    }
  }
};

var query = function query(selector) {
  return _quickdom(this.raw.querySelector(selector));
};

var queryAll = function queryAll(selector) {
  var i, item, len, output, result;
  result = this.raw.querySelectorAll(selector);
  output = [];

  for (i = 0, len = result.length; i < len; i++) {
    item = result[i];
    output.push(item);
  }

  return _quickdom.batch(output);
};

var _getParents = function _getParents(targetEl, filter) {
  var isRef, nextParent, parents;

  if (!IS$1.function(filter) && !(isRef = IS$1.string(filter))) {
    filter = void 0;
  }

  parents = [];
  nextParent = targetEl.parent;

  while (nextParent) {
    parents.push(nextParent);
    nextParent = nextParent.parent;

    if (isRef) {
      if (nextParent && nextParent.ref === filter) {
        nextParent = null;
      }
    } else if (filter) {
      if (filter(nextParent)) {
        nextParent = null;
      }
    }
  }

  return parents;
};

var _getChildRefs = function _getChildRefs(target, freshCopy) {
  var child, childRefs, children, el, i, len, ref, refs;

  if (freshCopy || !target._childRefs) {
    target._childRefs = {};
  }

  refs = target._childRefs;

  if (target.ref) {
    refs[target.ref] = target;
  }

  children = target.children;

  if (children.length) {
    for (i = 0, len = children.length; i < len; i++) {
      child = children[i];
      childRefs = _getChildRefs(child, freshCopy);

      for (ref in childRefs) {
        el = childRefs[ref];
        refs[ref] || (refs[ref] = el);
      }
    }
  }

  return refs;
};

var _getIndexByProp = function _getIndexByProp(main, prop) {
  var parent;

  if (!(parent = main.parent)) {
    return null;
  } else {
    return parent.children.filter(function (child) {
      return child[prop] === main[prop];
    }).indexOf(main);
  }
};

var _filterElements = function _filterElements(array) {
  var i, item, len, output;

  if (!array.length) {
    return array;
  } else {
    output = [];

    for (i = 0, len = array.length; i < len; i++) {
      item = array[i];

      if (item.type !== 'text') {
        output.push(item);
      }
    }

    return output;
  }
};

function traversing(QuickElement) {
  QuickElement.prototype.parentsUntil = parentsUntil;
  QuickElement.prototype.parentMatching = parentMatching;
  QuickElement.prototype.query = query;
  QuickElement.prototype.queryAll = queryAll;
  return Object.defineProperties(QuickElement.prototype, {
    'children': {
      get: function get() {
        var child, i, len, ref1;

        if (this.el.childNodes.length !== this._children.length) {
          // Re-collect children	
          this._children.length = 0; // Empty out children array

          ref1 = this.el.childNodes;

          for (i = 0, len = ref1.length; i < len; i++) {
            child = ref1[i];

            if (child.nodeType < 4) {
              this._children.push(_quickdom(child));
            }
          }
        }

        return this._children;
      }
    },
    'elementChildren': {
      get: function get() {
        return _filterElements(this.children);
      }
    },
    'parent': {
      get: function get() {
        if ((!this._parent || this._parent.el !== this.el.parentNode) && !IS$1.domDoc(this.el.parentNode)) {
          this._parent = _quickdom(this.el.parentNode);
        }

        return this._parent;
      }
    },
    'parents': {
      get: function get() {
        return _getParents(this);
      }
    },
    'next': {
      get: function get() {
        return _quickdom(this.el.nextSibling);
      }
    },
    'nextEl': {
      get: function get() {
        return _quickdom(this.el.nextElementSibling);
      }
    },
    'nextElAll': {
      get: function get() {
        return _filterElements(this.nextAll);
      }
    },
    'nextAll': {
      get: function get() {
        var nextSibling, siblings;
        siblings = [];
        nextSibling = _quickdom(this.el.nextSibling);

        while (nextSibling) {
          siblings.push(nextSibling);
          nextSibling = nextSibling.next;
        }

        return siblings;
      }
    },
    'prev': {
      get: function get() {
        return _quickdom(this.el.previousSibling);
      }
    },
    'prevEl': {
      get: function get() {
        return _quickdom(this.el.previousElementSibling);
      }
    },
    'prevElAll': {
      get: function get() {
        return _filterElements(this.prevAll);
      }
    },
    'prevAll': {
      get: function get() {
        var prevSibling, siblings;
        siblings = [];
        prevSibling = _quickdom(this.el.previousSibling);

        while (prevSibling) {
          siblings.push(prevSibling);
          prevSibling = prevSibling.prev;
        }

        return siblings;
      }
    },
    'siblings': {
      get: function get() {
        return this.prevAll.reverse().concat(this.nextAll);
      }
    },
    'elementSiblings': {
      get: function get() {
        return _filterElements(this.siblings);
      }
    },
    'child': {
      get: function get() {
        return this._childRefs || _getChildRefs(this);
      }
    },
    'childf': {
      get: function get() {
        return _getChildRefs(this, true);
      }
    },
    'firstChild': {
      get: function get() {
        return this.children[0];
      }
    },
    'lastChild': {
      get: function get() {
        var children;
        children = this.children;
        return children[children.length - 1];
      }
    },
    'index': {
      get: function get() {
        var parent;

        if (!(parent = this.parent)) {
          return null;
        } else {
          return parent.children.indexOf(this);
        }
      }
    },
    'indexType': {
      get: function get() {
        return _getIndexByProp(this, 'type');
      }
    },
    'indexRef': {
      get: function get() {
        return _getIndexByProp(this, 'ref');
      }
    }
  });
}

_quickdom.query = function (target) {
  return _quickdom(document).query(target);
};

_quickdom.queryAll = function (target) {
  return _quickdom(document).queryAll(target);
};

var DUMMY_ARRAY;
DUMMY_ARRAY = [];

var state = function state(targetState, value, bubbles, source) {
  var activeStates, child, desiredValue, i, j, key, keys, len, prop, ref, toggle;

  if (arguments.length === 0) {
    return this._state.slice();
  }

  if (arguments.length === 1) {
    if (IS$1.string(targetState)) {
      return includes$1(this._state, targetState);
    } else if (IS$1.object(targetState)) {
      keys = Object.keys(targetState);
      i = -1;

      while (key = keys[++i]) {
        this.state(key, targetState[key]);
      }

      return this;
    }
  } else if (this._statePipeTarget && source !== this) {
    this._statePipeTarget.state(targetState, value, bubbles, this);

    return this;
  } else if (IS$1.string(targetState)) {
    if (targetState[0] === '$') {
      targetState = targetState.slice(1);
    }

    if (targetState === 'base') {
      return this;
    }

    desiredValue = !!value; // Convert the value to a boolean

    activeStates = this._getActiveStates(targetState, false); // ==== Toggle styles for this state =================================================================================

    if (this.state(targetState) !== desiredValue) {
      prop = this.type === 'text' ? 'Text' : 'Style';

      if (desiredValue) {
        //is on
        this._state.push(targetState);

        toggle = 'ON';
      } else {
        removeItem(this._state, targetState);
        toggle = 'OFF';
      }

      this['_turn' + prop + toggle](targetState, activeStates);
      this.emitPrivate("stateChange:".concat(targetState), desiredValue);
    } // ==== Pass state to parent/children =================================================================================


    if (!includes$1(this.options.unpassableStates, targetState)) {
      if (bubbles) {
        if (this.parent) {
          this._parent.state(targetState, value, true, source || this);
        }
      } else if (this.options.passStateToChildren) {
        ref = this._children;

        for (j = 0, len = ref.length; j < len; j++) {
          child = ref[j];
          child.state(targetState, value, false, source || this);
        }
      }
    }

    return this;
  }
};

var toggleState = function toggleState(targetState) {
  return this.state(targetState, !this.state(targetState));
};

var resetState = function resetState() {
  var activeState, j, len, ref;
  ref = this._state.slice();

  for (j = 0, len = ref.length; j < len; j++) {
    activeState = ref[j];
    this.state(activeState, false);
  }

  return this;
};

var pipeState = function pipeState(targetEl) {
  var activeState, j, len, ref;

  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl) && targetEl !== this) {
      this._statePipeTarget = targetEl;
      ref = this._state;

      for (j = 0, len = ref.length; j < len; j++) {
        activeState = ref[j];
        targetEl.state(activeState, true);
      }
    }
  } else if (targetEl === false) {
    delete this._statePipeTarget;
  }

  return this;
};

var _applyRegisteredStyle = function _applyRegisteredStyle(targetStyle, superiorStates, includeBase, skipFns) {
  var className, entry, j, k, len, len1, ref, ref1, superiorStyles;

  if (targetStyle) {
    ref = targetStyle.className;

    for (j = 0, len = ref.length; j < len; j++) {
      className = ref[j];
      this.addClass(className);
    }

    if (targetStyle.fns.length && !skipFns) {
      if (superiorStates) {
        superiorStyles = this._resolveFnStyles(superiorStates, includeBase);
      }

      ref1 = targetStyle.fns;

      for (k = 0, len1 = ref1.length; k < len1; k++) {
        entry = ref1[k];

        if (!(superiorStyles && superiorStyles[entry[0]])) {
          this.style(entry[0], entry[1]);
        }
      }
    }
  }
};

var _removeRegisteredStyle = function _removeRegisteredStyle(targetStyle, superiorStates, includeBase) {
  var className, entry, j, k, len, len1, ref, ref1, resetValue, superiorStyles;
  ref = targetStyle.className;

  for (j = 0, len = ref.length; j < len; j++) {
    className = ref[j];
    this.removeClass(className);
  }

  if (targetStyle.fns.length) {
    if (superiorStates) {
      superiorStyles = this._resolveFnStyles(superiorStates, includeBase);
    }

    ref1 = targetStyle.fns;

    for (k = 0, len1 = ref1.length; k < len1; k++) {
      entry = ref1[k];
      resetValue = superiorStyles && superiorStyles[entry[0]] || null;
      this.style(entry[0], resetValue);
    }
  }
};

var _turnStyleON = function _turnStyleON(targetState, activeStates) {
  var j, len, sharedStates, skipFns, stateChain;
  skipFns = this.options.styleAfterInsert && !this._inserted;

  if (this._styles[targetState]) {
    this._applyRegisteredStyle(this._styles[targetState], this._getSuperiorStates(targetState, activeStates), false, skipFns);
  }

  if (this._providedStatesShared) {
    sharedStates = this._getSharedStates(targetState);

    for (j = 0, len = sharedStates.length; j < len; j++) {
      stateChain = sharedStates[j];

      if (!includes$1(this._stateShared, stateChain.string)) {
        this._stateShared.push(stateChain.string);
      }

      this._applyRegisteredStyle(this._styles[stateChain.string], null, null, skipFns);
    }
  }
};

var _turnStyleOFF = function _turnStyleOFF(targetState, activeStates) {
  var activeSharedStates, j, len, sharedStates, stateChain, targetStyle;

  if (this._styles[targetState]) {
    this._removeRegisteredStyle(this._styles[targetState], activeStates, true);
  }

  if (this._providedStatesShared) {
    sharedStates = this._getSharedStates(targetState);

    if (sharedStates.length === 0) {
      return;
    }

    for (j = 0, len = sharedStates.length; j < len; j++) {
      stateChain = sharedStates[j];
      removeItem(this._stateShared, stateChain.string);
      targetStyle = this._styles[stateChain.string];

      if (targetStyle.fns.length && this._stateShared.length && !activeSharedStates) {
        activeSharedStates = this._stateShared.filter(function (state) {
          return !includes$1(state, targetState);
        });
        activeStates = activeStates.concat(activeSharedStates);
      }

      this._removeRegisteredStyle(targetStyle, activeStates, true);
    }
  }
};

var _turnTextON = function _turnTextON(targetState, activeStates) {
  var superiorStates, targetText;

  if (this._texts && IS$1.string(targetText = this._texts[targetState])) {
    superiorStates = this._getSuperiorStates(targetState, activeStates);

    if (!superiorStates.length) {
      this.text = targetText;
    }
  }
};

var _turnTextOFF = function _turnTextOFF(targetState, activeStates) {
  var targetText;

  if (this._texts && IS$1.string(targetText = this._texts[targetState])) {
    activeStates = activeStates.filter(function (state) {
      return state !== targetState;
    });
    targetText = this._texts[activeStates[activeStates.length - 1]];

    if (targetText == null) {
      targetText = this._texts.base;
    }

    this.text = targetText;
  }
};

var _getActiveStates = function _getActiveStates(stateToExclude) {
  var includeSharedStates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var activeStates, j, len, plainStates;

  if (!this._providedStates) {
    return DUMMY_ARRAY;
  }

  activeStates = plainStates = this._state;

  if (stateToExclude) {
    plainStates = [];

    for (j = 0, len = activeStates.length; j < len; j++) {
      state = activeStates[j];

      if (state !== stateToExclude) {
        plainStates.push(state);
      }
    }
  }

  if (!includeSharedStates || !this._providedStatesShared) {
    return plainStates;
  } else {
    return plainStates.concat(this._stateShared);
  }
};

var _getSuperiorStates = function _getSuperiorStates(targetState, activeStates) {
  var candidate, j, len, superior, targetStateIndex;
  targetStateIndex = this._providedStates.indexOf(targetState);

  if (targetStateIndex === this._providedStates.length - 1) {
    return DUMMY_ARRAY;
  }

  superior = [];

  for (j = 0, len = activeStates.length; j < len; j++) {
    candidate = activeStates[j];

    if (this._providedStates.indexOf(candidate) > targetStateIndex) {
      superior.push(candidate);
    }
  }

  return superior;
};

var _getSharedStates = function _getSharedStates(targetState) {
  var activeStates, j, len, ref, sharedStates, stateChain;
  activeStates = this._state;
  sharedStates = [];
  ref = this._providedStatesShared;

  for (j = 0, len = ref.length; j < len; j++) {
    stateChain = ref[j];

    if (stateChain.includes(targetState) && stateChain.isApplicable(targetState, activeStates)) {
      sharedStates.push(stateChain);
    }
  }

  return sharedStates;
};

var _resolveFnStyles = function _resolveFnStyles(states, includeBase) {
  var entry, j, k, len, len1, output, ref;

  if (includeBase) {
    states = ['base'].concat(states);
  }

  output = {};

  for (j = 0, len = states.length; j < len; j++) {
    state = states[j];

    if (this._styles[state] && this._styles[state].fns.length) {
      ref = this._styles[state].fns;

      for (k = 0, len1 = ref.length; k < len1; k++) {
        entry = ref[k];
        output[entry[0]] = entry[1];
      }
    }
  }

  return output;
};

function state$1(QuickElement) {
  QuickElement.prototype.state = state;
  QuickElement.prototype.toggleState = toggleState;
  QuickElement.prototype.resetState = resetState;
  QuickElement.prototype.pipeState = pipeState;
  QuickElement.prototype._applyRegisteredStyle = _applyRegisteredStyle;
  QuickElement.prototype._removeRegisteredStyle = _removeRegisteredStyle;
  QuickElement.prototype._turnStyleON = _turnStyleON;
  QuickElement.prototype._turnStyleOFF = _turnStyleOFF;
  QuickElement.prototype._turnTextON = _turnTextON;
  QuickElement.prototype._turnTextOFF = _turnTextOFF;
  QuickElement.prototype._getActiveStates = _getActiveStates;
  QuickElement.prototype._getSuperiorStates = _getSuperiorStates;
  QuickElement.prototype._getSharedStates = _getSharedStates;
  return QuickElement.prototype._resolveFnStyles = _resolveFnStyles;
}

var toTemplate = function toTemplate() {
  return _quickdom.template(this);
};

var clone = function clone() {
  var activeState, callback, callbacks, child, elClone, eventName, i, j, k, len, len1, len2, newEl, options, ref, ref1, ref2;
  elClone = this.el.cloneNode(false);
  options = primaryBuilder$1.clone(this.options, {
    existing: elClone
  });
  newEl = new this.constructor(this.type, options);
  ref = this._state;

  for (i = 0, len = ref.length; i < len; i++) {
    activeState = ref[i];
    newEl.state(activeState, true);
  }

  ref1 = this.children;

  for (j = 0, len1 = ref1.length; j < len1; j++) {
    child = ref1[j];
    newEl.append(child.clone());
  }

  ref2 = this._eventCallbacks;

  for (eventName in ref2) {
    callbacks = ref2[eventName];

    for (k = 0, len2 = callbacks.length; k < len2; k++) {
      callback = callbacks[k];
      newEl.on(eventName, callback);
    }
  }

  return newEl;
};

var append = function append(targetEl) {
  var prevParent;

  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl)) {
      prevParent = targetEl.parent;

      if (prevParent) {
        prevParent._removeChild(targetEl);
      }

      this._children.push(targetEl);

      this.el.appendChild(targetEl.el);

      targetEl._refreshParent(); // Force re-fresh targetEl._parent value to trigger inserted callback

    }
  }

  return this;
};

var appendTo = function appendTo(targetEl) {
  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl)) {
      targetEl.append(this);
    }
  }

  return this;
};

var prepend = function prepend(targetEl) {
  var prevParent;

  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl)) {
      prevParent = targetEl.parent;

      if (prevParent) {
        prevParent._removeChild(targetEl);
      }

      this._children.unshift(targetEl);

      this.el.insertBefore(targetEl.el, this.el.firstChild);

      targetEl._refreshParent(); // Force re-fresh targetEl._parent value to trigger inserted callback

    }
  }

  return this;
};

var prependTo = function prependTo(targetEl) {
  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl)) {
      targetEl.prepend(this);
    }
  }

  return this;
};

var after = function after(targetEl) {
  var myIndex;

  if (targetEl && this.parent) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl)) {
      myIndex = this.parent._children.indexOf(this);

      this.parent._children.splice(myIndex + 1, 0, targetEl);

      this.el.parentNode.insertBefore(targetEl.el, this.el.nextSibling);

      targetEl._refreshParent(); // Force re-fresh targetEl._parent value to trigger inserted callback

    }
  }

  return this;
};

var insertAfter = function insertAfter(targetEl) {
  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl)) {
      targetEl.after(this);
    }
  }

  return this;
};

var before = function before(targetEl) {
  var myIndex;

  if (targetEl && this.parent) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl)) {
      myIndex = this.parent._children.indexOf(this);

      this.parent._children.splice(myIndex, 0, targetEl);

      this.el.parentNode.insertBefore(targetEl.el, this.el);

      targetEl._refreshParent(); // Force re-fresh targetEl._parent value to trigger inserted callback

    }
  }

  return this;
};

var insertBefore = function insertBefore(targetEl) {
  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl)) {
      targetEl.before(this);
    }
  }

  return this;
};

var detach = function detach() {
  var ref;

  if ((ref = this.parent) != null) {
    ref._removeChild(this);
  }

  return this;
};

var remove = function remove() {
  var eventName;
  this.detach();
  this.resetState();

  if (this._eventCallbacks) {
    for (eventName in this._eventCallbacks) {
      this._eventCallbacks[eventName].length = 0;
    }
  }

  return this;
};

var empty = function empty() {
  var child, i, len, ref;
  ref = this.children.slice();

  for (i = 0, len = ref.length; i < len; i++) {
    child = ref[i];

    this._removeChild(child);
  }

  return this;
};

var wrap = function wrap(targetEl) {
  var currentParent;

  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);
    currentParent = this.parent;

    if (IS$1.quickDomEl(targetEl) && targetEl !== this && targetEl !== this.parent) {
      if (currentParent) {
        currentParent._removeChild(this, !targetEl.parent ? targetEl : void 0);
      }

      targetEl.append(this);
    }
  }

  return this;
};

var unwrap = function unwrap() {
  var grandParent, parent, parentChildren, parentSibling;
  parent = this.parent;

  if (parent) {
    parentChildren = _quickdom.batch(parent.children);
    parentSibling = parent.next;
    grandParent = parent.parent;

    if (grandParent) {
      parent.detach();

      if (parentSibling) {
        parentChildren.insertBefore(parentSibling);
      } else {
        parentChildren.appendTo(grandParent);
      }
    }
  }

  return this;
};

var replace = function replace(targetEl) {
  var ref;

  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl) && targetEl !== this) {
      targetEl.detach();

      if ((ref = this.parent) != null) {
        ref._removeChild(this, targetEl);
      }

      targetEl._refreshParent(); // Force re-fresh targetEl._parent value to trigger inserted callback

    }
  }

  return this;
};

var hasClass = function hasClass(target) {
  return includes$1(this.classList, target);
};

var addClass = function addClass(target) {
  var classList, targetIndex;
  classList = this.classList;
  targetIndex = classList.indexOf(target);

  if (targetIndex === -1) {
    classList.push(target);
    this.className = classList.length > 1 ? classList.join(' ') : classList[0];
  }

  return this;
};

var removeClass = function removeClass(target) {
  var classList, targetIndex;
  classList = this.classList;
  targetIndex = classList.indexOf(target);

  if (targetIndex !== -1) {
    classList.splice(targetIndex, 1);
    this.className = classList.length ? classList.join(' ') : '';
  }

  return this;
};

var toggleClass = function toggleClass(target) {
  if (this.hasClass(target)) {
    this.removeClass(target);
  } else {
    this.addClass(target);
  }

  return this;
};

var setRef = function setRef(target) {
  this.ref = this.options.ref = target;
  this.attr('data-ref', target);
  return this;
};

var _refreshParent = function _refreshParent() {
  return this.parent;
};

var _removeChild = function _removeChild(targetChild, replacementChild) {
  var indexOfChild;
  indexOfChild = this.children.indexOf(targetChild);

  if (indexOfChild !== -1) {
    if (replacementChild) {
      this.el.replaceChild(replacementChild.el, targetChild.el);

      this._children.splice(indexOfChild, 1, replacementChild);
    } else {
      this.el.removeChild(targetChild.el);

      this._children.splice(indexOfChild, 1);
    }
  }

  return this;
};

function manipulation(QuickElement) {
  Object.defineProperties(QuickElement.prototype, {
    'html': {
      get: function get() {
        return this.el.innerHTML;
      },
      set: function set(newValue) {
        return this.el.innerHTML = newValue;
      }
    },
    'text': {
      get: function get() {
        return this.el.textContent;
      },
      set: function set(newValue) {
        return this.el.textContent = newValue;
      }
    },
    'className': {
      get: function get() {
        if (this.svg) {
          return this.attr('class') || '';
        } else {
          return this.raw.className;
        }
      },
      set: function set(newValue) {
        if (this.svg) {
          return this.attr('class', newValue);
        } else {
          return this.raw.className = newValue;
        }
      }
    },
    'classList': {
      get: function get() {
        var list;
        list = this.className.split(/\s+/);

        if (list[list.length - 1] === '') {
          list.pop();
        }

        if (list[0] === '') {
          list.shift();
        }

        return list;
      }
    }
  });
  QuickElement.prototype.toTemplate = toTemplate;
  QuickElement.prototype.clone = clone;
  QuickElement.prototype.append = append;
  QuickElement.prototype.appendTo = appendTo;
  QuickElement.prototype.prepend = prepend;
  QuickElement.prototype.prependTo = prependTo;
  QuickElement.prototype.after = after;
  QuickElement.prototype.insertAfter = insertAfter;
  QuickElement.prototype.before = before;
  QuickElement.prototype.insertBefore = insertBefore;
  QuickElement.prototype.detach = detach;
  QuickElement.prototype.remove = remove;
  QuickElement.prototype.empty = empty;
  QuickElement.prototype.wrap = wrap;
  QuickElement.prototype.unwrap = unwrap;
  QuickElement.prototype.replace = replace;
  QuickElement.prototype.hasClass = hasClass;
  QuickElement.prototype.addClass = addClass;
  QuickElement.prototype.removeClass = removeClass;
  QuickElement.prototype.toggleClass = toggleClass;
  QuickElement.prototype.setRef = setRef;
  QuickElement.prototype._refreshParent = _refreshParent;
  return QuickElement.prototype._removeChild = _removeChild;
}

var updateOptions = function updateOptions(options) {
  if (IS$1.object(options)) {
    this.options = options;

    this._normalizeOptions();

    this._applyOptions(this.options);
  }

  return this;
};

var updateStateStyles = function updateStateStyles(styles) {
  var i, len, parsed, state, updatedStates;

  if (IS$1.objectPlain(styles)) {
    primaryBuilder$1.deep.concat(this, parsed = this._parseStyles(styles));

    if (parsed._styles) {
      updatedStates = Object.keys(parsed._styles);

      for (i = 0, len = updatedStates.length; i < len; i++) {
        state = updatedStates[i];

        if (this.state(state) || state === 'base') {
          this._applyRegisteredStyle(this._styles[state], this._getActiveStates(state), false);
        }
      }
    }
  }

  return this;
};

var updateStateTexts = function updateStateTexts(texts) {
  var parsed;

  if (IS$1.objectPlain(texts)) {
    primaryBuilder$1.deep.concat(this, parsed = this._parseTexts(texts));
  }

  return this;
};

var applyData = function applyData(data, passThrough) {
  var child, computers, defaults, i, j, key, keys, len, len1, ref;

  if (this.options.passDataToChildren && this._children.length && (passThrough != null ? passThrough : passThrough = true)) {
    ref = this._children;

    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      child.applyData(data);
    }
  }

  if (computers = this.options.computers) {
    defaults = this.options.defaults;
    keys = Object.keys(computers);

    for (j = 0, len1 = keys.length; j < len1; j++) {
      key = keys[j];

      if (this.options.invokeComputersOnce) {
        if (this._invokedComputers[key]) {
          continue;
        }

        this._invokedComputers[key] = 1;
      }

      if (data && data.hasOwnProperty(key)) {
        this._runComputer(key, data[key], data);
      } else if (defaults && defaults.hasOwnProperty(key)) {
        this._runComputer(key, defaults[key], data);
      }
    }
  }

  return this;
};

var _runComputer = function _runComputer(computer, arg, data) {
  return this.options.computers[computer].call(this, arg, data);
};

function application(QuickElement) {
  QuickElement.prototype.updateOptions = updateOptions;
  QuickElement.prototype.updateStateStyles = updateStateStyles;
  QuickElement.prototype.updateStateTexts = updateStateTexts;
  QuickElement.prototype.applyData = applyData;
  return QuickElement.prototype._runComputer = _runComputer;
}

var attr = function attr(target, newValue) {
  var i, key, keys;

  if (arguments.length === 1) {
    if (typeof target === 'string') {
      return this.el.getAttribute(target);
    }

    if (IS$1.object(target)) {
      keys = Object.keys(target);
      i = -1;

      while (key = keys[++i]) {
        this.attr(key, target[key]);
      }
    }
  } else if (newValue === null) {
    return this.el.removeAttribute(target);
  } else {
    this.el.setAttribute(target, newValue);
  }

  return this;
};

var prop = function prop(target, newValue) {
  var i, key, keys;

  if (arguments.length === 1) {
    if (typeof target === 'string') {
      return this.el[target];
    }

    if (IS$1.object(target)) {
      keys = Object.keys(target);
      i = -1;

      while (key = keys[++i]) {
        this.prop(key, target[key]);
      }
    }
  } else {
    this.el[target] = newValue;
  }

  return this;
};

function attributesAndProperties(QuickElement) {
  QuickElement.prototype.attr = attr;
  return QuickElement.prototype.prop = prop;
}

var QuickElement$1, svgNamespace;
svgNamespace = 'http://www.w3.org/2000/svg';

var QuickElement$2 = QuickElement$1 = function () {
  var QuickElement =
  /*#__PURE__*/
  function () {
    function QuickElement(type, options) {
      _classCallCheck$1(this, QuickElement);

      this.type = type;
      this.options = options;
      QuickElement.count++;

      if (this.type[0] === '*') {
        this.svg = true;
      }

      this.el = this.options.existing || (this.type === 'text' ? document.createTextNode(typeof this.options.text === 'string' ? this.options.text : '') : this.svg ? document.createElementNS(svgNamespace, this.type.slice(1)) : document.createElement(this.type));

      if (this.type === 'text') {
        this.append = this.prepend = this.attr = function () {};
      } // @_texts = {} # defined conditionally


      this._parent = null;
      this._styles = {};
      this._state = [];
      this._children = []; // @_providedStates = []				# defined conditionally
      // @_providedStatesShared = []		# defined conditionally
      // @_eventCallbacks = {__refs:{}}	# defined conditionally

      this._normalizeOptions();

      this._applyOptions();

      this._attachStateEvents();

      this._proxyParent();

      if (this.options.existing) {
        this._refreshParent();
      }

      this.el._quickElement = this;
    }

    _createClass$1(QuickElement, [{
      key: "toJSON",
      value: function toJSON() {
        var child, children, i, len, output;
        output = [this.type, primaryBuilder$1.clone.keys(element)(this.options)];
        children = this.children;

        for (i = 0, len = children.length; i < len; i++) {
          child = children[i];
          output.push(child.toJSON());
        }

        return output;
      }
    }]);

    return QuickElement;
  }();

  QuickElement.count = 0;
  return QuickElement;
}.call(undefined);
/* istanbul ignore next */


if (QuickElement$1.name == null) {
  QuickElement$1.name = 'QuickElement';
}

init$1(QuickElement$1);
aliases(QuickElement$1);
traversing(QuickElement$1);
events(QuickElement$1);
state$1(QuickElement$1);
style$1(QuickElement$1);
manipulation(QuickElement$1);
application(QuickElement$1);
attributesAndProperties(QuickElement$1);
var schema = {
  type: 'div',
  ref: void 0,
  options: {},
  children: []
};

var matchesSchema = function matchesSchema(object) {
  return typeof object.type !== 'undefined' || typeof object.ref !== 'undefined' || typeof object.options !== 'undefined' || typeof object.children !== 'undefined';
};

var PARSE_ERROR_PREFIX, parseTree;
PARSE_ERROR_PREFIX = 'Template Parse Error: expected';

var parseTree$1 = parseTree = function parseTree(tree, parseChildren) {
  var output;

  switch (false) {
    case !IS$1.array(tree):
      output = {};

      if (!IS$1.string(tree[0])) {
        throw new Error("".concat(PARSE_ERROR_PREFIX, " string for 'type', got '").concat(String(tree[0]), "'"));
      } else {
        output.type = tree[0];
      }

      if (tree.length > 1 && !IS$1.object(tree[1]) && tree[1] !== null) {
        throw new Error("".concat(PARSE_ERROR_PREFIX, " object for 'options', got '").concat(String(tree[1]), "'"));
      } else {
        output.options = tree[1] ? primaryBuilder$1.deep.clone(tree[1]) : schema.options;

        if (tree[1]) {
          output.ref = tree[1].id || tree[1].ref;
        }
      }

      output.children = tree.slice(2);

      if (parseChildren === false) {
        if (tree.length === 3 && IS$1.objectPlain(tree[2]) && !IS$1.template(tree[2])) {
          output.children = tree[2];
        }
      } else {
        output.children = output.children.map(quickdom.template);
      }

      return output;

    case !(IS$1.string(tree) || IS$1.domText(tree)):
      return {
        type: 'text',
        options: {
          text: tree.textContent || tree
        },
        children: schema.children
      };

    case !IS$1.domEl(tree):
      return {
        type: tree.nodeName.toLowerCase(),
        ref: tree.id,
        options: primaryBuilder$1.clone.keys(template)(tree),
        children: schema.children.map.call(tree.childNodes, quickdom.template)
      };

    case !IS$1.quickDomEl(tree):
      return {
        type: tree.type,
        ref: tree.ref,
        options: primaryBuilder$1.clone.deep.notKeys(['relatedInstance', 'related'])(tree.options),
        children: tree.children.map(quickdom.template)
      };

    case !IS$1.template(tree):
      return tree;

    default:
      throw new Error("".concat(PARSE_ERROR_PREFIX, " (array || string || domEl || quickDomEl || template), got ").concat(String(tree)));
  }
};

var NOT_DEEP_KEYS, NOT_KEYS, _extendByRef, extendTemplate;

NOT_DEEP_KEYS = ['relatedInstance', 'related', 'data'];
NOT_KEYS = ['children', '_childRefs'];

var extendTemplate$1 = extendTemplate = function extendTemplate(currentOpts, newOpts, globalOpts) {
  var currentChild, currentChildren, globalOptsTransform, index, maxLength, needsTemplateWrap, newChild, newChildProcessed, newChildren, noChanges, output, ref, remainingNewChildren;

  if (globalOpts) {
    globalOptsTransform = {
      options: function options(opts) {
        return primaryBuilder$1(opts, globalOpts);
      }
    };
  }

  if (IS$1.array(newOpts)) {
    newOpts = parseTree$1(newOpts, false);
  } else if (newOpts && !matchesSchema(newOpts)) {
    newOpts = {
      options: newOpts
    };
  }

  output = primaryBuilder$1.deep.nullDeletes.notKeys(NOT_KEYS).notDeep(NOT_DEEP_KEYS).transform(globalOptsTransform).clone(currentOpts, newOpts);
  currentChildren = currentOpts.children;
  newChildren = (newOpts != null ? newOpts.children : void 0) || [];
  output.children = [];
  /* istanbul ignore next */

  if (IS$1.array(newChildren)) {
    maxLength = Math.max(currentChildren.length, newChildren.length);
    index = -1;

    while (++index !== maxLength) {
      needsTemplateWrap = noChanges = false;
      currentChild = currentChildren[index];
      newChild = newChildren[index];

      newChildProcessed = function () {
        switch (false) {
          case !IS$1.template(newChild):
            return newChild;

          case !IS$1.array(newChild):
            return needsTemplateWrap = parseTree$1(newChild);

          case !IS$1.string(newChild):
            return needsTemplateWrap = {
              type: 'text',
              options: {
                text: newChild
              }
            };

          case !(!newChild && !globalOpts):
            return noChanges = true;

          default:
            return needsTemplateWrap = newChild || true;
        }
      }();

      if (noChanges) {
        newChildProcessed = currentChild;
      } else if (needsTemplateWrap) {
        newChildProcessed = currentChild ? currentChild.extend(newChildProcessed, globalOpts) : new QuickTemplate$1(primaryBuilder$1.clone(schema, newChildProcessed));
      }

      output.children.push(newChildProcessed);
    }
  } else if (IS$1.object(newChildren)) {
    newChildren = primaryBuilder$1.allowNull.clone(newChildren);
    output.children = _extendByRef(newChildren, currentChildren, globalOpts);
    remainingNewChildren = newChildren;

    for (ref in remainingNewChildren) {
      newChild = remainingNewChildren[ref];
      newChildProcessed = IS$1.objectPlain(newChild) && !IS$1.template(newChild) ? newChild : parseTree$1(newChild);
      output.children.push(new QuickTemplate$1(newChildProcessed));
      delete remainingNewChildren[ref];
    }
  }

  return output;
};

_extendByRef = function extendByRef(newChildrenRefs, currentChildren, globalOpts) {
  var currentChild, i, len, newChild, newChildProcessed, output;

  if (!currentChildren.length) {
    return currentChildren;
  } else {
    output = [];

    for (i = 0, len = currentChildren.length; i < len; i++) {
      currentChild = currentChildren[i];
      newChild = newChildrenRefs[currentChild.ref];

      if (newChild) {
        newChildProcessed = currentChild.extend(newChild, globalOpts);
        delete newChildrenRefs[currentChild.ref];
      } else if (newChild === null) {
        delete newChildrenRefs[currentChild.ref];
        continue;
      } else {
        newChildProcessed = function () {
          switch (false) {
            case !globalOpts:
              return currentChild.extend(null, globalOpts);

            case !Object.keys(newChildrenRefs).length:
              return currentChild.extend();

            default:
              return currentChild;
          }
        }();
      }

      newChildProcessed.children = _extendByRef(newChildrenRefs, newChildProcessed.children);
      output.push(newChildProcessed);
    }

    return output;
  }
};

var QuickTemplate;

var QuickTemplate$1 = QuickTemplate =
/*#__PURE__*/
function () {
  function QuickTemplate(config, isTree) {
    _classCallCheck$1(this, QuickTemplate);

    if (IS$1.template(config)) {
      return config;
    }

    config = isTree ? parseTree$1(config) : config;
    primaryBuilder$1(this, config);
  }

  _createClass$1(QuickTemplate, [{
    key: "extend",
    value: function extend$$1(newValues, globalOpts) {
      return new QuickTemplate(extendTemplate$1(this, newValues, globalOpts));
    }
  }, {
    key: "spawn",
    value: function spawn(newValues, globalOpts, data) {
      var child, childData, children, element, i, len, options, type;

      if (newValues && newValues.data) {
        data = newValues.data;

        if (Object.keys(newValues).length === 1) {
          newValues = null;
        }
      }

      if (newValues || globalOpts) {
        var _extendTemplate = extendTemplate$1(this, newValues, globalOpts);

        options = _extendTemplate.options;
        children = _extendTemplate.children;
        type = _extendTemplate.type;
      } else {
        options = this.options;
        children = this.children;
        type = this.type;
        options = primaryBuilder$1.clone(options);
      }

      element = _quickdom.create([type, options]);

      if (children) {
        childData = options.passDataToChildren ? data || options.data : void 0;

        for (i = 0, len = children.length; i < len; i++) {
          child = children[i];
          element.append(child.spawn(null, null, childData));
        }
      }

      element._postCreation(data);

      return element;
    }
  }]);

  return QuickTemplate;
}();
/* istanbul ignore next */


if (QuickTemplate.name == null) {
  QuickTemplate.name = 'QuickTemplate';
}

Object.defineProperty(QuickTemplate.prototype, 'child', {
  get: function get() {
    return this._childRefs || _getChildRefs(this);
  }
});

_quickdom.template = function (tree) {
  return new QuickTemplate(tree, true);
};

_quickdom.isTemplate = function (target) {
  return IS$1.template(target);
};

var QuickBatch;

var QuickBatch$1 = QuickBatch =
/*#__PURE__*/
function () {
  function QuickBatch(elements, returnResults1) {
    _classCallCheck$1(this, QuickBatch);

    this.returnResults = returnResults1;
    this.elements = elements.map(function (el) {
      return _quickdom(el);
    });
  }

  _createClass$1(QuickBatch, [{
    key: "reverse",
    value: function reverse() {
      this.elements = this.elements.reverse();
      return this;
    }
  }, {
    key: "return",
    value: function _return(returnNext) {
      if (returnNext) {
        this.returnResults = true;
        return this;
      } else {
        return this.lastResults;
      }
    }
  }]);

  return QuickBatch;
}();
/* istanbul ignore next */


if (QuickBatch.name == null) {
  QuickBatch.name = 'QuickBatch';
}

Object.keys(QuickElement$2.prototype).concat('css', 'replaceWith', 'html', 'text').forEach(function (method) {
  return QuickBatch.prototype[method] = function (newValue) {
    var element, results;

    results = this.lastResults = function () {
      var i, len, ref, results1;
      ref = this.elements;
      results1 = [];

      for (i = 0, len = ref.length; i < len; i++) {
        element = ref[i];

        if (method === 'html' || method === 'text') {
          if (newValue) {
            results1.push(element[method] = newValue);
          } else {
            results1.push(element[method]);
          }
        } else {
          var _element;

          results1.push((_element = element)[method].apply(_element, arguments));
        }
      }

      return results1;
    }.apply(this, arguments);

    if (this.returnResults) {
      return results;
    } else {
      return this;
    }
  };
});

_quickdom.batch = function (elements, returnResults) {
  if (!IS$1.iterable(elements)) {
    throw new Error("Batch: expected an iterable, got ".concat(String(elements)));
  }

  return new QuickBatch(elements, returnResults);
};

var version$2 = "1.0.93";
var SHORTCUTS, i, len, shortcut;
SHORTCUTS = ['link:a', 'anchor:a', 'a', 'text', 'div', 'span', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'footer', 'section', 'button', 'br', 'ul', 'ol', 'li', 'fieldset', 'input', 'textarea', 'select', 'option', 'form', 'frame', 'hr', 'iframe', 'img', 'picture', 'main', 'nav', 'meta', 'object', 'pre', 'style', 'table', 'tbody', 'th', 'tr', 'td', 'tfoot', // 'template'
'video'];

for (i = 0, len = SHORTCUTS.length; i < len; i++) {
  shortcut = SHORTCUTS[i];

  (function (shortcut) {
    var prop, split, type;
    prop = type = shortcut;

    if (includes$1(shortcut, ':')) {
      split = shortcut.split(':');
      prop = split[0];
      type = split[1];
    }

    return _quickdom[prop] = function () {
      return _quickdom.apply(void 0, [type].concat(Array.prototype.slice.call(arguments)));
    };
  })(shortcut);
}

init(QuickElement$2, QuickWindow$2);
_quickdom.QuickElement = QuickElement$2;
_quickdom.QuickTemplate = QuickTemplate$1;
_quickdom.QuickWindow = QuickWindow$2;
_quickdom.QuickBatch = QuickBatch$1;
_quickdom.version = version$2;
_quickdom.CSS = index;
var quickdom = _quickdom; // export {quickdom as default, QuickElement, QuickTemplate, QuickWindow, QuickBatch}
var restartSandbox;
var restartSandbox$1 = restartSandbox = function () {
  var field, id, ref;

  if (window.sandbox) {
    ref = quickfield.instances;

    for (id in ref) {
      field = ref[id];
      delete quickfield.instances[id];
    }

    window.sandbox.remove();
  }

  return window.sandbox = quickdom.div({
    id: 'sandbox',
    style: {
      border: '1px solid',
      padding: '20px',
      boxSizing: 'border-box'
    }
  }).appendTo(document.body);
};function addTitle (title, margin = 20) {
  return quickdom.div({
    ref: 'testTitle',
    style: {
      marginTop: margin,
      marginBottom: margin,
      fontSize: 16,
      fontWeight: 600,
      fontFamily: 'system-ui, sans-serif'
    }
  }, title).appendTo(sandbox);
}function addDivider () {
  var margin;
  margin = arguments[0];

  if (isNaN(margin)) {
    margin = 20;
  }

  return quickdom.div({
    ref: 'testTitle',
    style: {
      marginTop: margin,
      marginBottom: margin
    }
  }).appendTo(sandbox);
}function getBorderSides (el) {
  return {
    top: el.style('borderTopWidth'),
    bottom: el.style('borderBottomWidth'),
    left: el.style('borderLeftWidth'),
    right: el.style('borderRightWidth')
  };
}var pFinally = (promise, onFinally) => {
  onFinally = onFinally || (() => {});

  return promise.then(val => new Promise(resolve => {
    resolve(onFinally());
  }).then(() => val), err => new Promise(resolve => {
    resolve(onFinally());
  }).then(() => {
    throw err;
  }));
};class TimeoutError extends Error {
  constructor(message) {
    super(message);
    this.name = 'TimeoutError';
  }

}

var pTimeout = (promise, ms, fallback) => new Promise((resolve, reject) => {
  if (typeof ms !== 'number' || ms < 0) {
    throw new TypeError('Expected `ms` to be a positive number');
  }

  const timer = setTimeout(() => {
    if (typeof fallback === 'function') {
      try {
        resolve(fallback());
      } catch (err) {
        reject(err);
      }

      return;
    }

    const message = typeof fallback === 'string' ? fallback : `Promise timed out after ${ms} milliseconds`;
    const err = fallback instanceof Error ? fallback : new TimeoutError(message);

    if (typeof promise.cancel === 'function') {
      promise.cancel();
    }

    reject(err);
  }, ms);
  pFinally(promise.then(resolve, reject), () => {
    clearTimeout(timer);
  });
});

var TimeoutError_1 = TimeoutError;
pTimeout.TimeoutError = TimeoutError_1;const symbolAsyncIterator = Symbol.asyncIterator || '@@asyncIterator';

const normalizeEmitter = emitter => {
  const addListener = emitter.on || emitter.addListener || emitter.addEventListener;
  const removeListener = emitter.off || emitter.removeListener || emitter.removeEventListener;

  if (!addListener || !removeListener) {
    throw new TypeError('Emitter is not compatible');
  }

  return {
    addListener: addListener.bind(emitter),
    removeListener: removeListener.bind(emitter)
  };
};

const normalizeEvents = event => Array.isArray(event) ? event : [event];

const multiple = (emitter, event, options) => {
  let cancel;
  const ret = new Promise((resolve, reject) => {
    options = {
      rejectionEvents: ['error'],
      multiArgs: false,
      resolveImmediately: false,
      ...options
    };

    if (!(options.count >= 0 && (options.count === Infinity || Number.isInteger(options.count)))) {
      throw new TypeError('The `count` option should be at least 0 or more');
    } // Allow multiple events


    const events = normalizeEvents(event);
    const items = [];
    const {
      addListener,
      removeListener
    } = normalizeEmitter(emitter);

    const onItem = (...args) => {
      const value = options.multiArgs ? args : args[0];

      if (options.filter && !options.filter(value)) {
        return;
      }

      items.push(value);

      if (options.count === items.length) {
        cancel();
        resolve(items);
      }
    };

    const rejectHandler = error => {
      cancel();
      reject(error);
    };

    cancel = () => {
      for (const event of events) {
        removeListener(event, onItem);
      }

      for (const rejectionEvent of options.rejectionEvents) {
        removeListener(rejectionEvent, rejectHandler);
      }
    };

    for (const event of events) {
      addListener(event, onItem);
    }

    for (const rejectionEvent of options.rejectionEvents) {
      addListener(rejectionEvent, rejectHandler);
    }

    if (options.resolveImmediately) {
      resolve(items);
    }
  });
  ret.cancel = cancel;

  if (typeof options.timeout === 'number') {
    const timeout = pTimeout(ret, options.timeout);
    timeout.cancel = cancel;
    return timeout;
  }

  return ret;
};

const pEvent = (emitter, event, options) => {
  if (typeof options === 'function') {
    options = {
      filter: options
    };
  }

  options = { ...options,
    count: 1,
    resolveImmediately: false
  };
  const arrayPromise = multiple(emitter, event, options);
  const promise = arrayPromise.then(array => array[0]); // eslint-disable-line promise/prefer-await-to-then

  promise.cancel = arrayPromise.cancel;
  return promise;
};

var pEvent_1 = pEvent; // TODO: Remove this for the next major release

var default_1 = pEvent;
var multiple_1 = multiple;

var iterator = (emitter, event, options) => {
  if (typeof options === 'function') {
    options = {
      filter: options
    };
  } // Allow multiple events


  const events = normalizeEvents(event);
  options = {
    rejectionEvents: ['error'],
    resolutionEvents: [],
    limit: Infinity,
    multiArgs: false,
    ...options
  };
  const {
    limit
  } = options;
  const isValidLimit = limit >= 0 && (limit === Infinity || Number.isInteger(limit));

  if (!isValidLimit) {
    throw new TypeError('The `limit` option should be a non-negative integer or Infinity');
  }

  if (limit === 0) {
    // Return an empty async iterator to avoid any further cost
    return {
      [Symbol.asyncIterator]() {
        return this;
      },

      async next() {
        return {
          done: true,
          value: undefined
        };
      }

    };
  }

  const {
    addListener,
    removeListener
  } = normalizeEmitter(emitter);
  let isDone = false;
  let error;
  let hasPendingError = false;
  const nextQueue = [];
  const valueQueue = [];
  let eventCount = 0;
  let isLimitReached = false;

  const valueHandler = (...args) => {
    eventCount++;
    isLimitReached = eventCount === limit;
    const value = options.multiArgs ? args : args[0];

    if (nextQueue.length > 0) {
      const {
        resolve
      } = nextQueue.shift();
      resolve({
        done: false,
        value
      });

      if (isLimitReached) {
        cancel();
      }

      return;
    }

    valueQueue.push(value);

    if (isLimitReached) {
      cancel();
    }
  };

  const cancel = () => {
    isDone = true;

    for (const event of events) {
      removeListener(event, valueHandler);
    }

    for (const rejectionEvent of options.rejectionEvents) {
      removeListener(rejectionEvent, rejectHandler);
    }

    for (const resolutionEvent of options.resolutionEvents) {
      removeListener(resolutionEvent, resolveHandler);
    }

    while (nextQueue.length > 0) {
      const {
        resolve
      } = nextQueue.shift();
      resolve({
        done: true,
        value: undefined
      });
    }
  };

  const rejectHandler = (...args) => {
    error = options.multiArgs ? args : args[0];

    if (nextQueue.length > 0) {
      const {
        reject
      } = nextQueue.shift();
      reject(error);
    } else {
      hasPendingError = true;
    }

    cancel();
  };

  const resolveHandler = (...args) => {
    const value = options.multiArgs ? args : args[0];

    if (options.filter && !options.filter(value)) {
      return;
    }

    if (nextQueue.length > 0) {
      const {
        resolve
      } = nextQueue.shift();
      resolve({
        done: true,
        value
      });
    } else {
      valueQueue.push(value);
    }

    cancel();
  };

  for (const event of events) {
    addListener(event, valueHandler);
  }

  for (const rejectionEvent of options.rejectionEvents) {
    addListener(rejectionEvent, rejectHandler);
  }

  for (const resolutionEvent of options.resolutionEvents) {
    addListener(resolutionEvent, resolveHandler);
  }

  return {
    [symbolAsyncIterator]() {
      return this;
    },

    async next() {
      if (valueQueue.length > 0) {
        const value = valueQueue.shift();
        return {
          done: isDone && valueQueue.length === 0 && !isLimitReached,
          value
        };
      }

      if (hasPendingError) {
        hasPendingError = false;
        throw error;
      }

      if (isDone) {
        return {
          done: true,
          value: undefined
        };
      }

      return new Promise((resolve, reject) => nextQueue.push({
        resolve,
        reject
      }));
    },

    async return(value) {
      cancel();
      return {
        done: isDone,
        value
      };
    }

  };
};
pEvent_1.default = default_1;
pEvent_1.multiple = multiple_1;
pEvent_1.iterator = iterator;var COLORS = {
  red: '#cc4820',
  green: '#72c322',
  orange: '#ff9c00',
  black: '#181818',
  grey_dark: '#5e5e5e',
  grey: '#909090',
  grey_semi_light: '#bebebe',
  grey_light: '#d3d3d3',
  grey_light2: '#dddddd',
  grey_light3: '#f2f5f7',
  grey_light4: '#e5e5e5'
};var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
}

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}/*!
 * assertion-error
 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
 * MIT Licensed
 */

/*!
 * Return a function that will copy properties from
 * one object to another excluding any originally
 * listed. Returned function will create a new `{}`.
 *
 * @param {String} excluded properties ...
 * @return {Function}
 */
function exclude() {
  var excludes = [].slice.call(arguments);

  function excludeProps(res, obj) {
    Object.keys(obj).forEach(function (key) {
      if (!~excludes.indexOf(key)) res[key] = obj[key];
    });
  }

  return function extendExclude() {
    var args = [].slice.call(arguments),
        i = 0,
        res = {};

    for (; i < args.length; i++) {
      excludeProps(res, args[i]);
    }

    return res;
  };
}
/*!
 * Primary Exports
 */

var assertionError = AssertionError;
/**
 * ### AssertionError
 *
 * An extension of the JavaScript `Error` constructor for
 * assertion and validation scenarios.
 *
 * @param {String} message
 * @param {Object} properties to include (optional)
 * @param {callee} start stack function (optional)
 */

function AssertionError(message, _props, ssf) {
  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON'),
      props = extend(_props || {}); // default values

  this.message = message || 'Unspecified AssertionError';
  this.showDiff = false; // copy from properties

  for (var key in props) {
    this[key] = props[key];
  } // capture stack trace


  ssf = ssf || AssertionError;

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, ssf);
  } else {
    try {
      throw new Error();
    } catch (e) {
      this.stack = e.stack;
    }
  }
}
/*!
 * Inherit from Error.prototype
 */


AssertionError.prototype = Object.create(Error.prototype);
/*!
 * Statically set name
 */

AssertionError.prototype.name = 'AssertionError';
/*!
 * Ensure correct constructor
 */

AssertionError.prototype.constructor = AssertionError;
/**
 * Allow errors to be converted to JSON for static transfer.
 *
 * @param {Boolean} include stack (default: `true`)
 * @return {Object} object that can be `JSON.stringify`
 */

AssertionError.prototype.toJSON = function (stack) {
  var extend = exclude('constructor', 'toJSON', 'stack'),
      props = extend({
    name: this.name
  }, this); // include stack if exists and not turned off

  if (false !== stack && this.stack) {
    props.stack = this.stack;
  }

  return props;
};/* !
 * Chai - pathval utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * @see https://github.com/logicalparadox/filtr
 * MIT Licensed
 */

/**
 * ### .hasProperty(object, name)
 *
 * This allows checking whether an object has own
 * or inherited from prototype chain named property.
 *
 * Basically does the same thing as the `in`
 * operator but works properly with null/undefined values
 * and other primitives.
 *
 *     var obj = {
 *         arr: ['a', 'b', 'c']
 *       , str: 'Hello'
 *     }
 *
 * The following would be the results.
 *
 *     hasProperty(obj, 'str');  // true
 *     hasProperty(obj, 'constructor');  // true
 *     hasProperty(obj, 'bar');  // false
 *
 *     hasProperty(obj.str, 'length'); // true
 *     hasProperty(obj.str, 1);  // true
 *     hasProperty(obj.str, 5);  // false
 *
 *     hasProperty(obj.arr, 'length');  // true
 *     hasProperty(obj.arr, 2);  // true
 *     hasProperty(obj.arr, 3);  // false
 *
 * @param {Object} object
 * @param {String|Symbol} name
 * @returns {Boolean} whether it exists
 * @namespace Utils
 * @name hasProperty
 * @api public
 */

function hasProperty(obj, name) {
  if (typeof obj === 'undefined' || obj === null) {
    return false;
  } // The `in` operator does not work with primitives.


  return name in Object(obj);
}
/* !
 * ## parsePath(path)
 *
 * Helper function used to parse string object
 * paths. Use in conjunction with `internalGetPathValue`.
 *
 *      var parsed = parsePath('myobject.property.subprop');
 *
 * ### Paths:
 *
 * * Can be infinitely deep and nested.
 * * Arrays are also valid using the formal `myobject.document[3].property`.
 * * Literal dots and brackets (not delimiter) must be backslash-escaped.
 *
 * @param {String} path
 * @returns {Object} parsed
 * @api private
 */


function parsePath(path) {
  var str = path.replace(/([^\\])\[/g, '$1.[');
  var parts = str.match(/(\\\.|[^.]+?)+/g);
  return parts.map(function mapMatches(value) {
    var regexp = /^\[(\d+)\]$/;
    var mArr = regexp.exec(value);
    var parsed = null;

    if (mArr) {
      parsed = {
        i: parseFloat(mArr[1])
      };
    } else {
      parsed = {
        p: value.replace(/\\([.\[\]])/g, '$1')
      };
    }

    return parsed;
  });
}
/* !
 * ## internalGetPathValue(obj, parsed[, pathDepth])
 *
 * Helper companion function for `.parsePath` that returns
 * the value located at the parsed address.
 *
 *      var value = getPathValue(obj, parsed);
 *
 * @param {Object} object to search against
 * @param {Object} parsed definition from `parsePath`.
 * @param {Number} depth (nesting level) of the property we want to retrieve
 * @returns {Object|Undefined} value
 * @api private
 */


function internalGetPathValue(obj, parsed, pathDepth) {
  var temporaryValue = obj;
  var res = null;
  pathDepth = typeof pathDepth === 'undefined' ? parsed.length : pathDepth;

  for (var i = 0; i < pathDepth; i++) {
    var part = parsed[i];

    if (temporaryValue) {
      if (typeof part.p === 'undefined') {
        temporaryValue = temporaryValue[part.i];
      } else {
        temporaryValue = temporaryValue[part.p];
      }

      if (i === pathDepth - 1) {
        res = temporaryValue;
      }
    }
  }

  return res;
}
/* !
 * ## internalSetPathValue(obj, value, parsed)
 *
 * Companion function for `parsePath` that sets
 * the value located at a parsed address.
 *
 *  internalSetPathValue(obj, 'value', parsed);
 *
 * @param {Object} object to search and define on
 * @param {*} value to use upon set
 * @param {Object} parsed definition from `parsePath`
 * @api private
 */


function internalSetPathValue(obj, val, parsed) {
  var tempObj = obj;
  var pathDepth = parsed.length;
  var part = null; // Here we iterate through every part of the path

  for (var i = 0; i < pathDepth; i++) {
    var propName = null;
    var propVal = null;
    part = parsed[i]; // If it's the last part of the path, we set the 'propName' value with the property name

    if (i === pathDepth - 1) {
      propName = typeof part.p === 'undefined' ? part.i : part.p; // Now we set the property with the name held by 'propName' on object with the desired val

      tempObj[propName] = val;
    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {
      tempObj = tempObj[part.p];
    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {
      tempObj = tempObj[part.i];
    } else {
      // If the obj doesn't have the property we create one with that name to define it
      var next = parsed[i + 1]; // Here we set the name of the property which will be defined

      propName = typeof part.p === 'undefined' ? part.i : part.p; // Here we decide if this property will be an array or a new object

      propVal = typeof next.p === 'undefined' ? [] : {};
      tempObj[propName] = propVal;
      tempObj = tempObj[propName];
    }
  }
}
/**
 * ### .getPathInfo(object, path)
 *
 * This allows the retrieval of property info in an
 * object given a string path.
 *
 * The path info consists of an object with the
 * following properties:
 *
 * * parent - The parent object of the property referenced by `path`
 * * name - The name of the final property, a number if it was an array indexer
 * * value - The value of the property, if it exists, otherwise `undefined`
 * * exists - Whether the property exists or not
 *
 * @param {Object} object
 * @param {String} path
 * @returns {Object} info
 * @namespace Utils
 * @name getPathInfo
 * @api public
 */


function getPathInfo(obj, path) {
  var parsed = parsePath(path);
  var last = parsed[parsed.length - 1];
  var info = {
    parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,
    name: last.p || last.i,
    value: internalGetPathValue(obj, parsed)
  };
  info.exists = hasProperty(info.parent, info.name);
  return info;
}
/**
 * ### .getPathValue(object, path)
 *
 * This allows the retrieval of values in an
 * object given a string path.
 *
 *     var obj = {
 *         prop1: {
 *             arr: ['a', 'b', 'c']
 *           , str: 'Hello'
 *         }
 *       , prop2: {
 *             arr: [ { nested: 'Universe' } ]
 *           , str: 'Hello again!'
 *         }
 *     }
 *
 * The following would be the results.
 *
 *     getPathValue(obj, 'prop1.str'); // Hello
 *     getPathValue(obj, 'prop1.att[2]'); // b
 *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe
 *
 * @param {Object} object
 * @param {String} path
 * @returns {Object} value or `undefined`
 * @namespace Utils
 * @name getPathValue
 * @api public
 */


function getPathValue(obj, path) {
  var info = getPathInfo(obj, path);
  return info.value;
}
/**
 * ### .setPathValue(object, path, value)
 *
 * Define the value in an object at a given string path.
 *
 * ```js
 * var obj = {
 *     prop1: {
 *         arr: ['a', 'b', 'c']
 *       , str: 'Hello'
 *     }
 *   , prop2: {
 *         arr: [ { nested: 'Universe' } ]
 *       , str: 'Hello again!'
 *     }
 * };
 * ```
 *
 * The following would be acceptable.
 *
 * ```js
 * var properties = require('tea-properties');
 * properties.set(obj, 'prop1.str', 'Hello Universe!');
 * properties.set(obj, 'prop1.arr[2]', 'B');
 * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });
 * ```
 *
 * @param {Object} object
 * @param {String} path
 * @param {Mixed} value
 * @api private
 */


function setPathValue(obj, path, val) {
  var parsed = parsePath(path);
  internalSetPathValue(obj, val, parsed);
  return obj;
}

var pathval = {
  hasProperty: hasProperty,
  getPathInfo: getPathInfo,
  getPathValue: getPathValue,
  setPathValue: setPathValue
};/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .flag(object, key, [value])
 *
 * Get or set a flag value on an object. If a
 * value is provided it will be set, else it will
 * return the currently set value or `undefined` if
 * the value is not set.
 *
 *     utils.flag(this, 'foo', 'bar'); // setter
 *     utils.flag(this, 'foo'); // getter, returns `bar`
 *
 * @param {Object} object constructed Assertion
 * @param {String} key
 * @param {Mixed} value (optional)
 * @namespace Utils
 * @name flag
 * @api private
 */
var flag = function flag(obj, key, value) {
  var flags = obj.__flags || (obj.__flags = Object.create(null));

  if (arguments.length === 3) {
    flags[key] = value;
  } else {
    return flags[key];
  }
};/*!
 * Chai - test utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

/**
 * ### .test(object, expression)
 *
 * Test and object for expression.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name test
 */

var test$1 = function test(obj, args) {
  var negate = flag(obj, 'negate'),
      expr = args[0];
  return negate ? !expr : expr;
};var typeDetect = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
     module.exports = factory() ;
  })(commonjsGlobal, function () {
    /* !
     * type-detect
     * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
     * MIT Licensed
     */

    var promiseExists = typeof Promise === 'function';
    /* eslint-disable no-undef */

    var globalObject = typeof self === 'object' ? self : commonjsGlobal; // eslint-disable-line id-blacklist

    var symbolExists = typeof Symbol !== 'undefined';
    var mapExists = typeof Map !== 'undefined';
    var setExists = typeof Set !== 'undefined';
    var weakMapExists = typeof WeakMap !== 'undefined';
    var weakSetExists = typeof WeakSet !== 'undefined';
    var dataViewExists = typeof DataView !== 'undefined';
    var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';
    var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';
    var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';
    var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';
    var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());
    var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());
    var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
    var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
    var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';
    var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());
    var toStringLeftSliceLength = 8;
    var toStringRightSliceLength = -1;
    /**
     * ### typeOf (obj)
     *
     * Uses `Object.prototype.toString` to determine the type of an object,
     * normalising behaviour across engine versions & well optimised.
     *
     * @param {Mixed} object
     * @return {String} object type
     * @api public
     */

    function typeDetect(obj) {
      /* ! Speed optimisation
       * Pre:
       *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)
       *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)
       *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)
       *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)
       *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)
       * Post:
       *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)
       *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)
       *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)
       *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)
       *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)
       */
      var typeofObj = typeof obj;

      if (typeofObj !== 'object') {
        return typeofObj;
      }
      /* ! Speed optimisation
       * Pre:
       *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)
       * Post:
       *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)
       */


      if (obj === null) {
        return 'null';
      }
      /* ! Spec Conformance
       * Test: `Object.prototype.toString.call(window)``
       *  - Node === "[object global]"
       *  - Chrome === "[object global]"
       *  - Firefox === "[object Window]"
       *  - PhantomJS === "[object Window]"
       *  - Safari === "[object Window]"
       *  - IE 11 === "[object Window]"
       *  - IE Edge === "[object Window]"
       * Test: `Object.prototype.toString.call(this)``
       *  - Chrome Worker === "[object global]"
       *  - Firefox Worker === "[object DedicatedWorkerGlobalScope]"
       *  - Safari Worker === "[object DedicatedWorkerGlobalScope]"
       *  - IE 11 Worker === "[object WorkerGlobalScope]"
       *  - IE Edge Worker === "[object WorkerGlobalScope]"
       */


      if (obj === globalObject) {
        return 'global';
      }
      /* ! Speed optimisation
       * Pre:
       *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)
       * Post:
       *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)
       */


      if (Array.isArray(obj) && (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))) {
        return 'Array';
      } // Not caching existence of `window` and related properties due to potential
      // for `window` to be unset before tests in quasi-browser environments.


      if (typeof window === 'object' && window !== null) {
        /* ! Spec Conformance
         * (https://html.spec.whatwg.org/multipage/browsers.html#location)
         * WhatWG HTML$7.7.3 - The `Location` interface
         * Test: `Object.prototype.toString.call(window.location)``
         *  - IE <=11 === "[object Object]"
         *  - IE Edge <=13 === "[object Object]"
         */
        if (typeof window.location === 'object' && obj === window.location) {
          return 'Location';
        }
        /* ! Spec Conformance
         * (https://html.spec.whatwg.org/#document)
         * WhatWG HTML$3.1.1 - The `Document` object
         * Note: Most browsers currently adher to the W3C DOM Level 2 spec
         *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)
         *       which suggests that browsers should use HTMLTableCellElement for
         *       both TD and TH elements. WhatWG separates these.
         *       WhatWG HTML states:
         *         > For historical reasons, Window objects must also have a
         *         > writable, configurable, non-enumerable property named
         *         > HTMLDocument whose value is the Document interface object.
         * Test: `Object.prototype.toString.call(document)``
         *  - Chrome === "[object HTMLDocument]"
         *  - Firefox === "[object HTMLDocument]"
         *  - Safari === "[object HTMLDocument]"
         *  - IE <=10 === "[object Document]"
         *  - IE 11 === "[object HTMLDocument]"
         *  - IE Edge <=13 === "[object HTMLDocument]"
         */


        if (typeof window.document === 'object' && obj === window.document) {
          return 'Document';
        }

        if (typeof window.navigator === 'object') {
          /* ! Spec Conformance
           * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)
           * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray
           * Test: `Object.prototype.toString.call(navigator.mimeTypes)``
           *  - IE <=10 === "[object MSMimeTypesCollection]"
           */
          if (typeof window.navigator.mimeTypes === 'object' && obj === window.navigator.mimeTypes) {
            return 'MimeTypeArray';
          }
          /* ! Spec Conformance
           * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
           * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray
           * Test: `Object.prototype.toString.call(navigator.plugins)``
           *  - IE <=10 === "[object MSPluginsCollection]"
           */


          if (typeof window.navigator.plugins === 'object' && obj === window.navigator.plugins) {
            return 'PluginArray';
          }
        }

        if ((typeof window.HTMLElement === 'function' || typeof window.HTMLElement === 'object') && obj instanceof window.HTMLElement) {
          /* ! Spec Conformance
          * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
          * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`
          * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``
          *  - IE <=10 === "[object HTMLBlockElement]"
          */
          if (obj.tagName === 'BLOCKQUOTE') {
            return 'HTMLQuoteElement';
          }
          /* ! Spec Conformance
           * (https://html.spec.whatwg.org/#htmltabledatacellelement)
           * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`
           * Note: Most browsers currently adher to the W3C DOM Level 2 spec
           *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
           *       which suggests that browsers should use HTMLTableCellElement for
           *       both TD and TH elements. WhatWG separates these.
           * Test: Object.prototype.toString.call(document.createElement('td'))
           *  - Chrome === "[object HTMLTableCellElement]"
           *  - Firefox === "[object HTMLTableCellElement]"
           *  - Safari === "[object HTMLTableCellElement]"
           */


          if (obj.tagName === 'TD') {
            return 'HTMLTableDataCellElement';
          }
          /* ! Spec Conformance
           * (https://html.spec.whatwg.org/#htmltableheadercellelement)
           * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`
           * Note: Most browsers currently adher to the W3C DOM Level 2 spec
           *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
           *       which suggests that browsers should use HTMLTableCellElement for
           *       both TD and TH elements. WhatWG separates these.
           * Test: Object.prototype.toString.call(document.createElement('th'))
           *  - Chrome === "[object HTMLTableCellElement]"
           *  - Firefox === "[object HTMLTableCellElement]"
           *  - Safari === "[object HTMLTableCellElement]"
           */


          if (obj.tagName === 'TH') {
            return 'HTMLTableHeaderCellElement';
          }
        }
      }
      /* ! Speed optimisation
      * Pre:
      *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)
      *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)
      *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)
      *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)
      *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)
      *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)
      *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)
      *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)
      *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)
      * Post:
      *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)
      *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)
      *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)
      *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)
      *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)
      *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)
      *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)
      *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)
      *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)
      */


      var stringTag = symbolToStringTagExists && obj[Symbol.toStringTag];

      if (typeof stringTag === 'string') {
        return stringTag;
      }

      var objPrototype = Object.getPrototypeOf(obj);
      /* ! Speed optimisation
      * Pre:
      *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)
      *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)
      * Post:
      *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)
      *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)
      */

      if (objPrototype === RegExp.prototype) {
        return 'RegExp';
      }
      /* ! Speed optimisation
      * Pre:
      *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)
      * Post:
      *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)
      */


      if (objPrototype === Date.prototype) {
        return 'Date';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)
       * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be "Promise":
       * Test: `Object.prototype.toString.call(Promise.resolve())``
       *  - Chrome <=47 === "[object Object]"
       *  - Edge <=20 === "[object Object]"
       *  - Firefox 29-Latest === "[object Promise]"
       *  - Safari 7.1-Latest === "[object Promise]"
       */


      if (promiseExists && objPrototype === Promise.prototype) {
        return 'Promise';
      }
      /* ! Speed optimisation
      * Pre:
      *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)
      * Post:
      *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)
      */


      if (setExists && objPrototype === Set.prototype) {
        return 'Set';
      }
      /* ! Speed optimisation
      * Pre:
      *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)
      * Post:
      *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)
      */


      if (mapExists && objPrototype === Map.prototype) {
        return 'Map';
      }
      /* ! Speed optimisation
      * Pre:
      *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)
      * Post:
      *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)
      */


      if (weakSetExists && objPrototype === WeakSet.prototype) {
        return 'WeakSet';
      }
      /* ! Speed optimisation
      * Pre:
      *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)
      * Post:
      *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)
      */


      if (weakMapExists && objPrototype === WeakMap.prototype) {
        return 'WeakMap';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)
       * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be "DataView":
       * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``
       *  - Edge <=13 === "[object Object]"
       */


      if (dataViewExists && objPrototype === DataView.prototype) {
        return 'DataView';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)
       * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be "Map Iterator":
       * Test: `Object.prototype.toString.call(new Map().entries())``
       *  - Edge <=13 === "[object Object]"
       */


      if (mapExists && objPrototype === mapIteratorPrototype) {
        return 'Map Iterator';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)
       * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be "Set Iterator":
       * Test: `Object.prototype.toString.call(new Set().entries())``
       *  - Edge <=13 === "[object Object]"
       */


      if (setExists && objPrototype === setIteratorPrototype) {
        return 'Set Iterator';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)
       * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be "Array Iterator":
       * Test: `Object.prototype.toString.call([][Symbol.iterator]())``
       *  - Edge <=13 === "[object Object]"
       */


      if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {
        return 'Array Iterator';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)
       * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be "String Iterator":
       * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``
       *  - Edge <=13 === "[object Object]"
       */


      if (stringIteratorExists && objPrototype === stringIteratorPrototype) {
        return 'String Iterator';
      }
      /* ! Speed optimisation
      * Pre:
      *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)
      * Post:
      *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)
      */


      if (objPrototype === null) {
        return 'Object';
      }

      return Object.prototype.toString.call(obj).slice(toStringLeftSliceLength, toStringRightSliceLength);
    }

    return typeDetect;
  });
});/*!
 * Chai - expectTypes utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .expectTypes(obj, types)
 *
 * Ensures that the object being tested against is of a valid type.
 *
 *     utils.expectTypes(this, ['array', 'object', 'string']);
 *
 * @param {Mixed} obj constructed Assertion
 * @param {Array} type A list of allowed types for this assertion
 * @namespace Utils
 * @name expectTypes
 * @api public
 */

var expectTypes = function expectTypes(obj, types) {
  var flagMsg = flag(obj, 'message');
  var ssfi = flag(obj, 'ssfi');
  flagMsg = flagMsg ? flagMsg + ': ' : '';
  obj = flag(obj, 'object');
  types = types.map(function (t) {
    return t.toLowerCase();
  });
  types.sort(); // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'

  var str = types.map(function (t, index) {
    var art = ~['a', 'e', 'i', 'o', 'u'].indexOf(t.charAt(0)) ? 'an' : 'a';
    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';
    return or + art + ' ' + t;
  }).join(', ');
  var objType = typeDetect(obj).toLowerCase();

  if (!types.some(function (expected) {
    return objType === expected;
  })) {
    throw new assertionError(flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given', undefined, ssfi);
  }
};/*!
 * Chai - getActual utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getActual(object, [actual])
 *
 * Returns the `actual` value for an Assertion.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name getActual
 */
var getActual = function getActual(obj, args) {
  return args.length > 4 ? args[4] : obj._obj;
};/* !
 * Chai - getFuncName utility
 * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getFuncName(constructorFn)
 *
 * Returns the name of a function.
 * When a non-function instance is passed, returns `null`.
 * This also includes a polyfill function if `aFunc.name` is not defined.
 *
 * @name getFuncName
 * @param {Function} funct
 * @namespace Utils
 * @api public
 */

var toString = Function.prototype.toString;
var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/;

function getFuncName(aFunc) {
  if (typeof aFunc !== 'function') {
    return null;
  }

  var name = '';

  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {
    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined
    var match = toString.call(aFunc).match(functionNameMatch);

    if (match) {
      name = match[1];
    }
  } else {
    // If we've got a `name` property we just use it
    name = aFunc.name;
  }

  return name;
}

var getFuncName_1 = getFuncName;/*!
 * Chai - getProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getProperties(object)
 *
 * This allows the retrieval of property names of an object, enumerable or not,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getProperties
 * @api public
 */
var getProperties = function getProperties(object) {
  var result = Object.getOwnPropertyNames(object);

  function addProperty(property) {
    if (result.indexOf(property) === -1) {
      result.push(property);
    }
  }

  var proto = Object.getPrototypeOf(object);

  while (proto !== null) {
    Object.getOwnPropertyNames(proto).forEach(addProperty);
    proto = Object.getPrototypeOf(proto);
  }

  return result;
};/*!
 * Chai - getEnumerableProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getEnumerableProperties(object)
 *
 * This allows the retrieval of enumerable property names of an object,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getEnumerableProperties
 * @api public
 */
var getEnumerableProperties = function getEnumerableProperties(object) {
  var result = [];

  for (var name in object) {
    result.push(name);
  }

  return result;
};var config = {
  /**
   * ### config.includeStack
   *
   * User configurable property, influences whether stack trace
   * is included in Assertion error message. Default of false
   * suppresses stack trace in the error message.
   *
   *     chai.config.includeStack = true;  // enable stack on error
   *
   * @param {Boolean}
   * @api public
   */
  includeStack: false,

  /**
   * ### config.showDiff
   *
   * User configurable property, influences whether or not
   * the `showDiff` flag should be included in the thrown
   * AssertionErrors. `false` will always be `false`; `true`
   * will be true when the assertion has requested a diff
   * be shown.
   *
   * @param {Boolean}
   * @api public
   */
  showDiff: true,

  /**
   * ### config.truncateThreshold
   *
   * User configurable property, sets length threshold for actual and
   * expected values in assertion errors. If this threshold is exceeded, for
   * example for large data structures, the value is replaced with something
   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.
   *
   * Set it to zero if you want to disable truncating altogether.
   *
   * This is especially userful when doing assertions on arrays: having this
   * set to a reasonable large value makes the failure messages readily
   * inspectable.
   *
   *     chai.config.truncateThreshold = 0;  // disable truncating
   *
   * @param {Number}
   * @api public
   */
  truncateThreshold: 40,

  /**
   * ### config.useProxy
   *
   * User configurable property, defines if chai will use a Proxy to throw
   * an error when a non-existent property is read, which protects users
   * from typos when using property-based assertions.
   *
   * Set it to false if you want to disable this feature.
   *
   *     chai.config.useProxy = false;  // disable use of Proxy
   *
   * This feature is automatically disabled regardless of this config value
   * in environments that don't support proxies.
   *
   * @param {Boolean}
   * @api public
   */
  useProxy: true,

  /**
   * ### config.proxyExcludedKeys
   *
   * User configurable property, defines which properties should be ignored
   * instead of throwing an error if they do not exist on the assertion.
   * This is only applied if the environment Chai is running in supports proxies and
   * if the `useProxy` configuration setting is enabled.
   * By default, `then` and `inspect` will not throw an error if they do not exist on the
   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when
   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.
   *
   *     // By default these keys will not throw an error if they do not exist on the assertion object
   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];
   *
   * @param {Array}
   * @api public
   */
  proxyExcludedKeys: ['then', 'catch', 'inspect', 'toJSON']
};var inspect_1 = createCommonjsModule(function (module, exports) {
  // This is (almost) directly from Node.js utils
  // https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js
  module.exports = inspect;
  /**
   * ### .inspect(obj, [showHidden], [depth], [colors])
   *
   * Echoes the value of a value. Tries to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Boolean} showHidden Flag that shows hidden (not enumerable)
   *    properties of objects. Default is false.
   * @param {Number} depth Depth in which to descend in object. Default is 2.
   * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
   *    output. Default is false (no coloring).
   * @namespace Utils
   * @name inspect
   */

  function inspect(obj, showHidden, depth, colors) {
    var ctx = {
      showHidden: showHidden,
      seen: [],
      stylize: function (str) {
        return str;
      }
    };
    return formatValue(ctx, obj, typeof depth === 'undefined' ? 2 : depth);
  } // Returns true if object is a DOM element.


  var isDOMElement = function (object) {
    if (typeof HTMLElement === 'object') {
      return object instanceof HTMLElement;
    } else {
      return object && typeof object === 'object' && 'nodeType' in object && object.nodeType === 1 && typeof object.nodeName === 'string';
    }
  };

  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (value && typeof value.inspect === 'function' && // Filter out the util module, it's inspect function is special
    value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);

      if (typeof ret !== 'string') {
        ret = formatValue(ctx, ret, recurseTimes);
      }

      return ret;
    } // Primitive types cannot have properties


    var primitive = formatPrimitive(ctx, value);

    if (primitive) {
      return primitive;
    } // If this is a DOM element, try to get the outer HTML.


    if (isDOMElement(value)) {
      if ('outerHTML' in value) {
        return value.outerHTML; // This value does not have an outerHTML attribute,
        //   it could still be an XML element
      } else {
        // Attempt to serialize it
        try {
          if (document.xmlVersion) {
            var xmlSerializer = new XMLSerializer();
            return xmlSerializer.serializeToString(value);
          } else {
            // Firefox 11- do not support outerHTML
            //   It does, however, support innerHTML
            //   Use the following to render the element
            var ns = "http://www.w3.org/1999/xhtml";
            var container = document.createElementNS(ns, '_');
            container.appendChild(value.cloneNode(false));
            var html = container.innerHTML.replace('><', '>' + value.innerHTML + '<');
            container.innerHTML = '';
            return html;
          }
        } catch (err) {// This could be a non-native DOM implementation,
          //   continue with the normal flow:
          //   printing the element as if it is an object.
        }
      }
    } // Look up the keys of the object.


    var visibleKeys = getEnumerableProperties(value);
    var keys = ctx.showHidden ? getProperties(value) : visibleKeys;
    var name, nameSuffix; // Some type of object without properties can be shortcut.
    // In IE, errors have a single `stack` property, or if they are vanilla `Error`,
    // a `stack` plus `description` property; ignore those for consistency.

    if (keys.length === 0 || isError(value) && (keys.length === 1 && keys[0] === 'stack' || keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')) {
      if (typeof value === 'function') {
        name = getFuncName_1(value);
        nameSuffix = name ? ': ' + name : '';
        return ctx.stylize('[Function' + nameSuffix + ']', 'special');
      }

      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }

      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
      }

      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '',
        array = false,
        typedArray = false,
        braces = ['{', '}'];

    if (isTypedArray(value)) {
      typedArray = true;
      braces = ['[', ']'];
    } // Make Array say that they are Array


    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    } // Make functions say that they are functions


    if (typeof value === 'function') {
      name = getFuncName_1(value);
      nameSuffix = name ? ': ' + name : '';
      base = ' [Function' + nameSuffix + ']';
    } // Make RegExps say that they are RegExps


    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    } // Make dates with properties first say the date


    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    } // Make error with message first say the error


    if (isError(value)) {
      return formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);
    var output;

    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else if (typedArray) {
      return formatTypedArray(value);
    } else {
      output = keys.map(function (key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();
    return reduceToSingleString(output, base, braces);
  }

  function formatPrimitive(ctx, value) {
    switch (typeof value) {
      case 'undefined':
        return ctx.stylize('undefined', 'undefined');

      case 'string':
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');

      case 'number':
        if (value === 0 && 1 / value === -Infinity) {
          return ctx.stylize('-0', 'number');
        }

        return ctx.stylize('' + value, 'number');

      case 'boolean':
        return ctx.stylize('' + value, 'boolean');

      case 'symbol':
        return ctx.stylize(value.toString(), 'symbol');
    } // For some reason typeof null is "object", so special case here.


    if (value === null) {
      return ctx.stylize('null', 'null');
    }
  }

  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }

  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];

    for (var i = 0, l = value.length; i < l; ++i) {
      if (Object.prototype.hasOwnProperty.call(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
      } else {
        output.push('');
      }
    }

    keys.forEach(function (key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
      }
    });
    return output;
  }

  function formatTypedArray(value) {
    var str = '[ ';

    for (var i = 0; i < value.length; ++i) {
      if (str.length >= config.truncateThreshold - 7) {
        str += '...';
        break;
      }

      str += value[i] + ', ';
    }

    str += ' ]'; // Removing trailing `, ` if the array was not truncated

    if (str.indexOf(',  ]') !== -1) {
      str = str.replace(',  ]', ' ]');
    }

    return str;
  }

  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name;
    var propDescriptor = Object.getOwnPropertyDescriptor(value, key);
    var str;

    if (propDescriptor) {
      if (propDescriptor.get) {
        if (propDescriptor.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (propDescriptor.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
    }

    if (visibleKeys.indexOf(key) < 0) {
      name = '[' + key + ']';
    }

    if (!str) {
      if (ctx.seen.indexOf(value[key]) < 0) {
        if (recurseTimes === null) {
          str = formatValue(ctx, value[key], null);
        } else {
          str = formatValue(ctx, value[key], recurseTimes - 1);
        }

        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function (line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function (line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }

    if (typeof name === 'undefined') {
      if (array && key.match(/^\d+$/)) {
        return str;
      }

      name = JSON.stringify('' + key);

      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }

  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function (prev, cur) {
      return prev + cur.length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }

  function isTypedArray(ar) {
    // Unfortunately there's no way to check if an object is a TypedArray
    // We have to check if it's one of these types
    return typeof ar === 'object' && /\w+Array]$/.test(objectToString(ar));
  }

  function isArray(ar) {
    return Array.isArray(ar) || typeof ar === 'object' && objectToString(ar) === '[object Array]';
  }

  function isRegExp(re) {
    return typeof re === 'object' && objectToString(re) === '[object RegExp]';
  }

  function isDate(d) {
    return typeof d === 'object' && objectToString(d) === '[object Date]';
  }

  function isError(e) {
    return typeof e === 'object' && objectToString(e) === '[object Error]';
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }
});/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

/**
 * ### .objDisplay(object)
 *
 * Determines if an object or an array matches
 * criteria to be inspected in-line for error
 * messages or should be truncated.
 *
 * @param {Mixed} javascript object to inspect
 * @name objDisplay
 * @namespace Utils
 * @api public
 */

var objDisplay = function objDisplay(obj) {
  var str = inspect_1(obj),
      type = Object.prototype.toString.call(obj);

  if (config.truncateThreshold && str.length >= config.truncateThreshold) {
    if (type === '[object Function]') {
      return !obj.name || obj.name === '' ? '[Function]' : '[Function: ' + obj.name + ']';
    } else if (type === '[object Array]') {
      return '[ Array(' + obj.length + ') ]';
    } else if (type === '[object Object]') {
      var keys = Object.keys(obj),
          kstr = keys.length > 2 ? keys.splice(0, 2).join(', ') + ', ...' : keys.join(', ');
      return '{ Object (' + kstr + ') }';
    } else {
      return str;
    }
  } else {
    return str;
  }
};/*!
 * Chai - message composition utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

/**
 * ### .getMessage(object, message, negateMessage)
 *
 * Construct the error message based on flags
 * and template tags. Template tags will return
 * a stringified inspection of the object referenced.
 *
 * Message template tags:
 * - `#{this}` current asserted object
 * - `#{act}` actual value
 * - `#{exp}` expected value
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name getMessage
 * @api public
 */

var getMessage = function getMessage(obj, args) {
  var negate = flag(obj, 'negate'),
      val = flag(obj, 'object'),
      expected = args[3],
      actual = getActual(obj, args),
      msg = negate ? args[2] : args[1],
      flagMsg = flag(obj, 'message');
  if (typeof msg === "function") msg = msg();
  msg = msg || '';
  msg = msg.replace(/#\{this\}/g, function () {
    return objDisplay(val);
  }).replace(/#\{act\}/g, function () {
    return objDisplay(actual);
  }).replace(/#\{exp\}/g, function () {
    return objDisplay(expected);
  });
  return flagMsg ? flagMsg + ': ' + msg : msg;
};/*!
 * Chai - transferFlags utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .transferFlags(assertion, object, includeAll = true)
 *
 * Transfer all the flags for `assertion` to `object`. If
 * `includeAll` is set to `false`, then the base Chai
 * assertion flags (namely `object`, `ssfi`, `lockSsfi`,
 * and `message`) will not be transferred.
 *
 *
 *     var newAssertion = new Assertion();
 *     utils.transferFlags(assertion, newAssertion);
 *
 *     var anotherAssertion = new Assertion(myObj);
 *     utils.transferFlags(assertion, anotherAssertion, false);
 *
 * @param {Assertion} assertion the assertion to transfer the flags from
 * @param {Object} object the object to transfer the flags to; usually a new assertion
 * @param {Boolean} includeAll
 * @namespace Utils
 * @name transferFlags
 * @api private
 */
var transferFlags = function transferFlags(assertion, object, includeAll) {
  var flags = assertion.__flags || (assertion.__flags = Object.create(null));

  if (!object.__flags) {
    object.__flags = Object.create(null);
  }

  includeAll = arguments.length === 3 ? includeAll : true;

  for (var flag in flags) {
    if (includeAll || flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message') {
      object.__flags[flag] = flags[flag];
    }
  }
};/* globals Symbol: false, Uint8Array: false, WeakMap: false */

/*!
 * deep-eql
 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */


function FakeMap() {
  this._key = 'chai/deep-eql__' + Math.random() + Date.now();
}

FakeMap.prototype = {
  get: function getMap(key) {
    return key[this._key];
  },
  set: function setMap(key, value) {
    if (Object.isExtensible(key)) {
      Object.defineProperty(key, this._key, {
        value: value,
        configurable: true
      });
    }
  }
};
var MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;
/*!
 * Check to see if the MemoizeMap has recorded a result of the two operands
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @returns {Boolean|null} result
*/

function memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {
  // Technically, WeakMap keys can *only* be objects, not primitives.
  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    return null;
  }

  var leftHandMap = memoizeMap.get(leftHandOperand);

  if (leftHandMap) {
    var result = leftHandMap.get(rightHandOperand);

    if (typeof result === 'boolean') {
      return result;
    }
  }

  return null;
}
/*!
 * Set the result of the equality into the MemoizeMap
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @param {Boolean} result
*/


function memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {
  // Technically, WeakMap keys can *only* be objects, not primitives.
  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    return;
  }

  var leftHandMap = memoizeMap.get(leftHandOperand);

  if (leftHandMap) {
    leftHandMap.set(rightHandOperand, result);
  } else {
    leftHandMap = new MemoizeMap();
    leftHandMap.set(rightHandOperand, result);
    memoizeMap.set(leftHandOperand, leftHandMap);
  }
}
/*!
 * Primary Export
 */


var deepEql = deepEqual;
var MemoizeMap_1 = MemoizeMap;
/**
 * Assert deeply nested sameValue equality between two objects of any type.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
 */

function deepEqual(leftHandOperand, rightHandOperand, options) {
  // If we have a comparator, we can't assume anything; so bail to its check first.
  if (options && options.comparator) {
    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
  }

  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);

  if (simpleResult !== null) {
    return simpleResult;
  } // Deeper comparisons are pushed through to a larger function


  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
}
/**
 * Many comparisons can be canceled out early via simple equality or primitive checks.
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @return {Boolean|null} equal match
 */


function simpleEqual(leftHandOperand, rightHandOperand) {
  // Equal references (except for Numbers) can be returned early
  if (leftHandOperand === rightHandOperand) {
    // Handle +-0 cases
    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;
  } // handle NaN cases


  if (leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare
  rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare
  ) {
      return true;
    } // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,
  // strings, and undefined, can be compared by reference.


  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    // Easy out b/c it would have passed the first equality check
    return false;
  }

  return null;
}
/*!
 * The main logic of the `deepEqual` function.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
*/


function extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {
  options = options || {};
  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();
  var comparator = options && options.comparator; // Check if a memoized result exists.

  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);

  if (memoizeResultLeft !== null) {
    return memoizeResultLeft;
  }

  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);

  if (memoizeResultRight !== null) {
    return memoizeResultRight;
  } // If a comparator is present, use it.


  if (comparator) {
    var comparatorResult = comparator(leftHandOperand, rightHandOperand); // Comparators may return null, in which case we want to go back to default behavior.

    if (comparatorResult === false || comparatorResult === true) {
      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);
      return comparatorResult;
    } // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide
    // what to do, we need to make sure to return the basic tests first before we move on.


    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);

    if (simpleResult !== null) {
      // Don't memoize this, it takes longer to set/retrieve than to just compare.
      return simpleResult;
    }
  }

  var leftHandType = typeDetect(leftHandOperand);

  if (leftHandType !== typeDetect(rightHandOperand)) {
    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);
    return false;
  } // Temporarily set the operands in the memoize object to prevent blowing the stack


  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);
  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);
  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);
  return result;
}

function extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {
  switch (leftHandType) {
    case 'String':
    case 'Number':
    case 'Boolean':
    case 'Date':
      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values
      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());

    case 'Promise':
    case 'Symbol':
    case 'function':
    case 'WeakMap':
    case 'WeakSet':
    case 'Error':
      return leftHandOperand === rightHandOperand;

    case 'Arguments':
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
    case 'Array':
      return iterableEqual(leftHandOperand, rightHandOperand, options);

    case 'RegExp':
      return regexpEqual(leftHandOperand, rightHandOperand);

    case 'Generator':
      return generatorEqual(leftHandOperand, rightHandOperand, options);

    case 'DataView':
      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);

    case 'ArrayBuffer':
      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);

    case 'Set':
      return entriesEqual(leftHandOperand, rightHandOperand, options);

    case 'Map':
      return entriesEqual(leftHandOperand, rightHandOperand, options);

    default:
      return objectEqual(leftHandOperand, rightHandOperand, options);
  }
}
/*!
 * Compare two Regular Expressions for equality.
 *
 * @param {RegExp} leftHandOperand
 * @param {RegExp} rightHandOperand
 * @return {Boolean} result
 */


function regexpEqual(leftHandOperand, rightHandOperand) {
  return leftHandOperand.toString() === rightHandOperand.toString();
}
/*!
 * Compare two Sets/Maps for equality. Faster than other equality functions.
 *
 * @param {Set} leftHandOperand
 * @param {Set} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function entriesEqual(leftHandOperand, rightHandOperand, options) {
  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach
  if (leftHandOperand.size !== rightHandOperand.size) {
    return false;
  }

  if (leftHandOperand.size === 0) {
    return true;
  }

  var leftHandItems = [];
  var rightHandItems = [];
  leftHandOperand.forEach(function gatherEntries(key, value) {
    leftHandItems.push([key, value]);
  });
  rightHandOperand.forEach(function gatherEntries(key, value) {
    rightHandItems.push([key, value]);
  });
  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);
}
/*!
 * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function iterableEqual(leftHandOperand, rightHandOperand, options) {
  var length = leftHandOperand.length;

  if (length !== rightHandOperand.length) {
    return false;
  }

  if (length === 0) {
    return true;
  }

  var index = -1;

  while (++index < length) {
    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {
      return false;
    }
  }

  return true;
}
/*!
 * Simple equality for generator objects such as those returned by generator functions.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function generatorEqual(leftHandOperand, rightHandOperand, options) {
  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);
}
/*!
 * Determine if the given object has an @@iterator function.
 *
 * @param {Object} target
 * @return {Boolean} `true` if the object has an @@iterator function.
 */


function hasIteratorFunction(target) {
  return typeof Symbol !== 'undefined' && typeof target === 'object' && typeof Symbol.iterator !== 'undefined' && typeof target[Symbol.iterator] === 'function';
}
/*!
 * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.
 * This will consume the iterator - which could have side effects depending on the @@iterator implementation.
 *
 * @param {Object} target
 * @returns {Array} an array of entries from the @@iterator function
 */


function getIteratorEntries(target) {
  if (hasIteratorFunction(target)) {
    try {
      return getGeneratorEntries(target[Symbol.iterator]());
    } catch (iteratorError) {
      return [];
    }
  }

  return [];
}
/*!
 * Gets all entries from a Generator. This will consume the generator - which could have side effects.
 *
 * @param {Generator} target
 * @returns {Array} an array of entries from the Generator.
 */


function getGeneratorEntries(generator) {
  var generatorResult = generator.next();
  var accumulator = [generatorResult.value];

  while (generatorResult.done === false) {
    generatorResult = generator.next();
    accumulator.push(generatorResult.value);
  }

  return accumulator;
}
/*!
 * Gets all own and inherited enumerable keys from a target.
 *
 * @param {Object} target
 * @returns {Array} an array of own and inherited enumerable keys from the target.
 */


function getEnumerableKeys(target) {
  var keys = [];

  for (var key in target) {
    keys.push(key);
  }

  return keys;
}
/*!
 * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of
 * each key. If any value of the given key is not equal, the function will return false (early).
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function keysEqual(leftHandOperand, rightHandOperand, keys, options) {
  var length = keys.length;

  if (length === 0) {
    return true;
  }

  for (var i = 0; i < length; i += 1) {
    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {
      return false;
    }
  }

  return true;
}
/*!
 * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`
 * for each enumerable key in the object.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function objectEqual(leftHandOperand, rightHandOperand, options) {
  var leftHandKeys = getEnumerableKeys(leftHandOperand);
  var rightHandKeys = getEnumerableKeys(rightHandOperand);

  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {
    leftHandKeys.sort();
    rightHandKeys.sort();

    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {
      return false;
    }

    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);
  }

  var leftHandEntries = getIteratorEntries(leftHandOperand);
  var rightHandEntries = getIteratorEntries(rightHandOperand);

  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {
    leftHandEntries.sort();
    rightHandEntries.sort();
    return iterableEqual(leftHandEntries, rightHandEntries, options);
  }

  if (leftHandKeys.length === 0 && leftHandEntries.length === 0 && rightHandKeys.length === 0 && rightHandEntries.length === 0) {
    return true;
  }

  return false;
}
/*!
 * Returns true if the argument is a primitive.
 *
 * This intentionally returns true for all objects that can be compared by reference,
 * including functions and symbols.
 *
 * @param {Mixed} value
 * @return {Boolean} result
 */


function isPrimitive(value) {
  return value === null || typeof value !== 'object';
}
deepEql.MemoizeMap = MemoizeMap_1;/*!
 * Chai - isProxyEnabled helper
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .isProxyEnabled()
 *
 * Helper function to check if Chai's proxy protection feature is enabled. If
 * proxies are unsupported or disabled via the user's Chai config, then return
 * false. Otherwise, return true.
 *
 * @namespace Utils
 * @name isProxyEnabled
 */

var isProxyEnabled = function isProxyEnabled() {
  return config.useProxy && typeof Proxy !== 'undefined' && typeof Reflect !== 'undefined';
};/*!
 * Chai - addProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .addProperty(ctx, name, getter)
 *
 * Adds a property to the prototype of an object.
 *
 *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.instanceof(Foo);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.foo;
 *
 * @param {Object} ctx object to which the property is added
 * @param {String} name of property to add
 * @param {Function} getter function to be used for name
 * @namespace Utils
 * @name addProperty
 * @api public
 */

var addProperty = function addProperty(ctx, name, getter) {
  getter = getter === undefined ? function () {} : getter;
  Object.defineProperty(ctx, name, {
    get: function propertyGetter() {
      // Setting the `ssfi` flag to `propertyGetter` causes this function to
      // be the starting point for removing implementation frames from the
      // stack trace of a failed assertion.
      //
      // However, we only want to use this function as the starting point if
      // the `lockSsfi` flag isn't set and proxy protection is disabled.
      //
      // If the `lockSsfi` flag is set, then either this assertion has been
      // overwritten by another assertion, or this assertion is being invoked
      // from inside of another assertion. In the first case, the `ssfi` flag
      // has already been set by the overwriting assertion. In the second
      // case, the `ssfi` flag has already been set by the outer assertion.
      //
      // If proxy protection is enabled, then the `ssfi` flag has already been
      // set by the proxy getter.
      if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
        flag(this, 'ssfi', propertyGetter);
      }

      var result = getter.call(this);
      if (result !== undefined) return result;
      var newAssertion = new chai$1.Assertion();
      transferFlags(this, newAssertion);
      return newAssertion;
    },
    configurable: true
  });
};var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');
/*!
 * Chai - addLengthGuard utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .addLengthGuard(fn, assertionName, isChainable)
 *
 * Define `length` as a getter on the given uninvoked method assertion. The
 * getter acts as a guard against chaining `length` directly off of an uninvoked
 * method assertion, which is a problem because it references `function`'s
 * built-in `length` property instead of Chai's `length` assertion. When the
 * getter catches the user making this mistake, it throws an error with a
 * helpful message.
 *
 * There are two ways in which this mistake can be made. The first way is by
 * chaining the `length` assertion directly off of an uninvoked chainable
 * method. In this case, Chai suggests that the user use `lengthOf` instead. The
 * second way is by chaining the `length` assertion directly off of an uninvoked
 * non-chainable method. Non-chainable methods must be invoked prior to
 * chaining. In this case, Chai suggests that the user consult the docs for the
 * given assertion.
 *
 * If the `length` property of functions is unconfigurable, then return `fn`
 * without modification.
 *
 * Note that in ES6, the function's `length` property is configurable, so once
 * support for legacy environments is dropped, Chai's `length` property can
 * replace the built-in function's `length` property, and this length guard will
 * no longer be necessary. In the mean time, maintaining consistency across all
 * environments is the priority.
 *
 * @param {Function} fn
 * @param {String} assertionName
 * @param {Boolean} isChainable
 * @namespace Utils
 * @name addLengthGuard
 */

var addLengthGuard = function addLengthGuard(fn, assertionName, isChainable) {
  if (!fnLengthDesc.configurable) return fn;
  Object.defineProperty(fn, 'length', {
    get: function () {
      if (isChainable) {
        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' + ' to a compatibility issue, "length" cannot directly follow "' + assertionName + '". Use "' + assertionName + '.lengthOf" instead.');
      }

      throw Error('Invalid Chai property: ' + assertionName + '.length. See' + ' docs for proper usage of "' + assertionName + '".');
    }
  });
  return fn;
};/*!
 * Chai - proxify utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .proxify(object)
 *
 * Return a proxy of given object that throws an error when a non-existent
 * property is read. By default, the root cause is assumed to be a misspelled
 * property, and thus an attempt is made to offer a reasonable suggestion from
 * the list of existing properties. However, if a nonChainableMethodName is
 * provided, then the root cause is instead a failure to invoke a non-chainable
 * method prior to reading the non-existent property.
 *
 * If proxies are unsupported or disabled via the user's Chai config, then
 * return object without modification.
 *
 * @param {Object} obj
 * @param {String} nonChainableMethodName
 * @namespace Utils
 * @name proxify
 */

var builtins = ['__flags', '__methods', '_obj', 'assert'];

var proxify = function proxify(obj, nonChainableMethodName) {
  if (!isProxyEnabled()) return obj;
  return new Proxy(obj, {
    get: function proxyGetter(target, property) {
      // This check is here because we should not throw errors on Symbol properties
      // such as `Symbol.toStringTag`.
      // The values for which an error should be thrown can be configured using
      // the `config.proxyExcludedKeys` setting.
      if (typeof property === 'string' && config.proxyExcludedKeys.indexOf(property) === -1 && !Reflect.has(target, property)) {
        // Special message for invalid property access of non-chainable methods.
        if (nonChainableMethodName) {
          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' + property + '. See docs for proper usage of "' + nonChainableMethodName + '".');
        } // If the property is reasonably close to an existing Chai property,
        // suggest that property to the user. Only suggest properties with a
        // distance less than 4.


        var suggestion = null;
        var suggestionDistance = 4;
        getProperties(target).forEach(function (prop) {
          if (!Object.prototype.hasOwnProperty(prop) && builtins.indexOf(prop) === -1) {
            var dist = stringDistanceCapped(property, prop, suggestionDistance);

            if (dist < suggestionDistance) {
              suggestion = prop;
              suggestionDistance = dist;
            }
          }
        });

        if (suggestion !== null) {
          throw Error('Invalid Chai property: ' + property + '. Did you mean "' + suggestion + '"?');
        } else {
          throw Error('Invalid Chai property: ' + property);
        }
      } // Use this proxy getter as the starting point for removing implementation
      // frames from the stack trace of a failed assertion. For property
      // assertions, this prevents the proxy getter from showing up in the stack
      // trace since it's invoked before the property getter. For method and
      // chainable method assertions, this flag will end up getting changed to
      // the method wrapper, which is good since this frame will no longer be in
      // the stack once the method is invoked. Note that Chai builtin assertion
      // properties such as `__flags` are skipped since this is only meant to
      // capture the starting point of an assertion. This step is also skipped
      // if the `lockSsfi` flag is set, thus indicating that this assertion is
      // being called from within another assertion. In that case, the `ssfi`
      // flag is already set to the outer assertion's starting point.


      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {
        flag(target, 'ssfi', proxyGetter);
      }

      return Reflect.get(target, property);
    }
  });
};
/**
 * # stringDistanceCapped(strA, strB, cap)
 * Return the Levenshtein distance between two strings, but no more than cap.
 * @param {string} strA
 * @param {string} strB
 * @param {number} number
 * @return {number} min(string distance between strA and strB, cap)
 * @api private
 */


function stringDistanceCapped(strA, strB, cap) {
  if (Math.abs(strA.length - strB.length) >= cap) {
    return cap;
  }

  var memo = []; // `memo` is a two-dimensional array containing distances.
  // memo[i][j] is the distance between strA.slice(0, i) and
  // strB.slice(0, j).

  for (var i = 0; i <= strA.length; i++) {
    memo[i] = Array(strB.length + 1).fill(0);
    memo[i][0] = i;
  }

  for (var j = 0; j < strB.length; j++) {
    memo[0][j] = j;
  }

  for (var i = 1; i <= strA.length; i++) {
    var ch = strA.charCodeAt(i - 1);

    for (var j = 1; j <= strB.length; j++) {
      if (Math.abs(i - j) >= cap) {
        memo[i][j] = cap;
        continue;
      }

      memo[i][j] = Math.min(memo[i - 1][j] + 1, memo[i][j - 1] + 1, memo[i - 1][j - 1] + (ch === strB.charCodeAt(j - 1) ? 0 : 1));
    }
  }

  return memo[strA.length][strB.length];
}/*!
 * Chai - addMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .addMethod(ctx, name, method)
 *
 * Adds a method to the prototype of an object.
 *
 *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(fooStr).to.be.foo('bar');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for name
 * @namespace Utils
 * @name addMethod
 * @api public
 */

var addMethod = function addMethod(ctx, name, method) {
  var methodWrapper = function () {
    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the
    // starting point for removing implementation frames from the stack trace of
    // a failed assertion.
    //
    // However, we only want to use this function as the starting point if the
    // `lockSsfi` flag isn't set.
    //
    // If the `lockSsfi` flag is set, then either this assertion has been
    // overwritten by another assertion, or this assertion is being invoked from
    // inside of another assertion. In the first case, the `ssfi` flag has
    // already been set by the overwriting assertion. In the second case, the
    // `ssfi` flag has already been set by the outer assertion.
    if (!flag(this, 'lockSsfi')) {
      flag(this, 'ssfi', methodWrapper);
    }

    var result = method.apply(this, arguments);
    if (result !== undefined) return result;
    var newAssertion = new chai$1.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  };

  addLengthGuard(methodWrapper, name, false);
  ctx[name] = proxify(methodWrapper, name);
};/*!
 * Chai - overwriteProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .overwriteProperty(ctx, name, fn)
 *
 * Overwrites an already existing property getter and provides
 * access to previous value. Must return function to use as getter.
 *
 *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {
 *       return function () {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.name).to.equal('bar');
 *         } else {
 *           _super.call(this);
 *         }
 *       }
 *     });
 *
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.ok;
 *
 * @param {Object} ctx object whose property is to be overwritten
 * @param {String} name of property to overwrite
 * @param {Function} getter function that returns a getter function to be used for name
 * @namespace Utils
 * @name overwriteProperty
 * @api public
 */

var overwriteProperty = function overwriteProperty(ctx, name, getter) {
  var _get = Object.getOwnPropertyDescriptor(ctx, name),
      _super = function () {};

  if (_get && 'function' === typeof _get.get) _super = _get.get;
  Object.defineProperty(ctx, name, {
    get: function overwritingPropertyGetter() {
      // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this
      // function to be the starting point for removing implementation frames
      // from the stack trace of a failed assertion.
      //
      // However, we only want to use this function as the starting point if
      // the `lockSsfi` flag isn't set and proxy protection is disabled.
      //
      // If the `lockSsfi` flag is set, then either this assertion has been
      // overwritten by another assertion, or this assertion is being invoked
      // from inside of another assertion. In the first case, the `ssfi` flag
      // has already been set by the overwriting assertion. In the second
      // case, the `ssfi` flag has already been set by the outer assertion.
      //
      // If proxy protection is enabled, then the `ssfi` flag has already been
      // set by the proxy getter.
      if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
        flag(this, 'ssfi', overwritingPropertyGetter);
      } // Setting the `lockSsfi` flag to `true` prevents the overwritten
      // assertion from changing the `ssfi` flag. By this point, the `ssfi`
      // flag is already set to the correct starting point for this assertion.


      var origLockSsfi = flag(this, 'lockSsfi');
      flag(this, 'lockSsfi', true);
      var result = getter(_super).call(this);
      flag(this, 'lockSsfi', origLockSsfi);

      if (result !== undefined) {
        return result;
      }

      var newAssertion = new chai$1.Assertion();
      transferFlags(this, newAssertion);
      return newAssertion;
    },
    configurable: true
  });
};/*!
 * Chai - overwriteMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .overwriteMethod(ctx, name, fn)
 *
 * Overwrites an already existing method and provides
 * access to previous function. Must return function
 * to be used for name.
 *
 *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {
 *       return function (str) {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.value).to.equal(str);
 *         } else {
 *           _super.apply(this, arguments);
 *         }
 *       }
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.equal('bar');
 *
 * @param {Object} ctx object whose method is to be overwritten
 * @param {String} name of method to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @namespace Utils
 * @name overwriteMethod
 * @api public
 */

var overwriteMethod = function overwriteMethod(ctx, name, method) {
  var _method = ctx[name],
      _super = function () {
    throw new Error(name + ' is not a function');
  };

  if (_method && 'function' === typeof _method) _super = _method;

  var overwritingMethodWrapper = function () {
    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this
    // function to be the starting point for removing implementation frames from
    // the stack trace of a failed assertion.
    //
    // However, we only want to use this function as the starting point if the
    // `lockSsfi` flag isn't set.
    //
    // If the `lockSsfi` flag is set, then either this assertion has been
    // overwritten by another assertion, or this assertion is being invoked from
    // inside of another assertion. In the first case, the `ssfi` flag has
    // already been set by the overwriting assertion. In the second case, the
    // `ssfi` flag has already been set by the outer assertion.
    if (!flag(this, 'lockSsfi')) {
      flag(this, 'ssfi', overwritingMethodWrapper);
    } // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion
    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already
    // set to the correct starting point for this assertion.


    var origLockSsfi = flag(this, 'lockSsfi');
    flag(this, 'lockSsfi', true);
    var result = method(_super).apply(this, arguments);
    flag(this, 'lockSsfi', origLockSsfi);

    if (result !== undefined) {
      return result;
    }

    var newAssertion = new chai$1.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  };

  addLengthGuard(overwritingMethodWrapper, name, false);
  ctx[name] = proxify(overwritingMethodWrapper, name);
};/*!
 * Chai - addChainingMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

/*!
 * Module variables
 */
// Check whether `Object.setPrototypeOf` is supported

var canSetPrototype = typeof Object.setPrototypeOf === 'function'; // Without `Object.setPrototypeOf` support, this module will need to add properties to a function.
// However, some of functions' own props are not configurable and should be skipped.

var testFn = function () {};

var excludeNames = Object.getOwnPropertyNames(testFn).filter(function (name) {
  var propDesc = Object.getOwnPropertyDescriptor(testFn, name); // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,
  // but then returns `undefined` as the property descriptor for `callee`. As a
  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,
  // and then filter it out if it's not an object as it should be.

  if (typeof propDesc !== 'object') return true;
  return !propDesc.configurable;
}); // Cache `Function` properties

var call = Function.prototype.call,
    apply = Function.prototype.apply;
/**
 * ### .addChainableMethod(ctx, name, method, chainingBehavior)
 *
 * Adds a method to an object, such that the method can also be chained.
 *
 *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);
 *
 * The result can then be used as both a method assertion, executing both `method` and
 * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.
 *
 *     expect(fooStr).to.be.foo('bar');
 *     expect(fooStr).to.be.foo.equal('foo');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for `name`, when called
 * @param {Function} chainingBehavior function to be called every time the property is accessed
 * @namespace Utils
 * @name addChainableMethod
 * @api public
 */

var addChainableMethod = function addChainableMethod(ctx, name, method, chainingBehavior) {
  if (typeof chainingBehavior !== 'function') {
    chainingBehavior = function () {};
  }

  var chainableBehavior = {
    method: method,
    chainingBehavior: chainingBehavior
  }; // save the methods so we can overwrite them later, if we need to.

  if (!ctx.__methods) {
    ctx.__methods = {};
  }

  ctx.__methods[name] = chainableBehavior;
  Object.defineProperty(ctx, name, {
    get: function chainableMethodGetter() {
      chainableBehavior.chainingBehavior.call(this);

      var chainableMethodWrapper = function () {
        // Setting the `ssfi` flag to `chainableMethodWrapper` causes this
        // function to be the starting point for removing implementation
        // frames from the stack trace of a failed assertion.
        //
        // However, we only want to use this function as the starting point if
        // the `lockSsfi` flag isn't set.
        //
        // If the `lockSsfi` flag is set, then this assertion is being
        // invoked from inside of another assertion. In this case, the `ssfi`
        // flag has already been set by the outer assertion.
        //
        // Note that overwriting a chainable method merely replaces the saved
        // methods in `ctx.__methods` instead of completely replacing the
        // overwritten assertion. Therefore, an overwriting assertion won't
        // set the `ssfi` or `lockSsfi` flags.
        if (!flag(this, 'lockSsfi')) {
          flag(this, 'ssfi', chainableMethodWrapper);
        }

        var result = chainableBehavior.method.apply(this, arguments);

        if (result !== undefined) {
          return result;
        }

        var newAssertion = new chai$1.Assertion();
        transferFlags(this, newAssertion);
        return newAssertion;
      };

      addLengthGuard(chainableMethodWrapper, name, true); // Use `Object.setPrototypeOf` if available

      if (canSetPrototype) {
        // Inherit all properties from the object by replacing the `Function` prototype
        var prototype = Object.create(this); // Restore the `call` and `apply` methods from `Function`

        prototype.call = call;
        prototype.apply = apply;
        Object.setPrototypeOf(chainableMethodWrapper, prototype);
      } // Otherwise, redefine all properties (slow!)
      else {
          var asserterNames = Object.getOwnPropertyNames(ctx);
          asserterNames.forEach(function (asserterName) {
            if (excludeNames.indexOf(asserterName) !== -1) {
              return;
            }

            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
            Object.defineProperty(chainableMethodWrapper, asserterName, pd);
          });
        }

      transferFlags(this, chainableMethodWrapper);
      return proxify(chainableMethodWrapper);
    },
    configurable: true
  });
};/*!
 * Chai - overwriteChainableMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)
 *
 * Overwrites an already existing chainable method
 * and provides access to the previous function or
 * property.  Must return functions to be used for
 * name.
 *
 *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',
 *       function (_super) {
 *       }
 *     , function (_super) {
 *       }
 *     );
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.have.lengthOf(3);
 *     expect(myFoo).to.have.lengthOf.above(3);
 *
 * @param {Object} ctx object whose method / property is to be overwritten
 * @param {String} name of method / property to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @param {Function} chainingBehavior function that returns a function to be used for property
 * @namespace Utils
 * @name overwriteChainableMethod
 * @api public
 */

var overwriteChainableMethod = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {
  var chainableBehavior = ctx.__methods[name];
  var _chainingBehavior = chainableBehavior.chainingBehavior;

  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {
    var result = chainingBehavior(_chainingBehavior).call(this);

    if (result !== undefined) {
      return result;
    }

    var newAssertion = new chai$1.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  };

  var _method = chainableBehavior.method;

  chainableBehavior.method = function overwritingChainableMethodWrapper() {
    var result = method(_method).apply(this, arguments);

    if (result !== undefined) {
      return result;
    }

    var newAssertion = new chai$1.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  };
};/*!
 * Chai - compareByInspect utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

/**
 * ### .compareByInspect(mixed, mixed)
 *
 * To be used as a compareFunction with Array.prototype.sort. Compares elements
 * using inspect instead of default behavior of using toString so that Symbols
 * and objects with irregular/missing toString can still be sorted without a
 * TypeError.
 *
 * @param {Mixed} first element to compare
 * @param {Mixed} second element to compare
 * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1
 * @name compareByInspect
 * @namespace Utils
 * @api public
 */

var compareByInspect = function compareByInspect(a, b) {
  return inspect_1(a) < inspect_1(b) ? -1 : 1;
};/*!
 * Chai - getOwnEnumerablePropertySymbols utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getOwnEnumerablePropertySymbols(object)
 *
 * This allows the retrieval of directly-owned enumerable property symbols of an
 * object. This function is necessary because Object.getOwnPropertySymbols
 * returns both enumerable and non-enumerable property symbols.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getOwnEnumerablePropertySymbols
 * @api public
 */
var getOwnEnumerablePropertySymbols = function getOwnEnumerablePropertySymbols(obj) {
  if (typeof Object.getOwnPropertySymbols !== 'function') return [];
  return Object.getOwnPropertySymbols(obj).filter(function (sym) {
    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;
  });
};/*!
 * Chai - getOwnEnumerableProperties utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

/**
 * ### .getOwnEnumerableProperties(object)
 *
 * This allows the retrieval of directly-owned enumerable property names and
 * symbols of an object. This function is necessary because Object.keys only
 * returns enumerable property names, not enumerable property symbols.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getOwnEnumerableProperties
 * @api public
 */

var getOwnEnumerableProperties = function getOwnEnumerableProperties(obj) {
  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));
};/* !
 * Chai - checkError utility
 * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .checkError
 *
 * Checks that an error conforms to a given set of criteria and/or retrieves information about it.
 *
 * @api public
 */

/**
 * ### .compatibleInstance(thrown, errorLike)
 *
 * Checks if two instances are compatible (strict equal).
 * Returns false if errorLike is not an instance of Error, because instances
 * can only be compatible if they're both error instances.
 *
 * @name compatibleInstance
 * @param {Error} thrown error
 * @param {Error|ErrorConstructor} errorLike object to compare against
 * @namespace Utils
 * @api public
 */

function compatibleInstance(thrown, errorLike) {
  return errorLike instanceof Error && thrown === errorLike;
}
/**
 * ### .compatibleConstructor(thrown, errorLike)
 *
 * Checks if two constructors are compatible.
 * This function can receive either an error constructor or
 * an error instance as the `errorLike` argument.
 * Constructors are compatible if they're the same or if one is
 * an instance of another.
 *
 * @name compatibleConstructor
 * @param {Error} thrown error
 * @param {Error|ErrorConstructor} errorLike object to compare against
 * @namespace Utils
 * @api public
 */


function compatibleConstructor(thrown, errorLike) {
  if (errorLike instanceof Error) {
    // If `errorLike` is an instance of any error we compare their constructors
    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;
  } else if (errorLike.prototype instanceof Error || errorLike === Error) {
    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly
    return thrown.constructor === errorLike || thrown instanceof errorLike;
  }

  return false;
}
/**
 * ### .compatibleMessage(thrown, errMatcher)
 *
 * Checks if an error's message is compatible with a matcher (String or RegExp).
 * If the message contains the String or passes the RegExp test,
 * it is considered compatible.
 *
 * @name compatibleMessage
 * @param {Error} thrown error
 * @param {String|RegExp} errMatcher to look for into the message
 * @namespace Utils
 * @api public
 */


function compatibleMessage(thrown, errMatcher) {
  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;

  if (errMatcher instanceof RegExp) {
    return errMatcher.test(comparisonString);
  } else if (typeof errMatcher === 'string') {
    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers
  }

  return false;
}
/**
 * ### .getFunctionName(constructorFn)
 *
 * Returns the name of a function.
 * This also includes a polyfill function if `constructorFn.name` is not defined.
 *
 * @name getFunctionName
 * @param {Function} constructorFn
 * @namespace Utils
 * @api private
 */


var functionNameMatch$1 = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\(\/]+)/;

function getFunctionName(constructorFn) {
  var name = '';

  if (typeof constructorFn.name === 'undefined') {
    // Here we run a polyfill if constructorFn.name is not defined
    var match = String(constructorFn).match(functionNameMatch$1);

    if (match) {
      name = match[1];
    }
  } else {
    name = constructorFn.name;
  }

  return name;
}
/**
 * ### .getConstructorName(errorLike)
 *
 * Gets the constructor name for an Error instance or constructor itself.
 *
 * @name getConstructorName
 * @param {Error|ErrorConstructor} errorLike
 * @namespace Utils
 * @api public
 */


function getConstructorName(errorLike) {
  var constructorName = errorLike;

  if (errorLike instanceof Error) {
    constructorName = getFunctionName(errorLike.constructor);
  } else if (typeof errorLike === 'function') {
    // If `err` is not an instance of Error it is an error constructor itself or another function.
    // If we've got a common function we get its name, otherwise we may need to create a new instance
    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.
    constructorName = getFunctionName(errorLike).trim() || getFunctionName(new errorLike()); // eslint-disable-line new-cap
  }

  return constructorName;
}
/**
 * ### .getMessage(errorLike)
 *
 * Gets the error message from an error.
 * If `err` is a String itself, we return it.
 * If the error has no message, we return an empty string.
 *
 * @name getMessage
 * @param {Error|String} errorLike
 * @namespace Utils
 * @api public
 */


function getMessage$1(errorLike) {
  var msg = '';

  if (errorLike && errorLike.message) {
    msg = errorLike.message;
  } else if (typeof errorLike === 'string') {
    msg = errorLike;
  }

  return msg;
}

var checkError = {
  compatibleInstance: compatibleInstance,
  compatibleConstructor: compatibleConstructor,
  compatibleMessage: compatibleMessage,
  getMessage: getMessage$1,
  getConstructorName: getConstructorName
};/*!
 * Chai - isNaN utility
 * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>
 * MIT Licensed
 */

/**
 * ### .isNaN(value)
 *
 * Checks if the given value is NaN or not.
 *
 *     utils.isNaN(NaN); // true
 *
 * @param {Value} The value which has to be checked if it is NaN
 * @name isNaN
 * @api private
 */
function isNaN$1(value) {
  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number
  // section's NOTE.
  return value !== value;
} // If ECMAScript 6's Number.isNaN is present, prefer that.


var _isNaN = Number.isNaN || isNaN$1;/*!
 * chai
 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Dependencies that are used for multiple exports are required here only once
 */

/*!
 * test utility
 */

var test$2 = test$1;
/*!
 * type utility
 */

var type = typeDetect;
/*!
 * expectTypes utility
 */

var expectTypes$1 = expectTypes;
/*!
 * message utility
 */

var getMessage$2 = getMessage;
/*!
 * actual utility
 */

var getActual$1 = getActual;
/*!
 * Inspect util
 */

var inspect = inspect_1;
/*!
 * Object Display util
 */

var objDisplay$1 = objDisplay;
/*!
 * Flag utility
 */

var flag$1 = flag;
/*!
 * Flag transferring utility
 */

var transferFlags$1 = transferFlags;
/*!
 * Deep equal utility
 */

var eql = deepEql;
/*!
 * Deep path info
 */

var getPathInfo$1 = pathval.getPathInfo;
/*!
 * Check if a property exists
 */

var hasProperty$1 = pathval.hasProperty;
/*!
 * Function name
 */

var getName = getFuncName_1;
/*!
 * add Property
 */

var addProperty$1 = addProperty;
/*!
 * add Method
 */

var addMethod$1 = addMethod;
/*!
 * overwrite Property
 */

var overwriteProperty$1 = overwriteProperty;
/*!
 * overwrite Method
 */

var overwriteMethod$1 = overwriteMethod;
/*!
 * Add a chainable method
 */

var addChainableMethod$1 = addChainableMethod;
/*!
 * Overwrite chainable method
 */

var overwriteChainableMethod$1 = overwriteChainableMethod;
/*!
 * Compare by inspect method
 */

var compareByInspect$1 = compareByInspect;
/*!
 * Get own enumerable property symbols method
 */

var getOwnEnumerablePropertySymbols$1 = getOwnEnumerablePropertySymbols;
/*!
 * Get own enumerable properties method
 */

var getOwnEnumerableProperties$1 = getOwnEnumerableProperties;
/*!
 * Checks error against a given set of criteria
 */

var checkError$1 = checkError;
/*!
 * Proxify util
 */

var proxify$1 = proxify;
/*!
 * addLengthGuard util
 */

var addLengthGuard$1 = addLengthGuard;
/*!
 * isProxyEnabled helper
 */

var isProxyEnabled$1 = isProxyEnabled;
/*!
 * isNaN method
 */

var isNaN$2 = _isNaN;
var utils = {
  test: test$2,
  type: type,
  expectTypes: expectTypes$1,
  getMessage: getMessage$2,
  getActual: getActual$1,
  inspect: inspect,
  objDisplay: objDisplay$1,
  flag: flag$1,
  transferFlags: transferFlags$1,
  eql: eql,
  getPathInfo: getPathInfo$1,
  hasProperty: hasProperty$1,
  getName: getName,
  addProperty: addProperty$1,
  addMethod: addMethod$1,
  overwriteProperty: overwriteProperty$1,
  overwriteMethod: overwriteMethod$1,
  addChainableMethod: addChainableMethod$1,
  overwriteChainableMethod: overwriteChainableMethod$1,
  compareByInspect: compareByInspect$1,
  getOwnEnumerablePropertySymbols: getOwnEnumerablePropertySymbols$1,
  getOwnEnumerableProperties: getOwnEnumerableProperties$1,
  checkError: checkError$1,
  proxify: proxify$1,
  addLengthGuard: addLengthGuard$1,
  isProxyEnabled: isProxyEnabled$1,
  isNaN: isNaN$2
};/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var assertion = function (_chai, util) {
  /*!
   * Module dependencies.
   */
  var AssertionError = _chai.AssertionError,
      flag = util.flag;
  /*!
   * Module export.
   */

  _chai.Assertion = Assertion;
  /*!
   * Assertion Constructor
   *
   * Creates object for chaining.
   *
   * `Assertion` objects contain metadata in the form of flags. Three flags can
   * be assigned during instantiation by passing arguments to this constructor:
   *
   * - `object`: This flag contains the target of the assertion. For example, in
   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will
   *   contain `numKittens` so that the `equal` assertion can reference it when
   *   needed.
   *
   * - `message`: This flag contains an optional custom error message to be
   *   prepended to the error message that's generated by the assertion when it
   *   fails.
   *
   * - `ssfi`: This flag stands for "start stack function indicator". It
   *   contains a function reference that serves as the starting point for
   *   removing frames from the stack trace of the error that's created by the
   *   assertion when it fails. The goal is to provide a cleaner stack trace to
   *   end users by removing Chai's internal functions. Note that it only works
   *   in environments that support `Error.captureStackTrace`, and only when
   *   `Chai.config.includeStack` hasn't been set to `false`.
   *
   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag
   *   should retain its current value, even as assertions are chained off of
   *   this object. This is usually set to `true` when creating a new assertion
   *   from within another assertion. It's also temporarily set to `true` before
   *   an overwritten assertion gets called by the overwriting assertion.
   *
   * @param {Mixed} obj target of the assertion
   * @param {String} msg (optional) custom error message
   * @param {Function} ssfi (optional) starting point for removing stack frames
   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked
   * @api private
   */

  function Assertion(obj, msg, ssfi, lockSsfi) {
    flag(this, 'ssfi', ssfi || Assertion);
    flag(this, 'lockSsfi', lockSsfi);
    flag(this, 'object', obj);
    flag(this, 'message', msg);
    return util.proxify(this);
  }

  Object.defineProperty(Assertion, 'includeStack', {
    get: function () {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      return config.includeStack;
    },
    set: function (value) {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      config.includeStack = value;
    }
  });
  Object.defineProperty(Assertion, 'showDiff', {
    get: function () {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      return config.showDiff;
    },
    set: function (value) {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      config.showDiff = value;
    }
  });

  Assertion.addProperty = function (name, fn) {
    util.addProperty(this.prototype, name, fn);
  };

  Assertion.addMethod = function (name, fn) {
    util.addMethod(this.prototype, name, fn);
  };

  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  Assertion.overwriteProperty = function (name, fn) {
    util.overwriteProperty(this.prototype, name, fn);
  };

  Assertion.overwriteMethod = function (name, fn) {
    util.overwriteMethod(this.prototype, name, fn);
  };

  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
  };
  /**
   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)
   *
   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.
   *
   * @name assert
   * @param {Philosophical} expression to be tested
   * @param {String|Function} message or function that returns message to display if expression fails
   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails
   * @param {Mixed} expected value (remember to check for negation)
   * @param {Mixed} actual (optional) will default to `this.obj`
   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails
   * @api private
   */


  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
    var ok = util.test(this, arguments);
    if (false !== showDiff) showDiff = true;
    if (undefined === expected && undefined === _actual) showDiff = false;
    if (true !== config.showDiff) showDiff = false;

    if (!ok) {
      msg = util.getMessage(this, arguments);
      var actual = util.getActual(this, arguments);
      throw new AssertionError(msg, {
        actual: actual,
        expected: expected,
        showDiff: showDiff
      }, config.includeStack ? this.assert : flag(this, 'ssfi'));
    }
  };
  /*!
   * ### ._obj
   *
   * Quick reference to stored `actual` value for plugin developers.
   *
   * @api private
   */


  Object.defineProperty(Assertion.prototype, '_obj', {
    get: function () {
      return flag(this, 'object');
    },
    set: function (val) {
      flag(this, 'object', val);
    }
  });
};/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var assertions = function (chai, _) {
  var Assertion = chai.Assertion,
      AssertionError = chai.AssertionError,
      flag = _.flag;
  /**
   * ### Language Chains
   *
   * The following are provided as chainable getters to improve the readability
   * of your assertions.
   *
   * **Chains**
   *
   * - to
   * - be
   * - been
   * - is
   * - that
   * - which
   * - and
   * - has
   * - have
   * - with
   * - at
   * - of
   * - same
   * - but
   * - does
   * - still
   *
   * @name language chains
   * @namespace BDD
   * @api public
   */

  ['to', 'be', 'been', 'is', 'and', 'has', 'have', 'with', 'that', 'which', 'at', 'of', 'same', 'but', 'does', 'still'].forEach(function (chain) {
    Assertion.addProperty(chain);
  });
  /**
   * ### .not
   *
   * Negates all assertions that follow in the chain.
   *
   *     expect(function () {}).to.not.throw();
   *     expect({a: 1}).to.not.have.property('b');
   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);
   *
   * Just because you can negate any assertion with `.not` doesn't mean you
   * should. With great power comes great responsibility. It's often best to
   * assert that the one expected output was produced, rather than asserting
   * that one of countless unexpected outputs wasn't produced. See individual
   * assertions for specific guidance.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.equal(1); // Not recommended
   *
   * @name not
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('not', function () {
    flag(this, 'negate', true);
  });
  /**
   * ### .deep
   *
   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`
   * assertions that follow in the chain to use deep equality instead of strict
   * (`===`) equality. See the `deep-eql` project page for info on the deep
   * equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) equals `{a: 1}`
   *     expect({a: 1}).to.deep.equal({a: 1});
   *     expect({a: 1}).to.not.equal({a: 1});
   *
   *     // Target array deeply (but not strictly) includes `{a: 1}`
   *     expect([{a: 1}]).to.deep.include({a: 1});
   *     expect([{a: 1}]).to.not.include({a: 1});
   *
   *     // Target object deeply (but not strictly) includes `x: {a: 1}`
   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});
   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});
   *
   *     // Target array deeply (but not strictly) has member `{a: 1}`
   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);
   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);
   *
   *     // Target set deeply (but not strictly) has key `{a: 1}`
   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);
   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);
   *
   *     // Target object deeply (but not strictly) has property `x: {a: 1}`
   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});
   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});
   *
   * @name deep
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('deep', function () {
    flag(this, 'deep', true);
  });
  /**
   * ### .nested
   *
   * Enables dot- and bracket-notation in all `.property` and `.include`
   * assertions that follow in the chain.
   *
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');
   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\.a.\\[b\\]');
   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\.a.\\[b\\]': 'x'});
   *
   * `.nested` cannot be combined with `.own`.
   *
   * @name nested
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('nested', function () {
    flag(this, 'nested', true);
  });
  /**
   * ### .own
   *
   * Causes all `.property` and `.include` assertions that follow in the chain
   * to ignore inherited properties.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.have.own.property('a');
   *     expect({a: 1}).to.have.property('b');
   *     expect({a: 1}).to.not.have.own.property('b');
   *
   *     expect({a: 1}).to.own.include({a: 1});
   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});
   *
   * `.own` cannot be combined with `.nested`.
   *
   * @name own
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('own', function () {
    flag(this, 'own', true);
  });
  /**
   * ### .ordered
   *
   * Causes all `.members` assertions that follow in the chain to require that
   * members be in the same order.
   *
   *     expect([1, 2]).to.have.ordered.members([1, 2])
   *       .but.not.have.ordered.members([2, 1]);
   *
   * When `.include` and `.ordered` are combined, the ordering begins at the
   * start of both arrays.
   *
   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])
   *       .but.not.include.ordered.members([2, 3]);
   *
   * @name ordered
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('ordered', function () {
    flag(this, 'ordered', true);
  });
  /**
   * ### .any
   *
   * Causes all `.keys` assertions that follow in the chain to only require that
   * the target have at least one of the given keys. This is the opposite of
   * `.all`, which requires that the target have all of the given keys.
   *
   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
   *
   * See the `.keys` doc for guidance on when to use `.any` or `.all`.
   *
   * @name any
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('any', function () {
    flag(this, 'any', true);
    flag(this, 'all', false);
  });
  /**
   * ### .all
   *
   * Causes all `.keys` assertions that follow in the chain to require that the
   * target have all of the given keys. This is the opposite of `.any`, which
   * only requires that the target have at least one of the given keys.
   *
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *
   * Note that `.all` is used by default when neither `.all` nor `.any` are
   * added earlier in the chain. However, it's often best to add `.all` anyway
   * because it improves readability.
   *
   * See the `.keys` doc for guidance on when to use `.any` or `.all`.
   *
   * @name all
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('all', function () {
    flag(this, 'all', true);
    flag(this, 'any', false);
  });
  /**
   * ### .a(type[, msg])
   *
   * Asserts that the target's type is equal to the given string `type`. Types
   * are case insensitive. See the `type-detect` project page for info on the
   * type detection algorithm: https://github.com/chaijs/type-detect.
   *
   *     expect('foo').to.be.a('string');
   *     expect({a: 1}).to.be.an('object');
   *     expect(null).to.be.a('null');
   *     expect(undefined).to.be.an('undefined');
   *     expect(new Error).to.be.an('error');
   *     expect(Promise.resolve()).to.be.a('promise');
   *     expect(new Float32Array).to.be.a('float32array');
   *     expect(Symbol()).to.be.a('symbol');
   *
   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.
   *
   *     var myObj = {
   *       [Symbol.toStringTag]: 'myCustomType'
   *     };
   *
   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');
   *
   * It's often best to use `.a` to check a target's type before making more
   * assertions on the same target. That way, you avoid unexpected behavior from
   * any assertion that does different things based on the target's type.
   *
   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);
   *     expect([]).to.be.an('array').that.is.empty;
   *
   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to
   * assert that the target is the expected type, rather than asserting that it
   * isn't one of many unexpected types.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.an('array'); // Not recommended
   *
   * `.a` accepts an optional `msg` argument which is a custom error message to
   * show when the assertion fails. The message can also be given as the second
   * argument to `expect`.
   *
   *     expect(1).to.be.a('string', 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.a('string');
   *
   * `.a` can also be used as a language chain to improve the readability of
   * your assertions.
   *
   *     expect({b: 2}).to.have.a.property('b');
   *
   * The alias `.an` can be used interchangeably with `.a`.
   *
   * @name a
   * @alias an
   * @param {String} type
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function an(type, msg) {
    if (msg) flag(this, 'message', msg);
    type = type.toLowerCase();
    var obj = flag(this, 'object'),
        article = ~['a', 'e', 'i', 'o', 'u'].indexOf(type.charAt(0)) ? 'an ' : 'a ';
    this.assert(type === _.type(obj).toLowerCase(), 'expected #{this} to be ' + article + type, 'expected #{this} not to be ' + article + type);
  }

  Assertion.addChainableMethod('an', an);
  Assertion.addChainableMethod('a', an);
  /**
   * ### .include(val[, msg])
   *
   * When the target is a string, `.include` asserts that the given string `val`
   * is a substring of the target.
   *
   *     expect('foobar').to.include('foo');
   *
   * When the target is an array, `.include` asserts that the given `val` is a
   * member of the target.
   *
   *     expect([1, 2, 3]).to.include(2);
   *
   * When the target is an object, `.include` asserts that the given object
   * `val`'s properties are a subset of the target's properties.
   *
   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});
   *
   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a
   * member of the target. SameValueZero equality algorithm is used.
   *
   *     expect(new Set([1, 2])).to.include(2);
   *
   * When the target is a Map, `.include` asserts that the given `val` is one of
   * the values of the target. SameValueZero equality algorithm is used.
   *
   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);
   *
   * Because `.include` does different things based on the target's type, it's
   * important to check the target's type before using `.include`. See the `.a`
   * doc for info on testing a target's type.
   *
   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);
   *
   * By default, strict (`===`) equality is used to compare array members and
   * object properties. Add `.deep` earlier in the chain to use deep equality
   * instead (WeakSet targets are not supported). See the `deep-eql` project
   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target array deeply (but not strictly) includes `{a: 1}`
   *     expect([{a: 1}]).to.deep.include({a: 1});
   *     expect([{a: 1}]).to.not.include({a: 1});
   *
   *     // Target object deeply (but not strictly) includes `x: {a: 1}`
   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});
   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});
   *
   * By default, all of the target's properties are searched when working with
   * objects. This includes properties that are inherited and/or non-enumerable.
   * Add `.own` earlier in the chain to exclude the target's inherited
   * properties from the search.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.own.include({a: 1});
   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});
   *
   * Note that a target object is always only searched for `val`'s own
   * enumerable properties.
   *
   * `.deep` and `.own` can be combined.
   *
   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});
   *
   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when
   * referencing nested properties.
   *
   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\.a.\\[b\\]': 2});
   *
   * `.deep` and `.nested` can be combined.
   *
   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});
   *
   * `.own` and `.nested` cannot be combined.
   *
   * Add `.not` earlier in the chain to negate `.include`.
   *
   *     expect('foobar').to.not.include('taco');
   *     expect([1, 2, 3]).to.not.include(4);
   *
   * However, it's dangerous to negate `.include` when the target is an object.
   * The problem is that it creates uncertain expectations by asserting that the
   * target object doesn't have all of `val`'s key/value pairs but may or may
   * not have some of them. It's often best to identify the exact output that's
   * expected, and then write an assertion that only accepts that exact output.
   *
   * When the target object isn't even expected to have `val`'s keys, it's
   * often best to assert exactly that.
   *
   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended
   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended
   *
   * When the target object is expected to have `val`'s keys, it's often best to
   * assert that each of the properties has its expected value, rather than
   * asserting that each property doesn't have one of many unexpected values.
   *
   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended
   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended
   *
   * `.include` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');
   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);
   *
   * `.include` can also be used as a language chain, causing all `.members` and
   * `.keys` assertions that follow in the chain to require the target to be a
   * superset of the expected set, rather than an identical set. Note that
   * `.members` ignores duplicates in the subset when `.include` is added.
   *
   *     // Target object's keys are a superset of ['a', 'b'] but not identical
   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');
   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');
   *
   *     // Target array is a superset of [1, 2] but not identical
   *     expect([1, 2, 3]).to.include.members([1, 2]);
   *     expect([1, 2, 3]).to.not.have.members([1, 2]);
   *
   *     // Duplicates in the subset are ignored
   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);
   *
   * Note that adding `.any` earlier in the chain causes the `.keys` assertion
   * to ignore `.include`.
   *
   *     // Both assertions are identical
   *     expect({a: 1}).to.include.any.keys('a', 'b');
   *     expect({a: 1}).to.have.any.keys('a', 'b');
   *
   * The aliases `.includes`, `.contain`, and `.contains` can be used
   * interchangeably with `.include`.
   *
   * @name include
   * @alias contain
   * @alias includes
   * @alias contains
   * @param {Mixed} val
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function SameValueZero(a, b) {
    return _.isNaN(a) && _.isNaN(b) || a === b;
  }

  function includeChainingBehavior() {
    flag(this, 'contains', true);
  }

  function include(val, msg) {
    if (msg) flag(this, 'message', msg);

    var obj = flag(this, 'object'),
        objType = _.type(obj).toLowerCase(),
        flagMsg = flag(this, 'message'),
        negate = flag(this, 'negate'),
        ssfi = flag(this, 'ssfi'),
        isDeep = flag(this, 'deep'),
        descriptor = isDeep ? 'deep ' : '';

    flagMsg = flagMsg ? flagMsg + ': ' : '';
    var included = false;

    switch (objType) {
      case 'string':
        included = obj.indexOf(val) !== -1;
        break;

      case 'weakset':
        if (isDeep) {
          throw new AssertionError(flagMsg + 'unable to use .deep.include with WeakSet', undefined, ssfi);
        }

        included = obj.has(val);
        break;

      case 'map':
        var isEql = isDeep ? _.eql : SameValueZero;
        obj.forEach(function (item) {
          included = included || isEql(item, val);
        });
        break;

      case 'set':
        if (isDeep) {
          obj.forEach(function (item) {
            included = included || _.eql(item, val);
          });
        } else {
          included = obj.has(val);
        }

        break;

      case 'array':
        if (isDeep) {
          included = obj.some(function (item) {
            return _.eql(item, val);
          });
        } else {
          included = obj.indexOf(val) !== -1;
        }

        break;

      default:
        // This block is for asserting a subset of properties in an object.
        // `_.expectTypes` isn't used here because `.include` should work with
        // objects with a custom `@@toStringTag`.
        if (val !== Object(val)) {
          throw new AssertionError(flagMsg + 'object tested must be an array, a map, an object,' + ' a set, a string, or a weakset, but ' + objType + ' given', undefined, ssfi);
        }

        var props = Object.keys(val),
            firstErr = null,
            numErrs = 0;
        props.forEach(function (prop) {
          var propAssertion = new Assertion(obj);

          _.transferFlags(this, propAssertion, true);

          flag(propAssertion, 'lockSsfi', true);

          if (!negate || props.length === 1) {
            propAssertion.property(prop, val[prop]);
            return;
          }

          try {
            propAssertion.property(prop, val[prop]);
          } catch (err) {
            if (!_.checkError.compatibleConstructor(err, AssertionError)) {
              throw err;
            }

            if (firstErr === null) firstErr = err;
            numErrs++;
          }
        }, this); // When validating .not.include with multiple properties, we only want
        // to throw an assertion error if all of the properties are included,
        // in which case we throw the first property assertion error that we
        // encountered.

        if (negate && props.length > 1 && numErrs === props.length) {
          throw firstErr;
        }

        return;
    } // Assert inclusion in collection or substring in a string.


    this.assert(included, 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val), 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));
  }

  Assertion.addChainableMethod('include', include, includeChainingBehavior);
  Assertion.addChainableMethod('contain', include, includeChainingBehavior);
  Assertion.addChainableMethod('contains', include, includeChainingBehavior);
  Assertion.addChainableMethod('includes', include, includeChainingBehavior);
  /**
   * ### .ok
   *
   * Asserts that the target is a truthy value (considered `true` in boolean context).
   * However, it's often best to assert that the target is strictly (`===`) or
   * deeply equal to its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.ok; // Not recommended
   *
   *     expect(true).to.be.true; // Recommended
   *     expect(true).to.be.ok; // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.ok`.
   *
   *     expect(0).to.equal(0); // Recommended
   *     expect(0).to.not.be.ok; // Not recommended
   *
   *     expect(false).to.be.false; // Recommended
   *     expect(false).to.not.be.ok; // Not recommended
   *
   *     expect(null).to.be.null; // Recommended
   *     expect(null).to.not.be.ok; // Not recommended
   *
   *     expect(undefined).to.be.undefined; // Recommended
   *     expect(undefined).to.not.be.ok; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(false, 'nooo why fail??').to.be.ok;
   *
   * @name ok
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('ok', function () {
    this.assert(flag(this, 'object'), 'expected #{this} to be truthy', 'expected #{this} to be falsy');
  });
  /**
   * ### .true
   *
   * Asserts that the target is strictly (`===`) equal to `true`.
   *
   *     expect(true).to.be.true;
   *
   * Add `.not` earlier in the chain to negate `.true`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `true`.
   *
   *     expect(false).to.be.false; // Recommended
   *     expect(false).to.not.be.true; // Not recommended
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.true; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(false, 'nooo why fail??').to.be.true;
   *
   * @name true
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('true', function () {
    this.assert(true === flag(this, 'object'), 'expected #{this} to be true', 'expected #{this} to be false', flag(this, 'negate') ? false : true);
  });
  /**
   * ### .false
   *
   * Asserts that the target is strictly (`===`) equal to `false`.
   *
   *     expect(false).to.be.false;
   *
   * Add `.not` earlier in the chain to negate `.false`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to `false`.
   *
   *     expect(true).to.be.true; // Recommended
   *     expect(true).to.not.be.false; // Not recommended
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.false; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(true, 'nooo why fail??').to.be.false;
   *
   * @name false
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('false', function () {
    this.assert(false === flag(this, 'object'), 'expected #{this} to be false', 'expected #{this} to be true', flag(this, 'negate') ? true : false);
  });
  /**
   * ### .null
   *
   * Asserts that the target is strictly (`===`) equal to `null`.
   *
   *     expect(null).to.be.null;
   *
   * Add `.not` earlier in the chain to negate `.null`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `null`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.null; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.null;
   *
   * @name null
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('null', function () {
    this.assert(null === flag(this, 'object'), 'expected #{this} to be null', 'expected #{this} not to be null');
  });
  /**
   * ### .undefined
   *
   * Asserts that the target is strictly (`===`) equal to `undefined`.
   *
   *     expect(undefined).to.be.undefined;
   *
   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to `undefined`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.undefined; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.undefined;
   *
   * @name undefined
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('undefined', function () {
    this.assert(undefined === flag(this, 'object'), 'expected #{this} to be undefined', 'expected #{this} not to be undefined');
  });
  /**
   * ### .NaN
   *
   * Asserts that the target is exactly `NaN`.
   *
   *     expect(NaN).to.be.NaN;
   *
   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `NaN`.
   *
   *     expect('foo').to.equal('foo'); // Recommended
   *     expect('foo').to.not.be.NaN; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.NaN;
   *
   * @name NaN
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('NaN', function () {
    this.assert(_.isNaN(flag(this, 'object')), 'expected #{this} to be NaN', 'expected #{this} not to be NaN');
  });
  /**
   * ### .exist
   *
   * Asserts that the target is not strictly (`===`) equal to either `null` or
   * `undefined`. However, it's often best to assert that the target is equal to
   * its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.exist; // Not recommended
   *
   *     expect(0).to.equal(0); // Recommended
   *     expect(0).to.exist; // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.exist`.
   *
   *     expect(null).to.be.null; // Recommended
   *     expect(null).to.not.exist; // Not recommended
   *
   *     expect(undefined).to.be.undefined; // Recommended
   *     expect(undefined).to.not.exist; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(null, 'nooo why fail??').to.exist;
   *
   * @name exist
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('exist', function () {
    var val = flag(this, 'object');
    this.assert(val !== null && val !== undefined, 'expected #{this} to exist', 'expected #{this} to not exist');
  });
  /**
   * ### .empty
   *
   * When the target is a string or array, `.empty` asserts that the target's
   * `length` property is strictly (`===`) equal to `0`.
   *
   *     expect([]).to.be.empty;
   *     expect('').to.be.empty;
   *
   * When the target is a map or set, `.empty` asserts that the target's `size`
   * property is strictly equal to `0`.
   *
   *     expect(new Set()).to.be.empty;
   *     expect(new Map()).to.be.empty;
   *
   * When the target is a non-function object, `.empty` asserts that the target
   * doesn't have any own enumerable properties. Properties with Symbol-based
   * keys are excluded from the count.
   *
   *     expect({}).to.be.empty;
   *
   * Because `.empty` does different things based on the target's type, it's
   * important to check the target's type before using `.empty`. See the `.a`
   * doc for info on testing a target's type.
   *
   *     expect([]).to.be.an('array').that.is.empty;
   *
   * Add `.not` earlier in the chain to negate `.empty`. However, it's often
   * best to assert that the target contains its expected number of values,
   * rather than asserting that it's not empty.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended
   *
   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended
   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended
   *
   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended
   *     expect({a: 1}).to.not.be.empty; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;
   *
   * @name empty
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('empty', function () {
    var val = flag(this, 'object'),
        ssfi = flag(this, 'ssfi'),
        flagMsg = flag(this, 'message'),
        itemsCount;
    flagMsg = flagMsg ? flagMsg + ': ' : '';

    switch (_.type(val).toLowerCase()) {
      case 'array':
      case 'string':
        itemsCount = val.length;
        break;

      case 'map':
      case 'set':
        itemsCount = val.size;
        break;

      case 'weakmap':
      case 'weakset':
        throw new AssertionError(flagMsg + '.empty was passed a weak collection', undefined, ssfi);

      case 'function':
        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);

        throw new AssertionError(msg.trim(), undefined, ssfi);

      default:
        if (val !== Object(val)) {
          throw new AssertionError(flagMsg + '.empty was passed non-string primitive ' + _.inspect(val), undefined, ssfi);
        }

        itemsCount = Object.keys(val).length;
    }

    this.assert(0 === itemsCount, 'expected #{this} to be empty', 'expected #{this} not to be empty');
  });
  /**
   * ### .arguments
   *
   * Asserts that the target is an `arguments` object.
   *
   *     function test () {
   *       expect(arguments).to.be.arguments;
   *     }
   *
   *     test();
   *
   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often
   * best to assert which type the target is expected to be, rather than
   * asserting that its not an `arguments` object.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.arguments; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({}, 'nooo why fail??').to.be.arguments;
   *
   * The alias `.Arguments` can be used interchangeably with `.arguments`.
   *
   * @name arguments
   * @alias Arguments
   * @namespace BDD
   * @api public
   */

  function checkArguments() {
    var obj = flag(this, 'object'),
        type = _.type(obj);

    this.assert('Arguments' === type, 'expected #{this} to be arguments but got ' + type, 'expected #{this} to not be arguments');
  }

  Assertion.addProperty('arguments', checkArguments);
  Assertion.addProperty('Arguments', checkArguments);
  /**
   * ### .equal(val[, msg])
   *
   * Asserts that the target is strictly (`===`) equal to the given `val`.
   *
   *     expect(1).to.equal(1);
   *     expect('foo').to.equal('foo');
   *
   * Add `.deep` earlier in the chain to use deep equality instead. See the
   * `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) equals `{a: 1}`
   *     expect({a: 1}).to.deep.equal({a: 1});
   *     expect({a: 1}).to.not.equal({a: 1});
   *
   *     // Target array deeply (but not strictly) equals `[1, 2]`
   *     expect([1, 2]).to.deep.equal([1, 2]);
   *     expect([1, 2]).to.not.equal([1, 2]);
   *
   * Add `.not` earlier in the chain to negate `.equal`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to one of countless unexpected values.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.equal(2); // Not recommended
   *
   * `.equal` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.equal(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.equal(2);
   *
   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.
   *
   * @name equal
   * @alias equals
   * @alias eq
   * @param {Mixed} val
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertEqual(val, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');

    if (flag(this, 'deep')) {
      var prevLockSsfi = flag(this, 'lockSsfi');
      flag(this, 'lockSsfi', true);
      this.eql(val);
      flag(this, 'lockSsfi', prevLockSsfi);
    } else {
      this.assert(val === obj, 'expected #{this} to equal #{exp}', 'expected #{this} to not equal #{exp}', val, this._obj, true);
    }
  }

  Assertion.addMethod('equal', assertEqual);
  Assertion.addMethod('equals', assertEqual);
  Assertion.addMethod('eq', assertEqual);
  /**
   * ### .eql(obj[, msg])
   *
   * Asserts that the target is deeply equal to the given `obj`. See the
   * `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target object is deeply (but not strictly) equal to {a: 1}
   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});
   *
   *     // Target array is deeply (but not strictly) equal to [1, 2]
   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);
   *
   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best
   * to assert that the target is deeply equal to its expected value, rather
   * than not deeply equal to one of countless unexpected values.
   *
   *     expect({a: 1}).to.eql({a: 1}); // Recommended
   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended
   *
   * `.eql` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');
   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});
   *
   * The alias `.eqls` can be used interchangeably with `.eql`.
   *
   * The `.deep.equal` assertion is almost identical to `.eql` but with one
   * difference: `.deep.equal` causes deep equality comparisons to also be used
   * for any other assertions that follow in the chain.
   *
   * @name eql
   * @alias eqls
   * @param {Mixed} obj
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertEql(obj, msg) {
    if (msg) flag(this, 'message', msg);
    this.assert(_.eql(obj, flag(this, 'object')), 'expected #{this} to deeply equal #{exp}', 'expected #{this} to not deeply equal #{exp}', obj, this._obj, true);
  }

  Assertion.addMethod('eql', assertEql);
  Assertion.addMethod('eqls', assertEql);
  /**
   * ### .above(n[, msg])
   *
   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.above(1); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is greater than the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.above(2); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.above`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(1).to.not.be.above(2); // Not recommended
   *
   * `.above` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.above(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.above(2);
   *
   * The aliases `.gt` and `.greaterThan` can be used interchangeably with
   * `.above`.
   *
   * @name above
   * @alias gt
   * @alias greaterThan
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertAbove(n, msg) {
    if (msg) flag(this, 'message', msg);

    var obj = flag(this, 'object'),
        doLength = flag(this, 'doLength'),
        flagMsg = flag(this, 'message'),
        msgPrefix = flagMsg ? flagMsg + ': ' : '',
        ssfi = flag(this, 'ssfi'),
        objType = _.type(obj).toLowerCase(),
        nType = _.type(n).toLowerCase(),
        errorMessage,
        shouldThrow = true;

    if (doLength && objType !== 'map' && objType !== 'set') {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && objType === 'date' && nType !== 'date') {
      errorMessage = msgPrefix + 'the argument to above must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to above must be a number';
    } else if (!doLength && objType !== 'date' && objType !== 'number') {
      var printObj = objType === 'string' ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var descriptor = 'length',
          itemsCount;

      if (objType === 'map' || objType === 'set') {
        descriptor = 'size';
        itemsCount = obj.size;
      } else {
        itemsCount = obj.length;
      }

      this.assert(itemsCount > n, 'expected #{this} to have a ' + descriptor + ' above #{exp} but got #{act}', 'expected #{this} to not have a ' + descriptor + ' above #{exp}', n, itemsCount);
    } else {
      this.assert(obj > n, 'expected #{this} to be above #{exp}', 'expected #{this} to be at most #{exp}', n);
    }
  }

  Assertion.addMethod('above', assertAbove);
  Assertion.addMethod('gt', assertAbove);
  Assertion.addMethod('greaterThan', assertAbove);
  /**
   * ### .least(n[, msg])
   *
   * Asserts that the target is a number or a date greater than or equal to the given
   * number or date `n` respectively. However, it's often best to assert that the target is equal to
   * its expected value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.at.least(1); // Not recommended
   *     expect(2).to.be.at.least(2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is greater than or equal to the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.least`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.at.least(2); // Not recommended
   *
   * `.least` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.at.least(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.at.least(2);
   *
   * The alias `.gte` can be used interchangeably with `.least`.
   *
   * @name least
   * @alias gte
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertLeast(n, msg) {
    if (msg) flag(this, 'message', msg);

    var obj = flag(this, 'object'),
        doLength = flag(this, 'doLength'),
        flagMsg = flag(this, 'message'),
        msgPrefix = flagMsg ? flagMsg + ': ' : '',
        ssfi = flag(this, 'ssfi'),
        objType = _.type(obj).toLowerCase(),
        nType = _.type(n).toLowerCase(),
        errorMessage,
        shouldThrow = true;

    if (doLength && objType !== 'map' && objType !== 'set') {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && objType === 'date' && nType !== 'date') {
      errorMessage = msgPrefix + 'the argument to least must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to least must be a number';
    } else if (!doLength && objType !== 'date' && objType !== 'number') {
      var printObj = objType === 'string' ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var descriptor = 'length',
          itemsCount;

      if (objType === 'map' || objType === 'set') {
        descriptor = 'size';
        itemsCount = obj.size;
      } else {
        itemsCount = obj.length;
      }

      this.assert(itemsCount >= n, 'expected #{this} to have a ' + descriptor + ' at least #{exp} but got #{act}', 'expected #{this} to have a ' + descriptor + ' below #{exp}', n, itemsCount);
    } else {
      this.assert(obj >= n, 'expected #{this} to be at least #{exp}', 'expected #{this} to be below #{exp}', n);
    }
  }

  Assertion.addMethod('least', assertLeast);
  Assertion.addMethod('gte', assertLeast);
  /**
   * ### .below(n[, msg])
   *
   * Asserts that the target is a number or a date less than the given number or date `n` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.below(2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is less than the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.below(4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.length(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.below`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.be.below(1); // Not recommended
   *
   * `.below` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(2).to.be.below(1, 'nooo why fail??');
   *     expect(2, 'nooo why fail??').to.be.below(1);
   *
   * The aliases `.lt` and `.lessThan` can be used interchangeably with
   * `.below`.
   *
   * @name below
   * @alias lt
   * @alias lessThan
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertBelow(n, msg) {
    if (msg) flag(this, 'message', msg);

    var obj = flag(this, 'object'),
        doLength = flag(this, 'doLength'),
        flagMsg = flag(this, 'message'),
        msgPrefix = flagMsg ? flagMsg + ': ' : '',
        ssfi = flag(this, 'ssfi'),
        objType = _.type(obj).toLowerCase(),
        nType = _.type(n).toLowerCase(),
        errorMessage,
        shouldThrow = true;

    if (doLength && objType !== 'map' && objType !== 'set') {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && objType === 'date' && nType !== 'date') {
      errorMessage = msgPrefix + 'the argument to below must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to below must be a number';
    } else if (!doLength && objType !== 'date' && objType !== 'number') {
      var printObj = objType === 'string' ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var descriptor = 'length',
          itemsCount;

      if (objType === 'map' || objType === 'set') {
        descriptor = 'size';
        itemsCount = obj.size;
      } else {
        itemsCount = obj.length;
      }

      this.assert(itemsCount < n, 'expected #{this} to have a ' + descriptor + ' below #{exp} but got #{act}', 'expected #{this} to not have a ' + descriptor + ' below #{exp}', n, itemsCount);
    } else {
      this.assert(obj < n, 'expected #{this} to be below #{exp}', 'expected #{this} to be at least #{exp}', n);
    }
  }

  Assertion.addMethod('below', assertBelow);
  Assertion.addMethod('lt', assertBelow);
  Assertion.addMethod('lessThan', assertBelow);
  /**
   * ### .most(n[, msg])
   *
   * Asserts that the target is a number or a date less than or equal to the given number
   * or date `n` respectively. However, it's often best to assert that the target is equal to its
   * expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.at.most(2); // Not recommended
   *     expect(1).to.be.at.most(1); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is less than or equal to the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.most`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.be.at.most(1); // Not recommended
   *
   * `.most` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(2).to.be.at.most(1, 'nooo why fail??');
   *     expect(2, 'nooo why fail??').to.be.at.most(1);
   *
   * The alias `.lte` can be used interchangeably with `.most`.
   *
   * @name most
   * @alias lte
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertMost(n, msg) {
    if (msg) flag(this, 'message', msg);

    var obj = flag(this, 'object'),
        doLength = flag(this, 'doLength'),
        flagMsg = flag(this, 'message'),
        msgPrefix = flagMsg ? flagMsg + ': ' : '',
        ssfi = flag(this, 'ssfi'),
        objType = _.type(obj).toLowerCase(),
        nType = _.type(n).toLowerCase(),
        errorMessage,
        shouldThrow = true;

    if (doLength && objType !== 'map' && objType !== 'set') {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && objType === 'date' && nType !== 'date') {
      errorMessage = msgPrefix + 'the argument to most must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to most must be a number';
    } else if (!doLength && objType !== 'date' && objType !== 'number') {
      var printObj = objType === 'string' ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var descriptor = 'length',
          itemsCount;

      if (objType === 'map' || objType === 'set') {
        descriptor = 'size';
        itemsCount = obj.size;
      } else {
        itemsCount = obj.length;
      }

      this.assert(itemsCount <= n, 'expected #{this} to have a ' + descriptor + ' at most #{exp} but got #{act}', 'expected #{this} to have a ' + descriptor + ' above #{exp}', n, itemsCount);
    } else {
      this.assert(obj <= n, 'expected #{this} to be at most #{exp}', 'expected #{this} to be above #{exp}', n);
    }
  }

  Assertion.addMethod('most', assertMost);
  Assertion.addMethod('lte', assertMost);
  /**
   * ### .within(start, finish[, msg])
   *
   * Asserts that the target is a number or a date greater than or equal to the given
   * number or date `start`, and less than or equal to the given number or date `finish` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.within(1, 3); // Not recommended
   *     expect(2).to.be.within(2, 3); // Not recommended
   *     expect(2).to.be.within(1, 2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is greater than or equal to the given number `start`, and less
   * than or equal to the given number `finish`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.within`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.within(2, 4); // Not recommended
   *
   * `.within` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(4).to.be.within(1, 3, 'nooo why fail??');
   *     expect(4, 'nooo why fail??').to.be.within(1, 3);
   *
   * @name within
   * @param {Number} start lower bound inclusive
   * @param {Number} finish upper bound inclusive
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  Assertion.addMethod('within', function (start, finish, msg) {
    if (msg) flag(this, 'message', msg);

    var obj = flag(this, 'object'),
        doLength = flag(this, 'doLength'),
        flagMsg = flag(this, 'message'),
        msgPrefix = flagMsg ? flagMsg + ': ' : '',
        ssfi = flag(this, 'ssfi'),
        objType = _.type(obj).toLowerCase(),
        startType = _.type(start).toLowerCase(),
        finishType = _.type(finish).toLowerCase(),
        errorMessage,
        shouldThrow = true,
        range = startType === 'date' && finishType === 'date' ? start.toUTCString() + '..' + finish.toUTCString() : start + '..' + finish;

    if (doLength && objType !== 'map' && objType !== 'set') {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && objType === 'date' && (startType !== 'date' || finishType !== 'date')) {
      errorMessage = msgPrefix + 'the arguments to within must be dates';
    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the arguments to within must be numbers';
    } else if (!doLength && objType !== 'date' && objType !== 'number') {
      var printObj = objType === 'string' ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var descriptor = 'length',
          itemsCount;

      if (objType === 'map' || objType === 'set') {
        descriptor = 'size';
        itemsCount = obj.size;
      } else {
        itemsCount = obj.length;
      }

      this.assert(itemsCount >= start && itemsCount <= finish, 'expected #{this} to have a ' + descriptor + ' within ' + range, 'expected #{this} to not have a ' + descriptor + ' within ' + range);
    } else {
      this.assert(obj >= start && obj <= finish, 'expected #{this} to be within ' + range, 'expected #{this} to not be within ' + range);
    }
  });
  /**
   * ### .instanceof(constructor[, msg])
   *
   * Asserts that the target is an instance of the given `constructor`.
   *
   *     function Cat () { }
   *
   *     expect(new Cat()).to.be.an.instanceof(Cat);
   *     expect([1, 2]).to.be.an.instanceof(Array);
   *
   * Add `.not` earlier in the chain to negate `.instanceof`.
   *
   *     expect({a: 1}).to.not.be.an.instanceof(Array);
   *
   * `.instanceof` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);
   *
   * Due to limitations in ES5, `.instanceof` may not always work as expected
   * when using a transpiler such as Babel or TypeScript. In particular, it may
   * produce unexpected results when subclassing built-in object such as
   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:
   *
   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))
   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))
   *
   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.
   *
   * @name instanceof
   * @param {Constructor} constructor
   * @param {String} msg _optional_
   * @alias instanceOf
   * @namespace BDD
   * @api public
   */

  function assertInstanceOf(constructor, msg) {
    if (msg) flag(this, 'message', msg);
    var target = flag(this, 'object');
    var ssfi = flag(this, 'ssfi');
    var flagMsg = flag(this, 'message');

    try {
      var isInstanceOf = target instanceof constructor;
    } catch (err) {
      if (err instanceof TypeError) {
        flagMsg = flagMsg ? flagMsg + ': ' : '';
        throw new AssertionError(flagMsg + 'The instanceof assertion needs a constructor but ' + _.type(constructor) + ' was given.', undefined, ssfi);
      }

      throw err;
    }

    var name = _.getName(constructor);

    if (name === null) {
      name = 'an unnamed constructor';
    }

    this.assert(isInstanceOf, 'expected #{this} to be an instance of ' + name, 'expected #{this} to not be an instance of ' + name);
  }
  Assertion.addMethod('instanceof', assertInstanceOf);
  Assertion.addMethod('instanceOf', assertInstanceOf);
  /**
   * ### .property(name[, val[, msg]])
   *
   * Asserts that the target has a property with the given key `name`.
   *
   *     expect({a: 1}).to.have.property('a');
   *
   * When `val` is provided, `.property` also asserts that the property's value
   * is equal to the given `val`.
   *
   *     expect({a: 1}).to.have.property('a', 1);
   *
   * By default, strict (`===`) equality is used. Add `.deep` earlier in the
   * chain to use deep equality instead. See the `deep-eql` project page for
   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) has property `x: {a: 1}`
   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});
   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});
   *
   * The target's enumerable and non-enumerable properties are always included
   * in the search. By default, both own and inherited properties are included.
   * Add `.own` earlier in the chain to exclude inherited properties from the
   * search.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.have.own.property('a');
   *     expect({a: 1}).to.have.own.property('a', 1);
   *     expect({a: 1}).to.have.property('b');
   *     expect({a: 1}).to.not.have.own.property('b');
   *
   * `.deep` and `.own` can be combined.
   *
   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});
   *
   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when
   * referencing nested properties.
   *
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\.a.\\[b\\]');
   *
   * `.deep` and `.nested` can be combined.
   *
   *     expect({a: {b: [{c: 3}]}})
   *       .to.have.deep.nested.property('a.b[0]', {c: 3});
   *
   * `.own` and `.nested` cannot be combined.
   *
   * Add `.not` earlier in the chain to negate `.property`.
   *
   *     expect({a: 1}).to.not.have.property('b');
   *
   * However, it's dangerous to negate `.property` when providing `val`. The
   * problem is that it creates uncertain expectations by asserting that the
   * target either doesn't have a property with the given key `name`, or that it
   * does have a property with the given key `name` but its value isn't equal to
   * the given `val`. It's often best to identify the exact output that's
   * expected, and then write an assertion that only accepts that exact output.
   *
   * When the target isn't expected to have a property with the given key
   * `name`, it's often best to assert exactly that.
   *
   *     expect({b: 2}).to.not.have.property('a'); // Recommended
   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended
   *
   * When the target is expected to have a property with the given key `name`,
   * it's often best to assert that the property has its expected value, rather
   * than asserting that it doesn't have one of many unexpected values.
   *
   *     expect({a: 3}).to.have.property('a', 3); // Recommended
   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended
   *
   * `.property` changes the target of any assertions that follow in the chain
   * to be the value of the property from the original target object.
   *
   *     expect({a: 1}).to.have.property('a').that.is.a('number');
   *
   * `.property` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing `val`, only use the
   * second form.
   *
   *     // Recommended
   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');
   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);
   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');
   *
   *     // Not recommended
   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');
   *
   * The above assertion isn't the same thing as not providing `val`. Instead,
   * it's asserting that the target object has a `b` property that's equal to
   * `undefined`.
   *
   * The assertions `.ownProperty` and `.haveOwnProperty` can be used
   * interchangeably with `.own.property`.
   *
   * @name property
   * @param {String} name
   * @param {Mixed} val (optional)
   * @param {String} msg _optional_
   * @returns value of property for chaining
   * @namespace BDD
   * @api public
   */

  function assertProperty(name, val, msg) {
    if (msg) flag(this, 'message', msg);
    var isNested = flag(this, 'nested'),
        isOwn = flag(this, 'own'),
        flagMsg = flag(this, 'message'),
        obj = flag(this, 'object'),
        ssfi = flag(this, 'ssfi'),
        nameType = typeof name;
    flagMsg = flagMsg ? flagMsg + ': ' : '';

    if (isNested) {
      if (nameType !== 'string') {
        throw new AssertionError(flagMsg + 'the argument to property must be a string when using nested syntax', undefined, ssfi);
      }
    } else {
      if (nameType !== 'string' && nameType !== 'number' && nameType !== 'symbol') {
        throw new AssertionError(flagMsg + 'the argument to property must be a string, number, or symbol', undefined, ssfi);
      }
    }

    if (isNested && isOwn) {
      throw new AssertionError(flagMsg + 'The "nested" and "own" flags cannot be combined.', undefined, ssfi);
    }

    if (obj === null || obj === undefined) {
      throw new AssertionError(flagMsg + 'Target cannot be null or undefined.', undefined, ssfi);
    }

    var isDeep = flag(this, 'deep'),
        negate = flag(this, 'negate'),
        pathInfo = isNested ? _.getPathInfo(obj, name) : null,
        value = isNested ? pathInfo.value : obj[name];
    var descriptor = '';
    if (isDeep) descriptor += 'deep ';
    if (isOwn) descriptor += 'own ';
    if (isNested) descriptor += 'nested ';
    descriptor += 'property ';
    var hasProperty;
    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);else if (isNested) hasProperty = pathInfo.exists;else hasProperty = _.hasProperty(obj, name); // When performing a negated assertion for both name and val, merely having
    // a property with the given name isn't enough to cause the assertion to
    // fail. It must both have a property with the given name, and the value of
    // that property must equal the given val. Therefore, skip this assertion in
    // favor of the next.

    if (!negate || arguments.length === 1) {
      this.assert(hasProperty, 'expected #{this} to have ' + descriptor + _.inspect(name), 'expected #{this} to not have ' + descriptor + _.inspect(name));
    }

    if (arguments.length > 1) {
      this.assert(hasProperty && (isDeep ? _.eql(val, value) : val === value), 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}', 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}', val, value);
    }

    flag(this, 'object', value);
  }

  Assertion.addMethod('property', assertProperty);

  function assertOwnProperty(name, value, msg) {
    flag(this, 'own', true);
    assertProperty.apply(this, arguments);
  }

  Assertion.addMethod('ownProperty', assertOwnProperty);
  Assertion.addMethod('haveOwnProperty', assertOwnProperty);
  /**
   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])
   *
   * Asserts that the target has its own property descriptor with the given key
   * `name`. Enumerable and non-enumerable properties are included in the
   * search.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');
   *
   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that
   * the property's descriptor is deeply equal to the given `descriptor`. See
   * the `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.
   *
   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');
   *
   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing
   * a `descriptor`. The problem is that it creates uncertain expectations by
   * asserting that the target either doesn't have a property descriptor with
   * the given key `name`, or that it does have a property descriptor with the
   * given key `name` but its not deeply equal to the given `descriptor`. It's
   * often best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to have a property descriptor with the given
   * key `name`, it's often best to assert exactly that.
   *
   *     // Recommended
   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');
   *
   *     // Not recommended
   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * When the target is expected to have a property descriptor with the given
   * key `name`, it's often best to assert that the property has its expected
   * descriptor, rather than asserting that it doesn't have one of many
   * unexpected descriptors.
   *
   *     // Recommended
   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 3,
   *     });
   *
   *     // Not recommended
   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * `.ownPropertyDescriptor` changes the target of any assertions that follow
   * in the chain to be the value of the property descriptor from the original
   * target object.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')
   *       .that.has.property('enumerable', true);
   *
   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a
   * custom error message to show when the assertion fails. The message can also
   * be given as the second argument to `expect`. When not providing
   * `descriptor`, only use the second form.
   *
   *     // Recommended
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 2,
   *     }, 'nooo why fail??');
   *
   *     // Recommended
   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 2,
   *     });
   *
   *     // Recommended
   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');
   *
   *     // Not recommended
   *     expect({a: 1})
   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');
   *
   * The above assertion isn't the same thing as not providing `descriptor`.
   * Instead, it's asserting that the target object has a `b` property
   * descriptor that's deeply equal to `undefined`.
   *
   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with
   * `.ownPropertyDescriptor`.
   *
   * @name ownPropertyDescriptor
   * @alias haveOwnPropertyDescriptor
   * @param {String} name
   * @param {Object} descriptor _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertOwnPropertyDescriptor(name, descriptor, msg) {
    if (typeof descriptor === 'string') {
      msg = descriptor;
      descriptor = null;
    }

    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);

    if (actualDescriptor && descriptor) {
      this.assert(_.eql(descriptor, actualDescriptor), 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor), 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor), descriptor, actualDescriptor, true);
    } else {
      this.assert(actualDescriptor, 'expected #{this} to have an own property descriptor for ' + _.inspect(name), 'expected #{this} to not have an own property descriptor for ' + _.inspect(name));
    }

    flag(this, 'object', actualDescriptor);
  }

  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);
  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);
  /**
   * ### .lengthOf(n[, msg])
   *
   * Asserts that the target's `length` or `size` is equal to the given number
   * `n`.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3);
   *     expect('foo').to.have.lengthOf(3);
   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);
   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);
   *
   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often
   * best to assert that the target's `length` property is equal to its expected
   * value, rather than not equal to one of many unexpected values.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.not.have.lengthOf(4); // Not recommended
   *
   * `.lengthOf` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');
   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);
   *
   * `.lengthOf` can also be used as a language chain, causing all `.above`,
   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the
   * chain to use the target's `length` property as the target. However, it's
   * often best to assert that the target's `length` property is equal to its
   * expected length, rather than asserting that its `length` property falls
   * within some range of values.
   *
   *     // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf(3);
   *
   *     // Not recommended
   *     expect([1, 2, 3]).to.have.lengthOf.above(2);
   *     expect([1, 2, 3]).to.have.lengthOf.below(4);
   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);
   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);
   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);
   *
   * Due to a compatibility issue, the alias `.length` can't be chained directly
   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used
   * interchangeably with `.lengthOf` in every situation. It's recommended to
   * always use `.lengthOf` instead of `.length`.
   *
   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error
   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected
   *
   * @name lengthOf
   * @alias length
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertLengthChain() {
    flag(this, 'doLength', true);
  }

  function assertLength(n, msg) {
    if (msg) flag(this, 'message', msg);

    var obj = flag(this, 'object'),
        objType = _.type(obj).toLowerCase(),
        flagMsg = flag(this, 'message'),
        ssfi = flag(this, 'ssfi'),
        descriptor = 'length',
        itemsCount;

    switch (objType) {
      case 'map':
      case 'set':
        descriptor = 'size';
        itemsCount = obj.size;
        break;

      default:
        new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
        itemsCount = obj.length;
    }

    this.assert(itemsCount == n, 'expected #{this} to have a ' + descriptor + ' of #{exp} but got #{act}', 'expected #{this} to not have a ' + descriptor + ' of #{act}', n, itemsCount);
  }

  Assertion.addChainableMethod('length', assertLength, assertLengthChain);
  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);
  /**
   * ### .match(re[, msg])
   *
   * Asserts that the target matches the given regular expression `re`.
   *
   *     expect('foobar').to.match(/^foo/);
   *
   * Add `.not` earlier in the chain to negate `.match`.
   *
   *     expect('foobar').to.not.match(/taco/);
   *
   * `.match` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect('foobar').to.match(/taco/, 'nooo why fail??');
   *     expect('foobar', 'nooo why fail??').to.match(/taco/);
   *
   * The alias `.matches` can be used interchangeably with `.match`.
   *
   * @name match
   * @alias matches
   * @param {RegExp} re
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertMatch(re, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    this.assert(re.exec(obj), 'expected #{this} to match ' + re, 'expected #{this} not to match ' + re);
  }

  Assertion.addMethod('match', assertMatch);
  Assertion.addMethod('matches', assertMatch);
  /**
   * ### .string(str[, msg])
   *
   * Asserts that the target string contains the given substring `str`.
   *
   *     expect('foobar').to.have.string('bar');
   *
   * Add `.not` earlier in the chain to negate `.string`.
   *
   *     expect('foobar').to.not.have.string('taco');
   *
   * `.string` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect('foobar').to.have.string('taco', 'nooo why fail??');
   *     expect('foobar', 'nooo why fail??').to.have.string('taco');
   *
   * @name string
   * @param {String} str
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  Assertion.addMethod('string', function (str, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object'),
        flagMsg = flag(this, 'message'),
        ssfi = flag(this, 'ssfi');
    new Assertion(obj, flagMsg, ssfi, true).is.a('string');
    this.assert(~obj.indexOf(str), 'expected #{this} to contain ' + _.inspect(str), 'expected #{this} to not contain ' + _.inspect(str));
  });
  /**
   * ### .keys(key1[, key2[, ...]])
   *
   * Asserts that the target object, array, map, or set has the given keys. Only
   * the target's own inherited properties are included in the search.
   *
   * When the target is an object or array, keys can be provided as one or more
   * string arguments, a single array argument, or a single object argument. In
   * the latter case, only the keys in the given object matter; the values are
   * ignored.
   *
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *     expect(['x', 'y']).to.have.all.keys(0, 1);
   *
   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);
   *     expect(['x', 'y']).to.have.all.keys([0, 1]);
   *
   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5
   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5
   *
   * When the target is a map or set, each key must be provided as a separate
   * argument.
   *
   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');
   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');
   *
   * Because `.keys` does different things based on the target's type, it's
   * important to check the target's type before using `.keys`. See the `.a` doc
   * for info on testing a target's type.
   *
   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');
   *
   * By default, strict (`===`) equality is used to compare keys of maps and
   * sets. Add `.deep` earlier in the chain to use deep equality instead. See
   * the `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target set deeply (but not strictly) has key `{a: 1}`
   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);
   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);
   *
   * By default, the target must have all of the given keys and no more. Add
   * `.any` earlier in the chain to only require that the target have at least
   * one of the given keys. Also, add `.not` earlier in the chain to negate
   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use
   * `.all` when asserting `.keys` without negation.
   *
   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts
   * exactly what's expected of the output, whereas `.not.all.keys` creates
   * uncertain expectations.
   *
   *     // Recommended; asserts that target doesn't have any of the given keys
   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
   *
   *     // Not recommended; asserts that target doesn't have all of the given
   *     // keys but may or may not have some of them
   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');
   *
   * When asserting `.keys` without negation, `.all` is preferred because
   * `.all.keys` asserts exactly what's expected of the output, whereas
   * `.any.keys` creates uncertain expectations.
   *
   *     // Recommended; asserts that target has all the given keys
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *
   *     // Not recommended; asserts that target has at least one of the given
   *     // keys but may or may not have more of them
   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');
   *
   * Note that `.all` is used by default when neither `.all` nor `.any` appear
   * earlier in the chain. However, it's often best to add `.all` anyway because
   * it improves readability.
   *
   *     // Both assertions are identical
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended
   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended
   *
   * Add `.include` earlier in the chain to require that the target's keys be a
   * superset of the expected keys, rather than identical sets.
   *
   *     // Target object's keys are a superset of ['a', 'b'] but not identical
   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');
   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');
   *
   * However, if `.any` and `.include` are combined, only the `.any` takes
   * effect. The `.include` is ignored in this case.
   *
   *     // Both assertions are identical
   *     expect({a: 1}).to.have.any.keys('a', 'b');
   *     expect({a: 1}).to.include.any.keys('a', 'b');
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');
   *
   * The alias `.key` can be used interchangeably with `.keys`.
   *
   * @name keys
   * @alias key
   * @param {...String|Array|Object} keys
   * @namespace BDD
   * @api public
   */

  function assertKeys(keys) {
    var obj = flag(this, 'object'),
        objType = _.type(obj),
        keysType = _.type(keys),
        ssfi = flag(this, 'ssfi'),
        isDeep = flag(this, 'deep'),
        str,
        deepStr = '',
        actual,
        ok = true,
        flagMsg = flag(this, 'message');

    flagMsg = flagMsg ? flagMsg + ': ' : '';
    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';

    if (objType === 'Map' || objType === 'Set') {
      deepStr = isDeep ? 'deeply ' : '';
      actual = []; // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.

      obj.forEach(function (val, key) {
        actual.push(key);
      });

      if (keysType !== 'Array') {
        keys = Array.prototype.slice.call(arguments);
      }
    } else {
      actual = _.getOwnEnumerableProperties(obj);

      switch (keysType) {
        case 'Array':
          if (arguments.length > 1) {
            throw new AssertionError(mixedArgsMsg, undefined, ssfi);
          }

          break;

        case 'Object':
          if (arguments.length > 1) {
            throw new AssertionError(mixedArgsMsg, undefined, ssfi);
          }

          keys = Object.keys(keys);
          break;

        default:
          keys = Array.prototype.slice.call(arguments);
      } // Only stringify non-Symbols because Symbols would become "Symbol()"


      keys = keys.map(function (val) {
        return typeof val === 'symbol' ? val : String(val);
      });
    }

    if (!keys.length) {
      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);
    }

    var len = keys.length,
        any = flag(this, 'any'),
        all = flag(this, 'all'),
        expected = keys;

    if (!any && !all) {
      all = true;
    } // Has any


    if (any) {
      ok = expected.some(function (expectedKey) {
        return actual.some(function (actualKey) {
          if (isDeep) {
            return _.eql(expectedKey, actualKey);
          } else {
            return expectedKey === actualKey;
          }
        });
      });
    } // Has all


    if (all) {
      ok = expected.every(function (expectedKey) {
        return actual.some(function (actualKey) {
          if (isDeep) {
            return _.eql(expectedKey, actualKey);
          } else {
            return expectedKey === actualKey;
          }
        });
      });

      if (!flag(this, 'contains')) {
        ok = ok && keys.length == actual.length;
      }
    } // Key string


    if (len > 1) {
      keys = keys.map(function (key) {
        return _.inspect(key);
      });
      var last = keys.pop();

      if (all) {
        str = keys.join(', ') + ', and ' + last;
      }

      if (any) {
        str = keys.join(', ') + ', or ' + last;
      }
    } else {
      str = _.inspect(keys[0]);
    } // Form


    str = (len > 1 ? 'keys ' : 'key ') + str; // Have / include

    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str; // Assertion

    this.assert(ok, 'expected #{this} to ' + deepStr + str, 'expected #{this} to not ' + deepStr + str, expected.slice(0).sort(_.compareByInspect), actual.sort(_.compareByInspect), true);
  }

  Assertion.addMethod('keys', assertKeys);
  Assertion.addMethod('key', assertKeys);
  /**
   * ### .throw([errorLike], [errMsgMatcher], [msg])
   *
   * When no arguments are provided, `.throw` invokes the target function and
   * asserts that an error is thrown.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw();
   *
   * When one argument is provided, and it's an error constructor, `.throw`
   * invokes the target function and asserts that an error is thrown that's an
   * instance of that error constructor.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(TypeError);
   *
   * When one argument is provided, and it's an error instance, `.throw` invokes
   * the target function and asserts that an error is thrown that's strictly
   * (`===`) equal to that error instance.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(err);
   *
   * When one argument is provided, and it's a string, `.throw` invokes the
   * target function and asserts that an error is thrown with a message that
   * contains that string.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw('salmon');
   *
   * When one argument is provided, and it's a regular expression, `.throw`
   * invokes the target function and asserts that an error is thrown with a
   * message that matches that regular expression.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(/salmon/);
   *
   * When two arguments are provided, and the first is an error instance or
   * constructor, and the second is a string or regular expression, `.throw`
   * invokes the function and asserts that an error is thrown that fulfills both
   * conditions as described above.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(TypeError, 'salmon');
   *     expect(badFn).to.throw(TypeError, /salmon/);
   *     expect(badFn).to.throw(err, 'salmon');
   *     expect(badFn).to.throw(err, /salmon/);
   *
   * Add `.not` earlier in the chain to negate `.throw`.
   *
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.not.throw();
   *
   * However, it's dangerous to negate `.throw` when providing any arguments.
   * The problem is that it creates uncertain expectations by asserting that the
   * target either doesn't throw an error, or that it throws an error but of a
   * different type than the given type, or that it throws an error of the given
   * type but with a message that doesn't include the given string. It's often
   * best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to throw an error, it's often best to assert
   * exactly that.
   *
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.not.throw(); // Recommended
   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended
   *
   * When the target is expected to throw an error, it's often best to assert
   * that the error is of its expected type, and has a message that includes an
   * expected string, rather than asserting that it doesn't have one of many
   * unexpected types, and doesn't have a message that includes some string.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended
   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended
   *
   * `.throw` changes the target of any assertions that follow in the chain to
   * be the error object that's thrown.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     err.code = 42;
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(TypeError).with.property('code', 42);
   *
   * `.throw` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`. When not providing two arguments, always use
   * the second form.
   *
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');
   *     expect(goodFn, 'nooo why fail??').to.throw();
   *
   * Due to limitations in ES5, `.throw` may not always work as expected when
   * using a transpiler such as Babel or TypeScript. In particular, it may
   * produce unexpected results when subclassing the built-in `Error` object and
   * then passing the subclassed constructor to `.throw`. See your transpiler's
   * docs for details:
   *
   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))
   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))
   *
   * Beware of some common mistakes when using the `throw` assertion. One common
   * mistake is to accidentally invoke the function yourself instead of letting
   * the `throw` assertion invoke the function for you. For example, when
   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as
   * the target for the assertion.
   *
   *     expect(fn).to.throw();     // Good! Tests `fn` as desired
   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`
   *
   * If you need to assert that your function `fn` throws when passed certain
   * arguments, then wrap a call to `fn` inside of another function.
   *
   *     expect(function () { fn(42); }).to.throw();  // Function expression
   *     expect(() => fn(42)).to.throw();             // ES6 arrow function
   *
   * Another common mistake is to provide an object method (or any stand-alone
   * function that relies on `this`) as the target of the assertion. Doing so is
   * problematic because the `this` context will be lost when the function is
   * invoked by `.throw`; there's no way for it to know what `this` is supposed
   * to be. There are two ways around this problem. One solution is to wrap the
   * method or function call inside of another function. Another solution is to
   * use `bind`.
   *
   *     expect(function () { cat.meow(); }).to.throw();  // Function expression
   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function
   *     expect(cat.meow.bind(cat)).to.throw();           // Bind
   *
   * Finally, it's worth mentioning that it's a best practice in JavaScript to
   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,
   * `TypeError`, and user-defined objects that extend `Error`. No other type of
   * value will generate a stack trace when initialized. With that said, the
   * `throw` assertion does technically support any type of value being thrown,
   * not just `Error` and its derivatives.
   *
   * The aliases `.throws` and `.Throw` can be used interchangeably with
   * `.throw`.
   *
   * @name throw
   * @alias throws
   * @alias Throw
   * @param {Error|ErrorConstructor} errorLike
   * @param {String|RegExp} errMsgMatcher error message
   * @param {String} msg _optional_
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @returns error for chaining (null if no error)
   * @namespace BDD
   * @api public
   */

  function assertThrows(errorLike, errMsgMatcher, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object'),
        ssfi = flag(this, 'ssfi'),
        flagMsg = flag(this, 'message'),
        negate = flag(this, 'negate') || false;
    new Assertion(obj, flagMsg, ssfi, true).is.a('function');

    if (errorLike instanceof RegExp || typeof errorLike === 'string') {
      errMsgMatcher = errorLike;
      errorLike = null;
    }

    var caughtErr;

    try {
      obj();
    } catch (err) {
      caughtErr = err;
    } // If we have the negate flag enabled and at least one valid argument it means we do expect an error
    // but we want it to match a given set of criteria


    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined; // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible
    // See Issue #551 and PR #683@GitHub

    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);
    var errorLikeFail = false;
    var errMsgMatcherFail = false; // Checking if error was thrown

    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {
      // We need this to display results correctly according to their types
      var errorLikeString = 'an error';

      if (errorLike instanceof Error) {
        errorLikeString = '#{exp}';
      } else if (errorLike) {
        errorLikeString = _.checkError.getConstructorName(errorLike);
      }

      this.assert(caughtErr, 'expected #{this} to throw ' + errorLikeString, 'expected #{this} to not throw an error but #{act} was thrown', errorLike && errorLike.toString(), caughtErr instanceof Error ? caughtErr.toString() : typeof caughtErr === 'string' ? caughtErr : caughtErr && _.checkError.getConstructorName(caughtErr));
    }

    if (errorLike && caughtErr) {
      // We should compare instances only if `errorLike` is an instance of `Error`
      if (errorLike instanceof Error) {
        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);

        if (isCompatibleInstance === negate) {
          // These checks were created to ensure we won't fail too soon when we've got both args and a negate
          // See Issue #551 and PR #683@GitHub
          if (everyArgIsDefined && negate) {
            errorLikeFail = true;
          } else {
            this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : ''), errorLike.toString(), caughtErr.toString());
          }
        }
      }

      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);

      if (isCompatibleConstructor === negate) {
        if (everyArgIsDefined && negate) {
          errorLikeFail = true;
        } else {
          this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : ''), errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike), caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr));
        }
      }
    }

    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {
      // Here we check compatible messages
      var placeholder = 'including';

      if (errMsgMatcher instanceof RegExp) {
        placeholder = 'matching';
      }

      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);

      if (isCompatibleMessage === negate) {
        if (everyArgIsDefined && negate) {
          errMsgMatcherFail = true;
        } else {
          this.assert(negate, 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}', 'expected #{this} to throw error not ' + placeholder + ' #{exp}', errMsgMatcher, _.checkError.getMessage(caughtErr));
        }
      }
    } // If both assertions failed and both should've matched we throw an error


    if (errorLikeFail && errMsgMatcherFail) {
      this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : ''), errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike), caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr));
    }

    flag(this, 'object', caughtErr);
  }
  Assertion.addMethod('throw', assertThrows);
  Assertion.addMethod('throws', assertThrows);
  Assertion.addMethod('Throw', assertThrows);
  /**
   * ### .respondTo(method[, msg])
   *
   * When the target is a non-function object, `.respondTo` asserts that the
   * target has a method with the given name `method`. The method can be own or
   * inherited, and it can be enumerable or non-enumerable.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(new Cat()).to.respondTo('meow');
   *
   * When the target is a function, `.respondTo` asserts that the target's
   * `prototype` property has a method with the given name `method`. Again, the
   * method can be own or inherited, and it can be enumerable or non-enumerable.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(Cat).to.respondTo('meow');
   *
   * Add `.itself` earlier in the chain to force `.respondTo` to treat the
   * target as a non-function object, even if it's a function. Thus, it asserts
   * that the target has a method with the given name `method`, rather than
   * asserting that the target's `prototype` property has a method with the
   * given name `method`.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *     Cat.hiss = function () {};
   *
   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');
   *
   * When not adding `.itself`, it's important to check the target's type before
   * using `.respondTo`. See the `.a` doc for info on checking a target's type.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');
   *
   * Add `.not` earlier in the chain to negate `.respondTo`.
   *
   *     function Dog () {}
   *     Dog.prototype.bark = function () {};
   *
   *     expect(new Dog()).to.not.respondTo('meow');
   *
   * `.respondTo` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect({}).to.respondTo('meow', 'nooo why fail??');
   *     expect({}, 'nooo why fail??').to.respondTo('meow');
   *
   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.
   *
   * @name respondTo
   * @alias respondsTo
   * @param {String} method
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function respondTo(method, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object'),
        itself = flag(this, 'itself'),
        context = 'function' === typeof obj && !itself ? obj.prototype[method] : obj[method];
    this.assert('function' === typeof context, 'expected #{this} to respond to ' + _.inspect(method), 'expected #{this} to not respond to ' + _.inspect(method));
  }

  Assertion.addMethod('respondTo', respondTo);
  Assertion.addMethod('respondsTo', respondTo);
  /**
   * ### .itself
   *
   * Forces all `.respondTo` assertions that follow in the chain to behave as if
   * the target is a non-function object, even if it's a function. Thus, it
   * causes `.respondTo` to assert that the target has a method with the given
   * name, rather than asserting that the target's `prototype` property has a
   * method with the given name.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *     Cat.hiss = function () {};
   *
   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');
   *
   * @name itself
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('itself', function () {
    flag(this, 'itself', true);
  });
  /**
   * ### .satisfy(matcher[, msg])
   *
   * Invokes the given `matcher` function with the target being passed as the
   * first argument, and asserts that the value returned is truthy.
   *
   *     expect(1).to.satisfy(function(num) {
   *       return num > 0;
   *     });
   *
   * Add `.not` earlier in the chain to negate `.satisfy`.
   *
   *     expect(1).to.not.satisfy(function(num) {
   *       return num > 2;
   *     });
   *
   * `.satisfy` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1).to.satisfy(function(num) {
   *       return num > 2;
   *     }, 'nooo why fail??');
   *
   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {
   *       return num > 2;
   *     });
   *
   * The alias `.satisfies` can be used interchangeably with `.satisfy`.
   *
   * @name satisfy
   * @alias satisfies
   * @param {Function} matcher
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function satisfy(matcher, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var result = matcher(obj);
    this.assert(result, 'expected #{this} to satisfy ' + _.objDisplay(matcher), 'expected #{this} to not satisfy' + _.objDisplay(matcher), flag(this, 'negate') ? false : true, result);
  }

  Assertion.addMethod('satisfy', satisfy);
  Assertion.addMethod('satisfies', satisfy);
  /**
   * ### .closeTo(expected, delta[, msg])
   *
   * Asserts that the target is a number that's within a given +/- `delta` range
   * of the given number `expected`. However, it's often best to assert that the
   * target is equal to its expected value.
   *
   *     // Recommended
   *     expect(1.5).to.equal(1.5);
   *
   *     // Not recommended
   *     expect(1.5).to.be.closeTo(1, 0.5);
   *     expect(1.5).to.be.closeTo(2, 0.5);
   *     expect(1.5).to.be.closeTo(1, 1);
   *
   * Add `.not` earlier in the chain to negate `.closeTo`.
   *
   *     expect(1.5).to.equal(1.5); // Recommended
   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended
   *
   * `.closeTo` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');
   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);
   *
   * The alias `.approximately` can be used interchangeably with `.closeTo`.
   *
   * @name closeTo
   * @alias approximately
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function closeTo(expected, delta, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object'),
        flagMsg = flag(this, 'message'),
        ssfi = flag(this, 'ssfi');
    new Assertion(obj, flagMsg, ssfi, true).is.a('number');

    if (typeof expected !== 'number' || typeof delta !== 'number') {
      flagMsg = flagMsg ? flagMsg + ': ' : '';
      throw new AssertionError(flagMsg + 'the arguments to closeTo or approximately must be numbers', undefined, ssfi);
    }

    this.assert(Math.abs(obj - expected) <= delta, 'expected #{this} to be close to ' + expected + ' +/- ' + delta, 'expected #{this} not to be close to ' + expected + ' +/- ' + delta);
  }

  Assertion.addMethod('closeTo', closeTo);
  Assertion.addMethod('approximately', closeTo); // Note: Duplicates are ignored if testing for inclusion instead of sameness.

  function isSubsetOf(subset, superset, cmp, contains, ordered) {
    if (!contains) {
      if (subset.length !== superset.length) return false;
      superset = superset.slice();
    }

    return subset.every(function (elem, idx) {
      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];

      if (!cmp) {
        var matchIdx = superset.indexOf(elem);
        if (matchIdx === -1) return false; // Remove match from superset so not counted twice if duplicate in subset.

        if (!contains) superset.splice(matchIdx, 1);
        return true;
      }

      return superset.some(function (elem2, matchIdx) {
        if (!cmp(elem, elem2)) return false; // Remove match from superset so not counted twice if duplicate in subset.

        if (!contains) superset.splice(matchIdx, 1);
        return true;
      });
    });
  }
  /**
   * ### .members(set[, msg])
   *
   * Asserts that the target array has the same members as the given array
   * `set`.
   *
   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);
   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);
   *
   * By default, members are compared using strict (`===`) equality. Add `.deep`
   * earlier in the chain to use deep equality instead. See the `deep-eql`
   * project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target array deeply (but not strictly) has member `{a: 1}`
   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);
   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);
   *
   * By default, order doesn't matter. Add `.ordered` earlier in the chain to
   * require that members appear in the same order.
   *
   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);
   *     expect([1, 2, 3]).to.have.members([2, 1, 3])
   *       .but.not.ordered.members([2, 1, 3]);
   *
   * By default, both arrays must be the same size. Add `.include` earlier in
   * the chain to require that the target's members be a superset of the
   * expected members. Note that duplicates are ignored in the subset when
   * `.include` is added.
   *
   *     // Target array is a superset of [1, 2] but not identical
   *     expect([1, 2, 3]).to.include.members([1, 2]);
   *     expect([1, 2, 3]).to.not.have.members([1, 2]);
   *
   *     // Duplicates in the subset are ignored
   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);
   *
   * `.deep`, `.ordered`, and `.include` can all be combined. However, if
   * `.include` and `.ordered` are combined, the ordering begins at the start of
   * both arrays.
   *
   *     expect([{a: 1}, {b: 2}, {c: 3}])
   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])
   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);
   *
   * Add `.not` earlier in the chain to negate `.members`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the target array doesn't have all of the same members as
   * the given array `set` but may or may not have some of them. It's often best
   * to identify the exact output that's expected, and then write an assertion
   * that only accepts that exact output.
   *
   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended
   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended
   *
   * `.members` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');
   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);
   *
   * @name members
   * @param {Array} set
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */


  Assertion.addMethod('members', function (subset, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object'),
        flagMsg = flag(this, 'message'),
        ssfi = flag(this, 'ssfi');
    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');
    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');
    var contains = flag(this, 'contains');
    var ordered = flag(this, 'ordered');
    var subject, failMsg, failNegateMsg;

    if (contains) {
      subject = ordered ? 'an ordered superset' : 'a superset';
      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';
      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';
    } else {
      subject = ordered ? 'ordered members' : 'members';
      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';
      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';
    }

    var cmp = flag(this, 'deep') ? _.eql : undefined;
    this.assert(isSubsetOf(subset, obj, cmp, contains, ordered), failMsg, failNegateMsg, subset, obj, true);
  });
  /**
   * ### .oneOf(list[, msg])
   *
   * Asserts that the target is a member of the given array `list`. However,
   * it's often best to assert that the target is equal to its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended
   *
   * Comparisons are performed using strict (`===`) equality.
   *
   * Add `.not` earlier in the chain to negate `.oneOf`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended
   *
   * `.oneOf` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);
   *
   * @name oneOf
   * @param {Array<*>} list
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function oneOf(list, msg) {
    if (msg) flag(this, 'message', msg);
    var expected = flag(this, 'object'),
        flagMsg = flag(this, 'message'),
        ssfi = flag(this, 'ssfi');
    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');
    this.assert(list.indexOf(expected) > -1, 'expected #{this} to be one of #{exp}', 'expected #{this} to not be one of #{exp}', list, expected);
  }

  Assertion.addMethod('oneOf', oneOf);
  /**
   * ### .change(subject[, prop[, msg]])
   *
   * When one argument is provided, `.change` asserts that the given function
   * `subject` returns a different value when it's invoked before the target
   * function compared to when it's invoked afterward. However, it's often best
   * to assert that `subject` is equal to its expected value.
   *
   *     var dots = ''
   *       , addDot = function () { dots += '.'; }
   *       , getDots = function () { return dots; };
   *
   *     // Recommended
   *     expect(getDots()).to.equal('');
   *     addDot();
   *     expect(getDots()).to.equal('.');
   *
   *     // Not recommended
   *     expect(addDot).to.change(getDots);
   *
   * When two arguments are provided, `.change` asserts that the value of the
   * given object `subject`'s `prop` property is different before invoking the
   * target function compared to afterward.
   *
   *     var myObj = {dots: ''}
   *       , addDot = function () { myObj.dots += '.'; };
   *
   *     // Recommended
   *     expect(myObj).to.have.property('dots', '');
   *     addDot();
   *     expect(myObj).to.have.property('dots', '.');
   *
   *     // Not recommended
   *     expect(addDot).to.change(myObj, 'dots');
   *
   * Strict (`===`) equality is used to compare before and after values.
   *
   * Add `.not` earlier in the chain to negate `.change`.
   *
   *     var dots = ''
   *       , noop = function () {}
   *       , getDots = function () { return dots; };
   *
   *     expect(noop).to.not.change(getDots);
   *
   *     var myObj = {dots: ''}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'dots');
   *
   * `.change` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {dots: ''}
   *       , addDot = function () { myObj.dots += '.'; };
   *
   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');
   *
   *     var dots = ''
   *       , addDot = function () { dots += '.'; }
   *       , getDots = function () { return dots; };
   *
   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);
   *
   * `.change` also causes all `.by` assertions that follow in the chain to
   * assert how much a numeric subject was increased or decreased by. However,
   * it's dangerous to use `.change.by`. The problem is that it creates
   * uncertain expectations by asserting that the subject either increases by
   * the given delta, or that it decreases by the given delta. It's often best
   * to identify the exact output that's expected, and then write an assertion
   * that only accepts that exact output.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; }
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   * The alias `.changes` can be used interchangeably with `.change`.
   *
   * @name change
   * @alias changes
   * @param {String} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertChanges(subject, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object'),
        flagMsg = flag(this, 'message'),
        ssfi = flag(this, 'ssfi');
    new Assertion(fn, flagMsg, ssfi, true).is.a('function');
    var initial;

    if (!prop) {
      new Assertion(subject, flagMsg, ssfi, true).is.a('function');
      initial = subject();
    } else {
      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
      initial = subject[prop];
    }

    fn();
    var final = prop === undefined || prop === null ? subject() : subject[prop];
    var msgObj = prop === undefined || prop === null ? initial : '.' + prop; // This gets flagged because of the .by(delta) assertion

    flag(this, 'deltaMsgObj', msgObj);
    flag(this, 'initialDeltaValue', initial);
    flag(this, 'finalDeltaValue', final);
    flag(this, 'deltaBehavior', 'change');
    flag(this, 'realDelta', final !== initial);
    this.assert(initial !== final, 'expected ' + msgObj + ' to change', 'expected ' + msgObj + ' to not change');
  }

  Assertion.addMethod('change', assertChanges);
  Assertion.addMethod('changes', assertChanges);
  /**
   * ### .increase(subject[, prop[, msg]])
   *
   * When one argument is provided, `.increase` asserts that the given function
   * `subject` returns a greater number when it's invoked after invoking the
   * target function compared to when it's invoked beforehand. `.increase` also
   * causes all `.by` assertions that follow in the chain to assert how much
   * greater of a number is returned. It's often best to assert that the return
   * value increased by the expected amount, rather than asserting it increased
   * by any amount.
   *
   *     var val = 1
   *       , addTwo = function () { val += 2; }
   *       , getVal = function () { return val; };
   *
   *     expect(addTwo).to.increase(getVal).by(2); // Recommended
   *     expect(addTwo).to.increase(getVal); // Not recommended
   *
   * When two arguments are provided, `.increase` asserts that the value of the
   * given object `subject`'s `prop` property is greater after invoking the
   * target function compared to beforehand.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.increase`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either decreases, or that it stays the same.
   * It's often best to identify the exact output that's expected, and then
   * write an assertion that only accepts that exact output.
   *
   * When the subject is expected to decrease, it's often best to assert that it
   * decreased by the expected amount.
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended
   *
   * When the subject is expected to stay the same, it's often best to assert
   * exactly that.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'val'); // Recommended
   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended
   *
   * `.increase` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');
   *
   *     var val = 1
   *       , noop = function () {}
   *       , getVal = function () { return val; };
   *
   *     expect(noop, 'nooo why fail??').to.increase(getVal);
   *
   * The alias `.increases` can be used interchangeably with `.increase`.
   *
   * @name increase
   * @alias increases
   * @param {String|Function} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertIncreases(subject, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object'),
        flagMsg = flag(this, 'message'),
        ssfi = flag(this, 'ssfi');
    new Assertion(fn, flagMsg, ssfi, true).is.a('function');
    var initial;

    if (!prop) {
      new Assertion(subject, flagMsg, ssfi, true).is.a('function');
      initial = subject();
    } else {
      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
      initial = subject[prop];
    } // Make sure that the target is a number


    new Assertion(initial, flagMsg, ssfi, true).is.a('number');
    fn();
    var final = prop === undefined || prop === null ? subject() : subject[prop];
    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
    flag(this, 'deltaMsgObj', msgObj);
    flag(this, 'initialDeltaValue', initial);
    flag(this, 'finalDeltaValue', final);
    flag(this, 'deltaBehavior', 'increase');
    flag(this, 'realDelta', final - initial);
    this.assert(final - initial > 0, 'expected ' + msgObj + ' to increase', 'expected ' + msgObj + ' to not increase');
  }

  Assertion.addMethod('increase', assertIncreases);
  Assertion.addMethod('increases', assertIncreases);
  /**
   * ### .decrease(subject[, prop[, msg]])
   *
   * When one argument is provided, `.decrease` asserts that the given function
   * `subject` returns a lesser number when it's invoked after invoking the
   * target function compared to when it's invoked beforehand. `.decrease` also
   * causes all `.by` assertions that follow in the chain to assert how much
   * lesser of a number is returned. It's often best to assert that the return
   * value decreased by the expected amount, rather than asserting it decreased
   * by any amount.
   *
   *     var val = 1
   *       , subtractTwo = function () { val -= 2; }
   *       , getVal = function () { return val; };
   *
   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended
   *     expect(subtractTwo).to.decrease(getVal); // Not recommended
   *
   * When two arguments are provided, `.decrease` asserts that the value of the
   * given object `subject`'s `prop` property is lesser after invoking the
   * target function compared to beforehand.
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.decrease`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either increases, or that it stays the same.
   * It's often best to identify the exact output that's expected, and then
   * write an assertion that only accepts that exact output.
   *
   * When the subject is expected to increase, it's often best to assert that it
   * increased by the expected amount.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended
   *
   * When the subject is expected to stay the same, it's often best to assert
   * exactly that.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'val'); // Recommended
   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended
   *
   * `.decrease` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');
   *
   *     var val = 1
   *       , noop = function () {}
   *       , getVal = function () { return val; };
   *
   *     expect(noop, 'nooo why fail??').to.decrease(getVal);
   *
   * The alias `.decreases` can be used interchangeably with `.decrease`.
   *
   * @name decrease
   * @alias decreases
   * @param {String|Function} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertDecreases(subject, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object'),
        flagMsg = flag(this, 'message'),
        ssfi = flag(this, 'ssfi');
    new Assertion(fn, flagMsg, ssfi, true).is.a('function');
    var initial;

    if (!prop) {
      new Assertion(subject, flagMsg, ssfi, true).is.a('function');
      initial = subject();
    } else {
      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
      initial = subject[prop];
    } // Make sure that the target is a number


    new Assertion(initial, flagMsg, ssfi, true).is.a('number');
    fn();
    var final = prop === undefined || prop === null ? subject() : subject[prop];
    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
    flag(this, 'deltaMsgObj', msgObj);
    flag(this, 'initialDeltaValue', initial);
    flag(this, 'finalDeltaValue', final);
    flag(this, 'deltaBehavior', 'decrease');
    flag(this, 'realDelta', initial - final);
    this.assert(final - initial < 0, 'expected ' + msgObj + ' to decrease', 'expected ' + msgObj + ' to not decrease');
  }

  Assertion.addMethod('decrease', assertDecreases);
  Assertion.addMethod('decreases', assertDecreases);
  /**
   * ### .by(delta[, msg])
   *
   * When following an `.increase` assertion in the chain, `.by` asserts that
   * the subject of the `.increase` assertion increased by the given `delta`.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2);
   *
   * When following a `.decrease` assertion in the chain, `.by` asserts that the
   * subject of the `.decrease` assertion decreased by the given `delta`.
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);
   *
   * When following a `.change` assertion in the chain, `.by` asserts that the
   * subject of the `.change` assertion either increased or decreased by the
   * given `delta`. However, it's dangerous to use `.change.by`. The problem is
   * that it creates uncertain expectations. It's often best to identify the
   * exact output that's expected, and then write an assertion that only accepts
   * that exact output.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; }
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.by`. However, it's often best
   * to assert that the subject changed by its expected delta, rather than
   * asserting that it didn't change by one of countless unexpected deltas.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     // Recommended
   *     expect(addTwo).to.increase(myObj, 'val').by(2);
   *
   *     // Not recommended
   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);
   *
   * `.by` accepts an optional `msg` argument which is a custom error message to
   * show when the assertion fails. The message can also be given as the second
   * argument to `expect`.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');
   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);
   *
   * @name by
   * @param {Number} delta
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertDelta(delta, msg) {
    if (msg) flag(this, 'message', msg);
    var msgObj = flag(this, 'deltaMsgObj');
    var initial = flag(this, 'initialDeltaValue');
    var final = flag(this, 'finalDeltaValue');
    var behavior = flag(this, 'deltaBehavior');
    var realDelta = flag(this, 'realDelta');
    var expression;

    if (behavior === 'change') {
      expression = Math.abs(final - initial) === Math.abs(delta);
    } else {
      expression = realDelta === Math.abs(delta);
    }

    this.assert(expression, 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta, 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta);
  }

  Assertion.addMethod('by', assertDelta);
  /**
   * ### .extensible
   *
   * Asserts that the target is extensible, which means that new properties can
   * be added to it. Primitives are never extensible.
   *
   *     expect({a: 1}).to.be.extensible;
   *
   * Add `.not` earlier in the chain to negate `.extensible`.
   *
   *     var nonExtensibleObject = Object.preventExtensions({})
   *       , sealedObject = Object.seal({})
   *       , frozenObject = Object.freeze({});
   *
   *     expect(nonExtensibleObject).to.not.be.extensible;
   *     expect(sealedObject).to.not.be.extensible;
   *     expect(frozenObject).to.not.be.extensible;
   *     expect(1).to.not.be.extensible;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(1, 'nooo why fail??').to.be.extensible;
   *
   * @name extensible
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('extensible', function () {
    var obj = flag(this, 'object'); // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible
    // The following provides ES6 behavior for ES5 environments.

    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);
    this.assert(isExtensible, 'expected #{this} to be extensible', 'expected #{this} to not be extensible');
  });
  /**
   * ### .sealed
   *
   * Asserts that the target is sealed, which means that new properties can't be
   * added to it, and its existing properties can't be reconfigured or deleted.
   * However, it's possible that its existing properties can still be reassigned
   * to different values. Primitives are always sealed.
   *
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freeze({});
   *
   *     expect(sealedObject).to.be.sealed;
   *     expect(frozenObject).to.be.sealed;
   *     expect(1).to.be.sealed;
   *
   * Add `.not` earlier in the chain to negate `.sealed`.
   *
   *     expect({a: 1}).to.not.be.sealed;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;
   *
   * @name sealed
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('sealed', function () {
    var obj = flag(this, 'object'); // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed
    // The following provides ES6 behavior for ES5 environments.

    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;
    this.assert(isSealed, 'expected #{this} to be sealed', 'expected #{this} to not be sealed');
  });
  /**
   * ### .frozen
   *
   * Asserts that the target is frozen, which means that new properties can't be
   * added to it, and its existing properties can't be reassigned to different
   * values, reconfigured, or deleted. Primitives are always frozen.
   *
   *     var frozenObject = Object.freeze({});
   *
   *     expect(frozenObject).to.be.frozen;
   *     expect(1).to.be.frozen;
   *
   * Add `.not` earlier in the chain to negate `.frozen`.
   *
   *     expect({a: 1}).to.not.be.frozen;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;
   *
   * @name frozen
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('frozen', function () {
    var obj = flag(this, 'object'); // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen
    // The following provides ES6 behavior for ES5 environments.

    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;
    this.assert(isFrozen, 'expected #{this} to be frozen', 'expected #{this} to not be frozen');
  });
  /**
   * ### .finite
   *
   * Asserts that the target is a number, and isn't `NaN` or positive/negative
   * `Infinity`.
   *
   *     expect(1).to.be.finite;
   *
   * Add `.not` earlier in the chain to negate `.finite`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either isn't a number, or that it's `NaN`, or
   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often
   * best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to be a number, it's often best to assert
   * that it's the expected type, rather than asserting that it isn't one of
   * many unexpected types.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.finite; // Not recommended
   *
   * When the target is expected to be `NaN`, it's often best to assert exactly
   * that.
   *
   *     expect(NaN).to.be.NaN; // Recommended
   *     expect(NaN).to.not.be.finite; // Not recommended
   *
   * When the target is expected to be positive infinity, it's often best to
   * assert exactly that.
   *
   *     expect(Infinity).to.equal(Infinity); // Recommended
   *     expect(Infinity).to.not.be.finite; // Not recommended
   *
   * When the target is expected to be negative infinity, it's often best to
   * assert exactly that.
   *
   *     expect(-Infinity).to.equal(-Infinity); // Recommended
   *     expect(-Infinity).to.not.be.finite; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect('foo', 'nooo why fail??').to.be.finite;
   *
   * @name finite
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('finite', function (msg) {
    var obj = flag(this, 'object');
    this.assert(typeof obj === 'number' && isFinite(obj), 'expected #{this} to be a finite number', 'expected #{this} to not be a finite number');
  });
};/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var expect = function (chai, util) {
  chai.expect = function (val, message) {
    return new chai.Assertion(val, message);
  };
  /**
   * ### .fail([message])
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure.
   *
   *     expect.fail();
   *     expect.fail("custom error message");
   *     expect.fail(1, 2);
   *     expect.fail(1, 2, "custom error message");
   *     expect.fail(1, 2, "custom error message", ">");
   *     expect.fail(1, 2, undefined, ">");
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @namespace BDD
   * @api public
   */


  chai.expect.fail = function (actual, expected, message, operator) {
    if (arguments.length < 2) {
      message = actual;
      actual = undefined;
    }

    message = message || 'expect.fail()';
    throw new chai.AssertionError(message, {
      actual: actual,
      expected: expected,
      operator: operator
    }, chai.expect.fail);
  };
};/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var should = function (chai, util) {
  var Assertion = chai.Assertion;

  function loadShould() {
    // explicitly define this method as function as to have it's name to include as `ssfi`
    function shouldGetter() {
      if (this instanceof String || this instanceof Number || this instanceof Boolean || typeof Symbol === 'function' && this instanceof Symbol) {
        return new Assertion(this.valueOf(), null, shouldGetter);
      }

      return new Assertion(this, null, shouldGetter);
    }

    function shouldSetter(value) {
      // See https://github.com/chaijs/chai/issues/86: this makes
      // `whatever.should = someValue` actually set `someValue`, which is
      // especially useful for `global.should = require('chai').should()`.
      //
      // Note that we have to use [[DefineProperty]] instead of [[Put]]
      // since otherwise we would trigger this very setter!
      Object.defineProperty(this, 'should', {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } // modify Object.prototype to have `should`


    Object.defineProperty(Object.prototype, 'should', {
      set: shouldSetter,
      get: shouldGetter,
      configurable: true
    });
    var should = {};
    /**
     * ### .fail([message])
     * ### .fail(actual, expected, [message], [operator])
     *
     * Throw a failure.
     *
     *     should.fail();
     *     should.fail("custom error message");
     *     should.fail(1, 2);
     *     should.fail(1, 2, "custom error message");
     *     should.fail(1, 2, "custom error message", ">");
     *     should.fail(1, 2, undefined, ">");
     *
     *
     * @name fail
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @param {String} operator
     * @namespace BDD
     * @api public
     */

    should.fail = function (actual, expected, message, operator) {
      if (arguments.length < 2) {
        message = actual;
        actual = undefined;
      }

      message = message || 'should.fail()';
      throw new chai.AssertionError(message, {
        actual: actual,
        expected: expected,
        operator: operator
      }, should.fail);
    };
    /**
     * ### .equal(actual, expected, [message])
     *
     * Asserts non-strict equality (`==`) of `actual` and `expected`.
     *
     *     should.equal(3, '3', '== coerces values to strings');
     *
     * @name equal
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Should
     * @api public
     */


    should.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.equal(val2);
    };
    /**
     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])
     *
     * Asserts that `function` will throw an error that is an instance of
     * `constructor`, or alternately that it will throw an error with message
     * matching `regexp`.
     *
     *     should.throw(fn, 'function throws a reference error');
     *     should.throw(fn, /function throws a reference error/);
     *     should.throw(fn, ReferenceError);
     *     should.throw(fn, ReferenceError, 'function throws a reference error');
     *     should.throw(fn, ReferenceError, /function throws a reference error/);
     *
     * @name throw
     * @alias Throw
     * @param {Function} function
     * @param {ErrorConstructor} constructor
     * @param {RegExp} regexp
     * @param {String} message
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @namespace Should
     * @api public
     */


    should.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.Throw(errt, errs);
    };
    /**
     * ### .exist
     *
     * Asserts that the target is neither `null` nor `undefined`.
     *
     *     var foo = 'hi';
     *
     *     should.exist(foo, 'foo exists');
     *
     * @name exist
     * @namespace Should
     * @api public
     */


    should.exist = function (val, msg) {
      new Assertion(val, msg).to.exist;
    }; // negation


    should.not = {};
    /**
     * ### .not.equal(actual, expected, [message])
     *
     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
     *
     *     should.not.equal(3, 4, 'these numbers are not equal');
     *
     * @name not.equal
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Should
     * @api public
     */

    should.not.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.not.equal(val2);
    };
    /**
     * ### .throw(function, [constructor/regexp], [message])
     *
     * Asserts that `function` will _not_ throw an error that is an instance of
     * `constructor`, or alternately that it will not throw an error with message
     * matching `regexp`.
     *
     *     should.not.throw(fn, Error, 'function does not throw');
     *
     * @name not.throw
     * @alias not.Throw
     * @param {Function} function
     * @param {ErrorConstructor} constructor
     * @param {RegExp} regexp
     * @param {String} message
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @namespace Should
     * @api public
     */


    should.not.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.not.Throw(errt, errs);
    };
    /**
     * ### .not.exist
     *
     * Asserts that the target is neither `null` nor `undefined`.
     *
     *     var bar = null;
     *
     *     should.not.exist(bar, 'bar does not exist');
     *
     * @name not.exist
     * @namespace Should
     * @api public
     */


    should.not.exist = function (val, msg) {
      new Assertion(val, msg).to.not.exist;
    };

    should['throw'] = should['Throw'];
    should.not['throw'] = should.not['Throw'];
    return should;
  }
  chai.should = loadShould;
  chai.Should = loadShould;
};/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var assert = function (chai, util) {
  /*!
   * Chai dependencies.
   */
  var Assertion = chai.Assertion,
      flag = util.flag;
  /*!
   * Module export.
   */

  /**
   * ### assert(expression, message)
   *
   * Write your own test expressions.
   *
   *     assert('foo' !== 'bar', 'foo is not bar');
   *     assert(Array.isArray([]), 'empty arrays are arrays');
   *
   * @param {Mixed} expression to test for truthiness
   * @param {String} message to display on error
   * @name assert
   * @namespace Assert
   * @api public
   */

  var assert = chai.assert = function (express, errmsg) {
    var test = new Assertion(null, null, chai.assert, true);
    test.assert(express, errmsg, '[ negation message unavailable ]');
  };
  /**
   * ### .fail([message])
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure. Node.js `assert` module-compatible.
   *
   *     assert.fail();
   *     assert.fail("custom error message");
   *     assert.fail(1, 2);
   *     assert.fail(1, 2, "custom error message");
   *     assert.fail(1, 2, "custom error message", ">");
   *     assert.fail(1, 2, undefined, ">");
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @namespace Assert
   * @api public
   */


  assert.fail = function (actual, expected, message, operator) {
    if (arguments.length < 2) {
      // Comply with Node's fail([message]) interface
      message = actual;
      actual = undefined;
    }

    message = message || 'assert.fail()';
    throw new chai.AssertionError(message, {
      actual: actual,
      expected: expected,
      operator: operator
    }, assert.fail);
  };
  /**
   * ### .isOk(object, [message])
   *
   * Asserts that `object` is truthy.
   *
   *     assert.isOk('everything', 'everything is ok');
   *     assert.isOk(false, 'this will fail');
   *
   * @name isOk
   * @alias ok
   * @param {Mixed} object to test
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isOk = function (val, msg) {
    new Assertion(val, msg, assert.isOk, true).is.ok;
  };
  /**
   * ### .isNotOk(object, [message])
   *
   * Asserts that `object` is falsy.
   *
   *     assert.isNotOk('everything', 'this will fail');
   *     assert.isNotOk(false, 'this will pass');
   *
   * @name isNotOk
   * @alias notOk
   * @param {Mixed} object to test
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotOk = function (val, msg) {
    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;
  };
  /**
   * ### .equal(actual, expected, [message])
   *
   * Asserts non-strict equality (`==`) of `actual` and `expected`.
   *
   *     assert.equal(3, '3', '== coerces values to strings');
   *
   * @name equal
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.equal = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.equal, true);
    test.assert(exp == flag(test, 'object'), 'expected #{this} to equal #{exp}', 'expected #{this} to not equal #{act}', exp, act, true);
  };
  /**
   * ### .notEqual(actual, expected, [message])
   *
   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
   *
   *     assert.notEqual(3, 4, 'these numbers are not equal');
   *
   * @name notEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notEqual = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.notEqual, true);
    test.assert(exp != flag(test, 'object'), 'expected #{this} to not equal #{exp}', 'expected #{this} to equal #{act}', exp, act, true);
  };
  /**
   * ### .strictEqual(actual, expected, [message])
   *
   * Asserts strict equality (`===`) of `actual` and `expected`.
   *
   *     assert.strictEqual(true, true, 'these booleans are strictly equal');
   *
   * @name strictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.strictEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);
  };
  /**
   * ### .notStrictEqual(actual, expected, [message])
   *
   * Asserts strict inequality (`!==`) of `actual` and `expected`.
   *
   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');
   *
   * @name notStrictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notStrictEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);
  };
  /**
   * ### .deepEqual(actual, expected, [message])
   *
   * Asserts that `actual` is deeply equal to `expected`.
   *
   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });
   *
   * @name deepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @alias deepStrictEqual
   * @namespace Assert
   * @api public
   */


  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);
  };
  /**
   * ### .notDeepEqual(actual, expected, [message])
   *
   * Assert that `actual` is not deeply equal to `expected`.
   *
   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });
   *
   * @name notDeepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notDeepEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);
  };
  /**
  * ### .isAbove(valueToCheck, valueToBeAbove, [message])
  *
  * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.
  *
  *     assert.isAbove(5, 2, '5 is strictly greater than 2');
  *
  * @name isAbove
  * @param {Mixed} valueToCheck
  * @param {Mixed} valueToBeAbove
  * @param {String} message
  * @namespace Assert
  * @api public
  */


  assert.isAbove = function (val, abv, msg) {
    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);
  };
  /**
  * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])
  *
  * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.
  *
  *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');
  *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');
  *
  * @name isAtLeast
  * @param {Mixed} valueToCheck
  * @param {Mixed} valueToBeAtLeast
  * @param {String} message
  * @namespace Assert
  * @api public
  */


  assert.isAtLeast = function (val, atlst, msg) {
    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);
  };
  /**
  * ### .isBelow(valueToCheck, valueToBeBelow, [message])
  *
  * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.
  *
  *     assert.isBelow(3, 6, '3 is strictly less than 6');
  *
  * @name isBelow
  * @param {Mixed} valueToCheck
  * @param {Mixed} valueToBeBelow
  * @param {String} message
  * @namespace Assert
  * @api public
  */


  assert.isBelow = function (val, blw, msg) {
    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);
  };
  /**
  * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])
  *
  * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.
  *
  *     assert.isAtMost(3, 6, '3 is less than or equal to 6');
  *     assert.isAtMost(4, 4, '4 is less than or equal to 4');
  *
  * @name isAtMost
  * @param {Mixed} valueToCheck
  * @param {Mixed} valueToBeAtMost
  * @param {String} message
  * @namespace Assert
  * @api public
  */


  assert.isAtMost = function (val, atmst, msg) {
    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);
  };
  /**
   * ### .isTrue(value, [message])
   *
   * Asserts that `value` is true.
   *
   *     var teaServed = true;
   *     assert.isTrue(teaServed, 'the tea has been served');
   *
   * @name isTrue
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isTrue = function (val, msg) {
    new Assertion(val, msg, assert.isTrue, true).is['true'];
  };
  /**
   * ### .isNotTrue(value, [message])
   *
   * Asserts that `value` is not true.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotTrue(tea, 'great, time for tea!');
   *
   * @name isNotTrue
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotTrue = function (val, msg) {
    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);
  };
  /**
   * ### .isFalse(value, [message])
   *
   * Asserts that `value` is false.
   *
   *     var teaServed = false;
   *     assert.isFalse(teaServed, 'no tea yet? hmm...');
   *
   * @name isFalse
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isFalse = function (val, msg) {
    new Assertion(val, msg, assert.isFalse, true).is['false'];
  };
  /**
   * ### .isNotFalse(value, [message])
   *
   * Asserts that `value` is not false.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotFalse(tea, 'great, time for tea!');
   *
   * @name isNotFalse
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotFalse = function (val, msg) {
    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);
  };
  /**
   * ### .isNull(value, [message])
   *
   * Asserts that `value` is null.
   *
   *     assert.isNull(err, 'there was no error');
   *
   * @name isNull
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNull = function (val, msg) {
    new Assertion(val, msg, assert.isNull, true).to.equal(null);
  };
  /**
   * ### .isNotNull(value, [message])
   *
   * Asserts that `value` is not null.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotNull(tea, 'great, time for tea!');
   *
   * @name isNotNull
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotNull = function (val, msg) {
    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);
  };
  /**
   * ### .isNaN
   *
   * Asserts that value is NaN.
   *
   *     assert.isNaN(NaN, 'NaN is NaN');
   *
   * @name isNaN
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNaN = function (val, msg) {
    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;
  };
  /**
   * ### .isNotNaN
   *
   * Asserts that value is not NaN.
   *
   *     assert.isNotNaN(4, '4 is not NaN');
   *
   * @name isNotNaN
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotNaN = function (val, msg) {
    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;
  };
  /**
   * ### .exists
   *
   * Asserts that the target is neither `null` nor `undefined`.
   *
   *     var foo = 'hi';
   *
   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');
   *
   * @name exists
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.exists = function (val, msg) {
    new Assertion(val, msg, assert.exists, true).to.exist;
  };
  /**
   * ### .notExists
   *
   * Asserts that the target is either `null` or `undefined`.
   *
   *     var bar = null
   *       , baz;
   *
   *     assert.notExists(bar);
   *     assert.notExists(baz, 'baz is either null or undefined');
   *
   * @name notExists
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notExists = function (val, msg) {
    new Assertion(val, msg, assert.notExists, true).to.not.exist;
  };
  /**
   * ### .isUndefined(value, [message])
   *
   * Asserts that `value` is `undefined`.
   *
   *     var tea;
   *     assert.isUndefined(tea, 'no tea defined');
   *
   * @name isUndefined
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isUndefined = function (val, msg) {
    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);
  };
  /**
   * ### .isDefined(value, [message])
   *
   * Asserts that `value` is not `undefined`.
   *
   *     var tea = 'cup of chai';
   *     assert.isDefined(tea, 'tea has been defined');
   *
   * @name isDefined
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isDefined = function (val, msg) {
    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);
  };
  /**
   * ### .isFunction(value, [message])
   *
   * Asserts that `value` is a function.
   *
   *     function serveTea() { return 'cup of tea'; };
   *     assert.isFunction(serveTea, 'great, we can have tea now');
   *
   * @name isFunction
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isFunction = function (val, msg) {
    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');
  };
  /**
   * ### .isNotFunction(value, [message])
   *
   * Asserts that `value` is _not_ a function.
   *
   *     var serveTea = [ 'heat', 'pour', 'sip' ];
   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');
   *
   * @name isNotFunction
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotFunction = function (val, msg) {
    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');
  };
  /**
   * ### .isObject(value, [message])
   *
   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).
   * _The assertion does not match subclassed objects._
   *
   *     var selection = { name: 'Chai', serve: 'with spices' };
   *     assert.isObject(selection, 'tea selection is an object');
   *
   * @name isObject
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isObject = function (val, msg) {
    new Assertion(val, msg, assert.isObject, true).to.be.a('object');
  };
  /**
   * ### .isNotObject(value, [message])
   *
   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).
   *
   *     var selection = 'chai'
   *     assert.isNotObject(selection, 'tea selection is not an object');
   *     assert.isNotObject(null, 'null is not an object');
   *
   * @name isNotObject
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotObject = function (val, msg) {
    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');
  };
  /**
   * ### .isArray(value, [message])
   *
   * Asserts that `value` is an array.
   *
   *     var menu = [ 'green', 'chai', 'oolong' ];
   *     assert.isArray(menu, 'what kind of tea do we want?');
   *
   * @name isArray
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isArray = function (val, msg) {
    new Assertion(val, msg, assert.isArray, true).to.be.an('array');
  };
  /**
   * ### .isNotArray(value, [message])
   *
   * Asserts that `value` is _not_ an array.
   *
   *     var menu = 'green|chai|oolong';
   *     assert.isNotArray(menu, 'what kind of tea do we want?');
   *
   * @name isNotArray
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotArray = function (val, msg) {
    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');
  };
  /**
   * ### .isString(value, [message])
   *
   * Asserts that `value` is a string.
   *
   *     var teaOrder = 'chai';
   *     assert.isString(teaOrder, 'order placed');
   *
   * @name isString
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isString = function (val, msg) {
    new Assertion(val, msg, assert.isString, true).to.be.a('string');
  };
  /**
   * ### .isNotString(value, [message])
   *
   * Asserts that `value` is _not_ a string.
   *
   *     var teaOrder = 4;
   *     assert.isNotString(teaOrder, 'order placed');
   *
   * @name isNotString
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotString = function (val, msg) {
    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');
  };
  /**
   * ### .isNumber(value, [message])
   *
   * Asserts that `value` is a number.
   *
   *     var cups = 2;
   *     assert.isNumber(cups, 'how many cups');
   *
   * @name isNumber
   * @param {Number} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNumber = function (val, msg) {
    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');
  };
  /**
   * ### .isNotNumber(value, [message])
   *
   * Asserts that `value` is _not_ a number.
   *
   *     var cups = '2 cups please';
   *     assert.isNotNumber(cups, 'how many cups');
   *
   * @name isNotNumber
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotNumber = function (val, msg) {
    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');
  };
  /**
  * ### .isFinite(value, [message])
  *
  * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.
  *
  *     var cups = 2;
  *     assert.isFinite(cups, 'how many cups');
  *
  *     assert.isFinite(NaN); // throws
  *
  * @name isFinite
  * @param {Number} value
  * @param {String} message
  * @namespace Assert
  * @api public
  */


  assert.isFinite = function (val, msg) {
    new Assertion(val, msg, assert.isFinite, true).to.be.finite;
  };
  /**
   * ### .isBoolean(value, [message])
   *
   * Asserts that `value` is a boolean.
   *
   *     var teaReady = true
   *       , teaServed = false;
   *
   *     assert.isBoolean(teaReady, 'is the tea ready');
   *     assert.isBoolean(teaServed, 'has tea been served');
   *
   * @name isBoolean
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isBoolean = function (val, msg) {
    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');
  };
  /**
   * ### .isNotBoolean(value, [message])
   *
   * Asserts that `value` is _not_ a boolean.
   *
   *     var teaReady = 'yep'
   *       , teaServed = 'nope';
   *
   *     assert.isNotBoolean(teaReady, 'is the tea ready');
   *     assert.isNotBoolean(teaServed, 'has tea been served');
   *
   * @name isNotBoolean
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotBoolean = function (val, msg) {
    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');
  };
  /**
   * ### .typeOf(value, name, [message])
   *
   * Asserts that `value`'s type is `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');
   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');
   *     assert.typeOf('tea', 'string', 'we have a string');
   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');
   *     assert.typeOf(null, 'null', 'we have a null');
   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');
   *
   * @name typeOf
   * @param {Mixed} value
   * @param {String} name
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.typeOf = function (val, type, msg) {
    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);
  };
  /**
   * ### .notTypeOf(value, name, [message])
   *
   * Asserts that `value`'s type is _not_ `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');
   *
   * @name notTypeOf
   * @param {Mixed} value
   * @param {String} typeof name
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notTypeOf = function (val, type, msg) {
    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);
  };
  /**
   * ### .instanceOf(object, constructor, [message])
   *
   * Asserts that `value` is an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new Tea('chai');
   *
   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');
   *
   * @name instanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.instanceOf = function (val, type, msg) {
    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);
  };
  /**
   * ### .notInstanceOf(object, constructor, [message])
   *
   * Asserts `value` is not an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new String('chai');
   *
   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');
   *
   * @name notInstanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notInstanceOf = function (val, type, msg) {
    new Assertion(val, msg, assert.notInstanceOf, true).to.not.be.instanceOf(type);
  };
  /**
   * ### .include(haystack, needle, [message])
   *
   * Asserts that `haystack` includes `needle`. Can be used to assert the
   * inclusion of a value in an array, a substring in a string, or a subset of
   * properties in an object.
   *
   *     assert.include([1,2,3], 2, 'array contains value');
   *     assert.include('foobar', 'foo', 'string contains substring');
   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');
   *
   * Strict equality (===) is used. When asserting the inclusion of a value in
   * an array, the array is searched for an element that's strictly equal to the
   * given value. When asserting a subset of properties in an object, the object
   * is searched for the given property keys, checking that each one is present
   * and strictly equal to the given property value. For instance:
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.include([obj1, obj2], obj1);
   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});
   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});
   *
   * @name include
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.include = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.include, true).include(inc);
  };
  /**
   * ### .notInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` does not include `needle`. Can be used to assert
   * the absence of a value in an array, a substring in a string, or a subset of
   * properties in an object.
   *
   *     assert.notInclude([1,2,3], 4, "array doesn't contain value");
   *     assert.notInclude('foobar', 'baz', "string doesn't contain substring");
   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');
   *
   * Strict equality (===) is used. When asserting the absence of a value in an
   * array, the array is searched to confirm the absence of an element that's
   * strictly equal to the given value. When asserting a subset of properties in
   * an object, the object is searched to confirm that at least one of the given
   * property keys is either not present or not strictly equal to the given
   * property value. For instance:
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.notInclude([obj1, obj2], {a: 1});
   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});
   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});
   *
   * @name notInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);
  };
  /**
   * ### .deepInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` includes `needle`. Can be used to assert the
   * inclusion of a value in an array or a subset of properties in an object.
   * Deep equality is used.
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.deepInclude([obj1, obj2], {a: 1});
   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});
   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});
   *
   * @name deepInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.deepInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);
  };
  /**
   * ### .notDeepInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` does not include `needle`. Can be used to assert
   * the absence of a value in an array or a subset of properties in an object.
   * Deep equality is used.
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.notDeepInclude([obj1, obj2], {a: 9});
   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});
   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});
   *
   * @name notDeepInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notDeepInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);
  };
  /**
   * ### .nestedInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an
   * object.
   * Enables the use of dot- and bracket-notation for referencing nested
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   *
   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\.a.[b]': 'x'});
   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\[b\\]': 'x'});
   *
   * @name nestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.nestedInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);
  };
  /**
   * ### .notNestedInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' does not include 'needle'.
   * Can be used to assert the absence of a subset of properties in an
   * object.
   * Enables the use of dot- and bracket-notation for referencing nested
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   *
   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\.a.b': 'y'});
   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\[b\\]': 'y'});
   *
   * @name notNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notNestedInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notNestedInclude, true).not.nested.include(inc);
  };
  /**
   * ### .deepNestedInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an
   * object while checking for deep equality.
   * Enables the use of dot- and bracket-notation for referencing nested
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   *
   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});
   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\.a.\\[b\\]': {x: 1}});
   *
   * @name deepNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.deepNestedInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.deepNestedInclude, true).deep.nested.include(inc);
  };
  /**
   * ### .notDeepNestedInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' does not include 'needle'.
   * Can be used to assert the absence of a subset of properties in an
   * object while checking for deep equality.
   * Enables the use of dot- and bracket-notation for referencing nested
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   *
   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})
   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\.a.\\[b\\]': {y: 2}});
   *
   * @name notDeepNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notDeepNestedInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notDeepNestedInclude, true).not.deep.nested.include(inc);
  };
  /**
   * ### .ownInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an
   * object while ignoring inherited properties.
   *
   *     assert.ownInclude({ a: 1 }, { a: 1 });
   *
   * @name ownInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.ownInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);
  };
  /**
   * ### .notOwnInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the absence of a subset of properties in an
   * object while ignoring inherited properties.
   *
   *     Object.prototype.b = 2;
   *
   *     assert.notOwnInclude({ a: 1 }, { b: 2 });
   *
   * @name notOwnInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notOwnInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);
  };
  /**
   * ### .deepOwnInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an
   * object while ignoring inherited properties and checking for deep equality.
   *
   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});
   *
   * @name deepOwnInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.deepOwnInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.deepOwnInclude, true).deep.own.include(inc);
  };
  /**
  * ### .notDeepOwnInclude(haystack, needle, [message])
  *
  * Asserts that 'haystack' includes 'needle'.
  * Can be used to assert the absence of a subset of properties in an
  * object while ignoring inherited properties and checking for deep equality.
  *
  *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});
  *
  * @name notDeepOwnInclude
  * @param {Object} haystack
  * @param {Object} needle
  * @param {String} message
  * @namespace Assert
  * @api public
  */


  assert.notDeepOwnInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notDeepOwnInclude, true).not.deep.own.include(inc);
  };
  /**
   * ### .match(value, regexp, [message])
   *
   * Asserts that `value` matches the regular expression `regexp`.
   *
   *     assert.match('foobar', /^foo/, 'regexp matches');
   *
   * @name match
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.match = function (exp, re, msg) {
    new Assertion(exp, msg, assert.match, true).to.match(re);
  };
  /**
   * ### .notMatch(value, regexp, [message])
   *
   * Asserts that `value` does not match the regular expression `regexp`.
   *
   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');
   *
   * @name notMatch
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notMatch = function (exp, re, msg) {
    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);
  };
  /**
   * ### .property(object, property, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property`.
   *
   *     assert.property({ tea: { green: 'matcha' }}, 'tea');
   *     assert.property({ tea: { green: 'matcha' }}, 'toString');
   *
   * @name property
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.property = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.property, true).to.have.property(prop);
  };
  /**
   * ### .notProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property`.
   *
   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');
   *
   * @name notProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.notProperty, true).to.not.have.property(prop);
  };
  /**
   * ### .propertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property` with a value given by `value`. Uses a strict equality check
   * (===).
   *
   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');
   *
   * @name propertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.propertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.propertyVal, true).to.have.property(prop, val);
  };
  /**
   * ### .notPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property` with value given by `value`. Uses a strict equality check
   * (===).
   *
   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');
   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');
   *
   * @name notPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notPropertyVal, true).to.not.have.property(prop, val);
  };
  /**
   * ### .deepPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property` with a value given by `value`. Uses a deep equality check.
   *
   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });
   *
   * @name deepPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.deepPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.deepPropertyVal, true).to.have.deep.property(prop, val);
  };
  /**
   * ### .notDeepPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property` with value given by `value`. Uses a deep equality check.
   *
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });
   *
   * @name notDeepPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notDeepPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notDeepPropertyVal, true).to.not.have.deep.property(prop, val);
  };
  /**
   * ### .ownProperty(object, property, [message])
   *
   * Asserts that `object` has a direct property named by `property`. Inherited
   * properties aren't checked.
   *
   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');
   *
   * @name ownProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */


  assert.ownProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.ownProperty, true).to.have.own.property(prop);
  };
  /**
   * ### .notOwnProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by
   * `property`. Inherited properties aren't checked.
   *
   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');
   *     assert.notOwnProperty({}, 'toString');
   *
   * @name notOwnProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */


  assert.notOwnProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.notOwnProperty, true).to.not.have.own.property(prop);
  };
  /**
   * ### .ownPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct property named by `property` and a value
   * equal to the provided `value`. Uses a strict equality check (===).
   * Inherited properties aren't checked.
   *
   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');
   *
   * @name ownPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */


  assert.ownPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.ownPropertyVal, true).to.have.own.property(prop, value);
  };
  /**
   * ### .notOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by `property`
   * with a value equal to the provided `value`. Uses a strict equality check
   * (===). Inherited properties aren't checked.
   *
   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');
   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);
   *
   * @name notOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */


  assert.notOwnPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.notOwnPropertyVal, true).to.not.have.own.property(prop, value);
  };
  /**
   * ### .deepOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct property named by `property` and a value
   * equal to the provided `value`. Uses a deep equality check. Inherited
   * properties aren't checked.
   *
   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });
   *
   * @name deepOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */


  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.deepOwnPropertyVal, true).to.have.deep.own.property(prop, value);
  };
  /**
   * ### .notDeepOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by `property`
   * with a value equal to the provided `value`. Uses a deep equality check.
   * Inherited properties aren't checked.
   *
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });
   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);
   *
   * @name notDeepOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */


  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true).to.not.have.deep.own.property(prop, value);
  };
  /**
   * ### .nestedProperty(object, property, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property`, which can be a string using dot- and bracket-notation for
   * nested reference.
   *
   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');
   *
   * @name nestedProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.nestedProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.nestedProperty, true).to.have.nested.property(prop);
  };
  /**
   * ### .notNestedProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property`, which
   * can be a string using dot- and bracket-notation for nested reference. The
   * property cannot exist on the object nor anywhere in its prototype chain.
   *
   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');
   *
   * @name notNestedProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notNestedProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.notNestedProperty, true).to.not.have.nested.property(prop);
  };
  /**
   * ### .nestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with value given
   * by `value`. `property` can use dot- and bracket-notation for nested
   * reference. Uses a strict equality check (===).
   *
   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');
   *
   * @name nestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.nestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.nestedPropertyVal, true).to.have.nested.property(prop, val);
  };
  /**
   * ### .notNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property` with
   * value given by `value`. `property` can use dot- and bracket-notation for
   * nested reference. Uses a strict equality check (===).
   *
   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');
   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');
   *
   * @name notNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notNestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notNestedPropertyVal, true).to.not.have.nested.property(prop, val);
  };
  /**
   * ### .deepNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with a value given
   * by `value`. `property` can use dot- and bracket-notation for nested
   * reference. Uses a deep equality check.
   *
   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });
   *
   * @name deepNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.deepNestedPropertyVal, true).to.have.deep.nested.property(prop, val);
  };
  /**
   * ### .notDeepNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property` with
   * value given by `value`. `property` can use dot- and bracket-notation for
   * nested reference. Uses a deep equality check.
   *
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });
   *
   * @name notDeepNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true).to.not.have.deep.nested.property(prop, val);
  };
  /**
   * ### .lengthOf(object, length, [message])
   *
   * Asserts that `object` has a `length` or `size` with the expected value.
   *
   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');
   *     assert.lengthOf('foobar', 6, 'string has length of 6');
   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');
   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');
   *
   * @name lengthOf
   * @param {Mixed} object
   * @param {Number} length
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.lengthOf = function (exp, len, msg) {
    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);
  };
  /**
   * ### .hasAnyKeys(object, [keys], [message])
   *
   * Asserts that `object` has at least one of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);
   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});
   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);
   *
   * @name hasAnyKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.hasAnyKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);
  };
  /**
   * ### .hasAllKeys(object, [keys], [message])
   *
   * Asserts that `object` has all and only all of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);
   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);
   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);
   *
   * @name hasAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.hasAllKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);
  };
  /**
   * ### .containsAllKeys(object, [keys], [message])
   *
   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});
   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);
   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);
   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);
   *
   * @name containsAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.containsAllKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.containsAllKeys, true).to.contain.all.keys(keys);
  };
  /**
   * ### .doesNotHaveAnyKeys(object, [keys], [message])
   *
   * Asserts that `object` has none of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);
   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});
   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);
   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);
   *
   * @name doesNotHaveAnyKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true).to.not.have.any.keys(keys);
  };
  /**
   * ### .doesNotHaveAllKeys(object, [keys], [message])
   *
   * Asserts that `object` does not have at least one of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);
   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});
   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);
   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);
   *
   * @name doesNotHaveAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.doesNotHaveAllKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true).to.not.have.all.keys(keys);
  };
  /**
   * ### .hasAnyDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` has at least one of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
   *
   * @name doesNotHaveAllKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.hasAnyDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAnyDeepKeys, true).to.have.any.deep.keys(keys);
  };
  /**
    * ### .hasAllDeepKeys(object, [keys], [message])
    *
    * Asserts that `object` has all and only all of the `keys` provided.
    * Since Sets and Maps can have objects as keys you can use this assertion to perform
    * a deep comparison.
    * You can also provide a single object instead of a `keys` array and its keys
    * will be used as the expected set of keys.
    *
    *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});
    *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
    *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});
    *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
    *
    * @name hasAllDeepKeys
    * @param {Mixed} object
    * @param {Array|Object} keys
    * @param {String} message
    * @namespace Assert
    * @api public
    */


  assert.hasAllDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAllDeepKeys, true).to.have.all.deep.keys(keys);
  };
  /**
    * ### .containsAllDeepKeys(object, [keys], [message])
    *
    * Asserts that `object` contains all of the `keys` provided.
    * Since Sets and Maps can have objects as keys you can use this assertion to perform
    * a deep comparison.
    * You can also provide a single object instead of a `keys` array and its keys
    * will be used as the expected set of keys.
    *
    *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});
    *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
    *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});
    *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
    *
    * @name containsAllDeepKeys
    * @param {Mixed} object
    * @param {Array|Object} keys
    * @param {String} message
    * @namespace Assert
    * @api public
    */


  assert.containsAllDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.containsAllDeepKeys, true).to.contain.all.deep.keys(keys);
  };
  /**
    * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])
    *
    * Asserts that `object` has none of the `keys` provided.
    * Since Sets and Maps can have objects as keys you can use this assertion to perform
    * a deep comparison.
    * You can also provide a single object instead of a `keys` array and its keys
    * will be used as the expected set of keys.
    *
    *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});
    *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);
    *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});
    *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);
    *
    * @name doesNotHaveAnyDeepKeys
    * @param {Mixed} object
    * @param {Array|Object} keys
    * @param {String} message
    * @namespace Assert
    * @api public
    */


  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true).to.not.have.any.deep.keys(keys);
  };
  /**
    * ### .doesNotHaveAllDeepKeys(object, [keys], [message])
    *
    * Asserts that `object` does not have at least one of the `keys` provided.
    * Since Sets and Maps can have objects as keys you can use this assertion to perform
    * a deep comparison.
    * You can also provide a single object instead of a `keys` array and its keys
    * will be used as the expected set of keys.
    *
    *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});
    *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);
    *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});
    *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);
    *
    * @name doesNotHaveAllDeepKeys
    * @param {Mixed} object
    * @param {Array|Object} keys
    * @param {String} message
    * @namespace Assert
    * @api public
    */


  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true).to.not.have.all.deep.keys(keys);
  };
  /**
    * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])
    *
    * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an
    * instance of `errorLike`.
    * If `errorLike` is an `Error` instance, asserts that the error thrown is the same
    * instance as `errorLike`.
    * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a
    * message matching `errMsgMatcher`.
    *
    *     assert.throws(fn, 'Error thrown must have this msg');
    *     assert.throws(fn, /Error thrown must have a msg that matches this/);
    *     assert.throws(fn, ReferenceError);
    *     assert.throws(fn, errorInstance);
    *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');
    *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');
    *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);
    *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);
    *
    * @name throws
    * @alias throw
    * @alias Throw
    * @param {Function} fn
    * @param {ErrorConstructor|Error} errorLike
    * @param {RegExp|String} errMsgMatcher
    * @param {String} message
    * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
    * @namespace Assert
    * @api public
    */


  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {
    if ('string' === typeof errorLike || errorLike instanceof RegExp) {
      errMsgMatcher = errorLike;
      errorLike = null;
    }

    var assertErr = new Assertion(fn, msg, assert.throws, true).to.throw(errorLike, errMsgMatcher);
    return flag(assertErr, 'object');
  };
  /**
   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])
   *
   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an
   * instance of `errorLike`.
   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same
   * instance as `errorLike`.
   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a
   * message matching `errMsgMatcher`.
   *
   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');
   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);
   *     assert.doesNotThrow(fn, Error);
   *     assert.doesNotThrow(fn, errorInstance);
   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');
   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');
   *     assert.doesNotThrow(fn, Error, /Error must not match this/);
   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);
   *
   * @name doesNotThrow
   * @param {Function} fn
   * @param {ErrorConstructor} errorLike
   * @param {RegExp|String} errMsgMatcher
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @namespace Assert
   * @api public
   */


  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {
    if ('string' === typeof errorLike || errorLike instanceof RegExp) {
      errMsgMatcher = errorLike;
      errorLike = null;
    }

    new Assertion(fn, msg, assert.doesNotThrow, true).to.not.throw(errorLike, errMsgMatcher);
  };
  /**
   * ### .operator(val1, operator, val2, [message])
   *
   * Compares two values using `operator`.
   *
   *     assert.operator(1, '<', 2, 'everything is ok');
   *     assert.operator(1, '>', 2, 'this will fail');
   *
   * @name operator
   * @param {Mixed} val1
   * @param {String} operator
   * @param {Mixed} val2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.operator = function (val, operator, val2, msg) {
    var ok;

    switch (operator) {
      case '==':
        ok = val == val2;
        break;

      case '===':
        ok = val === val2;
        break;

      case '>':
        ok = val > val2;
        break;

      case '>=':
        ok = val >= val2;
        break;

      case '<':
        ok = val < val2;
        break;

      case '<=':
        ok = val <= val2;
        break;

      case '!=':
        ok = val != val2;
        break;

      case '!==':
        ok = val !== val2;
        break;

      default:
        msg = msg ? msg + ': ' : msg;
        throw new chai.AssertionError(msg + 'Invalid operator "' + operator + '"', undefined, assert.operator);
    }

    var test = new Assertion(ok, msg, assert.operator, true);
    test.assert(true === flag(test, 'object'), 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2), 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2));
  };
  /**
   * ### .closeTo(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');
   *
   * @name closeTo
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.closeTo = function (act, exp, delta, msg) {
    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);
  };
  /**
   * ### .approximately(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');
   *
   * @name approximately
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.approximately = function (act, exp, delta, msg) {
    new Assertion(act, msg, assert.approximately, true).to.be.approximately(exp, delta);
  };
  /**
   * ### .sameMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in any order. Uses a
   * strict equality check (===).
   *
   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');
   *
   * @name sameMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.sameMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameMembers, true).to.have.same.members(set2);
  };
  /**
   * ### .notSameMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in any order.
   * Uses a strict equality check (===).
   *
   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');
   *
   * @name notSameMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notSameMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameMembers, true).to.not.have.same.members(set2);
  };
  /**
   * ### .sameDeepMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in any order. Uses a
   * deep equality check.
   *
   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');
   *
   * @name sameDeepMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.sameDeepMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameDeepMembers, true).to.have.same.deep.members(set2);
  };
  /**
   * ### .notSameDeepMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in any order.
   * Uses a deep equality check.
   *
   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');
   *
   * @name notSameDeepMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notSameDeepMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameDeepMembers, true).to.not.have.same.deep.members(set2);
  };
  /**
   * ### .sameOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in the same order.
   * Uses a strict equality check (===).
   *
   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');
   *
   * @name sameOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.sameOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameOrderedMembers, true).to.have.same.ordered.members(set2);
  };
  /**
   * ### .notSameOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in the same
   * order. Uses a strict equality check (===).
   *
   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');
   *
   * @name notSameOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notSameOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameOrderedMembers, true).to.not.have.same.ordered.members(set2);
  };
  /**
   * ### .sameDeepOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in the same order.
   * Uses a deep equality check.
   *
   * assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');
   *
   * @name sameDeepOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.sameDeepOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true).to.have.same.deep.ordered.members(set2);
  };
  /**
   * ### .notSameDeepOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in the same
   * order. Uses a deep equality check.
   *
   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');
   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');
   *
   * @name notSameDeepOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true).to.not.have.same.deep.ordered.members(set2);
  };
  /**
   * ### .includeMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in any order. Uses a
   * strict equality check (===). Duplicates are ignored.
   *
   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');
   *
   * @name includeMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.includeMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeMembers, true).to.include.members(subset);
  };
  /**
   * ### .notIncludeMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in any order. Uses a
   * strict equality check (===). Duplicates are ignored.
   *
   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');
   *
   * @name notIncludeMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notIncludeMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeMembers, true).to.not.include.members(subset);
  };
  /**
   * ### .includeDeepMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in any order. Uses a deep
   * equality check. Duplicates are ignored.
   *
   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');
   *
   * @name includeDeepMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.includeDeepMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeDeepMembers, true).to.include.deep.members(subset);
  };
  /**
   * ### .notIncludeDeepMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in any order. Uses a
   * deep equality check. Duplicates are ignored.
   *
   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');
   *
   * @name notIncludeDeepMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notIncludeDeepMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeDeepMembers, true).to.not.include.deep.members(subset);
  };
  /**
   * ### .includeOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a strict equality
   * check (===).
   *
   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');
   *
   * @name includeOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.includeOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeOrderedMembers, true).to.include.ordered.members(subset);
  };
  /**
   * ### .notIncludeOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a strict equality
   * check (===).
   *
   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');
   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');
   *
   * @name notIncludeOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notIncludeOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true).to.not.include.ordered.members(subset);
  };
  /**
   * ### .includeDeepOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a deep equality
   * check.
   *
   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');
   *
   * @name includeDeepOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.includeDeepOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true).to.include.deep.ordered.members(subset);
  };
  /**
   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a deep equality
   * check.
   *
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');
   *
   * @name notIncludeDeepOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true).to.not.include.deep.ordered.members(subset);
  };
  /**
   * ### .oneOf(inList, list, [message])
   *
   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.
   *
   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');
   *
   * @name oneOf
   * @param {*} inList
   * @param {Array<*>} list
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.oneOf = function (inList, list, msg) {
    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);
  };
  /**
   * ### .changes(function, object, property, [message])
   *
   * Asserts that a function changes the value of a property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 22 };
   *     assert.changes(fn, obj, 'val');
   *
   * @name changes
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.changes = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);
  };
  /**
  * ### .changesBy(function, object, property, delta, [message])
  *
  * Asserts that a function changes the value of a property by an amount (delta).
  *
  *     var obj = { val: 10 };
  *     var fn = function() { obj.val += 2 };
  *     assert.changesBy(fn, obj, 'val', 2);
  *
  * @name changesBy
  * @param {Function} modifier function
  * @param {Object} object or getter function
  * @param {String} property name _optional_
  * @param {Number} change amount (delta)
  * @param {String} message _optional_
  * @namespace Assert
  * @api public
  */


  assert.changesBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.changesBy, true).to.change(obj, prop).by(delta);
  };
  /**
  * ### .doesNotChange(function, object, property, [message])
  *
  * Asserts that a function does not change the value of a property.
  *
  *     var obj = { val: 10 };
  *     var fn = function() { console.log('foo'); };
  *     assert.doesNotChange(fn, obj, 'val');
  *
  * @name doesNotChange
  * @param {Function} modifier function
  * @param {Object} object or getter function
  * @param {String} property name _optional_
  * @param {String} message _optional_
  * @namespace Assert
  * @api public
  */


  assert.doesNotChange = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotChange, true).to.not.change(obj, prop);
  };
  /**
   * ### .changesButNotBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 10 };
   *     assert.changesButNotBy(fn, obj, 'val', 5);
   *
   * @name changesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.changesButNotBy, true).to.change(obj, prop).but.not.by(delta);
  };
  /**
   * ### .increases(function, object, property, [message])
   *
   * Asserts that a function increases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 13 };
   *     assert.increases(fn, obj, 'val');
   *
   * @name increases
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.increases = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.increases, true).to.increase(obj, prop);
  };
  /**
   * ### .increasesBy(function, object, property, delta, [message])
   *
   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 10 };
   *     assert.increasesBy(fn, obj, 'val', 10);
   *
   * @name increasesBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.increasesBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.increasesBy, true).to.increase(obj, prop).by(delta);
  };
  /**
   * ### .doesNotIncrease(function, object, property, [message])
   *
   * Asserts that a function does not increase a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 8 };
   *     assert.doesNotIncrease(fn, obj, 'val');
   *
   * @name doesNotIncrease
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.doesNotIncrease = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotIncrease, true).to.not.increase(obj, prop);
  };
  /**
   * ### .increasesButNotBy(function, object, property, [message])
   *
   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 15 };
   *     assert.increasesButNotBy(fn, obj, 'val', 10);
   *
   * @name increasesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.increasesButNotBy, true).to.increase(obj, prop).but.not.by(delta);
  };
  /**
   * ### .decreases(function, object, property, [message])
   *
   * Asserts that a function decreases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.decreases(fn, obj, 'val');
   *
   * @name decreases
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.decreases = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.decreases, true).to.decrease(obj, prop);
  };
  /**
   * ### .decreasesBy(function, object, property, delta, [message])
   *
   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val -= 5 };
   *     assert.decreasesBy(fn, obj, 'val', 5);
   *
   * @name decreasesBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.decreasesBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.decreasesBy, true).to.decrease(obj, prop).by(delta);
  };
  /**
   * ### .doesNotDecrease(function, object, property, [message])
   *
   * Asserts that a function does not decreases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 15 };
   *     assert.doesNotDecrease(fn, obj, 'val');
   *
   * @name doesNotDecrease
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.doesNotDecrease = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotDecrease, true).to.not.decrease(obj, prop);
  };
  /**
   * ### .doesNotDecreaseBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);
   *
   * @name doesNotDecrease
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true).to.not.decrease(obj, prop).by(delta);
  };
  /**
   * ### .decreasesButNotBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.decreasesButNotBy(fn, obj, 'val', 1);
   *
   * @name decreasesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.decreasesButNotBy, true).to.decrease(obj, prop).but.not.by(delta);
  };
  /*!
   * ### .ifError(object)
   *
   * Asserts if value is not a false value, and throws if it is a true value.
   * This is added to allow for chai to be a drop-in replacement for Node's
   * assert class.
   *
   *     var err = new Error('I am a custom error');
   *     assert.ifError(err); // Rethrows err!
   *
   * @name ifError
   * @param {Object} object
   * @namespace Assert
   * @api public
   */


  assert.ifError = function (val) {
    if (val) {
      throw val;
    }
  };
  /**
   * ### .isExtensible(object)
   *
   * Asserts that `object` is extensible (can have new properties added to it).
   *
   *     assert.isExtensible({});
   *
   * @name isExtensible
   * @alias extensible
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.isExtensible = function (obj, msg) {
    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;
  };
  /**
   * ### .isNotExtensible(object)
   *
   * Asserts that `object` is _not_ extensible.
   *
   *     var nonExtensibleObject = Object.preventExtensions({});
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freeze({});
   *
   *     assert.isNotExtensible(nonExtensibleObject);
   *     assert.isNotExtensible(sealedObject);
   *     assert.isNotExtensible(frozenObject);
   *
   * @name isNotExtensible
   * @alias notExtensible
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.isNotExtensible = function (obj, msg) {
    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;
  };
  /**
   * ### .isSealed(object)
   *
   * Asserts that `object` is sealed (cannot have new properties added to it
   * and its existing properties cannot be removed).
   *
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.seal({});
   *
   *     assert.isSealed(sealedObject);
   *     assert.isSealed(frozenObject);
   *
   * @name isSealed
   * @alias sealed
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.isSealed = function (obj, msg) {
    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;
  };
  /**
   * ### .isNotSealed(object)
   *
   * Asserts that `object` is _not_ sealed.
   *
   *     assert.isNotSealed({});
   *
   * @name isNotSealed
   * @alias notSealed
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.isNotSealed = function (obj, msg) {
    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;
  };
  /**
   * ### .isFrozen(object)
   *
   * Asserts that `object` is frozen (cannot have new properties added to it
   * and its existing properties cannot be modified).
   *
   *     var frozenObject = Object.freeze({});
   *     assert.frozen(frozenObject);
   *
   * @name isFrozen
   * @alias frozen
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.isFrozen = function (obj, msg) {
    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;
  };
  /**
   * ### .isNotFrozen(object)
   *
   * Asserts that `object` is _not_ frozen.
   *
   *     assert.isNotFrozen({});
   *
   * @name isNotFrozen
   * @alias notFrozen
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.isNotFrozen = function (obj, msg) {
    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;
  };
  /**
   * ### .isEmpty(target)
   *
   * Asserts that the target does not contain any values.
   * For arrays and strings, it checks the `length` property.
   * For `Map` and `Set` instances, it checks the `size` property.
   * For non-function objects, it gets the count of own
   * enumerable string keys.
   *
   *     assert.isEmpty([]);
   *     assert.isEmpty('');
   *     assert.isEmpty(new Map);
   *     assert.isEmpty({});
   *
   * @name isEmpty
   * @alias empty
   * @param {Object|Array|String|Map|Set} target
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.isEmpty = function (val, msg) {
    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;
  };
  /**
   * ### .isNotEmpty(target)
   *
   * Asserts that the target contains values.
   * For arrays and strings, it checks the `length` property.
   * For `Map` and `Set` instances, it checks the `size` property.
   * For non-function objects, it gets the count of own
   * enumerable string keys.
   *
   *     assert.isNotEmpty([1, 2]);
   *     assert.isNotEmpty('34');
   *     assert.isNotEmpty(new Set([5, 6]));
   *     assert.isNotEmpty({ key: 7 });
   *
   * @name isNotEmpty
   * @alias notEmpty
   * @param {Object|Array|String|Map|Set} target
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.isNotEmpty = function (val, msg) {
    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;
  };
  /*!
   * Aliases.
   */


  (function alias(name, as) {
    assert[as] = assert[name];
    return alias;
  })('isOk', 'ok')('isNotOk', 'notOk')('throws', 'throw')('throws', 'Throw')('isExtensible', 'extensible')('isNotExtensible', 'notExtensible')('isSealed', 'sealed')('isNotSealed', 'notSealed')('isFrozen', 'frozen')('isNotFrozen', 'notFrozen')('isEmpty', 'empty')('isNotEmpty', 'notEmpty');
};var chai$1 = createCommonjsModule(function (module, exports) {
  /*!
   * chai
   * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  var used = [];
  /*!
   * Chai version
   */

  exports.version = '4.2.0';
  /*!
   * Assertion Error
   */

  exports.AssertionError = assertionError;
  /*!
   * Utils for plugins (not exported)
   */

  /**
   * # .use(function)
   *
   * Provides a way to extend the internals of Chai.
   *
   * @param {Function}
   * @returns {this} for chaining
   * @api public
   */

  exports.use = function (fn) {
    if (!~used.indexOf(fn)) {
      fn(exports, utils);
      used.push(fn);
    }

    return exports;
  };
  /*!
   * Utility Functions
   */


  exports.util = utils;
  /*!
   * Configuration
   */

  exports.config = config;
  /*!
   * Primary `Assertion` prototype
   */

  exports.use(assertion);
  /*!
   * Core Assertions
   */

  exports.use(assertions);
  /*!
   * Expect interface
   */

  exports.use(expect);
  /*!
   * Should interface
   */

  exports.use(should);
  /*!
   * Assert interface
   */

  exports.use(assert);
});
var chai_1 = chai$1.version;
var chai_2 = chai$1.AssertionError;
var chai_3 = chai$1.use;
var chai_4 = chai$1.util;
var chai_5 = chai$1.config;var chai$2 = chai$1;var chaiDom = createCommonjsModule(function (module, exports) {
  (function (chaiDom) {
    if (typeof commonjsRequire === 'function' && 'object' === 'object' && 'object' === 'object') {
      module.exports = chaiDom;
    } else {
      chai.use(chaiDom);
    }
  })(function (chai, utils) {
    var flag = utils.flag,
        elToString = function (el) {
      var desc;

      if (isNodeList(el)) {
        if (el.length === 0) return 'empty NodeList';
        desc = Array.prototype.slice.call(el, 0, 5).map(elToString).join(', ');
        return el.length > 5 ? desc + '... (+' + (el.length - 5) + ' more)' : desc;
      }

      if (!isHTMLElement(el)) {
        return String(el);
      }

      desc = el.tagName.toLowerCase();

      if (el.id) {
        desc += '#' + el.id;
      }

      if (el.className) {
        desc += '.' + String(el.className).replace(/\s+/g, '.');
      }

      Array.prototype.forEach.call(el.attributes, function (attr) {
        if (attr.name !== 'class' && attr.name !== 'id') {
          desc += '[' + attr.name + (attr.value ? '="' + attr.value + '"]' : ']');
        }
      });
      return desc;
    },
        attrAssert = function (name, val) {
      var el = flag(this, 'object'),
          actual = el.getAttribute(name);

      if (!flag(this, 'negate') || undefined === val) {
        this.assert(!!el.attributes[name], 'expected ' + elToString(el) + ' to have an attribute #{exp}', 'expected ' + elToString(el) + ' not to have an attribute #{exp}', name);
      }

      if (undefined !== val) {
        this.assert(val === actual, 'expected ' + elToString(el) + ' to have an attribute ' + utils.inspect(name) + ' with the value #{exp}, but the value was #{act}', 'expected ' + elToString(el) + ' not to have an attribute ' + utils.inspect(name) + ' with the value #{act}', val, actual);
      }

      flag(this, 'object', actual);
    },
        isHTMLElement = function (el) {
      return el.nodeType === 1; // window.Node.ELEMENT_NODE
    },
        isNodeList = function (obj) {
      return Object.prototype.toString.call(obj) === '[object NodeList]';
    };

    utils.elToString = elToString;
    chai.Assertion.addMethod('attr', attrAssert);
    chai.Assertion.addMethod('attribute', attrAssert);
    chai.Assertion.addMethod('class', function (className) {
      var el = flag(this, 'object');
      this.assert(el.classList.contains(className), 'expected ' + elToString(el) + ' to have class #{exp}', 'expected ' + elToString(el) + ' not to have class #{exp}', className);
    });
    chai.Assertion.addMethod('id', function (id) {
      var el = flag(this, 'object');
      this.assert(el.id == id, 'expected ' + elToString(el) + ' to have id #{exp}', 'expected ' + elToString(el) + ' not to have id #{exp}', id);
    });
    chai.Assertion.addMethod('html', function (html) {
      var el = flag(this, 'object'),
          actual = flag(this, 'object').innerHTML;

      if (flag(this, 'contains')) {
        this.assert(actual.indexOf(html) >= 0, 'expected #{act} to contain HTML #{exp}', 'expected #{act} not to contain HTML #{exp}', html, actual);
      } else {
        this.assert(actual === html, 'expected ' + elToString(el) + ' to have HTML #{exp}, but the HTML was #{act}', 'expected ' + elToString(el) + ' not to have HTML #{exp}', html, actual);
      }
    });
    chai.Assertion.addChainableMethod('trimmed', null, function () {
      flag(this, 'trim-text', true);
    });
    chai.Assertion.addMethod('text', function (text) {
      var obj = flag(this, 'object'),
          contains = flag(this, 'contains'),
          trim = flag(this, 'trim-text'),
          actual,
          result;

      if (isNodeList(obj)) {
        actual = Array.prototype.map.call(obj, function (el) {
          return trim ? el.textContent.trim() : el.textContent;
        });

        if (Array.isArray(text)) {
          result = contains ? text[flag(this, 'negate') ? 'some' : 'every'](function (t) {
            return Array.prototype.some.call(obj, function (el) {
              return (trim ? el.textContent.trim() : el.textContent) === t;
            });
          }) : utils.eql(actual, text);
          actual = actual.join();
          text = text.join();
        } else {
          actual = actual.join('');
          result = contains ? actual.indexOf(text) >= 0 : actual === text;
        }
      } else {
        actual = trim ? obj.textContent.trim() : obj.textContent;
        result = contains ? actual.indexOf(text) >= 0 : actual === text;
      }

      var objDesc = elToString(obj),
          textMsg = trim ? 'trimmed text' : 'text';

      if (contains) {
        this.assert(result, 'expected ' + objDesc + ' to contain #{exp}, but the ' + textMsg + ' was #{act}', 'expected ' + objDesc + ' not to contain #{exp}, but the ' + textMsg + ' was #{act}', text, actual);
      } else {
        this.assert(result, 'expected ' + objDesc + ' to have ' + textMsg + ' #{exp}, but the ' + textMsg + ' was #{act}', 'expected ' + objDesc + ' not to have ' + textMsg + ' #{exp}', text, actual);
      }
    });
    chai.Assertion.addMethod('value', function (value) {
      var el = flag(this, 'object'),
          actual = flag(this, 'object').value;
      this.assert(flag(this, 'object').value === value, 'expected ' + elToString(el) + ' to have value #{exp}, but the value was #{act}', 'expected ' + elToString(el) + ' not to have value #{exp}', value, actual);
    });
    chai.Assertion.overwriteProperty('exist', function (_super) {
      return function () {
        var obj = flag(this, 'object');

        if (isNodeList(obj)) {
          this.assert(obj.length > 0, 'expected an empty NodeList to have nodes', 'expected ' + elToString(obj) + ' to not exist');
        } else {
          _super.apply(this, arguments);
        }
      };
    });
    chai.Assertion.overwriteProperty('empty', function (_super) {
      return function () {
        var obj = flag(this, 'object');

        if (isHTMLElement(obj)) {
          this.assert(obj.children.length === 0, 'expected ' + elToString(obj) + ' to be empty', 'expected ' + elToString(obj) + ' to not be empty');
        } else if (isNodeList(obj)) {
          this.assert(obj.length === 0, 'expected ' + elToString(obj) + ' to be empty', 'expected ' + elToString(obj) + ' to not be empty');
        } else {
          _super.apply(this, arguments);
        }
      };
    });
    chai.Assertion.overwriteChainableMethod('length', function (_super) {
      return function (length) {
        var obj = flag(this, 'object');

        if (isNodeList(obj) || isHTMLElement(obj)) {
          var actualLength = obj.children ? obj.children.length : obj.length;
          this.assert(actualLength === length, 'expected ' + elToString(obj) + ' to have #{exp} children but it had #{act} children', 'expected ' + elToString(obj) + ' to not have #{exp} children', length, actualLength);
        } else {
          _super.apply(this, arguments);
        }
      };
    }, function (_super) {
      return function () {
        _super.call(this);
      };
    });
    chai.Assertion.overwriteMethod('match', function (_super) {
      return function (selector) {
        var obj = flag(this, 'object');

        if (isHTMLElement(obj)) {
          this.assert(obj.matches(selector), 'expected ' + elToString(obj) + ' to match #{exp}', 'expected ' + elToString(obj) + ' to not match #{exp}', selector);
        } else if (isNodeList(obj)) {
          this.assert(!!obj.length && Array.prototype.every.call(obj, function (el) {
            return el.matches(selector);
          }), 'expected ' + elToString(obj) + ' to match #{exp}', 'expected ' + elToString(obj) + ' to not match #{exp}', selector);
        } else {
          _super.apply(this, arguments);
        }
      };
    });
    chai.Assertion.overwriteChainableMethod('contain', function (_super) {
      return function (subitem) {
        var obj = flag(this, 'object');

        if (isHTMLElement(obj)) {
          if (typeof subitem === 'string') {
            this.assert(!!obj.querySelector(subitem), 'expected ' + elToString(obj) + ' to contain #{exp}', 'expected ' + elToString(obj) + ' to not contain #{exp}', subitem);
          } else {
            this.assert(obj.contains(subitem), 'expected ' + elToString(obj) + ' to contain ' + elToString(subitem), 'expected ' + elToString(obj) + ' to not contain ' + elToString(subitem));
          }
        } else {
          _super.apply(this, arguments);
        }
      };
    }, function (_super) {
      return function () {
        _super.call(this);
      };
    });
    chai.Assertion.addMethod('descendant', function (subitem) {
      var obj = flag(this, 'object'),
          actual = subitem;

      if (typeof subitem === 'string') {
        actual = obj.querySelector(subitem);
        this.assert(!!actual, 'expected ' + elToString(obj) + ' to have descendant #{exp}', 'expected ' + elToString(obj) + ' to not have descendant #{exp}', subitem);
      } else {
        this.assert(obj.contains(subitem), 'expected ' + elToString(obj) + ' to contain ' + elToString(subitem), 'expected ' + elToString(obj) + ' to not contain ' + elToString(subitem));
      }

      flag(this, 'object', actual);
    });
    chai.Assertion.addMethod('descendants', function (selector) {
      var obj = flag(this, 'object'),
          actual = obj.querySelectorAll(selector);
      this.assert(!!actual.length, 'expected ' + elToString(obj) + ' to have descendants #{exp}', 'expected ' + elToString(obj) + ' to not have descendants #{exp}', selector);
      flag(this, 'object', actual);
    });
    chai.Assertion.addProperty('displayed', function () {
      var el = flag(this, 'object'),
          actual = document.body.contains(el) ? window.getComputedStyle(el).display : el.style.display;
      this.assert(actual !== 'none', 'expected ' + elToString(el) + ' to be displayed, but it was not', 'expected ' + elToString(el) + ' to not be displayed, but it was as ' + actual, actual);
    });
    chai.Assertion.addProperty('visible', function () {
      var el = flag(this, 'object'),
          actual = document.body.contains(el) ? window.getComputedStyle(el).visibility : el.style.visibility;
      this.assert(actual !== 'hidden' && actual !== 'collapse', 'expected ' + elToString(el) + ' to be visible, but it was ' + (actual === 'hidden' ? 'hidden' : 'collapsed'), 'expected ' + elToString(el) + ' to not be visible, but it was', actual);
    });
  });
});var sources = chaiStyle;

function chaiStyle(chai, utils) {
  const {
    Assertion
  } = chai;
  const {
    flag
  } = utils;
  Assertion.addMethod('style', function (property, value = '') {
    const element = flag(this, 'object');
    const style = window.getComputedStyle(element);
    value = value.trim();
    const isNonColors = style[property] === 'rgba(0, 0, 0, 0)' // webkit
    || style[property] === 'transparent'; // firefox

    const propertyValue = isNonColors ? '' : style[property];
    const assertion = value ? compareCSSValue(propertyValue, value) : Boolean(propertyValue);
    const elementTag = element.tagName.toLowerCase();
    const throwMessage = `expect ${elementTag} to have {${property}: ${value}}, is receiving {${property}: ${propertyValue}}`;
    const throwMessageNegative = `expect ${elementTag} to not have {${property}: ${value}}, is receiving {${property}: ${propertyValue}}`;
    this.assert(assertion, throwMessage, throwMessageNegative, value);

    function compareCSSValue(computed, expected) {
      const propertyHifenCase = property.replace(/[A-Z]/g, match => '-' + match.toLowerCase());
      const fake = document.createElement('div');
      fake.style.fontSize = style.fontSize;
      fake.style.setProperty(propertyHifenCase, expected, 'important');
      const iframe = document.createElement('iframe');
      iframe.style.visibility = 'hidden';
      document.body.appendChild(iframe);
      iframe.appendChild(fake);
      const fakeStyle = window.getComputedStyle(fake);
      const value = fakeStyle[property];
      const hasAutoValue = value.includes('auto');
      const reg = new RegExp(escapeRegExp(value).replace(/auto/g, '(\\d+(.\\d+)?px|auto)'));
      const comparisonResult = hasAutoValue ? reg.test(computed) : computed === value;
      document.body.removeChild(iframe);
      return comparisonResult;
    }
  });
} // https://github.com/benjamingr/RegExp.escape/blob/master/polyfill.js


function escapeRegExp(value) {
  return String(value).replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
}var typeDetect$1 = createCommonjsModule(function (module) {
  /* !
   * type-detect
   * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
   * MIT Licensed
   */

  var getPrototypeOfExists = typeof Object.getPrototypeOf === 'function';
  var promiseExists = typeof Promise === 'function';
  var globalObject = typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : self; // eslint-disable-line

  var isDom = 'location' in globalObject && 'document' in globalObject;
  var htmlElementExists = typeof HTMLElement !== 'undefined';
  var isArrayExists = typeof Array.isArray === 'function';
  var symbolExists = typeof Symbol !== 'undefined';
  var mapExists = typeof Map !== 'undefined';
  var setExists = typeof Set !== 'undefined';
  var weakMapExists = typeof WeakMap !== 'undefined';
  var weakSetExists = typeof WeakSet !== 'undefined';
  var dataViewExists = typeof DataView !== 'undefined';
  var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';
  var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';
  var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';
  var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';
  var setIteratorPrototype = getPrototypeOfExists && setEntriesExists && Object.getPrototypeOf(new Set().entries());
  var mapIteratorPrototype = getPrototypeOfExists && mapEntriesExists && Object.getPrototypeOf(new Map().entries());
  var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
  var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
  var stringIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
  var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());
  var toStringLeftSliceLength = 8;
  var toStringRightSliceLength = -1;
  /**
   * ### typeOf (obj)
   *
   * Uses `Object.prototype.toString` to determine the type of an object,
   * normalising behaviour across engine versions & well optimised.
   *
   * @param {Mixed} object
   * @return {String} object type
   * @api public
   */

  module.exports = function typeDetect(obj) {
    /* ! Speed optimisation
     * Pre:
     *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)
     *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)
     *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)
     *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)
     *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)
     * Post:
     *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)
     *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)
     *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)
     *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)
     *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)
     */
    var typeofObj = typeof obj;

    if (typeofObj !== 'object') {
      return typeofObj;
    }
    /* ! Speed optimisation
     * Pre:
     *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)
     * Post:
     *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)
     */


    if (obj === null) {
      return 'null';
    }
    /* ! Spec Conformance
     * Test: `Object.prototype.toString.call(window)``
     *  - Node === "[object global]"
     *  - Chrome === "[object global]"
     *  - Firefox === "[object Window]"
     *  - PhantomJS === "[object Window]"
     *  - Safari === "[object Window]"
     *  - IE 11 === "[object Window]"
     *  - IE Edge === "[object Window]"
     * Test: `Object.prototype.toString.call(this)``
     *  - Chrome Worker === "[object global]"
     *  - Firefox Worker === "[object DedicatedWorkerGlobalScope]"
     *  - Safari Worker === "[object DedicatedWorkerGlobalScope]"
     *  - IE 11 Worker === "[object WorkerGlobalScope]"
     *  - IE Edge Worker === "[object WorkerGlobalScope]"
     */


    if (obj === globalObject) {
      return 'global';
    }
    /* ! Speed optimisation
     * Pre:
     *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)
     * Post:
     *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)
     */


    if (isArrayExists && Array.isArray(obj)) {
      return 'Array';
    }

    if (isDom) {
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/browsers.html#location)
       * WhatWG HTML$7.7.3 - The `Location` interface
       * Test: `Object.prototype.toString.call(window.location)``
       *  - IE <=11 === "[object Object]"
       *  - IE Edge <=13 === "[object Object]"
       */
      if (obj === globalObject.location) {
        return 'Location';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#document)
       * WhatWG HTML$3.1.1 - The `Document` object
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       *       WhatWG HTML states:
       *         > For historical reasons, Window objects must also have a
       *         > writable, configurable, non-enumerable property named
       *         > HTMLDocument whose value is the Document interface object.
       * Test: `Object.prototype.toString.call(document)``
       *  - Chrome === "[object HTMLDocument]"
       *  - Firefox === "[object HTMLDocument]"
       *  - Safari === "[object HTMLDocument]"
       *  - IE <=10 === "[object Document]"
       *  - IE 11 === "[object HTMLDocument]"
       *  - IE Edge <=13 === "[object HTMLDocument]"
       */


      if (obj === globalObject.document) {
        return 'Document';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray
       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``
       *  - IE <=10 === "[object MSMimeTypesCollection]"
       */


      if (obj === (globalObject.navigator || {}).mimeTypes) {
        return 'MimeTypeArray';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray
       * Test: `Object.prototype.toString.call(navigator.plugins)``
       *  - IE <=10 === "[object MSPluginsCollection]"
       */


      if (obj === (globalObject.navigator || {}).plugins) {
        return 'PluginArray';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
       * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`
       * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``
       *  - IE <=10 === "[object HTMLBlockElement]"
       */


      if (htmlElementExists && obj instanceof HTMLElement && obj.tagName === 'BLOCKQUOTE') {
        return 'HTMLQuoteElement';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltabledatacellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('td'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */


      if (htmlElementExists && obj instanceof HTMLElement && obj.tagName === 'TD') {
        return 'HTMLTableDataCellElement';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltableheadercellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('th'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */


      if (htmlElementExists && obj instanceof HTMLElement && obj.tagName === 'TH') {
        return 'HTMLTableHeaderCellElement';
      }
    }
    /* ! Speed optimisation
    * Pre:
    *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)
    *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)
    *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)
    *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)
    *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)
    *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)
    *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)
    *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)
    *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)
    * Post:
    *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)
    *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)
    *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)
    *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)
    *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)
    *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)
    *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)
    *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)
    *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)
    */


    var stringTag = symbolToStringTagExists && obj[Symbol.toStringTag];

    if (typeof stringTag === 'string') {
      return stringTag;
    }

    if (getPrototypeOfExists) {
      var objPrototype = Object.getPrototypeOf(obj);
      /* ! Speed optimisation
      * Pre:
      *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)
      *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)
      * Post:
      *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)
      *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)
      */

      if (objPrototype === RegExp.prototype) {
        return 'RegExp';
      }
      /* ! Speed optimisation
      * Pre:
      *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)
      * Post:
      *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)
      */


      if (objPrototype === Date.prototype) {
        return 'Date';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)
       * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be "Promise":
       * Test: `Object.prototype.toString.call(Promise.resolve())``
       *  - Chrome <=47 === "[object Object]"
       *  - Edge <=20 === "[object Object]"
       *  - Firefox 29-Latest === "[object Promise]"
       *  - Safari 7.1-Latest === "[object Promise]"
       */


      if (promiseExists && objPrototype === Promise.prototype) {
        return 'Promise';
      }
      /* ! Speed optimisation
      * Pre:
      *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)
      * Post:
      *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)
      */


      if (setExists && objPrototype === Set.prototype) {
        return 'Set';
      }
      /* ! Speed optimisation
      * Pre:
      *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)
      * Post:
      *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)
      */


      if (mapExists && objPrototype === Map.prototype) {
        return 'Map';
      }
      /* ! Speed optimisation
      * Pre:
      *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)
      * Post:
      *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)
      */


      if (weakSetExists && objPrototype === WeakSet.prototype) {
        return 'WeakSet';
      }
      /* ! Speed optimisation
      * Pre:
      *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)
      * Post:
      *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)
      */


      if (weakMapExists && objPrototype === WeakMap.prototype) {
        return 'WeakMap';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)
       * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be "DataView":
       * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``
       *  - Edge <=13 === "[object Object]"
       */


      if (dataViewExists && objPrototype === DataView.prototype) {
        return 'DataView';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)
       * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be "Map Iterator":
       * Test: `Object.prototype.toString.call(new Map().entries())``
       *  - Edge <=13 === "[object Object]"
       */


      if (mapExists && objPrototype === mapIteratorPrototype) {
        return 'Map Iterator';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)
       * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be "Set Iterator":
       * Test: `Object.prototype.toString.call(new Set().entries())``
       *  - Edge <=13 === "[object Object]"
       */


      if (setExists && objPrototype === setIteratorPrototype) {
        return 'Set Iterator';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)
       * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be "Array Iterator":
       * Test: `Object.prototype.toString.call([][Symbol.iterator]())``
       *  - Edge <=13 === "[object Object]"
       */


      if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {
        return 'Array Iterator';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)
       * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be "String Iterator":
       * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``
       *  - Edge <=13 === "[object Object]"
       */


      if (stringIteratorExists && objPrototype === stringIteratorPrototype) {
        return 'String Iterator';
      }
      /* ! Speed optimisation
      * Pre:
      *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)
      * Post:
      *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)
      */


      if (objPrototype === null) {
        return 'Object';
      }
    }

    return Object.prototype.toString.call(obj).slice(toStringLeftSliceLength, toStringRightSliceLength);
  };

  module.exports.typeDetect = module.exports;
});
var typeDetect_1 = typeDetect$1.typeDetect;/* globals Symbol: true, Uint8Array: true, WeakMap: true */

/*!
 * deep-eql
 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */


function FakeMap$1() {
  this.clear();
}

FakeMap$1.prototype = {
  clear: function clearMap() {
    this.keys = [];
    this.values = [];
    return this;
  },
  set: function setMap(key, value) {
    var index = this.keys.indexOf(key);

    if (index >= 0) {
      this.values[index] = value;
    } else {
      this.keys.push(key);
      this.values.push(value);
    }

    return this;
  },
  get: function getMap(key) {
    return this.values[this.keys.indexOf(key)];
  },
  delete: function deleteMap(key) {
    var index = this.keys.indexOf(key);

    if (index >= 0) {
      this.values = this.values.slice(0, index).concat(this.values.slice(index + 1));
      this.keys = this.keys.slice(0, index).concat(this.keys.slice(index + 1));
    }

    return this;
  }
};
var MemoizeMap$1 = null;

if (typeof WeakMap === 'function') {
  MemoizeMap$1 = WeakMap;
} else {
  MemoizeMap$1 = FakeMap$1;
}
/*!
 * Check to see if the MemoizeMap has recorded a result of the two operands
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @returns {Boolean|null} result
*/


function memoizeCompare$1(leftHandOperand, rightHandOperand, memoizeMap) {
  // Technically, WeakMap keys can *only* be objects, not primitives.
  if (!memoizeMap || isPrimitive$1(leftHandOperand) || isPrimitive$1(rightHandOperand)) {
    return null;
  }

  var leftHandMap = memoizeMap.get(leftHandOperand);

  if (leftHandMap) {
    var result = leftHandMap.get(rightHandOperand);

    if (typeof result === 'boolean') {
      return result;
    }
  }

  return null;
}
/*!
 * Set the result of the equality into the MemoizeMap
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @param {Boolean} result
*/


function memoizeSet$1(leftHandOperand, rightHandOperand, memoizeMap, result) {
  // Technically, WeakMap keys can *only* be objects, not primitives.
  if (!memoizeMap || isPrimitive$1(leftHandOperand) || isPrimitive$1(rightHandOperand)) {
    return;
  }

  var leftHandMap = memoizeMap.get(leftHandOperand);

  if (leftHandMap) {
    leftHandMap.set(rightHandOperand, result);
  } else {
    leftHandMap = new MemoizeMap$1();
    leftHandMap.set(rightHandOperand, result);
    memoizeMap.set(leftHandOperand, leftHandMap);
  }
}
/*!
 * Primary Export
 */


var deepEql$1 = deepEqual$1;
var MemoizeMap_1$1 = MemoizeMap$1;
/**
 * Assert deeply nested sameValue equality between two objects of any type.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
 */

function deepEqual$1(leftHandOperand, rightHandOperand, options) {
  // If we have a comparator, we can't assume anything; so bail to its check first.
  if (options && options.comparator) {
    return extensiveDeepEqual$1(leftHandOperand, rightHandOperand, options);
  }

  var simpleResult = simpleEqual$1(leftHandOperand, rightHandOperand);

  if (simpleResult !== null) {
    return simpleResult;
  } // Deeper comparisons are pushed through to a larger function


  return extensiveDeepEqual$1(leftHandOperand, rightHandOperand, options);
}
/**
 * Many comparisons can be canceled out early via simple equality or primitive checks.
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @return {Boolean|null} equal match
 */


function simpleEqual$1(leftHandOperand, rightHandOperand) {
  // Equal references (except for Numbers) can be returned early
  if (leftHandOperand === rightHandOperand) {
    // Handle +-0 cases
    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;
  } // handle NaN cases


  if (leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare
  rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare
  ) {
      return true;
    } // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,
  // strings, and undefined, can be compared by reference.


  if (isPrimitive$1(leftHandOperand) || isPrimitive$1(rightHandOperand)) {
    // Easy out b/c it would have passed the first equality check
    return false;
  }

  return null;
}
/*!
 * The main logic of the `deepEqual` function.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
*/


function extensiveDeepEqual$1(leftHandOperand, rightHandOperand, options) {
  options = options || {};
  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap$1();
  var comparator = options && options.comparator; // Check if a memoized result exists.

  var memoizeResultLeft = memoizeCompare$1(leftHandOperand, rightHandOperand, options.memoize);

  if (memoizeResultLeft !== null) {
    return memoizeResultLeft;
  }

  var memoizeResultRight = memoizeCompare$1(rightHandOperand, leftHandOperand, options.memoize);

  if (memoizeResultRight !== null) {
    return memoizeResultRight;
  } // If a comparator is present, use it.


  if (comparator) {
    var comparatorResult = comparator(leftHandOperand, rightHandOperand); // Comparators may return null, in which case we want to go back to default behavior.

    if (comparatorResult === false || comparatorResult === true) {
      memoizeSet$1(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);
      return comparatorResult;
    } // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide
    // what to do, we need to make sure to return the basic tests first before we move on.


    var simpleResult = simpleEqual$1(leftHandOperand, rightHandOperand);

    if (simpleResult !== null) {
      // Don't memoize this, it takes longer to set/retrieve than to just compare.
      return simpleResult;
    }
  }

  var leftHandType = typeDetect$1(leftHandOperand);

  if (leftHandType !== typeDetect$1(rightHandOperand)) {
    memoizeSet$1(leftHandOperand, rightHandOperand, options.memoize, false);
    return false;
  } // Temporarily set the operands in the memoize object to prevent blowing the stack


  memoizeSet$1(leftHandOperand, rightHandOperand, options.memoize, true);
  var result = extensiveDeepEqualByType$1(leftHandOperand, rightHandOperand, leftHandType, options);
  memoizeSet$1(leftHandOperand, rightHandOperand, options.memoize, result);
  return result;
}

function extensiveDeepEqualByType$1(leftHandOperand, rightHandOperand, leftHandType, options) {
  switch (leftHandType) {
    case 'String':
    case 'Number':
    case 'Boolean':
    case 'Date':
      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values
      return deepEqual$1(leftHandOperand.valueOf(), rightHandOperand.valueOf());

    case 'Promise':
    case 'Symbol':
    case 'function':
    case 'WeakMap':
    case 'WeakSet':
    case 'Error':
      return leftHandOperand === rightHandOperand;

    case 'Arguments':
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
    case 'Array':
      return iterableEqual$1(leftHandOperand, rightHandOperand, options);

    case 'RegExp':
      return regexpEqual$1(leftHandOperand, rightHandOperand);

    case 'Generator':
      return generatorEqual$1(leftHandOperand, rightHandOperand, options);

    case 'DataView':
      return iterableEqual$1(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);

    case 'ArrayBuffer':
      return iterableEqual$1(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);

    case 'Set':
      return entriesEqual$1(leftHandOperand, rightHandOperand, options);

    case 'Map':
      return entriesEqual$1(leftHandOperand, rightHandOperand, options);

    default:
      return objectEqual$1(leftHandOperand, rightHandOperand, options);
  }
}
/*!
 * Compare two Regular Expressions for equality.
 *
 * @param {RegExp} leftHandOperand
 * @param {RegExp} rightHandOperand
 * @return {Boolean} result
 */


function regexpEqual$1(leftHandOperand, rightHandOperand) {
  return leftHandOperand.toString() === rightHandOperand.toString();
}
/*!
 * Compare two Sets/Maps for equality. Faster than other equality functions.
 *
 * @param {Set} leftHandOperand
 * @param {Set} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function entriesEqual$1(leftHandOperand, rightHandOperand, options) {
  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach
  if (leftHandOperand.size !== rightHandOperand.size) {
    return false;
  }

  if (leftHandOperand.size === 0) {
    return true;
  }

  var leftHandItems = [];
  var rightHandItems = [];
  leftHandOperand.forEach(function gatherEntries(key, value) {
    leftHandItems.push([key, value]);
  });
  rightHandOperand.forEach(function gatherEntries(key, value) {
    rightHandItems.push([key, value]);
  });
  return iterableEqual$1(leftHandItems.sort(), rightHandItems.sort(), options);
}
/*!
 * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function iterableEqual$1(leftHandOperand, rightHandOperand, options) {
  var length = leftHandOperand.length;

  if (length !== rightHandOperand.length) {
    return false;
  }

  if (length === 0) {
    return true;
  }

  var index = -1;

  while (++index < length) {
    if (deepEqual$1(leftHandOperand[index], rightHandOperand[index], options) === false) {
      return false;
    }
  }

  return true;
}
/*!
 * Simple equality for generator objects such as those returned by generator functions.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function generatorEqual$1(leftHandOperand, rightHandOperand, options) {
  return iterableEqual$1(getGeneratorEntries$1(leftHandOperand), getGeneratorEntries$1(rightHandOperand), options);
}
/*!
 * Determine if the given object has an @@iterator function.
 *
 * @param {Object} target
 * @return {Boolean} `true` if the object has an @@iterator function.
 */


function hasIteratorFunction$1(target) {
  return typeof Symbol !== 'undefined' && typeof target === 'object' && typeof Symbol.iterator !== 'undefined' && typeof target[Symbol.iterator] === 'function';
}
/*!
 * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.
 * This will consume the iterator - which could have side effects depending on the @@iterator implementation.
 *
 * @param {Object} target
 * @returns {Array} an array of entries from the @@iterator function
 */


function getIteratorEntries$1(target) {
  if (hasIteratorFunction$1(target)) {
    try {
      return getGeneratorEntries$1(target[Symbol.iterator]());
    } catch (iteratorError) {
      return [];
    }
  }

  return [];
}
/*!
 * Gets all entries from a Generator. This will consume the generator - which could have side effects.
 *
 * @param {Generator} target
 * @returns {Array} an array of entries from the Generator.
 */


function getGeneratorEntries$1(generator) {
  var generatorResult = generator.next();
  var accumulator = [generatorResult.value];

  while (generatorResult.done === false) {
    generatorResult = generator.next();
    accumulator.push(generatorResult.value);
  }

  return accumulator;
}
/*!
 * Gets all own and inherited enumerable keys from a target.
 *
 * @param {Object} target
 * @returns {Array} an array of own and inherited enumerable keys from the target.
 */


function getEnumerableKeys$1(target) {
  var keys = [];

  for (var key in target) {
    keys.push(key);
  }

  return keys;
}
/*!
 * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of
 * each key. If any value of the given key is not equal, the function will return false (early).
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function keysEqual$1(leftHandOperand, rightHandOperand, keys, options) {
  var length = keys.length;

  if (length === 0) {
    return true;
  }

  for (var i = 0; i < length; i += 1) {
    if (deepEqual$1(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {
      return false;
    }
  }

  return true;
}
/*!
 * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`
 * for each enumerable key in the object.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function objectEqual$1(leftHandOperand, rightHandOperand, options) {
  var leftHandKeys = getEnumerableKeys$1(leftHandOperand);
  var rightHandKeys = getEnumerableKeys$1(rightHandOperand);

  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {
    leftHandKeys.sort();
    rightHandKeys.sort();

    if (iterableEqual$1(leftHandKeys, rightHandKeys) === false) {
      return false;
    }

    return keysEqual$1(leftHandOperand, rightHandOperand, leftHandKeys, options);
  }

  var leftHandEntries = getIteratorEntries$1(leftHandOperand);
  var rightHandEntries = getIteratorEntries$1(rightHandOperand);

  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {
    leftHandEntries.sort();
    rightHandEntries.sort();
    return iterableEqual$1(leftHandEntries, rightHandEntries, options);
  }

  if (leftHandKeys.length === 0 && leftHandEntries.length === 0 && rightHandKeys.length === 0 && rightHandEntries.length === 0) {
    return true;
  }

  return false;
}
/*!
 * Returns true if the argument is a primitive.
 *
 * This intentionally returns true for all objects that can be compared by reference,
 * including functions and symbols.
 *
 * @param {Mixed} value
 * @return {Boolean} result
 */


function isPrimitive$1(value) {
  return value === null || typeof value !== 'object';
}
deepEql$1.MemoizeMap = MemoizeMap_1$1;var DEFAULT_TOLERANCE = 1e-6;
/**
 * small utility functions
 */

function isNumber(val) {
  return typeDetect(val) === 'number';
}

function bothNumbers(left, right) {
  return isNumber(right) && isNumber(left);
}

function almostEqual(left, right, tol) {
  return Math.abs(left - right) <= tol;
}
/**
 * Makes a comparator function to be passed to deepEqual.
 * The returned function will return null if both arguments are not numbers,
 * indicating that deepEqual should proceed with other equality checks
 */


function comparator(tolerance) {
  return function (left, right) {
    if (bothNumbers(left, right)) {
      return almostEqual(left, right, tolerance);
    }

    return null;
  };
}
/**
 * Sets global tolerance and returns a function to be passed to chai.use
 * @see http://chaijs.com/guide/plugins/
 */


function chaiAlmost(customTolerance) {
  var standardTolerance = customTolerance || DEFAULT_TOLERANCE;
  return function (chai, utils) {
    var Assertion = chai.Assertion;
    var flag = utils.flag;
    /**
     * Returns a new shallow equality function to override
     * .equal, .equals, .eq that tests 'almost' equality
     * if both values are numbers and a 'tolerance' flag is set.
     * Sends to deep equality check if deep flag is set
     */

    function overrideAssertEqual(_super) {
      return function assertEqual(val, msg) {
        if (msg) flag(this, 'message', msg);
        var deep = flag(this, 'deep');
        var tolerance = flag(this, 'tolerance');

        if (deep) {
          return this.eql(val);
        } else if (tolerance && bothNumbers(val, this._obj)) {
          this.assert(almostEqual(val, this._obj, tolerance), 'expected #{this} to almost equal #{exp}', 'expected #{this} to not almost equal #{exp}', val, this._obj, true);
        } else {
          return _super.apply(this, arguments);
        }
      };
    }
    /**
     * Returns a new deep equality function to override
     * .eql, .eqls that tests 'almost' equality if both corresponding
     * values are numbers and tolerance flag is set
     */


    function overrideAssertEql(_super) {
      return function assertEql(val, msg) {
        if (msg) flag(this, 'message', msg);
        var tolerance = flag(this, 'tolerance');

        if (tolerance) {
          this.assert(deepEql$1(val, this._obj, {
            comparator: comparator(tolerance)
          }), 'expected #{this} to deeply almost equal #{exp}', 'expected #{this} to not deeply almost equal #{exp}', val, this._obj, true);
        } else {
          return _super.apply(this, arguments);
        }
      };
    }
    /**
     * .almost() method. To be used at the end of the chain like:
     * expect(4).to.not.be.almost(5, 1.5). Simply adds tolerance flag then calls
     * .equal. This will redirect to .eql if deep flag set
     */


    function method(val, toleranceOverride) {
      var tolerance = toleranceOverride || standardTolerance;
      flag(this, 'tolerance', tolerance);
      return this.equal(val);
    }
    /**
     * .almost chainable property to be used like:
     * expect(3.99999999).to.almost.equal(4). Simply adds
     * tolerance flag to be read by equality checking methods
     */


    function chainingBehavior() {
      flag(this, 'tolerance', standardTolerance);
    }

    Assertion.addChainableMethod('almost', method, chainingBehavior);
    Assertion.overwriteMethod('equal', overrideAssertEqual);
    Assertion.overwriteMethod('equals', overrideAssertEqual);
    Assertion.overwriteMethod('eq', overrideAssertEqual);
    Assertion.overwriteMethod('eql', overrideAssertEql);
    Assertion.overwriteMethod('eqls', overrideAssertEql);
  };
}

var chaiAlmost_1 = chaiAlmost;var checkTypes = createCommonjsModule(function (module) {
  /*globals define, module, Symbol */

  /*jshint -W056 */
  (function (globals) {

    var strings, messages, predicates, functions, assert, not, maybe, collections, slice, neginf, posinf, isArray, haveSymbols;
    strings = {
      v: 'value',
      n: 'number',
      s: 'string',
      b: 'boolean',
      o: 'object',
      t: 'type',
      a: 'array',
      al: 'array-like',
      i: 'iterable',
      d: 'date',
      f: 'function',
      l: 'length'
    };
    messages = {};
    predicates = {};
    [{
      n: 'equal',
      f: equal,
      s: 'v'
    }, {
      n: 'undefined',
      f: isUndefined,
      s: 'v'
    }, {
      n: 'null',
      f: isNull,
      s: 'v'
    }, {
      n: 'assigned',
      f: assigned,
      s: 'v'
    }, {
      n: 'primitive',
      f: primitive,
      s: 'v'
    }, {
      n: 'includes',
      f: includes,
      s: 'v'
    }, {
      n: 'zero',
      f: zero
    }, {
      n: 'infinity',
      f: infinity
    }, {
      n: 'number',
      f: number
    }, {
      n: 'integer',
      f: integer
    }, {
      n: 'even',
      f: even
    }, {
      n: 'odd',
      f: odd
    }, {
      n: 'greater',
      f: greater
    }, {
      n: 'less',
      f: less
    }, {
      n: 'between',
      f: between
    }, {
      n: 'greaterOrEqual',
      f: greaterOrEqual
    }, {
      n: 'lessOrEqual',
      f: lessOrEqual
    }, {
      n: 'inRange',
      f: inRange
    }, {
      n: 'positive',
      f: positive
    }, {
      n: 'negative',
      f: negative
    }, {
      n: 'string',
      f: string,
      s: 's'
    }, {
      n: 'emptyString',
      f: emptyString,
      s: 's'
    }, {
      n: 'nonEmptyString',
      f: nonEmptyString,
      s: 's'
    }, {
      n: 'contains',
      f: contains,
      s: 's'
    }, {
      n: 'match',
      f: match,
      s: 's'
    }, {
      n: 'boolean',
      f: boolean,
      s: 'b'
    }, {
      n: 'object',
      f: object,
      s: 'o'
    }, {
      n: 'emptyObject',
      f: emptyObject,
      s: 'o'
    }, {
      n: 'nonEmptyObject',
      f: nonEmptyObject,
      s: 'o'
    }, {
      n: 'instanceStrict',
      f: instanceStrict,
      s: 't'
    }, {
      n: 'instance',
      f: instance,
      s: 't'
    }, {
      n: 'like',
      f: like,
      s: 't'
    }, {
      n: 'array',
      f: array,
      s: 'a'
    }, {
      n: 'emptyArray',
      f: emptyArray,
      s: 'a'
    }, {
      n: 'nonEmptyArray',
      f: nonEmptyArray,
      s: 'a'
    }, {
      n: 'arrayLike',
      f: arrayLike,
      s: 'al'
    }, {
      n: 'iterable',
      f: iterable,
      s: 'i'
    }, {
      n: 'date',
      f: date,
      s: 'd'
    }, {
      n: 'function',
      f: isFunction,
      s: 'f'
    }, {
      n: 'hasLength',
      f: hasLength,
      s: 'l'
    }].map(function (data) {
      var n = data.n;
      messages[n] = 'Invalid ' + strings[data.s || 'n'];
      predicates[n] = data.f;
    });
    functions = {
      apply: apply,
      map: map,
      all: all,
      any: any
    };
    collections = ['array', 'arrayLike', 'iterable', 'object'];
    slice = Array.prototype.slice;
    neginf = Number.NEGATIVE_INFINITY;
    posinf = Number.POSITIVE_INFINITY;
    isArray = Array.isArray;
    haveSymbols = typeof Symbol === 'function';
    functions = mixin(functions, predicates);
    assert = createModifiedPredicates(assertModifier, assertImpl);
    not = createModifiedPredicates(notModifier, notImpl);
    maybe = createModifiedPredicates(maybeModifier, maybeImpl);
    assert.not = createModifiedModifier(assertModifier, not);
    assert.maybe = createModifiedModifier(assertModifier, maybe);
    collections.forEach(createOfPredicates);
    createOfModifiers(assert, assertModifier);
    createOfModifiers(not, notModifier);
    collections.forEach(createMaybeOfModifiers);
    exportFunctions(mixin(functions, {
      assert: assert,
      not: not,
      maybe: maybe
    }));
    /**
     * Public function `equal`.
     *
     * Returns true if `lhs` and `rhs` are strictly equal, without coercion.
     * Returns false otherwise.
     */

    function equal(lhs, rhs) {
      return lhs === rhs;
    }
    /**
     * Public function `undefined`.
     *
     * Returns true if `data` is undefined, false otherwise.
     */


    function isUndefined(data) {
      return data === undefined;
    }
    /**
     * Public function `null`.
     *
     * Returns true if `data` is null, false otherwise.
     */


    function isNull(data) {
      return data === null;
    }
    /**
     * Public function `assigned`.
     *
     * Returns true if `data` is not null or undefined, false otherwise.
     */


    function assigned(data) {
      return data !== undefined && data !== null;
    }
    /**
     * Public function `primitive`.
     *
     * Returns true if `data` is a primitive type, false otherwise.
     */


    function primitive(data) {
      var type;

      switch (data) {
        case null:
        case undefined:
        case false:
        case true:
          return true;
      }

      type = typeof data;
      return type === 'string' || type === 'number' || haveSymbols && type === 'symbol';
    }
    /**
     * Public function `zero`.
     *
     * Returns true if `data` is zero, false otherwise.
     */


    function zero(data) {
      return data === 0;
    }
    /**
     * Public function `infinity`.
     *
     * Returns true if `data` is positive or negative infinity, false otherwise.
     */


    function infinity(data) {
      return data === neginf || data === posinf;
    }
    /**
     * Public function `number`.
     *
     * Returns true if `data` is a number, false otherwise.
     */


    function number(data) {
      return typeof data === 'number' && data > neginf && data < posinf;
    }
    /**
     * Public function `integer`.
     *
     * Returns true if `data` is an integer, false otherwise.
     */


    function integer(data) {
      return typeof data === 'number' && data % 1 === 0;
    }
    /**
     * Public function `even`.
     *
     * Returns true if `data` is an even number, false otherwise.
     */


    function even(data) {
      return typeof data === 'number' && data % 2 === 0;
    }
    /**
     * Public function `odd`.
     *
     * Returns true if `data` is an odd number, false otherwise.
     */


    function odd(data) {
      return integer(data) && data % 2 !== 0;
    }
    /**
     * Public function `greater`.
     *
     * Returns true if `lhs` is a number greater than `rhs`, false otherwise.
     */


    function greater(lhs, rhs) {
      return number(lhs) && lhs > rhs;
    }
    /**
     * Public function `less`.
     *
     * Returns true if `lhs` is a number less than `rhs`, false otherwise.
     */


    function less(lhs, rhs) {
      return number(lhs) && lhs < rhs;
    }
    /**
     * Public function `between`.
     *
     * Returns true if `data` is a number between `x` and `y`, false otherwise.
     */


    function between(data, x, y) {
      if (x < y) {
        return greater(data, x) && data < y;
      }

      return less(data, x) && data > y;
    }
    /**
     * Public function `greaterOrEqual`.
     *
     * Returns true if `lhs` is a number greater than or equal to `rhs`, false
     * otherwise.
     */


    function greaterOrEqual(lhs, rhs) {
      return number(lhs) && lhs >= rhs;
    }
    /**
     * Public function `lessOrEqual`.
     *
     * Returns true if `lhs` is a number less than or equal to `rhs`, false
     * otherwise.
     */


    function lessOrEqual(lhs, rhs) {
      return number(lhs) && lhs <= rhs;
    }
    /**
     * Public function `inRange`.
     *
     * Returns true if `data` is a number in the range `x..y`, false otherwise.
     */


    function inRange(data, x, y) {
      if (x < y) {
        return greaterOrEqual(data, x) && data <= y;
      }

      return lessOrEqual(data, x) && data >= y;
    }
    /**
     * Public function `positive`.
     *
     * Returns true if `data` is a positive number, false otherwise.
     */


    function positive(data) {
      return greater(data, 0);
    }
    /**
     * Public function `negative`.
     *
     * Returns true if `data` is a negative number, false otherwise.
     */


    function negative(data) {
      return less(data, 0);
    }
    /**
     * Public function `string`.
     *
     * Returns true if `data` is a string, false otherwise.
     */


    function string(data) {
      return typeof data === 'string';
    }
    /**
     * Public function `emptyString`.
     *
     * Returns true if `data` is the empty string, false otherwise.
     */


    function emptyString(data) {
      return data === '';
    }
    /**
     * Public function `nonEmptyString`.
     *
     * Returns true if `data` is a non-empty string, false otherwise.
     */


    function nonEmptyString(data) {
      return string(data) && data !== '';
    }
    /**
     * Public function `contains`.
     *
     * Returns true if `data` is a string that contains `substring`, false
     * otherwise.
     */


    function contains(data, substring) {
      return string(data) && data.indexOf(substring) !== -1;
    }
    /**
     * Public function `match`.
     *
     * Returns true if `data` is a string that matches `regex`, false otherwise.
     */


    function match(data, regex) {
      return string(data) && !!data.match(regex);
    }
    /**
     * Public function `boolean`.
     *
     * Returns true if `data` is a boolean value, false otherwise.
     */


    function boolean(data) {
      return data === false || data === true;
    }
    /**
     * Public function `object`.
     *
     * Returns true if `data` is a plain-old JS object, false otherwise.
     */


    function object(data) {
      return Object.prototype.toString.call(data) === '[object Object]';
    }
    /**
     * Public function `emptyObject`.
     *
     * Returns true if `data` is an empty object, false otherwise.
     */


    function emptyObject(data) {
      return object(data) && Object.keys(data).length === 0;
    }
    /**
     * Public function `nonEmptyObject`.
     *
     * Returns true if `data` is a non-empty object, false otherwise.
     */


    function nonEmptyObject(data) {
      return object(data) && Object.keys(data).length > 0;
    }
    /**
     * Public function `instanceStrict`.
     *
     * Returns true if `data` is an instance of `prototype`, false otherwise.
     */


    function instanceStrict(data, prototype) {
      try {
        return data instanceof prototype;
      } catch (error) {
        return false;
      }
    }
    /**
     * Public function `instance`.
     *
     * Returns true if `data` is an instance of `prototype`, false otherwise.
     * Falls back to testing constructor.name and Object.prototype.toString
     * if the initial instanceof test fails.
     */


    function instance(data, prototype) {
      try {
        return instanceStrict(data, prototype) || data.constructor.name === prototype.name || Object.prototype.toString.call(data) === '[object ' + prototype.name + ']';
      } catch (error) {
        return false;
      }
    }
    /**
     * Public function `like`.
     *
     * Tests whether `data` 'quacks like a duck'. Returns true if `data` has all
     * of the properties of `archetype` (the 'duck'), false otherwise.
     */


    function like(data, archetype) {
      var name;

      for (name in archetype) {
        if (archetype.hasOwnProperty(name)) {
          if (data.hasOwnProperty(name) === false || typeof data[name] !== typeof archetype[name]) {
            return false;
          }

          if (object(data[name]) && like(data[name], archetype[name]) === false) {
            return false;
          }
        }
      }

      return true;
    }
    /**
     * Public function `array`.
     *
     * Returns true if `data` is an array, false otherwise.
     */


    function array(data) {
      return isArray(data);
    }
    /**
     * Public function `emptyArray`.
     *
     * Returns true if `data` is an empty array, false otherwise.
     */


    function emptyArray(data) {
      return array(data) && data.length === 0;
    }
    /**
     * Public function `nonEmptyArray`.
     *
     * Returns true if `data` is a non-empty array, false otherwise.
     */


    function nonEmptyArray(data) {
      return array(data) && greater(data.length, 0);
    }
    /**
     * Public function `arrayLike`.
     *
     * Returns true if `data` is an array-like object, false otherwise.
     */


    function arrayLike(data) {
      return assigned(data) && greaterOrEqual(data.length, 0);
    }
    /**
     * Public function `iterable`.
     *
     * Returns true if `data` is an iterable, false otherwise.
     */


    function iterable(data) {
      if (!haveSymbols) {
        // Fall back to `arrayLike` predicate in pre-ES6 environments.
        return arrayLike(data);
      }

      return assigned(data) && isFunction(data[Symbol.iterator]);
    }
    /**
     * Public function `includes`.
     *
     * Returns true if `data` contains `value`, false otherwise.
     */


    function includes(data, value) {
      var iterator, iteration, keys, length, i;

      if (!assigned(data)) {
        return false;
      }

      if (haveSymbols && data[Symbol.iterator] && isFunction(data.values)) {
        iterator = data.values();

        do {
          iteration = iterator.next();

          if (iteration.value === value) {
            return true;
          }
        } while (!iteration.done);

        return false;
      }

      keys = Object.keys(data);
      length = keys.length;

      for (i = 0; i < length; ++i) {
        if (data[keys[i]] === value) {
          return true;
        }
      }

      return false;
    }
    /**
     * Public function `hasLength`.
     *
     * Returns true if `data` has a length property that equals `length`, false
     * otherwise.
     */


    function hasLength(data, length) {
      return assigned(data) && data.length === length;
    }
    /**
     * Public function `date`.
     *
     * Returns true if `data` is a valid date, false otherwise.
     */


    function date(data) {
      return instanceStrict(data, Date) && integer(data.getTime());
    }
    /**
     * Public function `function`.
     *
     * Returns true if `data` is a function, false otherwise.
     */


    function isFunction(data) {
      return typeof data === 'function';
    }
    /**
     * Public function `apply`.
     *
     * Maps each value from the `data` to the corresponding predicate and returns
     * the result array. If the same function is to be applied across all of the
     * data, a single predicate function may be passed in.
     *
     */


    function apply(data, predicates) {
      assert.array(data);

      if (isFunction(predicates)) {
        return data.map(function (value) {
          return predicates(value);
        });
      }

      assert.array(predicates);
      assert.hasLength(data, predicates.length);
      return data.map(function (value, index) {
        return predicates[index](value);
      });
    }
    /**
     * Public function `map`.
     *
     * Maps each value from the `data` to the corresponding predicate and returns
     * the result object. Supports nested objects. If the `data` is not nested and
     * the same function is to be applied across all of it, a single predicate
     * function may be passed in.
     *
     */


    function map(data, predicates) {
      assert.object(data);

      if (isFunction(predicates)) {
        return mapSimple(data, predicates);
      }

      assert.object(predicates);
      return mapComplex(data, predicates);
    }

    function mapSimple(data, predicate) {
      var result = {};
      Object.keys(data).forEach(function (key) {
        result[key] = predicate(data[key]);
      });
      return result;
    }

    function mapComplex(data, predicates) {
      var result = {};
      Object.keys(predicates).forEach(function (key) {
        var predicate = predicates[key];

        if (isFunction(predicate)) {
          if (not.assigned(data)) {
            result[key] = !!predicate.m;
          } else {
            result[key] = predicate(data[key]);
          }
        } else if (object(predicate)) {
          result[key] = mapComplex(data[key], predicate);
        }
      });
      return result;
    }
    /**
     * Public function `all`
     *
     * Check that all boolean values are true
     * in an array (returned from `apply`)
     * or object (returned from `map`).
     *
     */


    function all(data) {
      if (array(data)) {
        return testArray(data, false);
      }

      assert.object(data);
      return testObject(data, false);
    }

    function testArray(data, result) {
      var i;

      for (i = 0; i < data.length; i += 1) {
        if (data[i] === result) {
          return result;
        }
      }

      return !result;
    }

    function testObject(data, result) {
      var key, value;

      for (key in data) {
        if (data.hasOwnProperty(key)) {
          value = data[key];

          if (object(value) && testObject(value, result) === result) {
            return result;
          }

          if (value === result) {
            return result;
          }
        }
      }

      return !result;
    }
    /**
     * Public function `any`
     *
     * Check that at least one boolean value is true
     * in an array (returned from `apply`)
     * or object (returned from `map`).
     *
     */


    function any(data) {
      if (array(data)) {
        return testArray(data, true);
      }

      assert.object(data);
      return testObject(data, true);
    }

    function mixin(target, source) {
      Object.keys(source).forEach(function (key) {
        target[key] = source[key];
      });
      return target;
    }
    /**
     * Public modifier `assert`.
     *
     * Throws if `predicate` returns false.
     */


    function assertModifier(predicate, defaultMessage) {
      return function () {
        return assertPredicate(predicate, arguments, defaultMessage);
      };
    }

    function assertPredicate(predicate, args, defaultMessage) {
      var argCount = predicate.l || predicate.length;
      var message = args[argCount];
      var ErrorType = args[argCount + 1];
      assertImpl(predicate.apply(null, args), nonEmptyString(message) ? message : defaultMessage, isFunction(ErrorType) ? ErrorType : TypeError);
      return args[0];
    }

    function assertImpl(value, message, ErrorType) {
      if (value) {
        return value;
      }

      throw new (ErrorType || Error)(message || 'Assertion failed');
    }
    /**
     * Public modifier `not`.
     *
     * Negates `predicate`.
     */


    function notModifier(predicate) {
      var modifiedPredicate = function () {
        return notImpl(predicate.apply(null, arguments));
      };

      modifiedPredicate.l = predicate.length;
      return modifiedPredicate;
    }

    function notImpl(value) {
      return !value;
    }
    /**
     * Public modifier `maybe`.
     *
     * Returns true if predicate argument is  null or undefined,
     * otherwise propagates the return value from `predicate`.
     */


    function maybeModifier(predicate) {
      var modifiedPredicate = function () {
        if (not.assigned(arguments[0])) {
          return true;
        }

        return predicate.apply(null, arguments);
      };

      modifiedPredicate.l = predicate.length; // Hackishly indicate that this is a maybe.xxx predicate.
      // Without this flag, the alternative would be to iterate
      // through the maybe predicates or use indexOf to check,
      // which would be time-consuming.

      modifiedPredicate.m = true;
      return modifiedPredicate;
    }

    function maybeImpl(value) {
      if (assigned(value) === false) {
        return true;
      }

      return value;
    }
    /**
     * Public modifier `of`.
     *
     * Applies the chained predicate to members of the collection.
     */


    function ofModifier(target, type, predicate) {
      var modifiedPredicate = function () {
        var collection, args;
        collection = arguments[0];

        if (target === 'maybe' && not.assigned(collection)) {
          return true;
        }

        if (!type(collection)) {
          return false;
        }

        collection = coerceCollection(type, collection);
        args = slice.call(arguments, 1);

        try {
          collection.forEach(function (item) {
            if ((target !== 'maybe' || assigned(item)) && !predicate.apply(null, [item].concat(args))) {
              // TODO: Replace with for...of when ES6 is required.
              throw 0;
            }
          });
        } catch (ignore) {
          return false;
        }

        return true;
      };

      modifiedPredicate.l = predicate.length;
      return modifiedPredicate;
    }

    function coerceCollection(type, collection) {
      switch (type) {
        case arrayLike:
          return slice.call(collection);

        case object:
          return Object.keys(collection).map(function (key) {
            return collection[key];
          });

        default:
          return collection;
      }
    }

    function createModifiedPredicates(modifier, object) {
      return createModifiedFunctions([modifier, predicates, object]);
    }

    function createModifiedFunctions(args) {
      var modifier, object, functions, result;
      modifier = args.shift();
      object = args.pop();
      functions = args.pop();
      result = object || {};
      Object.keys(functions).forEach(function (key) {
        Object.defineProperty(result, key, {
          configurable: false,
          enumerable: true,
          writable: false,
          value: modifier.apply(null, args.concat(functions[key], messages[key]))
        });
      });
      return result;
    }

    function createModifiedModifier(modifier, modified) {
      return createModifiedFunctions([modifier, modified, null]);
    }

    function createOfPredicates(key) {
      predicates[key].of = createModifiedFunctions([ofModifier.bind(null, null), predicates[key], predicates, null]);
    }

    function createOfModifiers(base, modifier) {
      collections.forEach(function (key) {
        base[key].of = createModifiedModifier(modifier, predicates[key].of);
      });
    }

    function createMaybeOfModifiers(key) {
      maybe[key].of = createModifiedFunctions([ofModifier.bind(null, 'maybe'), predicates[key], predicates, null]);
      assert.maybe[key].of = createModifiedModifier(assertModifier, maybe[key].of);
      assert.not[key].of = createModifiedModifier(assertModifier, not[key].of);
    }

    function exportFunctions(functions) {
      if ( module !== null && module.exports) {
        module.exports = functions;
      } else {
        globals.check = functions;
      }
    }
  })(commonjsGlobal);
});var asserttype = chai => {
  const types = ['number', 'string', 'boolean', 'object', 'array', 'date', 'function'];
  types.forEach(type => {
    chai.Assertion.addMethod(type, function () {
      this.assert(checkTypes[type](this._obj), `expected #{this} to be ${type}`, `expected #{this} not to be ${type}`);
    });
  });
};var chaiEvents = createCommonjsModule(function (module, exports) {
  function plugin(chai, utils) {
    var Assertion = chai.Assertion;
    /**
     * Checks if a given entry is an event emitter.
     * Uses EventEmitter or EventTarget if available to quickly check `instanceof`.  Otherwise, checks that common methods
     * to event emitters are available.
     *
     * Gracefully handles custom implementations of event emitters even if EventEmitter or EventTarget are available,
     * checking methods if the emitter doesn't inherit from the global emitter.
    */

    function isEmitter() {
      // Easy check: if Node's EventEmitter or window.EventEmitter exist, check if this is an instance of it.
      if (typeof EventEmitter !== "undefined" && EventEmitter !== null && this._obj instanceof EventEmitter) {
        return this.assert(true, "", "expected #{this} to not be an EventEmitter");
      } // Easy check: if the browser's EventTarget exists, check if this is an instance of it.


      if (typeof EventTarget !== "undefined" && EventTarget !== null && this._obj instanceof EventTarget) {
        return this.assert(true, "", "expected #{this} to not be an EventTarget");
      }

      var obj = this._obj; // Check for Node.js style event emitters with "on", "emit", etc.

      var node = ["on", "emit"].every(function (method) {
        return typeof obj[method] === "function";
      });

      if (node) {
        return this.assert(true, "", "expected #{this} to not be an EventEmitter");
      } // Check for Browser-based event emitters with "addEventListener", etc.


      var browser = ["addEventListener", "dispatchEvent", "removeEventListener"].every(function (method) {
        return typeof obj[method] === "function";
      });

      if (browser) {
        return this.assert(true, "", "expected #{this} to not be an EventEmitter");
      }

      this.assert(false, "expected #{this} to be an EventEmitter", "");
    }
    Assertion.addProperty("emitter", isEmitter);
    Assertion.addProperty("target", isEmitter);
    Assertion.addMethod("emit", function (name, args) {
      const timeout = typeof args === "object" && typeof args.timeout === "number" ? args.timeout : 1500;
      const obj = utils.flag(this, "object");
      new Assertion(this._obj).to.be.an.emitter;
      new Assertion(name).to.satisfy(function (_name) {
        return typeof _name === 'string' || typeof _name === 'symbol';
      });

      const assertEmission = expr => this.assert(expr, `expected #{this} to emit message with key '${name.toString()}'`, `expected #{this} to not emit message with key '${name.toString()}'`);

      return new Promise((resolve, reject) => {
        let done = false;
        obj.once(name, (...args) => {
          if (done) {
            return;
          }

          done = true;

          try {
            assertEmission(true); // Will throw error if action is unexpected.

            resolve(args);
          } catch (err) {
            reject(err);
          }
        });
        setTimeout(() => {
          if (done) {
            return;
          }

          done = true;

          try {
            assertEmission(false); // Will throw error if action is unexpected.

            resolve();
          } catch (err) {
            reject(err);
          }
        }, timeout);
      });
    });
  }

  if (typeof commonjsRequire === "function" && 'object' === "object" && 'object' === "object") {
    module.exports = plugin;
  } else {
    // Other environment (usually <script> tag): plug in to global chai instance directly.
    chai.use(plugin);
  }
});var registered;
registered = false;

function registerAnimations() {
  if (registered) {
    return;
  }

  registered = true;
  index.animation('checkmarkAnimateSuccessTip', {
    '0%, 54%': {
      width: 0,
      left: 0,
      top: 3
    },
    '70%': {
      width: 14,
      left: -2,
      top: 8
    },
    '84%': {
      width: 5,
      left: 5,
      top: 10
    },
    '100%': {
      width: 8,
      left: 3,
      top: 10
    }
  });
  index.animation('checkmarkAnimateSuccessLong', {
    '0%, 65%': {
      width: 0,
      right: 12,
      top: 12
    },
    '84%': {
      width: 14,
      right: 0,
      top: 7
    },
    '100%': {
      width: 12,
      right: 2,
      top: 8
    }
  });
  index.animation('checkmarkAnimateError', {
    '0%, 65%': {
      transform: 'scale(0.4)',
      opacity: 0
    },
    '84%': {
      transform: 'scale(1.15)'
    },
    '100%': {
      transform: 'scale(1)'
    }
  });
  index.animation('checkmarkRotatePlaceholder', {
    '0%, 5%': {
      transform: 'rotate(-45deg)'
    },
    '12%, 100%': {
      transform: 'rotate(-405deg)'
    }
  });
  return index.animation('fieldErrorShake', {
    '0%, 50%': {
      transform: 'translateX(-10px)'
    },
    '25%, 75%': {
      transform: 'translateX(10px)'
    },
    '100%': {
      transform: 'translateX(0px)'
    }
  });
}var IS$2;
IS$2 = index$1.create('natives', 'dom');
IS$2.load({
  // field: (target)-> target and target instanceof Field
  regex: function (target) {
    return target instanceof RegExp;
  },
  objectable: function (target) {
    return IS$2.object(target) || IS$2.function(target);
  }
});
var IS$1$1 = IS$2;/* istanbul ignore next */
if (window.console == null) {
  window.console = {};
}
/* istanbul ignore next */


if (console.log == null) {
  console.log = function () {};
}
/* istanbul ignore next */


if (console.warn == null) {
  console.warn = console.log;
}var simplybind = createCommonjsModule(function (module) {
  (function (t) {
    if (t = function (e, i, s) {
      return function (n) {
        if (!i[n]) throw Error(n + " is not a module");
        return e[n] ? e[n].exports : (e[n] = {
          exports: {}
        }, e[n].exports = i[n].call(s, t, e[n], e[n].exports));
      };
    }({}, {
      0: function (t, e, i) {
        var s = 0,
            n = "push pop shift unshift splice reverse sort".split(" "),
            r = {},
            h = {},
            o = ["{{", "}}"],
            u = Object.create({
          silent: !1
        }, {
          placeholder: {
            get: function () {
              return o;
            },
            set: function (t) {
              O.iA(t) && 2 === t.length && (o = t, C());
            }
          }
        }),
            c = {
          delay: !1,
          throttle: !1,
          simpleSelector: !1,
          promiseTransforms: !1,
          dispatchEvents: !1,
          sendArrayCopies: !1,
          updateEvenIfSame: !1,
          updateOnBind: !0
        },
            a = Object.defineProperty,
            f = Object.getOwnPropertyDescriptor,
            l = null,
            p = function () {
          if (!l) {
            var t = l = document.createEvent("Event");
            t.initEvent("change", !0, !1), t._sb = !0;
          }

          return l;
        },
            d = !("className" in Element.prototype && f(Element.prototype, "className").get),
            v = "innerWidth innerHeight outerWidth outerHeight scrollX scrollY pageXOffset pageYOffset screenX screenY screenLeft screenTop".split(" "),
            b = function (t, e) {
          return this.uAS(e || this);
        },
            g = function () {
          return "" + ++s;
        },
            y = function () {
          return Object.create(null);
        },
            _ = function (t, e) {
          return function (i, s, n) {
            return H(i, s, n, t, e);
          };
        },
            m = function (t, e) {
          return t.sU || (t.sU = new R(function () {
            return e ? t.sV(t.fDV(), t, !0) : t.uAS(t);
          }, "Func", {}));
        },
            D = function (t, e) {
          return t && -1 !== t.indexOf(e);
        },
            O = {
          iD: function (t) {
            return void 0 !== t;
          },
          iA: function (t) {
            return t instanceof Array;
          },
          iO: function (t) {
            return "object" == typeof t && t;
          },
          iS: function (t) {
            return "string" == typeof t;
          },
          iN: function (t) {
            return "number" == typeof t;
          },
          iF: function (t) {
            return "function" == typeof t;
          },
          iBI: function (t) {
            return t instanceof X;
          },
          iB: function (t) {
            return t instanceof R;
          },
          isI: function (t) {
            return O.iO(t) && O.iN(t.length);
          },
          DM: function (t) {
            return t.nodeName && 1 === t.nodeType;
          },
          dI: function (t) {
            return "INPUT" === (t = t.nodeName) || "TEXTAREA" === t || "SELECT" === t;
          },
          dR: function (t) {
            return "radio" === t.type;
          },
          dC: function (t) {
            return "checkbox" === t.type;
          },
          eC: function (t) {
            return t instanceof NodeList || t instanceof HTMLCollection || window.jQuery && t instanceof jQuery;
          },
          eAS: function (t) {
            var e = t[0].type;
            return [].filter.call(t, function (t) {
              return t.type === e;
            }).length === t.length;
          },
          dN: function (t) {
            return O.DM(t) || t === window || t === document;
          }
        },
            M = function (t, e, i) {
          var s;
          return (s = f(t, e)) ? (i && (s.configurable = !0), s) : (t = Object.getPrototypeOf(t)) ? M(t, e, !0) : void 0;
        },
            I = function (t, e, i) {
          var s;
          if (t.OD || (t.OD = M(e, t.pr)), i) n.forEach(function (i) {
            return a(e, i, {
              configurable: !0,
              value: function () {
                var s = Array.prototype[i].apply(e, arguments);
                return t.uAS(t), s;
              }
            });
          });else if ("Proxy" === t.type) {
            var h = t.oR = t.value;

            if (t.value = {
              result: null,
              args: null
            }, O.iF(h)) {
              var o = [].slice,
                  u = s = function () {
                var i = o.call(arguments);
                return t.value.args = i = t.tfS ? t.tfS(i) : i, t.value.result = i = h.apply(e, i), t.uAS(t), i;
              };

              a(e, t.pr, {
                configurable: t.isL = !0,
                get: function () {
                  return u;
                },
                set: function (e) {
                  O.iF(e) ? e !== h && (e !== s && (h = t.oR = e), u !== s && (u = s)) : u = e;
                }
              });
            }
          } else if (!(D(t.type, "DOM") || t.object === window && D(v, t.pr))) {
            (i = t.OD || r).get && (t.OG = i.get.bind(e)), i.set && (t.OS = i.set.bind(e));
            var c = (c = i.configurable) && e.constructor !== CSSStyleDeclaration;

            if (d && t.DM && t.pr in e.cloneNode(!1) && (t.OD = c = !1, t.isL = !0, t.OG = function () {
              return t.object[t.pr];
            }, t.OS = function (e) {
              return t.object[t.pr] = e;
            }), c) {
              c = "Array" === t.type;
              var f = !t.OS && !c;
              a(e, t.pr, {
                configurable: t.isL = !0,
                enumerable: i.enumerable,
                get: t.OG || function () {
                  return t.value;
                },
                set: function (e) {
                  t.sV(e, t, f);
                }
              }), c && I(t, e[t.pr], !0);
            }
          }
        },
            j = function (t, e, i) {
          if (i) {
            var s = [];

            for (t = 0, i = n.length; t < i; t++) {
              var r = n[t];
              s.push(delete e[r]);
            }

            return s;
          }

          return (i = t.OD).set || i.get || (i.value = t.oR || t.value), a(e, t.pr, i);
        },
            S = function (t) {
          var e,
              i = y();

          for (e in t) i[e] = t[e];

          return i;
        },
            E = function (t, e) {
          var i,
              s = Object.keys(e),
              n = 0;

          for (i = s.length; n < i; n++) {
            var r = s[n];
            t[r] = e[r];
          }
        },
            P = {
          get: function (t, e, i, s) {
            return e ? h[t._sb_ID] : s && t[0]._sb_map && (e = h[t[0]._sb_map[i]]).gB ? e.gB : t._sb_map && t._sb_map[i] ? h[t._sb_map[i]] : void 0;
          },
          set: function (t, e) {
            if (e) a(t.object, "_sb_ID", {
              configurable: !0,
              value: t.ID
            });else {
              var i = t.se;
              t.object._sb_map ? t.object._sb_map[i] = t.ID : (e = {}, e[i] = t.ID, a(t.object, "_sb_map", {
                configurable: !0,
                value: e
              }));
            }
          }
        },
            V,
            N = /[.*+?^${}()|[\]\\]/g,
            A = V = null,
            C = function () {
          var t = u.placeholder[0].replace(N, "\\$&"),
              e = u.placeholder[1].replace(N, "\\$&"),
              i = "[^" + e + "]+";
          A = new RegExp(t + "(" + i + ")" + e, "g"), V = new RegExp("" + t + i + e, "g");
        };

        C();

        var x = function (t, e, i) {
          var s,
              n,
              r = "",
              h = s = 0;

          for (n = t.length; s < n; h = ++s) r += t[h], i[h] && (r += e[i[h]]);

          return r;
        },
            k = function (t, e, i) {
          null == t[i] && (t[i] = []), t[i].push(e);
        },
            B = function (t, e) {
          var i,
              s,
              n,
              r = 0;

          for (s = (t = Array.prototype.slice.call(t.childNodes)).length; r < s; r++) {
            var h = t[r];
            if (3 !== h.nodeType) B(h, e);else if (h.textContent.match(V)) {
              var o = h.textContent.split(A);
              if (3 === o.length && "" === o[0] + o[2]) k(e, h, o[1]);else {
                var u = document.createDocumentFragment(),
                    c = i = 0;

                for (n = o.length; i < n; c = ++i) {
                  var a = o[c],
                      f = u.appendChild(document.createTextNode(a));
                  c % 2 && k(e, f, a);
                }

                h.parentNode.replaceChild(u, h);
              }
            }
          }
        },
            F = function (t) {
          throw Error("SimplyBind: " + (T[t] || t));
        },
            G = function (t, e) {
          u.silent || (e = L(e), t = T[t], console.warn("SimplyBind: " + t + "\n\n" + e));
        },
            w = function (t) {
          F("Invalid argument/s (" + t + ")");
        },
            L = function (t) {
          return (Error().stack || "").split("\n").slice(t + 3).join("\n");
        },
            T = {
          erIP: "SimplyBind() and .to() only accept a function, an array, a bound object, a string, or a number.",
          erFN: "Only functions are allowed for .transform/.condition/All()",
          erEV: "Invalid argument number in .ofEvent()",
          emptyList: "Empty collection provided",
          erOD: "You can only pass a single DOM element to a binding",
          erMX: "'checked' of Mixed list of element cannot be bound"
        },
            H = function (t, e, i, s, n) {
          return (t || 0 === t) && (O.iS(t) || O.iN(t) || O.iF(t) || t instanceof Array) || O.iBI(t) || F("erIP"), !O.iO(t) || t instanceof Array ? (e = new X(e), e.so = i, e.IS = s, e.cC = n, t = O.iF(t) ? e.sS(t, !0) : e.sP(t)) : t = n ? n(t) : t.sC(), t;
        };

        H.version = "1.15.8", H.settings = u, H.defaultOptions = c, H.unBindAll = function (t, e) {
          var i;

          if (t && (O.iO(t) || O.iF(t))) {
            O.isI(t) && !t._sb_ID && t[0] && O.DM(t[0]) && (t = t[0]);
            var s = t._sb_map;
            if (t._sb_ID && h[t._sb_ID].rAS(e), s) for (i in s) t = s[i], h[t].rAS(e);
          }
        };

        var R = function (t, e, i) {
          return E(this, i), this.oD = this.so ? this.options : c, this.type = e, this.object = t, this.ID = g(), this.subs = [], this.sM = y(), this.pM = y(), this.atEV = [], "Proxy" === this.type && (this.sV = b), this.mC && (this.cH = y(), this.object.forEach(function (t) {
            return function (e) {
              var i = t.cH[e.value] = H("checked").of(e)._;

              i.aS(t), i.sM[t.ID].tF = function () {
                return i;
              }, i.gB = t;
            };
          }(this))), "Event" === this.type || "Func" === this.type && this.IS || ("Pholder" === this.type ? (e = this.de && !D(this.de, "multi") ? this.de + ":" + this.pr : this.pr, (t = this.pB = H(e).of(t)._).sPH(), this.value = t.pVL[this.Ph], t.txN && (this.txN = t.txN[this.Ph])) : (this.value = t = this.fDV(), "ObjectProp" !== this.type || O.iD(t) || f(this.object, this.pr) || (this.object[this.pr] = t), I(this, this.object))), this.aEV(), h[this.ID] = this;
        };

        R.prototype = {
          aS: function (t, e, i, s) {
            var n;

            if (t.isMulti) {
              var r = t.bindings;

              for (t = 0, n = r.length; t < n; t++) {
                var h = r[t];
                this.aS(h, e, i, s);
              }
            } else if (this.sM[t.ID]) var o = !0;else t.pM[this.ID] = this, this.subs.unshift(t), (n = this.sM[t.ID] = y()).uO = i, n.opts = S(e), (s || "Event" === this.type || "Proxy" === this.type || "Array" === this.type) && (n.opts.updateEvenIfSame = !0), n.VR = "Func" === t.type ? "ps" : "value";

            return o;
          },
          rS: function (t, e) {
            var i;

            if (t.isMulti) {
              var s = t.bindings;

              for (t = 0, i = s.length; t < i; t++) {
                var n = s[t];
                this.rS(n, e);
              }
            } else this.sM[t.ID] && (this.subs.splice(this.subs.indexOf(t), 1), delete this.sM[t.ID], delete t.pM[this.ID]), e && (t.rS(this), delete this.pM[t.ID]);

            0 === this.subs.length && 0 === Object.keys(this.pM).length && this.DES();
          },
          rAS: function (t) {
            var e,
                i = this.subs.slice(),
                s = 0;

            for (e = i.length; s < e; s++) {
              var n = i[s];
              this.rS(n, t);
            }
          },
          DES: function () {
            var t;

            if (delete h[this.ID], this.rPI(), "Event" === this.type) {
              var e = this.atEV,
                  i = 0;

              for (t = e.length; i < t; i++) {
                var s = e[i];
                this.urEVE(s);
              }
            } else "Func" === this.type && delete this.object._sb_ID;

            this.isL && this.OD && j(this, this.object), "Array" === this.type && j(this, this.value, !0), this.object._sb_map && (delete this.object._sb_map[this.se], 0 === Object.keys(this.object._sb_map).length && delete this.object._sb_map);
          },
          fDV: function () {
            var t,
                e = this.type;

            switch (!1) {
              case "Func" !== e:
                return this.object();

              case "DOMAttr" !== e:
                return this.object.getAttribute(this.pr) || "";

              case !this.mC:
                var i = [],
                    s = this.cH;

                for (t in s) if (s[t].object.checked) {
                  if ("DOMRadio" === e) return t;
                  i.push(t);
                }

                return i;

              default:
                return this.object[this.pr];
            }
          },
          sV: function (t, e, i, s) {
            if (e || (e = this), this.tfS && (t = this.tfS(t)), !i) switch (this.type) {
              case "ObjectProp":
                if (this.isL) {
                  if (this.dI) {
                    if (s) {
                      if (t !== this.OG()) {
                        var n = this.object.selectionStart;
                        this.OS(t), n && this.object.setSelectionRange(n, n);
                      }
                    } else this.OS(t), u.dispatchEvents && this.object.dispatchEvent(p());
                  } else this.OS && this.OS(t);
                } else t !== this.value && (this.object[this.pr] = t);
                break;

              case "Pholder":
                if (s = this.pB, s.pVL[this.Ph] = t, n = x(s.pCT, s.pVL, s.pIM), this.txN && t !== this.value) {
                  var r = this.txN,
                      h = 0;

                  for (i = r.length; h < i; h++) {
                    var o = r[h];
                    o.textContent = t;
                  }
                }

                "textContent" !== this.pr && s.sV(n, e);
                break;

              case "Array":
                t !== this.value && (O.iA(t) || (t = Array.prototype.concat(t)), j(this, this.value, !0), I(this, t = t.slice(), !0), this.OS && this.OS(t));
                break;

              case "Func":
                n = this.ps, this.ps = t, t = this.object(t, n);
                break;

              case "Event":
                this.iE = !0, this.eE(t), this.iE = !1;
                break;

              case "DOMRadio":
                if (this.mC) {
                  if (s = O.iB(t) ? t : this.cH[t]) for (h in t = s.object.value, n = this.cH) (i = n[h]).sV(i.ID === s.ID, e);else t = this.value;
                } else {
                  if ((t = !!t) === this.value) return;
                  this.object.checked !== t && (this.object.checked = t), t && u.dispatchEvents && this.object.dispatchEvent(p());
                }
                break;

              case "DOMCheckbox":
                if (this.mC) {
                  for (h = !O.iB(t), i = s = 0, r = (t = [].concat(t)).length; s < r; i = ++s) o = t[i], t[i] = O.iB(o) ? o : this.cH[o];

                  r = [], o = this.cH;

                  for (n in o) i = o[n], s = h ? D(t, i) : i.value, i.sV(s, e), s && r.push(n);

                  t = r;
                } else {
                  if ((t = !!t) === this.value) return;
                  this.object.checked !== t && (this.object.checked = t, u.dispatchEvents && this.object.dispatchEvent(p()));
                }

                break;

              case "DOMAttr":
                this.object.setAttribute(this.pr, t);
            }
            this.value = t, this.uAS(e);
          },
          uAS: function (t) {
            var e, i;
            if (i = (e = this.subs).length) for (; i--;) this.uS(e[i], t);
          },
          uS: function (t, e, i) {
            var s;

            if (!(e === t || e !== this && e.sM[t.ID])) {
              var n = this.sM[t.ID];

              if (!n.dL || !n.dL[e.ID]) {
                if (n.opts.throttle) {
                  var r = (i = +new Date()) - n.lU;
                  if (r < n.opts.throttle) return clearTimeout(n.uT), n.uT = setTimeout(function (i) {
                    return function () {
                      if (i.sM[t.ID]) return i.uS(t, e);
                    };
                  }(this), n.opts.throttle - r);
                  n.lU = i;
                } else if (n.opts.delay && !i) return setTimeout(function (i) {
                  return function () {
                    if (i.sM[t.ID]) return i.uS(t, e, !0);
                  };
                }(this), n.opts.delay);

                i = "Array" === this.type && n.opts.sendArrayCopies ? this.value.slice() : this.value, r = t[n.VR], (i = (s = n.tF) ? s(i, r, t.object) : i) === r && !n.opts.updateEvenIfSame || n.cN && !n.cN(i, r, t.object) || (n.opts.promiseTransforms && i && O.iF(i.then) ? i.then(function (i) {
                  t.sV(i, e);
                }) : t.sV(i, e), n.uO && this.rS(t));
              }
            }
          },
          aM: function (t, e, i, s) {
            var n, r;

            if (O.iF(i)) {
              var h = 0;

              for (r = e.length; h < r; h++) {
                var o = e[h],
                    u = o._ || o;
                u.isMulti ? this.aM(t, u.bindings, i, s) : (o = this.sM[u.ID], o[t] = i, s = s && !o.uO, this.pM[u.ID] && ((n = u.sM[this.ID])[t] || (n[t] = i)), !s && "Func" !== this.type || "tF" !== t || this.uS(u, this));
              }

              return !0;
            }

            return G("erFN", 2);
          },
          ss: function (t, e) {
            this.tfS = t, e && this.sV(this.value);
          },
          aD: function (t, e) {
            var i;
            (null != (i = this.sM[t.ID]).dL ? i.dL : i.dL = y())[e.ID] = 1;
          },
          sPH: function () {
            if (!this.pVL) {
              if (this.pVL = y(), this.pIM = y(), this.pCT = [], O.iS(this.value)) {
                this.pCT = this.value.split(V);
                var t = 0;
                this.value = this.value.replace(A, function (e) {
                  return function (i, s) {
                    return e.pIM[t++] = s, e.pVL[s] = s;
                  };
                }(this));
              }

              this.DM && "textContent" === this.pr && B(this.object, this.txN = y());
            }
          },
          aPI: function (t) {
            if ("Event" !== this.type) return this.rPI(), this.PI = setInterval(function (t) {
              return function () {
                var e = t.fDV();
                return t.sV(e, t, !0);
              };
            }(this), t);
          },
          rPI: function () {
            return clearInterval(this.PI), this.PI = null;
          },
          aUV: function (t, e) {
            this.object.addEventListener(t, function (t) {
              return function (i) {
                i._sb || (i = t.tfS && t.dI, t.sV(t.object[e], null, !i, !0));
              };
            }(this), !1);
          },
          aEV: function () {
            this.evN ? this.rEVE(this.evN) : this.dI ? (this.aUV("input", "value"), this.aUV("change", "value")) : this.mC || "DOMRadio" !== this.type && "DOMCheckbox" !== this.type || this.aUV("change", "checked");
          },
          rEVE: function (t) {
            this.atEV.push(t), this.evH || (this.evH = U.bind(this)), this.object[this.eM.listen](t, this.evH);
          },
          urEVE: function (t) {
            this.atEV.splice(this.atEV.indexOf(t), 1), this.object[this.eM.remove](t, this.evH);
          },
          eE: function (t) {
            var e = this.evN;
            "dispatchEvent" === this.eM.emit && (this.evO || (this.evO = document.createEvent("Event"), this.evO.initEvent(this.evN, !0, !0)), this.evO.bindingData = t, e = this.evO), this.object[this.eM.emit](e, t);
          }
        };

        var U = function () {
          this.iE || this.sV(arguments[this.pr], null, !0);
        },
            X = function (t, e) {
          var i;
          if (e) E(this, e), this.sG = 1;else for (i in this.sG = 0, this.subs = [], this.oP = t || (t = {}), this.options = {}, c) this.options[i] = null != t[i] ? t[i] : c[i];
          return this;
        };

        t = {
          sC: function () {
            return new X(null, this);
          },
          dM: function (t) {
            return this._ = t, Object.defineProperties(this, {
              value: {
                get: function () {
                  return t.value;
                }
              },
              original: {
                get: function () {
                  return t.objects || t.object;
                }
              },
              subscribers: {
                get: function () {
                  return t.subs.slice().map(function (t) {
                    return t.object;
                  });
                }
              }
            });
          },
          createBP: function (t, e, i, s) {
            var n;
            return this.object = t, (n = P.get(t, s, this.se, this.mC)) ? this.patchCachedBP(n) : (t = new R(t, e, i), P.set(t, s), t);
          },
          patchCachedBP: function (t) {
            var e;

            if ("ObjectProp" !== t.type || this.pr in this.object || I(t, this.object), this.so) {
              var i = this.oP;

              for (n in i) {
                var s = i[n];
                t.oD[n] = s;
              }
            }

            var n = t.oD;

            for (e in n) s = n[e], this.options[e] = O.iD(this.oP[e]) ? this.oP[e] : s;

            return t;
          },
          sP: function (t) {
            if (O.iN(t) && (t = t.toString()), this.se = this.pr = t, !this.options.simpleSelector) {
              if (D(t, ":")) {
                var e = t.split(":");
                this.de = e.slice(0, -1).join(":"), this.pr = e[e.length - 1];
              }

              D(t, ".") && (e = this.pr.split("."), this.pr = e[0], this.Ph = e.slice(1).join(".")), D(this.de, "event") && (D(t, "#") ? (e = this.pr.split("#"), this.evN = e[0], this.pr = e[1]) : (this.evN = this.pr, this.pr = 0), isNaN(parseInt(this.pr)) && G("erEV", 1));
            }

            return this;
          },
          sS: function (t, e) {
            this.sG = 1;
            var i,
                s = (i = t !== window && O.isI(t) && !t.nodeType) ? t[0] : t;

            if (s) {
              if (this.DM = O.DM(s)) {
                if ("checked" === this.pr) var n = s && O.dR(s),
                    r = !n && s && O.dC(s);else "value" === this.pr && (this.dI = O.dI(s));
                if (i && !D(this.de, "multi")) if (1 === t.length) t = t[0];else {
                  if ((n || r) && !O.eAS(t)) return G("erMX", 3);
                  n || r ? (this.mC = !0, t = [].slice.call(t)) : (t = t[0], G("erOD", 3));
                }
              }
            } else i && O.eC(t) && F("emptyList");

            switch (!1) {
              case !e:
                r = "Func";
                break;

              case !this.Ph:
                r = "Pholder";
                break;

              case !(D(this.de, "array") && O.iA(t[this.pr])):
                r = "Array";
                break;

              case !D(this.de, "event"):
                r = "Event", this.eM = {
                  listen: this.oP.listenMethod,
                  remove: this.oP.removeMethod,
                  emit: this.oP.emitMethod
                }, t[this.eM.listen] || (this.eM.listen = O.dN(t) ? "addEventListener" : "on"), t[this.eM.remove] || (this.eM.remove = O.dN(t) ? "removeEventListener" : "removeListener"), t[this.eM.emit] || (this.eM.emit = O.dN(t) ? "dispatchEvent" : "emit");
                break;

              case !D(this.de, "func"):
                r = "Proxy";
                break;

              case !n:
                r = "DOMRadio";
                break;

              case !r:
                r = "DOMCheckbox";
                break;

              case !D(this.de, "attr"):
                r = "DOMAttr";
                break;

              default:
                r = "ObjectProp";
            }

            return D(this.de, "multi") ? (t.length || F("emptyList"), this.dM(new nt(this, t, r))) : this.dM(this.createBP(t, r, this, e)), D(this._.type, "Event") || D(this._.type, "Proxy") ? this.options.updateOnBind = !1 : D(this._.type, "Func") && (this.options.updateOnBind = !0), this.cC ? this.cC(this) : this;
          },
          aP: function (t) {
            var e;
            t.sG = 2, t.subs.push(this);

            var i = t._.aS(this._, t.options, t.uO);

            if (t.uO) delete t.uO;else if (t.options.updateOnBind && !i) if (this._.isMulti) {
              var s = this._.bindings,
                  n = 0;

              for (e = s.length; n < e; n++) i = s[n], t._.uS(i, t._);
            } else t._.uS(this._, t._);
          }
        }, X.prototype = Object.create(t, {
          of: {
            get: function () {
              if (!this.sG) return W;
            }
          },
          set: {
            get: function () {
              if (this.sG) return $;
            }
          },
          chainTo: {
            get: function () {
              if (2 === this.sG) return Y;
            }
          },
          transformSelf: {
            get: function () {
              if (1 === this.sG) return Q;
            }
          },
          transform: {
            get: function () {
              if (2 === this.sG) return q;
            }
          },
          transformAll: {
            get: function () {
              if (2 === this.sG) return z;
            }
          },
          condition: {
            get: function () {
              if (2 === this.sG) return J;
            }
          },
          conditionAll: {
            get: function () {
              if (2 === this.sG) return K;
            }
          },
          bothWays: {
            get: function () {
              if (2 === this.sG) return Z;
            }
          },
          unBind: {
            get: function () {
              if (2 === this.sG) return tt;
            }
          },
          pollEvery: {
            get: function () {
              if (this.sG) return et;
            }
          },
          stopPolling: {
            get: function () {
              if (this.sG) return it;
            }
          },
          setOption: {
            get: function () {
              if (2 === this.sG) return st;
            }
          },
          disallowFrom: {
            get: function () {
              var t;
              if (2 === this.sG && (t = this)) return _(!1, function (e) {
                return t._.aD(t.subs[t.subs.length - 1]._, e._), t;
              });
            }
          },
          updateOn: {
            get: function () {
              var t;
              if (this.sG && (t = this)) return _(!1, function (e) {
                return e._ !== t._ && (t._.pM[e._.ID] = e._, e._.aS(m(t._, !0), e.options, !1, !0)), t;
              });
            }
          },
          removeUpdater: {
            get: function () {
              var t, e;
              if (this.sG && (e = this) && (t = this._.sU)) return _(!1, function (i) {
                i._.sM[t.ID] && (delete e._.pM[i._.ID], i._.rS(t));
              });
            }
          },
          to: {
            get: function () {
              var t;
              if (1 === this.sG && (t = this)) return _(!0, function (e) {
                return e._ !== t._ && e.aP(t), t;
              });
            }
          },
          and: {
            get: function () {
              var t = this.sC();
              if (2 === this.sG) return t;

              if (1 === this.sG) {
                if (!t._.isMulti) {
                  var e = t._;
                  t._ = t._ = new nt(t), t._.addBP(e);
                }

                return _(!1, function (e) {
                  return t._.addBP(e._), t;
                });
              }
            }
          },
          once: {
            get: function () {
              if (1 === this.sG) {
                var t = this.sC();
                return t.uO = !0, t;
              }
            }
          },
          update: {
            get: function () {
              return this.set;
            }
          },
          twoWay: {
            get: function () {
              return this.bothWays;
            }
          },
          pipe: {
            get: function () {
              return this.chainTo;
            }
          }
        });

        var W = function (t) {
          return O.iO(t) || O.iF(t) || w(t), O.iBI(t) && (t = t.object), this.sG = 1, this.sS(t);
        },
            Y = function (t, e, i) {
          return H(this.subs[this.subs.length - 1]).to(t, e, i);
        },
            $ = function (t) {
          return this._.sV(t), this;
        },
            Q = function (t) {
          return O.iF(t) ? this._.ss(t, this.options.updateOnBind) : G("erFN", 1), this;
        },
            q = function (t) {
          return this._.aM("tF", this.subs.slice(-1), t, this.options.updateOnBind), this;
        },
            z = function (t) {
          return this._.aM("tF", this.subs, t, this.options.updateOnBind), this;
        },
            J = function (t) {
          return this._.aM("cN", this.subs.slice(-1), t), this;
        },
            K = function (t) {
          return this._.aM("cN", this.subs, t), this;
        },
            Z = function (t) {
          var e,
              i = this.subs[this.subs.length - 1],
              s = i._,
              n = this._.isMulti ? this._.bindings : [this._];

          for (s.aS(this._, i.options), i = 0, e = n.length; i < e; i++) {
            var r = n[i],
                h = r.sM[s.ID].tF;
            r = r.sM[s.ID].cN, (h || t) && (h = O.iF(t) ? t : h) && !1 !== t && (s.sM[this._.ID].tF = h), r && (s.sM[this._.ID].cN = r);
          }

          return this;
        },
            tt = function (t) {
          var e,
              i = this.subs,
              s = 0;

          for (e = i.length; s < e; s++) {
            var n = i[s];

            this._.rS(n._, t);
          }

          return this;
        },
            et = function (t) {
          return this._.aPI(t), this;
        },
            it = function () {
          return this._.rPI(), this;
        },
            st = function (t, e) {
          return this._.sM[this.subs[this.subs.length - 1]._.ID].opts[t] = e, this;
        },
            nt = function (t, e, i) {
          var s, n;
          if (t.se = t.se.slice(6), E(this, this.In = t), this.isMulti = !0, this.bindings = s = [], e) for (t = 0, n = e.length; t < n; t++) {
            var r = e[t];
            this.addBP(r, i);
          }
          return Object.defineProperties(this, {
            type: {
              get: function () {
                return s.map(function (t) {
                  return t.type;
                });
              }
            },
            value: {
              get: function () {
                return s.map(function (t) {
                  return t.value;
                });
              }
            }
          });
        },
            rt = nt.prototype = Object.create(t);

        return Object.keys(R.prototype).forEach(function (t) {
          return rt[t] = function (e, i, s, n) {
            var r,
                h = this.bindings,
                o = 0;

            for (r = h.length; o < r; o++) {
              var u = h[o];
              "uS" === t && (i = u), u[t](e, i, s, n);
            }
          };
        }), rt.addBP = function (t, e) {
          this.bindings.push(e ? this.createBP(t, e, this.In) : t);
        }, e.exports = H, e.exports;
      }
    }, this), "function" == typeof undefined ) ;else {
      if ( !module.exports) return this.simplybind = t(0);
      module.exports = t(0);
    }
  }).call(commonjsGlobal, null);
});var REGEX = {
  any: /./,
  whiteSpace: /\s+/,
  numeric: /^\d$/,
  letter: /^[a-zA-Z]$/,
  // alphanumeric: /[\da-zA-Z]/
  widenumeric: /^[0-9\!#\$\%\*\+\/\=\?\^\{\|\}\(\)\~\-\.]$/,
  alphanumeric: /^[0-9A-Za-z\!#\$\%\&\'\*\+\/\=\?\^\_\`\{\|\}\(\)\~\-\ ]$/,
  email: /^[\w\-\.]+@[\w\-\.]+\.[A-Za-z]{2,10}$/
};var noop = function () {};

var includes$2 = function (target, item) {
  return target && target.indexOf(item) !== -1;
};

var repeat = function (string, count) {
  var i;
  return function () {
    var j, ref, results1;
    results1 = [];

    for (i = j = 1, ref = count; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
      results1.push(string);
    }

    return results1;
  }().join('');
};

var removeItem$1 = function (target, item) {
  var itemIndex;
  itemIndex = target.indexOf(item);

  if (itemIndex !== -1) {
    return target.splice(itemIndex, 1);
  }
};

var insertAfter$1 = function (target, item, newItem) {
  var itemIndex;
  itemIndex = target.indexOf(item);

  if (itemIndex !== -1) {
    return target.splice(itemIndex, 0, newItem);
  }
};

var hexToRGBA = function (hex, alpha) {
  var B, G, R;

  if (hex[0] === '#') {
    hex = hex.slice(1);
  }

  R = parseInt(hex.slice(0, 2), 16);
  G = parseInt(hex.slice(2, 4), 16);
  B = parseInt(hex.slice(4, 6), 16);
  return `rgba(${R}, ${G}, ${B}, ${alpha})`;
};

var defaultColor = function (color, defaultColor) {
  if (color === 'transparent' || !color) {
    return defaultColor;
  } else {
    return color;
  }
};

var calcPadding = function (desiredHeight, fontSize) {
  return Math.ceil((desiredHeight - fontSize * 1.231) / 2);
};

var unlockScroll = function (excludedEl) {
  window._isLocked = false;
  return quickdom(window).off('wheel.lock');
};

var lockScroll = function (excludedEl) {
  if (!window._isLocked) {
    window._isLocked = true;
    return quickdom(window).on('wheel.lock', function (event) {
      if (event.target === excludedEl.raw || quickdom(event.target).parentMatching(function (parent) {
        return parent === excludedEl;
      })) {
        if (event.wheelDelta > 0 && excludedEl.raw.scrollTop === 0) {
          return event.preventDefault();
        }

        if (event.wheelDelta < 0 && excludedEl.raw.scrollHeight - excludedEl.raw.scrollTop === excludedEl.raw.clientHeight) {
          return event.preventDefault();
        }
      } else {
        return event.preventDefault();
      }
    });
  }
};

var fuzzyMatch = function (needle, haystack, caseSensitive) {
  var hI, hLength, matchedCount, nI, nLength, needleChar;
  nLength = needle.length;
  hLength = haystack.length;

  if (!caseSensitive) {
    needle = needle.toUpperCase();
    haystack = haystack.toUpperCase();
  }

  if (nLength > hLength) {
    return false;
  }

  if (nLength === hLength) {
    return needle === haystack;
  }

  nI = hI = matchedCount = 0;

  while (nI < nLength) {
    needleChar = needle[nI++];

    while (hI < hLength) {
      if (haystack[hI++] === needleChar) {
        matchedCount++;
        break;
      }
    }
  }

  return matchedCount === nLength;
};

var startsWith = function (needle, haystack, caseSensitive) {
  var i;

  if (!caseSensitive) {
    needle = needle.toUpperCase();
    haystack = haystack.toUpperCase();
  }

  if (needle.length > haystack.length) {
    return false;
  }

  if (needle.length === haystack.length) {
    return needle === haystack;
  }

  i = -1;

  while (needle[++i]) {
    if (needle[i] !== haystack[i]) {
      return false;
    }
  }

  return true;
};

var getIndexOfFirstDiff = function (sourceString, compareString) {
  var currentPos, maxLength;
  currentPos = 0;
  maxLength = Math.max(sourceString.length, compareString.length);

  while (currentPos < maxLength) {
    if (sourceString[currentPos] !== compareString[currentPos]) {
      return currentPos;
    }

    currentPos++;
  }

  return null;
};

var parseCssShorthandValue = function (string) {
  var result, values;
  values = string.split(REGEX.whiteSpace).map(parseFloat);
  result = {};

  switch (values.length) {
    case 1:
      result.top = result.right = result.bottom = result.left = values[0];
      break;

    case 2:
      result.top = result.bottom = values[0];
      result.right = result.left = values[1];
      break;

    case 3:
      result.top = values[0];
      result.right = result.left = values[1];
      result.bottom = values[2];
      break;

    case 4:
      result.top = values[0];
      result.right = values[1];
      result.bottom = values[2];
      result.left = values[3];
  }

  return result;
};

var shorthandSideValue = function (value, side) {
  var values;

  switch (typeof value) {
    case 'number':
      return value;

    case 'string':
      values = parseCssShorthandValue(value);
      return values[side];

    default:
      return 0;
  }
};

var updateShorthandValue = function (value, side, newValue) {
  var values;
  values = parseCssShorthandValue('' + (value || 0));

  switch (side) {
    case 'top':
      values.top += newValue;
      break;

    case 'right':
      values.right += newValue;
      break;

    case 'bottom':
      values.bottom += newValue;
      break;

    case 'left':
      values.left += newValue;
      break;

    default:
      Object.keys(values).forEach(function (side) {
        return values[side] += newValue;
      });
  }

  return `${values.top}px ${values.right}px ${values.bottom}px ${values.left}px`;
};

var inheritProto = function (child, parent, keys) {
  var j, key, len, ref;
  ref = Object.getOwnPropertyNames(parent.prototype);

  for (j = 0, len = ref.length; j < len; j++) {
    key = ref[j];

    if (keys && !keys.includes(key)) {
      continue;
    }

    if (!child.prototype[key]) {
      child.prototype[key] = parent.prototype[key];
    }
  }

  return child;
};

var isMobile = function () {
  var REGEX;
  REGEX = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series[46]0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i;
  return REGEX.test(typeof navigator !== "undefined" && navigator !== null ? navigator.userAgent : void 0);
};var REQUIRED_FIELD_METHODS = ['_getValue', '_setValue', '_validate'];var fastdom = createCommonjsModule(function (module) {
  !function (win) {
    /**
     * Mini logger
     *
     * @return {Function}
     */

    var debug =  function () {};
    /**
     * Normalized rAF
     *
     * @type {Function}
     */

    var raf = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.msRequestAnimationFrame || function (cb) {
      return setTimeout(cb, 16);
    };
    /**
     * Initialize a `FastDom`.
     *
     * @constructor
     */


    function FastDom() {
      var self = this;
      self.reads = [];
      self.writes = [];
      self.raf = raf.bind(win); // test hook
    }

    FastDom.prototype = {
      constructor: FastDom,

      /**
       * Adds a job to the read batch and
       * schedules a new frame if need be.
       *
       * @param  {Function} fn
       * @param  {Object} ctx the context to be bound to `fn` (optional).
       * @public
       */
      measure: function (fn, ctx) {
        var task = !ctx ? fn : fn.bind(ctx);
        this.reads.push(task);
        scheduleFlush(this);
        return task;
      },

      /**
       * Adds a job to the
       * write batch and schedules
       * a new frame if need be.
       *
       * @param  {Function} fn
       * @param  {Object} ctx the context to be bound to `fn` (optional).
       * @public
       */
      mutate: function (fn, ctx) {
        var task = !ctx ? fn : fn.bind(ctx);
        this.writes.push(task);
        scheduleFlush(this);
        return task;
      },

      /**
       * Clears a scheduled 'read' or 'write' task.
       *
       * @param {Object} task
       * @return {Boolean} success
       * @public
       */
      clear: function (task) {
        return remove(this.reads, task) || remove(this.writes, task);
      },

      /**
       * Extend this FastDom with some
       * custom functionality.
       *
       * Because fastdom must *always* be a
       * singleton, we're actually extending
       * the fastdom instance. This means tasks
       * scheduled by an extension still enter
       * fastdom's global task queue.
       *
       * The 'super' instance can be accessed
       * from `this.fastdom`.
       *
       * @example
       *
       * var myFastdom = fastdom.extend({
       *   initialize: function() {
       *     // runs on creation
       *   },
       *
       *   // override a method
       *   measure: function(fn) {
       *     // do extra stuff ...
       *
       *     // then call the original
       *     return this.fastdom.measure(fn);
       *   },
       *
       *   ...
       * });
       *
       * @param  {Object} props  properties to mixin
       * @return {FastDom}
       */
      extend: function (props) {
        if (typeof props != 'object') throw new Error('expected object');
        var child = Object.create(this);
        mixin(child, props);
        child.fastdom = this; // run optional creation hook

        if (child.initialize) child.initialize();
        return child;
      },
      // override this with a function
      // to prevent Errors in console
      // when tasks throw
      catch: null
    };
    /**
     * Schedules a new read/write
     * batch if one isn't pending.
     *
     * @private
     */

    function scheduleFlush(fastdom) {
      if (!fastdom.scheduled) {
        fastdom.scheduled = true;
        fastdom.raf(flush.bind(null, fastdom));
      }
    }
    /**
     * Runs queued `read` and `write` tasks.
     *
     * Errors are caught and thrown by default.
     * If a `.catch` function has been defined
     * it is called instead.
     *
     * @private
     */


    function flush(fastdom) {
      var writes = fastdom.writes;
      var reads = fastdom.reads;
      var error;

      try {
        debug('flushing reads', reads.length);
        runTasks(reads);
        debug('flushing writes', writes.length);
        runTasks(writes);
      } catch (e) {
        error = e;
      }

      fastdom.scheduled = false; // If the batch errored we may still have tasks queued

      if (reads.length || writes.length) scheduleFlush(fastdom);

      if (error) {
        debug('task errored', error.message);
        if (fastdom.catch) fastdom.catch(error);else throw error;
      }
    }
    /**
     * We run this inside a try catch
     * so that if any jobs error, we
     * are able to recover and continue
     * to flush the batch until it's empty.
     *
     * @private
     */


    function runTasks(tasks) {
      var task;

      while (task = tasks.shift()) task();
    }
    /**
     * Remove an item from an Array.
     *
     * @param  {Array} array
     * @param  {*} item
     * @return {Boolean}
     */


    function remove(array, item) {
      var index = array.indexOf(item);
      return !!~index && !!array.splice(index, 1);
    }
    /**
     * Mixin own properties of source
     * object into the target.
     *
     * @param  {Object} target
     * @param  {Object} source
     */


    function mixin(target, source) {
      for (var key in source) {
        if (source.hasOwnProperty(key)) target[key] = source[key];
      }
    } // There should never be more than
    // one instance of `FastDom` in an app


    var exports = win.fastdom = win.fastdom || new FastDom(); // jshint ignore:line
    // Expose to CJS & AMD

    module.exports = exports;
  }(typeof window !== 'undefined' ? window : commonjsGlobal);
});var Condition;
Condition = class Condition {
  constructor(field1, settings, callback1) {
    var property, target;
    this.field = field1;
    this.settings = settings;
    this.callback = callback1;
    this.satisfied = false;
    this.value = this.settings.value;
    this.property = this.settings.property || '_value';

    if (this.settings.property === 'value') {
      this.property = '_value';
    }

    target = this.field.allFields[this.settings.target];

    if (target) {
      this.target = target;
    } else {
      return console.warn(`condition target not found for the provided ID '${this.settings.target}'`, this.field);
    }

    property = IS$1$1.array(this.target[this.property]) ? `array:${this.property}` : this.property;
    simplybind(property, {
      updateOnBind: false
    }).of(this.target).and('visible').of(this.target.state).to(this.callback);
    simplybind('satisfied', {
      updateOnBind: false
    }).of(this).to((newValue, oldValue) => {
      var base;

      if (oldValue != null) {
        return typeof (base = this.field).emit === "function" ? base.emit('conditionChange', this) : void 0;
      }
    });
  }

  test() {
    var comparison, comparisonOperators, passedComparisons, ref, targetValue;

    if (!((ref = this.target) != null ? ref.state.visible : void 0)) {
      return false;
    }

    comparison = function () {
      switch (false) {
        case !IS$1$1.objectPlain(this.value):
          return this.value;

        case !IS$1$1.regex(this.value):
          return {
            '$regex': this.value
          };

        case !(this.value === 'valid' && !this.settings.property || !IS$1$1.defined(this.value)):
          return 'valid';

        default:
          return {
            '$eq': this.value
          };
      }
    }.call(this);

    if (comparison === 'valid') {
      return this.target.validate();
    }

    targetValue = (() => {
      var nestedObject, propertyChain;

      if (this.property === '_value') {
        return this.target.value;
      }

      propertyChain = this.property.split('.');

      switch (false) {
        case propertyChain.length !== 1:
          return this.target[this.property];

        case !IS$1$1.defined(this.target[this.property]):
          return this.target[this.property];

        default:
          nestedObject = this.target;

          while (IS$1$1.object(nestedObject)) {
            nestedObject = nestedObject[propertyChain.pop()];
          }

          return nestedObject;
      }
    })();

    comparisonOperators = Object.keys(comparison);
    passedComparisons = comparisonOperators.filter(function (operator) {
      var seekedValue;
      seekedValue = comparison[operator];

      switch (operator) {
        case '$eq':
          return targetValue === seekedValue;

        case '$ne':
          return targetValue !== seekedValue;

        case '$gt':
          return targetValue > seekedValue;

        case '$gte':
          return targetValue >= seekedValue;

        case '$lt':
          return targetValue < seekedValue;

        case '$lte':
          return targetValue <= seekedValue;

        case '$ct':
          return helpers.includes(targetValue, seekedValue);

        case '$nct':
          return !helpers.includes(targetValue, seekedValue);

        case '$regex':
          return seekedValue.test(targetValue);

        case '$nregex':
          return !seekedValue.test(targetValue);

        case '$mask':
          return helpers.testMask(targetValue, seekedValue);

        default:
          return false;
      }
    });
    return passedComparisons.length === comparisonOperators.length;
  }

  static validate(conditions) {
    var validConditions;

    if (conditions) {
      validConditions = conditions.filter(function (condition) {
        return condition.satisfied = condition.test();
      });
      return validConditions.length === conditions.length;
    }
  }

  static init(field, conditions, callback) {
    return setTimeout(() => {
      if (callback == null) {
        callback = () => {
          return field.validateConditions();
        };
      }

      field.conditions = conditions.map(function (condition) {
        return new Condition(field, condition, callback);
      });
      return callback();
    });
  }

};
var Condition$1 = Condition;var transformSettings = {
  conditions: function (conditions) {
    var results, target, value;

    if (IS$1$1.objectPlain(conditions)) {
      results = [];

      for (target in conditions) {
        value = conditions[target];
        results.push({
          target,
          value
        });
      }

      return results;
    } else if (IS$1$1.array(conditions)) {
      return conditions.map(function (item) {
        if (IS$1$1.string(item)) {
          return {
            target: item
          };
        } else {
          return item;
        }
      });
    }
  },
  choices: function (choices) {
    var label, results, value;

    if (IS$1$1.objectPlain(choices)) {
      results = [];

      for (label in choices) {
        value = choices[label];
        results.push({
          label,
          value
        });
      }

      return results;
    } else if (IS$1$1.array(choices)) {
      return choices.map(function (item) {
        if (!IS$1$1.objectPlain(item)) {
          return {
            label: item,
            value: item
          };
        } else {
          return item;
        }
      });
    }
  },
  validWhenRegex: function (regex) {
    if (IS$1$1.string(regex)) {
      return new RegExp(regex);
    } else {
      return regex;
    }
  }
};var globalDefaults = {
  fontFamily: 'system-ui, sans-serif',
  templates: {},
  events: null,
  label: false,
  error: '',
  help: '',
  required: false,
  disabled: false,
  defaultValue: null,
  width: '100%',
  mobileWidth: null,
  mobileThreshold: 736,
  border: 1,
  margin: null,
  padding: null,
  distance: null,
  inputPadding: 12,
  fontSize: 14,
  labelSize: null,
  icon: null,
  iconSize: 22,
  getter: null,
  setter: null,
  validator: null,
  clearErrorOnValid: true,
  makeRoomForHelp: true
};var Field, currentID;
currentID = 0;

Field = function () {
  class Field {
    constructor(settings, builder, settingOverrides, templateOverrides) {
      var ref, shallowSettings, transformSettings_;
      this.builder = builder;

      if (settingOverrides) {
        if (settingOverrides.globalDefaults) {
          this.globalDefaults = settingOverrides.globalDefaults;
        }

        if (settingOverrides[settings.type]) {
          this.defaults = settingOverrides[settings.type];
        }
      }

      if (templateOverrides && templateOverrides[settings.type]) {
        this.templates = templateOverrides[settings.type];
        this.template = templateOverrides[settings.type].default;
      }

      shallowSettings = this.shallowSettings ? Field.shallowSettings.concat(this.shallowSettings) : Field.shallowSettings;
      transformSettings_ = this.transformSettings ? Field.transformSettings.concat(this.transformSettings) : Field.transformSettings;
      this.settings = primaryBuilder$1.deep.clone.notDeep(shallowSettings).transform(transformSettings_)(this.globalDefaults, this.defaults, settings);
      this.ID = this.settings.ID || currentID++ + '';
      this.type = settings.type;
      this.name = settings.name;
      this.allFields = this.settings.fieldInstances || Field.instances;
      this._value = null;
      this._eventCallbacks = {};
      this.state = {
        valid: true,
        visible: true,
        focused: false,
        hovered: false,
        filled: false,
        interacted: false,
        isMobile: false,
        disabled: this.settings.disabled,
        margin: this.settings.margin,
        padding: this.settings.padding,
        width: this.settings.width,
        showLabel: this.settings.label,
        label: this.settings.label,
        showHelp: this.settings.help,
        help: this.settings.help,
        showError: false,
        error: this.settings.error
      };

      if (IS$1$1.defined(this.settings.placeholder)) {
        this.state.placeholder = this.settings.placeholder;
      }

      if (IS$1$1.number(this.settings.width) && this.settings.width <= 1) {
        this.state.width = `${this.settings.width * 100}%`;
      }

      if ((ref = this.settings.conditions) != null ? ref.length : void 0) {
        this.state.visible = false;
        Condition$1.init(this, this.settings.conditions);
      }

      if (this.allFields[this.ID]) {
        if (typeof console !== "undefined" && console !== null) {
          console.warn(`Duplicate field IDs found: '${this.ID}'`);
        }
      }

      this.allFields[this.ID] = this;
    }

    _constructorEnd() {
      var base, handler, ref, target;
      this.el.childf; //.field.on 'inserted', ()=> @emit('inserted')

      if (this.settings.ID) {
        this.el.raw.id = this.ID;
      }

      if (this.settings.value != null) {
        if ((base = this.settings).defaultValue == null) {
          base.defaultValue = this.settings.value;
        }
      }

      if (this.settings.defaultValue != null) {
        this.value = this.settings.multiple ? [].concat(this.settings.defaultValue) : this.settings.defaultValue;
      }

      simplybind('showError', {
        updateOnBind: false
      }).of(this.state).to('help').of(this.state).transform(show => {
        if (show && this.state.error && IS$1$1.string(this.state.error)) {
          return this.state.error;
        } else {
          return this.settings.help || this.state.help;
        }
      });
      simplybind('error', {
        updateOnBind: false
      }).of(this.state).to('help').of(this.state).condition(error => {
        return error && this.state.showError;
      });
      simplybind('help').of(this.state).to('html').of(this.el.child.help).and.to('showHelp').of(this.state);
      simplybind('label').of(this.state).to('text').of(this.el.child.label).and.to('showLabel').of(this.state);
      simplybind('margin').of(this.state).to(this.el.style.bind(this.el, 'margin'));
      simplybind('padding').of(this.state).to(this.el.style.bind(this.el, 'padding'));
      simplybind('showHelp').of(this.state).to((show, prevShow) => {
        var changeAmount;

        if (this.settings.makeRoomForHelp) {
          changeAmount = !!show === !!prevShow ? 0 : show ? 25 : prevShow ? -25 : void 0;

          if (changeAmount) {
            return this.state.margin = updateShorthandValue(this.state.margin, 'bottom', changeAmount);
          }
        }
      });
      simplybind('focused', {
        updateOnBind: false
      }).of(this.state).to(focused => {
        return this.emit(focused ? 'focus' : 'blur');
      });

      if (this.settings.mobileWidth) {
        simplybind(() => {
          return fastdom.measure(() => {
            return this.state.isMobile = window.innerWidth <= this.settings.mobileThreshold;
          });
        }).updateOn('event:resize').of(window);
      }

      if (IS$1$1.object(this.settings.events)) {
        ref = this.settings.events;

        for (target in ref) {
          handler = ref[target];
          this.on(target, handler);
        }
      }

      this.emit('created', this);
      return this.el.raw._quickField = this;
    }

    _formatWidth(width) {
      width = this.state.isMobile ? this.settings.mobileWidth || width : width;

      if (this.settings.distance && width !== '100%') {
        width = `calc(${width} - ${this.settings.distance}px)`;
      }

      return width;
    }

    appendTo(target) {
      this.el.appendTo(target);
      return this;
    }

    prependTo(target) {
      this.el.prependTo(target);
      return this;
    }

    insertAfter(target) {
      this.el.insertAfter(target);
      return this;
    }

    insertBefore(target) {
      this.el.insertBefore(target);
      return this;
    }

    detach(target) {
      this.el.detach(target);
      return this;
    }

    remove() {
      this.el.remove();
      return this.destroy(false);
    }

    destroy(removeFromDOM = true) {
      var child, i, len, ref;
      simplybind.unBindAll(this);
      simplybind.unBindAll(this.state);
      simplybind.unBindAll(this.el);
      ref = this.el.child;

      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        simplybind.unBindAll(child);
      }

      if (removeFromDOM) {
        this.el.remove();
      }

      if (this._destroy) {
        this._destroy();
      }

      delete this.allFields[this.ID];
      return true;
    }

    on(eventNames, callback, useCapture) {
      this.el.on.call(this.el, eventNames, callback, useCapture, true);
      return this;
    }

    once(eventNames, callback, useCapture) {
      return this.on(eventNames, () => {
        this.off(eventNames, callback);
        return callback.apply(this.el, arguments);
      }, useCapture);
    }

    off() {
      this.el.off.apply(this.el, arguments);
      return this;
    }

    emit() {
      this.el.emitPrivate.apply(this.el, arguments);
      return this;
    }

    validate(providedValue = this[this.coreValueProp], testUnrequired, report) {
      var isValid;

      isValid = function () {
        switch (false) {
          case !this.settings.validator:
            return this.settings.validator.call(this, providedValue, testUnrequired, report);

          case !(!this.settings.required && !testUnrequired):
            return true;

          case this._validate(providedValue, testUnrequired, report) !== false:
            return false;

          case !this.settings.required:
            switch (false) {
              case !this.settings.multiple:
                return !!(providedValue != null ? providedValue.length : void 0);

              case typeof providedValue !== 'string':
                return !!providedValue;

              default:
                return providedValue != null;
            }

          default:
            return true;
        }
      }.call(this);

      if (isValid && this.settings.clearErrorOnValid) {
        this.state.showError = false;
      }

      return isValid;
    }

    validateConditions(conditions) {
      var passedConditions, toggleVisibility;

      if (conditions) {
        toggleVisibility = false;
      } else {
        conditions = this.conditions;
        toggleVisibility = true;
      }

      passedConditions = Condition$1.validate(conditions);

      if (toggleVisibility) {
        return this.state.visible = passedConditions;
      } else {
        return passedConditions;
      }
    }

    validateAndReport(providedValue, testUnrequired) {
      var isValid;
      isValid = this.validate(providedValue, testUnrequired, true);
      this.state.showError = !isValid;
      return isValid;
    }

  }

  Field.instances = Object.create(null);
  Field.shallowSettings = ['templates', 'fieldInstances', 'value', 'defaultValue'];
  Field.transformSettings = transformSettings;
  Field.prototype.globalDefaults = globalDefaults;
  Field.prototype.coreValueProp = '_value';
  Object.defineProperties(Field.prototype, {
    'removeListener': {
      get: function () {
        return this.off;
      }
    },
    'els': {
      get: function () {
        return this.el.child;
      }
    },
    'valueRaw': {
      get: function () {
        return this._value;
      }
    },
    'value': {
      get: function () {
        if (this.settings.getter) {
          return this.settings.getter(this._getValue());
        } else {
          return this._getValue();
        }
      },
      set: function (value) {
        return this._setValue(this.settings.setter ? this.settings.setter(value) : value);
      }
    }
  });
  return Field;
}.call(undefined);

var Field$1 = Field;var keyCodes;
var KEYCODES = keyCodes = {
  delete: 8,
  enter: 13,
  esc: 27,
  ctrl: 17,
  alt: 18,
  shift: 16,
  super: 91,
  super2: 93,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  hyphen: 45,
  underscore: 95,
  question: 63,
  exclamation: 33,
  frontslash: 47,
  backslash: 92,
  comma: 44,
  period: 46,
  space: 32,
  anyArrow: function (code) {
    return code === keyCodes.up || code === keyCodes.down || code === keyCodes.left || code === keyCodes.right;
  },
  anyModifier: function (code) {
    return code === keyCodes.ctrl || code === keyCodes.alt || code === keyCodes.shift || code === keyCodes.super || code === keyCodes.super2;
  },
  anyAlpha: function (code) {
    return 97 <= code && code <= 122 || 65 <= code && code <= 90;
  },
  anyNumeric: function (code) {
    return 48 <= code && code <= 57;
  },
  anyAlphaNumeric: function (code) {
    return keyCodes.anyAlpha(code) || keyCodes.anyNumeric(code);
  },
  anyPrintable: function (code) {
    return keyCodes.anyAlpha(code) || keyCodes.anyNumeric(code) || code === keyCodes.hyphen || code === keyCodes.underscore || code === keyCodes.question || code === keyCodes.exclamation || code === keyCodes.frontslash || code === keyCodes.backslash || code === keyCodes.comma || code === keyCodes.period || code === keyCodes.space;
  }
};var checkmark = quickdom.template(['*svg', {
  attrs: {
    width: '12px',
    height: '12px',
    viewBox: '5 7 12 12',
    tabindex: -1,
    focusable: false
  },
  style: {
    width: '9px',
    height: '9px'
  }
}, ['*polyline', {
  attrs: {
    'stroke-width': '2',
    'stroke-linecap': 'round',
    'stroke-linejoin': 'round',
    fill: 'none',
    points: '7 13.8888889 9.66666667 17 15 9',
    tabindex: -1,
    focusable: false
  }
}]]);var angleDown = quickdom.template(['*svg', {
  attrs: {
    width: '1792px',
    height: '1792px',
    viewBox: '0 0 1792 1792',
    tabindex: -1,
    focusable: false
  },
  style: {
    width: '100%',
    height: '100%',
    outline: 'none'
  }
}, ['*path', {
  attrs: {
    tabindex: -1,
    focusable: false,
    d: 'M1395 736q0 13-10 23l-466 466q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l393 393 393-393q10-10 23-10t23 10l50 50q10 10 10 23z'
  }
}]]);var caretUp = quickdom.template(['*svg', {
  attrs: {
    viewBox: '0 0 512 512',
    tabindex: -1,
    focusable: false
  },
  style: {
    width: '100%',
    height: '100%',
    outline: 'none'
  }
}, ['*path', {
  attrs: {
    tabindex: -1,
    focusable: false,
    d: 'M402 347c0 5-2 10-5 13-4 4-8 6-13 6h-256c-5 0-9-2-13-6-3-3-5-8-5-13s2-9 5-12l128-128c4-4 8-6 13-6s9 2 13 6l128 128c3 3 5 7 5 12z'
  }
}]]);var caretDown = quickdom.template(['*svg', {
  attrs: {
    viewBox: '0 0 512 512',
    tabindex: -1,
    focusable: false
  },
  style: {
    width: '100%',
    height: '100%',
    outline: 'none'
  }
}, ['*path', {
  attrs: {
    tabindex: -1,
    focusable: false,
    d: 'M402 201c0 5-2 9-5 13l-128 128c-4 4-8 5-13 5s-9-1-13-5l-128-128c-3-4-5-8-5-13s2-9 5-13c4-3 8-5 13-5h256c5 0 9 2 13 5 3 4 5 8 5 13z'
  }
}]]);var plus = quickdom.template(['*svg', {
  attrs: {
    viewBox: '0 0 15 15',
    tabindex: -1,
    focusable: false
  },
  style: {
    width: '100%',
    height: '100%',
    outline: 'none'
  }
}, ['*polygon', {
  attrs: {
    tabindex: -1,
    focusable: false,
    points: '9 0 6 0 6 6 0 6 0 9 6 9 6 15 9 15 9 9 15 9 15 6 9 6'
  }
}]]);var clone$1 = quickdom.template(['*svg', {
  attrs: {
    viewBox: '0 0 18 20',
    tabindex: -1,
    focusable: false
  },
  style: {
    width: '100%',
    height: '100%',
    outline: 'none'
  }
}, ['*path', {
  attrs: {
    tabindex: -1,
    focusable: false,
    d: 'M13.414,0 L6,0 C4.897,0 4,0.898 4,2 L4,14 C4,15.103 4.897,16 6,16 L16,16 C17.103,16 18,15.103 18,14 L18,4.586 L13.414,0 Z M16.001,14 L6,14 L6,2 L12,2 L12,6 L16,6 L16.001,14 Z'
  }
}], ['*path', {
  attrs: {
    tabindex: -1,
    focusable: false,
    d: 'M2,6.42379282 L0,6.42379282 L0,18 C0,19.103 0.897,20 2,20 L14,20 L14,18 L2,18 L2,6.42379282 Z'
  }
}]]);var remove$1 = plus.extend({
  options: {
    style: {
      transform: 'rotate(45deg)'
    }
  }
});var template$1 = quickdom.template(['div', {
  ref: 'dropdown',
  styleAfterInsert: true,
  style: {
    position: 'absolute',
    zIndex: 10,
    overflow: 'hidden',
    top: function (dropdown) {
      if (dropdown.field.type === 'text') {
        return this.parent.raw.style.height;
      } else {
        return '-7px';
      }
    },
    left: function () {
      if (this.parent.rect.left - 5 < 0) {
        return 0;
      } else {
        return -5;
      }
    },
    display: 'none',
    // backgroundColor: hexToRGBA('f6f6f6', 0.9)
    backgroundColor: '#f6f6f6',
    boxShadow: `0px 6px 10px ${hexToRGBA('000000', 0.32)}`,
    borderWidth: '1px',
    borderStyle: 'solid',
    borderColor: '#d1d1d1',
    borderRadius: '5px',
    boxSizing: 'border-box',
    padding: '4px 0',
    $isOpen: {
      $hasVisibleChoices: {
        display: 'block'
      }
    }
  }
}]);
var list = quickdom.template(['div', {
  ref: 'list',
  passStateToChildren: false,
  style: {
    position: 'relative',
    overflow: 'scroll',
    overflowScrolling: 'touch',
    overflowStyle: '-ms-autohiding-scrollbar'
  }
}]);
var choice = quickdom.template(['div', {
  style: {
    display: 'none',
    fontSize: '0',
    color: '#000000',
    userSelect: 'none',
    lineHeight: '1em',
    cursor: 'pointer',
    $visible: {
      display: 'block'
    },
    $unavailable: {
      display: 'none'
    },
    $hover: {
      color: '#ffffff',
      backgroundColor: '#4C96FF'
    }
  }
}, ['div', // Checkmark
{
  style: {
    display: 'inline-block',
    verticalAlign: 'top',
    width: '20px',
    // height: ()-> @parent.raw.style.height
    // lineHeight: ()-> @parent.style('height')
    // fontSize: ()-> @parent.style('height')
    lineHeight: '20px',
    fontSize: '13px',
    textAlign: 'center',
    color: 'inherit',
    stroke: 'currentColor',
    visibility: 'hidden',
    $selected: {
      visibility: 'visible'
    }
  }
}, checkmark], ['div', // Text
{
  styleAfterInsert: true,
  style: {
    display: 'inline-block',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    wordWrap: 'normal',
    maxWidth: function () {
      return `calc(100% - ${this.prev.styleSafe('width', true)})`;
    },
    paddingRight: '10px',
    lineHeight: '20px',
    fontSize: '11px',
    fontFamily: function (dropdown) {
      return dropdown.settings.fontFamily;
    },
    color: 'inherit',
    boxSizing: 'border-box'
  }
}]]);
var scrollIndicatorUp = quickdom.template(['div', {
  ref: 'scrollIndicatorUp',
  style: {
    position: 'absolute',
    top: 0,
    left: 0,
    display: 'none',
    width: '100%',
    height: '20px',
    backgroundColor: '#f6f6f6',
    color: '#000000',
    textAlign: 'center',
    $visible: {
      display: 'block'
    }
  }
}, ['div', {
  style: {
    position: 'absolute',
    top: '50%',
    left: 0,
    right: 0,
    width: '15px',
    height: '15px',
    display: 'block',
    margin: '0 auto',
    transform: 'translateY(-50%)'
  }
}, caretUp]]);
var scrollIndicatorDown = quickdom.template(['div', {
  ref: 'scrollIndicatorDown',
  style: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    display: 'none',
    width: '100%',
    height: '20px',
    backgroundColor: '#f6f6f6',
    color: '#000000',
    textAlign: 'center',
    $visible: {
      display: 'block'
    }
  }
}, ['div', {
  style: {
    position: 'absolute',
    top: '50%',
    left: 0,
    right: 0,
    width: '15px',
    height: '15px',
    display: 'block',
    margin: '0 auto',
    transform: 'translateY(-50%)'
  }
}, caretDown]]);
var help = quickdom.template(['div', {
  ref: 'help',
  style: {
    display: 'none',
    borderTop: '2px solid rgba(0,0,0,0.05)',
    padding: '4px 12px 1px',
    color: 'rgba(0,0,0,0.5)',
    fontWeight: '500',
    fontSize: '11px',
    userSelect: 'none',
    $showHelp: {
      display: 'block'
    }
  }
}]);
var template$1$1 =
/*#__PURE__*/
Object.freeze({
  __proto__: null,
  'default': template$1,
  list: list,
  choice: choice,
  scrollIndicatorUp: scrollIndicatorUp,
  scrollIndicatorDown: scrollIndicatorDown,
  help: help
});var defaults = {
  maxHeight: 300,
  multiple: false,
  lockScroll: true,
  typeBuffer: false,
  help: '',
  templates: {}
};var Choice, Dropdown, List;

Dropdown = function () {
  class Dropdown {
    constructor(initialChoices, field) {
      this.initialChoices = initialChoices;
      this.field = field;
      this.isOpen = false;
      this.typeBuffer = '';
      this.settings = primaryBuilder$1.deep.clone.filter(this._settingFilters)(globalDefaults, this.defaults, this.field.settings.dropdown);
      this.selected = this.settings.multiple ? [] : null;
      this.lastSelected = null;
      this.blankChoice = null;
      this.choices = [];
      this.currentHighlighted = null;
      this.visibleChoicesCount = 0;
      this.visibleChoices = [];
      this.els = {};
      this._selectedCallback = noop;

      this._createElements();

      this._attachBindings();

      return this;
    }

    _createElements() {
      var choice, globalOpts, i, len, ref;
      globalOpts = {
        relatedInstance: this
      };
      this.els.container = this.template.default.spawn(this.settings.templates.default, primaryBuilder$1({
        passStateToChildren: false
      }, globalOpts));
      this.els.list = this.template.list.spawn(this.settings.templates.list, globalOpts).appendTo(this.els.container);
      this.els.help = this.template.help.spawn(this.settings.templates.help, globalOpts).appendTo(this.els.container);
      this.els.scrollIndicatorUp = this.template.scrollIndicatorUp.spawn(this.settings.templates.scrollIndicatorUp, globalOpts).appendTo(this.els.container);
      this.els.scrollIndicatorDown = this.template.scrollIndicatorDown.spawn(this.settings.templates.scrollIndicatorDown, globalOpts).appendTo(this.els.container);
      this.list = new List(this);
      this.blankChoice = this.addChoice({
        label: '',
        value: ''
      });
      ref = this.initialChoices;

      for (i = 0, len = ref.length; i < len; i++) {
        choice = ref[i];
        this.addChoice(choice);
      }
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_display();

      return this._attachBindings_scrollIndicators();
    }

    _attachBindings_elState() {
      simplybind('help').of(this.settings).to('text').of(this.els.help).and.to(showHelp => {
        return this.els.help.state('showHelp', showHelp);
      });
      simplybind('visibleChoicesCount').of(this).to(count => {
        return this.els.container.state('hasVisibleChoices', !!count);
      });
      return simplybind('currentHighlighted').of(this).to((current, prev) => {
        if (prev) {
          prev.el.state('hover', false);
        }

        if (current) {
          return current.el.state('hover', true);
        }
      });
    }

    _attachBindings_display() {
      simplybind('isOpen', {
        updateOnBind: false
      }).of(this).to(isOpen => {
        this.els.container.state('isOpen', isOpen);

        if (!isOpen) {
          this.currentHighlighted = null;
        }

        if (this.settings.lockScroll) {
          if (isOpen) {
            lockScroll(this.els.list);
          } else {
            unlockScroll();
          }
        }

        if (isOpen) {
          this.list.appendChoices();
          this.list.calcDisplay();

          if (this.selected && !this.settings.multiple) {
            return this.list.scrollToChoice(this.selected);
          }
        } else {
          return this.list.setTranslate(0);
        }
      });
      simplybind('lastSelected', {
        updateOnBind: false,
        updateEvenIfSame: true
      }).of(this).to((newChoice, prevChoice) => {
        return this._selectedCallback(newChoice, prevChoice);
      });
      simplybind('focused', {
        updateOnBind: false
      }).of(this.field.state).to(focused => {
        if (!focused) {
          return this.field.el.child.input.off('keydown.dropdownNav');
        } else {
          return this.field.el.child.input.on('keydown.dropdownNav', event => {
            if (this.isOpen) {
              switch (event.keyCode) {
                case KEYCODES.up:
                  event.preventDefault();
                  return this.highlightPrev();

                case KEYCODES.down:
                  event.preventDefault();
                  return this.highlightNext();

                case KEYCODES.enter:
                  event.preventDefault();

                  if (this.currentHighlighted) {
                    return this.lastSelected = this.currentHighlighted;
                  }

                  break;

                case KEYCODES.esc:
                  event.preventDefault();
                  return this.isOpen = false;
              }
            }
          });
        }
      });

      if (!this.settings.typeBuffer) {
        return;
      }

      simplybind('focused', {
        updateOnBind: false
      }).of(this.field.state).to(focused => {
        if (!focused) {
          return quickdom(document).off('keypress.dropdownTypeBuffer');
        } else {
          return quickdom(document).on('keypress.dropdownTypeBuffer', event => {
            if (this.isOpen) {
              event.preventDefault();

              if (!KEYCODES.anyPrintable(event.keyCode)) {
                return;
              }

              return this.typeBuffer += event.key;
            }
          });
        }
      });
      return simplybind('typeBuffer', {
        updateOnBind: false
      }).of(this).to(() => {
        clearTimeout(this.typeBufferTimeout);
        return this.typeBufferTimeout = setTimeout(() => {
          return this.typeBuffer = '';
        }, 1500);
      }).and.to(buffer => {
        var choice, i, len, ref;

        if (buffer) {
          ref = this.visibleChoices;

          for (i = 0, len = ref.length; i < len; i++) {
            choice = ref[i];

            if (startsWith(buffer, choice.label)) {
              this.currentHighlighted = choice;

              if (!this.list.choiceInView(choice)) {
                this.list.scrollToChoice(choice);
              }

              return;
            }
          }
        }
      });
    }

    _attachBindings_scrollIndicators() {
      simplybind('scrollTop', {
        updateEvenIfSame: true
      }).of(this.els.list.raw).to(scrollTop => {
        return this._updateScrollIndicatorVisibility();
      }).condition(() => {
        return this.isOpen && !this.settings.help && this.els.list.raw.scrollHeight !== this.els.list.raw.clientHeight && this.els.list.raw.clientHeight >= 100;
      }).updateOn('event:scroll').of(this.els.list.raw).updateOn('isOpen').of(this);
      this.els.scrollIndicatorUp.on('mouseenter', () => {
        return this.list.startScrolling('up');
      });
      this.els.scrollIndicatorUp.on('mouseleave', () => {
        return this.list.stopScrolling();
      });
      this.els.scrollIndicatorDown.on('mouseenter', () => {
        return this.list.startScrolling('down');
      });
      return this.els.scrollIndicatorDown.on('mouseleave', () => {
        return this.list.stopScrolling();
      });
    }

    _updateScrollIndicatorVisibility() {
      var scrollTop, showBottomIndicator, showTopIndicator;
      scrollTop = this.els.list.raw;
      showTopIndicator = scrollTop > 0;
      showBottomIndicator = this.els.list.raw.scrollHeight - this.els.list.raw.clientHeight > scrollTop;
      this.els.scrollIndicatorUp.state('visible', showTopIndicator);
      return this.els.scrollIndicatorDown.state('visible', showBottomIndicator);
    }

    addChoice(config) {
      var i, item, len, newChoice;

      if (IS$1$1.array(config)) {
        for (i = 0, len = config.length; i < len; i++) {
          item = config[i];
          this.addChoice(item);
        }

        return;
      } else if (IS$1$1.string(config)) {
        config = {
          label: config,
          value: config
        };
      } else if (IS$1$1.objectPlain(config)) {
        if (config.value == null) {
          config.value = config.label;
        }

        if (config.label == null) {
          config.label = config.value;
        }
      } else {
        return;
      }

      newChoice = new Choice(this, config, this.list, this.choices.length);

      if (this.list.appendedChoices) {
        newChoice.init();
      }

      this.choices.push(newChoice);
      return newChoice;
    }

    removeChoice(choice) {
      var i, item, len;

      if (IS$1$1.array(choice)) {
        for (i = 0, len = choice.length; i < len; i++) {
          item = choice[i];
          this.removeChoice(item);
        }

        return;
      } else {
        choice = this.findChoiceAny(choice);
      }

      if (!choice) {
        return;
      }

      choice.remove();
      return this.choices.splice(this.choices.indexOf(choice), 1);
    }

    replaceChoices(newChoices) {
      this.removeChoice(this.choices.slice());
      this.addChoice(newChoices);
    }

    appendTo(target) {
      return this.els.container.appendTo(target);
    }

    onSelected(callback) {
      return this._selectedCallback = callback;
    }

    findChoice(providedValue, byLabel) {
      var matches;
      matches = this.choices.filter(function (choice) {
        switch (false) {
          case !IS$1$1.object(providedValue):
            return providedValue === choice;

          case !byLabel:
            return providedValue === choice.label;

          default:
            return providedValue === choice.value;
        }
      });
      return matches[0];
    }

    findChoiceAny(providedValue) {
      return this.findChoice(providedValue) || this.findChoice(providedValue, true);
    }

    highlightPrev() {
      var choice, currentIndex;
      currentIndex = this.visibleChoices.indexOf(this.currentHighlighted);

      if (currentIndex > 0) {
        this.currentHighlighted = choice = this.visibleChoices[currentIndex - 1];

        if (!this.list.choiceInView(choice)) {
          return this.list.scrollUp(choice);
        }
      } else {
        this.currentHighlighted = choice = this.visibleChoices[this.visibleChoices.length - 1];

        if (!this.list.choiceInView(choice)) {
          return this.list.scrollToChoice(choice, 1);
        }
      }
    }

    highlightNext() {
      var choice, currentIndex;
      currentIndex = this.visibleChoices.indexOf(this.currentHighlighted);

      if (currentIndex < this.visibleChoices.length - 1) {
        this.currentHighlighted = choice = this.visibleChoices[currentIndex + 1];

        if (!this.list.choiceInView(choice)) {
          return this.list.scrollDown(choice);
        }
      } else {
        this.currentHighlighted = choice = this.visibleChoices[0];

        if (!this.list.choiceInView(choice)) {
          return this.list.scrollToChoice(choice, 1);
        }
      }
    }

  }

  Dropdown.prototype.template = template$1$1;
  Dropdown.prototype.defaults = defaults;
  Dropdown.prototype._settingFilters = {
    maxHeight: function (value) {
      return IS$1$1.number(value);
    }
  };
  return Dropdown;
}.call(undefined);

List = class List {
  constructor(dropdown) {
    this.choiceInView = this.choiceInView.bind(this);
    this.dropdown = dropdown;
    ({
      els: this.els,
      field: this.field,
      settings: this.settings
    } = this.dropdown);
    this.el = this.els.list;
    this.container = this.els.container;
    this.appendedChoices = false;
  }

  appendChoices() {
    var choice, i, len, ref;

    if (this.appendedChoices) {
      return;
    }

    ref = this.dropdown.choices;

    for (i = 0, len = ref.length; i < len; i++) {
      choice = ref[i];
      choice.init();
    }

    return this.appendedChoices = true;
  }

  calcDisplay() {
    var bottomCutoff, clippingParent, clippingRect, cutoff, height, isBottomCutoff, isTopCutoff, needsNewHeight, padding, scrollHeight, selfRect, topCutoff, translation, windowCutoff, windowHeight;
    windowHeight = window.innerHeight;
    translation = this.translation || 0;
    clippingParent = this.container.parentMatching(function (parent) {
      var overflow;
      overflow = parent.style('overflowY');
      return overflow === 'hidden' || overflow === 'scroll';
    });
    scrollHeight = this.el.raw.scrollHeight || 2e308;
    selfRect = primaryBuilder$1.clone(this.container.rect);
    padding = selfRect.height - this.el.height;
    height = Math.min(scrollHeight, this.settings.maxHeight, window.innerHeight - 40);
    selfRect.bottom = selfRect.top + height;

    if (clippingParent) {
      clippingRect = clippingParent.rect;
      bottomCutoff = selfRect.bottom - clippingRect.bottom;
      topCutoff = clippingRect.top - selfRect.top;
      isBottomCutoff = bottomCutoff > 0;
      isTopCutoff = topCutoff > 0;

      if (selfRect.top >= clippingRect.bottom || clippingRect.top >= selfRect.bottom) {
        console.warn(`The dropdown for element '${this.field.ID}' cannot be displayed as it's hidden by the parent overflow`);
      } else if (isBottomCutoff || isTopCutoff) {
        needsNewHeight = true;

        if (selfRect.top - bottomCutoff > clippingRect.top && !isTopCutoff) {
          translation = bottomCutoff;
          selfRect.top -= translation;
          selfRect.bottom -= translation;
          cutoff = clippingRect.top - selfRect.top;
        } else if (selfRect.bottom - topCutoff < clippingRect.bottom) {
          translation = topCutoff * -1;
          selfRect.top += translation;
          selfRect.bottom += translation;
          cutoff = selfRect.bottom - clippingRect.bottom;
        }

        if (needsNewHeight = cutoff > 0) {
          height = cutoff - padding;
        }
      }
    }

    windowCutoff = selfRect.top + height - windowHeight;

    if (windowCutoff > 0 && height < windowHeight) {
      translation += windowCutoff + 10;
    }

    this.setDimensions(height, this.field.el.child.innerwrap.width + 10);
    return this.setTranslate(translation);
  }

  setDimensions(height, width) {
    if (height != null) {
      this.el.style('maxHeight', height);
    }

    if (width != null) {
      return this.el.style('minWidth', width);
    }
  }

  setTranslate(translation) {
    this.translation = translation;
    translation *= -1;
    return this.container.style('transform', `translateY(${translation}px)`);
  }

  scrollToChoice(choice, offset = 3) {
    var distaneFromTop, selectedHeight;
    distaneFromTop = choice.el.raw.offsetTop;
    selectedHeight = choice.el.height;
    return this.el.raw.scrollTop = distaneFromTop - selectedHeight * offset;
  }

  scrollDown(choice) {
    return this.el.raw.scrollTop += choice.el.height;
  }

  scrollUp(choice) {
    return this.el.raw.scrollTop -= choice.el.height;
  }

  choiceInView(choice) {
    var choiceRect, downPadding, listRect, upPadding;
    choiceRect = choice.el.rect;
    listRect = this.el.rect;
    upPadding = this.els.scrollIndicatorUp.state('visible') ? parseFloat(this.els.scrollIndicatorUp.styleSafe('height', true)) : void 0;
    downPadding = this.els.scrollIndicatorDown.state('visible') ? parseFloat(this.els.scrollIndicatorDown.styleSafe('height', true)) : void 0;
    return choiceRect.bottom <= listRect.bottom - downPadding && choiceRect.top >= listRect.top + upPadding;
  }

  startScrolling(direction) {
    return this.scrollIntervalID = setInterval(() => {
      return this.el.raw.scrollTop += direction === 'up' ? -20 : 20;
    }, 50);
  }

  stopScrolling() {
    return clearInterval(this.scrollIntervalID);
  }

};
Choice = class Choice {
  constructor(dropdown, settings, list, index) {
    var ref;
    this.dropdown = dropdown;
    this.settings = settings;
    this.list = list;
    this.index = index;
    ({
      label: this.label,
      value: this.value,
      conditions: this.conditions
    } = this.settings);

    if (this.label == null) {
      this.label = this.value;
    }

    if (this.value == null) {
      this.value = this.label;
    }

    this.field = this.dropdown.field;
    this.visible = true;
    this.selected = false;
    this.unavailable = false;
    this.initialized = false;

    if ((ref = this.conditions) != null ? ref.length : void 0) {
      this.unavailable = true;
      this.allFields = this.field.allFields;
      Condition$1.init(this, this.conditions, () => {
        return this.unavailable = !Condition$1.validate(this.conditions);
      });
    }
  }

  init() {
    if (this.initialized) {
      return;
    }

    this.initialized = true;
    this.el = this.dropdown.template.choice.spawn(null, {
      relatedInstance: this.dropdown
    });
    this.el.children[1].text = this.label;
    this.el.appendTo(this.list.el);
    return this._attachBindings();
  }

  remove() {
    if (!this.initialized) {
      return;
    }

    return this.el.remove();
  }

  _attachBindings() {
    return (() => {
      simplybind('visible').of(this).to((visible, prev) => {
        this.dropdown.visibleChoicesCount += visible ? 1 : -1;
        this.el.state('visible', visible);

        if (visible) {
          this.dropdown.visibleChoices.push(this);

          if (IS$1$1.defined(prev)) {
            // indicates state has changed
            return this.dropdown.visibleChoices.sort(function (a, b) {
              return a.index - b.index;
            });
          }
        } else {
          return removeItem$1(this.dropdown.visibleChoices, this);
        }
      });
      simplybind('selected').of(this).to(selected => {
        return this.el.state('selected', selected);
      });
      simplybind('unavailable').of(this).to(unavailable => {
        return this.el.state('unavailable', unavailable);
      }).and.to(unavailable => {
        if (unavailable) {
          return this.toggle(false, true);
        }
      });
      simplybind('event:click').of(this.el).to(() => {
        return this.dropdown.lastSelected = this;
      });
      simplybind('event:mousedown').of(this.el).to(event => {
        event.preventDefault();
        return event.stopPropagation();
      });
      return simplybind('event:mouseenter').of(this.el).to(() => {
        return this.dropdown.currentHighlighted = this;
      });
    })();
  }

  toggle(newValue, unavailable) {
    var newState, prevState, ref, wasSelected;
    prevState = this.selected;
    newState = IS$1$1.defined(newValue) ? newValue : !this.selected;

    if (!newState) {
      if (this.dropdown.settings.multiple && prevState) {
        this.selected = newState;
        return removeItem$1(this.field._value, this);
      } else {
        wasSelected = this.selected;

        if (IS$1$1.defined(newValue)) {
          this.selected = newState;
        }

        if (unavailable && wasSelected) {
          return this.field._value = null;
        }
      }
    } else {
      this.selected = newState;

      if (this.field.settings.multiple) {
        this.field._value.push(this);
      } else {
        if ((ref = this.field._value) != null) {
          ref.toggle(false);
        }

        this.field._value = this;
      }

      return this.field.lastSelected = this;
    }
  }

};
var Dropdown$1 = Dropdown;var textMaskCore = createCommonjsModule(function (module, exports) {
  !function (e, r) {
     module.exports = r() ;
  }(commonjsGlobal, function () {
    return function (e) {
      function r(n) {
        if (t[n]) return t[n].exports;
        var o = t[n] = {
          exports: {},
          id: n,
          loaded: !1
        };
        return e[n].call(o.exports, o, o.exports, r), o.loaded = !0, o.exports;
      }

      var t = {};
      return r.m = e, r.c = t, r.p = "", r(0);
    }([function (e, r, t) {

      function n(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = t(3);
      Object.defineProperty(r, "conformToMask", {
        enumerable: !0,
        get: function () {
          return n(o).default;
        }
      });
      var i = t(2);
      Object.defineProperty(r, "adjustCaretPosition", {
        enumerable: !0,
        get: function () {
          return n(i).default;
        }
      });
      var a = t(5);
      Object.defineProperty(r, "createTextMaskInputElement", {
        enumerable: !0,
        get: function () {
          return n(a).default;
        }
      });
    }, function (e, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.placeholderChar = "_", r.strFunction = "function";
    }, function (e, r) {

      function t(e) {
        var r = e.previousConformedValue,
            t = void 0 === r ? o : r,
            i = e.previousPlaceholder,
            a = void 0 === i ? o : i,
            u = e.currentCaretPosition,
            l = void 0 === u ? 0 : u,
            s = e.conformedValue,
            f = e.rawValue,
            d = e.placeholderChar,
            c = e.placeholder,
            p = e.indexesOfPipedChars,
            v = void 0 === p ? n : p,
            h = e.caretTrapIndexes,
            m = void 0 === h ? n : h;
        if (0 === l || !f.length) return 0;
        var y = f.length,
            g = t.length,
            b = c.length,
            C = s.length,
            P = y - g,
            k = P > 0,
            x = 0 === g,
            O = P > 1 && !k && !x;
        if (O) return l;
        var T = k && (t === s || s === c),
            w = 0,
            M = void 0,
            S = void 0;
        if (T) w = l - P;else {
          var j = s.toLowerCase(),
              _ = f.toLowerCase(),
              V = _.substr(0, l).split(o),
              A = V.filter(function (e) {
            return j.indexOf(e) !== -1;
          });

          S = A[A.length - 1];
          var N = a.substr(0, A.length).split(o).filter(function (e) {
            return e !== d;
          }).length,
              E = c.substr(0, A.length).split(o).filter(function (e) {
            return e !== d;
          }).length,
              F = E !== N,
              R = void 0 !== a[A.length - 1] && void 0 !== c[A.length - 2] && a[A.length - 1] !== d && a[A.length - 1] !== c[A.length - 1] && a[A.length - 1] === c[A.length - 2];
          !k && (F || R) && N > 0 && c.indexOf(S) > -1 && void 0 !== f[l] && (M = !0, S = f[l]);

          for (var I = v.map(function (e) {
            return j[e];
          }), J = I.filter(function (e) {
            return e === S;
          }).length, W = A.filter(function (e) {
            return e === S;
          }).length, q = c.substr(0, c.indexOf(d)).split(o).filter(function (e, r) {
            return e === S && f[r] !== e;
          }).length, L = q + W + J + (M ? 1 : 0), z = 0, B = 0; B < C; B++) {
            var D = j[B];
            if (w = B + 1, D === S && z++, z >= L) break;
          }
        }

        if (k) {
          for (var G = w, H = w; H <= b; H++) if (c[H] === d && (G = H), c[H] === d || m.indexOf(H) !== -1 || H === b) return G;
        } else if (M) {
          for (var K = w - 1; K >= 0; K--) if (s[K] === S || m.indexOf(K) !== -1 || 0 === K) return K;
        } else for (var Q = w; Q >= 0; Q--) if (c[Q - 1] === d || m.indexOf(Q) !== -1 || 0 === Q) return Q;
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = t;
      var n = [],
          o = "";
    }, function (e, r, t) {

      function n() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : l,
            r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : u,
            t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};

        if (!(0, i.isArray)(r)) {
          if (("undefined" == typeof r ? "undefined" : o(r)) !== a.strFunction) throw new Error("Text-mask:conformToMask; The mask property must be an array.");
          r = r(e, t), r = (0, i.processCaretTraps)(r).maskWithoutCaretTraps;
        }

        var n = t.guide,
            s = void 0 === n || n,
            f = t.previousConformedValue,
            d = void 0 === f ? l : f,
            c = t.placeholderChar,
            p = void 0 === c ? a.placeholderChar : c,
            v = t.placeholder,
            h = void 0 === v ? (0, i.convertMaskToPlaceholder)(r, p) : v,
            m = t.currentCaretPosition,
            y = t.keepCharPositions,
            g = s === !1 && void 0 !== d,
            b = e.length,
            C = d.length,
            P = h.length,
            k = r.length,
            x = b - C,
            O = x > 0,
            T = m + (O ? -x : 0),
            w = T + Math.abs(x);

        if (y === !0 && !O) {
          for (var M = l, S = T; S < w; S++) h[S] === p && (M += p);

          e = e.slice(0, T) + M + e.slice(T, b);
        }

        for (var j = e.split(l).map(function (e, r) {
          return {
            char: e,
            isNew: r >= T && r < w
          };
        }), _ = b - 1; _ >= 0; _--) {
          var V = j[_].char;

          if (V !== p) {
            var A = _ >= T && C === k;
            V === h[A ? _ - x : _] && j.splice(_, 1);
          }
        }

        var N = l,
            E = !1;

        e: for (var F = 0; F < P; F++) {
          var R = h[F];

          if (R === p) {
            if (j.length > 0) for (; j.length > 0;) {
              var I = j.shift(),
                  J = I.char,
                  W = I.isNew;

              if (J === p && g !== !0) {
                N += p;
                continue e;
              }

              if (r[F].test(J)) {
                if (y === !0 && W !== !1 && d !== l && s !== !1 && O) {
                  for (var q = j.length, L = null, z = 0; z < q; z++) {
                    var B = j[z];
                    if (B.char !== p && B.isNew === !1) break;

                    if (B.char === p) {
                      L = z;
                      break;
                    }
                  }

                  null !== L ? (N += J, j.splice(L, 1)) : F--;
                } else N += J;

                continue e;
              }

              E = !0;
            }
            g === !1 && (N += h.substr(F, P));
            break;
          }

          N += R;
        }

        if (g && O === !1) {
          for (var D = null, G = 0; G < N.length; G++) h[G] === p && (D = G);

          N = null !== D ? N.substr(0, D + 1) : l;
        }

        return {
          conformedValue: N,
          meta: {
            someCharsRejected: E
          }
        };
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
        return typeof e;
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
      };
      r.default = n;
      var i = t(4),
          a = t(1),
          u = [],
          l = "";
    }, function (e, r, t) {

      function n() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : f,
            r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : s.placeholderChar;
        if (!o(e)) throw new Error("Text-mask:convertMaskToPlaceholder; The mask property must be an array.");
        if (e.indexOf(r) !== -1) throw new Error("Placeholder character must not be used as part of the mask. Please specify a character that is not present in your mask as your placeholder character.\n\n" + ("The placeholder character that was received is: " + JSON.stringify(r) + "\n\n") + ("The mask that was received is: " + JSON.stringify(e)));
        return e.map(function (e) {
          return e instanceof RegExp ? r : e;
        }).join("");
      }

      function o(e) {
        return Array.isArray && Array.isArray(e) || e instanceof Array;
      }

      function i(e) {
        return "string" == typeof e || e instanceof String;
      }

      function a(e) {
        return "number" == typeof e && void 0 === e.length && !isNaN(e);
      }

      function u(e) {
        return "undefined" == typeof e || null === e;
      }

      function l(e) {
        for (var r = [], t = void 0; t = e.indexOf(d), t !== -1;) r.push(t), e.splice(t, 1);

        return {
          maskWithoutCaretTraps: e,
          indexes: r
        };
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.convertMaskToPlaceholder = n, r.isArray = o, r.isString = i, r.isNumber = a, r.isNil = u, r.processCaretTraps = l;
      var s = t(1),
          f = [],
          d = "[]";
    }, function (e, r, t) {

      function n(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      function o(e) {
        var r = {
          previousConformedValue: void 0,
          previousPlaceholder: void 0
        };
        return {
          state: r,
          update: function (t) {
            var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e,
                o = n.inputElement,
                s = n.mask,
                d = n.guide,
                m = n.pipe,
                g = n.placeholderChar,
                b = void 0 === g ? v.placeholderChar : g,
                C = n.keepCharPositions,
                P = void 0 !== C && C,
                k = n.showMask,
                x = void 0 !== k && k;

            if ("undefined" == typeof t && (t = o.value), t !== r.previousConformedValue) {
              ("undefined" == typeof s ? "undefined" : l(s)) === y && void 0 !== s.pipe && void 0 !== s.mask && (m = s.pipe, s = s.mask);
              var O = void 0,
                  T = void 0;

              if (s instanceof Array && (O = (0, p.convertMaskToPlaceholder)(s, b)), s !== !1) {
                var w = a(t),
                    M = o.selectionEnd,
                    S = r.previousConformedValue,
                    j = r.previousPlaceholder,
                    _ = void 0;

                if (("undefined" == typeof s ? "undefined" : l(s)) === v.strFunction) {
                  if (T = s(w, {
                    currentCaretPosition: M,
                    previousConformedValue: S,
                    placeholderChar: b
                  }), T === !1) return;
                  var V = (0, p.processCaretTraps)(T),
                      A = V.maskWithoutCaretTraps,
                      N = V.indexes;
                  T = A, _ = N, O = (0, p.convertMaskToPlaceholder)(T, b);
                } else T = s;

                var E = {
                  previousConformedValue: S,
                  guide: d,
                  placeholderChar: b,
                  pipe: m,
                  placeholder: O,
                  currentCaretPosition: M,
                  keepCharPositions: P
                },
                    F = (0, c.default)(w, T, E),
                    R = F.conformedValue,
                    I = ("undefined" == typeof m ? "undefined" : l(m)) === v.strFunction,
                    J = {};
                I && (J = m(R, u({
                  rawValue: w
                }, E)), J === !1 ? J = {
                  value: S,
                  rejected: !0
                } : (0, p.isString)(J) && (J = {
                  value: J
                }));
                var W = I ? J.value : R,
                    q = (0, f.default)({
                  previousConformedValue: S,
                  previousPlaceholder: j,
                  conformedValue: W,
                  placeholder: O,
                  rawValue: w,
                  currentCaretPosition: M,
                  placeholderChar: b,
                  indexesOfPipedChars: J.indexesOfPipedChars,
                  caretTrapIndexes: _
                }),
                    L = W === O && 0 === q,
                    z = x ? O : h,
                    B = L ? z : W;
                r.previousConformedValue = B, r.previousPlaceholder = O, o.value !== B && (o.value = B, i(o, q));
              }
            }
          }
        };
      }

      function i(e, r) {
        document.activeElement === e && (g ? b(function () {
          return e.setSelectionRange(r, r, m);
        }, 0) : e.setSelectionRange(r, r, m));
      }

      function a(e) {
        if ((0, p.isString)(e)) return e;
        if ((0, p.isNumber)(e)) return String(e);
        if (void 0 === e || null === e) return h;
        throw new Error("The 'value' provided to Text Mask needs to be a string or a number. The value received was:\n\n " + JSON.stringify(e));
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      });

      var u = Object.assign || function (e) {
        for (var r = 1; r < arguments.length; r++) {
          var t = arguments[r];

          for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
        }

        return e;
      },
          l = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
        return typeof e;
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
      };

      r.default = o;
      var s = t(2),
          f = n(s),
          d = t(3),
          c = n(d),
          p = t(4),
          v = t(1),
          h = "",
          m = "none",
          y = "object",
          g = "undefined" != typeof navigator && /Android/i.test(navigator.userAgent),
          b = "undefined" != typeof requestAnimationFrame ? requestAnimationFrame : setTimeout;
    }]);
  });
});
var maskCore = unwrapExports(textMaskCore);
var textMaskCore_1 = textMaskCore.textMaskCore;var textMaskAddons = createCommonjsModule(function (module, exports) {
  !function (e, t) {
     module.exports = t() ;
  }(commonjsGlobal, function () {
    return function (e) {
      function t(r) {
        if (n[r]) return n[r].exports;
        var i = n[r] = {
          exports: {},
          id: r,
          loaded: !1
        };
        return e[r].call(i.exports, i, i.exports, t), i.loaded = !0, i.exports;
      }

      var n = {};
      return t.m = e, t.c = n, t.p = "", t(0);
    }([function (e, t, n) {

      function r(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      Object.defineProperty(t, "__esModule", {
        value: !0
      });
      var i = n(1);
      Object.defineProperty(t, "createAutoCorrectedDatePipe", {
        enumerable: !0,
        get: function () {
          return r(i).default;
        }
      });
      var o = n(2);
      Object.defineProperty(t, "createNumberMask", {
        enumerable: !0,
        get: function () {
          return r(o).default;
        }
      });
      var u = n(3);
      Object.defineProperty(t, "emailMask", {
        enumerable: !0,
        get: function () {
          return r(u).default;
        }
      });
    }, function (e, t) {

      function n() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "mm dd yyyy",
            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
            n = t.minYear,
            o = void 0 === n ? 1 : n,
            u = t.maxYear,
            a = void 0 === u ? 9999 : u,
            c = e.split(/[^dmyHMS]+/).sort(function (e, t) {
          return i.indexOf(e) - i.indexOf(t);
        });
        return function (t) {
          var n = [],
              i = {
            dd: 31,
            mm: 12,
            yy: 99,
            yyyy: a,
            HH: 23,
            MM: 59,
            SS: 59
          },
              u = {
            dd: 1,
            mm: 1,
            yy: 0,
            yyyy: o,
            HH: 0,
            MM: 0,
            SS: 0
          },
              l = t.split("");
          c.forEach(function (t) {
            var r = e.indexOf(t),
                o = parseInt(i[t].toString().substr(0, 1), 10);
            parseInt(l[r], 10) > o && (l[r + 1] = l[r], l[r] = 0, n.push(r));
          });
          var s = 0,
              d = c.some(function (n) {
            var c = e.indexOf(n),
                l = n.length,
                d = t.substr(c, l).replace(/\D/g, ""),
                f = parseInt(d, 10);
            "mm" === n && (s = f || 0);
            var p = "dd" === n ? r[s] : i[n];

            if ("yyyy" === n && (1 !== o || 9999 !== a)) {
              var v = parseInt(i[n].toString().substring(0, d.length), 10),
                  y = parseInt(u[n].toString().substring(0, d.length), 10);
              return f < y || f > v;
            }

            return f > p || d.length === l && f < u[n];
          });
          return !d && {
            value: l.join(""),
            indexesOfPipedChars: n
          };
        };
      }

      Object.defineProperty(t, "__esModule", {
        value: !0
      }), t.default = n;
      var r = [31, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
          i = ["yyyy", "yy", "mm", "dd", "HH", "MM", "SS"];
    }, function (e, t) {

      function n() {
        function e() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a,
              t = e.length;
          if (e === a || e[0] === g[0] && 1 === t) return g.split(a).concat([v]).concat(h.split(a));
          if (e === P && _) return g.split(a).concat(["0", P, v]).concat(h.split(a));
          var n = e[0] === s && D;
          n && (e = e.toString().substr(1));
          var u = e.lastIndexOf(P),
              c = u !== -1,
              l = void 0,
              m = void 0,
              b = void 0;

          if (e.slice($ * -1) === h && (e = e.slice(0, $ * -1)), c && (_ || I) ? (l = e.slice(e.slice(0, N) === g ? N : 0, u), m = e.slice(u + 1, t), m = r(m.replace(f, a))) : l = e.slice(0, N) === g ? e.slice(N) : e, L && ("undefined" == typeof L ? "undefined" : o(L)) === p) {
            var O = "." === S ? "[.]" : "" + S,
                M = (l.match(new RegExp(O, "g")) || []).length;
            l = l.slice(0, L + M * V);
          }

          return l = l.replace(f, a), R || (l = l.replace(/^0+(0$|[^0])/, "$1")), l = x ? i(l, S) : l, b = r(l), (c && _ || I === !0) && (e[u - 1] !== P && b.push(y), b.push(P, y), m && (("undefined" == typeof C ? "undefined" : o(C)) === p && (m = m.slice(0, C)), b = b.concat(m)), I === !0 && e[u - 1] === P && b.push(v)), N > 0 && (b = g.split(a).concat(b)), n && (b.length === N && b.push(v), b = [d].concat(b)), h.length > 0 && (b = b.concat(h.split(a))), b;
        }

        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            n = t.prefix,
            g = void 0 === n ? u : n,
            m = t.suffix,
            h = void 0 === m ? a : m,
            b = t.includeThousandsSeparator,
            x = void 0 === b || b,
            O = t.thousandsSeparatorSymbol,
            S = void 0 === O ? c : O,
            M = t.allowDecimal,
            _ = void 0 !== M && M,
            j = t.decimalSymbol,
            P = void 0 === j ? l : j,
            w = t.decimalLimit,
            C = void 0 === w ? 2 : w,
            H = t.requireDecimal,
            I = void 0 !== H && H,
            k = t.allowNegative,
            D = void 0 !== k && k,
            E = t.allowLeadingZeroes,
            R = void 0 !== E && E,
            A = t.integerLimit,
            L = void 0 === A ? null : A,
            N = g && g.length || 0,
            $ = h && h.length || 0,
            V = S && S.length || 0;

        return e.instanceOf = "createNumberMask", e;
      }

      function r(e) {
        return e.split(a).map(function (e) {
          return v.test(e) ? v : e;
        });
      }

      function i(e, t) {
        return e.replace(/\B(?=(\d{3})+(?!\d))/g, t);
      }

      Object.defineProperty(t, "__esModule", {
        value: !0
      });
      var o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
        return typeof e;
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
      };
      t.default = n;
      var u = "$",
          a = "",
          c = ",",
          l = ".",
          s = "-",
          d = /-/,
          f = /\D+/g,
          p = "number",
          v = /\d/,
          y = "[]";
    }, function (e, t, n) {

      function r(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      function i(e, t) {
        e = e.replace(O, v);
        var n = t.placeholderChar,
            r = t.currentCaretPosition,
            i = e.indexOf(y),
            s = e.lastIndexOf(p),
            d = s < i ? -1 : s,
            f = o(e, i + 1, y),
            g = o(e, d - 1, p),
            m = u(e, i),
            h = a(e, i, d, n),
            b = c(e, d, n, r);
        m = l(m), h = l(h), b = l(b, !0);
        var x = m.concat(f).concat(h).concat(g).concat(b);
        return x;
      }

      function o(e, t, n) {
        var r = [];
        return e[t] === n ? r.push(n) : r.push(g, n), r.push(g), r;
      }

      function u(e, t) {
        return t === -1 ? e : e.slice(0, t);
      }

      function a(e, t, n, r) {
        var i = v;
        return t !== -1 && (i = n === -1 ? e.slice(t + 1, e.length) : e.slice(t + 1, n)), i = i.replace(new RegExp("[\\s" + r + "]", h), v), i === y ? f : i.length < 1 ? m : i[i.length - 1] === p ? i.slice(0, i.length - 1) : i;
      }

      function c(e, t, n, r) {
        var i = v;
        return t !== -1 && (i = e.slice(t + 1, e.length)), i = i.replace(new RegExp("[\\s" + n + ".]", h), v), 0 === i.length ? e[t - 1] === p && r !== e.length ? f : v : i;
      }

      function l(e, t) {
        return e.split(v).map(function (e) {
          return e === m ? e : t ? x : b;
        });
      }

      Object.defineProperty(t, "__esModule", {
        value: !0
      });
      var s = n(4),
          d = r(s),
          f = "*",
          p = ".",
          v = "",
          y = "@",
          g = "[]",
          m = " ",
          h = "g",
          b = /[^\s]/,
          x = /[^.\s]/,
          O = /\s/g;
      t.default = {
        mask: i,
        pipe: d.default
      };
    }, function (e, t) {

      function n(e, t) {
        var n = t.currentCaretPosition,
            o = t.rawValue,
            f = t.previousConformedValue,
            p = t.placeholderChar,
            v = e;
        v = r(v);
        var y = v.indexOf(a),
            g = null === o.match(new RegExp("[^@\\s." + p + "]"));
        if (g) return u;
        if (v.indexOf(l) !== -1 || y !== -1 && n !== y + 1 || o.indexOf(i) === -1 && f !== u && o.indexOf(c) !== -1) return !1;
        var m = v.indexOf(i),
            h = v.slice(m + 1, v.length);
        return (h.match(d) || s).length > 1 && v.substr(-1) === c && n !== o.length && (v = v.slice(0, v.length - 1)), v;
      }

      function r(e) {
        var t = 0;
        return e.replace(o, function () {
          return t++, 1 === t ? i : u;
        });
      }

      Object.defineProperty(t, "__esModule", {
        value: !0
      }), t.default = n;
      var i = "@",
          o = /@/g,
          u = "",
          a = "@.",
          c = ".",
          l = "..",
          s = [],
          d = /\./g;
    }]);
  });
});
var maskAddons = unwrapExports(textMaskAddons);
var textMaskAddons_1 = textMaskAddons.textMaskAddons;var Mask, defaultPatternChars;
defaultPatternChars = {
  '1': REGEX.numeric,
  '#': REGEX.widenumeric,
  'a': REGEX.letter,
  '*': REGEX.any
};
Mask = class Mask {
  constructor(field, config) {
    this.field = field;
    this.config = config;
    this.value = '';
    this.prevValue = '';
    this.cursor = 0;
    this.prevCursor = 0;
    this.pattern = this.patternRaw = this.config.pattern;
    this.patternSetter = this.config.setter;
    this.placeholderChar = this.config.placeholder;
    this.placeholderRegex = new RegExp('\\' + (this.placeholderChar || '_'), 'g');
    this.guide = this.config.guide;
    this.keepCharPositions = this.config.keepCharPositions;
    this.chars = primaryBuilder$1.clone(defaultPatternChars, this.config.customPatterns);
    this.setPattern(this.pattern);
  }

  getState(pattern, rawValue) {
    return {
      rawValue,
      guide: this.guide,
      placeholderChar: this.placeholderChar,
      keepCharPositions: this.keepCharPositions,
      currentCaretPosition: this.field.el ? this.field.selection().end : this.cursor,
      previousConformedValue: this.prevValue,
      placeholder: this.getPlaceholder(pattern)
    };
  }

  getPlaceholder(pattern) {
    var char, j, len, placeholder;
    if (IS$1$1.function(pattern)) ;else {
      placeholder = '';

      for (j = 0, len = pattern.length; j < len; j++) {
        char = pattern[j];

        if (IS$1$1.regex(char)) {
          placeholder += this.placeholderChar;
        } else {
          placeholder += char;
        }
      }

      return placeholder;
    }
  }

  resolvePattern(pattern, input, state) {
    var char, copy, i, j, len, offset, trapIndexes;
    pattern = typeof pattern === 'function' ? pattern(input, this.getState(pattern, input)) : pattern;
    offset = 0;
    trapIndexes = [];
    copy = pattern.slice();

    for (i = j = 0, len = copy.length; j < len; i = ++j) {
      char = copy[i];

      if (!(char === '[]')) {
        continue;
      }

      trapIndexes.push(i - offset);
      pattern.splice(i - offset, 1);
      offset++;
    }

    this.prevPattern = this.resolvedPattern;
    this.resolvedPattern = pattern;
    return {
      pattern,
      caretTrapIndexes: trapIndexes
    };
  }

  setPattern(string, updateValue = true, updateField) {
    this.patternRaw = string;
    this.pattern = this.parsePattern(string);
    this.transform = this.parseTransform(string);

    if (updateValue) {
      this.value = this.setValue(this.value);

      if (updateField) {
        return this.field.value = this.value;
      }
    }
  }

  parsePattern(string) {
    var char, escaped, i, j, len, pattern;

    switch (false) {
      case string !== 'EMAIL':
        return maskAddons.emailMask.mask;

      case string !== 'PHONE':
        this.patternSetter = function (value) {
          return repeat('#', Math.max(7, value.length));
        };

        this.guide = false;
        return '#';

      case string !== 'NAME':
        this.patternSetter = function (value) {
          value = value.replace(this.placeholderRegex, '').trim();
          return repeat('a', Math.max(2, value.length));
        };

        return 'a';

      case string !== 'FULLNAME':
        this.patternSetter = function (value) {
          var split;

          if (value[value.length - 1] === ' ') {
            value += 'x';
          }

          split = value.replace(this.placeholderRegex, '').trim().split(/\s+/);

          if (split.length === 4) {
            return;
          }

          return split.map(function (part) {
            return repeat('a', Math.max(2, part.length));
          }).join(' ');
        };

        return 'a';

      case string !== 'DATE':
        return [/\d/, /\d/, '/', /\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/];

      case !(string[0] === 'DATE' && IS$1$1.string(string[1])):
        return string[1].split('').map(char => {
          if (REGEX.letter.test(char)) {
            return /\d/;
          } else {
            return char;
          }
        });

      case string !== 'NUMBER':
        return maskAddons.createNumberMask({
          prefix: this.config.prefix || '',
          suffix: this.config.suffix || '',
          includeThousandsSeparator: this.config.sep ? true : false,
          thousandsSeparatorSymbol: IS$1$1.string(this.config.sep) ? this.config.sep : void 0,
          allowDecimal: this.config.decimal,
          decimalLimit: IS$1$1.number(this.config.decimal) ? this.config.decimal : void 0,
          integerLimit: IS$1$1.number(this.config.limit) ? this.config.limit : void 0
        });

      case !IS$1$1.array(string):
        return string;

      default:
        pattern = [];

        for (i = j = 0, len = string.length; j < len; i = ++j) {
          char = string[i];

          if (char === '\\') {
            escaped = true;
            continue;
          }

          pattern.push(escaped ? char : this.chars[char] || char);
          escaped = false;
        }

        return pattern;
    }
  }

  parseTransform(string) {
    switch (false) {
      case string !== 'EMAIL':
        return maskAddons.emailMask.pipe;

      case string !== 'DATE':
        return maskAddons.createAutoCorrectedDatePipe('mm/dd/yyyy');

      case !(string[0] === 'DATE' && IS$1$1.string(string[1])):
        return maskAddons.createAutoCorrectedDatePipe(string[1]);

      case !this.config.transform:
        return this.config.transform;
    }
  }

  setValue(input) {
    var caretTrapIndexes, conformedValue, indexesOfPipedChars, newPattern, pattern, state, transformed;

    if (this.patternSetter) {
      newPattern = this.patternSetter(input) || this.pattern;

      if (newPattern !== this.patternRaw && newPattern !== this.pattern) {
        this.setPattern(newPattern, false);
      }
    }

    ({
      caretTrapIndexes,
      pattern
    } = this.resolvePattern(this.pattern, input));

    if (pattern === false) {
      return this.value;
    }

    this.prevValue = this.value;
    this.prevCursor = this.cursor;
    state = this.getState(pattern, input);
    ({
      conformedValue
    } = maskCore.conformToMask(input, pattern, state));

    if (this.transform) {
      transformed = this.transform(conformedValue, state);
    }

    if (transformed === false) {
      return this.value;
    }

    if (IS$1$1.string(transformed)) {
      conformedValue = transformed;
    } else if (IS$1$1.object(transformed)) {
      indexesOfPipedChars = transformed.indexesOfPipedChars;
      conformedValue = transformed.value;
    }

    this.cursor = maskCore.adjustCaretPosition(primaryBuilder$1(state, {
      indexesOfPipedChars,
      caretTrapIndexes,
      conformedValue
    }));
    return this.value = conformedValue;
  }

  validate(input) {
    var char, i, j, len, pattern;

    if (input !== this.value && this.patternSetter) {
      pattern = this.patternSetter(input) || this.pattern;
    } else {
      pattern = this.resolvedPattern;

      if (!pattern) {
        ({
          pattern
        } = this.resolvePattern(this.pattern, input));
      }
    }

    if (pattern === false) {
      return true;
    }

    for (i = j = 0, len = pattern.length; j < len; i = ++j) {
      char = pattern[i];

      switch (false) {
        case !!input[i]:
          return false;

        case !(IS$1$1.regex(char) && !char.test(input[i])):
          return false;

        case !(IS$1$1.string(char) && input[i] !== char):
          return false;
      }
    }

    return true;
  }

  isEmpty() {
    var char, i, input, j, len, pattern;
    input = this.value;
    pattern = this.resolvedPattern;

    if (!pattern) {
      if (this.patternSetter) {
        pattern = this.patternSetter(input);
      }

      ({
        pattern
      } = this.resolvePattern(pattern || this.pattern, input));
    }

    if (input === this.config.prefix || input === this.config.suffix) {
      return true;
    }

    for (i = j = 0, len = pattern.length; j < len; i = ++j) {
      char = pattern[i];

      switch (false) {
        case !!input[i]:
          return true;

        case !IS$1$1.regex(char):
          return !char.test(input[i]);
      }
    }

    return false;
  }

};
var Mask$1 = Mask;var COLORS$1 = {
  red: '#cc4820',
  green: '#72c322',
  orange: '#ff9c00',
  black: '#181818',
  grey_dark: '#5e5e5e',
  grey: '#909090',
  grey_semi_light: '#bebebe',
  grey_light: '#d3d3d3',
  grey_light2: '#dddddd',
  grey_light3: '#f2f5f7',
  grey_light4: '#e5e5e5'
};var textFieldTemplate = quickdom.template(['div', {
  ref: 'field',
  style: {
    position: 'relative',
    verticalAlign: 'top',
    display: 'none',
    boxSizing: 'border-box',
    fontFamily: function (field) {
      return field.settings.fontFamily;
    },
    textAlign: 'left',
    $visible: {
      display: 'inline-block'
    },
    $showError: {
      animation: '0.2s fieldErrorShake'
    }
  }
}, ['div', {
  ref: 'label',
  styleAfterInsert: true,
  style: {
    position: 'absolute',
    zIndex: 1,
    top: function (field) {
      return this.styleParsed('fontSize', true) * 0.7;
    },
    left: function (field) {
      var ref;
      return shorthandSideValue(field.settings.padding, 'left') + (((ref = field.el.child.icon) != null ? ref.width : void 0) || 0);
    },
    padding: function (field) {
      return `0 ${field.settings.inputPadding}px`;
    },
    fontFamily: 'inherit',
    fontSize: function (field) {
      return field.settings.labelSize || field.settings.fontSize * (11 / 14);
    },
    fontWeight: 600,
    lineHeight: 1,
    color: COLORS$1.grey,
    opacity: 0,
    transition: 'opacity 0.2s, color 0.2s',
    whiteSpace: 'nowrap',
    userSelect: 'none',
    cursor: 'default',
    pointerEvents: 'none',
    $filled: {
      $showLabel: {
        opacity: 1
      }
    },
    $focus: {
      color: COLORS$1.orange
    },
    $showError: {
      color: COLORS$1.red
    }
  }
}], ['div', {
  ref: 'innerwrap',
  style: {
    position: 'relative',
    height: function (field) {
      return field.settings.height;
    },
    backgroundColor: 'white',
    borderWidth: function (field) {
      return field.settings.border;
    },
    borderStyle: 'solid',
    borderColor: COLORS$1.grey_light,
    borderRadius: '2px',
    boxSizing: 'border-box',
    fontFamily: 'inherit',
    transition: 'border-color 0.2s',
    $focus: {
      borderColor: COLORS$1.orange
    },
    $showError: {
      borderColor: COLORS$1.red
    },
    $disabled: {
      borderColor: COLORS$1.grey_light,
      backgroundColor: COLORS$1.grey_light
    }
  }
}, ['input', {
  ref: 'input',
  type: 'text',
  styleAfterInsert: true,
  style: {
    position: 'relative',
    zIndex: 3,
    display: 'inline-block',
    verticalAlign: 'top',
    height: function () {
      return this.parent.styleSafe('height', 1) || this.parent.styleSafe('height');
    },
    width: function (field) {
      var iconSibling, inputSibling, padding, paddingLeft, paddingRight, subtract, width;

      if (!field.settings.autoWidth) {
        subtract = 0;

        if (iconSibling = field.el.child.icon) {
          subtract += iconSibling.width;
        }

        if (inputSibling = field.el.child[field.settings.inputSibling]) {
          width = inputSibling.styleParsed('width', 1) || 0;
          padding = inputSibling.styleParsed('padding', 1) || 0;
          paddingLeft = inputSibling.styleParsed('paddingLeft', 1) || padding || 0;
          paddingRight = inputSibling.styleParsed('paddingRight', 1) || padding || 0;
          subtract += width + paddingLeft + paddingRight;
        }

        return `calc(100% - ${subtract}px)`;
      }
    },
    padding: function (field) {
      if (this.padding == null) {
        this.padding = Math.max(0, calcPadding(field.settings.height, 14) - 3);
      }

      return `${this.padding}px ${field.settings.inputPadding}px`;
    },
    margin: '0',
    backgroundColor: 'transparent',
    appearance: 'none',
    border: 'none',
    outline: 'none',
    fontFamily: 'inherit',
    fontSize: function (field) {
      return field.settings.fontSize;
    },
    color: COLORS$1.black,
    boxSizing: 'border-box',
    boxShadow: 'none',
    whiteSpace: 'nowrap',
    backgroundClip: 'content-box',
    // semi-fix for yellow autofill background
    transform: 'translateY(0)',
    transition: 'transform 0.2s, -webkit-transform 0.2s',
    $disabled: {
      cursor: 'not-allowed'
    },
    $filled: {
      $showLabel: {
        transform: function (field) {
          var label, totalHeight, translation, workableHeight;

          if (this.translation != null || !(label = field.el.child.label) || label.styleSafe('position', 1) !== 'absolute') {
            return this.translation;
          }

          totalHeight = this.parent.styleParsed('height', 1);
          workableHeight = totalHeight - (label.styleParsed('fontSize', 1) + label.styleParsed('top', 1) * 2);
          translation = Math.max(0, Math.floor((totalHeight - workableHeight) / 4));
          return `translateY(${translation}px)`;
        }
      }
    }
  }
}], ['div', {
  ref: 'placeholder',
  styleAfterInsert: true,
  style: {
    position: 'absolute',
    zIndex: 2,
    top: '0px',
    left: function (field) {
      var ref;
      return ((ref = field.el.child.icon) != null ? ref.width : void 0) || 0;
    },
    fontFamily: function (field) {
      return field.el.child.input.styleSafe('fontFamily', 1);
    },
    fontSize: function (field) {
      return field.el.child.input.styleSafe('fontSize', 1);
    },
    padding: function (field) {
      var horiz, verti;
      verti = field.el.child.input.styleParsed('paddingTop', 1) || field.el.child.input.styleParsed('paddingTop');
      horiz = field.el.child.input.styleParsed('paddingLeft', 1) || field.el.child.input.styleParsed('paddingLeft');
      return `${verti + 3}px ${horiz}px`;
    },
    color: COLORS$1.black,
    opacity: 0.5,
    pointerEvents: 'none',
    userSelect: 'none',
    whiteSpace: 'nowrap',
    transform: 'translateY(0)',
    transition: 'transform 0.2s, -webkit-transform 0.2s',
    $filled: {
      visibility: 'hidden',
      $showLabel: {
        transform: function (field) {
          return field.el.child.input.raw.style.transform;
        }
      }
    }
  }
}]], ['div', {
  ref: 'help',
  styleAfterInsert: true,
  style: {
    position: 'absolute',
    top: '110%',
    left: function (field) {
      return shorthandSideValue(field.settings.padding, 'left');
    },
    fontFamily: 'inherit',
    fontSize: '11px',
    color: COLORS$1.grey,
    display: 'none',
    $showError: {
      color: COLORS$1.red
    },
    $showHelp: {
      display: 'block'
    }
  }
}]]);
var icon = quickdom.template(['div', {
  ref: 'icon',
  styleAfterInsert: true,
  style: {
    position: 'relative',
    zIndex: 2,
    display: 'inline-block',
    boxSizing: 'border-box',
    width: function (field) {
      return field.settings.iconSize;
    },
    height: function (field) {
      return field.settings.iconSize;
    },
    fontSize: function (field) {
      return field.settings.iconSize;
    },
    paddingLeft: function (field) {
      return field.settings.inputPadding;
    },
    paddingTop: function (field) {
      return this.parent.styleParsed('height', 1) / 2 - field.settings.iconSize / 2;
    },
    lineHeight: '1em',
    userSelect: 'none'
  },
  methods: {
    width: {
      get: function () {
        if (this._inserted) {
          return this.raw.offsetWidth;
        } else {
          return this.styleParsed('width', 1) || this.related.settings.iconSize;
        }
      }
    }
  }
}]); // @styleParsed('width',1) or @raw.offsetWidth or @related.settings.iconSize or 0

var checkmark$1 = quickdom.template(['div', {
  ref: 'checkmark',
  styleAfterInsert: true,
  style: {
    position: 'relative',
    zIndex: 4,
    display: 'none',
    width: 26,
    height: '100%',
    paddingTop: function () {
      return this.parent.styleParsed('height', 1) / 2 - 13;
    },
    paddingRight: function (field) {
      return field.settings.inputPadding;
    },
    verticalAlign: 'top',
    $filled: {
      display: 'inline-block'
    }
  }
}, ['div', {
  ref: 'checkmark_innerwrap',
  style: {
    width: '20px',
    height: '20px',
    borderRadius: '50%',
    borderWidth: '3px',
    borderStyle: 'solid',
    borderColor: COLORS$1.green,
    transform: 'scale(0.8)',
    // transformOrigin: '100% 0'
    $showError: {
      borderColor: COLORS$1.red
    }
  }
}, ['div', {
  ref: 'checkmark_mask1',
  styleAfterInsert: true,
  style: {
    position: 'absolute',
    top: '-4px',
    left: '-10px',
    width: '15px',
    height: '30px',
    borderRadius: '30px 0 0 30px',
    backgroundColor: function (field) {
      return defaultColor(field.els.innerwrap.styleSafe('backgroundColor', 1), 'white');
    },
    transform: 'rotate(-45deg)',
    transformOrigin: '15px 15px 0'
  }
}], ['div', {
  ref: 'checkmark_mask2',
  styleAfterInsert: true,
  style: {
    position: 'absolute',
    top: '-5px',
    left: '8px',
    width: '15px',
    height: '30px',
    borderRadius: '0 30px 30px 0',
    backgroundColor: function (field) {
      return defaultColor(field.els.innerwrap.styleSafe('backgroundColor', 1), 'white');
    },
    transform: 'rotate(-45deg)',
    transformOrigin: '0 15px 0',
    $filled: {
      animation: '4.25s ease-in checkmarkRotatePlaceholder',
      $invalid: {
        animation: ''
      }
    }
  }
}], ['div', {
  ref: 'checkmark_lineWrapper',
  style: {
    $filled: {
      $invalid: {
        position: 'relative',
        zIndex: 2,
        animation: '0.55s checkmarkAnimateError',
        transformOrigin: '50% 10px'
      }
    }
  }
}, ['div', {
  ref: 'checkmark_lineShort',
  style: {
    position: 'absolute',
    zIndex: 2,
    top: '10px',
    left: '3px',
    display: 'block',
    width: '8px',
    height: '3px',
    borderRadius: '2px',
    backgroundColor: COLORS$1.green,
    transform: 'rotate(45deg)',
    $filled: {
      animation: '0.75s checkmarkAnimateSuccessTip'
    },
    $invalid: {
      backgroundColor: COLORS$1.red,
      left: '4px',
      top: '8px',
      width: '12px',
      $filled: {
        animation: ''
      }
    }
  }
}], ['div', {
  ref: 'checkmark_lineLong',
  style: {
    position: 'absolute',
    zIndex: 2,
    top: '8px',
    right: '2px',
    display: 'block',
    width: '12px',
    height: '3px',
    borderRadius: '2px',
    backgroundColor: COLORS$1.green,
    transform: 'rotate(-45deg)',
    $filled: {
      animation: '0.75s checkmarkAnimateSuccessLong'
    },
    $invalid: {
      backgroundColor: COLORS$1.red,
      top: '8px',
      left: '4px',
      right: 'auto',
      $filled: {
        animation: ''
      }
    }
  }
}]], ['div', {
  ref: 'checkmark_placeholder',
  style: {
    position: 'absolute',
    zIndex: 2,
    top: '-4px',
    left: '-3px',
    width: '20px',
    height: '20px',
    borderRadius: '50%',
    borderWidth: '3px',
    borderStyle: 'solid',
    borderColor: hexToRGBA(COLORS$1.green, 0.4),
    $invalid: {
      borderColor: hexToRGBA(COLORS$1.red, 0.4)
    }
  }
}], ['div', {
  ref: 'checkmark_patch',
  styleAfterInsert: true,
  style: {
    position: 'absolute',
    zIndex: 1,
    top: '-2px',
    left: '6px',
    width: '4px',
    height: '28px',
    backgroundColor: function (field) {
      return defaultColor(field.els.innerwrap.styleSafe('backgroundColor', 1), 'white');
    },
    transform: 'rotate(-45deg)'
  }
}]]]);
var templates =
/*#__PURE__*/
Object.freeze({
  __proto__: null,
  'default': textFieldTemplate,
  icon: icon,
  checkmark: checkmark$1
});var defaults$1 = {
  placeholder: true,
  validWhenIsChoice: false,
  validWhenRegex: false,
  autoWidth: false,
  maxWidth: '100%',
  minWidth: 2,
  height: 46,
  checkmark: true,
  keyboard: 'text',
  dropdown: {
    lockScroll: false
  },
  choices: null,
  minLength: null,
  maxLength: null,
  inputSibling: 'checkmark',
  mask: {
    pattern: false,
    placeholder: '_',
    guide: true,
    customPatterns: false
  }
};var TextField;

TextField = function () {
  class TextField extends Field$1 {
    constructor() {
      super(...arguments);

      if (this._value == null) {
        this._value = '';
      }

      this.state.typing = false;
      this.cursor = {
        prev: 0,
        current: 0
      };

      if (!this.settings.validWhenRegex) {
        if (this.settings.keyboard === 'email' && this.settings.required) {
          this.settings.validWhenRegex = REGEX.email;
        } else if (this.settings.mask === 'NAME' || this.settings.mask.pattern === 'NAME') {
          this.settings.validWhenRegex = /^[a-zA-Z]{2}/;
        } else if (this.settings.mask === 'FULLNAME' || this.settings.mask.pattern === 'FULLNAME') {
          this.settings.validWhenRegex = /^[a-zA-Z]+\s+[a-zA-Z]+/;
        }
      }

      if (!this.settings.mask.pattern) {
        if (IS$1$1.string(this.settings.mask)) {
          this.settings.mask = primaryBuilder$1.deep.clone(this.defaults.mask, {
            pattern: this.settings.mask
          });
        } else if (IS$1$1.object(this.settings.mask)) {
          this.settings.mask.pattern = function () {
            switch (this.settings.keyboard) {
              case 'date':
                return 'DATE';

              case 'number':
                return 'NUMBER';

              case 'phone':
              case 'tel':
                return 'PHONE';

              case 'email':
                return 'EMAIL';
            }
          }.call(this);
        }
      }

      if (this.settings.mask.pattern) {
        this.mask = new Mask$1(this, this.settings.mask);
      }

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      if (this.dropdown && this.selected && this._value === this.selected.label) {
        return this.selected.value;
      } else {
        return this._value;
      }
    }

    _setValue(newValue) {
      if (IS$1$1.string(newValue) || IS$1$1.number(newValue)) {
        newValue = String(newValue);
        return this._value = this.mask ? this.mask.setValue(newValue) : newValue;
      }
    }

    _recalcDisplay() {
      if (this.settings.autoWidth) {
        return this._value = this._value;
      }
    }

    _createElements() {
      var globalOpts;
      globalOpts = {
        relatedInstance: this
      };
      this.el = this.template.spawn(this.settings.templates.default, globalOpts);

      if (this.settings.choices) {
        this.dropdown = new Dropdown$1(this.settings.choices, this);
        this.dropdown.appendTo(this.el.child.innerwrap);
      }

      if (this.settings.icon) {
        this.templates.icon.spawn(this.settings.templates.icon, globalOpts).append(this.settings.icon).insertBefore(this.el.child.input);
      }

      if (this.settings.checkmark) {
        this.templates.checkmark.spawn(this.settings.templates.checkmark, globalOpts).insertAfter(this.el.child.input);
      }

      this.el.child.input.prop('type', function () {
        switch (this.settings.keyboard) {
          case 'number':
          case 'tel':
          case 'phone':
            return 'tel';

          case 'password':
            return 'password';

          case 'url':
            return 'url';

          default:
            // when 'email' then 'email'
            return 'text';
        }
      }.call(this));
      this.el.state('hasLabel', this.settings.label);
      this.el.child.innerwrap.raw._quickField = this.el.child.input.raw._quickField = this;
      return this.el.childf;
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_display();

      this._attachBindings_display_autoWidth();

      this._attachBindings_value();

      this._attachBindings_autocomplete();

      this._attachBindings_stateTriggers();
    }

    _attachBindings_elState() {
      simplybind('visible').of(this.state).to(visible => {
        return this.el.state('visible', visible);
      });
      simplybind('hovered').of(this.state).to(hovered => {
        return this.el.state('hover', hovered);
      });
      simplybind('focused').of(this.state).to(focused => {
        return this.el.state('focus', focused);
      });
      simplybind('filled').of(this.state).to(filled => {
        return this.el.state('filled', filled);
      });
      simplybind('disabled').of(this.state).to(disabled => {
        return this.el.state('disabled', disabled);
      });
      simplybind('showLabel').of(this.state).to(showLabel => {
        return this.el.state('showLabel', showLabel);
      });
      simplybind('showError').of(this.state).to(showError => {
        return this.el.state('showError', showError);
      });
      simplybind('showHelp').of(this.state).to(showHelp => {
        return this.el.state('showHelp', showHelp);
      });
      simplybind('valid').of(this.state).to(valid => {
        this.el.state('valid', valid);
        return this.el.state('invalid', !valid);
      });
    }

    _attachBindings_display() {
      simplybind('placeholder').of(this.state).to('text').of(this.el.child.placeholder).transform(placeholder => {
        switch (false) {
          case !(placeholder === true && this.settings.label):
            return this.settings.label;

          case !IS$1$1.string(placeholder):
            return placeholder;

          default:
            return '';
        }
      });
      simplybind('disabled', {
        updateOnBind: this.state.disabled
      }).of(this.state).to((disabled, prev) => {
        if (this.settings.checkmark) {
          if (disabled || !disabled && prev != null) {
            return setTimeout(() => {
              this.el.child.checkmark_mask1.recalcStyle();
              this.el.child.checkmark_mask2.recalcStyle();
              return this.el.child.checkmark_patch.recalcStyle();
            });
          }
        }
      });
    } // @el.child.checkmark.recalcStyle(true)


    _attachBindings_display_autoWidth() {
      simplybind('width', {
        updateEvenIfSame: true
      }).of(this.state).to(width => {
        return (this.settings.autoWidth ? this.el.child.input : this.el).style('width', width);
      }).transform(this._formatWidth.bind(this)).updateOn('isMobile').of(this.state);

      if (this.settings.autoWidth) {
        simplybind('_value', {
          updateEvenIfSame: true,
          updateOnBind: false
        }).of(this).to('width').of(this.state).transform(() => {
          return `${this._getInputAutoWidth()}px`;
        }).updateOn('event:inserted').of(this.el).updateOn('visible').of(this.state);
      }
    }

    _attachBindings_value() {
      var input, resetInput;
      input = this.el.child.input.raw;

      resetInput = () => {
        var filled;
        filled = !this.mask.isEmpty();

        if (!filled) {
          this.selection(this.mask.cursor = 0);
          this._value = '';
          this.state.filled = false;
        }

        return filled;
      };

      simplybind('event:input').of(input).to(() => {
        this.value = input.value;

        if (this.mask) {
          this.selection(this.mask.cursor);
        }

        return this.emit('input', this.value);
      });
      simplybind('_value', {
        updateEvenIfSame: !!this.mask
      }).of(this).to('value').of(input).and.to(value => {
        var filled;
        filled = !!value;

        if (filled && this.mask && this.mask.guide && (!this.state.focused || this.mask.cursor === 0)) {
          filled = resetInput();
        }

        this.state.filled = filled;

        if (filled) {
          this.state.interacted = true;
        }

        this.state.valid = this.validate(void 0, true);

        if (!this.state.focused) {
          return this.emit('input', this.value);
        }
      });
      simplybind('event:keydown').of(this.el.child.input).to(event => {
        if (event.keyCode === KEYCODES.enter) {
          this.emit('submit');
        }

        return this.emit(`key-${event.keyCode}`);
      });

      if (this.mask && this.mask.guide) {
        simplybind('event:blur').of(this.el.child.input).to(resetInput);
      }
    }

    _attachBindings_autocomplete() {
      if (this.dropdown) {
        simplybind.defaultOptions.updateOnBind = false;
        simplybind('typing', {
          updateEvenIfSame: true
        }).of(this.state).to(isTyping => {
          if (isTyping) {
            if (!this._value) {
              return;
            }

            if (this.dropdown.isOpen) {
              return this.dropdown.list.calcDisplay();
            } else {
              this.dropdown.isOpen = true;
              return simplybind('event:click').of(document).once.to(() => {
                return this.dropdown.isOpen = false;
              }).condition(event => {
                return !quickdom(event.target).parentMatching(parent => {
                  return parent === this.el.child.innerwrap;
                });
              });
            }
          } else {
            return this.dropdown.isOpen = false;
          }
        });
        simplybind('_value').of(this).to(value => {
          var choice, i, len, ref, shouldBeVisible;
          ref = this.dropdown.choices;

          for (i = 0, len = ref.length; i < len; i++) {
            choice = ref[i];
            shouldBeVisible = !value ? true : fuzzyMatch(value, choice.label);

            if (choice.visible !== shouldBeVisible) {
              choice.visible = shouldBeVisible;
            }
          }

          if (this.dropdown.isOpen && !value) {
            this.dropdown.isOpen = false;
          }
        });
        this.dropdown.onSelected(selectedChoice => {
          this.selected = selectedChoice;
          this.value = selectedChoice.label;
          this.dropdown.isOpen = false;
          return this.selection(this.el.child.input.raw.value.length);
        });
        simplybind.defaultOptions.updateOnBind = true;
      }
    }

    _attachBindings_stateTriggers() {
      simplybind('event:mouseenter').of(this.el.child.input).to(() => {
        return this.state.hovered = true;
      });
      simplybind('event:mouseleave').of(this.el.child.input).to(() => {
        return this.state.hovered = false;
      });
      simplybind('event:focus').of(this.el.child.input).to(() => {
        this.state.focused = true;

        if (this.state.disabled) {
          return this.blur();
        }
      });
      simplybind('event:blur').of(this.el.child.input).to(() => {
        return this.state.typing = this.state.focused = false;
      });
      simplybind('event:input').of(this.el.child.input).to(() => {
        return this.state.typing = true;
      });
      simplybind('event:keydown').of(this.el.child.input).to(() => {
        return this.cursor.prev = this.selection().end;
      });
    }

    _scheduleCursorReset() {
      var currentCursor, diffIndex, newCursor;
      diffIndex = getIndexOfFirstDiff(this.mask.value, this.mask.prev.value);
      currentCursor = this.cursor.current;
      newCursor = this.mask.normalizeCursorPos(currentCursor, this.cursor.prev);

      if (newCursor !== currentCursor) {
        this.selection(newCursor);
      }
    }

    _setValueIfNotSet() {
      if (this.el.child.input.raw.value !== this._value) {
        this.el.child.input.raw.value = this._value;
      }
    }

    _getInputAutoWidth() {
      var inputWidth, labelWidth;

      if (this._value) {
        this._setValueIfNotSet();

        this.el.child.input.style('width', 0);
        this.el.child.input.raw.scrollLeft = 1e+10;
        inputWidth = Math.max(this.el.child.input.raw.scrollLeft + this.el.child.input.raw.offsetWidth, this.el.child.input.raw.scrollWidth) + 2;
        labelWidth = this.settings.label && this.el.child.label.styleSafe('position') === 'absolute' ? this.el.child.label.rect.width : 0;
      } else {
        inputWidth = this.el.child.placeholder.rect.width;
        labelWidth = 0;
      }

      return Math.min(this._getWidthSetting('max'), Math.max(this._getWidthSetting('min'), inputWidth, labelWidth));
    }

    _getWidthSetting(target) {
      var parent, parentWidth, result;

      if (target === 'min' || target === 'max') {
        target += 'Width';
      }

      if (typeof this.settings[target] === 'number') {
        result = this.settings[target];
      } else if (typeof this.settings[target] === 'string') {
        result = parseFloat(this.settings[target]);

        if (includes$2(this.settings[target], '%')) {
          if ((parent = this.el.parent) && parent.style('display') === 'block') {
            parentWidth = parent.styleParsed('width') - parent.styleParsed('paddingLeft') - parent.styleParsed('paddingRight') - 2;
            result = parentWidth * (result / 100);
          } else {
            result = 0;
          }
        }
      }

      return result || (target === 'minWidth' ? 0 : 2e308);
    }

    _validate(providedValue) {
      var matchingChoice, ref;

      if (this.settings.validWhenRegex && IS$1$1.regex(this.settings.validWhenRegex)) {
        if (!this.settings.validWhenRegex.test(providedValue)) {
          return false;
        }
      }

      if (this.settings.validWhenIsChoice && ((ref = this.settings.choices) != null ? ref.length : void 0)) {
        matchingChoice = this.settings.choices.filter(function (choice) {
          return choice.value === providedValue;
        });

        if (!matchingChoice.length) {
          return false;
        }
      }

      if (this.settings.minLength) {
        if (providedValue.length < this.settings.minLength) {
          return false;
        }
      }

      if (this.settings.maxLength) {
        if (providedValue.length >= this.settings.maxLength) {
          return false;
        }
      }

      if (this.mask) {
        if (!this.mask.validate(providedValue)) {
          return false;
        }
      }

      return true;
    }

    selection(arg) {
      var end, start;

      if (IS$1$1.object(arg)) {
        start = arg.start;
        end = arg.end;
      } else {
        start = arg;
        end = arguments[1];
      }

      if (start != null) {
        if (!end || end < start) {
          end = start;
        }

        this.el.child.input.raw.setSelectionRange(start, end);
      } else {
        return {
          'start': this.el.child.input.raw.selectionStart,
          'end': this.el.child.input.raw.selectionEnd
        };
      }
    }

    focus() {
      return this.el.child.input.raw.focus();
    }

    blur() {
      return this.el.child.input.raw.blur();
    }

  }

  TextField.prototype.template = textFieldTemplate;
  TextField.prototype.templates = templates;
  TextField.prototype.defaults = defaults$1;
  return TextField;
}.call(undefined);

var TextField$1 = TextField;var version$3 = "1.0.100";
var createBuilder, quickfield$1;

createBuilder = function (settingOverrides, templateOverrides) {
  var builder;

  builder = function (settings) {
    if (arguments.length > 1) {
      settings = primaryBuilder$1.clone(...arguments);
    }

    if (!IS$1$1.object(settings)) {
      settings = {};
    }

    if (settings.type == null) {
      settings.type = 'text';
    }

    if (!Field$1[settings.type]) {
      throw new Error(`QuickField: '${settings.type}' is not a valid/registered field type`);
    }

    registerAnimations();
    return new Field$1[settings.type](settings, builder, settingOverrides, templateOverrides);
  };

  builder.register = function (type, targetField) {
    var i, len, requiredMethod;

    if (!IS$1$1.string(type) || !IS$1$1.function(targetField)) {
      throw new Error("QuickField Registration: invalid arguments");
    }

    for (i = 0, len = REQUIRED_FIELD_METHODS.length; i < len; i++) {
      requiredMethod = REQUIRED_FIELD_METHODS[i];

      if (!targetField.prototype[requiredMethod]) {
        throw new Error(`QuickField Registration: '${requiredMethod}' method is required in order to register the field`);
      }
    }

    Field$1[type] = targetField;
    return this;
  };

  builder.config = function (newSettings, newTemplates) {
    var config, globalConfig, name, originalTemplates, outputSettings, outputTemplates, ref, templates, type;

    if (!IS$1$1.object(newSettings)) {
      throw new Error(`QuickField Config: invalid config object provided ${String(newSettings)}`);
    }

    outputSettings = Object.create(null);

    for (type in newSettings) {
      config = newSettings[type];

      if (type === 'global') {
        outputSettings.globalDefaults = primaryBuilder$1.deep.notDeep(Field$1.shallowSettings).clone(Field$1.prototype.globalDefaults, config);
      } else if (Field$1[type]) {
        outputSettings[type] = primaryBuilder$1.clone.deep.notDeep(Field$1.shallowSettings)(Field$1[type].prototype.defaults, config);
      }
    }

    if (IS$1$1.object(newTemplates)) {
      outputTemplates = Object.create(null);
      globalConfig = newTemplates.global;

      if (globalConfig && globalConfig.field && !globalConfig.default) {
        globalConfig.default = globalConfig.field;
      }

      for (type in Field$1) {
        originalTemplates = (ref = Field$1[type].prototype) != null ? ref.templates : void 0;
        templates = newTemplates[type] || globalConfig;

        if (!originalTemplates) {
          continue;
        }

        if (!templates) {
          outputTemplates[type] = originalTemplates;
          continue;
        }

        if (templates.field && !templates.default) {
          templates.default = templates.field;
        }

        outputTemplates[type] = Object.create(null);

        for (name in templates) {
          config = templates[name];

          if (name === 'field' || !originalTemplates[name]) {
            continue;
          }

          if (globalConfig && globalConfig[name]) {
            config = primaryBuilder$1.clone.deep.concat(globalConfig[name], config);
          }

          outputTemplates[type][name] = originalTemplates[name].extend(config);
        }

        for (name in originalTemplates) {
          config = originalTemplates[name];

          if (!outputTemplates[type][name]) {
            outputTemplates[type][name] = config;
          }
        }
      }
    }

    return createBuilder(outputSettings, outputTemplates);
  };

  Object.defineProperty(builder, 'fields', {
    get: function () {
      return primaryBuilder$1.clone.own.notKeys('instances')(Field$1);
    }
  });
  builder.settingOverrides = settingOverrides;
  builder.templateOverrides = templateOverrides;
  builder.version = version$3;
  builder.Field = Field$1;
  return builder;
}; // import NumberField from './fields/number'
// import SelectField from './fields/select'
// import ChoiceField from './fields/choice'
// import TruefalseField from './fields/truefalse'
// import ToggleField from './fields/toggle'
// import GroupField from './fields/group'
// import RepeaterField from './fields/repeater'
// import FileField from './fields/file'
// import CheckboxField from './fields/checkbox'


quickfield$1 = createBuilder();
quickfield$1.register('text', TextField$1); // quickfield.register 'textarea', TextareaField
// quickfield.register 'number', NumberField
// quickfield.register 'select', SelectField
// quickfield.register 'choice', ChoiceField
// quickfield.register 'truefalse', TruefalseField
// quickfield.register 'toggle', ToggleField
// quickfield.register 'group', GroupField
// quickfield.register 'repeater', RepeaterField
// quickfield.register 'checkbox', FileField
// quickfield.register 'file', CheckboxField

var quickfield$1$1 = quickfield$1;var defaults$2 = {
  placeholder: true,
  validWhenRegex: false,
  autoWidth: false,
  autoHeight: true,
  minHeight: 46,
  maxWidth: '100%',
  maxHeight: 2e308,
  minWidth: 2,
  minLength: null,
  maxLength: null,
  counter: false
}; // dropdown: {storeSelected:false, lockScroll:false}
var template$2 = textFieldTemplate.extend({
  children: {
    'innerwrap': {
      options: {
        style: {
          overflow: 'hidden',
          height: function (field) {
            return field.settings.minHeight || 46;
          },
          width: function (field) {
            if (!field.settings.autoWidth) {
              return '100%';
            }
          }
        }
      }
    },
    'label': {
      options: {
        style: {
          left: function (field) {
            return shorthandSideValue(field.settings.padding, 'left');
          },
          top: '7.6px'
        }
      }
    },
    'input': {
      type: 'textarea',
      options: {
        type: null,
        styleAfterInsert: true,
        style: {
          resize: 'none',
          whiteSpace: 'normal',
          width: '100%',
          height: function () {
            return `calc(100% - ${this.styleSafe('marginTop', true)} - ${this.styleSafe('marginBottom', true)})`;
          },
          margin: '0',
          marginTop: '15px',
          marginBottom: '12px',
          padding: '0 12px'
        }
      }
    },
    'placeholder': {
      options: {
        styleAfterInsert: true,
        style: {
          left: 0,
          padding: function (field) {
            var horiz, verti;
            horiz = field.el.child.input.styleSafe('paddingLeft', true) || field.el.child.input.styleSafe('paddingLeft');
            verti = field.el.child.input.styleSafe('marginTop', true) || field.el.child.input.styleSafe('marginTop');
            return `${verti} ${horiz}`;
          }
        }
      }
    }
  }
});
var counter = quickdom.template(['div', {
  ref: 'counter',
  style: {
    position: 'absolute',
    bottom: -10,
    right: 0,
    fontSize: 10,
    fontWeight: 500
  }
}]);
var templates$1 =
/*#__PURE__*/
Object.freeze({
  __proto__: null,
  'default': template$2,
  counter: counter
});var TextareaField;

TextareaField = function () {
  class TextareaField extends Field$1 {
    constructor() {
      super(...arguments);

      if (this._value == null) {
        this._value = '';
      }

      this.state.height = this.settings.autoHeight ? 'auto' : this.settings.height;
      this.state.typing = false;
      this.cursor = {
        prev: 0,
        current: 0
      };

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      return this._value;
    }

    _setValue(newValue) {
      if (IS$1$1.string(newValue) || IS$1$1.number(newValue)) {
        return this._value = String(newValue);
      }
    }

    _recalcDisplay() {
      if (this.settings.autoHeight || this.settings.autoWidth) {
        return this._value = this._value;
      }
    }

    _createElements() {
      var forceOpts;
      forceOpts = {
        relatedInstance: this
      };
      this.el = this.template.spawn(this.settings.templates.defaults, forceOpts);
      this.el.state('hasLabel', this.settings.label);
      this.el.child.innerwrap.raw._quickField = this.el.child.input.raw._quickField = this;
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_display();

      this._attachBindings_display_autoWidth();

      this._attachBindings_display_autoHeight();

      this._attachBindings_value();

      this._attachBindings_autocomplete();

      this._attachBindings_stateTriggers();
    }

    _attachBindings_display_autoHeight() {
      simplybind('height', {
        updateEvenIfSame: true
      }).of(this.state).transformSelf(function (value) {
        if (isNaN(value) && isNaN(parseFloat(value))) {
          return 'auto';
        } else {
          return value;
        }
      }).to(height => {
        return this.el.child.innerwrap.style('height', height);
      }).updateOn('event:inserted').of(this);

      if (this.settings.autoHeight) {
        simplybind('_value', {
          updateEvenIfSame: true,
          updateOnBind: false
        }).of(this).to('height').of(this.state).transform(() => {
          return this._getInputAutoHeight();
        }).updateOn('event:inserted').of(this);
      }
    }

    _attachBindings_display_autoWidth() {
      simplybind('width', {
        updateEvenIfSame: true
      }).of(this.state).to(width => {
        return (this.settings.autoWidth ? this.el.child.innerwrap : this.el).style('width', width);
      }).transform(this._formatWidth.bind(this)).updateOn('isMobile').of(this.state);

      if (this.settings.autoWidth) {
        simplybind('_value', {
          updateEvenIfSame: true,
          updateOnBind: false
        }).of(this).to('width').of(this.state).transform(() => {
          return this._getInputAutoWidth();
        }).updateOn('event:inserted').of(this);
      }
    }

    _attachBindings_value() {
      var input;
      input = this.el.child.input.raw;
      simplybind('event:input').of(input).to(() => {
        return this.value = input.value;
      });
      simplybind('_value').of(this).to('value').of(input).and.to(value => {
        this.state.filled = !!value;

        if (value) {
          this.state.interacted = true;
        }

        this.state.valid = this.validate(void 0, true);
        return this.emit('input', value);
      });
    }

    _attachBindings_autocomplete() {}

    _getInputAutoHeight() {
      var inputHeight, prevHeight;
      prevHeight = this.el.child.input.raw.style.height;

      if (this._value) {
        this._setValueIfNotSet();

        this.el.child.input.style('height', 0);
        inputHeight = this.el.child.input.raw.scrollHeight + 2;
        inputHeight += this.el.child.input.styleParsed('marginTop') + this.el.child.input.styleParsed('marginBottom');
      } else {
        inputHeight = this.el.child.placeholder.height;
      }

      this.el.child.input.style('height', prevHeight);
      return Math.min(this.settings.maxHeight, Math.max(inputHeight, this.settings.minHeight));
    }

    _getInputAutoWidth() {
      var inputPadding, inputWidth, labelWidth;

      if (this._value) {
        this._setValueIfNotSet();

        this.el.child.input.style({
          width: 0,
          whiteSpace: 'nowrap'
        }).raw.scrollLeft = 1e+10;
        inputPadding = this.el.child.input.styleParsed('paddingLeft') || this.el.child.input.styleParsed('padding');
        inputWidth = Math.max(this.el.child.input.raw.scrollLeft + this.el.child.input.raw.offsetWidth, this.el.child.input.raw.scrollWidth) + 2 + inputPadding + 1;
        labelWidth = this.settings.label && this.el.child.label.styleSafe('position') === 'absolute' ? this.el.child.label.rect.width : 0;
      } else {
        inputWidth = this.el.child.placeholder.rect.width;
        labelWidth = 0;
      }

      this.el.child.input.style({
        width: '100%',
        whiteSpace: 'normal'
      });
      return Math.min(this._getWidthSetting('max'), Math.max(this._getWidthSetting('min'), inputWidth, labelWidth));
    }

  }

  TextareaField.prototype.template = template$2;
  TextareaField.prototype.templates = templates$1;
  TextareaField.prototype.defaults = defaults$2;
  inheritProto(TextareaField, TextField$1);
  return TextareaField;
}.call(undefined);

var TextareaField$1 = TextareaField;var defaults$3 = {
  placeholder: true,
  validWhenMin: false,
  validWhenMax: false,
  autoWidth: false,
  maxWidth: '100%',
  height: 46,
  buttons: true,
  minValue: -2e308,
  maxValue: 2e308,
  step: 1,
  enforce: false,
  inputSibling: 'buttons'
};var template$3 = textFieldTemplate.extend();
var stepButton = quickdom.template(['div', {
  stateTriggers: {
    'active': {
      on: 'mousedown',
      off: 'mouseup',
      bubbles: false
    }
  },
  attrs: {
    tabindex: -1
  },
  style: {
    display: 'inline-block',
    width: '100%',
    height: 17,
    boxSizing: 'border-box',
    verticalAlign: 'top',
    outline: 'none',
    cursor: 'pointer',
    fill: COLORS$1.grey,
    $active: {
      fill: COLORS$1.grey_dark
    }
  }
}]);
var buttons = quickdom.template(['div', {
  ref: 'buttons',
  style: {
    position: 'relative',
    zIndex: 3,
    top: '50%',
    transform: 'translateY(-50%)',
    display: 'inline-block',
    width: 17,
    paddingRight: function (field) {
      return field.settings.inputPadding;
    },
    outline: 'none'
  }
}, stepButton.extend({
  children: [caretUp],
  options: {
    ref: 'stepUp'
  }
}), stepButton.extend({
  children: [caretDown],
  options: {
    ref: 'stepDown'
  }
})]);
var templates$2 =
/*#__PURE__*/
Object.freeze({
  __proto__: null,
  'default': template$3,
  stepButton: stepButton,
  buttons: buttons
});var NumberField;

NumberField = function () {
  class NumberField extends Field$1 {
    constructor() {
      var ref;
      super(...arguments);

      if (this._value == null) {
        this._value = '';
      }

      if (this.settings.enforce && this.settings.minValue && this.settings.minValue !== -2e308) {
        this._value || (this._value = this.settings.minValue);
      }

      this.settings.step = Number(this.settings.step) || 1;
      this.state.typing = false;
      this.cursor = {
        prev: 0,
        current: 0
      };
      this.precision = ((ref = this.settings.step.toString().split('.')[1]) != null ? ref.length : void 0) || 0;

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      return Number(this._value) || 0;
    }

    _setValue(newValue) {
      return this._value = this._normalizeValue(newValue, this.settings.enforce);
    }

    _createElements() {
      var globalOpts;
      globalOpts = {
        relatedInstance: this
      };
      this.el = this.template.spawn(this.settings.templates.defaults, globalOpts);

      if (this.settings.buttons) {
        buttons.spawn(this.settings.templates.buttons, globalOpts).insertAfter(this.el.child.input);
      }

      this.el.state('hasLabel', this.settings.label);
      this.el.child.innerwrap.raw._quickField = this.el.childf.input.raw._quickField = this;
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_display();

      this._attachBindings_display_autoWidth();

      this._attachBindings_value();

      this._attachBindings_stateTriggers();

      this._attachBindings_stepEvents();
    }

    _attachBindings_value() {
      var input;
      input = this.el.child.input.raw;
      simplybind('event:input').of(input).to(() => {
        var newValue, selectNumberPart;
        this.cursor.prev = this.cursor.current;
        this.cursor.current = this.selection().end;
        newValue = input.value;

        if (newValue[newValue.length - 1] === '-') {
          if (this.settings.minValue > -1) {
            newValue = this._value;
          } else {
            newValue = -1;
            selectNumberPart = true;
          }
        }

        this._setValue(newValue);

        if (this.state.focused) {
          if (selectNumberPart) {
            return this.selection(1, 2);
          } else {
            return this.selection(this.cursor.current, this.cursor.current + (String(this._value).length - newValue.length));
          }
        }
      });
      simplybind('_value').of(this).to('value').of(input).and.to(value => {
        this.state.filled = !!String(value);

        if (String(value)) {
          this.state.interacted = true;
        }

        this.state.valid = this.validate(void 0, true);
        return this.emit('input', value);
      });
      simplybind('event:blur').of(input).to(() => {
        var value;

        if (!this.settings.enforce) {
          value = Number(this._value) || 0;

          if (value === 0 || !this.state.interacted && value === this.settings.minValue) {
            return this._value = '';
          }
        }
      });
      simplybind('event:keydown').of(this.el.child.input).to(event => {
        if (event.keyCode === KEYCODES.enter) {
          this.emit('submit');
        }

        return this.emit(`key-${event.keyCode}`);
      });
    }

    _attachBindings_stepEvents() {
      var stopPropagation;
      simplybind('event:keydown').of(this.el.child.input).to(event => {
        switch (event.keyCode) {
          case KEYCODES.up:
            event.preventDefault();
            return this.stepUp();

          case KEYCODES.down:
            event.preventDefault();
            return this.stepDown();
        }
      });

      if (this.settings.buttons) {
        stopPropagation = function (event) {
          event.preventDefault();
          return event.stopPropagation();
        };

        simplybind('event:click').of(this.el.child.stepUp).to(this.stepUp.bind(this)).and.to(stopPropagation);
        simplybind('event:click').of(this.el.child.stepDown).to(this.stepDown.bind(this)).and.to(stopPropagation);
      }
    }

    _setValueIfNotSet() {
      if (Number(this.el.child.input.raw.value) !== this._value) {
        return this.el.child.input.raw.value = this._value;
      }
    }

    _normalizeValue(value, enforce) {
      value = value ? parseFloat(value) || 0 : 0;

      if (value % this.settings.step && enforce) {
        if (value < this.settings.step) {
          value = this.settings.step;
        } else {
          value = this._roundToNearest(value, this.settings.step);
        }
      }

      if (value < this.settings.minValue) {
        value = this.settings.minValue;
      }

      if (value > this.settings.maxValue) {
        value = this.settings.maxValue;
      }

      return value;
    }

    _roundToNearest(value, target) {
      var multiplier;
      value = (value || 0).toFixed(this.precision) * 1;
      multiplier = target < 1 ? 1 / target : 1;
      target *= multiplier;
      value *= multiplier;
      value = Math.ceil(value / target) * target / multiplier;
      return value;
    }

    stepUp() {
      var newValue, rounded;
      rounded = this._roundToNearest(this._value, this.settings.step);
      newValue = Math.min(rounded + this.settings.step, this._value + this.settings.step);
      return this._setValue(this._roundToNearest(newValue, this.settings.step));
    }

    stepDown() {
      var newValue, rounded;
      rounded = this._roundToNearest(this._value, this.settings.step);
      newValue = Math.max(rounded - this.settings.step, this._value - this.settings.step);
      return this._setValue(this._roundToNearest(newValue, this.settings.step));
    }

  }

  NumberField.prototype.template = template$3;
  NumberField.prototype.templates = templates$2;
  NumberField.prototype.defaults = defaults$3;
  inheritProto(NumberField, TextField$1);
  return NumberField;
}.call(undefined);

primaryBuilder$1.notKeys(NumberField.prototype)(NumberField.prototype, TextField$1.prototype);
var NumberField$1 = NumberField;var defaults$4 = {
  placeholder: true,
  validWhenIsChoice: false,
  validWhenRegex: false,
  validWhenChoseMin: 2e308,
  autoWidth: false,
  maxWidth: '100%',
  height: 46,
  labelFilter: null,
  choices: [],
  multiple: false,
  dropdown: {
    typeBuffer: true
  },
  inputSibling: 'caret',
  nativeMenuForMobile: true
};var template$4 = textFieldTemplate.extend({
  children: {
    innerwrap: {
      children: {
        'input': ['div', {
          props: {
            tabIndex: 0
          },
          style: {
            marginTop: 3,
            height: 'auto',
            cursor: 'default',
            userSelect: 'none',
            // overflow: 'scroll'
            overflow: 'hidden'
          }
        }],
        'caret': ['div', {
          ref: 'caret',
          styleAfterInsert: true,
          style: {
            position: 'relative',
            zIndex: 3,
            top: function (field) {
              return this.parent.styleParsed('height', true) / 2 - this.styleParsed('height') / 2;
            },
            display: 'inline-block',
            width: 17,
            height: 17,
            paddingRight: function (field) {
              return field.settings.inputPadding;
            },
            verticalAlign: 'top',
            outline: 'none',
            pointerEvents: 'none',
            fill: COLORS$1.grey
          }
        }, caretDown],
        'nativeInput': ['select', {
          ref: 'nativeInput',
          style: {
            position: 'absolute',
            zIndex: 4,
            left: 0,
            top: 0,
            display: 'none',
            width: '100%',
            height: '100%',
            opacity: 0,
            $displayNative: {
              display: 'block'
            }
          },
          methods: {
            activate: function () {
              this.setupChoices();
              this.state('displayNative', true);
              return this.on('change', () => {
                return this.related.value = this.raw.value;
              });
            },
            setupChoices: function () {
              var currentValue, options;
              currentValue = this.related.value;
              options = this.related.settings.choices.map(function ({
                label,
                value
              }) {
                var selected;

                if (label == null) {
                  label = value;
                }

                if (value == null) {
                  value = label;
                }

                selected = value === currentValue ? 'selected' : '';
                return `<option ${selected} value=\"${value}\">${label}</option>`;
              }).join('\n');
              return this.html = `<option></option>
${options}`;
            }
          }
        }]
      }
    }
  }
});
var templates$3 =
/*#__PURE__*/
Object.freeze({
  __proto__: null,
  'default': template$4
});var SelectField;

SelectField = function () {
  class SelectField extends Field$1 {
    constructor() {
      var base;
      super(...arguments);
      this.settings.dropdown.multiple = this.settings.multiple;

      if (this.settings.multiple) {
        if ((base = this.settings.dropdown).help == null) {
          base.help = 'Tip: press ESC to close this menu';
        }
      }

      this._value = this.settings.multiple ? [] : null;
      this.dropdown = new Dropdown$1(this.settings.choices, this);

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      var ref;

      if (!this.settings.multiple) {
        return (ref = this._value) != null ? ref.value : void 0;
      } else {
        return this._value.map(function (choice) {
          return choice.value;
        });
      }
    }

    _setValue(newValue) {
      var i, len, value;

      if (!this.settings.multiple || !IS$1$1.array(newValue)) {
        this.setChoice(newValue);
      } else {
        for (i = 0, len = newValue.length; i < len; i++) {
          value = newValue[i];
          this.setChoice(value);
        }
      }
    }

    _recalcDisplay() {
      if (this.settings.autoWidth) {
        return this.valueLabel = this.valueLabel;
      }
    }

    _createElements() {
      var forceOpts;
      forceOpts = {
        relatedInstance: this
      };
      this.el = this.template.spawn(this.settings.templates.default, forceOpts);
      this.dropdown.appendTo(this.el.child.innerwrap);
      this.el.child.placeholder.insertBefore(this.el.child.input);

      if (this.settings.label) {
        this.el.child.label.text = this.settings.label;
        this.el.state('hasLabel', true);
      }

      if (this.settings.nativeMenuForMobile && isMobile()) {
        this.el.child.nativeInput.activate();
      }

      this.el.child.innerwrap.raw._quickField = this.el.child.input.raw._quickField = this;
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_value();

      this._attachBindings_display();

      this._attachBindings_display_autoWidth();

      this._attachBindings_dropdown();

      this._attachBindings_stateTriggers();
    }

    _attachBindings_display_autoWidth() {
      simplybind('width', {
        updateEvenIfSame: true
      }).of(this.state).to(width => {
        return (this.settings.autoWidth ? this.el.child.input : this.el).style({
          width
        });
      }).transform(this._formatWidth.bind(this)).updateOn('isMobile').of(this.state);

      if (this.settings.autoWidth) {
        simplybind('valueLabel', {
          updateEvenIfSame: true,
          updateOnBind: false
        }).of(this).to('width').of(this.state).transform(() => {
          return this._getInputAutoWidth();
        }).updateOn('event:inserted').of(this);
      }
    }

    _getInputAutoWidth() {
      var inputWidth, labelWidth;

      if (this.valueLabel) {
        this.el.child.input.style('width', 0);
        inputWidth = this.el.child.input.raw.scrollWidth + 2;
        labelWidth = this.el.child.label.styleSafe('position') === 'absolute' ? this.el.child.label.rect.width : 0;
      } else {
        inputWidth = this.el.child.placeholder.rect.width;
        labelWidth = 0;
      }

      return Math.max(inputWidth, labelWidth);
    }

    _attachBindings_value() {
      simplybind('array:_value').of(this).to(selected => {
        this.state.filled = this.settings.multiple ? !!(selected != null ? selected.length : void 0) : !!selected;

        if (this.state.filled) {
          this.state.interacted = true;
        }

        this.state.valid = this.validate(void 0, true);
        return this.emit('input', this.value);
      }).and.to('valueLabel').of(this).transform(selected => {
        if (!selected) {
          return '';
        } else {
          if (this.settings.multiple) {
            return selected.map(function (choice) {
              return choice.label;
            }).join(', ');
          } else {
            return selected.label;
          }
        }
      });
      simplybind('valueLabel').of(this).to('text').of(this.el.child.input).transform(label => {
        if (this.settings.labelFormat) {
          return this.settings.labelFormat(label);
        } else {
          return label;
        }
      });
    }

    _attachBindings_dropdown() {
      simplybind('event:click').of(this.el.child.input).to(event => {
        var escListener;

        if (!(this.state.disabled || this.dropdown.choices.length === 0)) {
          this.dropdown.isOpen = true;
          this.focus();
          quickdom(document).on('click.dropdown', event => {
            if (quickdom(event.target).parentMatching(parent => {
              return parent === this.el.child.innerwrap;
            })) {
              return;
            }

            return this.dropdown.isOpen = false;
          }, true);
          escListener = simplybind('event:keydown').of(document).once.to(() => {
            return this.dropdown.isOpen = false;
          }).condition(function (event) {
            return event.keyCode === 27;
          });
          return simplybind('isOpen', {
            updateOnBind: false
          }).of(this.dropdown).once.to(function () {
            escListener.unBind();
            return quickdom(document).off('click.dropdown');
          }).condition(function (isOpen) {
            return !isOpen;
          });
        }
      });
      simplybind('event:click').of(this.el.child.innerwrap).to(event => {
        event.stopPropagation();
        return this.el.child.input.emitPrivate('click');
      }).condition(event => {
        return event.target === this.el.child.innerwrap.raw;
      });
      simplybind('focused', {
        updateOnBind: false
      }).of(this.state).to(focused => {
        var triggeringKeycodes;

        if (!focused) {
          return this.el.child.input.off('keydown.dropdownTrigger');
        } else {
          triggeringKeycodes = [32, 37, 38, 39, 40];
          return this.el.child.input.on('keydown.dropdownTrigger', event => {
            var ref;

            if (includes$2(triggeringKeycodes, event.keyCode) && !this.dropdown.isOpen) {
              this.dropdown.isOpen = true;

              if ((ref = this.dropdown.lastSelected) != null ? ref.selected : void 0) {
                this.dropdown.currentHighlighted = this.dropdown.lastSelected;
              }

              return event.preventDefault();
            } else if (event.keyCode === 9 && this.dropdown.isOpen) {
              // Prevent tab key
              return event.preventDefault();
            }
          });
        }
      });
      this.dropdown.onSelected(choice => {
        if (!(choice.selected && !this.settings.multiple)) {
          this.value = choice;
        }

        if (!this.settings.multiple) {
          return this.dropdown.isOpen = false;
        }
      });
    }

    _attachBindings_stateTriggers() {
      //# ==========================================================================
      //# State event triggers
      //# ========================================================================== 
      simplybind('event:mouseenter').of(this.el.child.input).to(() => {
        return this.state.hovered = true;
      });
      simplybind('event:mouseleave').of(this.el.child.input).to(() => {
        return this.state.hovered = false;
      });
      simplybind('event:focus').of(this.el.child.input).to(() => {
        this.state.focused = true;

        if (this.state.disabled) {
          return this.blur();
        }
      });
      simplybind('event:blur').of(this.el.child.input).to(() => {
        return this.state.focused = false;
      });
    }

    _validate(providedValue) {
      var matchingChoice, ref, ref1;

      if (this.settings.validWhenRegex && IS$1$1.regex(this.settings.validWhenRegex)) {
        switch (false) {
          case !this.settings.multiple:
            if (!(() => {
              var validChoices;

              if (providedValue.length === 0) {
                return false;
              }

              validChoices = providedValue.filter(choice => {
                return this.settings.validWhenRegex.test(choice);
              });

              if (this.settings.validWhenChoseMin === 2e308 || !IS$1$1.number(this.settings.validWhenChoseMin)) {
                return validChoices.length === providedValue.length;
              } else {
                return validChoices.length >= this.settings.validWhenChoseMin;
              }
            })()) {
              return false;
            }

            break;

          default:
            if (!this.settings.validWhenRegex.test(providedValue)) {
              return false;
            }

        }
      }

      if (this.settings.validWhenIsChoice && ((ref = this.dropdown.choices) != null ? ref.length : void 0)) {
        matchingChoice = this.dropdown.choices.filter(function (option) {
          return option.value === providedValue;
        });

        if (!!!matchingChoice.length) {
          return false;
        }
      }

      if (this.settings.multiple && -1 > (ref1 = this.settings.validWhenChoseMin) && ref1 < 2e308) {
        if (!providedValue.length >= this.settings.validWhenChoseMin) {
          return false;
        }
      }

      if (this.settings.multiple && this.settings.required) {
        if (!providedValue.length) {
          return false;
        }
      }

      return true;
    }

    addChoice(choice) {
      return this.dropdown.addChoice(choice);
    }

    setChoice(choice) {
      var match, ref;

      if (IS$1$1.object(choice) && choice instanceof Choice) {
        return choice.toggle();
      } else if (match = this.dropdown.findChoiceAny(choice)) {
        return match.toggle(true);
      } else if (!choice) ;else {
        return (ref = this.addChoice(choice)) != null ? ref.toggle(true) : void 0;
      }
    }

  }

  SelectField.prototype.template = template$4;
  SelectField.prototype.templates = templates$3;
  SelectField.prototype.defaults = defaults$4;
  SelectField.prototype.coreValueProp = 'value';
  return SelectField;
}.call(undefined);

inheritProto(SelectField, TextField$1, ['_getMaxWidth', '_attachBindings_elState', '_attachBindings_display', 'focus', 'blur']);
var SelectField$1 = SelectField;var template$5 = quickdom.template(['div', {
  ref: 'field',
  style: {
    position: 'relative',
    display: 'none',
    width: function (field) {
      return field.state.width;
    },
    boxSizing: 'border-box',
    fontFamily: function (field) {
      return field.settings.fontFamily;
    },
    textAlign: 'left',
    $visible: {
      $hasVisibleChoices: {
        display: 'inline-block'
      }
    },
    $showError: {
      animation: '0.2s fieldErrorShake'
    }
  }
}, ['div', {
  ref: 'label',
  style: {
    display: 'none',
    marginBottom: '12px',
    fontFamily: 'inherit',
    fontSize: '13px',
    fontWeight: 600,
    color: COLORS$1.black,
    cursor: 'default',
    pointerEvents: 'none',
    userSelect: 'none',
    $showLabel: {
      display: 'block'
    },
    $showError: {
      color: COLORS$1.red
    }
  }
}], ['div', {
  ref: 'innerwrap',
  style: {
    position: 'relative',
    boxSizing: 'border-box',
    fontFamily: 'inherit'
  }
}], ['div', {
  ref: 'help',
  style: {
    marginTop: '10px',
    fontFamily: 'inherit',
    fontSize: '11px',
    color: COLORS$1.grey,
    display: 'none',
    $showError: {
      color: COLORS$1.red,
      display: 'block'
    },
    $showHelp: {
      display: 'block'
    }
  }
}]]);
var choiceGroup = quickdom.template(['div', {
  ref: 'choiceGroup',
  style: {
    marginBottom: function (field) {
      return field.settings.spacing;
    },
    userSelect: 'none',
    fontSize: '0',
    whiteSpace: 'nowrap'
  }
}]);
var choice$1 = quickdom.template(['div', {
  ref: 'choice',
  styleAfterInsert: true,
  style: {
    position: 'relative',
    display: 'inline-block',
    width: 'auto',
    marginLeft: function (field) {
      if (this.index) {
        return `calc(100% - (100% - ${field.settings.spacing}px))`;
      }
    },
    // minHeight: '46px'
    padding: '0 12px',
    borderRadius: '2px',
    backgroundColor: 'white',
    fontFamily: 'inherit',
    textAlign: 'center',
    color: COLORS$1.black,
    boxSizing: 'border-box',
    verticalAlign: 'top',
    cursor: 'pointer',
    $definedWidth: {
      width: function (field) {
        return `calc((100% - ${field.settings.spacing * (field.settings.perGroup - 1)}px) / ${field.settings.perGroup})`;
      }
    },
    $selected: {
      color: COLORS$1.orange
    },
    $unavailable: {
      display: 'none'
    },
    $disabled: {
      cursor: 'not-allowed',
      opacity: 0.7,
      color: COLORS$1.grey
    }
  }
}, ['div', {
  ref: 'border',
  style: {
    position: 'absolute',
    zIndex: 2,
    top: '0',
    left: '0',
    width: '100%',
    height: '100%',
    borderWidth: '1px',
    borderStyle: 'solid',
    borderColor: COLORS$1.grey_light,
    borderRadius: '2px',
    boxSizing: 'border-box',
    $selected: {
      borderColor: 'inherit',
      borderWidth: '2px'
    },
    $disabled: {
      borderColor: COLORS$1.grey_light
    }
  }
}], ['div', {
  ref: 'label',
  style: {
    position: 'relative',
    display: 'block',
    padding: '15px 0px',
    fontFamily: 'inherit',
    fontSize: function (field) {
      return field.settings.fontSize;
    },
    fontWeight: '500'
  }
}]]);
var choiceIcon = quickdom.template(['div', {
  ref: 'icon',
  style: {
    position: 'absolute',
    top: '50%',
    display: 'block',
    fontSize: '20px',
    opacity: 0.16,
    transform: 'translateY(-50%)'
  }
}]);
var templates$4 =
/*#__PURE__*/
Object.freeze({
  __proto__: null,
  'default': template$5,
  choiceGroup: choiceGroup,
  choice: choice$1,
  choiceIcon: choiceIcon
});var defaults$5 = {
  validWhenSelected: false,
  validWhenIsChoice: false,
  showSelectAll: false,
  perGroup: 7,
  spacing: 8,
  choices: []
};var Choice$1, ChoiceField;

ChoiceField = function () {
  class ChoiceField extends Field$1 {
    constructor() {
      var ref;
      super(...arguments);

      if (!((ref = this.settings.choices) != null ? ref.length : void 0)) {
        throw new Error(`Choices were not provided for choice field '${this.settings.label || this.ID}'`);
      }

      this._value = this.settings.multiple ? [] : null;
      this.lastSelected = null;
      this.visibleChoicesCount = 0;
      this.choices = this.settings.choices;

      if (this.settings.validWhenSelected === true) {
        this.settings.validWhenSelected = 1;
      }

      this.settings.perGroup = Math.min(this.settings.perGroup, this.choices.length + (this.settings.multiple && this.settings.showSelectAll ? 1 : 0));

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      var ref;

      if (!this.settings.multiple) {
        return (ref = this._value) != null ? ref.value : void 0;
      } else {
        return this._value.map(function (choice) {
          return choice.value;
        });
      }
    }

    _setValue(newValue) {
      var i, len, value;

      if (!this.settings.multiple || !IS$1$1.array(newValue)) {
        this.setChoice(newValue);
      } else {
        for (i = 0, len = newValue.length; i < len; i++) {
          value = newValue[i];
          this.setChoice(value);
        }
      }
    }

    _createElements() {
      var choiceGroups, choices, globalOpts, perGroup;
      globalOpts = {
        relatedInstance: this
      };
      this.el = this.template.spawn(this.settings.templates.default, globalOpts);
      this.choices = [];
      choices = this.settings.choices;
      perGroup = this.settings.perGroup;
      choiceGroups = Array(Math.ceil(choices.length / perGroup)).fill().map(function (s, index) {
        return choices.slice(index * perGroup, index * perGroup + perGroup);
      });
      choiceGroups.forEach((choices, groupIndex) => {
        var groupEl;
        groupEl = this.templates.choiceGroup.spawn(this.settings.templates.choiceGroup, globalOpts).appendTo(this.el.child.innerwrap);
        return choices.forEach((choice, index) => {
          return this.choices.push(new Choice$1(this, choice, index, groupIndex, groupEl));
        });
      });
      this.el.child.innerwrap.raw._quickField = this;
    }

    _attachBindings() {
      var choice, i, len, ref;

      this._attachBindings_elState();

      this._attachBindings_stateTriggers();

      this._attachBindings_display();

      this._attachBindings_value();

      ref = this.choices;

      for (i = 0, len = ref.length; i < len; i++) {
        choice = ref[i];

        choice._attachBindings();
      }
    }

    _attachBindings_elState() {
      simplybind('visible').of(this.state).to(visible => {
        return this.el.state('visible', visible);
      });
      simplybind('hovered').of(this.state).to(hovered => {
        return this.el.state('hovered', hovered);
      });
      simplybind('filled').of(this.state).to(filled => {
        return this.el.state('filled', filled);
      });
      simplybind('disabled').of(this.state).to(disabled => {
        return this.el.state('disabled', disabled);
      });
      simplybind('showLabel').of(this.state).to(showLabel => {
        return this.el.state('showLabel', showLabel);
      });
      simplybind('showError').of(this.state).to(showError => {
        return this.el.state('showError', showError);
      });
      simplybind('showHelp').of(this.state).to(showHelp => {
        return this.el.state('showHelp', showHelp);
      });
      simplybind('valid').of(this.state).to(valid => {
        this.el.state('valid', valid);
        return this.el.state('invalid', !valid);
      });
    }

    _attachBindings_stateTriggers() {
      simplybind('event:mouseenter').of(this.el).to(() => {
        return this.state.hovered = true;
      });
      simplybind('event:mouseleave').of(this.el).to(() => {
        return this.state.hovered = false;
      });
    }

    _attachBindings_display() {
      simplybind('width').of(this.state).to(width => {
        return this.el.style('width', width).state('definedWidth', width !== 'auto');
      }).transform(this._formatWidth.bind(this)).updateOn('isMobile').of(this.state);
      simplybind('visibleChoicesCount').of(this).to(count => {
        return this.el.state('hasVisibleChoices', !!count);
      });
    }

    _attachBindings_value() {
      simplybind('_value').of(this).to(selected => {
        this.state.filled = !!(selected != null ? selected.length : void 0);

        if (this.state.filled) {
          this.state.interacted = true;
        }

        return this.state.valid = this.validate(void 0, true);
      });
      simplybind('array:_value', {
        updateOnBind: false
      }).of(this).to(() => {
        return this.emit('input', this.value);
      });
    }

    _validate(providedValue) {
      if (this.settings.multiple) {
        if (!IS$1$1.array(providedValue)) {
          providedValue = [providedValue];
        }

        if (providedValue.length && !IS$1$1.object(providedValue[0])) {
          providedValue = providedValue.map(function (choice) {
            return choice.value;
          });
        }
      } else {
        if (IS$1$1.object(providedValue)) {
          providedValue = providedValue.value;
        }
      }

      if (IS$1$1.number(this.settings.validWhenSelected)) {
        if (!((providedValue != null ? providedValue.length : void 0) >= this.settings.validWhenSelected)) {
          return false;
        }
      }

      if (this.settings.validWhenIsChoice) {
        if (this.settings.multiple) {
          if (!includes$2(providedValue, this.settings.validWhenIsChoice)) {
            return false;
          }
        } else {
          if (providedValue !== this.settings.validWhenIsChoice) {
            return false;
          }
        }
      }

      return true;
    }

    findChoice(providedValue, byLabel) {
      var matches;
      matches = this.choices.filter(function (choice) {
        switch (false) {
          case !IS$1$1.object(providedValue):
            return providedValue === choice;

          case !byLabel:
            return providedValue === choice.label;

          default:
            return providedValue === choice.value;
        }
      });
      return matches[0];
    }

    findChoiceAny(providedValue) {
      return this.findChoice(providedValue) || this.findChoice(providedValue, true);
    }

    setChoice(choice) {
      if (IS$1$1.object(choice) && choice instanceof Choice$1) {
        return choice.toggle();
      } else if (choice = this.findChoiceAny(choice)) {
        return choice.toggle(true);
      }
    }

  }

  ChoiceField.prototype.template = template$5;
  ChoiceField.prototype.templates = templates$4;
  ChoiceField.prototype.defaults = defaults$5;
  return ChoiceField;
}.call(undefined);

Choice$1 = class Choice {
  constructor(field, settings, index1, groupIndex, groupEl) {
    var globalOpts, iconEl, ref;
    this.field = field;
    this.settings = settings;
    this.index = index1;
    globalOpts = {
      relatedInstance: this.field
    };
    ({
      label: this.label,
      value: this.value,
      conditions: this.conditions
    } = this.settings);

    if (this.label == null) {
      this.label = this.value;
    }

    if (this.value == null) {
      this.value = this.label;
    }

    this.el = this.field.templates.choice.spawn(this.field.settings.templates.choice, globalOpts).appendTo(groupEl);

    if (this.icon) {
      iconEl = this.templates.choiceIcon.spawn(this.field.settings.templates.choiceIcon, globalOpts).insertBefore(this.el.child.label);
      iconEl.text = this.icon;
    }

    if (this.el.index == null) {
      this.el.index = this.index;
    }

    this.el.totalIndex = this.index * groupIndex;
    this.el.prop('title', this.label);
    this.el.child.label.text = this.label;
    this.visible = true;
    this.selected = false;
    this.disabled = this.settings.disabled || false;
    this.unavailable = false;

    if ((ref = this.conditions) != null ? ref.length : void 0) {
      this.unavailable = true;
      this.allFields = this.field.allFields;
      Condition$1.init(this, this.conditions, () => {
        return this.unavailable = !Condition$1.validate(this.conditions);
      });
    }
  }

  _attachBindings() {
    return (() => {
      simplybind('visible').of(this).to(visible => {
        return this.el.state('visible', visible);
      }).and.to(visible => {
        return this.field.visibleChoicesCount += visible ? 1 : -1;
      });
      simplybind('selected', {
        updateOnBind: false
      }).of(this).to(selected => {
        return this.el.state('selected', selected);
      });
      simplybind('disabled', {
        updateOnBind: false
      }).of(this).to(disabled => {
        return this.el.state('disabled', disabled);
      });
      simplybind('unavailable', {
        updateOnBind: false
      }).of(this).to(unavailable => {
        return this.el.state('unavailable', unavailable);
      }).and.to(unavailable => {
        if (unavailable) {
          return this.toggle(false, true);
        }
      });
      return simplybind('event:click').of(this.el).to(() => {
        return this.field.value = this;
      }).condition(() => {
        return !this.disabled;
      });
    })();
  }

  toggle(newValue, unavailable) {
    var newState, prevState, ref;
    prevState = this.selected;
    newState = IS$1$1.defined(newValue) ? newValue : !this.selected;

    if (!newState) {
      if (this.field.settings.multiple && prevState) {
        this.selected = newState;
        return removeItem$1(this.field._value, this);
      } else {
        if (IS$1$1.defined(newValue)) {
          this.selected = newState;
        }

        if (unavailable) {
          return this.field._value = null;
        }
      }
    } else {
      this.selected = newState;

      if (this.field.settings.multiple) {
        this.field._value.push(this);
      } else {
        if (this.field._value !== this) {
          if ((ref = this.field._value) != null) {
            ref.toggle(false);
          }
        }

        this.field._value = this;
      }

      return this.field.lastSelected = this;
    }
  }

};
var ChoiceField$1 = ChoiceField;var template$6 = template$5.extend();
var choice$2 = choice$1.extend();
var choiceIcon$1 = choiceIcon.extend();
var choiceGroup$1 = choiceGroup.extend();
var templates$5 =
/*#__PURE__*/
Object.freeze({
  __proto__: null,
  'default': template$6,
  choice: choice$2,
  choiceIcon: choiceIcon$1,
  choiceGroup: choiceGroup$1
});var defaults$6 = {
  validWhenSelected: false,
  validWhenIsChoice: false,
  validWhenTrue: true,
  choiceLabels: ['True', 'False'],
  choices: [{
    value: true
  }, {
    value: false
  }],
  spacing: 8
};var TrueFalseField;

TrueFalseField = function () {
  class TrueFalseField extends Field$1 {
    constructor() {
      super(...arguments);
      this.lastSelected = null;
      this.visibleChoicesCount = 2;
      this.choices = this.settings.choices;
      this.choices[0].label = this.settings.choiceLabels[0];
      this.choices[1].label = this.settings.choiceLabels[1];
      this.settings.perGroup = 2;

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      if (this._value === null) {
        return null;
      } else {
        if (this._value.index === 0) {
          return true;
        } else {
          return false;
        }
      }
    }

    _setValue(newValue) {
      var ref;

      if (newValue === this.choices[0]) {
        newValue = this.choices[0].value;
      }

      if (newValue === this.choices[1]) {
        newValue = this.choices[1].value;
      }

      if (newValue === null) {
        this._value = null;

        if ((ref = this.lastSelected) != null) {
          ref.toggle(false);
        }

        return;
      }

      if (typeof newValue === 'string') {
        newValue = newValue.toLowerCase();

        if (newValue === 'false') {
          newValue = false;
        }
      }

      return (newValue ? this.choices[0] : this.choices[1]).toggle();
    }

    _validate(providedValue) {
      if (typeof providedValue === 'string') {
        providedValue = this.findChoice(providedValue);
      }

      if (this.settings.validWhenIsChoice) {
        if (providedValue) {
          if (this.settings.validWhenIsChoice !== providedValue.value) {
            return false;
          }
        } else {
          return false;
        }
      }

      if (this.settings.validWhenSelected) {
        if (!providedValue) {
          return false;
        }
      }

      if (this.settings.validWhenTrue) {
        if ((providedValue != null ? providedValue.index : void 0) !== 0) {
          return false;
        }
      }

      return true;
    }

  }

  TrueFalseField.prototype.template = template$6;
  TrueFalseField.prototype.templates = templates$5;
  TrueFalseField.prototype.defaults = defaults$6;
  return TrueFalseField;
}.call(undefined);

inheritProto(TrueFalseField, ChoiceField$1, ['_createElements', '_attachBindings', '_attachBindings_elState', '_attachBindings_stateTriggers', '_attachBindings_display', '_attachBindings_value']);
var TrueFalseField$1 = TrueFalseField;var defaults$7 = {
  validWhenTrue: true,
  size: 50,
  style: 'centered',
  color: COLORS$1.green,
  background: COLORS$1.grey_light,
  triggerEvent: 'mouseup'
};var template$7 = quickdom.template(['div', {
  ref: 'field',
  style: {
    position: 'relative',
    display: 'none',
    width: function (field) {
      return field.state.width;
    },
    boxSizing: 'border-box',
    fontFamily: function (field) {
      return field.settings.fontFamily;
    },
    textAlign: 'left',
    $visible: {
      display: 'inline-block'
    },
    $showError: {
      animation: '0.2s fieldErrorShake'
    },
    $alignedStyle: {
      paddingRight: function (field) {
        return field.settings.size + 20;
      }
    }
  }
}, ['div', {
  ref: 'label',
  style: {
    display: 'none',
    marginBottom: '12px',
    fontFamily: 'inherit',
    fontSize: '13px',
    fontWeight: 600,
    textAlign: 'center',
    color: COLORS$1.black,
    cursor: 'default',
    pointerEvents: 'none',
    userSelect: 'none',
    $showLabel: {
      display: 'block'
    },
    $showError: {
      color: COLORS$1.red
    },
    $alignedStyle: {
      marginBottom: '0',
      textAlign: 'left'
    }
  }
}], ['div', {
  ref: 'innerwrap',
  style: {
    position: 'relative',
    boxSizing: 'border-box',
    fontFamily: 'inherit',
    $alignedStyle: {
      position: 'absolute',
      right: 0,
      top: '50%',
      transform: 'translateY(-50%)'
    }
  }
}, ['div', {
  ref: 'input',
  style: {
    position: 'relative',
    zIndex: 2,
    width: function (field) {
      return field.settings.size;
    },
    height: function (field) {
      return field.settings.size / 2;
    },
    margin: '0 auto',
    backgroundColor: function (field) {
      return field.settings.background;
    },
    border: `1px solid ${COLORS$1.grey_semi_light}`,
    borderRadius: function (field) {
      return field.settings.size;
    },
    cursor: 'pointer'
  }
}, ['div', {
  ref: 'background',
  style: {
    position: 'absolute',
    zIndex: 1,
    left: 0,
    right: 0,
    width: function (field) {
      return field.settings.size / 2;
    },
    height: '100%',
    borderRadius: function (field) {
      var size;
      size = field.settings.size;
      return `${size}px 0 0 ${size}px`;
    },
    backgroundColor: function (field) {
      return field.settings.color;
    },
    opacity: 0,
    transition: 'opacity 0.2s, width 0.2s',
    $toggled: {
      opacity: 1,
      width: function (field) {
        return field.settings.size * 0.7;
      }
    }
  }
}], ['div', {
  ref: 'ball',
  style: {
    position: 'absolute',
    zIndex: 2,
    left: 0,
    right: 0,
    width: function (field) {
      return field.settings.size / 2;
    },
    height: function (field) {
      return field.settings.size / 2;
    },
    margin: '0 auto',
    backgroundColor: 'white',
    borderRadius: '50%',
    border: `1px solid ${COLORS$1.grey_light}`,
    boxSizing: 'border-box',
    transform: 'translateX(-55%)',
    transition: 'transform 0.2s',
    userSelect: 'none',
    $toggled: {
      transform: 'translateX(50%)',
      border: function (field) {
        return `1px solid ${field.settings.color}`;
      }
    }
  }
}]]], ['div', {
  ref: 'help',
  style: {
    marginTop: '10px',
    fontFamily: 'inherit',
    fontSize: '11px',
    color: COLORS$1.grey,
    display: 'none',
    $showError: {
      color: COLORS$1.red,
      display: 'block'
    },
    $showHelp: {
      display: 'block'
    }
  }
}]]);
var templates$6 =
/*#__PURE__*/
Object.freeze({
  __proto__: null,
  'default': template$7
});var ToggleField;

ToggleField = function () {
  class ToggleField extends Field$1 {
    constructor() {
      super(...arguments);
      this._value = !!this._value;
      this.settings.size = parseFloat(this.settings.size) || defaults$7.size;

      if (this.settings.style !== 'centered' && this.settings.style !== 'aligned') {
        this.settings.style = defaults$7.style;
      }

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      return this._value;
    }

    _setValue(newValue) {
      return this._value = !!newValue;
    }

    _createElements() {
      var forceOpts;
      forceOpts = {
        relatedInstance: this
      };
      this.el = this.template.spawn(this.settings.templates.default, forceOpts);
      this.el.state('alignedStyle', this.settings.style === 'aligned').child.innerwrap.raw._quickField = this;
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_stateTriggers();

      this._attachBindings_display();

      this._attachBindings_value();
    }

    _attachBindings_value() {
      simplybind('_value').of(this).to(value => {
        return this.el.state('toggled', value);
      });
      simplybind('_value', {
        updateOnBind: false
      }).of(this).to(value => {
        return this.emit('input', value);
      });
      simplybind(`event:${this.settings.triggerEvent}`).of(this.el.child.input).to(() => {
        return this.value = !this._value;
      });
    }

    _validate(providedValue) {
      if (this.settings.validWhenTrue) {
        if (!providedValue) {
          return false;
        }
      }

      return true;
    }

  }

  ToggleField.prototype.template = template$7;
  ToggleField.prototype.templates = templates$6;
  ToggleField.prototype.defaults = defaults$7;
  return ToggleField;
}.call(undefined);

inheritProto(ToggleField, TrueFalseField$1, ['_attachBindings_elState', '_attachBindings_stateTriggers', '_attachBindings_display']);
var ToggleField$1 = ToggleField;var defaults$8 = {
  fields: {},
  collapsable: true,
  startCollapsed: false,
  padding: 20,
  fieldMargin: 0,
  fieldAlign: 'top',
  labelSize: 16,
  color: COLORS$1.grey_light4
};var action = quickdom.template(['div', {
  events: {
    inserted: function () {
      if (this.index) {
        return this.style('marginLeft', 5);
      }
    }
  },
  style: {
    display: 'inline-block',
    boxSizing: 'border-box'
  }
}, [// verticalAlign: 'middle'
'div', {
  ref: 'icon',
  style: {
    width: 17,
    height: 17,
    color: COLORS$1.grey,
    fill: COLORS$1.grey,
    $hover: {
      color: COLORS$1.grey_dark,
      fill: COLORS$1.grey_dark
    }
  }
}]]);
var collapseIcons = [caretUp.extend({
  options: {
    style: {
      position: 'relative',
      top: -2,
      display: 'none',
      $collapsed: {
        display: 'block'
      }
    }
  }
}), caretDown.extend({
  options: {
    style: {
      display: 'block',
      $collapsed: {
        display: 'none'
      }
    }
  }
})];
var template$8 = quickdom.template(['div', {
  ref: 'field',
  style: {
    position: 'relative',
    boxSizing: 'border-box',
    verticalAlign: 'top',
    display: 'none',
    width: function (field) {
      return field.state.width;
    },
    fontFamily: function (field) {
      return field.settings.fontFamily;
    },
    // backgroundColor: (field)-> field.settings.color
    border: `1px solid ${COLORS$1.grey_light}`,
    borderRadius: 3,
    textAlign: 'left',
    // lineHeight: '1em'
    $visible: {
      display: 'inline-block'
    },
    $showError: {
      $collapsed: {
        animation: '0.2s fieldErrorShake'
      }
    }
  }
}, ['div', {
  ref: 'label',
  style: {
    display: 'none',
    fontFamily: 'inherit',
    fontSize: function (field) {
      return field.settings.labelSize;
    },
    fontWeight: 600,
    textAlign: 'left',
    color: COLORS$1.black,
    cursor: 'default',
    userSelect: 'none',
    $showLabel: {
      display: 'block'
    },
    $showError: {
      color: COLORS$1.red
    }
  }
}], ['div', {
  ref: 'actions',
  style: {
    position: 'absolute',
    top: function (field) {
      return field.settings.padding * (12 / 20);
    },
    right: function (field) {
      return field.settings.padding * (12 / 20);
    },
    lineHeight: 0,
    fontSize: 0,
    textAlign: 'center',
    $showLabel: {
      top: function (field) {
        return field.settings.padding * (21 / 20);
      }
    }
  }
}], ['div', {
  ref: 'help',
  style: {
    marginTop: '10px',
    fontFamily: 'inherit',
    fontSize: '11px',
    color: COLORS$1.grey,
    display: 'none',
    whiteSpace: 'pre-line',
    $showError: {
      color: COLORS$1.red,
      display: 'block'
    },
    $showHelp: {
      display: 'block'
    }
  }
}], ['div', {
  ref: 'innerwrap',
  unpassableStates: ['visible', 'hover', 'focus', 'disabled', 'showLabel', 'showError', 'showHelp', 'collapsed', 'valid', 'invalid'],
  style: {
    position: 'relative',
    boxSizing: 'border-box',
    marginTop: 15,
    fontFamily: 'inherit',
    textAlign: 'justify',
    textJustify: 'distribute-all-lines',
    fontSize: 0,
    $collapsed: {
      display: 'none'
    }
  }
}]]);
var templates$7 =
/*#__PURE__*/
Object.freeze({
  __proto__: null,
  action: action,
  collapseIcons: collapseIcons,
  'default': template$8
});var GroupField;

GroupField = function () {
  class GroupField extends Field$1 {
    constructor() {
      super(...arguments);
      this._calcFocusState = this._calcFocusState.bind(this);
      this._calcBlurState = this._calcBlurState.bind(this);
      this._emitSubmit = this.emit.bind(this, 'submit');
      this.state.collapsed = this.settings.startCollapsed && this.settings.collapsable;

      if (this._value == null) {
        this._value = Object.create(null);
      }

      this.fields = Object.create(null);
      this.fieldsArray = [];

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      var field, name, ref, values;
      values = Object.create(null);
      ref = this.fields;

      for (name in ref) {
        field = ref[name];
        values[name] = field.value;
      }

      return values;
    }

    _setValue(newValue) {
      var name, value;

      if (IS$1$1.object(newValue)) {
        for (name in newValue) {
          value = newValue[name];

          if (this.fields[name]) {
            this.fields[name].value = value;
          }
        }

        return newValue;
      }
    }

    _recalcDisplay() {
      var field, i, len, ref;
      ref = this.fieldsArray;

      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];

        if (field._recalcDisplay) {
          field._recalcDisplay();
        }
      }
    }

    _createElements() {
      var config, field, fields, forceOpts, i, len, margin, name, ref, ref1;
      forceOpts = {
        relatedInstance: this
      };
      margin = `0 0 ${this.settings.fieldMargin}px 0`;
      this.el = this.template.spawn(this.settings.templates.default, forceOpts);

      if (this.settings.collapsable) {
        this.addAction('collapse', this.templates.collapseIcons);
      }

      if (IS$1$1.array(this.settings.fields)) {
        fields = Object.create(null);
        ref = this.settings.fields;

        for (i = 0, len = ref.length; i < len; i++) {
          field = ref[i];

          if (!field.name) {
            throw new Error(`field ${this.name || this.ID}:group fields provided in array format must have a name`);
          }

          fields[field.name] = field;
        }

        this.settings.fields = fields;
      }

      ref1 = this.settings.fields;

      for (name in ref1) {
        field = ref1[name];
        config = primaryBuilder$1({
          margin,
          fieldInstances: this.fields
        }, field, {
          ID: name
        });
        this.fieldsArray.push(this.fields[name] = this.builder(config).appendTo(this.el.child.innerwrap));
        this.fields[name].on('focus', this._calcFocusState).on('blur', this._calcBlurState).on('submit', this._emitSubmit).el.style('verticalAlign', this.settings.fieldAlign).after(' ');
      }

      this.el.child.innerwrap.append(quickdom.div({
        style: {
          display: 'inline-block',
          width: '100%'
        }
      }));
      this.el.state('collapsable', this.settings.collapsable);
      this.el.raw._quickField = this.el.childf.innerwrap.raw._quickField = this;
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_display();

      this._attachBindings_stateTriggers();

      this._attachBindings_value();
    }

    _attachBindings_elState() {
      simplybind('visible').of(this.state).to(visible => {
        return this.el.state('visible', visible);
      });
      simplybind('hovered').of(this.state).to(hovered => {
        return this.el.state('hover', hovered);
      });
      simplybind('focused').of(this.state).to(focused => {
        return this.el.state('focus', focused);
      });
      simplybind('disabled').of(this.state).to(disabled => {
        return this.el.state('disabled', disabled);
      });
      simplybind('showLabel').of(this.state).to(showLabel => {
        return this.el.state('showLabel', showLabel);
      });
      simplybind('showError').of(this.state).to(showError => {
        return this.el.state('showError', showError);
      });
      simplybind('showHelp').of(this.state).to(showHelp => {
        return this.el.state('showHelp', showHelp);
      });
      simplybind('collapsed').of(this.state).to(collapsed => {
        return this.el.state('collapsed', collapsed);
      });
      return simplybind('valid').of(this.state).to(valid => {
        this.el.state('valid', valid);
        return this.el.state('invalid', !valid);
      });
    }

    _attachBindings_display() {
      var field, i, len, ref;
      simplybind('width').of(this.state).to(width => {
        return this.el.style('width', width).state('definedWidth', width !== 'auto');
      }).transform(this._formatWidth.bind(this)).updateOn('isMobile').of(this.state);
      ref = this.fieldsArray;

      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        simplybind('disabled').of(this.state).to('disabled').of(field.state);
      }
    }

    _attachBindings_stateTriggers() {
      var toggleCollapse;

      if (this.settings.collapsable) {
        toggleCollapse = () => {
          this.state.collapsed = !this.state.collapsed;
          return this.emit('collapsed', this.state.collapsed);
        };

        simplybind('event:click').of(this.el.child.collapse).to(toggleCollapse);
        simplybind('event:click').of(this.el.child.label).to(toggleCollapse);
        simplybind('collapsed').of(this.state).once.to(() => {
          return this._recalcDisplay();
        }).condition(function (collapsed) {
          return !collapsed;
        });
      }
    }

    _attachBindings_value() {
      var field, fieldName, ref;
      ref = this.fields;

      for (fieldName in ref) {
        field = ref[fieldName];
        simplybind('_value').of(field).to(fieldName).of(this._value);
        simplybind('_value', {
          updateOnBind: false
        }).of(field).to(value => {
          if (value) {
            this.state.interacted = true;
          }

          this.state.valid = this.validate(void 0, true);
          return this.emit('input', this._value);
        });
      }
    }

    _validate(providedValue, testUnrequired, report) {
      var field, i, isValid, len, ref, someInvalid;
      someInvalid = false;
      ref = this.fieldsArray;

      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];

        if (!field.state.visible) {
          continue;
        }

        if (report) {
          isValid = field.validateAndReport(providedValue[field.name], testUnrequired);
        } else {
          isValid = field.validate(providedValue[field.name], testUnrequired);
        }

        if (!isValid) {
          someInvalid = true;
        }
      }

      return !someInvalid;
    }

    _calcFocusState() {
      return this.state.focused = this.fieldsArray.some(function (field) {
        return field.state.focused;
      });
    }

    _calcBlurState() {
      return setTimeout(this._calcFocusState);
    }

    focus() {
      var field, i, len, ref;
      this.state.collapsed = false;
      ref = this.fieldsArray;

      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];

        if (field.focus) {
          return field.focus();
        }
      }
    }

    blur() {
      var field, i, len, ref;
      ref = this.fieldsArray;

      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];

        if (field.blur) {
          return field.blur();
        }
      }
    }

    addAction(name, icons, callback, prepend) {
      var action, i, icon, len;

      if (icons && !IS$1$1.array(icons)) {
        icons = [icons];
      }

      action = this.templates.action.spawn(this.settings.templates.action, {
        relatedInstance: this
      });
      action.ref = action.options.ref = name;

      for (i = 0, len = icons.length; i < len; i++) {
        icon = icons[i];
        action.child.icon.append(icon);
      }

      this.el.child.actions[prepend ? 'prepend' : 'append'](action);

      if (callback) {
        simplybind('event:click').of(action).to(callback);
      }

      return action;
    }

  }

  GroupField.prototype.template = template$8;
  GroupField.prototype.templates = templates$7;
  GroupField.prototype.defaults = defaults$8;
  GroupField.prototype.shallowSettings = ['fields'];
  return GroupField;
}.call(undefined);

var GroupField$1 = GroupField;var template$9 = quickdom.template(['div', {
  ref: 'field',
  style: {
    position: 'relative',
    boxSizing: 'border-box',
    verticalAlign: 'top',
    display: 'none',
    width: function (field) {
      return field.state.width;
    },
    fontFamily: function (field) {
      return field.settings.fontFamily;
    },
    borderRadius: 3,
    textAlign: 'left',
    $visible: {
      display: 'inline-block'
    },
    $showError: {
      animation: '0.2s fieldErrorShake'
    }
  }
}, ['div', {
  ref: 'label',
  style: {
    display: 'none',
    fontFamily: 'inherit',
    fontSize: '16px',
    fontWeight: 600,
    textAlign: 'left',
    color: COLORS$1.black,
    cursor: 'default',
    userSelect: 'none',
    $showLabel: {
      display: 'block'
    },
    $showError: {
      color: COLORS$1.red
    }
  }
}], ['div', {
  ref: 'collapse',
  style: {
    position: 'absolute',
    top: 5,
    right: 0,
    lineHeight: 0,
    fontSize: 0,
    display: 'none',
    $showLabel: {
      $collapsable: {
        display: 'block'
      }
    }
  }
}, ['div', {
  ref: 'icon',
  style: {
    width: 17,
    height: 17,
    color: COLORS$1.grey,
    fill: COLORS$1.grey,
    $hover: {
      color: COLORS$1.grey_dark,
      fill: COLORS$1.grey_dark
    }
  }
}, ...collapseIcons]], ['div', {
  ref: 'help',
  style: {
    marginTop: '10px',
    fontFamily: 'inherit',
    fontSize: '11px',
    color: COLORS$1.grey,
    display: 'none',
    $showError: {
      color: COLORS$1.red,
      display: 'block'
    },
    $showHelp: {
      display: 'block'
    }
  }
}], ['div', {
  ref: 'innerwrap',
  unpassableStates: ['visible', 'hover', 'focus', 'disabled', 'showLabel', 'showError', 'showHelp', 'collapsed', 'valid', 'invalid'],
  style: {
    position: 'relative',
    boxSizing: 'border-box',
    marginTop: 15,
    fontFamily: 'inherit',
    textAlign: 'justify',
    textJustify: 'distribute-all-lines',
    fontSize: 0,
    $collapsed: {
      display: 'none'
    }
  }
}, ['div', {
  ref: 'addButton',
  style: {
    position: 'relative',
    verticalAlign: 'middle',
    boxSizing: 'border-box',
    padding: 12,
    backgroundColor: COLORS$1.grey_semi_light,
    borderRadius: 3,
    cursor: 'pointer',
    userSelect: 'none',
    lineHeight: '1em',
    textAlign: 'center',
    $disabled: {
      display: 'none'
    },
    $inlineStyle: {
      display: 'inline-block',
      top: function (field) {
        return field.settings.groupMargin / 2 * -1;
      }
    }
  }
}, ['div', {
  style: {
    display: 'inline-block',
    width: 15,
    height: 15,
    color: COLORS$1.black,
    fill: COLORS$1.black
  }
}, plus]]]]);
var cloneIcon = clone$1.extend({
  options: {
    style: {
      width: 11
    }
  }
});
var removeIcon = remove$1.extend({
  options: {
    style: {
      width: 11
    }
  }
});
var blockGroup = {};
var inlineGroup = {
  default: {
    // options: style:
    // 	verticalAlign: 'middle'
    children: {
      innerwrap: {
        options: {
          style: {
            display: 'inline-block',
            verticalAlign: 'middle',
            marginTop: 0
          }
        }
      },
      actions: {
        options: {
          events: {
            inserted: function () {
              return this.insertAfter(this.parent.child.innerwrap);
            }
          },
          style: {
            position: 'static',
            verticalAlign: 'middle',
            display: 'inline-table'
          }
        }
      }
    }
  },
  action: ['div', {
    events: {
      inserted: function () {
        if (this.index) {
          return this.style('borderTop', `1px solid ${COLORS$1.grey}`);
        }
      }
    },
    style: {
      boxSizing: 'border-box',
      display: 'table-row',
      padding: 4
    }
  }, ['div', {
    ref: 'icon',
    style: {
      verticalAlign: 'middle',
      display: 'table-cell',
      color: COLORS$1.black,
      fill: COLORS$1.black,
      opacity: 0.6,
      $hover: {
        opacity: 1
      }
    }
  }]]
};
var templates$8 =
/*#__PURE__*/
Object.freeze({
  __proto__: null,
  'default': template$9,
  cloneIcon: cloneIcon,
  removeIcon: removeIcon,
  blockGroup: blockGroup,
  inlineGroup: inlineGroup
});var defaults$9 = {
  fields: null,
  style: 'block',
  collapsable: true,
  startCollapsed: false,
  groupMargin: 10,
  groupWidth: '100%',
  autoWidth: true,
  autoRemoveEmpty: false,
  dynamicLabel: false,
  minItems: null,
  maxItems: null,
  draggable: false,
  cloneable: false,
  removeable: true,
  singleMode: false,
  numbering: false,
  multiple: true,
  dragdrop: true,
  groupSettings: {
    labelSize: 14,
    inline: {
      padding: 0,
      fieldMargin: 0,
      width: 'auto',
      collapsable: false,
      startCollapsed: false,
      templates: inlineGroup
    },
    block: {
      startCollapsed: false,
      templates: blockGroup
    }
  }
};var atoa = function atoa(a, n) {
  return Array.prototype.slice.call(a, n);
};var si = typeof setImmediate === 'function',
    tick;

if (si) {
  tick = function (fn) {
    setImmediate(fn);
  };
} else {
  tick = function (fn) {
    setTimeout(fn, 0);
  };
}

var tickyBrowser = tick;var debounce = function debounce(fn, args, ctx) {
  if (!fn) {
    return;
  }

  tickyBrowser(function run() {
    fn.apply(ctx || null, args || []);
  });
};var emitter = function emitter(thing, options) {
  var opts = options || {};
  var evt = {};

  if (thing === undefined) {
    thing = {};
  }

  thing.on = function (type, fn) {
    if (!evt[type]) {
      evt[type] = [fn];
    } else {
      evt[type].push(fn);
    }

    return thing;
  };

  thing.once = function (type, fn) {
    fn._once = true; // thing.off(fn) still works!

    thing.on(type, fn);
    return thing;
  };

  thing.off = function (type, fn) {
    var c = arguments.length;

    if (c === 1) {
      delete evt[type];
    } else if (c === 0) {
      evt = {};
    } else {
      var et = evt[type];

      if (!et) {
        return thing;
      }

      et.splice(et.indexOf(fn), 1);
    }

    return thing;
  };

  thing.emit = function () {
    var args = atoa(arguments);
    return thing.emitterSnapshot(args.shift()).apply(this, args);
  };

  thing.emitterSnapshot = function (type) {
    var et = (evt[type] || []).slice(0);
    return function () {
      var args = atoa(arguments);
      var ctx = this || thing;

      if (type === 'error' && opts.throws !== false && !et.length) {
        throw args.length === 1 ? args[0] : args;
      }

      et.forEach(function emitter(listen) {
        if (opts.async) {
          debounce(listen, args, ctx);
        } else {
          listen.apply(ctx, args);
        }

        if (listen._once) {
          thing.off(type, listen);
        }
      });
      return thing;
    };
  };

  return thing;
};var NativeCustomEvent = commonjsGlobal.CustomEvent;

function useNative() {
  try {
    var p = new NativeCustomEvent('cat', {
      detail: {
        foo: 'bar'
      }
    });
    return 'cat' === p.type && 'bar' === p.detail.foo;
  } catch (e) {}

  return false;
}
/**
 * Cross-browser `CustomEvent` constructor.
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.CustomEvent
 *
 * @public
 */


var customEvent = useNative() ? NativeCustomEvent : // IE >= 9
'function' === typeof document.createEvent ? function CustomEvent(type, params) {
  var e = document.createEvent('CustomEvent');

  if (params) {
    e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);
  } else {
    e.initCustomEvent(type, false, false, void 0);
  }

  return e;
} : // IE <= 8
function CustomEvent(type, params) {
  var e = document.createEventObject();
  e.type = type;

  if (params) {
    e.bubbles = Boolean(params.bubbles);
    e.cancelable = Boolean(params.cancelable);
    e.detail = params.detail;
  } else {
    e.bubbles = false;
    e.cancelable = false;
    e.detail = void 0;
  }

  return e;
};var eventmap = [];
var eventname = '';
var ron = /^on/;

for (eventname in commonjsGlobal) {
  if (ron.test(eventname)) {
    eventmap.push(eventname.slice(2));
  }
}

var eventmap_1 = eventmap;var doc = commonjsGlobal.document;
var addEvent = addEventEasy;
var removeEvent = removeEventEasy;
var hardCache = [];

if (!commonjsGlobal.addEventListener) {
  addEvent = addEventHard;
  removeEvent = removeEventHard;
}

var crossvent = {
  add: addEvent,
  remove: removeEvent,
  fabricate: fabricateEvent
};

function addEventEasy(el, type, fn, capturing) {
  return el.addEventListener(type, fn, capturing);
}

function addEventHard(el, type, fn) {
  return el.attachEvent('on' + type, wrap$1(el, type, fn));
}

function removeEventEasy(el, type, fn, capturing) {
  return el.removeEventListener(type, fn, capturing);
}

function removeEventHard(el, type, fn) {
  var listener = unwrap$1(el, type, fn);

  if (listener) {
    return el.detachEvent('on' + type, listener);
  }
}

function fabricateEvent(el, type, model) {
  var e = eventmap_1.indexOf(type) === -1 ? makeCustomEvent() : makeClassicEvent();

  if (el.dispatchEvent) {
    el.dispatchEvent(e);
  } else {
    el.fireEvent('on' + type, e);
  }

  function makeClassicEvent() {
    var e;

    if (doc.createEvent) {
      e = doc.createEvent('Event');
      e.initEvent(type, true, true);
    } else if (doc.createEventObject) {
      e = doc.createEventObject();
    }

    return e;
  }

  function makeCustomEvent() {
    return new customEvent(type, {
      detail: model
    });
  }
}

function wrapperFactory(el, type, fn) {
  return function wrapper(originalEvent) {
    var e = originalEvent || commonjsGlobal.event;
    e.target = e.target || e.srcElement;

    e.preventDefault = e.preventDefault || function preventDefault() {
      e.returnValue = false;
    };

    e.stopPropagation = e.stopPropagation || function stopPropagation() {
      e.cancelBubble = true;
    };

    e.which = e.which || e.keyCode;
    fn.call(el, e);
  };
}

function wrap$1(el, type, fn) {
  var wrapper = unwrap$1(el, type, fn) || wrapperFactory(el, type, fn);
  hardCache.push({
    wrapper: wrapper,
    element: el,
    type: type,
    fn: fn
  });
  return wrapper;
}

function unwrap$1(el, type, fn) {
  var i = find(el, type, fn);

  if (i) {
    var wrapper = hardCache[i].wrapper;
    hardCache.splice(i, 1); // free up a tad of memory

    return wrapper;
  }
}

function find(el, type, fn) {
  var i, item;

  for (i = 0; i < hardCache.length; i++) {
    item = hardCache[i];

    if (item.element === el && item.type === type && item.fn === fn) {
      return i;
    }
  }
}var cache = {};
var start = '(?:^|\\s)';
var end = '(?:\\s|$)';

function lookupClass(className) {
  var cached = cache[className];

  if (cached) {
    cached.lastIndex = 0;
  } else {
    cache[className] = cached = new RegExp(start + className + end, 'g');
  }

  return cached;
}

function addClass$1(el, className) {
  var current = el.className;

  if (!current.length) {
    el.className = className;
  } else if (!lookupClass(className).test(current)) {
    el.className += ' ' + className;
  }
}

function rmClass(el, className) {
  el.className = el.className.replace(lookupClass(className), ' ').trim();
}

var classes = {
  add: addClass$1,
  rm: rmClass
};var doc$1 = document;
var documentElement = doc$1.documentElement;

function dragula(initialContainers, options) {
  var len = arguments.length;

  if (len === 1 && Array.isArray(initialContainers) === false) {
    options = initialContainers;
    initialContainers = [];
  }

  var _mirror; // mirror image


  var _source; // source container


  var _item; // item being dragged


  var _offsetX; // reference x


  var _offsetY; // reference y


  var _moveX; // reference move x


  var _moveY; // reference move y


  var _initialSibling; // reference sibling when grabbed


  var _currentSibling; // reference sibling now


  var _copy; // item used for copying


  var _renderTimer; // timer for setTimeout renderMirrorImage


  var _lastDropTarget = null; // last container item was over

  var _grabbed; // holds mousedown context until first mousemove


  var o = options || {};

  if (o.moves === void 0) {
    o.moves = always;
  }

  if (o.accepts === void 0) {
    o.accepts = always;
  }

  if (o.invalid === void 0) {
    o.invalid = invalidTarget;
  }

  if (o.containers === void 0) {
    o.containers = initialContainers || [];
  }

  if (o.isContainer === void 0) {
    o.isContainer = never;
  }

  if (o.copy === void 0) {
    o.copy = false;
  }

  if (o.copySortSource === void 0) {
    o.copySortSource = false;
  }

  if (o.revertOnSpill === void 0) {
    o.revertOnSpill = false;
  }

  if (o.removeOnSpill === void 0) {
    o.removeOnSpill = false;
  }

  if (o.direction === void 0) {
    o.direction = 'vertical';
  }

  if (o.ignoreInputTextSelection === void 0) {
    o.ignoreInputTextSelection = true;
  }

  if (o.mirrorContainer === void 0) {
    o.mirrorContainer = doc$1.body;
  }

  var drake = emitter({
    containers: o.containers,
    start: manualStart,
    end: end,
    cancel: cancel,
    remove: remove,
    destroy: destroy,
    canMove: canMove,
    dragging: false
  });

  if (o.removeOnSpill === true) {
    drake.on('over', spillOver).on('out', spillOut);
  }

  events();
  return drake;

  function isContainer(el) {
    return drake.containers.indexOf(el) !== -1 || o.isContainer(el);
  }

  function events(remove) {
    var op = remove ? 'remove' : 'add';
    touchy(documentElement, op, 'mousedown', grab);
    touchy(documentElement, op, 'mouseup', release);
  }

  function eventualMovements(remove) {
    var op = remove ? 'remove' : 'add';
    touchy(documentElement, op, 'mousemove', startBecauseMouseMoved);
  }

  function movements(remove) {
    var op = remove ? 'remove' : 'add';
    crossvent[op](documentElement, 'selectstart', preventGrabbed); // IE8

    crossvent[op](documentElement, 'click', preventGrabbed);
  }

  function destroy() {
    events(true);
    release({});
  }

  function preventGrabbed(e) {
    if (_grabbed) {
      e.preventDefault();
    }
  }

  function grab(e) {
    _moveX = e.clientX;
    _moveY = e.clientY;
    var ignore = whichMouseButton(e) !== 1 || e.metaKey || e.ctrlKey;

    if (ignore) {
      return; // we only care about honest-to-god left clicks and touch events
    }

    var item = e.target;
    var context = canStart(item);

    if (!context) {
      return;
    }

    _grabbed = context;
    eventualMovements();

    if (e.type === 'mousedown') {
      if (isInput(item)) {
        // see also: https://github.com/bevacqua/dragula/issues/208
        item.focus(); // fixes https://github.com/bevacqua/dragula/issues/176
      } else {
        e.preventDefault(); // fixes https://github.com/bevacqua/dragula/issues/155
      }
    }
  }

  function startBecauseMouseMoved(e) {
    if (!_grabbed) {
      return;
    }

    if (whichMouseButton(e) === 0) {
      release({});
      return; // when text is selected on an input and then dragged, mouseup doesn't fire. this is our only hope
    } // truthy check fixes #239, equality fixes #207


    if (e.clientX !== void 0 && e.clientX === _moveX && e.clientY !== void 0 && e.clientY === _moveY) {
      return;
    }

    if (o.ignoreInputTextSelection) {
      var clientX = getCoord('clientX', e);
      var clientY = getCoord('clientY', e);
      var elementBehindCursor = doc$1.elementFromPoint(clientX, clientY);

      if (isInput(elementBehindCursor)) {
        return;
      }
    }

    var grabbed = _grabbed; // call to end() unsets _grabbed

    eventualMovements(true);
    movements();
    end();
    start(grabbed);
    var offset = getOffset(_item);
    _offsetX = getCoord('pageX', e) - offset.left;
    _offsetY = getCoord('pageY', e) - offset.top;
    classes.add(_copy || _item, 'gu-transit');
    renderMirrorImage();
    drag(e);
  }

  function canStart(item) {
    if (drake.dragging && _mirror) {
      return;
    }

    if (isContainer(item)) {
      return; // don't drag container itself
    }

    var handle = item;

    while (getParent(item) && isContainer(getParent(item)) === false) {
      if (o.invalid(item, handle)) {
        return;
      }

      item = getParent(item); // drag target should be a top element

      if (!item) {
        return;
      }
    }

    var source = getParent(item);

    if (!source) {
      return;
    }

    if (o.invalid(item, handle)) {
      return;
    }

    var movable = o.moves(item, source, handle, nextEl(item));

    if (!movable) {
      return;
    }

    return {
      item: item,
      source: source
    };
  }

  function canMove(item) {
    return !!canStart(item);
  }

  function manualStart(item) {
    var context = canStart(item);

    if (context) {
      start(context);
    }
  }

  function start(context) {
    if (isCopy(context.item, context.source)) {
      _copy = context.item.cloneNode(true);
      drake.emit('cloned', _copy, context.item, 'copy');
    }

    _source = context.source;
    _item = context.item;
    _initialSibling = _currentSibling = nextEl(context.item);
    drake.dragging = true;
    drake.emit('drag', _item, _source);
  }

  function invalidTarget() {
    return false;
  }

  function end() {
    if (!drake.dragging) {
      return;
    }

    var item = _copy || _item;
    drop(item, getParent(item));
  }

  function ungrab() {
    _grabbed = false;
    eventualMovements(true);
    movements(true);
  }

  function release(e) {
    ungrab();

    if (!drake.dragging) {
      return;
    }

    var item = _copy || _item;
    var clientX = getCoord('clientX', e);
    var clientY = getCoord('clientY', e);
    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);

    if (dropTarget && (_copy && o.copySortSource || !_copy || dropTarget !== _source)) {
      drop(item, dropTarget);
    } else if (o.removeOnSpill) {
      remove();
    } else {
      cancel();
    }
  }

  function drop(item, target) {
    var parent = getParent(item);

    if (_copy && o.copySortSource && target === _source) {
      parent.removeChild(_item);
    }

    if (isInitialPlacement(target)) {
      drake.emit('cancel', item, _source, _source);
    } else {
      drake.emit('drop', item, target, _source, _currentSibling);
    }

    cleanup();
  }

  function remove() {
    if (!drake.dragging) {
      return;
    }

    var item = _copy || _item;
    var parent = getParent(item);

    if (parent) {
      parent.removeChild(item);
    }

    drake.emit(_copy ? 'cancel' : 'remove', item, parent, _source);
    cleanup();
  }

  function cancel(revert) {
    if (!drake.dragging) {
      return;
    }

    var reverts = arguments.length > 0 ? revert : o.revertOnSpill;
    var item = _copy || _item;
    var parent = getParent(item);
    var initial = isInitialPlacement(parent);

    if (initial === false && reverts) {
      if (_copy) {
        if (parent) {
          parent.removeChild(_copy);
        }
      } else {
        _source.insertBefore(item, _initialSibling);
      }
    }

    if (initial || reverts) {
      drake.emit('cancel', item, _source, _source);
    } else {
      drake.emit('drop', item, parent, _source, _currentSibling);
    }

    cleanup();
  }

  function cleanup() {
    var item = _copy || _item;
    ungrab();
    removeMirrorImage();

    if (item) {
      classes.rm(item, 'gu-transit');
    }

    if (_renderTimer) {
      clearTimeout(_renderTimer);
    }

    drake.dragging = false;

    if (_lastDropTarget) {
      drake.emit('out', item, _lastDropTarget, _source);
    }

    drake.emit('dragend', item);
    _source = _item = _copy = _initialSibling = _currentSibling = _renderTimer = _lastDropTarget = null;
  }

  function isInitialPlacement(target, s) {
    var sibling;

    if (s !== void 0) {
      sibling = s;
    } else if (_mirror) {
      sibling = _currentSibling;
    } else {
      sibling = nextEl(_copy || _item);
    }

    return target === _source && sibling === _initialSibling;
  }

  function findDropTarget(elementBehindCursor, clientX, clientY) {
    var target = elementBehindCursor;

    while (target && !accepted()) {
      target = getParent(target);
    }

    return target;

    function accepted() {
      var droppable = isContainer(target);

      if (droppable === false) {
        return false;
      }

      var immediate = getImmediateChild(target, elementBehindCursor);
      var reference = getReference(target, immediate, clientX, clientY);
      var initial = isInitialPlacement(target, reference);

      if (initial) {
        return true; // should always be able to drop it right back where it was
      }

      return o.accepts(_item, target, _source, reference);
    }
  }

  function drag(e) {
    if (!_mirror) {
      return;
    }

    e.preventDefault();
    var clientX = getCoord('clientX', e);
    var clientY = getCoord('clientY', e);
    var x = clientX - _offsetX;
    var y = clientY - _offsetY;
    _mirror.style.left = x + 'px';
    _mirror.style.top = y + 'px';
    var item = _copy || _item;
    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);
    var changed = dropTarget !== null && dropTarget !== _lastDropTarget;

    if (changed || dropTarget === null) {
      out();
      _lastDropTarget = dropTarget;
      over();
    }

    var parent = getParent(item);

    if (dropTarget === _source && _copy && !o.copySortSource) {
      if (parent) {
        parent.removeChild(item);
      }

      return;
    }

    var reference;
    var immediate = getImmediateChild(dropTarget, elementBehindCursor);

    if (immediate !== null) {
      reference = getReference(dropTarget, immediate, clientX, clientY);
    } else if (o.revertOnSpill === true && !_copy) {
      reference = _initialSibling;
      dropTarget = _source;
    } else {
      if (_copy && parent) {
        parent.removeChild(item);
      }

      return;
    }

    if (reference === null && changed || reference !== item && reference !== nextEl(item)) {
      _currentSibling = reference;
      dropTarget.insertBefore(item, reference);
      drake.emit('shadow', item, dropTarget, _source);
    }

    function moved(type) {
      drake.emit(type, item, _lastDropTarget, _source);
    }

    function over() {
      if (changed) {
        moved('over');
      }
    }

    function out() {
      if (_lastDropTarget) {
        moved('out');
      }
    }
  }

  function spillOver(el) {
    classes.rm(el, 'gu-hide');
  }

  function spillOut(el) {
    if (drake.dragging) {
      classes.add(el, 'gu-hide');
    }
  }

  function renderMirrorImage() {
    if (_mirror) {
      return;
    }

    var rect = _item.getBoundingClientRect();

    _mirror = _item.cloneNode(true);
    _mirror.style.width = getRectWidth(rect) + 'px';
    _mirror.style.height = getRectHeight(rect) + 'px';
    classes.rm(_mirror, 'gu-transit');
    classes.add(_mirror, 'gu-mirror');
    o.mirrorContainer.appendChild(_mirror);
    touchy(documentElement, 'add', 'mousemove', drag);
    classes.add(o.mirrorContainer, 'gu-unselectable');
    drake.emit('cloned', _mirror, _item, 'mirror');
  }

  function removeMirrorImage() {
    if (_mirror) {
      classes.rm(o.mirrorContainer, 'gu-unselectable');
      touchy(documentElement, 'remove', 'mousemove', drag);
      getParent(_mirror).removeChild(_mirror);
      _mirror = null;
    }
  }

  function getImmediateChild(dropTarget, target) {
    var immediate = target;

    while (immediate !== dropTarget && getParent(immediate) !== dropTarget) {
      immediate = getParent(immediate);
    }

    if (immediate === documentElement) {
      return null;
    }

    return immediate;
  }

  function getReference(dropTarget, target, x, y) {
    var horizontal = o.direction === 'horizontal';
    var reference = target !== dropTarget ? inside() : outside();
    return reference;

    function outside() {
      // slower, but able to figure out any position
      var len = dropTarget.children.length;
      var i;
      var el;
      var rect;

      for (i = 0; i < len; i++) {
        el = dropTarget.children[i];
        rect = el.getBoundingClientRect();

        if (horizontal && rect.left + rect.width / 2 > x) {
          return el;
        }

        if (!horizontal && rect.top + rect.height / 2 > y) {
          return el;
        }
      }

      return null;
    }

    function inside() {
      // faster, but only available if dropped inside a child element
      var rect = target.getBoundingClientRect();

      if (horizontal) {
        return resolve(x > rect.left + getRectWidth(rect) / 2);
      }

      return resolve(y > rect.top + getRectHeight(rect) / 2);
    }

    function resolve(after) {
      return after ? nextEl(target) : target;
    }
  }

  function isCopy(item, container) {
    return typeof o.copy === 'boolean' ? o.copy : o.copy(item, container);
  }
}

function touchy(el, op, type, fn) {
  var touch = {
    mouseup: 'touchend',
    mousedown: 'touchstart',
    mousemove: 'touchmove'
  };
  var pointers = {
    mouseup: 'pointerup',
    mousedown: 'pointerdown',
    mousemove: 'pointermove'
  };
  var microsoft = {
    mouseup: 'MSPointerUp',
    mousedown: 'MSPointerDown',
    mousemove: 'MSPointerMove'
  };

  if (commonjsGlobal.navigator.pointerEnabled) {
    crossvent[op](el, pointers[type], fn);
  } else if (commonjsGlobal.navigator.msPointerEnabled) {
    crossvent[op](el, microsoft[type], fn);
  } else {
    crossvent[op](el, touch[type], fn);
    crossvent[op](el, type, fn);
  }
}

function whichMouseButton(e) {
  if (e.touches !== void 0) {
    return e.touches.length;
  }

  if (e.which !== void 0 && e.which !== 0) {
    return e.which;
  } // see https://github.com/bevacqua/dragula/issues/261


  if (e.buttons !== void 0) {
    return e.buttons;
  }

  var button = e.button;

  if (button !== void 0) {
    // see https://github.com/jquery/jquery/blob/99e8ff1baa7ae341e94bb89c3e84570c7c3ad9ea/src/event.js#L573-L575
    return button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
  }
}

function getOffset(el) {
  var rect = el.getBoundingClientRect();
  return {
    left: rect.left + getScroll('scrollLeft', 'pageXOffset'),
    top: rect.top + getScroll('scrollTop', 'pageYOffset')
  };
}

function getScroll(scrollProp, offsetProp) {
  if (typeof commonjsGlobal[offsetProp] !== 'undefined') {
    return commonjsGlobal[offsetProp];
  }

  if (documentElement.clientHeight) {
    return documentElement[scrollProp];
  }

  return doc$1.body[scrollProp];
}

function getElementBehindPoint(point, x, y) {
  var p = point || {};
  var state = p.className;
  var el;
  p.className += ' gu-hide';
  el = doc$1.elementFromPoint(x, y);
  p.className = state;
  return el;
}

function never() {
  return false;
}

function always() {
  return true;
}

function getRectWidth(rect) {
  return rect.width || rect.right - rect.left;
}

function getRectHeight(rect) {
  return rect.height || rect.bottom - rect.top;
}

function getParent(el) {
  return el.parentNode === doc$1 ? null : el.parentNode;
}

function isInput(el) {
  return el.tagName === 'INPUT' || el.tagName === 'TEXTAREA' || el.tagName === 'SELECT' || isEditable$1(el);
}

function isEditable$1(el) {
  if (!el) {
    return false;
  } // no parents were editable


  if (el.contentEditable === 'false') {
    return false;
  } // stop the lookup


  if (el.contentEditable === 'true') {
    return true;
  } // found a contentEditable element in the chain


  return isEditable$1(getParent(el)); // contentEditable is set to 'inherit'
}

function nextEl(el) {
  return el.nextElementSibling || manually();

  function manually() {
    var sibling = el;

    do {
      sibling = sibling.nextSibling;
    } while (sibling && sibling.nodeType !== 1);

    return sibling;
  }
}

function getEventHost(e) {
  // on touchend event, we have to use `e.changedTouches`
  // see http://stackoverflow.com/questions/7192563/touchend-event-properties
  // see https://github.com/bevacqua/dragula/issues/34
  if (e.targetTouches && e.targetTouches.length) {
    return e.targetTouches[0];
  }

  if (e.changedTouches && e.changedTouches.length) {
    return e.changedTouches[0];
  }

  return e;
}

function getCoord(coord, e) {
  var host = getEventHost(e);
  var missMap = {
    pageX: 'clientX',
    // IE8
    pageY: 'clientY' // IE8

  };

  if (coord in missMap && !(coord in host) && missMap[coord] in host) {
    coord = missMap[coord];
  }

  return host[coord];
}

var dragula_1 = dragula;(function () {
  var css = ".gu-mirror {\n  position: fixed !important;\n  margin: 0 !important;\n  z-index: 9999 !important;\n  opacity: 0.8;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=80)\";\n  filter: alpha(opacity=80);\n}\n.gu-hide {\n  display: none !important;\n}\n.gu-unselectable {\n  -webkit-user-select: none !important;\n  -moz-user-select: none !important;\n  -ms-user-select: none !important;\n  user-select: none !important;\n}\n.gu-transit {\n  opacity: 0.2;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=20)\";\n  filter: alpha(opacity=20);\n}\n";
  var head = document.getElementsByTagName('head')[0];
  var sheet = document.createElement('style');
  sheet.setAttribute('data-file', '/Users/danielkalen/sandbox/quickfield/node_modules/dragula/dist/dragula.css');
  sheet.innerHTML = css;
  head.appendChild(sheet);
})();

var RepeaterField;

RepeaterField = function () {
  class RepeaterField extends Field$1 {
    constructor() {
      var base, diff;
      super(...arguments);
      this._calcFocusState = this._calcFocusState.bind(this);
      this._calcBlurState = this._calcBlurState.bind(this);
      this._emitSubmit = this.emit.bind(this, 'submit');
      this.groupLabel = IS$1$1.string(this.settings.numbering) ? this.settings.numbering : 'Item';
      this.labelRegex = new RegExp(`^${this.groupLabel} \\d+(?:\: )?`);
      this.state.collapsed = this.settings.startCollapsed && this.settings.collapsable;

      if (this._value == null) {
        this._value = [];
      }

      this.settings._groupSettings = primaryBuilder$1.notKeys(['inline', 'block']).clone(this.settings.groupSettings);
      this.settings.groupSettings = primaryBuilder$1.keys(['inline', 'block']).clone(this.settings.groupSettings);

      if (this.settings.style === 'block') {
        this.settings.autoWidth = true;
      }

      if (this.settings.field) {
        this.settings.singleMode = true;
      }

      if (this.settings.singleMode) {
        this.settings.fields = [this.settings.field || this.settings.fields];
      }

      if ((base = this.settings).value == null) {
        base.value = [];
      }

      if (this.settings.minItems && this.settings.value.length < this.settings.minItems) {
        diff = this.settings.minItems - this.settings.value.length;

        while (--diff) {
          this.settings.value.push(null);
        }
      }

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      var group, i, index, len, ref, values;
      values = [];
      ref = this._value;

      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        group = ref[index];
        values[index] = group.value;
      }

      return values;
    }

    _setValue(newValue) {
      var i, index, len, value;

      if (!IS$1$1.array(newValue)) {
        this.addItem(newValue, false, true);
      } else {
        for (index = i = 0, len = newValue.length; i < len; index = ++i) {
          value = newValue[index];

          if (this._value[index] != null) {
            this._value[index].value = value;
          } else {
            this.addItem(value, false, true);
          }
        }
      }

      return newValue;
    }

    _createElements() {
      var forceOpts;
      forceOpts = {
        relatedInstance: this
      };
      this.el = this.template.spawn(this.settings.templates.default, forceOpts);
      this.el.state('collapsable', this.settings.collapsable);
      this.el.state(`${this.settings.style}Style`, true);
      this.el.raw._quickField = this.el.childf.innerwrap.raw._quickField = this;

      if (this.settings.dragdrop) {
        this.dragger = dragula_1([this.el.child.innerwrap.raw], {
          revertOnSpill: true,
          invalid: function (el) {
            var ref;
            return ((ref = el._quickElement) != null ? ref.ref : void 0) === 'addButton';
          }
        }); // moves: (_, __, el)-> el._quickElement?.ref is 'header'

        this.dragger.on('drop', () => {
          return this.reOrganize();
        });
      }
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_display();

      this._attachBindings_stateTriggers();

      this._attachBindings_value();
    }

    _attachBindings_elState() {
      simplybind('visible').of(this.state).to(visible => {
        return this.el.state('visible', visible);
      });
      simplybind('disabled').of(this.state).to(disabled => {
        return this.el.state('disabled', disabled);
      });
      simplybind('showLabel').of(this.state).to(showLabel => {
        return this.el.state('showLabel', showLabel);
      });
      simplybind('showError').of(this.state).to(showError => {
        return this.el.state('showError', showError);
      });
      simplybind('showHelp').of(this.state).to(showHelp => {
        return this.el.state('showHelp', showHelp);
      });
      simplybind('collapsed').of(this.state).to(collapsed => {
        return this.el.state('collapsed', collapsed);
      });
      return simplybind('valid').of(this.state).to(valid => {
        this.el.state('valid', valid);
        return this.el.state('invalid', !valid);
      });
    }

    _attachBindings_display() {
      var group, i, len, ref;
      simplybind('width').of(this.state).to(width => {
        return this.el.style('width', width).state('definedWidth', width !== 'auto');
      }).transform(this._formatWidth.bind(this)).updateOn('isMobile').of(this.state);
      simplybind('showError', {
        updateOnBind: false
      }).of(this.state).to(showError => {
        var group, i, len, ref, results;
        ref = this._value;
        results = [];

        for (i = 0, len = ref.length; i < len; i++) {
          group = ref[i];
          results.push(group.state.showError = showError);
        }

        return results;
      });
      ref = this._value;

      for (i = 0, len = ref.length; i < len; i++) {
        group = ref[i];
        simplybind('disabled').of(this.state).to('disabled').of(field.state);
      }
    }

    _attachBindings_stateTriggers() {
      var toggleCollapse;

      if (this.settings.collapsable) {
        toggleCollapse = () => {
          this.state.collapsed = !this.state.collapsed;
          return this.emit('collapsed', this.state.collapsed);
        };

        simplybind('event:click').of(this.el.child.collapse).to(toggleCollapse);
        simplybind('event:click').of(this.el.child.label).to(toggleCollapse);
        simplybind('collapsed').of(this.state).once.to(() => {
          return this._recalcDisplay();
        }).condition(function (collapsed) {
          return !collapsed;
        });
      }
    }

    _attachBindings_value() {
      simplybind('array:_value', {
        updateOnBind: true
      }).of(this).to((value, prevValue) => {
        if (value.length) {
          this._recalcLabels();
        }

        if (prevValue) {
          this.state.interacted = true;
          return this.state.valid = this.validate(void 0, true);
        }
      });
      simplybind('event:click').of(this.el.child.addButton).to(() => {
        return this.addItem().focus();
      });
    }

    _validate(providedValue, testUnrequired) {
      var group, i, isValid, len, ref;
      ref = this._value;

      for (i = 0, len = ref.length; i < len; i++) {
        group = ref[i];
        isValid = group.validate(providedValue[group.name], testUnrequired);

        if (!isValid) {
          return false;
        }
      }

      return true;
    }

    _calcFocusState() {
      return this.state.focused = this._value.some(function (field) {
        return field.state.focused;
      });
    }

    _calcBlurState() {
      return setTimeout(this._calcFocusState);
    }

    focus() {
      var ref;
      return (ref = this._value[0]) != null ? ref.focus() : void 0;
    }

    blur() {
      var field, i, len, ref;
      ref = this._value;

      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];

        if (field.blur) {
          field.blur();
        }
      }
    }

    _recalcLabels() {
      var group, i, index, len, ref;

      if (this.settings.style === 'block') {
        if (!this.settings.numbering && !this.settings.dynamicLabel) {
          return;
        }

        ref = this._value;

        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          group = ref[index];

          this._recalcLabel(group, index);
        }
      }
    }

    _recalcLabel(group, index) {
      var existingLabel, newLabel;

      if (this.settings.dynamicLabel && group.fields[this.settings.dynamicLabel]) {
        newLabel = group.fields[this.settings.dynamicLabel].value;
      } else {
        existingLabel = group.state.label || '';
        existingLabel = existingLabel.replace(this.labelRegex, '');
        newLabel = `${this.groupLabel} ${index + 1}`;

        if (existingLabel) {
          newLabel += `: ${existingLabel}`;
        }
      }

      return group.state.label = newLabel;
    }

    _recalcDisplay() {
      var group, i, len, ref;
      ref = this._value;

      for (i = 0, len = ref.length; i < len; i++) {
        group = ref[i];

        if (group._recalcDisplay) {
          group._recalcDisplay();
        }
      }
    }

    addItem(value, skipInsert, skipEmit) {
      var firstField, group, margin, refreshChildren, required, settings;

      if (this.settings.maxItems && this._value.length === this.settings.maxItems || this.state.disabled) {
        return;
      }

      margin = this.settings.style === 'inline' ? `0 ${this.settings.groupMargin}px ${this.settings.groupMargin}px 0` : `0 0 ${this.settings.groupMargin}px 0`;
      required = this.settings.required;
      settings = primaryBuilder$1({
        type: 'group',
        fields: this.settings.fields,
        required,
        margin,
        value
      }, this.settings._groupSettings, this.settings.groupSettings[this.settings.style]);

      if (this.settings.singleMode) {
        firstField = this.settings.fields[0].name;

        settings.getter = function (fields) {
          return fields[firstField];
        };

        settings.setter = function (value) {
          return {
            [`${firstField}`]: value
          };
        };
      }

      group = this.builder(settings);
      group.el.child.actions.append(this.settings.groupSettings[this.settings.style]);

      if (this.settings.cloneable) {
        group.addAction('clone', this.templates.cloneIcon, this.cloneItem.bind(this, group), this.settings.style === 'block');
      }

      if (this.settings.removeable) {
        group.addAction('remove', this.templates.removeIcon, this.removeItem.bind(this, group), this.settings.style === 'block');
      }

      group.on('focus', this._calcFocusState);
      group.on('blur', this._calcBlurState);
      group.on('submit', this._emitSubmit);
      simplybind('event:input').of(group).to(() => {
        return this.emit('input', this._value, group);
      });
      simplybind('disabled').of(this.state).to('disabled').of(group.state);
      refreshChildren = group.el.childf;

      if (this.settings.dynamicLabel) {
        group.on('input', () => {
          return this._recalcLabel(group);
        });
      }

      if (this.settings.autoRemoveEmpty) {
        group.once('blur', () => {
          if (!group.state.interacted) {
            return this.removeItem(group);
          }
        });
      }

      if (!this.settings.autoWidth) {
        group.state.width = this.settings.groupWidth;
        group.el.child.innerwrap.once('inserted', function () {
          return this.style('width', `calc(100% - ${this.parent.child.actions.width || 17}px)`);
        });
      }

      if (!skipInsert) {
        group.insertBefore(this.el.child.addButton);

        if (!skipEmit) {
          this.emit('itemAdd', group);
        }

        this._value.push(group);
      }

      return group;
    }

    cloneItem(group) {
      var clone;

      if (this.settings.maxItems && this._value.length === this.settings.maxItems || this.state.disabled) {
        return;
      }

      if (!includes$2(this._value, group)) {
        return;
      }

      clone = this.addItem(group.value, true);
      clone.insertAfter(group.el);
      insertAfter$1(this._value, group, clone);
      this.emit('itemAdd', clone);
      this.emit('itemClone', clone);
      this.reOrganize();
      return clone;
    }

    removeItem(group) {
      var ref, removed, targetIndex;

      if (this.settings.minItems && this._value.length === this.settings.minItems || this.state.disabled) {
        return;
      }

      targetIndex = Math.max(1, this._value.indexOf(group));

      if (removed = removeItem$1(this._value, group)) {
        group.destroy();
        this.emit('itemRemove', group);

        if ((ref = this._value[targetIndex - 1]) != null) {
          ref.focus();
        }
      }

      this.reOrganize();
      return !!removed;
    }

    reOrganize() {
      var children;
      children = [].slice.call(this.el.child.innerwrap.raw.childNodes, 0, -1);
      return this._value = children.map(function (entry) {
        return entry._quickField;
      });
    }

  }

  RepeaterField.prototype.template = template$9;
  RepeaterField.prototype.templates = templates$8;
  RepeaterField.prototype.defaults = defaults$9;
  RepeaterField.prototype.shallowSettings = ['fields'];
  return RepeaterField;
}.call(undefined);

var RepeaterField$1 = RepeaterField;var defaults$a = {
  alwaysValid: false,
  labelClicks: false,
  size: 15,
  fontSize: 13,
  display: 'block',
  colors: {
    text: COLORS$1.grey,
    symbol: COLORS$1.orange,
    background: 'white'
  }
};var template$a = quickdom.template(['div', {
  ref: 'field',
  style: {
    position: 'relative',
    display: 'none',
    width: function (field) {
      return field.state.width;
    },
    boxSizing: 'border-box',
    fontFamily: function (field) {
      return field.settings.fontFamily;
    },
    textAlign: 'left',
    $visible: {
      display: 'inline-block'
    },
    $showError: {
      animation: '0.2s fieldErrorShake'
    }
  }
}, ['div', {
  ref: 'innerwrap',
  style: {
    position: 'relative',
    boxSizing: 'border-box',
    fontFamily: 'inherit',
    display: 'flex',
    flexWrap: 'nowrap',
    alignContent: 'flex-start',
    alignItems: 'flex-start'
  }
}, ['div', {
  ref: 'input',
  style: {
    position: 'relative',
    alignSelf: 'start',
    zIndex: 2,
    flexGrow: 0,
    flexShrink: 0,
    width: function (field) {
      return field.settings.size;
    },
    height: function (field) {
      return field.settings.size;
    },
    margin: '0 auto',
    backgroundColor: function (field) {
      return field.settings.colors.background;
    },
    border: `1px solid ${COLORS$1.grey_light}`,
    borderRadius: 3,
    cursor: 'pointer',
    $showError: {
      borderColor: COLORS$1.red
    }
  }
}, [// $toggled:
// 	borderColor: (field)-> field.settings.colors.symbol
'div', {
  ref: 'checkmark',
  style: {
    position: 'absolute',
    zIndex: 2,
    left: 0,
    right: 0,
    top: '50%',
    transform: 'translateY(-50%)',
    width: function (field) {
      return field.settings.size / 1.5;
    },
    height: function (field) {
      return field.settings.size / 1.5;
    },
    margin: '0 auto',
    boxSizing: 'border-box',
    lineHeight: 0,
    userSelect: 'none',
    display: 'none',
    $toggled: {
      display: 'block'
    }
  }
}, checkmark.extend({
  style: {
    width: '100%',
    height: '100%',
    stroke: function (field) {
      return field.settings.colors.symbol;
    },
    outline: 'none'
  }
})]], ['div', {
  ref: 'label',
  style: {
    display: 'none',
    marginLeft: 5,
    fontFamily: 'inherit',
    fontSize: function (field) {
      return field.settings.fontSize;
    },
    color: COLORS$1.black,
    cursor: 'default',
    userSelect: 'none',
    $showLabel: {
      display: 'block'
    }
  }
}]], [// $showError:
// 	color: COLORS.red
'div', {
  ref: 'help',
  style: {
    marginTop: '10px',
    fontFamily: 'inherit',
    fontSize: '11px',
    color: COLORS$1.grey,
    display: 'none',
    $showError: {
      color: COLORS$1.red,
      display: 'block'
    },
    $showHelp: {
      display: 'block'
    }
  }
}]]);
var templates$9 =
/*#__PURE__*/
Object.freeze({
  __proto__: null,
  'default': template$a
});var CheckboxField;

CheckboxField = function () {
  class CheckboxField extends Field$1 {
    constructor() {
      super(...arguments);
      this._value = !!this._value;
      this.settings.size = parseFloat(this.settings.size) || defaults$a.size;

      if (this.settings.display !== 'block' && this.settings.display !== 'inline') {
        this.settings.display = defaults$a.display;
      }

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      return this._value;
    }

    _setValue(newValue) {
      return this._value = !!newValue;
    }

    _createElements() {
      var forceOpts;
      forceOpts = {
        relatedInstance: this
      };
      this.el = this.template.spawn(this.settings.templates.default, forceOpts);
      this.el.child.innerwrap.raw._quickField = this;
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_stateTriggers();

      this._attachBindings_display();

      this._attachBindings_value();

      setTimeout(() => {
        return simplybind('label').of(this.state).to('html').of(this.el.child.label);
      });
    }

    _attachBindings_value() {
      simplybind('_value').of(this).to(value => {
        return this.el.state('toggled', value);
      });
      simplybind('_value', {
        updateOnBind: false
      }).of(this).to(value => {
        return this.emit('input', value);
      });
      simplybind("event:click").of(this.el.child.input).to(() => {
        return this.value = !this._value;
      });

      if (this.settings.labelClicks) {
        simplybind("event:click").of(this.el.child.label).to(() => {
          return this.value = !this._value;
        });
      }
    }

    _validate(providedValue) {
      if (this.settings.validWhenTrue) {
        if (!providedValue) {
          return false;
        }
      }

      return true;
    }

  }

  CheckboxField.prototype.template = template$a;
  CheckboxField.prototype.templates = templates$9;
  CheckboxField.prototype.defaults = defaults$a;
  return CheckboxField;
}.call(undefined);

inheritProto(CheckboxField, ChoiceField$1, ['_attachBindings_elState', '_attachBindings_stateTriggers', '_attachBindings_display']);
var CheckboxField$1 = CheckboxField;var assert$1, emitEvent, expect$1;
chai$2.use(chaiDom);
chai$2.use(sources);
chai$2.use(chaiAlmost_1);
chai$2.use(asserttype);
chai$2.use(chaiEvents);
chai$2.config.truncateThreshold = 1e3;
mocha.setup('tdd');
mocha.slow(400);
mocha.timeout(12000);

if (!window.__karma__) {
  mocha.bail();
}

assert$1 = chai$2.assert;
expect$1 = chai$2.expect;
window.sandbox = null;
quickfield$1$1.register('textarea', TextareaField$1);
quickfield$1$1.register('number', NumberField$1);
quickfield$1$1.register('select', SelectField$1);
quickfield$1$1.register('choice', ChoiceField$1);
quickfield$1$1.register('truefalse', TrueFalseField$1);
quickfield$1$1.register('toggle', ToggleField$1);
quickfield$1$1.register('group', GroupField$1);
quickfield$1$1.register('repeater', RepeaterField$1);
quickfield$1$1.register('checkbox', CheckboxField$1); // quickfield.register('file', FileField)

window.quickfield = quickfield$1$1;

emitEvent = function (target, event, trigger) {
  var promise;
  promise = pEvent_1(target, event);
  trigger();
  return promise;
};

suite("QuickField", function () {
  teardown(function () {
    var lastChild;
    lastChild = sandbox.children[sandbox.children.length - 1];

    if ((lastChild != null ? lastChild.ref : void 0) === 'testTitle') {
      return lastChild.remove();
    }
  });
  suiteSetup(function () {
    return restartSandbox$1();
  });
  suite("creation", function () {
    teardown(restartSandbox$1);
    test("text field", function () {
      var field;
      field = quickfield$1$1({
        type: 'text'
      }).appendTo(sandbox);
      assert$1.equal(field.el.parent, sandbox);
      return assert$1.equal(field.el.child.input.attr('type'), 'text');
    });
    test("textarea field", function () {
      var field;
      field = quickfield$1$1({
        type: 'textarea'
      }).appendTo(sandbox);
      return assert$1.equal(field.el.parent, sandbox);
    });
    test("number field", function () {
      var field;
      field = quickfield$1$1({
        type: 'number'
      }).appendTo(sandbox);
      return assert$1.equal(field.el.parent, sandbox);
    });
    test("select field", function () {
      var field;
      field = quickfield$1$1({
        type: 'select'
      }).appendTo(sandbox);
      return assert$1.equal(field.el.parent, sandbox);
    });
    test("choice field", function () {
      var field;
      field = quickfield$1$1({
        type: 'choice',
        choices: ['a', 'b']
      }).appendTo(sandbox);
      return assert$1.equal(field.el.parent, sandbox);
    });
    test("truefalse field", function () {
      var field;
      field = quickfield$1$1({
        type: 'truefalse'
      }).appendTo(sandbox);
      return assert$1.equal(field.el.parent, sandbox);
    });
    test("toggle field", function () {
      var field;
      field = quickfield$1$1({
        type: 'toggle'
      }).appendTo(sandbox);
      return assert$1.equal(field.el.parent, sandbox);
    });
    return suite("misc", function () {
      return test("with multiple options object", function () {
        var config, field1, field2;
        config = {
          type: 'text',
          label: 'abc',
          value: '123'
        };
        field1 = quickfield$1$1(config);
        field2 = quickfield$1$1(config, {
          label: 'def'
        }, {
          height: 50,
          value: '456'
        });
        expect$1(config).to.eql({
          type: 'text',
          label: 'abc',
          value: '123'
        });
        expect$1(field1.settings.label).to.equal('abc');
        expect$1(field2.settings.label).to.equal('def');
        expect$1(field1.settings.height).to.equal(46);
        expect$1(field2.settings.height).to.equal(50);
        expect$1(field1.value).to.equal('123');
        return expect$1(field2.value).to.equal('456');
      });
    });
  });
  suite("text field", function () {
    suiteSetup(function () {
      addTitle("text field");
      return this.control = quickfield$1$1({
        type: 'text',
        label: 'Regular'
      }).appendTo(sandbox);
    });
    teardown(function () {
      return this.control.value = '';
    });
    test("getter/setter", function () {
      var fieldA, fieldB, fieldC, getter, setter;

      getter = function (value) {
        return `example.com/${value}`;
      };

      setter = function (value) {
        return value.toLowerCase();
      };

      fieldA = quickfield$1$1({
        type: 'text',
        label: 'path',
        getter
      });
      fieldB = quickfield$1$1({
        type: 'text',
        label: 'path',
        setter
      });
      fieldC = quickfield$1$1({
        type: 'text',
        label: 'path',
        getter,
        setter
      });
      expect$1(fieldA.value).to.equal('example.com/');
      expect$1(fieldA.el.child.input.raw.value).to.equal('');
      expect$1(fieldB.value).to.equal('');
      expect$1(fieldB.el.child.input.raw.value).to.equal('');
      expect$1(fieldC.value).to.equal('example.com/');
      expect$1(fieldC.el.child.input.raw.value).to.equal('');
      simulateKeys(fieldA.el.child.input.raw, 'AbC');
      simulateKeys(fieldB.el.child.input.raw, 'AbC');
      simulateKeys(fieldC.el.child.input.raw, 'AbC');
      expect$1(fieldA.value).to.equal('example.com/AbC');
      expect$1(fieldA.el.child.input.raw.value).to.equal('AbC');
      expect$1(fieldB.value).to.equal('abc');
      expect$1(fieldB.el.child.input.raw.value).to.equal('abc');
      expect$1(fieldC.value).to.equal('example.com/abc');
      expect$1(fieldC.el.child.input.raw.value).to.equal('abc');
      fieldA.value = 'DeF';
      fieldB.value = 'DeF';
      fieldC.value = 'DeF';
      expect$1(fieldA.value).to.equal('example.com/DeF');
      expect$1(fieldA.el.child.input.raw.value).to.equal('DeF');
      expect$1(fieldB.value).to.equal('def');
      expect$1(fieldB.el.child.input.raw.value).to.equal('def');
      expect$1(fieldC.value).to.equal('example.com/def');
      return expect$1(fieldC.el.child.input.raw.value).to.equal('def');
    });
    test("with help message", function () {
      var field;
      field = quickfield$1$1({
        type: 'text',
        label: 'With Help Message',
        help: 'help <b>message</b> here'
      }).appendTo(sandbox);
      expect$1(field.el.text).to.include('help message here');
      expect$1(field.els.help.html).to.equal('help <b>message</b> here');
      expect$1(this.control.els.help.html).to.equal('');
      expect$1(this.control.el.raw).to.have.style('marginBottom', '0px');
      expect$1(field.el.raw).to.have.style('marginBottom', '25px');
      field.state.help = '';
      expect$1(field.el.raw).to.have.style('marginBottom', '0px');
      expect$1(field.els.help.html).to.equal('');
      field.state.error = 'abc123';
      expect$1(field.el.raw).to.have.style('marginBottom', '0px');
      expect$1(field.els.help.html).to.equal('');
      field.state.showError = true;
      expect$1(field.el.raw).to.have.style('marginBottom', '25px');
      expect$1(field.els.help.html).to.equal('abc123');
      field.state.help = 'def456';
      expect$1(field.el.raw).to.have.style('marginBottom', '25px');
      expect$1(field.els.help.html).to.equal('def456');
      field.state.help = '';
      field.state.showError = false;
      expect$1(field.el.raw).to.have.style('marginBottom', '25px');
      return expect$1(field.els.help.html).to.equal('help <b>message</b> here');
    });
    test("without label", function () {
      var initialTop, withLabel, withoutLabel;
      withLabel = quickfield$1$1({
        type: 'text',
        label: 'With Label'
      }).appendTo(sandbox);
      withoutLabel = quickfield$1$1({
        type: 'text',
        placeholder: 'Without Label'
      }).appendTo(sandbox);
      quickdom.batch([withLabel.els.label, withLabel.els.innerwrap, withLabel.els.input, withoutLabel.els.label, withoutLabel.els.innerwrap, withoutLabel.els.input]).style('transition', null);
      assert$1.equal(withLabel.el.child.placeholder.html, 'With Label');
      assert$1.equal(withLabel.el.child.label.html, 'With Label');
      assert$1.equal(withLabel.el.child.label.style('opacity'), '0');
      assert$1.equal(withoutLabel.el.child.placeholder.html, 'Without Label');
      assert$1.notEqual(withoutLabel.el.child.label.html, 'Without Label');
      assert$1.equal(withoutLabel.el.child.label.style('opacity'), '0');
      initialTop = {
        withLabel: withLabel.el.child.input.rect.top,
        withoutLabel: withoutLabel.el.child.input.rect.top
      };
      withLabel.value = 'abc123';
      withoutLabel.value = 'abc123';
      assert$1.notEqual(withLabel.el.child.input.rect.top, initialTop.withLabel);
      assert$1.equal(withoutLabel.el.child.input.rect.top, initialTop.withoutLabel);
      assert$1.equal(withLabel.el.child.label.style('opacity'), '1');
      return assert$1.equal(withoutLabel.el.child.label.style('opacity'), '0');
    });
    test("with icon", function () {
      var iconField;
      return iconField = quickfield$1$1({
        type: 'text',
        label: 'With Icon',
        icon: 'B'
      }).appendTo(sandbox);
    });
    test("custom height/fontsize", function () {
      var fieldA, fieldB;
      fieldA = quickfield$1$1({
        type: 'text',
        label: 'Custom Height',
        height: 40,
        fontSize: 13,
        autoWidth: true
      }).appendTo(sandbox);
      fieldB = quickfield$1$1({
        type: 'text',
        label: 'Custom Height',
        height: 60,
        fontSize: 16,
        autoWidth: true
      }).appendTo(sandbox);
      assert$1.isAtLeast(this.control.el.height, this.control.settings.height);
      assert$1.isAtMost(this.control.el.height, this.control.settings.height + 5);
      assert$1.isAtLeast(fieldA.el.height, 40);
      assert$1.isAtMost(fieldA.el.height, 45);
      assert$1.isAtLeast(fieldB.el.height, 60);
      return assert$1.isAtMost(fieldB.el.height, 65);
    });
    test("custom border", function () {
      var custom;
      custom = quickfield$1$1({
        type: 'text',
        label: 'Custom Border',
        border: '0 0 2px 0'
      }).appendTo(sandbox);
      assert$1.deepEqual(getBorderSides(this.control.el.child.innerwrap), {
        top: '1px',
        left: '1px',
        right: '1px',
        bottom: '1px'
      });
      return assert$1.deepEqual(getBorderSides(custom.el.child.innerwrap), {
        top: '0px',
        left: '0px',
        right: '0px',
        bottom: '2px'
      });
    });
    test("default value", function () {
      var fieldA, fieldB, fieldC;
      fieldA = quickfield$1$1({
        type: 'text'
      });
      fieldB = quickfield$1$1({
        type: 'text',
        defaultValue: 'valueB'
      });
      fieldC = quickfield$1$1({
        type: 'text',
        value: 'valueC'
      });
      assert$1.equal(fieldA.value, '');
      assert$1.equal(fieldA.el.child.input.raw.value, '');
      assert$1.equal(fieldB.value, 'valueB');
      assert$1.equal(fieldB.el.child.input.raw.value, 'valueB');
      assert$1.equal(fieldC.value, 'valueC');
      return assert$1.equal(fieldC.el.child.input.raw.value, 'valueC');
    });
    test("disabled", function () {
      var fieldA, fieldB;
      fieldA = quickfield$1$1({
        type: 'text',
        label: 'Disabled',
        autoWidth: true,
        disabled: true
      }).appendTo(sandbox);
      fieldB = quickfield$1$1({
        type: 'text',
        label: 'Disabled w/ value',
        autoWidth: true,
        disabled: true,
        value: 'abc123'
      }).appendTo(sandbox);
      window.assert = assert$1;
      expect$1(this.control.value).to.equal('');
      expect$1(this.control.el.child.input.raw.value).to.equal('');
      expect$1(this.control.el.child.innerwrap.raw).to.have.style('backgroundColor', 'white');
      expect$1(fieldA.value).to.equal('');
      expect$1(fieldA.el.child.input.raw.value).to.equal('');
      expect$1(fieldA.el.child.innerwrap.raw).to.have.style('backgroundColor', COLORS.grey_light);
      expect$1(fieldB.value).to.equal('abc123');
      expect$1(fieldB.el.child.input.raw.value).to.equal('abc123');
      return expect$1(fieldB.el.child.innerwrap.raw).to.have.style('backgroundColor', COLORS.grey_light);
    }); // expect(@control.state.focused).to.equal false
    // @control.focus()
    // expect(@control.state.focused).to.equal true
    // expect(fieldA.state.focused).to.equal false
    // fieldA.focus()
    // Promise.delay(5).then ()->
    // 	expect(fieldA.state.focused).to.equal false

    test("conditions", function () {
      var master, slave;
      master = quickfield$1$1({
        type: 'text',
        label: 'Master Field',
        ID: 'masterField',
        mask: 'aaa-111',
        required: true,
        autoWidth: true
      }).appendTo(sandbox);
      return slave = quickfield$1$1({
        type: 'text',
        label: 'Slave Field',
        conditions: [{
          target: 'masterField'
        }],
        autoWidth: true
      }).appendTo(sandbox);
    });
    test("autowidth", function () {
      var field;
      return field = quickfield$1$1({
        type: 'text',
        label: 'Autowidth',
        autoWidth: true,
        checkmark: false
      }).appendTo(sandbox);
    });
    test("input event", function () {
      var count, field, input;
      count = 0;
      field = this.control;
      input = field.els.input.raw;
      field.on('input', function () {
        return count++;
      });
      return Promise.resolve().then(function () {
        return expect$1(count).to.equal(0);
      }).then(function () {
        return emitEvent(field, 'input', () => {
          return field.value = 'change';
        });
      }).then(function () {
        return expect$1(count).to.equal(1);
      }).then(function () {
        return emitEvent(field, 'input', () => {
          return field.value = 'change2';
        });
      }).then(function () {
        return expect$1(count).to.equal(2);
      }).then(function () {
        return emitEvent(field, 'input', () => {
          return simulateKeys(input, 'a');
        });
      }).then(function () {
        return expect$1(count).to.equal(3);
      }).then(function () {
        return emitEvent(field, 'input', () => {
          return simulateKeys(input, 'abc');
        });
      }).then(function () {
        return expect$1(count).to.equal(6);
      });
    });
    suite("options/autocomplete", function () {
      suiteSetup(function () {
        this.field = quickfield$1$1({
          type: 'text',
          label: 'My options field',
          choices: ['apple', 'banana', 'orange', 'banana republic', {
            label: 'orange split',
            value: 'split'
          }]
        }).appendTo(sandbox);
        this.choices = this.field.dropdown.choices;
        this.dropdownEl = this.field.dropdown.els.container.raw;
        return this.inputEl = this.field.el.child.input.raw;
      });
      teardown(function () {
        this.field.blur();
        return this.field.value = '';
      });
      test("triggering", function () {
        return Promise.bind(this).then(function () {
          var promise;
          expect$1(this.dropdownEl).not.to.be.displayed;
          promise = pEvent_1(this.field.el.child.input, 'focus');
          this.field.focus();
          return promise;
        }).then(function () {
          var promise;
          expect$1(this.dropdownEl).not.to.be.displayed;
          simulateKeys(this.inputEl, 'a');
          expect$1(this.dropdownEl).to.be.displayed;
          promise = pEvent_1(this.field.el.child.input, 'blur');
          this.field.blur();
          return promise;
        }).then(function () {
          expect$1(this.dropdownEl).not.to.be.displayed;
          this.field.focus();
          simulateAction(this.inputEl, 'down');
          return expect$1(this.dropdownEl).not.to.be.displayed;
        }).then(function () {
          simulateKeys(this.inputEl, 'a');
          return expect$1(this.dropdownEl).to.be.displayed;
        }).then(function () {
          var promise;
          promise = pEvent_1(this.field.el.child.input, 'blur');
          this.field.blur();
          return promise;
        }).then(function () {
          this.field.dropdown.isOpen = true;
          expect$1(this.dropdownEl).to.be.displayed;
          this.field.dropdown.isOpen = false;
          return expect$1(this.dropdownEl).not.to.be.displayed;
        });
      });
      test("highlighting", function () {
        this.field.focus();
        simulateKeys(this.inputEl, 'a');
        expect$1(this.field.dropdown.currentHighlighted).to.equal(null);
        simulateAction(this.inputEl, 'down');
        expect$1(this.field.dropdown.currentHighlighted).to.equal(this.choices[0]);
        simulateAction(this.inputEl, 'down');
        simulateAction(this.inputEl, 'down');
        expect$1(this.field.dropdown.currentHighlighted).to.equal(this.choices[2]);
        simulateAction(this.inputEl, 'down');
        simulateAction(this.inputEl, 'down');
        expect$1(this.field.dropdown.currentHighlighted).to.equal(this.choices[4]);
        simulateAction(this.inputEl, 'down');
        expect$1(this.field.dropdown.currentHighlighted).to.equal(this.choices[0]);
        simulateAction(this.inputEl, 'up');
        expect$1(this.field.dropdown.currentHighlighted).to.equal(this.choices[4]);
        simulateAction(this.inputEl, 'up');
        expect$1(this.field.dropdown.currentHighlighted).to.equal(this.choices[3]);
        this.field.blur();
        return expect$1(this.field.dropdown.currentHighlighted).to.equal(null);
      });
      test("filtering", function () {
        var getVisible;

        getVisible = () => {
          return this.choices.filter(function (choice) {
            return choice.visible;
          }).map(function (choice) {
            return choice.value;
          });
        };

        this.field.focus();
        expect$1(getVisible()).to.eql(['apple', 'banana', 'orange', 'banana republic', 'split']);
        simulateKeys(this.inputEl, 'ban');
        expect$1(getVisible()).to.eql(['banana', 'banana republic']);
        simulateKeys(this.inputEl, 'ana');
        expect$1(getVisible()).to.eql(['banana', 'banana republic']);
        simulateKeys(this.inputEl, ' ');
        expect$1(getVisible()).to.eql(['banana republic']);
        this.field.value = 'ora';
        return expect$1(getVisible()).to.eql(['orange', 'split']);
      });
      return test("selecting", function () {
        this.field.focus();
        expect$1(this.field.value).to.equal('');
        this.choices[1].el.emit('click');
        expect$1(this.field.value).to.equal('banana');
        expect$1(this.inputEl.value).to.equal('banana');
        this.field.focus();
        this.field.state.typing = true;
        this.field.value = 'ora';
        simulateAction(this.inputEl, 'down');
        simulateAction(this.inputEl, 'down');
        expect$1(this.field.dropdown.currentHighlighted).to.equal(this.choices[4]);
        expect$1(this.field.value).to.equal('ora');
        expect$1(this.inputEl.value).to.equal('ora');
        simulateAction(this.inputEl, 'enter');
        expect$1(this.field.value).to.equal('split');
        expect$1(this.inputEl.value).to.equal('orange split');
        this.field.value = 'orange';
        expect$1(this.field.value).to.equal('orange');
        expect$1(this.inputEl.value).to.equal('orange');
        this.field.value = 'orange split';
        expect$1(this.field.value).to.equal('split');
        return expect$1(this.inputEl.value).to.equal('orange split');
      });
    });
    suite("keyboard/custom-type", function () {
      test("password", function () {
        var field;
        return field = quickfield$1$1({
          type: 'text',
          label: 'Password',
          keyboard: 'password'
        }).appendTo(sandbox);
      });
      test("email", function () {
        var field;
        field = quickfield$1$1({
          type: 'text',
          label: 'Email',
          ID: 'email',
          keyboard: 'email',
          required: true
        }).appendTo(sandbox);
        return field = quickfield$1$1({
          type: 'text',
          label: 'Email',
          keyboard: 'email',
          mask: {
            guide: false
          },
          required: true
        }).appendTo(sandbox);
      });
      return test("number (simluated)", function () {
        var field;
        return field = quickfield$1$1({
          type: 'text',
          label: 'Number (simluated)',
          keyboard: 'number',
          validWhenRegex: /[^0]/,
          autoWidth: true
        }).appendTo(sandbox);
      });
    });
    return suite("mask", function () {
      suiteSetup(function () {
        return addTitle('mask');
      });
      test("alpha", function () {
        var field;
        field = quickfield$1$1({
          type: 'text',
          label: 'Name',
          mask: 'NAME',
          width: '50%'
        }).appendTo(sandbox);
        return field = quickfield$1$1({
          type: 'text',
          label: 'Full Name',
          mask: 'FULLNAME',
          width: '50%'
        }).appendTo(sandbox);
      });
      test("numeric", function () {
        var field;
        field = quickfield$1$1({
          type: 'text',
          label: 'Phone',
          distance: 10,
          width: '50%',
          mobileWidth: '100%',
          mask: '(111) 111-1111'
        }).appendTo(sandbox);
        return field = quickfield$1$1({
          type: 'text',
          label: 'Phone',
          distance: 10,
          width: '50%',
          mobileWidth: '100%',
          keyboard: 'phone'
        }).appendTo(sandbox);
      });
      test("alphanumeric", function () {
        var field;
        return field = quickfield$1$1({
          type: 'text',
          label: 'Licence Plate',
          mask: {
            pattern: 'aaa-111',
            transform: function (v) {
              return v.toUpperCase();
            }
          }
        }).appendTo(sandbox);
      });
      test("prefix", function () {
        var field;
        return field = quickfield$1$1({
          type: 'text',
          label: 'Dollar',
          mask: {
            pattern: 'NUMBER',
            prefix: '$',
            decimal: true,
            sep: true
          }
        }).appendTo(sandbox);
      });
      test("date", function () {
        var field;
        field = quickfield$1$1({
          type: 'text',
          label: 'Date',
          keyboard: 'date',
          autoWidth: true
        }).appendTo(sandbox);
        return field = quickfield$1$1({
          type: 'text',
          label: 'Date',
          mask: {
            pattern: ['DATE', 'mm / yy']
          },
          autoWidth: true
        }).appendTo(sandbox);
      });
      test("literal", function () {
        var field;
        return field = quickfield$1$1({
          type: 'text',
          label: 'Literal',
          mask: 'My N\\ame is a+ K\\alen'
        }).appendTo(sandbox);
      });
      test("optionals", function () {
        var field;
        return field = quickfield$1$1({
          type: 'text',
          label: 'Optionals',
          mask: 'aaa[AAA]111'
        }).appendTo(sandbox);
      });
      return test("custom patterns", function () {
        var field;
        return field = quickfield$1$1({
          type: 'text',
          label: 'Only specific chars',
          mask: {
            pattern: '&&+-aa-111-[ aa+]',
            customPatterns: {
              '&': /[ab12]/,
              'a': /[0-4]/
            }
          }
        }).appendTo(sandbox);
      });
    });
  });
  suite("number field", function () {
    suiteSetup(function () {
      return addTitle('number field');
    });
    test("basic", function () {
      var field;
      return field = quickfield$1$1({
        type: 'number',
        label: 'Number',
        autoWidth: false
      }).appendTo(sandbox);
    });
    test.skip("getter/setter", function () {
      var fieldA, fieldB, fieldC, getter, setter;

      getter = function (value) {
        return (value || 0) * 10;
      };

      setter = function (value) {
        return (value || 0) * 2;
      };

      fieldA = quickfield$1$1({
        type: 'number',
        label: 'Number',
        autoWidth: true,
        getter
      });
      fieldB = quickfield$1$1({
        type: 'number',
        label: 'Number',
        autoWidth: true,
        setter
      });
      fieldC = quickfield$1$1({
        type: 'number',
        label: 'Number',
        autoWidth: true,
        getter,
        setter
      });
      expect$1(fieldA.value).to.equal(0);
      expect$1(fieldA.el.child.input.raw.value).to.equal('');
      expect$1(fieldB.value).to.equal(0);
      expect$1(fieldB.el.child.input.raw.value).to.equal('');
      expect$1(fieldC.value).to.equal(0);
      expect$1(fieldC.el.child.input.raw.value).to.equal('');
      simulateKeys(fieldA.el.child.input.raw, '3');
      simulateKeys(fieldB.el.child.input.raw, '3');
      simulateKeys(fieldC.el.child.input.raw, '3');
      expect$1(fieldA.value).to.equal(30);
      expect$1(fieldA.el.child.input.raw.value).to.equal('3');
      expect$1(fieldB.value).to.equal(6);
      expect$1(fieldB.el.child.input.raw.value).to.equal('6');
      expect$1(fieldC.value).to.equal(60);
      expect$1(fieldC.el.child.input.raw.value).to.equal('6');
      fieldA.value = 12;
      fieldB.value = 12;
      fieldC.value = 12;
      expect$1(fieldA.value).to.equal(120);
      expect$1(fieldA.el.child.input.raw.value).to.equal('12');
      expect$1(fieldB.value).to.equal(24);
      expect$1(fieldB.el.child.input.raw.value).to.equal('24');
      expect$1(fieldC.value).to.equal(240);
      return expect$1(fieldC.el.child.input.raw.value).to.equal('24');
    });
    test("min/max", function () {
      var field;
      return field = quickfield$1$1({
        type: 'number',
        label: 'Number (min/max)',
        minValue: 10,
        maxValue: 1000,
        autoWidth: true
      }).appendTo(sandbox);
    });
    test("min/max/step", function () {
      var field;
      return field = quickfield$1$1({
        type: 'number',
        label: 'Number (min/max/step)',
        minValue: 10,
        maxValue: 100,
        step: 3,
        autoWidth: true
      }).appendTo(sandbox);
    });
    test("min/max/step (enforced)", function () {
      var field;
      return field = quickfield$1$1({
        type: 'number',
        label: 'Number (enforced)',
        minValue: 10,
        maxValue: 100,
        step: 12,
        enforce: true,
        autoWidth: true
      }).appendTo(sandbox);
    });
    return test("decimal step", function () {
      var field;
      return field = quickfield$1$1({
        type: 'number',
        label: 'Number (decimal step)',
        minValue: 0.1,
        maxValue: 100,
        step: 0.1,
        autoWidth: true
      }).appendTo(sandbox);
    });
  });
  suite("textarea field", function () {
    suiteSetup(function () {
      return addTitle('textarea field');
    });
    test("basic", function () {
      var field;
      return field = quickfield$1$1({
        type: 'textarea',
        label: 'Textarea',
        width: '300px',
        height: '250px',
        autoHeight: false
      }).appendTo(sandbox);
    });
    test("getter/setter", function () {
      var fieldA, fieldB, fieldC, getter, setter;

      getter = function (value) {
        return `example.com/${value}`;
      };

      setter = function (value) {
        return value.toLowerCase();
      };

      fieldA = quickfield$1$1({
        type: 'textarea',
        label: 'path',
        getter
      });
      fieldB = quickfield$1$1({
        type: 'textarea',
        label: 'path',
        setter
      });
      fieldC = quickfield$1$1({
        type: 'textarea',
        label: 'path',
        getter,
        setter
      });
      expect$1(fieldA.value).to.equal('example.com/');
      expect$1(fieldA.el.child.input.raw.value).to.equal('');
      expect$1(fieldB.value).to.equal('');
      expect$1(fieldB.el.child.input.raw.value).to.equal('');
      expect$1(fieldC.value).to.equal('example.com/');
      expect$1(fieldC.el.child.input.raw.value).to.equal('');
      simulateKeys(fieldA.el.child.input.raw, 'AbC');
      simulateKeys(fieldB.el.child.input.raw, 'AbC');
      simulateKeys(fieldC.el.child.input.raw, 'AbC');
      expect$1(fieldA.value).to.equal('example.com/AbC');
      expect$1(fieldA.el.child.input.raw.value).to.equal('AbC');
      expect$1(fieldB.value).to.equal('abc');
      expect$1(fieldB.el.child.input.raw.value).to.equal('abc');
      expect$1(fieldC.value).to.equal('example.com/abc');
      expect$1(fieldC.el.child.input.raw.value).to.equal('abc');
      fieldA.value = 'DeF';
      fieldB.value = 'DeF';
      fieldC.value = 'DeF';
      expect$1(fieldA.value).to.equal('example.com/DeF');
      expect$1(fieldA.el.child.input.raw.value).to.equal('DeF');
      expect$1(fieldB.value).to.equal('def');
      expect$1(fieldB.el.child.input.raw.value).to.equal('def');
      expect$1(fieldC.value).to.equal('example.com/def');
      return expect$1(fieldC.el.child.input.raw.value).to.equal('def');
    });
    test("autoheight", function () {
      var field;
      return field = quickfield$1$1({
        type: 'textarea',
        label: 'Textarea (autoHeight)',
        width: '300px',
        maxHeight: 500
      }).appendTo(sandbox);
    });
    return test("autowidth", function () {
      var field;
      return field = quickfield$1$1({
        type: 'textarea',
        label: 'Textarea (autowidth)',
        autoWidth: true,
        maxWidth: 300
      }).appendTo(sandbox);
    });
  });
  suite("select field", function () {
    suiteSetup(function () {
      return addTitle('select field');
    });
    test("single selectable", function () {
      var field;
      return field = quickfield$1$1({
        type: 'select',
        label: 'My Choices (single)',
        choices: ['Apple', 'Apple Juice', 'Banana', 'Orange', {
          label: 'Lemon',
          value: 'lime',
          conditions: {
            'email': 'valid'
          }
        }]
      }).appendTo(sandbox);
    });
    test("multi selectable", function () {
      var field;
      field = quickfield$1$1({
        type: 'select',
        label: 'My Choices (multi)',
        choices: ['Apple', 'Banana', 'Orange', 'Lime', 'Kiwi'],
        multiple: true,
        defaultValue: 'Apple'
      }).appendTo(sandbox);
      return assert$1.equal(field.value, 'Apple');
    });
    test("default value", function () {
      var field;
      field = quickfield$1$1({
        type: 'select',
        label: 'My Choices (default)',
        choices: ['Apple', 'Banana', 'Orange', {
          label: 'Lemon',
          value: 'lime',
          conditions: {
            'email': 'valid'
          }
        }],
        value: 'Banana'
      }).appendTo(sandbox);
      assert$1.equal(field.value, 'Banana');
      field = quickfield$1$1({
        type: 'select',
        label: 'My Choices (default)',
        value: 'Banana'
      }).appendTo(sandbox);
      return assert$1.equal(field.value, 'Banana');
    });
    test("cusotm border", function () {
      var field;
      return field = quickfield$1$1({
        type: 'select',
        label: 'Custom Border',
        choices: ['Apple', 'Banana', 'Orange'],
        border: '0 0 2px 0',
        margin: '0 0 30px'
      }).appendTo(sandbox);
    });
    test("no choices", function () {
      var field;
      return field = quickfield$1$1({
        type: 'select',
        label: 'No choices',
        autoWidth: true
      }).appendTo(sandbox);
    });
    return test("many choices", function () {
      var field;
      return field = quickfield$1$1({
        type: 'select',
        label: 'Many Choices',
        choices: companyNames,
        autoWidth: true
      }).appendTo(sandbox);
    });
  });
  suite("choice field", function () {
    suiteSetup(function () {
      addTitle('choice field');
      this.control = quickfield$1$1({
        type: 'choice',
        choices: ['Apple', 'Banana', 'Orange'],
        required: true
      });
      return this.controlMulti = quickfield$1$1({
        type: 'choice',
        choices: ['Apple', 'Banana', 'Orange'],
        required: true,
        multiple: true
      });
    });
    test("single selectable", function () {
      var field;
      return field = quickfield$1$1({
        type: 'choice',
        label: 'My Choices (single)',
        choices: ['Apple', 'Banana', 'Orange']
      }).appendTo(sandbox);
    });
    test("multi selectable", function () {
      var field;
      return field = quickfield$1$1({
        type: 'choice',
        label: 'My Choices (multi)',
        choices: ['Apple', 'Banana', 'Orange', 'Lime', 'Kiwi'],
        perGroup: 3,
        multiple: true
      }).appendTo(sandbox);
    });
    test("default value", function () {
      var field;
      field = quickfield$1$1({
        type: 'choice',
        label: 'My Choices (single)',
        choices: ['Apple', 'Banana', 'Orange'],
        value: 'Orange'
      }).appendTo(sandbox);
      assert$1.equal(field.value, 'Orange');
      assert$1.equal(field.findChoice('Orange').selected, true);
      field = quickfield$1$1({
        type: 'choice',
        label: 'My Choices (multi)',
        choices: ['Apple', 'Banana', 'Orange', 'Lime', 'Kiwi'],
        multiple: true,
        value: ['Banana', 'Lime']
      }).appendTo(sandbox);
      assert$1.deepEqual(field.value, ['Banana', 'Lime']);
      assert$1.equal(field.findChoice('Banana').selected, true);
      return assert$1.equal(field.findChoice('Lime').selected, true);
    });
    test("conditions", function () {
      var field, master;
      master = quickfield$1$1({
        type: 'text',
        ID: 'master',
        required: true
      }).appendTo(sandbox);
      return field = quickfield$1$1({
        type: 'choice',
        label: 'My Choices (single)',
        choices: ['Apple', {
          label: 'Banana',
          value: 'banana',
          conditions: {
            'master': /^bana/
          }
        }, 'Orange', {
          label: 'Lemon',
          value: 'lime',
          conditions: {
            'master': 'valid'
          }
        }]
      }).appendTo(sandbox);
    });
    test("getter/setter", function () {
      var fieldA, fieldB, fieldC, getter, ref, ref1, ref2, ref3, ref4, ref5, setter;

      getter = function (value) {
        return (value != null ? value.toUpperCase() : void 0) || value;
      };

      setter = function (value) {
        if ((value != null ? value.value : void 0) === 'Banana') {
          return 'Apple';
        } else {
          return value;
        }
      };

      fieldA = quickfield$1$1({
        type: 'choice',
        choices: ['Apple', 'Banana', 'Orange'],
        getter
      }).appendTo(sandbox);
      fieldB = quickfield$1$1({
        type: 'choice',
        choices: ['Apple', 'Banana', 'Orange'],
        setter
      }).appendTo(sandbox);
      fieldC = quickfield$1$1({
        type: 'choice',
        choices: ['Apple', 'Banana', 'Orange'],
        getter,
        setter
      }).appendTo(sandbox);
      expect$1(fieldA.value).to.equal(void 0);
      expect$1(fieldA.valueRaw).to.equal(null);
      expect$1(fieldB.value).to.equal(void 0);
      expect$1(fieldB.valueRaw).to.equal(null);
      expect$1(fieldC.value).to.equal(void 0);
      expect$1(fieldC.valueRaw).to.equal(null);
      fieldA.choices[1].el.emit('click');
      fieldB.choices[1].el.emit('click');
      fieldC.choices[1].el.emit('click');
      expect$1(fieldA.value).to.equal('BANANA');
      expect$1((ref = fieldA.valueRaw) != null ? ref.value : void 0).to.equal('Banana');
      expect$1(fieldB.value).to.equal('Apple');
      expect$1((ref1 = fieldB.valueRaw) != null ? ref1.value : void 0).to.equal('Apple');
      expect$1(fieldC.value).to.equal('APPLE');
      expect$1((ref2 = fieldC.valueRaw) != null ? ref2.value : void 0).to.equal('Apple');
      fieldA.value = 'Orange';
      fieldB.value = 'Orange';
      fieldC.value = 'Orange';
      expect$1(fieldA.value).to.equal('ORANGE');
      expect$1((ref3 = fieldA.valueRaw) != null ? ref3.value : void 0).to.equal('Orange');
      expect$1(fieldB.value).to.equal('Orange');
      expect$1((ref4 = fieldB.valueRaw) != null ? ref4.value : void 0).to.equal('Orange');
      expect$1(fieldC.value).to.equal('ORANGE');
      return expect$1((ref5 = fieldC.valueRaw) != null ? ref5.value : void 0).to.equal('Orange');
    });
    return test("valid when selected", function () {
      var multiple, single;
      single = quickfield$1$1({
        type: 'choice',
        choices: ['Apple', 'Banana', 'Orange'],
        required: true,
        validWhenSelected: true
      });
      multiple = quickfield$1$1({
        type: 'choice',
        choices: ['Apple', 'Banana', 'Orange'],
        required: true,
        validWhenSelected: 2,
        multiple: true
      });
      expect$1(single.validate()).to.equal(false);
      expect$1(multiple.validate()).to.equal(false);
      expect$1(this.control.validate()).to.equal(false);
      expect$1(this.controlMulti.validate()).to.equal(false);
      single.value = multiple.value = this.control.value = this.controlMulti.value = 'Banana';
      expect$1(single.validate()).to.equal(true);
      expect$1(multiple.validate()).to.equal(false);
      expect$1(this.control.validate()).to.equal(true);
      expect$1(this.controlMulti.validate()).to.equal(true);
      multiple.value = ['Apple', 'Banana'];
      return expect$1(multiple.validate()).to.equal(true);
    });
  });
  suite("truefalse field", function () {
    suiteSetup(function () {
      return addTitle('truefalse field');
    });
    test("basic", function () {
      var field;
      field = quickfield$1$1({
        type: 'truefalse',
        label: 'Is it true or false?',
        width: 'auto'
      }).appendTo(sandbox).el.style('marginRight', 20);
      return assert$1.equal(field.value, null);
    });
    return test("default value", function () {
      var field;
      field = quickfield$1$1({
        type: 'truefalse',
        label: 'It\'s false by default',
        width: 'auto',
        choiceLabels: ['Yes', 'No'],
        value: false
      }).appendTo(sandbox);
      field.el.style('marginRight', 20);
      assert$1.equal(field.value, false);
      field = quickfield$1$1({
        type: 'truefalse',
        label: 'It\'s true by default',
        width: 'auto',
        choiceLabels: ['Yes', 'No'],
        value: true
      }).appendTo(sandbox);
      field.el.style('marginRight', 20);
      return assert$1.equal(field.value, true);
    });
  });
  suite("toggle field", function () {
    suiteSetup(function () {
      return addTitle('toggle field');
    });
    test("basic", function () {
      var field;
      return field = quickfield$1$1({
        type: 'toggle',
        label: 'The toggle field',
        width: 'auto'
      }).appendTo(sandbox).el.style('marginRight', 20);
    });
    test("default value", function () {
      var field;
      return field = quickfield$1$1({
        type: 'toggle',
        label: 'Toggled by default',
        width: '130px',
        defaultValue: 1
      }).appendTo(sandbox).el.style('marginRight', 20);
    });
    test("custom size", function () {
      var field;
      return field = quickfield$1$1({
        type: 'toggle',
        label: 'Custom size toggle',
        width: 'auto',
        size: 40
      }).appendTo(sandbox).el.style('marginRight', 20);
    });
    test("aligned style", function () {
      var field;
      return field = quickfield$1$1({
        type: 'toggle',
        label: 'Aligned style',
        style: 'aligned',
        width: 'auto'
      }).appendTo(sandbox);
    });
    return test("aligned style + defined width", function () {
      var field;
      field = quickfield$1$1({
        type: 'toggle',
        label: 'Aligned style with defined width',
        style: 'aligned',
        width: '400px'
      }).appendTo(sandbox);
      return field = quickfield$1$1({
        type: 'toggle',
        label: 'Aligned style with defined width',
        style: 'aligned',
        width: '200px'
      }).appendTo(sandbox);
    });
  });
  suite("checkbox field", function () {
    suiteSetup(function () {
      return addTitle('checkbox field');
    });
    test("basic", function () {
      var field;
      field = quickfield$1$1({
        type: 'checkbox',
        label: 'Is it true or false?',
        width: 'auto'
      }).appendTo(sandbox);
      field.el.style('marginRight', 20);
      return assert$1.equal(field.value, false);
    });
    test("default value", function () {
      var field;
      field = quickfield$1$1({
        type: 'checkbox',
        label: 'It\'s false by default',
        width: 'auto',
        value: false
      }).appendTo(sandbox);
      field.el.style('marginRight', 20);
      assert$1.equal(field.value, false);
      field = quickfield$1$1({
        type: 'checkbox',
        label: 'It\'s true by default',
        width: 'auto',
        choiceLabels: ['Yes', 'No'],
        value: true
      }).appendTo(sandbox);
      field.el.style('marginRight', 20);
      return assert$1.equal(field.value, true);
    });
    return test("multi-line display", function () {
      var field, label;
      label = 'Is it true or false? This is a fairly long text and can get even <b>longer</b> if we dont stop typing.';
      field = quickfield$1$1({
        type: 'checkbox',
        label,
        labelClicks: true,
        width: '150px'
      }).appendTo(sandbox);
      field.el.style('marginRight', 20);
      assert$1.equal(field.value, false);
      field.el.child.label.raw.click();
      return assert$1.equal(field.value, true);
    });
  });
  suite("group field", function () {
    setup(addDivider);
    suiteSetup(function () {
      addTitle('group field');
      this.fields = {
        first: {
          type: 'text',
          label: 'First',
          width: '49%'
        },
        second: {
          type: 'text',
          label: 'Second',
          width: '49%'
        },
        third: {
          type: 'select',
          label: 'Third',
          width: '74%',
          choices: ['Apple', 'Banana', 'Kiwi'],
          value: 'Kiwi'
        },
        fourth: {
          type: 'toggle',
          label: 'Fourth',
          style: 'aligned',
          width: '24%',
          conditions: {
            third: 'Kiwi'
          }
        }
      };
      return this.control = quickfield$1$1({
        type: 'group',
        label: 'Basic Group',
        width: '70%',
        fieldMargin: 10,
        fieldAlign: 'middle',
        fields: this.fields
      }).appendTo(sandbox);
    });
    test("basic", function () {
      expect$1(this.control.value).to.eql({
        first: '',
        second: '',
        third: 'Kiwi',
        fourth: false
      });
      expect$1(this.control.state.interacted).to.equal(false);
      this.control.value = {
        first: 'valueA',
        third: 'Kawa',
        fourth: true,
        fifth: '5'
      };
      expect$1(this.control.value).to.eql({
        first: 'valueA',
        second: '',
        third: 'Kawa',
        fourth: true
      });
      expect$1(this.control.state.interacted).to.equal(true);
      this.control.value = {
        second: 'valueB',
        third: 'Apple'
      };
      expect$1(this.control.value).to.eql({
        first: 'valueA',
        second: 'valueB',
        third: 'Apple',
        fourth: true
      });
      this.control.value = null;
      return expect$1(this.control.value).to.eql({
        first: 'valueA',
        second: 'valueB',
        third: 'Apple',
        fourth: true
      });
    });
    test("collapsed by default", function () {
      var field;
      field = quickfield$1$1({
        type: 'group',
        width: '70%',
        fieldMargin: 10,
        startCollapsed: true,
        fields: this.fields
      }).appendTo(sandbox);
      expect$1(this.control.els.innerwrap.raw).to.be.displayed;
      expect$1(field.els.innerwrap.raw).not.to.be.displayed;
      this.control.state.collapsed = true;
      field.state.collapsed = false;
      expect$1(this.control.els.innerwrap.raw).not.to.be.displayed;
      expect$1(field.els.innerwrap.raw).to.be.displayed;
      this.control.els.collapse.emit('click');
      field.els.collapse.emit('click');
      expect$1(this.control.els.innerwrap.raw).to.be.displayed;
      return expect$1(field.els.innerwrap.raw).not.to.be.displayed;
    });
    return test("default value", function () {
      var field;
      field = quickfield$1$1({
        type: 'group',
        width: '70%',
        fieldMargin: 10,
        fields: this.fields,
        value: {
          first: 'firstValue',
          third: 'Banana'
        }
      });
      return expect$1(field.value).to.eql({
        first: 'firstValue',
        second: '',
        third: 'Banana',
        fourth: false
      });
    });
  }); // test "inline mode", ()->
  // 	field = quickfield({type:'group', width:'70%', fieldMargin:10, @fields, value:{first:'firstValue', third:'Banana'}})
  // 	expect(field.value).to.eql {first:'firstValue', second:'', third:'Banana', fourth:false}

  suite("repeater field", function () {
    setup(addDivider);
    suiteSetup(function () {
      addDivider(40);
      this.fields = {
        first: {
          type: 'text',
          name: 'first',
          label: 'First',
          width: '49%'
        },
        second: {
          type: 'text',
          name: 'second',
          label: 'Second',
          width: '49%'
        }
      };
      return this.control = quickfield$1$1({
        type: 'repeater',
        label: 'Basic Repeater',
        width: '70%',
        fieldMargin: 10,
        numbering: true,
        cloneable: true,
        dragdrop: true,
        fields: this.fields
      }).appendTo(sandbox);
    });
    test("block", function () {
      expect$1(this.control.value).to.eql([]);
      expect$1(this.control.state.interacted).to.equal(false);
      this.control.els.addButton.emit('click');
      expect$1(this.control.value).to.eql([{
        first: '',
        second: ''
      }]);
      expect$1(this.control.state.interacted).to.equal(true);
      this.control.value = {
        first: 'abc',
        second: 'def'
      };
      expect$1(this.control.value).to.eql([{
        first: '',
        second: ''
      }, {
        first: 'abc',
        second: 'def'
      }]);
      expect$1(this.control._value[0].els.label.text).to.equal('Item 1');
      expect$1(this.control._value[1].els.label.text).to.equal('Item 2');

      this.control._value[0].els.remove.emit('click');

      expect$1(this.control.value).to.eql([{
        first: 'abc',
        second: 'def'
      }]);
      expect$1(this.control._value[0].els.label.text).to.equal('Item 1');
      this.control.value = [{
        first: 'ABC'
      }, {
        second: 'DEF'
      }];
      return expect$1(this.control.value).to.eql([{
        first: 'ABC',
        second: 'def'
      }, {
        first: '',
        second: 'DEF'
      }]);
    });
    test("inline", function () {
      var field;
      field = quickfield$1$1({
        type: 'repeater',
        label: 'Inline Repeater',
        width: '70%',
        fieldMargin: 10,
        numbering: true,
        autoRemoveEmpty: true,
        dragdrop: true,
        style: 'inline',
        value: [{
          first: 'abc',
          second: '123'
        }, {
          second: '456'
        }],
        fields: {
          first: primaryBuilder$1({
            autoWidth: true
          }, this.fields.first),
          second: primaryBuilder$1({
            autoWidth: true
          }, this.fields.second)
        }
      }).appendTo(sandbox);
      return expect$1(field.value).to.eql([{
        first: 'abc',
        second: '123'
      }, {
        first: '',
        second: '456'
      }]);
    });
    test("inline singleMode", function () {
      var field;
      field = quickfield$1$1({
        type: 'repeater',
        label: 'Inline Repeater',
        width: '70%',
        fieldMargin: 10,
        autoWidth: false,
        autoRemoveEmpty: true,
        numbering: true,
        style: 'inline',
        singleMode: true,
        dragdrop: true,
        groupSettings: {
          inline: {
            width: '100%'
          }
        },
        fields: primaryBuilder$1.clone(this.fields.first, {
          width: '100%'
        })
      }).appendTo(sandbox);
      expect$1(field.value).to.eql([]);
      field.value = ['abc', '123'];
      expect$1(field.value).to.eql(['abc', '123']);
      field.value = 'def';
      return expect$1(field.value).to.eql(['abc', '123', 'def']);
    });
    test("dynamicLabel", function () {
      var field;
      field = quickfield$1$1({
        type: 'repeater',
        label: 'Inline Repeater',
        width: '70%',
        dynamicLabel: 'first',
        fieldMargin: 10,
        autoRemoveEmpty: true,
        dragdrop: true,
        value: [{
          first: 'abc',
          second: '123'
        }, {
          second: '456'
        }],
        fields: {
          first: primaryBuilder$1({
            autoWidth: true
          }, this.fields.first),
          second: primaryBuilder$1({
            autoWidth: true
          }, this.fields.second)
        }
      }).appendTo(sandbox);
      expect$1(field._value[0].el.child.label.text).to.equal('abc');
      expect$1(field._value[1].el.child.label.text).to.equal('');
      field.value = [{
        first: 'def'
      }, {
        first: '123'
      }];
      expect$1(field._value[0].el.child.label.text).to.equal('def');
      return expect$1(field._value[1].el.child.label.text).to.equal('123');
    }); // expect(field.value).to.eql [
    // 	{first:'abc', second:'123'}
    // 	{first:'', second:'456'}

    return test("validate", function () {
      var field;
      field = quickfield$1$1({
        type: 'repeater',
        label: 'Inline Repeater',
        width: '70%',
        dynamicLabel: 'first',
        fieldMargin: 10,
        autoRemoveEmpty: true,
        dragdrop: true,
        required: true,
        // value: [{first:'abc', second:'123'}, {second:'456'}]
        fields: {
          first: primaryBuilder$1({
            autoWidth: true,
            required: true
          }, this.fields.first),
          second: primaryBuilder$1({
            autoWidth: true
          }, this.fields.second)
        }
      }).appendTo(sandbox);
      expect$1(field.validate()).to.equal(false);
      field.value = [{
        first: 'def'
      }, {
        second: '123'
      }];
      expect$1(field.validate()).to.equal(false);
      field.value = [{
        first: 'def'
      }, {
        first: '123'
      }];
      return expect$1(field.validate()).to.equal(true);
    });
  });
  return suite(".config()", function () {
    return test("creates a new copy of QuickField with setting overrides and template overrides", function () {
      var choice, quickfield2, textA, textB, textC, textD;
      quickfield2 = quickfield$1$1.config({
        global: {
          fontFamily: 'helvetica',
          width: '50%',
          required: true,
          border: '0 0 2px 0',
          margin: '0 10px 10px 0',
          fontSize: 13,
          inputPadding: 8
        },
        text: {
          height: 40,
          autoWidth: true,
          inputPadding: 0,
          checkmark: false,
          minLength: 2,
          mask: {
            placeholder: '*',
            decimal: true
          }
        }
      }, {
        global: {
          field: {
            options: {
              style: {
                verticalAlign: 'middle'
              }
            },
            children: {
              label: {
                options: {
                  style: {
                    $focus: {
                      color: COLORS.green
                    }
                  }
                }
              },
              innerwrap: {
                options: {
                  style: {
                    $focus: {
                      borderColor: COLORS.green
                    }
                  }
                }
              }
            }
          }
        },
        text: {
          default: {
            children: {
              label: {
                options: {
                  style: {
                    fontWeight: 700
                  }
                }
              }
            }
          }
        },
        choice: {
          choice: {
            options: {
              style: {
                $selected: {
                  color: COLORS.green
                }
              }
            }
          }
        }
      });
      expect$1(quickfield2).not.to.equal(quickfield$1$1);
      textA = quickfield$1$1({
        type: 'text',
        label: 'textA'
      }).appendTo(sandbox);
      textB = quickfield2({
        type: 'text',
        label: 'textB',
        autoWidth: false
      }).appendTo(sandbox);
      addDivider();
      textC = quickfield2({
        type: 'text',
        label: 'textC',
        mask: {
          pattern: 'NUMBER',
          suffix: '%'
        }
      }).appendTo(sandbox);
      textD = quickfield2({
        type: 'text',
        label: 'textD',
        mask: {
          pattern: 'DATE',
          suffix: '%'
        }
      }).appendTo(sandbox);
      choice = quickfield2({
        type: 'choice',
        choices: ['Apple', 'Banana', 'Orange']
      }).appendTo(sandbox);
      expect$1(textA.el.style('fontFamily')).to.equal(quickfield$1$1.Field.prototype.globalDefaults.fontFamily);
      expect$1(textB.el.style('fontFamily')).to.equal('helvetica');
      expect$1(textA.el.style('verticalAlign')).to.equal('top');
      expect$1(textB.el.style('verticalAlign')).to.equal('middle');
      expect$1(textA.el.styleParsed('marginBottom')).to.equal(0);
      expect$1(textB.el.styleParsed('marginBottom')).to.equal(10);
      expect$1(textA.el.styleSafe('width', true)).to.equal('100%');
      expect$1(textB.el.styleSafe('width', true)).to.equal('50%');
      expect$1(textA.el.child.label.styleParsed('fontWeight', true)).to.equal(600);
      expect$1(textB.el.child.label.styleParsed('fontWeight', true)).to.equal(700);
      expect$1(textA.el.height).to.equal(quickfield$1$1.Field.text.prototype.defaults.height);
      expect$1(textB.el.height).to.equal(40);
      expect$1(textA.el.child.checkmark).to.be.object();
      expect$1(textB.el.child.checkmark).not.to.be.object();
      expect$1(getBorderSides(textA.els.innerwrap)).to.eql({
        top: '1px',
        left: '1px',
        right: '1px',
        bottom: '1px'
      });
      expect$1(getBorderSides(textB.els.innerwrap)).to.eql({
        top: '0px',
        left: '0px',
        right: '0px',
        bottom: '2px'
      });
      expect$1(textA.validate()).to.equal(true);
      expect$1(textB.validate()).to.equal(false);
      simulateKeys(textA.el.child.input.raw, 'abc');
      simulateKeys(textB.el.child.input.raw, 'abc');
      expect$1(textA.validate()).to.equal(true);
      expect$1(textB.validate()).to.equal(true);
      simulateKeys(textD.el.child.input.raw, '1');
      expect$1(textD.value).to.equal('1*/**/****');
      quickdom.batch([textA.els.label, textB.els.label, textA.els.innerwrap, textB.els.innerwrap]).style('transition', null);
      textA.state.focused = textB.state.focused = true;
      expect$1(textA.el.child.label.raw).to.have.style('color', COLORS.orange);
      expect$1(textB.el.child.label.raw).to.have.style('color', COLORS.green);
      expect$1(textA.el.child.innerwrap.raw).to.have.style('borderColor', COLORS.orange);
      expect$1(textB.el.child.innerwrap.raw).to.have.style('borderColor', COLORS.green);
      textA.blur();
      textB.blur();
      choice.value = 'Banana';
      expect$1(choice.valueRaw.label).to.equal('Banana');
      return expect$1(choice.valueRaw.el.raw).to.have.style('color', COLORS.green);
    });
  });
});})));//# sourceMappingURL=data:application/json;charset=utf-8;base64,
