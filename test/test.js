(function(f){typeof define==='function'&&define.amd?define(f):f();}(function(){'use strict';var companyNames = ["Kiehn Inc", "Marks and Sons", "Waelchi Schiller and Denesik", "Olson Zemlak and Maggio", "Jacobs - Von", "Auer Lowe and Gutmann", "Feeney Rempel and Cassin", "Sawayn - Marks", "Johns and Sons", "Rodriguez Champlin and Dare", "Lowe - Ritchie", "Gleichner Goldner and Becker", "Jerde - Osinski", "Baumbach Group", "Schroeder Zulauf and Rempel", "O'Reilly Mills and Denesik", "Kohler - Veum", "O'Hara Inc", "Oberbrunner and Sons", "Emmerich Group", "Murray Zieme and Franecki", "Moen - Luettgen", "Gorczany Harvey and Gulgowski", "Reilly - Ruecker", "McDermott - Hyatt", "Spinka - Marks", "Hayes and Sons", "Kilback Kiehn and Monahan", "Davis and Sons", "Hudson - Yundt", "Goodwin - Zemlak", "Beer Kuhlman and Walker", "Jones Carroll and Anderson", "Rutherford Inc", "Predovic White and Collins", "Sporer Baumbach and Crist", "Grimes and Sons", "Kunde and Sons", "Tillman - Bode", "Cronin - Koepp", "Smitham Zieme and Daniel", "Kunze Welch and Russel", "Johns Labadie and Harber", "Lesch - Waters", "Brakus - Smitham", "Bins and Sons", "Nitzsche Inc", "Wunsch Inc", "Schowalter Franecki and Kuphal", "Reynolds - Swaniawski"];var isEditable = function (element) {
  if (element.ownerDocument.designMode && element.ownerDocument.designMode.toLowerCase() === 'on') {
    return true;
  }

  switch (element.tagName.toLowerCase()) {
    case 'input':
      return isEditableInput(element);
    case 'textarea':
      return true;
  }

  if (isContentEditable(element)) {
    return true;
  }

  return false;
};

function isContentEditable(element) {
  if (element.contentEditable && element.contentEditable.toLowerCase() === 'true') {
    return true;
  }
  if (element.contentEditable && element.contentEditable.toLowerCase() === 'inherit' && element.parentNode) {
    return isContentEditable(element.parentNode);
  }
  return false;
}

function isEditableInput(input) {
  switch (input.type) {
    case 'text':
      return true;
    case 'email':
      return true;
    case 'password':
      return true;
    case 'search':
      return true;
    case 'tel':
      return true;
    case 'url':
      return true;
    default:
      return false;
  }
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var CTRL = 1 << 0;
var META = 1 << 1;
var ALT = 1 << 2;
var SHIFT = 1 << 3;

// Key Events
var KeyEvents = {
  DOWN: 1 << 0,
  PRESS: 1 << 1,
  UP: 1 << 2,
  INPUT: 1 << 3
};
KeyEvents.ALL = KeyEvents.DOWN | KeyEvents.PRESS | KeyEvents.UP | KeyEvents.INPUT;

/**
 * Represents a keystroke, or a single key code with a set of active modifiers.
 *
 * @class Keystroke
 */
var Keystroke =
/**
 * @param {number} modifiers A bitmask formed by CTRL, META, ALT, and SHIFT.
 * @param {number} keyCode
 */
function Keystroke(modifiers, keyCode) {
  classCallCheck(this, Keystroke);

  this.modifiers = modifiers;
  this.ctrlKey = !!(modifiers & CTRL);
  this.metaKey = !!(modifiers & META);
  this.altKey = !!(modifiers & ALT);
  this.shiftKey = !!(modifiers & SHIFT);
  this.keyCode = keyCode;
};

/**
 * Simulates a keyboard with a particular key-to-character and key-to-action
 * mapping. Use `US_ENGLISH` to get a pre-configured keyboard.
 */
Keystroke.CTRL = CTRL;
Keystroke.META = META;
Keystroke.ALT = ALT;
Keystroke.SHIFT = SHIFT;
var Keyboard = function () {
  /**
   * @param {Object.<number, Keystroke>} charCodeKeyCodeMap
   * @param {Object.<string, number>} actionKeyCodeMap
   */
  function Keyboard(charCodeKeyCodeMap, actionKeyCodeMap) {
    classCallCheck(this, Keyboard);

    this._charCodeKeyCodeMap = charCodeKeyCodeMap;
    this._actionKeyCodeMap = actionKeyCodeMap;
  }

  /**
   * Determines the character code generated by pressing the given keystroke.
   *
   * @param {Keystroke} keystroke
   * @return {?number}
   */


  createClass(Keyboard, [{
    key: 'charCodeForKeystroke',
    value: function charCodeForKeystroke(keystroke) {
      var map = this._charCodeKeyCodeMap;
      for (var charCode in map) {
        if (Object.prototype.hasOwnProperty.call(map, charCode)) {
          var keystrokeForCharCode = map[charCode];
          if (keystroke.keyCode === keystrokeForCharCode.keyCode && keystroke.modifiers === keystrokeForCharCode.modifiers) {
            return parseInt(charCode, 10);
          }
        }
      }
      return null;
    }

    /**
     * Creates an event ready for dispatching onto the given target.
     *
     * @param {string} type One of "keydown", "keypress", "keyup", "textInput" or "input".
     * @param {Keystroke} keystroke
     * @param {HTMLElement} target
     * @return {Event}
     */

  }, {
    key: 'createEventFromKeystroke',
    value: function createEventFromKeystroke(type, keystroke, target) {
      var document = target.ownerDocument;
      var window = document.defaultView;
      var Event = window.Event;

      var event = void 0;

      try {
        event = new Event(type);
      } catch (e) {
        event = document.createEvent('UIEvents');
      }

      event.initEvent(type, true, true);

      switch (type) {
        case 'textInput':
          event.data = String.fromCharCode(this.charCodeForKeystroke(keystroke));
          break;

        case 'keydown':case 'keypress':case 'keyup':
          event.shiftKey = keystroke.shiftKey;
          event.altKey = keystroke.altKey;
          event.metaKey = keystroke.metaKey;
          event.ctrlKey = keystroke.ctrlKey;
          event.keyCode = type === 'keypress' ? this.charCodeForKeystroke(keystroke) : keystroke.keyCode;
          event.charCode = type === 'keypress' ? event.keyCode : 0;
          event.which = event.keyCode;
          break;
      }

      return event;
    }

    /**
     * Fires the correct sequence of events on the given target as if the given
     * action was undertaken by a human.
     *
     * @param {string} action e.g. "alt+shift+left" or "backspace"
     * @param {HTMLElement} target
     */

  }, {
    key: 'dispatchEventsForAction',
    value: function dispatchEventsForAction(action, target) {
      var keystroke = this.keystrokeForAction(action);
      this.dispatchEventsForKeystroke(keystroke, target);
    }

    /**
     * Fires the correct sequence of events on the given target as if the given
     * input had been typed by a human.
     *
     * @param {string} input
     * @param {HTMLElement} target
     */

  }, {
    key: 'dispatchEventsForInput',
    value: function dispatchEventsForInput(input, target) {
      var currentModifierState = 0;
      for (var i = 0, length = input.length; i < length; i++) {
        var keystroke = this.keystrokeForCharCode(input.charCodeAt(i));
        this.dispatchModifierStateTransition(target, currentModifierState, keystroke.modifiers);
        this.dispatchEventsForKeystroke(keystroke, target, false);
        currentModifierState = keystroke.modifiers;
      }
      this.dispatchModifierStateTransition(target, currentModifierState, 0);
    }

    /**
     * Fires the correct sequence of events on the given target as if the given
     * keystroke was performed by a human. When simulating, for example, typing
     * the letter "A" (assuming a U.S. English keyboard) then the sequence will
     * look like this:
     *
     *   keydown   keyCode=16 (SHIFT) charCode=0      shiftKey=true
     *   keydown   keyCode=65 (A)     charCode=0      shiftKey=true
     *   keypress  keyCode=65 (A)     charCode=65 (A) shiftKey=true
     *   textInput data=A
     *   input
     *   keyup     keyCode=65 (A)     charCode=0      shiftKey=true
     *   keyup     keyCode=16 (SHIFT) charCode=0      shiftKey=false
     *
     * If the keystroke would not cause a character to be input, such as when
     * pressing alt+shift+left, the sequence looks like this:
     *
     *   keydown   keyCode=16 (SHIFT) charCode=0 altKey=false shiftKey=true
     *   keydown   keyCode=18 (ALT)   charCode=0 altKey=true  shiftKey=true
     *   keydown   keyCode=37 (LEFT)  charCode=0 altKey=true  shiftKey=true
     *   keyup     keyCode=37 (LEFT)  charCode=0 altKey=true  shiftKey=true
     *   keyup     keyCode=18 (ALT)   charCode=0 altKey=false shiftKey=true
     *   keyup     keyCode=16 (SHIFT) charCode=0 altKey=false shiftKey=false
     *
     * To disable handling of modifier keys, call with `transitionModifers` set
     * to false. Doing so will omit the keydown and keyup events associated with
     * shift, ctrl, alt, and meta keys surrounding the actual keystroke.
     *
     * @param {Keystroke} keystroke
     * @param {HTMLElement} target
     * @param {boolean=} transitionModifiers
     * @param {number} events
     */

  }, {
    key: 'dispatchEventsForKeystroke',
    value: function dispatchEventsForKeystroke(keystroke, target) {
      var transitionModifiers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var events = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : KeyEvents.ALL;

      if (transitionModifiers) {
        this.dispatchModifierStateTransition(target, 0, keystroke.modifiers, events);
      }

      var keydownEvent = void 0;
      if (events & KeyEvents.DOWN) {
        keydownEvent = this.createEventFromKeystroke('keydown', keystroke, target);
      }

      if (keydownEvent && target.dispatchEvent(keydownEvent) && this.targetCanReceiveTextInput(target)) {
        var keypressEvent = void 0;
        if (events & KeyEvents.PRESS) {
          keypressEvent = this.createEventFromKeystroke('keypress', keystroke, target);
        }
        if (keypressEvent && keypressEvent.charCode && target.dispatchEvent(keypressEvent)) {
          if (events & KeyEvents.INPUT) {
            var textinputEvent = this.createEventFromKeystroke('textInput', keystroke, target);
            target.dispatchEvent(textinputEvent);

            var inputEvent = this.createEventFromKeystroke('input', keystroke, target);
            target.dispatchEvent(inputEvent);
          }
        }
      }

      if (events & KeyEvents.UP) {
        var keyupEvent = this.createEventFromKeystroke('keyup', keystroke, target);
        target.dispatchEvent(keyupEvent);
      }

      if (transitionModifiers) {
        this.dispatchModifierStateTransition(target, keystroke.modifiers, 0);
      }
    }

    /**
     * Transitions from one modifier state to another by dispatching key events.
     *
     * @param {EventTarget} target
     * @param {number} fromModifierState
     * @param {number} toModifierState
     * @param {number} events
     * @private
     */

  }, {
    key: 'dispatchModifierStateTransition',
    value: function dispatchModifierStateTransition(target, fromModifierState, toModifierState) {
      var events = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : KeyEvents.ALL;

      var currentModifierState = fromModifierState;
      var didHaveMeta = (fromModifierState & META) === META;
      var willHaveMeta = (toModifierState & META) === META;
      var didHaveCtrl = (fromModifierState & CTRL) === CTRL;
      var willHaveCtrl = (toModifierState & CTRL) === CTRL;
      var didHaveShift = (fromModifierState & SHIFT) === SHIFT;
      var willHaveShift = (toModifierState & SHIFT) === SHIFT;
      var didHaveAlt = (fromModifierState & ALT) === ALT;
      var willHaveAlt = (toModifierState & ALT) === ALT;

      var includeKeyUp = events & KeyEvents.UP;
      var includeKeyDown = events & KeyEvents.DOWN;

      if (includeKeyUp && didHaveMeta === true && willHaveMeta === false) {
        // Release the meta key.
        currentModifierState &= ~META;
        target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.META), target));
      }

      if (includeKeyUp && didHaveCtrl === true && willHaveCtrl === false) {
        // Release the ctrl key.
        currentModifierState &= ~CTRL;
        target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.CTRL), target));
      }

      if (includeKeyUp && didHaveShift === true && willHaveShift === false) {
        // Release the shift key.
        currentModifierState &= ~SHIFT;
        target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.SHIFT), target));
      }

      if (includeKeyUp && didHaveAlt === true && willHaveAlt === false) {
        // Release the alt key.
        currentModifierState &= ~ALT;
        target.dispatchEvent(this.createEventFromKeystroke('keyup', new Keystroke(currentModifierState, this._actionKeyCodeMap.ALT), target));
      }

      if (includeKeyDown && didHaveMeta === false && willHaveMeta === true) {
        // Press the meta key.
        currentModifierState |= META;
        target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.META), target));
      }

      if (includeKeyDown && didHaveCtrl === false && willHaveCtrl === true) {
        // Press the ctrl key.
        currentModifierState |= CTRL;
        target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.CTRL), target));
      }

      if (includeKeyDown && didHaveShift === false && willHaveShift === true) {
        // Press the shift key.
        currentModifierState |= SHIFT;
        target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.SHIFT), target));
      }

      if (includeKeyDown && didHaveAlt === false && willHaveAlt === true) {
        // Press the alt key.
        currentModifierState |= ALT;
        target.dispatchEvent(this.createEventFromKeystroke('keydown', new Keystroke(currentModifierState, this._actionKeyCodeMap.ALT), target));
      }

      if (currentModifierState !== toModifierState) {
        throw new Error('internal error, expected modifier state: ' + toModifierState + (', got: ' + currentModifierState));
      }
    }

    /**
     * Returns the keystroke associated with the given action.
     *
     * @param {string} action
     * @return {?Keystroke}
     */

  }, {
    key: 'keystrokeForAction',
    value: function keystrokeForAction(action) {
      var keyCode = null;
      var modifiers = 0;

      var parts = action.split('+');
      var lastPart = parts.pop();

      parts.forEach(function (part) {
        switch (part.toUpperCase()) {
          case 'CTRL':
            modifiers |= CTRL;break;
          case 'META':
            modifiers |= META;break;
          case 'ALT':
            modifiers |= ALT;break;
          case 'SHIFT':
            modifiers |= SHIFT;break;
          default:
            throw new Error('in "' + action + '", invalid modifier: ' + part);
        }
      });

      if (lastPart.toUpperCase() in this._actionKeyCodeMap) {
        keyCode = this._actionKeyCodeMap[lastPart.toUpperCase()];
      } else if (lastPart.length === 1) {
        var lastPartKeystroke = this.keystrokeForCharCode(lastPart.charCodeAt(0));
        modifiers |= lastPartKeystroke.modifiers;
        keyCode = lastPartKeystroke.keyCode;
      } else {
        throw new Error('in "' + action + '", invalid action: ' + lastPart);
      }

      return new Keystroke(modifiers, keyCode);
    }

    /**
     * Gets the keystroke used to generate the given character code.
     *
     * @param {number} charCode
     * @return {?Keystroke}
     */

  }, {
    key: 'keystrokeForCharCode',
    value: function keystrokeForCharCode(charCode) {
      return this._charCodeKeyCodeMap[charCode] || null;
    }

    /**
     * @param {EventTarget} target
     * @private
     */

  }, {
    key: 'targetCanReceiveTextInput',
    value: function targetCanReceiveTextInput(target) {
      if (!target) {
        return false;
      }

      return isEditable(target);
    }
  }]);
  return Keyboard;
}();

var US_ENGLISH_CHARCODE_KEYCODE_MAP = {
  32: new Keystroke(0, 32), // <space>
  33: new Keystroke(SHIFT, 49), // !
  34: new Keystroke(SHIFT, 222), // "
  35: new Keystroke(SHIFT, 51), // #
  36: new Keystroke(SHIFT, 52), // $
  37: new Keystroke(SHIFT, 53), // %
  38: new Keystroke(SHIFT, 55), // &
  39: new Keystroke(0, 222), // '
  40: new Keystroke(SHIFT, 57), // (
  41: new Keystroke(SHIFT, 48), // )
  42: new Keystroke(SHIFT, 56), // *
  43: new Keystroke(SHIFT, 187), // +
  44: new Keystroke(0, 188), // ,
  45: new Keystroke(0, 189), // -
  46: new Keystroke(0, 190), // .
  47: new Keystroke(0, 191), // /
  48: new Keystroke(0, 48), // 0
  49: new Keystroke(0, 49), // 1
  50: new Keystroke(0, 50), // 2
  51: new Keystroke(0, 51), // 3
  52: new Keystroke(0, 52), // 4
  53: new Keystroke(0, 53), // 5
  54: new Keystroke(0, 54), // 6
  55: new Keystroke(0, 55), // 7
  56: new Keystroke(0, 56), // 8
  57: new Keystroke(0, 57), // 9
  58: new Keystroke(SHIFT, 186), // :
  59: new Keystroke(0, 186), // ;
  60: new Keystroke(SHIFT, 188), // <
  61: new Keystroke(0, 187), // =
  62: new Keystroke(SHIFT, 190), // >
  63: new Keystroke(SHIFT, 191), // ?
  64: new Keystroke(SHIFT, 50), // @
  65: new Keystroke(SHIFT, 65), // A
  66: new Keystroke(SHIFT, 66), // B
  67: new Keystroke(SHIFT, 67), // C
  68: new Keystroke(SHIFT, 68), // D
  69: new Keystroke(SHIFT, 69), // E
  70: new Keystroke(SHIFT, 70), // F
  71: new Keystroke(SHIFT, 71), // G
  72: new Keystroke(SHIFT, 72), // H
  73: new Keystroke(SHIFT, 73), // I
  74: new Keystroke(SHIFT, 74), // J
  75: new Keystroke(SHIFT, 75), // K
  76: new Keystroke(SHIFT, 76), // L
  77: new Keystroke(SHIFT, 77), // M
  78: new Keystroke(SHIFT, 78), // N
  79: new Keystroke(SHIFT, 79), // O
  80: new Keystroke(SHIFT, 80), // P
  81: new Keystroke(SHIFT, 81), // Q
  82: new Keystroke(SHIFT, 82), // R
  83: new Keystroke(SHIFT, 83), // S
  84: new Keystroke(SHIFT, 84), // T
  85: new Keystroke(SHIFT, 85), // U
  86: new Keystroke(SHIFT, 86), // V
  87: new Keystroke(SHIFT, 87), // W
  88: new Keystroke(SHIFT, 88), // X
  89: new Keystroke(SHIFT, 89), // Y
  90: new Keystroke(SHIFT, 90), // Z
  91: new Keystroke(0, 219), // [
  92: new Keystroke(0, 220), // \
  93: new Keystroke(0, 221), // ]
  96: new Keystroke(0, 192), // `
  97: new Keystroke(0, 65), // a
  98: new Keystroke(0, 66), // b
  99: new Keystroke(0, 67), // c
  100: new Keystroke(0, 68), // d
  101: new Keystroke(0, 69), // e
  102: new Keystroke(0, 70), // f
  103: new Keystroke(0, 71), // g
  104: new Keystroke(0, 72), // h
  105: new Keystroke(0, 73), // i
  106: new Keystroke(0, 74), // j
  107: new Keystroke(0, 75), // k
  108: new Keystroke(0, 76), // l
  109: new Keystroke(0, 77), // m
  110: new Keystroke(0, 78), // n
  111: new Keystroke(0, 79), // o
  112: new Keystroke(0, 80), // p
  113: new Keystroke(0, 81), // q
  114: new Keystroke(0, 82), // r
  115: new Keystroke(0, 83), // s
  116: new Keystroke(0, 84), // t
  117: new Keystroke(0, 85), // u
  118: new Keystroke(0, 86), // v
  119: new Keystroke(0, 87), // w
  120: new Keystroke(0, 88), // x
  121: new Keystroke(0, 89), // y
  122: new Keystroke(0, 90), // z
  123: new Keystroke(SHIFT, 219), // {
  124: new Keystroke(SHIFT, 220), // |
  125: new Keystroke(SHIFT, 221), // }
  126: new Keystroke(SHIFT, 192) // ~
};

var US_ENGLISH_ACTION_KEYCODE_MAP = {
  BACKSPACE: 8,
  TAB: 9,
  ENTER: 13,
  SHIFT: 16,
  CTRL: 17,
  ALT: 18,
  PAUSE: 19,
  CAPSLOCK: 20,
  ESCAPE: 27,
  PAGEUP: 33,
  PAGEDOWN: 34,
  END: 35,
  HOME: 36,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
  INSERT: 45,
  DELETE: 46,
  META: 91,
  F1: 112,
  F2: 113,
  F3: 114,
  F4: 115,
  F5: 116,
  F6: 117,
  F7: 118,
  F8: 119,
  F9: 120,
  F10: 121,
  F11: 122,
  F12: 123
};

/**
 * Gets a keyboard instance configured as a U.S. English keyboard would be.
 *
 * @return {Keyboard}
 */
Keyboard.US_ENGLISH = new Keyboard(US_ENGLISH_CHARCODE_KEYCODE_MAP, US_ENGLISH_ACTION_KEYCODE_MAP);var keyboard;
keyboard = Keyboard.US_ENGLISH;
function simulateKeys (target, keys, value) {
  if (target.focus) {
    target.focus();
  }

  target.value += value != null ? value || '' : keys;
  return keyboard.dispatchEventsForInput(keys, target);
}var keyboard$1;
keyboard$1 = Keyboard.US_ENGLISH;
function simulateAction (target, keys) {
  return keyboard$1.dispatchEventsForAction(keys, target);
}function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

var REGEX_LEN_VAL = /^\d+(?:[a-z]|\%)+$/i;
var REGEX_DIGITS = /\d+$/;
var REGEX_SPACE = /\s/;
var REGEX_KEBAB = /([A-Z])+/g;
var IMPORTANT = 'important';
var POSSIBLE_PREFIXES = ['webkit', 'moz', 'ms', 'o'];
var REQUIRES_UNIT_VALUE = ['background-position-x', 'background-position-y', 'block-size', 'border-width', 'columnRule-width', 'cx', 'cy', 'font-size', 'grid-column-gap', 'grid-row-gap', 'height', 'inline-size', 'line-height', 'minBlock-size', 'min-height', 'min-inline-size', 'min-width', 'max-height', 'max-width', 'outline-offset', 'outline-width', 'perspective', 'shape-margin', 'stroke-dashoffset', 'stroke-width', 'text-indent', 'width', 'word-spacing', 'top', 'bottom', 'left', 'right', 'x', 'y'];
var QUAD_SHORTHANDS = ['margin', 'padding', 'border', 'border-radius'];
var DIRECTIONS = ['top', 'bottom', 'left', 'right'];
QUAD_SHORTHANDS.forEach(function (property) {
  var direction, i, len;
  REQUIRES_UNIT_VALUE.push(property);

  for (i = 0, len = DIRECTIONS.length; i < len; i++) {
    direction = DIRECTIONS[i];
    REQUIRES_UNIT_VALUE.push(property + '-' + direction);
  }
});
var SAMPLE_STYLE, styleConfig;
SAMPLE_STYLE = document.createElement('div').style;

var includes = function includes(target, item) {
  return target && target.indexOf(item) !== -1;
};

var isIterable = function isIterable(target) {
  return target && _typeof(target) === 'object' && typeof target.length === 'number' && !target.nodeType;
};

var toKebabCase = function toKebabCase(string) {
  return string.replace(REGEX_KEBAB, function (e, letter) {
    return "-".concat(letter.toLowerCase());
  });
};

var isPropSupported = function isPropSupported(property) {
  return typeof SAMPLE_STYLE[property] !== 'undefined';
};

var isValueSupported = function isValueSupported(property, value) {
  if (window.CSS && window.CSS.supports) {
    return window.CSS.supports(property, value);
  } else {
    SAMPLE_STYLE[property] = value;
    return SAMPLE_STYLE[property] === '' + value;
  }
};

var getPrefix = function getPrefix(property, skipInitialCheck) {
  var j, len1, prefix;

  if (skipInitialCheck || !isPropSupported(property)) {
    for (j = 0, len1 = POSSIBLE_PREFIXES.length; j < len1; j++) {
      prefix = POSSIBLE_PREFIXES[j];

      if (isPropSupported("-".concat(prefix, "-").concat(property))) {
        /* istanbul ignore next */
        return "-".concat(prefix, "-");
      }
    }
  }

  return '';
};

var normalizeProperty = function normalizeProperty(property) {
  property = toKebabCase(property);

  if (isPropSupported(property)) {
    return property;
  } else {
    return "".concat(getPrefix(property, true)).concat(property);
  }
};

var normalizeValue = function normalizeValue(property, value) {
  if (includes(REQUIRES_UNIT_VALUE, property) && value !== null) {
    value = '' + value;

    if (REGEX_DIGITS.test(value) && !REGEX_LEN_VAL.test(value) && !REGEX_SPACE.test(value)) {
      value += property === 'line-height' ? 'em' : 'px';
    }
  }

  return value;
};

var sort = function sort(array) {
  var great, i, len, less, pivot;

  if (array.length < 2) {
    return array;
  } else {
    pivot = array[0];
    less = [];
    great = [];
    len = array.length;
    i = 0;

    while (++i !== len) {
      if (array[i] <= pivot) {
        less.push(array[i]);
      } else {
        great.push(array[i]);
      }
    }

    return sort(less).concat(pivot, sort(great));
  }
};

var hash = function hash(string) {
  var hsh, i, length;
  hsh = 5381;
  i = -1;
  length = string.length;

  while (++i !== string.length) {
    hsh = (hsh << 5) - hsh + string.charCodeAt(i);
    hsh |= 0;
  }

  return '_' + (hsh < 0 ? hsh * -2 : hsh);
};

var ruleToString = function ruleToString(rule, important) {
  var j, len1, output, prop, property, props, value;
  output = '';
  props = sort(Object.keys(rule));

  for (j = 0, len1 = props.length; j < len1; j++) {
    prop = props[j];

    if (typeof rule[prop] === 'string' || typeof rule[prop] === 'number') {
      property = normalizeProperty(prop);
      value = normalizeValue(property, rule[prop]);

      if (important) {
        value += " !important";
      }

      output += "".concat(property, ":").concat(value, ";");
    }
  }

  return output;
};

var inlineStyleConfig = styleConfig = Object.create(null);

var inlineStyle = function inlineStyle(rule, valueToStore, level) {
  var config, styleEl;

  if (!(config = styleConfig[level])) {
    styleEl = document.createElement('style');
    styleEl.id = "quickcss".concat(level || '');
    document.head.appendChild(styleEl);
    styleConfig[level] = config = {
      el: styleEl,
      content: '',
      cache: Object.create(null)
    };
  }

  if (!config.cache[rule]) {
    config.cache[rule] = valueToStore || true;
    config.el.textContent = config.content += rule;
  }
};

var clearInlineStyle = function clearInlineStyle(level) {
  var config, j, key, keys, len1;

  if (config = styleConfig[level]) {
    if (!config.content) {
      return;
    }

    config.el.textContent = config.content = '';
    keys = Object.keys(config.cache);

    for (j = 0, len1 = keys.length; j < len1; j++) {
      key = keys[j];
      config.cache[key] = null;
    }
  }
};

var version = "1.4.3";

var _quickcss;

var index = _quickcss = function quickcss(targetEl, property, value, important) {
  var computedStyle, i, len, subEl, subProperty, subValue;

  switch (false) {
    case !isIterable(targetEl):
      for (i = 0, len = targetEl.length; i < len; i++) {
        subEl = targetEl[i];

        _quickcss(subEl, property, value);
      }

      break;

    case _typeof(property) !== 'object':
      // Passed a style map
      for (subProperty in property) {
        subValue = property[subProperty];

        _quickcss(targetEl, subProperty, subValue);
      }

      break;

    default:
      property = normalizeProperty(property);

      if (typeof value === 'undefined') {
        computedStyle = targetEl._computedStyle || (targetEl._computedStyle = getComputedStyle(targetEl));
        return computedStyle[property];
      } else if (property) {
        targetEl.style.setProperty(property, normalizeValue(property, value), important ? IMPORTANT : void 0);
      }

  }
};

_quickcss.animation = function (name$$1, frames) {
  var frame, generated, prefix, rules;

  if (name$$1 && typeof name$$1 === 'string' && frames && _typeof(frames) === 'object') {
    prefix = getPrefix('animation');
    generated = '';

    for (frame in frames) {
      rules = frames[frame];
      generated += "".concat(frame, " {").concat(ruleToString(rules), "}");
    }

    generated = "@".concat(prefix, "keyframes ").concat(name$$1, " {").concat(generated, "}");
    return inlineStyle(generated, true, 0);
  }
};

_quickcss.register = function (rule, level, important) {
  var className, ref, style;

  if (rule && _typeof(rule) === 'object') {
    level || (level = 0);
    rule = ruleToString(rule, important);

    if (!(className = (ref = inlineStyleConfig[level]) != null ? ref[rule] : void 0)) {
      className = hash(rule);
      style = ".".concat(className, " {").concat(rule, "}");
      inlineStyle(style, className, level);
    }

    return className;
  }
};

_quickcss.clearRegistered = function (level) {
  return clearInlineStyle(level || 0);
};
/* istanbul ignore next */


_quickcss.UNSET = function () {
  switch (false) {
    case !isValueSupported('display', 'unset'):
      return 'unset';

    case !isValueSupported('display', 'initial'):
      return 'initial';

    case !isValueSupported('display', 'inherit'):
      return 'inherit';
  }
}();

_quickcss.supports = isValueSupported;
_quickcss.supportsProperty = isPropSupported;
_quickcss.normalizeProperty = normalizeProperty;
_quickcss.normalizeValue = normalizeValue;
_quickcss.version = version;function _typeof$1(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$1 = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof$1 = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof$1(obj);
}

var _extend, isArray, isObject, _shouldDeepExtend;

isArray = function isArray(target) {
  return Array.isArray(target);
};

isObject = function isObject(target) {
  return target && Object.prototype.toString.call(target) === '[object Object]' || isArray(target);
};

_shouldDeepExtend = function shouldDeepExtend(options, target, parentKey) {
  if (options.deep) {
    if (options.notDeep) {
      return !options.notDeep[target];
    } else {
      return true;
    }
  } else if (options.deepOnly) {
    return options.deepOnly[target] || parentKey && _shouldDeepExtend(options, parentKey);
  }
}; // else false


var extend = _extend = function extend(options, target, sources, parentKey) {
  var i, key, len, source, sourceValue, subTarget, targetValue;

  if (!target || _typeof$1(target) !== 'object' && typeof target !== 'function') {
    target = {};
  }

  for (i = 0, len = sources.length; i < len; i++) {
    source = sources[i];

    if (source != null) {
      for (key in source) {
        sourceValue = source[key];
        targetValue = target[key];

        if (sourceValue === target || sourceValue === void 0 || sourceValue === null && !options.allowNull && !options.nullDeletes || options.keys && !options.keys[key] || options.notKeys && options.notKeys[key] || options.own && !source.hasOwnProperty(key) || options.globalFilter && !options.globalFilter(sourceValue, key, source) || options.filters && options.filters[key] && !options.filters[key](sourceValue, key, source)) {
          continue;
        }

        if (sourceValue === null && options.nullDeletes) {
          delete target[key];
          continue;
        }

        if (options.globalTransform) {
          sourceValue = options.globalTransform(sourceValue, key, source);
        }

        if (options.transforms && options.transforms[key]) {
          sourceValue = options.transforms[key](sourceValue, key, source);
        }

        switch (false) {
          case !(options.concat && isArray(sourceValue) && isArray(targetValue)):
            target[key] = targetValue.concat(sourceValue);
            break;

          case !(_shouldDeepExtend(options, key, parentKey) && isObject(sourceValue)):
            subTarget = isObject(targetValue) ? targetValue : isArray(sourceValue) ? [] : {};
            target[key] = _extend(options, subTarget, [sourceValue], key);
            break;

          default:
            target[key] = sourceValue;
        }
      }
    }
  }

  return target;
};

var version$1 = "1.7.4";
var modifiers, newBuilder, normalizeKeys, primaryBuilder;

normalizeKeys = function normalizeKeys(keys) {
  var i, key, len, output;

  if (keys) {
    output = {};

    if (_typeof$1(keys) !== 'object') {
      output[keys] = true;
    } else {
      if (!Array.isArray(keys)) {
        keys = Object.keys(keys);
      }

      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        output[key] = true;
      }
    }

    return output;
  }
};

newBuilder = function newBuilder(isBase) {
  var _builder;

  _builder = function builder(target) {
    var theTarget;
    var $_len = arguments.length,
        $_i = -1,
        sources = new Array($_len);

    while (++$_i < $_len) sources[$_i] = arguments[$_i];

    if (_builder.options.target) {
      theTarget = _builder.options.target;
    } else {
      theTarget = target;
      sources.shift();
    }

    return extend(_builder.options, theTarget, sources);
  };

  if (isBase) {
    _builder.isBase = true;
  }

  _builder.options = {};
  Object.defineProperties(_builder, modifiers);
  return _builder;
};

modifiers = {
  'deep': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      _.options.deep = true;
      return _;
    }
  },
  'own': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      _.options.own = true;
      return _;
    }
  },
  'allowNull': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      _.options.allowNull = true;
      return _;
    }
  },
  'nullDeletes': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      _.options.nullDeletes = true;
      return _;
    }
  },
  'concat': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      _.options.concat = true;
      return _;
    }
  },
  'clone': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      _.options.target = {};
      return _;
    }
  },
  'notDeep': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      return function (keys) {
        _.options.notDeep = normalizeKeys(keys);
        return _;
      };
    }
  },
  'deepOnly': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      return function (keys) {
        _.options.deepOnly = normalizeKeys(keys);
        return _;
      };
    }
  },
  'keys': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      return function (keys) {
        _.options.keys = normalizeKeys(keys);
        return _;
      };
    }
  },
  'notKeys': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      return function (keys) {
        _.options.notKeys = normalizeKeys(keys);
        return _;
      };
    }
  },
  'transform': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      return function (transform) {
        if (typeof transform === 'function') {
          _.options.globalTransform = transform;
        } else if (transform && _typeof$1(transform) === 'object') {
          _.options.transforms = transform;
        }

        return _;
      };
    }
  },
  'filter': {
    get: function get() {
      var _;

      _ = this.isBase ? newBuilder() : this;
      return function (filter) {
        if (typeof filter === 'function') {
          _.options.globalFilter = filter;
        } else if (filter && _typeof$1(filter) === 'object') {
          _.options.filters = filter;
        }

        return _;
      };
    }
  }
};
primaryBuilder = newBuilder(true);
primaryBuilder.version = version$1;
var primaryBuilder$1 = primaryBuilder;function _typeof$2(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$2 = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof$2 = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof$2(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var defined = function defined(subject) {
  return subject !== void 0;
};

var array = function array(subject) {
  return subject instanceof Array;
};

var object = function object(subject) {
  return _typeof$2(subject) === 'object' && subject; // 2nd check is to test against 'null' values
};

var objectPlain = function objectPlain(subject) {
  return object(subject) && Object.prototype.toString.call(subject) === '[object Object]' && subject.constructor === Object;
};

var string = function string(subject) {
  return typeof subject === 'string';
};

var number = function number(subject) {
  return typeof subject === 'number' && !isNaN(subject);
};

var numberLoose = function numberLoose(subject) {
  return number(subject) || string(subject) && number(Number(subject));
};

var iterable = function iterable(subject) {
  return object(subject) && number(subject.length);
};

var function_ = function function_(subject) {
  return typeof subject === 'function';
};

var natives =
/*#__PURE__*/
Object.freeze({
  defined: defined,
  array: array,
  object: object,
  objectPlain: objectPlain,
  string: string,
  number: number,
  numberLoose: numberLoose,
  iterable: iterable,
  function_: function_
});

var domDoc = function domDoc(subject) {
  return subject && subject.nodeType === 9;
};

var domEl = function domEl(subject) {
  return subject && subject.nodeType === 1;
};

var domText = function domText(subject) {
  return subject && subject.nodeType === 3;
};

var domNode = function domNode(subject) {
  return domEl(subject) || domText(subject);
};

var domTextarea = function domTextarea(subject) {
  return subject && subject.nodeName === 'TEXTAREA';
};

var domInput = function domInput(subject) {
  return subject && subject.nodeName === 'INPUT';
};

var domSelect = function domSelect(subject) {
  return subject && subject.nodeName === 'SELECT';
};

var domField = function domField(subject) {
  return domInput(subject) || domTextarea(subject) || domSelect(subject);
};

var dom =
/*#__PURE__*/
Object.freeze({
  domDoc: domDoc,
  domEl: domEl,
  domText: domText,
  domNode: domNode,
  domTextarea: domTextarea,
  domInput: domInput,
  domSelect: domSelect,
  domField: domField
});
var AVAIL_SETS, Checks;
AVAIL_SETS = {
  natives: natives,
  dom: dom
};

Checks =
/*#__PURE__*/
function () {
  _createClass(Checks, [{
    key: "create",
    value: function create() {
      var args;

      if (arguments.length) {
        args = Array.prototype.slice.call(arguments);
      }

      return new Checks(args);
    }
  }]);

  function Checks(sets) {
    _classCallCheck(this, Checks);

    var i, len, set;

    if (sets == null) {
      sets = ['natives'];
    }

    for (i = 0, len = sets.length; i < len; i++) {
      set = sets[i];

      if (AVAIL_SETS[set]) {
        this.load(AVAIL_SETS[set]);
      }
    }
  }

  _createClass(Checks, [{
    key: "load",
    value: function load(set) {
      var key, value;

      if (AVAIL_SETS.natives.string(set)) {
        set = AVAIL_SETS[set];
      }

      if (!AVAIL_SETS.natives.objectPlain(set)) {
        return;
      }

      for (key in set) {
        value = set[key];

        if (key === 'function_') {
          key = 'function';
        }

        this[key] = value;
      }
    }
  }]);

  return Checks;
}();

var index$1 = Checks.prototype.create();function _typeof$3(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$3 = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof$3 = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof$3(obj);
}

function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties$1(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$1(Constructor, staticProps);
  return Constructor;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var template = ['id', 'name', 'type', 'href', 'selected', 'checked', 'className']; // To copy from DOM Elements

var element = ['id', 'ref', 'type', 'name', 'text', 'style', 'class', 'className', 'url', 'href', 'selected', 'checked', 'props', 'attrs', 'passStateToChildren', 'stateTriggers', 'unpassableStates']; // Used in QuickElement::toJSON
// 'relatedInstance'

var IS;
IS = index$1.create('natives', 'dom');
IS.load({
  quickDomEl: function quickDomEl(subject) {
    return subject && subject.constructor.name === 'QuickElement';
  },
  template: function template(subject) {
    return subject && subject.constructor.name === 'QuickTemplate';
  }
}); // batch: (subject)-> subject and subject.constructor.name is 'QuickBatch'

var IS$1 = IS;

var QuickElement, QuickWindow, _quickdom;

QuickElement = null;
QuickWindow = null;

_quickdom = function quickdom() {
  var arg, args, element, i, j, len, prevCount;
  args = new Array(arguments.length);

  for (i = j = 0, len = arguments.length; j < len; i = ++j) {
    arg = arguments[i];
    args[i] = arg;
  }

  prevCount = QuickElement.count;
  element = _quickdom.create(args);

  if (element && element._postCreation && QuickElement.count !== prevCount) {
    element._postCreation();
  }

  return element;
};

_quickdom.create = function (args) {
  var argsLength, child, children, element, i, j, len, options, type;

  switch (false) {
    case !IS$1.array(args[0]):
      return _quickdom.apply(void 0, _toConsumableArray(args[0]));

    case !IS$1.template(args[0]):
      return args[0].spawn();

    case !IS$1.quickDomEl(args[0]):
      if (args[1]) {
        return args[0].updateOptions(args[1]);
      } else {
        return args[0];
      }

    case !(IS$1.domNode(args[0]) || IS$1.domDoc(args[0])):
      if (args[0]._quickElement) {
        return args[0]._quickElement;
      }

      type = args[0].nodeName.toLowerCase().replace('#', '');
      options = args[1] || {};
      options.existing = args[0];
      return new QuickElement(type, options);

    case args[0] !== window:
      return QuickWindow;

    case !IS$1.string(args[0]):
      type = args[0].toLowerCase();

      if (type === 'text') {
        options = IS$1.object(args[1]) ? args[1] : {
          text: args[1] || ''
        };
      } else {
        options = IS$1.object(args[1]) ? args[1] : {};
      }

      element = new QuickElement(type, options);

      if (args.length > 2) {
        children = new Array(argsLength = args.length);
        i = 1;

        while (++i < argsLength) {
          children[i + 1] = args[i];
        }

        for (j = 0, len = children.length; j < len; j++) {
          child = children[j];

          if (IS$1.string(child)) {
            child = _quickdom.text(child);
          }

          if (IS$1.array(child)) {
            child = _quickdom.apply(void 0, _toConsumableArray(child));
          }

          if (IS$1.quickDomEl(child)) {
            element.append(child);
          }
        }
      }

      return element;

    case !(args[0] && (IS$1.domNode(args[0][0]) || IS$1.domDoc(args[0][0]))):
      return _quickdom(args[0][0]);
  }
};

_quickdom.html = function (innerHTML) {
  var children, container;
  container = document.createElement('div');
  container.innerHTML = innerHTML;
  children = Array.prototype.slice.call(container.childNodes);
  return _quickdom.batch(children);
};

_quickdom.isQuickEl = function (target) {
  return IS$1.quickDomEl(target);
};

_quickdom.isEl = function (target) {
  return IS$1.domEl(target);
};

var init = function init(QuickElement_, QuickWindow_) {
  QuickElement = QuickElement_;
  QuickWindow = QuickWindow_;
  return _quickdom;
};

var includes$1 = function includes(target, item) {
  return target && target.indexOf(item) !== -1;
};

var removeItem = function removeItem(target, item) {
  var itemIndex;
  itemIndex = target.indexOf(item);

  if (itemIndex !== -1) {
    target.splice(itemIndex, 1);
  }

  return target;
};

var normalizeElementArg = function normalizeElementArg(targetEl) {
  switch (false) {
    case !IS$1.string(targetEl):
      return quickdom.text(targetEl);

    case !IS$1.domNode(targetEl):
      return quickdom(targetEl);

    case !IS$1.template(targetEl):
      return targetEl.spawn();

    default:
      return targetEl;
  }
};

var isStateStyle = function isStateStyle(string) {
  return string[0] === '$' || string[0] === '@';
};

var registerStyle = function registerStyle(rule, level, important) {
  var cached, i, len, output, prop, props;
  level || (level = 0);
  cached = styleCache.get(rule, level);

  if (cached) {
    return cached;
  }

  output = {
    className: [index.register(rule, level, important)],
    fns: [],
    rule: rule
  };
  props = Object.keys(rule);

  for (i = 0, len = props.length; i < len; i++) {
    prop = props[i];

    if (typeof rule[prop] === 'function') {
      output.fns.push([prop, rule[prop]]);
    }
  }

  return styleCache.set(rule, output, level);
};

var styleCache = new (
/*#__PURE__*/
function () {
  function _class() {
    _classCallCheck$1(this, _class);

    this.keys = Object.create(null);
    this.values = Object.create(null);
  }

  _createClass$1(_class, [{
    key: "get",
    value: function get(key, level) {
      var index$$1;

      if (this.keys[level]) {
        index$$1 = this.keys[level].indexOf(key);

        if (index$$1 !== -1) {
          return this.values[level][index$$1];
        }
      }
    }
  }, {
    key: "set",
    value: function set(key, value, level) {
      if (!this.keys[level]) {
        this.keys[level] = [];
        this.values[level] = [];
      }

      this.keys[level].push(key);
      this.values[level].push(value);
      return value;
    }
  }]);

  return _class;
}())();
var REGEX_WHITESPACE;
REGEX_WHITESPACE = /\s+/;

var on_ = function on_(eventNames, callback, useCapture, isPrivate) {
  var _this = this;

  var callbackRef, split;

  if (this._eventCallbacks == null) {
    this._eventCallbacks = {
      __refs: {}
    };
  }

  if (IS$1.string(eventNames) && IS$1.function(callback)) {
    split = eventNames.split('.');
    callbackRef = split[1];
    eventNames = split[0];

    if (eventNames === 'inserted' && this._inserted) {
      callback.call(this, this._parent);
      return this;
    }

    eventNames.split(REGEX_WHITESPACE).forEach(function (eventName) {
      var base;

      if (!_this._eventCallbacks[eventName]) {
        _this._eventCallbacks[eventName] = [];

        if (!isPrivate) {
          _this._listenTo(eventName, function (event) {
            return _this._invokeHandlers(eventName, event);
          }, useCapture);
        }
      }

      if (callbackRef) {
        if ((base = _this._eventCallbacks.__refs)[eventName] == null) {
          base[eventName] = {};
        }

        _this._eventCallbacks.__refs[eventName][callbackRef] = callback;
      }

      return _this._eventCallbacks[eventName].push(callback);
    });
  }

  return this;
};

var once = function once(eventNames, callback) {
  var _this2 = this;

  var _onceCallback;

  if (IS$1.string(eventNames) && IS$1.function(callback)) {
    this.on(eventNames, _onceCallback = function onceCallback(event) {
      _this2.off(eventNames, _onceCallback);

      return callback.call(_this2, event);
    });
  }

  return this;
};

var off_ = function off_(eventNames, callback) {
  var _this3 = this;

  var callbackRef, eventName, split;

  if (this._eventCallbacks == null) {
    this._eventCallbacks = {
      __refs: {}
    };
  }

  if (!IS$1.string(eventNames)) {
    for (eventName in this._eventCallbacks) {
      this.off(eventName);
    }
  } else {
    split = eventNames.split('.');
    callbackRef = split[1];
    eventNames = split[0];
    eventNames.split(REGEX_WHITESPACE).forEach(function (eventName) {
      var ref;

      if (_this3._eventCallbacks[eventName]) {
        if (callback == null) {
          callback = (ref = _this3._eventCallbacks.__refs[eventName]) != null ? ref[callbackRef] : void 0;
        }

        if (IS$1.function(callback)) {
          return removeItem(_this3._eventCallbacks[eventName], callback);
        } else if (!callbackRef) {
          return _this3._eventCallbacks[eventName].length = 0;
        }
      }
    });
  }

  return this;
};

var emit = function emit(eventName) {
  var bubbles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var cancelable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var data = arguments.length > 3 ? arguments[3] : undefined;
  var event;

  if (eventName && IS$1.string(eventName)) {
    event = document.createEvent('Event');
    event.initEvent(eventName, bubbles, cancelable);

    if (data && _typeof$3(data) === 'object') {
      primaryBuilder$1(event, data);
    }

    this.el.dispatchEvent(event);
  }

  return this;
};

var emitPrivate = function emitPrivate(eventName, arg) {
  var ref;

  if (eventName && IS$1.string(eventName) && ((ref = this._eventCallbacks) != null ? ref[eventName] : void 0)) {
    this._invokeHandlers(eventName, arg);
  }

  return this;
};

var _invokeHandlers = function _invokeHandlers(eventName, arg) {
  var callbacks, cb, i, len;
  callbacks = this._eventCallbacks[eventName].slice();

  for (i = 0, len = callbacks.length; i < len; i++) {
    cb = callbacks[i];
    cb.call(this, arg);
  }
};
/* istanbul ignore next */


var _listenTo = function _listenTo(eventName, callback, useCapture) {
  var eventNameToListenFor, listenMethod;
  listenMethod = this.el.addEventListener ? 'addEventListener' : 'attachEvent';
  eventNameToListenFor = this.el.addEventListener ? eventName : "on".concat(eventName);
  this.el[listenMethod](eventNameToListenFor, callback, useCapture);
  return this;
};

function events(QuickElement) {
  QuickElement.prototype.on = on_;
  QuickElement.prototype.once = once;
  QuickElement.prototype.off = off_;
  QuickElement.prototype.emit = emit;
  QuickElement.prototype.emitPrivate = emitPrivate;
  QuickElement.prototype._invokeHandlers = _invokeHandlers;
  return QuickElement.prototype._listenTo = _listenTo;
}
/**
* Sets/gets the value of a style property. In getter mode the computed property of
* the style will be returned unless the element is not inserted into the DOM. In
* webkit browsers all computed properties of a detached node are always an empty
* string but in gecko they reflect on the actual computed value, hence we need
* to "normalize" this behavior and make sure that even on gecko an empty string
* is returned
* @return {[type]} [description]
*/


var style = function style(property) {
  var _this = this;

  var args, i, key, keys, result, value;

  if (this.type === 'text') {
    return;
  }

  args = arguments;

  if (IS$1.string(property)) {
    value = typeof args[1] === 'function' ? args[1].call(this, this.related) : args[1];

    if (args[1] === null && IS$1.defined(this.currentStateStyle(property)) && !IS$1.function(this.currentStateStyle(property))) {
      value = index.UNSET;
    }

    if (value && typeof value.then === 'function') {
      value.then(function (value) {
        return index(_this.el, property, value, _this.options.forceStyle);
      });
    } else {
      result = index(this.el, property, value, this.options.forceStyle);
    }

    if (args.length === 1) {
      /* istanbul ignore next */
      if (this._inserted) {
        return result;
      } else if (!result) {
        return result;
      } else {
        return '';
      }
    }
  } else if (IS$1.object(property)) {
    keys = Object.keys(property);
    i = -1;

    while (key = keys[++i]) {
      this.style(key, property[key]);
    }
  }

  return this;
};
/**
* Attempts to resolve the value for a given property in the following order if each one isn't a valid value:
* 1. from computed style (for dom-inserted els)
* 2. from DOMElement.style object (for non-inserted els; if options.styleAfterInsert, will only have state styles)
* 3. from provided style options
* (for non-inserted els; checking only $base since state styles will always be applied to the style object even for non-inserted)
 */


var styleSafe = function styleSafe(property, skipComputed) {
  var computed, result, sample;

  if (this.type === 'text') {
    return;
  }

  sample = this.el.style[property];

  if (IS$1.string(sample) || IS$1.number(sample)) {
    computed = skipComputed ? 0 : this.style(property);
    result = computed || this.el.style[property] || this.currentStateStyle(property) || '';

    if (typeof result === 'function') {
      return result.call(this, this.related);
    } else {
      return result;
    }
  }

  return this;
};

var styleParsed = function styleParsed(property, skipComputed) {
  return parseFloat(this.styleSafe(property, skipComputed));
};

var recalcStyle = function recalcStyle(recalcChildren) {
  var child, j, len, ref, targetStyles;
  targetStyles = this._resolveFnStyles(this._getActiveStates(), true);
  this.style(targetStyles);

  if (recalcChildren) {
    ref = this._children;

    for (j = 0, len = ref.length; j < len; j++) {
      child = ref[j];
      child.recalcStyle();
    }
  }

  return this;
};

var currentStateStyle = function currentStateStyle(property) {
  var i, state, states;

  if (property) {
    if (this._state.length) {
      states = this._state.slice();

      if (this._stateShared && this._stateShared.length) {
        var _states;

        (_states = states).push.apply(_states, _toConsumableArray(this._stateShared));
      }

      i = states.length;

      while (state = states[--i]) {
        if (this._styles[state] && IS$1.defined(this._styles[state].rule[property])) {
          return this._styles[state].rule[property];
        }
      }
    }

    if (this._styles.base) {
      return this._styles.base.rule[property];
    }
  }
};

var hide = function hide() {
  return this.style('display', 'none');
};

var show = function show(display) {
  var ref;

  if (!display) {
    display = this.currentStateStyle('display');

    if (display === 'none' || !display) {
      display = 'block';
    }
  }

  if (display == null) {
    display = ((ref = this._styles.base) != null ? ref.display : void 0) || 'block';
  }

  return this.style('display', display);
};

var orientationGetter = {
  get: function get() {
    if (this.width > this.height) {
      return 'landscape';
    } else {
      return 'portrait';
    }
  }
};
var aspectRatioGetter = {
  get: function get() {
    return this.width / this.height;
  }
};

function style$1(QuickElement) {
  Object.defineProperties(QuickElement.prototype, {
    'orientation': orientationGetter,
    'aspectRatio': aspectRatioGetter,
    'rect': {
      get: function get() {
        return this.el.getBoundingClientRect();
      }
    },
    'width': {
      get: function get() {
        return parseFloat(this.style('width'));
      },
      set: function set(value) {
        return this.style('width', value);
      }
    },
    'height': {
      get: function get() {
        return parseFloat(this.style('height'));
      },
      set: function set(value) {
        return this.style('height', value);
      }
    }
  });
  QuickElement.prototype.style = style;
  QuickElement.prototype.styleSafe = styleSafe;
  QuickElement.prototype.styleParsed = styleParsed;
  QuickElement.prototype.recalcStyle = recalcStyle;
  QuickElement.prototype.currentStateStyle = currentStateStyle;
  QuickElement.prototype.hide = hide;
  return QuickElement.prototype.show = show;
}

var QuickWindow$1;
var QuickWindow$2 = QuickWindow$1 = {
  type: 'window',
  el: window,
  raw: window,
  _eventCallbacks: {
    __refs: {}
  }
};
QuickWindow$1.on = on_;
QuickWindow$1.off = off_;
QuickWindow$1.emit = emit;
QuickWindow$1.emitPrivate = emitPrivate;
QuickWindow$1._listenTo = _listenTo;
QuickWindow$1._invokeHandlers = _invokeHandlers;
Object.defineProperties(QuickWindow$1, {
  'width': {
    get: function get() {
      return window.innerWidth;
    }
  },
  'height': {
    get: function get() {
      return window.innerHeight;
    }
  },
  'orientation': orientationGetter,
  'aspectRatio': aspectRatioGetter
});
var MediaQuery, RULE_DEILIMITER;
RULE_DEILIMITER = /,\s*/;
var MediaQuery$1 = MediaQuery = new function () {
  var callbacks, testRule;
  callbacks = [];
  window.addEventListener('resize', function () {
    var callback, i, len;

    for (i = 0, len = callbacks.length; i < len; i++) {
      callback = callbacks[i];
      callback();
    }
  });

  this.parseQuery = function (target, queryString) {
    var querySplit, rules, source;
    querySplit = queryString.split('(');
    source = querySplit[0];

    source = function () {
      switch (source) {
        case 'window':
          return QuickWindow$2;

        case 'parent':
          return target.parent;

        case 'self':
          return target;

        default:
          return target.parentMatching(function (parent) {
            return parent.ref === source.slice(1);
          });
      }
    }();

    rules = querySplit[1].slice(0, -1).split(RULE_DEILIMITER).map(function (rule) {
      var getter, key, keyPrefix, max, min, split, value;
      split = rule.split(':');
      value = parseFloat(split[1]);

      if (isNaN(value)) {
        value = split[1];
      }

      key = split[0];
      keyPrefix = key.slice(0, 4);
      max = keyPrefix === 'max-';
      min = !max && keyPrefix === 'min-';

      if (max || min) {
        key = key.slice(4);
      }

      getter = function () {
        switch (key) {
          case 'orientation':
            return function () {
              return source.orientation;
            };

          case 'aspect-ratio':
            return function () {
              return source.aspectRatio;
            };

          case 'width':
          case 'height':
            return function () {
              return source[key];
            };

          default:
            return function () {
              var parsedValue, stringValue;
              stringValue = source.style(key);
              parsedValue = parseFloat(stringValue);

              if (isNaN(parsedValue)) {
                return stringValue;
              } else {
                return parsedValue;
              }
            };
        }
      }();

      return {
        key: key,
        value: value,
        min: min,
        max: max,
        getter: getter
      };
    });
    return {
      source: source,
      rules: rules
    };
  };

  this.register = function (target, queryString) {
    var callback, query;
    query = this.parseQuery(target, queryString);

    if (query.source) {
      callbacks.push(callback = function callback() {
        return testRule(target, query, queryString);
      });
      callback();
    }

    return query;
  };

  testRule = function testRule(target, query, queryString) {
    var currentValue, i, len, passed, ref, rule;
    passed = true;
    ref = query.rules;

    for (i = 0, len = ref.length; i < len; i++) {
      rule = ref[i];
      currentValue = rule.getter();

      passed = function () {
        switch (false) {
          case !rule.min:
            return currentValue >= rule.value;

          case !rule.max:
            return currentValue <= rule.value;

          default:
            return currentValue === rule.value;
        }
      }();

      if (!passed) {
        break;
      }
    }

    return target.state(queryString, passed);
  };

  return this;
}();
var StateChain;

var StateChain$1 = StateChain =
/*#__PURE__*/
function () {
  function StateChain(states) {
    _classCallCheck$1(this, StateChain);

    this.string = states.join('+');
    this.array = states.slice();
    this.length = states.length;
  }

  _createClass$1(StateChain, [{
    key: "includes",
    value: function includes(target) {
      var i, len, ref, state;
      ref = this.array;

      for (i = 0, len = ref.length; i < len; i++) {
        state = ref[i];

        if (state === target) {
          return true;
        }
      }

      return false;
    }
  }, {
    key: "without",
    value: function without(target) {
      return this.array.filter(function (state) {
        return state !== target;
      }).join('+');
    }
  }, {
    key: "isApplicable",
    value: function isApplicable(target, otherActive) {
      var active;
      active = this.array.filter(function (state) {
        return state === target || otherActive.indexOf(state) !== -1;
      });
      return active.length === this.array.length;
    }
  }]);

  return StateChain;
}();

var BASE_STATE_TRIGGERS, CACHED_FN_INSERTED;
BASE_STATE_TRIGGERS = {
  'hover': {
    on: 'mouseenter',
    off: 'mouseleave',
    bubbles: true
  },
  'focus': {
    on: 'focus',
    off: 'blur',
    bubbles: true
  }
};

var _normalizeOptions = function _normalizeOptions() {
  var base1, base2, base3, base4, base5;

  if (this.options.relatedInstance) {
    (base1 = this.options).related || (base1.related = this.options.relatedInstance);
    this.options.relatedInstance = null;
  }

  this.related = (base2 = this.options).related != null ? base2.related : base2.related = this;

  if (this.options.class) {
    this.options.className = this.options.class;
  }

  if (this.options.url) {
    this.options.href = this.options.url;
  }

  if ((base3 = this.options).unpassableStates == null) {
    base3.unpassableStates = [];
  }

  if ((base4 = this.options).passStateToChildren == null) {
    base4.passStateToChildren = true;
  }

  if ((base5 = this.options).passDataToChildren == null) {
    base5.passDataToChildren = true;
  }

  this.options.stateTriggers = this.options.stateTriggers ? primaryBuilder$1.clone.deep(BASE_STATE_TRIGGERS, this.options.stateTriggers) : BASE_STATE_TRIGGERS;

  if (this.type === 'text') {
    primaryBuilder$1(this, this._parseTexts(this.options.text, this._texts));
  } else {
    primaryBuilder$1(this, this._parseStyles(this.options.style, this._styles));
  }
};

var _parseStyles = function _parseStyles(styles, store) {
  var _mediaStates, _providedStates, _providedStatesShared, _stateShared, _styles, base, _flattenNestedStates, forceStyle, i, keys, len, specialStates, state, stateStyles, state_, states;

  if (!IS$1.objectPlain(styles)) {
    return;
  }

  keys = Object.keys(styles);
  states = keys.filter(function (key) {
    return isStateStyle(key);
  });
  specialStates = removeItem(states.slice(), '$base');
  _mediaStates = states.filter(function (key) {
    return key[0] === '@';
  }).map(function (state) {
    return state.slice(1);
  });
  _providedStates = states.map(function (state) {
    return state.slice(1); // Remove '$' prefix
  });
  _styles = store || {};
  _stateShared = _providedStatesShared = void 0;
  base = !includes$1(states, '$base') ? styles : styles.$base;
  _styles.base = registerStyle(base, 0, forceStyle = this.options.forceStyle);

  if (specialStates.length) {
    _flattenNestedStates = function flattenNestedStates(styleObject, chain, level) {
      var hasNonStateProps, i, len, output, state, stateChain, state_, styleKeys;
      styleKeys = Object.keys(styleObject);
      output = {};
      hasNonStateProps = false;

      for (i = 0, len = styleKeys.length; i < len; i++) {
        state = styleKeys[i];

        if (!isStateStyle(state)) {
          hasNonStateProps = true;
          output[state] = styleObject[state];
        } else {
          chain.push(state_ = state.slice(1));
          stateChain = new StateChain$1(chain);

          if (_stateShared == null) {
            _stateShared = [];
          }

          if (_providedStatesShared == null) {
            _providedStatesShared = [];
          }

          _providedStatesShared.push(stateChain);

          if (state[0] === '@') {
            _mediaStates.push(state_);
          }

          _styles[stateChain.string] = registerStyle(_flattenNestedStates(styleObject[state], chain, level + 1), level + 1, forceStyle);
        }
      }

      if (hasNonStateProps) {
        return output;
      }
    };

    for (i = 0, len = specialStates.length; i < len; i++) {
      state = specialStates[i];
      state_ = state.slice(1);
      stateStyles = _flattenNestedStates(styles[state], [state_], 1);

      if (stateStyles) {
        _styles[state_] = registerStyle(stateStyles, 1);
      }
    }
  }

  return {
    _styles: _styles,
    _mediaStates: _mediaStates,
    _stateShared: _stateShared,
    _providedStates: _providedStates,
    _providedStatesShared: _providedStatesShared
  };
};

var _parseTexts = function _parseTexts(texts, store) {
  var _providedStates, _texts, i, len, state, states;

  if (!IS$1.objectPlain(texts)) {
    return;
  }

  states = Object.keys(texts).map(function (state) {
    return state.slice(1);
  });
  _providedStates = states.filter(function (state) {
    return state !== 'base';
  });
  _texts = store || {};
  _texts = {
    base: ''
  };

  for (i = 0, len = states.length; i < len; i++) {
    state = states[i];
    _texts[state] = texts['$' + state];
  }

  return {
    _texts: _texts,
    _providedStates: _providedStates
  };
};

var _applyOptions = function _applyOptions() {
  var _this = this;

  var event, handler, method, ref, ref1, ref2, value;

  if (ref = this.options.id || this.options.ref) {
    this.attr('data-ref', this.ref = ref);
  }

  if (this.options.id) {
    this.el.id = this.options.id;
  }

  if (this.options.className) {
    this.el.className = this.options.className;
  }

  if (this.options.src) {
    this.el.src = this.options.src;
  }

  if (this.options.href) {
    this.el.href = this.options.href;
  }

  if (this.options.type) {
    this.el.type = this.options.type;
  }

  if (this.options.name) {
    this.el.name = this.options.name;
  }

  if (this.options.value) {
    this.el.value = this.options.value;
  }

  if (this.options.selected) {
    this.el.selected = this.options.selected;
  }

  if (this.options.checked) {
    this.el.checked = this.options.checked;
  }

  if (this.options.props) {
    this.prop(this.options.props);
  }

  if (this.options.attrs) {
    this.attr(this.options.attrs);
  }

  this._applyRegisteredStyle(this._styles.base, null, null, this.options.styleAfterInsert);

  if (this._texts) {
    this.text = this._texts.base;
  }

  this.on('inserted', CACHED_FN_INSERTED, false, true);

  if (this.options.invokeComputersOnce) {
    this._invokedComputers = {};
  }

  if (this.options.recalcOnResize) {
    window.addEventListener('resize', function () {
      return _this.recalcStyle();
    });
  }

  if (this.options.events) {
    ref1 = this.options.events;

    for (event in ref1) {
      handler = ref1[event];
      this.on(event, handler);
    }
  }

  if (this.options.methods) {
    ref2 = this.options.methods;

    for (method in ref2) {
      value = ref2[method];

      if (!this[method]) {
        if (IS$1.function(value)) {
          this[method] = value;
        } else if (IS$1.object(value)) {
          Object.defineProperty(this, method, {
            configurable: true,
            get: value.get,
            set: value.set
          });
        }
      }
    }
  }

  if (this.type !== 'text' && IS$1.object(this.options.text)) {
    this.append(_quickdom('text', {
      text: this.options.text
    }));
  }
};

var _postCreation = function _postCreation(data) {
  if (this.options.computers) {
    if (data && this.options.data) {
      data = primaryBuilder$1.clone(this.options.data, data);
    }

    data || (data = this.options.data);
    this.applyData(data, false);

    if (this.options.computers._init) {
      this._runComputer('_init', data);
    }
  }

  if (this.options.state) {
    this.state(this.options.state);
  }
};

var _attachStateEvents = function _attachStateEvents(force) {
  var _this2 = this;

  var states;
  states = Object.keys(this.options.stateTriggers);
  states.forEach(function (state) {
    var disabler, enabler, trigger;
    trigger = _this2.options.stateTriggers[state];

    if (!includes$1(_this2._providedStates, state) && !force && !trigger.force) {
      return;
    }

    enabler = IS$1.string(trigger) ? trigger : trigger.on;

    if (IS$1.object(trigger)) {
      disabler = trigger.off;
    }

    _this2._listenTo(enabler, function () {
      return _this2.state(state, true, trigger.bubbles);
    });

    if (disabler) {
      return _this2._listenTo(disabler, function () {
        return _this2.state(state, false, trigger.bubbles);
      });
    }
  });
};

var _proxyParent = function _proxyParent() {
  var parent;
  parent = void 0;
  return Object.defineProperty(this, '_parent', {
    get: function get() {
      return parent;
    },
    set: function set(newParent) {
      var _this3 = this;

      var lastParent;

      if (parent = newParent) {
        lastParent = this.parents.slice(-1)[0];

        if (lastParent.raw === document.documentElement) {
          this._unproxyParent(newParent);
        } else {
          parent.on('inserted', function () {
            if (parent === newParent) {
              return _this3._unproxyParent(newParent);
            }
          });
        }
      }
    }
  });
};

var _unproxyParent = function _unproxyParent(newParent) {
  delete this._parent;
  this._parent = newParent;
  this.emitPrivate('inserted', newParent);
};

CACHED_FN_INSERTED = function CACHED_FN_INSERTED() {
  var i, len, mediaStates, queryString, results;
  this._inserted = this;

  if (this.options.styleAfterInsert) {
    this.recalcStyle();
  }

  if ((mediaStates = this._mediaStates) && this._mediaStates.length) {
    this._mediaStates = Object.create(null);
    results = [];

    for (i = 0, len = mediaStates.length; i < len; i++) {
      queryString = mediaStates[i];
      results.push(this._mediaStates[queryString] = MediaQuery$1.register(this, queryString));
    }

    return results;
  }
};

function init$1(QuickElement) {
  QuickElement.prototype._normalizeOptions = _normalizeOptions;
  QuickElement.prototype._parseStyles = _parseStyles;
  QuickElement.prototype._parseTexts = _parseTexts;
  QuickElement.prototype._applyOptions = _applyOptions;
  QuickElement.prototype._postCreation = _postCreation;
  QuickElement.prototype._attachStateEvents = _attachStateEvents;
  QuickElement.prototype._proxyParent = _proxyParent;
  return QuickElement.prototype._unproxyParent = _unproxyParent;
}

function aliases(QuickElement) {
  return Object.defineProperties(QuickElement.prototype, {
    'raw': {
      get: function get() {
        return this.el;
      }
    },
    '0': {
      get: function get() {
        return this.el;
      }
    },
    'css': {
      get: function get() {
        return this.style;
      }
    },
    'replaceWith': {
      get: function get() {
        return this.replace;
      }
    },
    'removeListener': {
      get: function get() {
        return this.off;
      }
    }
  });
}

var parentsUntil = function parentsUntil(filter) {
  return _getParents(this, filter);
};

var parentMatching = function parentMatching(filter) {
  var isRef, nextParent;

  if (IS$1.function(filter) || (isRef = IS$1.string(filter))) {
    nextParent = this.parent;

    while (nextParent) {
      if (isRef) {
        if (nextParent.ref === filter) {
          return nextParent;
        }
      } else {
        if (filter(nextParent)) {
          return nextParent;
        }
      }

      nextParent = nextParent.parent;
    }
  }
};

var query = function query(selector) {
  return _quickdom(this.raw.querySelector(selector));
};

var queryAll = function queryAll(selector) {
  var i, item, len, output, result;
  result = this.raw.querySelectorAll(selector);
  output = [];

  for (i = 0, len = result.length; i < len; i++) {
    item = result[i];
    output.push(item);
  }

  return _quickdom.batch(output);
};

var _getParents = function _getParents(targetEl, filter) {
  var isRef, nextParent, parents;

  if (!IS$1.function(filter) && !(isRef = IS$1.string(filter))) {
    filter = void 0;
  }

  parents = [];
  nextParent = targetEl.parent;

  while (nextParent) {
    parents.push(nextParent);
    nextParent = nextParent.parent;

    if (isRef) {
      if (nextParent && nextParent.ref === filter) {
        nextParent = null;
      }
    } else if (filter) {
      if (filter(nextParent)) {
        nextParent = null;
      }
    }
  }

  return parents;
};

var _getChildRefs = function _getChildRefs(target, freshCopy) {
  var child, childRefs, children, el, i, len, ref, refs;

  if (freshCopy || !target._childRefs) {
    target._childRefs = {};
  }

  refs = target._childRefs;

  if (target.ref) {
    refs[target.ref] = target;
  }

  children = target.children;

  if (children.length) {
    for (i = 0, len = children.length; i < len; i++) {
      child = children[i];
      childRefs = _getChildRefs(child, freshCopy);

      for (ref in childRefs) {
        el = childRefs[ref];
        refs[ref] || (refs[ref] = el);
      }
    }
  }

  return refs;
};

var _getIndexByProp = function _getIndexByProp(main, prop) {
  var parent;

  if (!(parent = main.parent)) {
    return null;
  } else {
    return parent.children.filter(function (child) {
      return child[prop] === main[prop];
    }).indexOf(main);
  }
};

var _filterElements = function _filterElements(array) {
  var i, item, len, output;

  if (!array.length) {
    return array;
  } else {
    output = [];

    for (i = 0, len = array.length; i < len; i++) {
      item = array[i];

      if (item.type !== 'text') {
        output.push(item);
      }
    }

    return output;
  }
};

function traversing(QuickElement) {
  QuickElement.prototype.parentsUntil = parentsUntil;
  QuickElement.prototype.parentMatching = parentMatching;
  QuickElement.prototype.query = query;
  QuickElement.prototype.queryAll = queryAll;
  return Object.defineProperties(QuickElement.prototype, {
    'children': {
      get: function get() {
        var child, i, len, ref1;

        if (this.el.childNodes.length !== this._children.length) {
          // Re-collect children	
          this._children.length = 0; // Empty out children array

          ref1 = this.el.childNodes;

          for (i = 0, len = ref1.length; i < len; i++) {
            child = ref1[i];

            if (child.nodeType < 4) {
              this._children.push(_quickdom(child));
            }
          }
        }

        return this._children;
      }
    },
    'elementChildren': {
      get: function get() {
        return _filterElements(this.children);
      }
    },
    'parent': {
      get: function get() {
        if ((!this._parent || this._parent.el !== this.el.parentNode) && !IS$1.domDoc(this.el.parentNode)) {
          this._parent = _quickdom(this.el.parentNode);
        }

        return this._parent;
      }
    },
    'parents': {
      get: function get() {
        return _getParents(this);
      }
    },
    'next': {
      get: function get() {
        return _quickdom(this.el.nextSibling);
      }
    },
    'nextEl': {
      get: function get() {
        return _quickdom(this.el.nextElementSibling);
      }
    },
    'nextElAll': {
      get: function get() {
        return _filterElements(this.nextAll);
      }
    },
    'nextAll': {
      get: function get() {
        var nextSibling, siblings;
        siblings = [];
        nextSibling = _quickdom(this.el.nextSibling);

        while (nextSibling) {
          siblings.push(nextSibling);
          nextSibling = nextSibling.next;
        }

        return siblings;
      }
    },
    'prev': {
      get: function get() {
        return _quickdom(this.el.previousSibling);
      }
    },
    'prevEl': {
      get: function get() {
        return _quickdom(this.el.previousElementSibling);
      }
    },
    'prevElAll': {
      get: function get() {
        return _filterElements(this.prevAll);
      }
    },
    'prevAll': {
      get: function get() {
        var prevSibling, siblings;
        siblings = [];
        prevSibling = _quickdom(this.el.previousSibling);

        while (prevSibling) {
          siblings.push(prevSibling);
          prevSibling = prevSibling.prev;
        }

        return siblings;
      }
    },
    'siblings': {
      get: function get() {
        return this.prevAll.reverse().concat(this.nextAll);
      }
    },
    'elementSiblings': {
      get: function get() {
        return _filterElements(this.siblings);
      }
    },
    'child': {
      get: function get() {
        return this._childRefs || _getChildRefs(this);
      }
    },
    'childf': {
      get: function get() {
        return _getChildRefs(this, true);
      }
    },
    'firstChild': {
      get: function get() {
        return this.children[0];
      }
    },
    'lastChild': {
      get: function get() {
        var children;
        children = this.children;
        return children[children.length - 1];
      }
    },
    'index': {
      get: function get() {
        var parent;

        if (!(parent = this.parent)) {
          return null;
        } else {
          return parent.children.indexOf(this);
        }
      }
    },
    'indexType': {
      get: function get() {
        return _getIndexByProp(this, 'type');
      }
    },
    'indexRef': {
      get: function get() {
        return _getIndexByProp(this, 'ref');
      }
    }
  });
}

_quickdom.query = function (target) {
  return _quickdom(document).query(target);
};

_quickdom.queryAll = function (target) {
  return _quickdom(document).queryAll(target);
};

var DUMMY_ARRAY;
DUMMY_ARRAY = [];

var state = function state(targetState, value, bubbles, source) {
  var activeStates, child, desiredValue, i, j, key, keys, len, prop, ref, toggle;

  if (arguments.length === 0) {
    return this._state.slice();
  }

  if (arguments.length === 1) {
    if (IS$1.string(targetState)) {
      return includes$1(this._state, targetState);
    } else if (IS$1.object(targetState)) {
      keys = Object.keys(targetState);
      i = -1;

      while (key = keys[++i]) {
        this.state(key, targetState[key]);
      }

      return this;
    }
  } else if (this._statePipeTarget && source !== this) {
    this._statePipeTarget.state(targetState, value, bubbles, this);

    return this;
  } else if (IS$1.string(targetState)) {
    if (targetState[0] === '$') {
      targetState = targetState.slice(1);
    }

    if (targetState === 'base') {
      return this;
    }

    desiredValue = !!value; // Convert the value to a boolean

    activeStates = this._getActiveStates(targetState, false); // ==== Toggle styles for this state =================================================================================

    if (this.state(targetState) !== desiredValue) {
      prop = this.type === 'text' ? 'Text' : 'Style';

      if (desiredValue) {
        //is on
        this._state.push(targetState);

        toggle = 'ON';
      } else {
        removeItem(this._state, targetState);
        toggle = 'OFF';
      }

      this['_turn' + prop + toggle](targetState, activeStates);
      this.emitPrivate("stateChange:".concat(targetState), desiredValue);
    } // ==== Pass state to parent/children =================================================================================


    if (!includes$1(this.options.unpassableStates, targetState)) {
      if (bubbles) {
        if (this.parent) {
          this._parent.state(targetState, value, true, source || this);
        }
      } else if (this.options.passStateToChildren) {
        ref = this._children;

        for (j = 0, len = ref.length; j < len; j++) {
          child = ref[j];
          child.state(targetState, value, false, source || this);
        }
      }
    }

    return this;
  }
};

var toggleState = function toggleState(targetState) {
  return this.state(targetState, !this.state(targetState));
};

var resetState = function resetState() {
  var activeState, j, len, ref;
  ref = this._state.slice();

  for (j = 0, len = ref.length; j < len; j++) {
    activeState = ref[j];
    this.state(activeState, false);
  }

  return this;
};

var pipeState = function pipeState(targetEl) {
  var activeState, j, len, ref;

  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl) && targetEl !== this) {
      this._statePipeTarget = targetEl;
      ref = this._state;

      for (j = 0, len = ref.length; j < len; j++) {
        activeState = ref[j];
        targetEl.state(activeState, true);
      }
    }
  } else if (targetEl === false) {
    delete this._statePipeTarget;
  }

  return this;
};

var _applyRegisteredStyle = function _applyRegisteredStyle(targetStyle, superiorStates, includeBase, skipFns) {
  var className, entry, j, k, len, len1, ref, ref1, superiorStyles;

  if (targetStyle) {
    ref = targetStyle.className;

    for (j = 0, len = ref.length; j < len; j++) {
      className = ref[j];
      this.addClass(className);
    }

    if (targetStyle.fns.length && !skipFns) {
      if (superiorStates) {
        superiorStyles = this._resolveFnStyles(superiorStates, includeBase);
      }

      ref1 = targetStyle.fns;

      for (k = 0, len1 = ref1.length; k < len1; k++) {
        entry = ref1[k];

        if (!(superiorStyles && superiorStyles[entry[0]])) {
          this.style(entry[0], entry[1]);
        }
      }
    }
  }
};

var _removeRegisteredStyle = function _removeRegisteredStyle(targetStyle, superiorStates, includeBase) {
  var className, entry, j, k, len, len1, ref, ref1, resetValue, superiorStyles;
  ref = targetStyle.className;

  for (j = 0, len = ref.length; j < len; j++) {
    className = ref[j];
    this.removeClass(className);
  }

  if (targetStyle.fns.length) {
    if (superiorStates) {
      superiorStyles = this._resolveFnStyles(superiorStates, includeBase);
    }

    ref1 = targetStyle.fns;

    for (k = 0, len1 = ref1.length; k < len1; k++) {
      entry = ref1[k];
      resetValue = superiorStyles && superiorStyles[entry[0]] || null;
      this.style(entry[0], resetValue);
    }
  }
};

var _turnStyleON = function _turnStyleON(targetState, activeStates) {
  var j, len, sharedStates, skipFns, stateChain;
  skipFns = this.options.styleAfterInsert && !this._inserted;

  if (this._styles[targetState]) {
    this._applyRegisteredStyle(this._styles[targetState], this._getSuperiorStates(targetState, activeStates), false, skipFns);
  }

  if (this._providedStatesShared) {
    sharedStates = this._getSharedStates(targetState);

    for (j = 0, len = sharedStates.length; j < len; j++) {
      stateChain = sharedStates[j];

      if (!includes$1(this._stateShared, stateChain.string)) {
        this._stateShared.push(stateChain.string);
      }

      this._applyRegisteredStyle(this._styles[stateChain.string], null, null, skipFns);
    }
  }
};

var _turnStyleOFF = function _turnStyleOFF(targetState, activeStates) {
  var activeSharedStates, j, len, sharedStates, stateChain, targetStyle;

  if (this._styles[targetState]) {
    this._removeRegisteredStyle(this._styles[targetState], activeStates, true);
  }

  if (this._providedStatesShared) {
    sharedStates = this._getSharedStates(targetState);

    if (sharedStates.length === 0) {
      return;
    }

    for (j = 0, len = sharedStates.length; j < len; j++) {
      stateChain = sharedStates[j];
      removeItem(this._stateShared, stateChain.string);
      targetStyle = this._styles[stateChain.string];

      if (targetStyle.fns.length && this._stateShared.length && !activeSharedStates) {
        activeSharedStates = this._stateShared.filter(function (state) {
          return !includes$1(state, targetState);
        });
        activeStates = activeStates.concat(activeSharedStates);
      }

      this._removeRegisteredStyle(targetStyle, activeStates, true);
    }
  }
};

var _turnTextON = function _turnTextON(targetState, activeStates) {
  var superiorStates, targetText;

  if (this._texts && IS$1.string(targetText = this._texts[targetState])) {
    superiorStates = this._getSuperiorStates(targetState, activeStates);

    if (!superiorStates.length) {
      this.text = targetText;
    }
  }
};

var _turnTextOFF = function _turnTextOFF(targetState, activeStates) {
  var targetText;

  if (this._texts && IS$1.string(targetText = this._texts[targetState])) {
    activeStates = activeStates.filter(function (state) {
      return state !== targetState;
    });
    targetText = this._texts[activeStates[activeStates.length - 1]];

    if (targetText == null) {
      targetText = this._texts.base;
    }

    this.text = targetText;
  }
};

var _getActiveStates = function _getActiveStates(stateToExclude) {
  var includeSharedStates = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var activeStates, j, len, plainStates;

  if (!this._providedStates) {
    return DUMMY_ARRAY;
  }

  activeStates = plainStates = this._state;

  if (stateToExclude) {
    plainStates = [];

    for (j = 0, len = activeStates.length; j < len; j++) {
      state = activeStates[j];

      if (state !== stateToExclude) {
        plainStates.push(state);
      }
    }
  }

  if (!includeSharedStates || !this._providedStatesShared) {
    return plainStates;
  } else {
    return plainStates.concat(this._stateShared);
  }
};

var _getSuperiorStates = function _getSuperiorStates(targetState, activeStates) {
  var candidate, j, len, superior, targetStateIndex;
  targetStateIndex = this._providedStates.indexOf(targetState);

  if (targetStateIndex === this._providedStates.length - 1) {
    return DUMMY_ARRAY;
  }

  superior = [];

  for (j = 0, len = activeStates.length; j < len; j++) {
    candidate = activeStates[j];

    if (this._providedStates.indexOf(candidate) > targetStateIndex) {
      superior.push(candidate);
    }
  }

  return superior;
};

var _getSharedStates = function _getSharedStates(targetState) {
  var activeStates, j, len, ref, sharedStates, stateChain;
  activeStates = this._state;
  sharedStates = [];
  ref = this._providedStatesShared;

  for (j = 0, len = ref.length; j < len; j++) {
    stateChain = ref[j];

    if (stateChain.includes(targetState) && stateChain.isApplicable(targetState, activeStates)) {
      sharedStates.push(stateChain);
    }
  }

  return sharedStates;
};

var _resolveFnStyles = function _resolveFnStyles(states, includeBase) {
  var entry, j, k, len, len1, output, ref;

  if (includeBase) {
    states = ['base'].concat(states);
  }

  output = {};

  for (j = 0, len = states.length; j < len; j++) {
    state = states[j];

    if (this._styles[state] && this._styles[state].fns.length) {
      ref = this._styles[state].fns;

      for (k = 0, len1 = ref.length; k < len1; k++) {
        entry = ref[k];
        output[entry[0]] = entry[1];
      }
    }
  }

  return output;
};

function state$1(QuickElement) {
  QuickElement.prototype.state = state;
  QuickElement.prototype.toggleState = toggleState;
  QuickElement.prototype.resetState = resetState;
  QuickElement.prototype.pipeState = pipeState;
  QuickElement.prototype._applyRegisteredStyle = _applyRegisteredStyle;
  QuickElement.prototype._removeRegisteredStyle = _removeRegisteredStyle;
  QuickElement.prototype._turnStyleON = _turnStyleON;
  QuickElement.prototype._turnStyleOFF = _turnStyleOFF;
  QuickElement.prototype._turnTextON = _turnTextON;
  QuickElement.prototype._turnTextOFF = _turnTextOFF;
  QuickElement.prototype._getActiveStates = _getActiveStates;
  QuickElement.prototype._getSuperiorStates = _getSuperiorStates;
  QuickElement.prototype._getSharedStates = _getSharedStates;
  return QuickElement.prototype._resolveFnStyles = _resolveFnStyles;
}

var toTemplate = function toTemplate() {
  return _quickdom.template(this);
};

var clone = function clone() {
  var activeState, callback, callbacks, child, elClone, eventName, i, j, k, len, len1, len2, newEl, options, ref, ref1, ref2;
  elClone = this.el.cloneNode(false);
  options = primaryBuilder$1.clone(this.options, {
    existing: elClone
  });
  newEl = new this.constructor(this.type, options);
  ref = this._state;

  for (i = 0, len = ref.length; i < len; i++) {
    activeState = ref[i];
    newEl.state(activeState, true);
  }

  ref1 = this.children;

  for (j = 0, len1 = ref1.length; j < len1; j++) {
    child = ref1[j];
    newEl.append(child.clone());
  }

  ref2 = this._eventCallbacks;

  for (eventName in ref2) {
    callbacks = ref2[eventName];

    for (k = 0, len2 = callbacks.length; k < len2; k++) {
      callback = callbacks[k];
      newEl.on(eventName, callback);
    }
  }

  return newEl;
};

var append = function append(targetEl) {
  var prevParent;

  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl)) {
      prevParent = targetEl.parent;

      if (prevParent) {
        prevParent._removeChild(targetEl);
      }

      this._children.push(targetEl);

      this.el.appendChild(targetEl.el);

      targetEl._refreshParent(); // Force re-fresh targetEl._parent value to trigger inserted callback

    }
  }

  return this;
};

var appendTo = function appendTo(targetEl) {
  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl)) {
      targetEl.append(this);
    }
  }

  return this;
};

var prepend = function prepend(targetEl) {
  var prevParent;

  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl)) {
      prevParent = targetEl.parent;

      if (prevParent) {
        prevParent._removeChild(targetEl);
      }

      this._children.unshift(targetEl);

      this.el.insertBefore(targetEl.el, this.el.firstChild);

      targetEl._refreshParent(); // Force re-fresh targetEl._parent value to trigger inserted callback

    }
  }

  return this;
};

var prependTo = function prependTo(targetEl) {
  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl)) {
      targetEl.prepend(this);
    }
  }

  return this;
};

var after = function after(targetEl) {
  var myIndex;

  if (targetEl && this.parent) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl)) {
      myIndex = this.parent._children.indexOf(this);

      this.parent._children.splice(myIndex + 1, 0, targetEl);

      this.el.parentNode.insertBefore(targetEl.el, this.el.nextSibling);

      targetEl._refreshParent(); // Force re-fresh targetEl._parent value to trigger inserted callback

    }
  }

  return this;
};

var insertAfter = function insertAfter(targetEl) {
  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl)) {
      targetEl.after(this);
    }
  }

  return this;
};

var before = function before(targetEl) {
  var myIndex;

  if (targetEl && this.parent) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl)) {
      myIndex = this.parent._children.indexOf(this);

      this.parent._children.splice(myIndex, 0, targetEl);

      this.el.parentNode.insertBefore(targetEl.el, this.el);

      targetEl._refreshParent(); // Force re-fresh targetEl._parent value to trigger inserted callback

    }
  }

  return this;
};

var insertBefore = function insertBefore(targetEl) {
  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl)) {
      targetEl.before(this);
    }
  }

  return this;
};

var detach = function detach() {
  var ref;

  if ((ref = this.parent) != null) {
    ref._removeChild(this);
  }

  return this;
};

var remove = function remove() {
  var eventName;
  this.detach();
  this.resetState();

  if (this._eventCallbacks) {
    for (eventName in this._eventCallbacks) {
      this._eventCallbacks[eventName].length = 0;
    }
  }

  return this;
};

var empty = function empty() {
  var child, i, len, ref;
  ref = this.children.slice();

  for (i = 0, len = ref.length; i < len; i++) {
    child = ref[i];

    this._removeChild(child);
  }

  return this;
};

var wrap = function wrap(targetEl) {
  var currentParent;

  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);
    currentParent = this.parent;

    if (IS$1.quickDomEl(targetEl) && targetEl !== this && targetEl !== this.parent) {
      if (currentParent) {
        currentParent._removeChild(this, !targetEl.parent ? targetEl : void 0);
      }

      targetEl.append(this);
    }
  }

  return this;
};

var unwrap = function unwrap() {
  var grandParent, parent, parentChildren, parentSibling;
  parent = this.parent;

  if (parent) {
    parentChildren = _quickdom.batch(parent.children);
    parentSibling = parent.next;
    grandParent = parent.parent;

    if (grandParent) {
      parent.detach();

      if (parentSibling) {
        parentChildren.insertBefore(parentSibling);
      } else {
        parentChildren.appendTo(grandParent);
      }
    }
  }

  return this;
};

var replace = function replace(targetEl) {
  var ref;

  if (targetEl) {
    targetEl = normalizeElementArg(targetEl);

    if (IS$1.quickDomEl(targetEl) && targetEl !== this) {
      targetEl.detach();

      if ((ref = this.parent) != null) {
        ref._removeChild(this, targetEl);
      }

      targetEl._refreshParent(); // Force re-fresh targetEl._parent value to trigger inserted callback

    }
  }

  return this;
};

var hasClass = function hasClass(target) {
  return includes$1(this.classList, target);
};

var addClass = function addClass(target) {
  var classList, targetIndex;
  classList = this.classList;
  targetIndex = classList.indexOf(target);

  if (targetIndex === -1) {
    classList.push(target);
    this.className = classList.length > 1 ? classList.join(' ') : classList[0];
  }

  return this;
};

var removeClass = function removeClass(target) {
  var classList, targetIndex;
  classList = this.classList;
  targetIndex = classList.indexOf(target);

  if (targetIndex !== -1) {
    classList.splice(targetIndex, 1);
    this.className = classList.length ? classList.join(' ') : '';
  }

  return this;
};

var toggleClass = function toggleClass(target) {
  if (this.hasClass(target)) {
    this.removeClass(target);
  } else {
    this.addClass(target);
  }

  return this;
};

var setRef = function setRef(target) {
  this.ref = this.options.ref = target;
  this.attr('data-ref', target);
  return this;
};

var _refreshParent = function _refreshParent() {
  return this.parent;
};

var _removeChild = function _removeChild(targetChild, replacementChild) {
  var indexOfChild;
  indexOfChild = this.children.indexOf(targetChild);

  if (indexOfChild !== -1) {
    if (replacementChild) {
      this.el.replaceChild(replacementChild.el, targetChild.el);

      this._children.splice(indexOfChild, 1, replacementChild);
    } else {
      this.el.removeChild(targetChild.el);

      this._children.splice(indexOfChild, 1);
    }
  }

  return this;
};

function manipulation(QuickElement) {
  Object.defineProperties(QuickElement.prototype, {
    'html': {
      get: function get() {
        return this.el.innerHTML;
      },
      set: function set(newValue) {
        return this.el.innerHTML = newValue;
      }
    },
    'text': {
      get: function get() {
        return this.el.textContent;
      },
      set: function set(newValue) {
        return this.el.textContent = newValue;
      }
    },
    'className': {
      get: function get() {
        if (this.svg) {
          return this.attr('class') || '';
        } else {
          return this.raw.className;
        }
      },
      set: function set(newValue) {
        if (this.svg) {
          return this.attr('class', newValue);
        } else {
          return this.raw.className = newValue;
        }
      }
    },
    'classList': {
      get: function get() {
        var list;
        list = this.className.split(/\s+/);

        if (list[list.length - 1] === '') {
          list.pop();
        }

        if (list[0] === '') {
          list.shift();
        }

        return list;
      }
    }
  });
  QuickElement.prototype.toTemplate = toTemplate;
  QuickElement.prototype.clone = clone;
  QuickElement.prototype.append = append;
  QuickElement.prototype.appendTo = appendTo;
  QuickElement.prototype.prepend = prepend;
  QuickElement.prototype.prependTo = prependTo;
  QuickElement.prototype.after = after;
  QuickElement.prototype.insertAfter = insertAfter;
  QuickElement.prototype.before = before;
  QuickElement.prototype.insertBefore = insertBefore;
  QuickElement.prototype.detach = detach;
  QuickElement.prototype.remove = remove;
  QuickElement.prototype.empty = empty;
  QuickElement.prototype.wrap = wrap;
  QuickElement.prototype.unwrap = unwrap;
  QuickElement.prototype.replace = replace;
  QuickElement.prototype.hasClass = hasClass;
  QuickElement.prototype.addClass = addClass;
  QuickElement.prototype.removeClass = removeClass;
  QuickElement.prototype.toggleClass = toggleClass;
  QuickElement.prototype.setRef = setRef;
  QuickElement.prototype._refreshParent = _refreshParent;
  return QuickElement.prototype._removeChild = _removeChild;
}

var updateOptions = function updateOptions(options) {
  if (IS$1.object(options)) {
    this.options = options;

    this._normalizeOptions();

    this._applyOptions(this.options);
  }

  return this;
};

var updateStateStyles = function updateStateStyles(styles) {
  var i, len, parsed, state, updatedStates;

  if (IS$1.objectPlain(styles)) {
    primaryBuilder$1.deep.concat(this, parsed = this._parseStyles(styles));

    if (parsed._styles) {
      updatedStates = Object.keys(parsed._styles);

      for (i = 0, len = updatedStates.length; i < len; i++) {
        state = updatedStates[i];

        if (this.state(state) || state === 'base') {
          this._applyRegisteredStyle(this._styles[state], this._getActiveStates(state), false);
        }
      }
    }
  }

  return this;
};

var updateStateTexts = function updateStateTexts(texts) {
  var parsed;

  if (IS$1.objectPlain(texts)) {
    primaryBuilder$1.deep.concat(this, parsed = this._parseTexts(texts));
  }

  return this;
};

var applyData = function applyData(data, passThrough) {
  var child, computers, defaults, i, j, key, keys, len, len1, ref;

  if (this.options.passDataToChildren && this._children.length && (passThrough != null ? passThrough : passThrough = true)) {
    ref = this._children;

    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      child.applyData(data);
    }
  }

  if (computers = this.options.computers) {
    defaults = this.options.defaults;
    keys = Object.keys(computers);

    for (j = 0, len1 = keys.length; j < len1; j++) {
      key = keys[j];

      if (this.options.invokeComputersOnce) {
        if (this._invokedComputers[key]) {
          continue;
        }

        this._invokedComputers[key] = 1;
      }

      if (data && data.hasOwnProperty(key)) {
        this._runComputer(key, data[key], data);
      } else if (defaults && defaults.hasOwnProperty(key)) {
        this._runComputer(key, defaults[key], data);
      }
    }
  }

  return this;
};

var _runComputer = function _runComputer(computer, arg, data) {
  return this.options.computers[computer].call(this, arg, data);
};

function application(QuickElement) {
  QuickElement.prototype.updateOptions = updateOptions;
  QuickElement.prototype.updateStateStyles = updateStateStyles;
  QuickElement.prototype.updateStateTexts = updateStateTexts;
  QuickElement.prototype.applyData = applyData;
  return QuickElement.prototype._runComputer = _runComputer;
}

var attr = function attr(target, newValue) {
  var i, key, keys;

  if (arguments.length === 1) {
    if (typeof target === 'string') {
      return this.el.getAttribute(target);
    }

    if (IS$1.object(target)) {
      keys = Object.keys(target);
      i = -1;

      while (key = keys[++i]) {
        this.attr(key, target[key]);
      }
    }
  } else if (newValue === null) {
    return this.el.removeAttribute(target);
  } else {
    this.el.setAttribute(target, newValue);
  }

  return this;
};

var prop = function prop(target, newValue) {
  var i, key, keys;

  if (arguments.length === 1) {
    if (typeof target === 'string') {
      return this.el[target];
    }

    if (IS$1.object(target)) {
      keys = Object.keys(target);
      i = -1;

      while (key = keys[++i]) {
        this.prop(key, target[key]);
      }
    }
  } else {
    this.el[target] = newValue;
  }

  return this;
};

function attributesAndProperties(QuickElement) {
  QuickElement.prototype.attr = attr;
  return QuickElement.prototype.prop = prop;
}

var QuickElement$1, svgNamespace;
svgNamespace = 'http://www.w3.org/2000/svg';

var QuickElement$2 = QuickElement$1 = function () {
  var QuickElement =
  /*#__PURE__*/
  function () {
    function QuickElement(type, options) {
      _classCallCheck$1(this, QuickElement);

      this.type = type;
      this.options = options;
      QuickElement.count++;

      if (this.type[0] === '*') {
        this.svg = true;
      }

      this.el = this.options.existing || (this.type === 'text' ? document.createTextNode(typeof this.options.text === 'string' ? this.options.text : '') : this.svg ? document.createElementNS(svgNamespace, this.type.slice(1)) : document.createElement(this.type));

      if (this.type === 'text') {
        this.append = this.prepend = this.attr = function () {};
      } // @_texts = {} # defined conditionally


      this._parent = null;
      this._styles = {};
      this._state = [];
      this._children = []; // @_providedStates = []				# defined conditionally
      // @_providedStatesShared = []		# defined conditionally
      // @_eventCallbacks = {__refs:{}}	# defined conditionally

      this._normalizeOptions();

      this._applyOptions();

      this._attachStateEvents();

      this._proxyParent();

      if (this.options.existing) {
        this._refreshParent();
      }

      this.el._quickElement = this;
    }

    _createClass$1(QuickElement, [{
      key: "toJSON",
      value: function toJSON() {
        var child, children, i, len, output;
        output = [this.type, primaryBuilder$1.clone.keys(element)(this.options)];
        children = this.children;

        for (i = 0, len = children.length; i < len; i++) {
          child = children[i];
          output.push(child.toJSON());
        }

        return output;
      }
    }]);

    return QuickElement;
  }();

  QuickElement.count = 0;
  return QuickElement;
}.call(undefined);
/* istanbul ignore next */


if (QuickElement$1.name == null) {
  QuickElement$1.name = 'QuickElement';
}

init$1(QuickElement$1);
aliases(QuickElement$1);
traversing(QuickElement$1);
events(QuickElement$1);
state$1(QuickElement$1);
style$1(QuickElement$1);
manipulation(QuickElement$1);
application(QuickElement$1);
attributesAndProperties(QuickElement$1);
var schema = {
  type: 'div',
  ref: void 0,
  options: {},
  children: []
};

var matchesSchema = function matchesSchema(object) {
  return typeof object.type !== 'undefined' || typeof object.ref !== 'undefined' || typeof object.options !== 'undefined' || typeof object.children !== 'undefined';
};

var PARSE_ERROR_PREFIX, parseTree;
PARSE_ERROR_PREFIX = 'Template Parse Error: expected';

var parseTree$1 = parseTree = function parseTree(tree, parseChildren) {
  var output;

  switch (false) {
    case !IS$1.array(tree):
      output = {};

      if (!IS$1.string(tree[0])) {
        throw new Error("".concat(PARSE_ERROR_PREFIX, " string for 'type', got '").concat(String(tree[0]), "'"));
      } else {
        output.type = tree[0];
      }

      if (tree.length > 1 && !IS$1.object(tree[1]) && tree[1] !== null) {
        throw new Error("".concat(PARSE_ERROR_PREFIX, " object for 'options', got '").concat(String(tree[1]), "'"));
      } else {
        output.options = tree[1] ? primaryBuilder$1.deep.clone(tree[1]) : schema.options;

        if (tree[1]) {
          output.ref = tree[1].id || tree[1].ref;
        }
      }

      output.children = tree.slice(2);

      if (parseChildren === false) {
        if (tree.length === 3 && IS$1.objectPlain(tree[2]) && !IS$1.template(tree[2])) {
          output.children = tree[2];
        }
      } else {
        output.children = output.children.map(quickdom.template);
      }

      return output;

    case !(IS$1.string(tree) || IS$1.domText(tree)):
      return {
        type: 'text',
        options: {
          text: tree.textContent || tree
        },
        children: schema.children
      };

    case !IS$1.domEl(tree):
      return {
        type: tree.nodeName.toLowerCase(),
        ref: tree.id,
        options: primaryBuilder$1.clone.keys(template)(tree),
        children: schema.children.map.call(tree.childNodes, quickdom.template)
      };

    case !IS$1.quickDomEl(tree):
      return {
        type: tree.type,
        ref: tree.ref,
        options: primaryBuilder$1.clone.deep.notKeys(['relatedInstance', 'related'])(tree.options),
        children: tree.children.map(quickdom.template)
      };

    case !IS$1.template(tree):
      return tree;

    default:
      throw new Error("".concat(PARSE_ERROR_PREFIX, " (array || string || domEl || quickDomEl || template), got ").concat(String(tree)));
  }
};

var NOT_DEEP_KEYS, NOT_KEYS, _extendByRef, extendTemplate;

NOT_DEEP_KEYS = ['relatedInstance', 'related', 'data'];
NOT_KEYS = ['children', '_childRefs'];

var extendTemplate$1 = extendTemplate = function extendTemplate(currentOpts, newOpts, globalOpts) {
  var currentChild, currentChildren, globalOptsTransform, index$$1, maxLength, needsTemplateWrap, newChild, newChildProcessed, newChildren, noChanges, output, ref, remainingNewChildren;

  if (globalOpts) {
    globalOptsTransform = {
      options: function options(opts) {
        return primaryBuilder$1(opts, globalOpts);
      }
    };
  }

  if (IS$1.array(newOpts)) {
    newOpts = parseTree$1(newOpts, false);
  } else if (newOpts && !matchesSchema(newOpts)) {
    newOpts = {
      options: newOpts
    };
  }

  output = primaryBuilder$1.deep.nullDeletes.notKeys(NOT_KEYS).notDeep(NOT_DEEP_KEYS).transform(globalOptsTransform).clone(currentOpts, newOpts);
  currentChildren = currentOpts.children;
  newChildren = (newOpts != null ? newOpts.children : void 0) || [];
  output.children = [];
  /* istanbul ignore next */

  if (IS$1.array(newChildren)) {
    maxLength = Math.max(currentChildren.length, newChildren.length);
    index$$1 = -1;

    while (++index$$1 !== maxLength) {
      needsTemplateWrap = noChanges = false;
      currentChild = currentChildren[index$$1];
      newChild = newChildren[index$$1];

      newChildProcessed = function () {
        switch (false) {
          case !IS$1.template(newChild):
            return newChild;

          case !IS$1.array(newChild):
            return needsTemplateWrap = parseTree$1(newChild);

          case !IS$1.string(newChild):
            return needsTemplateWrap = {
              type: 'text',
              options: {
                text: newChild
              }
            };

          case !(!newChild && !globalOpts):
            return noChanges = true;

          default:
            return needsTemplateWrap = newChild || true;
        }
      }();

      if (noChanges) {
        newChildProcessed = currentChild;
      } else if (needsTemplateWrap) {
        newChildProcessed = currentChild ? currentChild.extend(newChildProcessed, globalOpts) : new QuickTemplate$1(primaryBuilder$1.clone(schema, newChildProcessed));
      }

      output.children.push(newChildProcessed);
    }
  } else if (IS$1.object(newChildren)) {
    newChildren = primaryBuilder$1.allowNull.clone(newChildren);
    output.children = _extendByRef(newChildren, currentChildren, globalOpts);
    remainingNewChildren = newChildren;

    for (ref in remainingNewChildren) {
      newChild = remainingNewChildren[ref];
      newChildProcessed = IS$1.objectPlain(newChild) && !IS$1.template(newChild) ? newChild : parseTree$1(newChild);
      output.children.push(new QuickTemplate$1(newChildProcessed));
      delete remainingNewChildren[ref];
    }
  }

  return output;
};

_extendByRef = function extendByRef(newChildrenRefs, currentChildren, globalOpts) {
  var currentChild, i, len, newChild, newChildProcessed, output;

  if (!currentChildren.length) {
    return currentChildren;
  } else {
    output = [];

    for (i = 0, len = currentChildren.length; i < len; i++) {
      currentChild = currentChildren[i];
      newChild = newChildrenRefs[currentChild.ref];

      if (newChild) {
        newChildProcessed = currentChild.extend(newChild, globalOpts);
        delete newChildrenRefs[currentChild.ref];
      } else if (newChild === null) {
        delete newChildrenRefs[currentChild.ref];
        continue;
      } else {
        newChildProcessed = function () {
          switch (false) {
            case !globalOpts:
              return currentChild.extend(null, globalOpts);

            case !Object.keys(newChildrenRefs).length:
              return currentChild.extend();

            default:
              return currentChild;
          }
        }();
      }

      newChildProcessed.children = _extendByRef(newChildrenRefs, newChildProcessed.children);
      output.push(newChildProcessed);
    }

    return output;
  }
};

var QuickTemplate;

var QuickTemplate$1 = QuickTemplate =
/*#__PURE__*/
function () {
  function QuickTemplate(config, isTree) {
    _classCallCheck$1(this, QuickTemplate);

    if (IS$1.template(config)) {
      return config;
    }

    config = isTree ? parseTree$1(config) : config;
    primaryBuilder$1(this, config);
  }

  _createClass$1(QuickTemplate, [{
    key: "extend",
    value: function extend$$1(newValues, globalOpts) {
      return new QuickTemplate(extendTemplate$1(this, newValues, globalOpts));
    }
  }, {
    key: "spawn",
    value: function spawn(newValues, globalOpts, data) {
      var child, childData, children, element, i, len, options, type;

      if (newValues && newValues.data) {
        data = newValues.data;

        if (Object.keys(newValues).length === 1) {
          newValues = null;
        }
      }

      if (newValues || globalOpts) {
        var _extendTemplate = extendTemplate$1(this, newValues, globalOpts);

        options = _extendTemplate.options;
        children = _extendTemplate.children;
        type = _extendTemplate.type;
      } else {
        options = this.options;
        children = this.children;
        type = this.type;
        options = primaryBuilder$1.clone(options);
      }

      element = _quickdom.create([type, options]);

      if (children) {
        childData = options.passDataToChildren ? data || options.data : void 0;

        for (i = 0, len = children.length; i < len; i++) {
          child = children[i];
          element.append(child.spawn(null, null, childData));
        }
      }

      element._postCreation(data);

      return element;
    }
  }]);

  return QuickTemplate;
}();
/* istanbul ignore next */


if (QuickTemplate.name == null) {
  QuickTemplate.name = 'QuickTemplate';
}

Object.defineProperty(QuickTemplate.prototype, 'child', {
  get: function get() {
    return this._childRefs || _getChildRefs(this);
  }
});

_quickdom.template = function (tree) {
  return new QuickTemplate(tree, true);
};

_quickdom.isTemplate = function (target) {
  return IS$1.template(target);
};

var QuickBatch;

var QuickBatch$1 = QuickBatch =
/*#__PURE__*/
function () {
  function QuickBatch(elements, returnResults1) {
    _classCallCheck$1(this, QuickBatch);

    this.returnResults = returnResults1;
    this.elements = elements.map(function (el) {
      return _quickdom(el);
    });
  }

  _createClass$1(QuickBatch, [{
    key: "reverse",
    value: function reverse() {
      this.elements = this.elements.reverse();
      return this;
    }
  }, {
    key: "return",
    value: function _return(returnNext) {
      if (returnNext) {
        this.returnResults = true;
        return this;
      } else {
        return this.lastResults;
      }
    }
  }]);

  return QuickBatch;
}();
/* istanbul ignore next */


if (QuickBatch.name == null) {
  QuickBatch.name = 'QuickBatch';
}

Object.keys(QuickElement$2.prototype).concat('css', 'replaceWith', 'html', 'text').forEach(function (method) {
  return QuickBatch.prototype[method] = function (newValue) {
    var element, results;

    results = this.lastResults = function () {
      var i, len, ref, results1;
      ref = this.elements;
      results1 = [];

      for (i = 0, len = ref.length; i < len; i++) {
        element = ref[i];

        if (method === 'html' || method === 'text') {
          if (newValue) {
            results1.push(element[method] = newValue);
          } else {
            results1.push(element[method]);
          }
        } else {
          var _element;

          results1.push((_element = element)[method].apply(_element, arguments));
        }
      }

      return results1;
    }.apply(this, arguments);

    if (this.returnResults) {
      return results;
    } else {
      return this;
    }
  };
});

_quickdom.batch = function (elements, returnResults) {
  if (!IS$1.iterable(elements)) {
    throw new Error("Batch: expected an iterable, got ".concat(String(elements)));
  }

  return new QuickBatch(elements, returnResults);
};

var version$2 = "1.0.93";
var SHORTCUTS, i, len, shortcut;
SHORTCUTS = ['link:a', 'anchor:a', 'a', 'text', 'div', 'span', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'footer', 'section', 'button', 'br', 'ul', 'ol', 'li', 'fieldset', 'input', 'textarea', 'select', 'option', 'form', 'frame', 'hr', 'iframe', 'img', 'picture', 'main', 'nav', 'meta', 'object', 'pre', 'style', 'table', 'tbody', 'th', 'tr', 'td', 'tfoot', // 'template'
'video'];

for (i = 0, len = SHORTCUTS.length; i < len; i++) {
  shortcut = SHORTCUTS[i];

  (function (shortcut) {
    var prop, split, type;
    prop = type = shortcut;

    if (includes$1(shortcut, ':')) {
      split = shortcut.split(':');
      prop = split[0];
      type = split[1];
    }

    return _quickdom[prop] = function () {
      return _quickdom.apply(void 0, [type].concat(Array.prototype.slice.call(arguments)));
    };
  })(shortcut);
}

init(QuickElement$2, QuickWindow$2);
_quickdom.QuickElement = QuickElement$2;
_quickdom.QuickTemplate = QuickTemplate$1;
_quickdom.QuickWindow = QuickWindow$2;
_quickdom.QuickBatch = QuickBatch$1;
_quickdom.version = version$2;
_quickdom.CSS = index;
var quickdom = _quickdom; // export {quickdom as default, QuickElement, QuickTemplate, QuickWindow, QuickBatch}
var restartSandbox;
var restartSandbox$1 = restartSandbox = function () {
  var field, id, ref;

  if (window.sandbox) {
    ref = quickfield.instances;

    for (id in ref) {
      field = ref[id];
      delete quickfield.instances[id];
    }

    window.sandbox.remove();
  }

  return window.sandbox = quickdom.div({
    id: 'sandbox',
    style: {
      border: '1px solid',
      padding: '20px',
      boxSizing: 'border-box'
    }
  }).appendTo(document.body);
};function addTitle (title, margin = 20) {
  return quickdom.div({
    ref: 'testTitle',
    style: {
      marginTop: margin,
      marginBottom: margin,
      fontSize: 16,
      fontWeight: 600,
      fontFamily: 'system-ui, sans-serif'
    }
  }, title).appendTo(sandbox);
}function addDivider () {
  var margin;
  margin = arguments[0];

  if (isNaN(margin)) {
    margin = 20;
  }

  return quickdom.div({
    ref: 'testTitle',
    style: {
      marginTop: margin,
      marginBottom: margin
    }
  }).appendTo(sandbox);
}function getBorderSides (el) {
  return {
    top: el.style('borderTopWidth'),
    bottom: el.style('borderBottomWidth'),
    left: el.style('borderLeftWidth'),
    right: el.style('borderRightWidth')
  };
}var pFinally = (promise, onFinally) => {
  onFinally = onFinally || (() => {});

  return promise.then(val => new Promise(resolve => {
    resolve(onFinally());
  }).then(() => val), err => new Promise(resolve => {
    resolve(onFinally());
  }).then(() => {
    throw err;
  }));
};class TimeoutError extends Error {
  constructor(message) {
    super(message);
    this.name = 'TimeoutError';
  }

}

var pTimeout = (promise, ms, fallback) => new Promise((resolve, reject) => {
  if (typeof ms !== 'number' && ms >= 0) {
    throw new TypeError('Expected `ms` to be a positive number');
  }

  const timer = setTimeout(() => {
    if (typeof fallback === 'function') {
      resolve(fallback());
      return;
    }

    const message = typeof fallback === 'string' ? fallback : `Promise timed out after ${ms} milliseconds`;
    const err = fallback instanceof Error ? fallback : new TimeoutError(message);
    reject(err);
  }, ms);
  pFinally(promise.then(resolve, reject), () => {
    clearTimeout(timer);
  });
});

var TimeoutError_1 = TimeoutError;
pTimeout.TimeoutError = TimeoutError_1;var pEvent = (emitter, event, opts) => {
  let cancel;
  const ret = new Promise((resolve, reject) => {
    if (typeof opts === 'function') {
      opts = {
        filter: opts
      };
    }

    opts = Object.assign({
      rejectionEvents: ['error'],
      multiArgs: false
    }, opts);
    let addListener = emitter.on || emitter.addListener || emitter.addEventListener;
    let removeListener = emitter.off || emitter.removeListener || emitter.removeEventListener;

    if (!addListener || !removeListener) {
      throw new TypeError('Emitter is not compatible');
    }

    addListener = addListener.bind(emitter);
    removeListener = removeListener.bind(emitter);

    const resolveHandler = function (value) {
      if (opts.multiArgs) {
        value = [].slice.apply(arguments);
      }

      if (opts.filter && !opts.filter(value)) {
        return;
      }

      cancel();
      resolve(value);
    };

    const rejectHandler = function (reason) {
      cancel();

      if (opts.multiArgs) {
        reject([].slice.apply(arguments));
      } else {
        reject(reason);
      }
    };

    cancel = () => {
      removeListener(event, resolveHandler);

      for (const rejectionEvent of opts.rejectionEvents) {
        removeListener(rejectionEvent, rejectHandler);
      }
    };

    addListener(event, resolveHandler);

    for (const rejectionEvent of opts.rejectionEvents) {
      addListener(rejectionEvent, rejectHandler);
    }
  });
  ret.cancel = cancel;

  if (typeof opts.timeout === 'number') {
    return pTimeout(ret, opts.timeout);
  }

  return ret;
};var COLORS = {
  red: '#cc4820',
  green: '#72c322',
  orange: '#ff9c00',
  black: '#181818',
  grey_dark: '#5e5e5e',
  grey: '#909090',
  grey_semi_light: '#bebebe',
  grey_light: '#d3d3d3',
  grey_light2: '#dddddd',
  grey_light3: '#f2f5f7',
  grey_light4: '#e5e5e5'
};var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
}

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}/*!
 * assertion-error
 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
 * MIT Licensed
 */

/*!
 * Return a function that will copy properties from
 * one object to another excluding any originally
 * listed. Returned function will create a new `{}`.
 *
 * @param {String} excluded properties ...
 * @return {Function}
 */
function exclude() {
  var excludes = [].slice.call(arguments);

  function excludeProps(res, obj) {
    Object.keys(obj).forEach(function (key) {
      if (!~excludes.indexOf(key)) res[key] = obj[key];
    });
  }

  return function extendExclude() {
    var args = [].slice.call(arguments),
        i = 0,
        res = {};

    for (; i < args.length; i++) {
      excludeProps(res, args[i]);
    }

    return res;
  };
}
/*!
 * Primary Exports
 */

var assertionError = AssertionError;
/**
 * ### AssertionError
 *
 * An extension of the JavaScript `Error` constructor for
 * assertion and validation scenarios.
 *
 * @param {String} message
 * @param {Object} properties to include (optional)
 * @param {callee} start stack function (optional)
 */

function AssertionError(message, _props, ssf) {
  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON'),
      props = extend(_props || {}); // default values

  this.message = message || 'Unspecified AssertionError';
  this.showDiff = false; // copy from properties

  for (var key in props) {
    this[key] = props[key];
  } // capture stack trace


  ssf = ssf || arguments.callee;

  if (ssf && Error.captureStackTrace) {
    Error.captureStackTrace(this, ssf);
  } else {
    try {
      throw new Error();
    } catch (e) {
      this.stack = e.stack;
    }
  }
}
/*!
 * Inherit from Error.prototype
 */


AssertionError.prototype = Object.create(Error.prototype);
/*!
 * Statically set name
 */

AssertionError.prototype.name = 'AssertionError';
/*!
 * Ensure correct constructor
 */

AssertionError.prototype.constructor = AssertionError;
/**
 * Allow errors to be converted to JSON for static transfer.
 *
 * @param {Boolean} include stack (default: `true`)
 * @return {Object} object that can be `JSON.stringify`
 */

AssertionError.prototype.toJSON = function (stack) {
  var extend = exclude('constructor', 'toJSON', 'stack'),
      props = extend({
    name: this.name
  }, this); // include stack if exists and not turned off

  if (false !== stack && this.stack) {
    props.stack = this.stack;
  }

  return props;
};/* !
 * Chai - pathval utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * @see https://github.com/logicalparadox/filtr
 * MIT Licensed
 */

/**
 * ### .hasProperty(object, name)
 *
 * This allows checking whether an object has own
 * or inherited from prototype chain named property.
 *
 * Basically does the same thing as the `in`
 * operator but works properly with null/undefined values
 * and other primitives.
 *
 *     var obj = {
 *         arr: ['a', 'b', 'c']
 *       , str: 'Hello'
 *     }
 *
 * The following would be the results.
 *
 *     hasProperty(obj, 'str');  // true
 *     hasProperty(obj, 'constructor');  // true
 *     hasProperty(obj, 'bar');  // false
 *
 *     hasProperty(obj.str, 'length'); // true
 *     hasProperty(obj.str, 1);  // true
 *     hasProperty(obj.str, 5);  // false
 *
 *     hasProperty(obj.arr, 'length');  // true
 *     hasProperty(obj.arr, 2);  // true
 *     hasProperty(obj.arr, 3);  // false
 *
 * @param {Object} object
 * @param {String|Symbol} name
 * @returns {Boolean} whether it exists
 * @namespace Utils
 * @name hasProperty
 * @api public
 */

function hasProperty(obj, name) {
  if (typeof obj === 'undefined' || obj === null) {
    return false;
  } // The `in` operator does not work with primitives.


  return name in Object(obj);
}
/* !
 * ## parsePath(path)
 *
 * Helper function used to parse string object
 * paths. Use in conjunction with `internalGetPathValue`.
 *
 *      var parsed = parsePath('myobject.property.subprop');
 *
 * ### Paths:
 *
 * * Can be infinitely deep and nested.
 * * Arrays are also valid using the formal `myobject.document[3].property`.
 * * Literal dots and brackets (not delimiter) must be backslash-escaped.
 *
 * @param {String} path
 * @returns {Object} parsed
 * @api private
 */


function parsePath(path) {
  var str = path.replace(/([^\\])\[/g, '$1.[');
  var parts = str.match(/(\\\.|[^.]+?)+/g);
  return parts.map(function mapMatches(value) {
    var regexp = /^\[(\d+)\]$/;
    var mArr = regexp.exec(value);
    var parsed = null;

    if (mArr) {
      parsed = {
        i: parseFloat(mArr[1])
      };
    } else {
      parsed = {
        p: value.replace(/\\([.\[\]])/g, '$1')
      };
    }

    return parsed;
  });
}
/* !
 * ## internalGetPathValue(obj, parsed[, pathDepth])
 *
 * Helper companion function for `.parsePath` that returns
 * the value located at the parsed address.
 *
 *      var value = getPathValue(obj, parsed);
 *
 * @param {Object} object to search against
 * @param {Object} parsed definition from `parsePath`.
 * @param {Number} depth (nesting level) of the property we want to retrieve
 * @returns {Object|Undefined} value
 * @api private
 */


function internalGetPathValue(obj, parsed, pathDepth) {
  var temporaryValue = obj;
  var res = null;
  pathDepth = typeof pathDepth === 'undefined' ? parsed.length : pathDepth;

  for (var i = 0; i < pathDepth; i++) {
    var part = parsed[i];

    if (temporaryValue) {
      if (typeof part.p === 'undefined') {
        temporaryValue = temporaryValue[part.i];
      } else {
        temporaryValue = temporaryValue[part.p];
      }

      if (i === pathDepth - 1) {
        res = temporaryValue;
      }
    }
  }

  return res;
}
/* !
 * ## internalSetPathValue(obj, value, parsed)
 *
 * Companion function for `parsePath` that sets
 * the value located at a parsed address.
 *
 *  internalSetPathValue(obj, 'value', parsed);
 *
 * @param {Object} object to search and define on
 * @param {*} value to use upon set
 * @param {Object} parsed definition from `parsePath`
 * @api private
 */


function internalSetPathValue(obj, val, parsed) {
  var tempObj = obj;
  var pathDepth = parsed.length;
  var part = null; // Here we iterate through every part of the path

  for (var i = 0; i < pathDepth; i++) {
    var propName = null;
    var propVal = null;
    part = parsed[i]; // If it's the last part of the path, we set the 'propName' value with the property name

    if (i === pathDepth - 1) {
      propName = typeof part.p === 'undefined' ? part.i : part.p; // Now we set the property with the name held by 'propName' on object with the desired val

      tempObj[propName] = val;
    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {
      tempObj = tempObj[part.p];
    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {
      tempObj = tempObj[part.i];
    } else {
      // If the obj doesn't have the property we create one with that name to define it
      var next = parsed[i + 1]; // Here we set the name of the property which will be defined

      propName = typeof part.p === 'undefined' ? part.i : part.p; // Here we decide if this property will be an array or a new object

      propVal = typeof next.p === 'undefined' ? [] : {};
      tempObj[propName] = propVal;
      tempObj = tempObj[propName];
    }
  }
}
/**
 * ### .getPathInfo(object, path)
 *
 * This allows the retrieval of property info in an
 * object given a string path.
 *
 * The path info consists of an object with the
 * following properties:
 *
 * * parent - The parent object of the property referenced by `path`
 * * name - The name of the final property, a number if it was an array indexer
 * * value - The value of the property, if it exists, otherwise `undefined`
 * * exists - Whether the property exists or not
 *
 * @param {Object} object
 * @param {String} path
 * @returns {Object} info
 * @namespace Utils
 * @name getPathInfo
 * @api public
 */


function getPathInfo(obj, path) {
  var parsed = parsePath(path);
  var last = parsed[parsed.length - 1];
  var info = {
    parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,
    name: last.p || last.i,
    value: internalGetPathValue(obj, parsed)
  };
  info.exists = hasProperty(info.parent, info.name);
  return info;
}
/**
 * ### .getPathValue(object, path)
 *
 * This allows the retrieval of values in an
 * object given a string path.
 *
 *     var obj = {
 *         prop1: {
 *             arr: ['a', 'b', 'c']
 *           , str: 'Hello'
 *         }
 *       , prop2: {
 *             arr: [ { nested: 'Universe' } ]
 *           , str: 'Hello again!'
 *         }
 *     }
 *
 * The following would be the results.
 *
 *     getPathValue(obj, 'prop1.str'); // Hello
 *     getPathValue(obj, 'prop1.att[2]'); // b
 *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe
 *
 * @param {Object} object
 * @param {String} path
 * @returns {Object} value or `undefined`
 * @namespace Utils
 * @name getPathValue
 * @api public
 */


function getPathValue(obj, path) {
  var info = getPathInfo(obj, path);
  return info.value;
}
/**
 * ### .setPathValue(object, path, value)
 *
 * Define the value in an object at a given string path.
 *
 * ```js
 * var obj = {
 *     prop1: {
 *         arr: ['a', 'b', 'c']
 *       , str: 'Hello'
 *     }
 *   , prop2: {
 *         arr: [ { nested: 'Universe' } ]
 *       , str: 'Hello again!'
 *     }
 * };
 * ```
 *
 * The following would be acceptable.
 *
 * ```js
 * var properties = require('tea-properties');
 * properties.set(obj, 'prop1.str', 'Hello Universe!');
 * properties.set(obj, 'prop1.arr[2]', 'B');
 * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });
 * ```
 *
 * @param {Object} object
 * @param {String} path
 * @param {Mixed} value
 * @api private
 */


function setPathValue(obj, path, val) {
  var parsed = parsePath(path);
  internalSetPathValue(obj, val, parsed);
  return obj;
}

var pathval = {
  hasProperty: hasProperty,
  getPathInfo: getPathInfo,
  getPathValue: getPathValue,
  setPathValue: setPathValue
};/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .flag(object, key, [value])
 *
 * Get or set a flag value on an object. If a
 * value is provided it will be set, else it will
 * return the currently set value or `undefined` if
 * the value is not set.
 *
 *     utils.flag(this, 'foo', 'bar'); // setter
 *     utils.flag(this, 'foo'); // getter, returns `bar`
 *
 * @param {Object} object constructed Assertion
 * @param {String} key
 * @param {Mixed} value (optional)
 * @namespace Utils
 * @name flag
 * @api private
 */
var flag = function flag(obj, key, value) {
  var flags = obj.__flags || (obj.__flags = Object.create(null));

  if (arguments.length === 3) {
    flags[key] = value;
  } else {
    return flags[key];
  }
};/*!
 * Chai - test utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

/**
 * ### .test(object, expression)
 *
 * Test and object for expression.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name test
 */

var test$1 = function test(obj, args) {
  var negate = flag(obj, 'negate'),
      expr = args[0];
  return negate ? !expr : expr;
};var typeDetect = createCommonjsModule(function (module) {
  /* !
   * type-detect
   * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
   * MIT Licensed
   */

  var promiseExists = typeof Promise === 'function';
  var globalObject = typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : self; // eslint-disable-line

  var isDom = 'location' in globalObject && 'document' in globalObject;
  var symbolExists = typeof Symbol !== 'undefined';
  var mapExists = typeof Map !== 'undefined';
  var setExists = typeof Set !== 'undefined';
  var weakMapExists = typeof WeakMap !== 'undefined';
  var weakSetExists = typeof WeakSet !== 'undefined';
  var dataViewExists = typeof DataView !== 'undefined';
  var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';
  var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';
  var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';
  var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';
  var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());
  var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());
  var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
  var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
  var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';
  var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());
  var toStringLeftSliceLength = 8;
  var toStringRightSliceLength = -1;
  /**
   * ### typeOf (obj)
   *
   * Uses `Object.prototype.toString` to determine the type of an object,
   * normalising behaviour across engine versions & well optimised.
   *
   * @param {Mixed} object
   * @return {String} object type
   * @api public
   */

  module.exports = function typeDetect(obj) {
    /* ! Speed optimisation
     * Pre:
     *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)
     *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)
     *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)
     *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)
     *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)
     * Post:
     *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)
     *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)
     *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)
     *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)
     *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)
     */
    var typeofObj = typeof obj;

    if (typeofObj !== 'object') {
      return typeofObj;
    }
    /* ! Speed optimisation
     * Pre:
     *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)
     * Post:
     *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)
     */


    if (obj === null) {
      return 'null';
    }
    /* ! Spec Conformance
     * Test: `Object.prototype.toString.call(window)``
     *  - Node === "[object global]"
     *  - Chrome === "[object global]"
     *  - Firefox === "[object Window]"
     *  - PhantomJS === "[object Window]"
     *  - Safari === "[object Window]"
     *  - IE 11 === "[object Window]"
     *  - IE Edge === "[object Window]"
     * Test: `Object.prototype.toString.call(this)``
     *  - Chrome Worker === "[object global]"
     *  - Firefox Worker === "[object DedicatedWorkerGlobalScope]"
     *  - Safari Worker === "[object DedicatedWorkerGlobalScope]"
     *  - IE 11 Worker === "[object WorkerGlobalScope]"
     *  - IE Edge Worker === "[object WorkerGlobalScope]"
     */


    if (obj === globalObject) {
      return 'global';
    }
    /* ! Speed optimisation
     * Pre:
     *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)
     * Post:
     *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)
     */


    if (Array.isArray(obj) && (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))) {
      return 'Array';
    }

    if (isDom) {
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/browsers.html#location)
       * WhatWG HTML$7.7.3 - The `Location` interface
       * Test: `Object.prototype.toString.call(window.location)``
       *  - IE <=11 === "[object Object]"
       *  - IE Edge <=13 === "[object Object]"
       */
      if (obj === globalObject.location) {
        return 'Location';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#document)
       * WhatWG HTML$3.1.1 - The `Document` object
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       *       WhatWG HTML states:
       *         > For historical reasons, Window objects must also have a
       *         > writable, configurable, non-enumerable property named
       *         > HTMLDocument whose value is the Document interface object.
       * Test: `Object.prototype.toString.call(document)``
       *  - Chrome === "[object HTMLDocument]"
       *  - Firefox === "[object HTMLDocument]"
       *  - Safari === "[object HTMLDocument]"
       *  - IE <=10 === "[object Document]"
       *  - IE 11 === "[object HTMLDocument]"
       *  - IE Edge <=13 === "[object HTMLDocument]"
       */


      if (obj === globalObject.document) {
        return 'Document';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray
       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``
       *  - IE <=10 === "[object MSMimeTypesCollection]"
       */


      if (obj === (globalObject.navigator || {}).mimeTypes) {
        return 'MimeTypeArray';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray
       * Test: `Object.prototype.toString.call(navigator.plugins)``
       *  - IE <=10 === "[object MSPluginsCollection]"
       */


      if (obj === (globalObject.navigator || {}).plugins) {
        return 'PluginArray';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
       * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`
       * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``
       *  - IE <=10 === "[object HTMLBlockElement]"
       */


      if (obj instanceof HTMLElement && obj.tagName === 'BLOCKQUOTE') {
        return 'HTMLQuoteElement';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltabledatacellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('td'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */


      if (obj instanceof HTMLElement && obj.tagName === 'TD') {
        return 'HTMLTableDataCellElement';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltableheadercellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('th'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */


      if (obj instanceof HTMLElement && obj.tagName === 'TH') {
        return 'HTMLTableHeaderCellElement';
      }
    }
    /* ! Speed optimisation
    * Pre:
    *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)
    *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)
    *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)
    *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)
    *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)
    *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)
    *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)
    *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)
    *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)
    * Post:
    *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)
    *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)
    *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)
    *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)
    *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)
    *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)
    *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)
    *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)
    *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)
    */


    var stringTag = symbolToStringTagExists && obj[Symbol.toStringTag];

    if (typeof stringTag === 'string') {
      return stringTag;
    }

    var objPrototype = Object.getPrototypeOf(obj);
    /* ! Speed optimisation
    * Pre:
    *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)
    *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)
    * Post:
    *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)
    *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)
    */

    if (objPrototype === RegExp.prototype) {
      return 'RegExp';
    }
    /* ! Speed optimisation
    * Pre:
    *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)
    * Post:
    *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)
    */


    if (objPrototype === Date.prototype) {
      return 'Date';
    }
    /* ! Spec Conformance
     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)
     * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be "Promise":
     * Test: `Object.prototype.toString.call(Promise.resolve())``
     *  - Chrome <=47 === "[object Object]"
     *  - Edge <=20 === "[object Object]"
     *  - Firefox 29-Latest === "[object Promise]"
     *  - Safari 7.1-Latest === "[object Promise]"
     */


    if (promiseExists && objPrototype === Promise.prototype) {
      return 'Promise';
    }
    /* ! Speed optimisation
    * Pre:
    *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)
    * Post:
    *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)
    */


    if (setExists && objPrototype === Set.prototype) {
      return 'Set';
    }
    /* ! Speed optimisation
    * Pre:
    *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)
    * Post:
    *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)
    */


    if (mapExists && objPrototype === Map.prototype) {
      return 'Map';
    }
    /* ! Speed optimisation
    * Pre:
    *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)
    * Post:
    *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)
    */


    if (weakSetExists && objPrototype === WeakSet.prototype) {
      return 'WeakSet';
    }
    /* ! Speed optimisation
    * Pre:
    *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)
    * Post:
    *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)
    */


    if (weakMapExists && objPrototype === WeakMap.prototype) {
      return 'WeakMap';
    }
    /* ! Spec Conformance
     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)
     * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be "DataView":
     * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``
     *  - Edge <=13 === "[object Object]"
     */


    if (dataViewExists && objPrototype === DataView.prototype) {
      return 'DataView';
    }
    /* ! Spec Conformance
     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)
     * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be "Map Iterator":
     * Test: `Object.prototype.toString.call(new Map().entries())``
     *  - Edge <=13 === "[object Object]"
     */


    if (mapExists && objPrototype === mapIteratorPrototype) {
      return 'Map Iterator';
    }
    /* ! Spec Conformance
     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)
     * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be "Set Iterator":
     * Test: `Object.prototype.toString.call(new Set().entries())``
     *  - Edge <=13 === "[object Object]"
     */


    if (setExists && objPrototype === setIteratorPrototype) {
      return 'Set Iterator';
    }
    /* ! Spec Conformance
     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)
     * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be "Array Iterator":
     * Test: `Object.prototype.toString.call([][Symbol.iterator]())``
     *  - Edge <=13 === "[object Object]"
     */


    if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {
      return 'Array Iterator';
    }
    /* ! Spec Conformance
     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)
     * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be "String Iterator":
     * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``
     *  - Edge <=13 === "[object Object]"
     */


    if (stringIteratorExists && objPrototype === stringIteratorPrototype) {
      return 'String Iterator';
    }
    /* ! Speed optimisation
    * Pre:
    *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)
    * Post:
    *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)
    */


    if (objPrototype === null) {
      return 'Object';
    }

    return Object.prototype.toString.call(obj).slice(toStringLeftSliceLength, toStringRightSliceLength);
  };

  module.exports.typeDetect = module.exports;
});
var typeDetect_1 = typeDetect.typeDetect;/*!
 * Chai - expectTypes utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .expectTypes(obj, types)
 *
 * Ensures that the object being tested against is of a valid type.
 *
 *     utils.expectTypes(this, ['array', 'object', 'string']);
 *
 * @param {Mixed} obj constructed Assertion
 * @param {Array} type A list of allowed types for this assertion
 * @namespace Utils
 * @name expectTypes
 * @api public
 */

var expectTypes = function expectTypes(obj, types) {
  var flagMsg = flag(obj, 'message');
  var ssfi = flag(obj, 'ssfi');
  flagMsg = flagMsg ? flagMsg + ': ' : '';
  obj = flag(obj, 'object');
  types = types.map(function (t) {
    return t.toLowerCase();
  });
  types.sort(); // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'

  var str = types.map(function (t, index) {
    var art = ~['a', 'e', 'i', 'o', 'u'].indexOf(t.charAt(0)) ? 'an' : 'a';
    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';
    return or + art + ' ' + t;
  }).join(', ');
  var objType = typeDetect(obj).toLowerCase();

  if (!types.some(function (expected) {
    return objType === expected;
  })) {
    throw new assertionError(flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given', undefined, ssfi);
  }
};/*!
 * Chai - getActual utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getActual(object, [actual])
 *
 * Returns the `actual` value for an Assertion.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name getActual
 */
var getActual = function getActual(obj, args) {
  return args.length > 4 ? args[4] : obj._obj;
};/* !
 * Chai - getFuncName utility
 * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getFuncName(constructorFn)
 *
 * Returns the name of a function.
 * When a non-function instance is passed, returns `null`.
 * This also includes a polyfill function if `aFunc.name` is not defined.
 *
 * @name getFuncName
 * @param {Function} funct
 * @namespace Utils
 * @api public
 */

var toString = Function.prototype.toString;
var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/;

function getFuncName(aFunc) {
  if (typeof aFunc !== 'function') {
    return null;
  }

  var name = '';

  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {
    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined
    var match = toString.call(aFunc).match(functionNameMatch);

    if (match) {
      name = match[1];
    }
  } else {
    // If we've got a `name` property we just use it
    name = aFunc.name;
  }

  return name;
}

var getFuncName_1 = getFuncName;/*!
 * Chai - getProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getProperties(object)
 *
 * This allows the retrieval of property names of an object, enumerable or not,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getProperties
 * @api public
 */
var getProperties = function getProperties(object) {
  var result = Object.getOwnPropertyNames(object);

  function addProperty(property) {
    if (result.indexOf(property) === -1) {
      result.push(property);
    }
  }

  var proto = Object.getPrototypeOf(object);

  while (proto !== null) {
    Object.getOwnPropertyNames(proto).forEach(addProperty);
    proto = Object.getPrototypeOf(proto);
  }

  return result;
};/*!
 * Chai - getEnumerableProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getEnumerableProperties(object)
 *
 * This allows the retrieval of enumerable property names of an object,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getEnumerableProperties
 * @api public
 */
var getEnumerableProperties = function getEnumerableProperties(object) {
  var result = [];

  for (var name in object) {
    result.push(name);
  }

  return result;
};var config = {
  /**
   * ### config.includeStack
   *
   * User configurable property, influences whether stack trace
   * is included in Assertion error message. Default of false
   * suppresses stack trace in the error message.
   *
   *     chai.config.includeStack = true;  // enable stack on error
   *
   * @param {Boolean}
   * @api public
   */
  includeStack: false,

  /**
   * ### config.showDiff
   *
   * User configurable property, influences whether or not
   * the `showDiff` flag should be included in the thrown
   * AssertionErrors. `false` will always be `false`; `true`
   * will be true when the assertion has requested a diff
   * be shown.
   *
   * @param {Boolean}
   * @api public
   */
  showDiff: true,

  /**
   * ### config.truncateThreshold
   *
   * User configurable property, sets length threshold for actual and
   * expected values in assertion errors. If this threshold is exceeded, for
   * example for large data structures, the value is replaced with something
   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.
   *
   * Set it to zero if you want to disable truncating altogether.
   *
   * This is especially userful when doing assertions on arrays: having this
   * set to a reasonable large value makes the failure messages readily
   * inspectable.
   *
   *     chai.config.truncateThreshold = 0;  // disable truncating
   *
   * @param {Number}
   * @api public
   */
  truncateThreshold: 40,

  /**
   * ### config.useProxy
   *
   * User configurable property, defines if chai will use a Proxy to throw
   * an error when a non-existent property is read, which protects users
   * from typos when using property-based assertions.
   *
   * Set it to false if you want to disable this feature.
   *
   *     chai.config.useProxy = false;  // disable use of Proxy
   *
   * This feature is automatically disabled regardless of this config value
   * in environments that don't support proxies.
   *
   * @param {Boolean}
   * @api public
   */
  useProxy: true,

  /**
   * ### config.proxyExcludedKeys
   *
   * User configurable property, defines which properties should be ignored
   * instead of throwing an error if they do not exist on the assertion.
   * This is only applied if the environment Chai is running in supports proxies and
   * if the `useProxy` configuration setting is enabled.
   * By default, `then` and `inspect` will not throw an error if they do not exist on the
   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when
   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.
   *
   *     // By default these keys will not throw an error if they do not exist on the assertion object
   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];
   *
   * @param {Array}
   * @api public
   */
  proxyExcludedKeys: ['then', 'inspect', 'toJSON']
};var inspect_1 = createCommonjsModule(function (module, exports) {
  // This is (almost) directly from Node.js utils
  // https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js
  module.exports = inspect;
  /**
   * ### .inspect(obj, [showHidden], [depth], [colors])
   *
   * Echoes the value of a value. Tries to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Boolean} showHidden Flag that shows hidden (not enumerable)
   *    properties of objects. Default is false.
   * @param {Number} depth Depth in which to descend in object. Default is 2.
   * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
   *    output. Default is false (no coloring).
   * @namespace Utils
   * @name inspect
   */

  function inspect(obj, showHidden, depth, colors) {
    var ctx = {
      showHidden: showHidden,
      seen: [],
      stylize: function (str) {
        return str;
      }
    };
    return formatValue(ctx, obj, typeof depth === 'undefined' ? 2 : depth);
  } // Returns true if object is a DOM element.


  var isDOMElement = function (object) {
    if (typeof HTMLElement === 'object') {
      return object instanceof HTMLElement;
    } else {
      return object && typeof object === 'object' && 'nodeType' in object && object.nodeType === 1 && typeof object.nodeName === 'string';
    }
  };

  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (value && typeof value.inspect === 'function' && // Filter out the util module, it's inspect function is special
    value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);

      if (typeof ret !== 'string') {
        ret = formatValue(ctx, ret, recurseTimes);
      }

      return ret;
    } // Primitive types cannot have properties


    var primitive = formatPrimitive(ctx, value);

    if (primitive) {
      return primitive;
    } // If this is a DOM element, try to get the outer HTML.


    if (isDOMElement(value)) {
      if ('outerHTML' in value) {
        return value.outerHTML; // This value does not have an outerHTML attribute,
        //   it could still be an XML element
      } else {
        // Attempt to serialize it
        try {
          if (document.xmlVersion) {
            var xmlSerializer = new XMLSerializer();
            return xmlSerializer.serializeToString(value);
          } else {
            // Firefox 11- do not support outerHTML
            //   It does, however, support innerHTML
            //   Use the following to render the element
            var ns = "http://www.w3.org/1999/xhtml";
            var container = document.createElementNS(ns, '_');
            container.appendChild(value.cloneNode(false));
            var html = container.innerHTML.replace('><', '>' + value.innerHTML + '<');
            container.innerHTML = '';
            return html;
          }
        } catch (err) {// This could be a non-native DOM implementation,
          //   continue with the normal flow:
          //   printing the element as if it is an object.
        }
      }
    } // Look up the keys of the object.


    var visibleKeys = getEnumerableProperties(value);
    var keys = ctx.showHidden ? getProperties(value) : visibleKeys;
    var name, nameSuffix; // Some type of object without properties can be shortcutted.
    // In IE, errors have a single `stack` property, or if they are vanilla `Error`,
    // a `stack` plus `description` property; ignore those for consistency.

    if (keys.length === 0 || isError(value) && (keys.length === 1 && keys[0] === 'stack' || keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')) {
      if (typeof value === 'function') {
        name = getFuncName_1(value);
        nameSuffix = name ? ': ' + name : '';
        return ctx.stylize('[Function' + nameSuffix + ']', 'special');
      }

      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }

      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
      }

      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '',
        array = false,
        typedArray = false,
        braces = ['{', '}'];

    if (isTypedArray(value)) {
      typedArray = true;
      braces = ['[', ']'];
    } // Make Array say that they are Array


    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    } // Make functions say that they are functions


    if (typeof value === 'function') {
      name = getFuncName_1(value);
      nameSuffix = name ? ': ' + name : '';
      base = ' [Function' + nameSuffix + ']';
    } // Make RegExps say that they are RegExps


    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    } // Make dates with properties first say the date


    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    } // Make error with message first say the error


    if (isError(value)) {
      return formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);
    var output;

    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else if (typedArray) {
      return formatTypedArray(value);
    } else {
      output = keys.map(function (key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();
    return reduceToSingleString(output, base, braces);
  }

  function formatPrimitive(ctx, value) {
    switch (typeof value) {
      case 'undefined':
        return ctx.stylize('undefined', 'undefined');

      case 'string':
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');

      case 'number':
        if (value === 0 && 1 / value === -Infinity) {
          return ctx.stylize('-0', 'number');
        }

        return ctx.stylize('' + value, 'number');

      case 'boolean':
        return ctx.stylize('' + value, 'boolean');

      case 'symbol':
        return ctx.stylize(value.toString(), 'symbol');
    } // For some reason typeof null is "object", so special case here.


    if (value === null) {
      return ctx.stylize('null', 'null');
    }
  }

  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }

  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];

    for (var i = 0, l = value.length; i < l; ++i) {
      if (Object.prototype.hasOwnProperty.call(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
      } else {
        output.push('');
      }
    }

    keys.forEach(function (key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
      }
    });
    return output;
  }

  function formatTypedArray(value) {
    var str = '[ ';

    for (var i = 0; i < value.length; ++i) {
      if (str.length >= config.truncateThreshold - 7) {
        str += '...';
        break;
      }

      str += value[i] + ', ';
    }

    str += ' ]'; // Removing trailing `, ` if the array was not truncated

    if (str.indexOf(',  ]') !== -1) {
      str = str.replace(',  ]', ' ]');
    }

    return str;
  }

  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name;
    var propDescriptor = Object.getOwnPropertyDescriptor(value, key);
    var str;

    if (propDescriptor) {
      if (propDescriptor.get) {
        if (propDescriptor.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (propDescriptor.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
    }

    if (visibleKeys.indexOf(key) < 0) {
      name = '[' + key + ']';
    }

    if (!str) {
      if (ctx.seen.indexOf(value[key]) < 0) {
        if (recurseTimes === null) {
          str = formatValue(ctx, value[key], null);
        } else {
          str = formatValue(ctx, value[key], recurseTimes - 1);
        }

        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function (line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function (line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }

    if (typeof name === 'undefined') {
      if (array && key.match(/^\d+$/)) {
        return str;
      }

      name = JSON.stringify('' + key);

      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }

  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function (prev, cur) {
      if (cur.indexOf('\n') >= 0) ;
      return prev + cur.length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }

  function isTypedArray(ar) {
    // Unfortunately there's no way to check if an object is a TypedArray
    // We have to check if it's one of these types
    return typeof ar === 'object' && /\w+Array]$/.test(objectToString(ar));
  }

  function isArray(ar) {
    return Array.isArray(ar) || typeof ar === 'object' && objectToString(ar) === '[object Array]';
  }

  function isRegExp(re) {
    return typeof re === 'object' && objectToString(re) === '[object RegExp]';
  }

  function isDate(d) {
    return typeof d === 'object' && objectToString(d) === '[object Date]';
  }

  function isError(e) {
    return typeof e === 'object' && objectToString(e) === '[object Error]';
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }
});/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

/**
 * ### .objDisplay(object)
 *
 * Determines if an object or an array matches
 * criteria to be inspected in-line for error
 * messages or should be truncated.
 *
 * @param {Mixed} javascript object to inspect
 * @name objDisplay
 * @namespace Utils
 * @api public
 */

var objDisplay = function objDisplay(obj) {
  var str = inspect_1(obj),
      type = Object.prototype.toString.call(obj);

  if (config.truncateThreshold && str.length >= config.truncateThreshold) {
    if (type === '[object Function]') {
      return !obj.name || obj.name === '' ? '[Function]' : '[Function: ' + obj.name + ']';
    } else if (type === '[object Array]') {
      return '[ Array(' + obj.length + ') ]';
    } else if (type === '[object Object]') {
      var keys = Object.keys(obj),
          kstr = keys.length > 2 ? keys.splice(0, 2).join(', ') + ', ...' : keys.join(', ');
      return '{ Object (' + kstr + ') }';
    } else {
      return str;
    }
  } else {
    return str;
  }
};/*!
 * Chai - message composition utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

/**
 * ### .getMessage(object, message, negateMessage)
 *
 * Construct the error message based on flags
 * and template tags. Template tags will return
 * a stringified inspection of the object referenced.
 *
 * Message template tags:
 * - `#{this}` current asserted object
 * - `#{act}` actual value
 * - `#{exp}` expected value
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name getMessage
 * @api public
 */

var getMessage = function getMessage(obj, args) {
  var negate = flag(obj, 'negate'),
      val = flag(obj, 'object'),
      expected = args[3],
      actual = getActual(obj, args),
      msg = negate ? args[2] : args[1],
      flagMsg = flag(obj, 'message');
  if (typeof msg === "function") msg = msg();
  msg = msg || '';
  msg = msg.replace(/#\{this\}/g, function () {
    return objDisplay(val);
  }).replace(/#\{act\}/g, function () {
    return objDisplay(actual);
  }).replace(/#\{exp\}/g, function () {
    return objDisplay(expected);
  });
  return flagMsg ? flagMsg + ': ' + msg : msg;
};/*!
 * Chai - transferFlags utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .transferFlags(assertion, object, includeAll = true)
 *
 * Transfer all the flags for `assertion` to `object`. If
 * `includeAll` is set to `false`, then the base Chai
 * assertion flags (namely `object`, `ssfi`, `lockSsfi`,
 * and `message`) will not be transferred.
 *
 *
 *     var newAssertion = new Assertion();
 *     utils.transferFlags(assertion, newAssertion);
 *
 *     var anotherAsseriton = new Assertion(myObj);
 *     utils.transferFlags(assertion, anotherAssertion, false);
 *
 * @param {Assertion} assertion the assertion to transfer the flags from
 * @param {Object} object the object to transfer the flags to; usually a new assertion
 * @param {Boolean} includeAll
 * @namespace Utils
 * @name transferFlags
 * @api private
 */
var transferFlags = function transferFlags(assertion, object, includeAll) {
  var flags = assertion.__flags || (assertion.__flags = Object.create(null));

  if (!object.__flags) {
    object.__flags = Object.create(null);
  }

  includeAll = arguments.length === 3 ? includeAll : true;

  for (var flag in flags) {
    if (includeAll || flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message') {
      object.__flags[flag] = flags[flag];
    }
  }
};/* globals Symbol: false, Uint8Array: false, WeakMap: false */

/*!
 * deep-eql
 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */


function FakeMap() {
  this._key = 'chai/deep-eql__' + Math.random() + Date.now();
}

FakeMap.prototype = {
  get: function getMap(key) {
    return key[this._key];
  },
  set: function setMap(key, value) {
    if (Object.isExtensible(key)) {
      Object.defineProperty(key, this._key, {
        value: value,
        configurable: true
      });
    }
  }
};
var MemoizeMap = typeof WeakMap === 'function' ? WeakMap : FakeMap;
/*!
 * Check to see if the MemoizeMap has recorded a result of the two operands
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @returns {Boolean|null} result
*/

function memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {
  // Technically, WeakMap keys can *only* be objects, not primitives.
  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    return null;
  }

  var leftHandMap = memoizeMap.get(leftHandOperand);

  if (leftHandMap) {
    var result = leftHandMap.get(rightHandOperand);

    if (typeof result === 'boolean') {
      return result;
    }
  }

  return null;
}
/*!
 * Set the result of the equality into the MemoizeMap
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @param {Boolean} result
*/


function memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {
  // Technically, WeakMap keys can *only* be objects, not primitives.
  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    return;
  }

  var leftHandMap = memoizeMap.get(leftHandOperand);

  if (leftHandMap) {
    leftHandMap.set(rightHandOperand, result);
  } else {
    leftHandMap = new MemoizeMap();
    leftHandMap.set(rightHandOperand, result);
    memoizeMap.set(leftHandOperand, leftHandMap);
  }
}
/*!
 * Primary Export
 */


var deepEql = deepEqual;
var MemoizeMap_1 = MemoizeMap;
/**
 * Assert deeply nested sameValue equality between two objects of any type.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
 */

function deepEqual(leftHandOperand, rightHandOperand, options) {
  // If we have a comparator, we can't assume anything; so bail to its check first.
  if (options && options.comparator) {
    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
  }

  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);

  if (simpleResult !== null) {
    return simpleResult;
  } // Deeper comparisons are pushed through to a larger function


  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
}
/**
 * Many comparisons can be canceled out early via simple equality or primitive checks.
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @return {Boolean|null} equal match
 */


function simpleEqual(leftHandOperand, rightHandOperand) {
  // Equal references (except for Numbers) can be returned early
  if (leftHandOperand === rightHandOperand) {
    // Handle +-0 cases
    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;
  } // handle NaN cases


  if (leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare
  rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare
  ) {
      return true;
    } // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,
  // strings, and undefined, can be compared by reference.


  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {
    // Easy out b/c it would have passed the first equality check
    return false;
  }

  return null;
}
/*!
 * The main logic of the `deepEqual` function.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
*/


function extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {
  options = options || {};
  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();
  var comparator = options && options.comparator; // Check if a memoized result exists.

  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);

  if (memoizeResultLeft !== null) {
    return memoizeResultLeft;
  }

  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);

  if (memoizeResultRight !== null) {
    return memoizeResultRight;
  } // If a comparator is present, use it.


  if (comparator) {
    var comparatorResult = comparator(leftHandOperand, rightHandOperand); // Comparators may return null, in which case we want to go back to default behavior.

    if (comparatorResult === false || comparatorResult === true) {
      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);
      return comparatorResult;
    } // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide
    // what to do, we need to make sure to return the basic tests first before we move on.


    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);

    if (simpleResult !== null) {
      // Don't memoize this, it takes longer to set/retrieve than to just compare.
      return simpleResult;
    }
  }

  var leftHandType = typeDetect(leftHandOperand);

  if (leftHandType !== typeDetect(rightHandOperand)) {
    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);
    return false;
  } // Temporarily set the operands in the memoize object to prevent blowing the stack


  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);
  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);
  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);
  return result;
}

function extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {
  switch (leftHandType) {
    case 'String':
    case 'Number':
    case 'Boolean':
    case 'Date':
      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values
      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());

    case 'Promise':
    case 'Symbol':
    case 'function':
    case 'WeakMap':
    case 'WeakSet':
    case 'Error':
      return leftHandOperand === rightHandOperand;

    case 'Arguments':
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
    case 'Array':
      return iterableEqual(leftHandOperand, rightHandOperand, options);

    case 'RegExp':
      return regexpEqual(leftHandOperand, rightHandOperand);

    case 'Generator':
      return generatorEqual(leftHandOperand, rightHandOperand, options);

    case 'DataView':
      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);

    case 'ArrayBuffer':
      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);

    case 'Set':
      return entriesEqual(leftHandOperand, rightHandOperand, options);

    case 'Map':
      return entriesEqual(leftHandOperand, rightHandOperand, options);

    default:
      return objectEqual(leftHandOperand, rightHandOperand, options);
  }
}
/*!
 * Compare two Regular Expressions for equality.
 *
 * @param {RegExp} leftHandOperand
 * @param {RegExp} rightHandOperand
 * @return {Boolean} result
 */


function regexpEqual(leftHandOperand, rightHandOperand) {
  return leftHandOperand.toString() === rightHandOperand.toString();
}
/*!
 * Compare two Sets/Maps for equality. Faster than other equality functions.
 *
 * @param {Set} leftHandOperand
 * @param {Set} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function entriesEqual(leftHandOperand, rightHandOperand, options) {
  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach
  if (leftHandOperand.size !== rightHandOperand.size) {
    return false;
  }

  if (leftHandOperand.size === 0) {
    return true;
  }

  var leftHandItems = [];
  var rightHandItems = [];
  leftHandOperand.forEach(function gatherEntries(key, value) {
    leftHandItems.push([key, value]);
  });
  rightHandOperand.forEach(function gatherEntries(key, value) {
    rightHandItems.push([key, value]);
  });
  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);
}
/*!
 * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function iterableEqual(leftHandOperand, rightHandOperand, options) {
  var length = leftHandOperand.length;

  if (length !== rightHandOperand.length) {
    return false;
  }

  if (length === 0) {
    return true;
  }

  var index = -1;

  while (++index < length) {
    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {
      return false;
    }
  }

  return true;
}
/*!
 * Simple equality for generator objects such as those returned by generator functions.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function generatorEqual(leftHandOperand, rightHandOperand, options) {
  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);
}
/*!
 * Determine if the given object has an @@iterator function.
 *
 * @param {Object} target
 * @return {Boolean} `true` if the object has an @@iterator function.
 */


function hasIteratorFunction(target) {
  return typeof Symbol !== 'undefined' && typeof target === 'object' && typeof Symbol.iterator !== 'undefined' && typeof target[Symbol.iterator] === 'function';
}
/*!
 * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.
 * This will consume the iterator - which could have side effects depending on the @@iterator implementation.
 *
 * @param {Object} target
 * @returns {Array} an array of entries from the @@iterator function
 */


function getIteratorEntries(target) {
  if (hasIteratorFunction(target)) {
    try {
      return getGeneratorEntries(target[Symbol.iterator]());
    } catch (iteratorError) {
      return [];
    }
  }

  return [];
}
/*!
 * Gets all entries from a Generator. This will consume the generator - which could have side effects.
 *
 * @param {Generator} target
 * @returns {Array} an array of entries from the Generator.
 */


function getGeneratorEntries(generator) {
  var generatorResult = generator.next();
  var accumulator = [generatorResult.value];

  while (generatorResult.done === false) {
    generatorResult = generator.next();
    accumulator.push(generatorResult.value);
  }

  return accumulator;
}
/*!
 * Gets all own and inherited enumerable keys from a target.
 *
 * @param {Object} target
 * @returns {Array} an array of own and inherited enumerable keys from the target.
 */


function getEnumerableKeys(target) {
  var keys = [];

  for (var key in target) {
    keys.push(key);
  }

  return keys;
}
/*!
 * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of
 * each key. If any value of the given key is not equal, the function will return false (early).
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function keysEqual(leftHandOperand, rightHandOperand, keys, options) {
  var length = keys.length;

  if (length === 0) {
    return true;
  }

  for (var i = 0; i < length; i += 1) {
    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {
      return false;
    }
  }

  return true;
}
/*!
 * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`
 * for each enumerable key in the object.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function objectEqual(leftHandOperand, rightHandOperand, options) {
  var leftHandKeys = getEnumerableKeys(leftHandOperand);
  var rightHandKeys = getEnumerableKeys(rightHandOperand);

  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {
    leftHandKeys.sort();
    rightHandKeys.sort();

    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {
      return false;
    }

    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);
  }

  var leftHandEntries = getIteratorEntries(leftHandOperand);
  var rightHandEntries = getIteratorEntries(rightHandOperand);

  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {
    leftHandEntries.sort();
    rightHandEntries.sort();
    return iterableEqual(leftHandEntries, rightHandEntries, options);
  }

  if (leftHandKeys.length === 0 && leftHandEntries.length === 0 && rightHandKeys.length === 0 && rightHandEntries.length === 0) {
    return true;
  }

  return false;
}
/*!
 * Returns true if the argument is a primitive.
 *
 * This intentionally returns true for all objects that can be compared by reference,
 * including functions and symbols.
 *
 * @param {Mixed} value
 * @return {Boolean} result
 */


function isPrimitive(value) {
  return value === null || typeof value !== 'object';
}
deepEql.MemoizeMap = MemoizeMap_1;/*!
 * Chai - isProxyEnabled helper
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .isProxyEnabled()
 *
 * Helper function to check if Chai's proxy protection feature is enabled. If
 * proxies are unsupported or disabled via the user's Chai config, then return
 * false. Otherwise, return true.
 *
 * @namespace Utils
 * @name isProxyEnabled
 */

var isProxyEnabled = function isProxyEnabled() {
  return config.useProxy && typeof Proxy !== 'undefined' && typeof Reflect !== 'undefined';
};/*!
 * Chai - addProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .addProperty(ctx, name, getter)
 *
 * Adds a property to the prototype of an object.
 *
 *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.instanceof(Foo);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.foo;
 *
 * @param {Object} ctx object to which the property is added
 * @param {String} name of property to add
 * @param {Function} getter function to be used for name
 * @namespace Utils
 * @name addProperty
 * @api public
 */

var addProperty = function addProperty(ctx, name, getter) {
  getter = getter === undefined ? function () {} : getter;
  Object.defineProperty(ctx, name, {
    get: function propertyGetter() {
      // Setting the `ssfi` flag to `propertyGetter` causes this function to
      // be the starting point for removing implementation frames from the
      // stack trace of a failed assertion.
      //
      // However, we only want to use this function as the starting point if
      // the `lockSsfi` flag isn't set and proxy protection is disabled.
      //
      // If the `lockSsfi` flag is set, then either this assertion has been
      // overwritten by another assertion, or this assertion is being invoked
      // from inside of another assertion. In the first case, the `ssfi` flag
      // has already been set by the overwriting assertion. In the second
      // case, the `ssfi` flag has already been set by the outer assertion.
      //
      // If proxy protection is enabled, then the `ssfi` flag has already been
      // set by the proxy getter.
      if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
        flag(this, 'ssfi', propertyGetter);
      }

      var result = getter.call(this);
      if (result !== undefined) return result;
      var newAssertion = new chai$1.Assertion();
      transferFlags(this, newAssertion);
      return newAssertion;
    },
    configurable: true
  });
};var fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');
/*!
 * Chai - addLengthGuard utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .addLengthGuard(fn, assertionName, isChainable)
 *
 * Define `length` as a getter on the given uninvoked method assertion. The
 * getter acts as a guard against chaining `length` directly off of an uninvoked
 * method assertion, which is a problem because it references `function`'s
 * built-in `length` property instead of Chai's `length` assertion. When the
 * getter catches the user making this mistake, it throws an error with a
 * helpful message.
 *
 * There are two ways in which this mistake can be made. The first way is by
 * chaining the `length` assertion directly off of an uninvoked chainable
 * method. In this case, Chai suggests that the user use `lengthOf` instead. The
 * second way is by chaining the `length` assertion directly off of an uninvoked
 * non-chainable method. Non-chainable methods must be invoked prior to
 * chaining. In this case, Chai suggests that the user consult the docs for the
 * given assertion.
 *
 * If the `length` property of functions is unconfigurable, then return `fn`
 * without modification.
 *
 * Note that in ES6, the function's `length` property is configurable, so once
 * support for legacy environments is dropped, Chai's `length` property can
 * replace the built-in function's `length` property, and this length guard will
 * no longer be necessary. In the mean time, maintaining consistency across all
 * environments is the priority.
 *
 * @param {Function} fn
 * @param {String} assertionName
 * @param {Boolean} isChainable
 * @namespace Utils
 * @name addLengthGuard
 */

var addLengthGuard = function addLengthGuard(fn, assertionName, isChainable) {
  if (!fnLengthDesc.configurable) return fn;
  Object.defineProperty(fn, 'length', {
    get: function () {
      if (isChainable) {
        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' + ' to a compatibility issue, "length" cannot directly follow "' + assertionName + '". Use "' + assertionName + '.lengthOf" instead.');
      }

      throw Error('Invalid Chai property: ' + assertionName + '.length. See' + ' docs for proper usage of "' + assertionName + '".');
    }
  });
  return fn;
};/*!
 * Chai - proxify utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .proxify(object)
 *
 * Return a proxy of given object that throws an error when a non-existent
 * property is read. By default, the root cause is assumed to be a misspelled
 * property, and thus an attempt is made to offer a reasonable suggestion from
 * the list of existing properties. However, if a nonChainableMethodName is
 * provided, then the root cause is instead a failure to invoke a non-chainable
 * method prior to reading the non-existent property.
 * 
 * If proxies are unsupported or disabled via the user's Chai config, then
 * return object without modification.
 *
 * @param {Object} obj
 * @param {String} nonChainableMethodName
 * @namespace Utils
 * @name proxify
 */

var builtins = ['__flags', '__methods', '_obj', 'assert'];

var proxify = function proxify(obj, nonChainableMethodName) {
  if (!isProxyEnabled()) return obj;
  return new Proxy(obj, {
    get: function proxyGetter(target, property) {
      // This check is here because we should not throw errors on Symbol properties
      // such as `Symbol.toStringTag`.
      // The values for which an error should be thrown can be configured using
      // the `config.proxyExcludedKeys` setting.
      if (typeof property === 'string' && config.proxyExcludedKeys.indexOf(property) === -1 && !Reflect.has(target, property)) {
        // Special message for invalid property access of non-chainable methods.
        if (nonChainableMethodName) {
          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' + property + '. See docs for proper usage of "' + nonChainableMethodName + '".');
        }

        var orderedProperties = getProperties(target).filter(function (property) {
          return !Object.prototype.hasOwnProperty(property) && builtins.indexOf(property) === -1;
        }).sort(function (a, b) {
          return stringDistance(property, a) - stringDistance(property, b);
        });

        if (orderedProperties.length && stringDistance(orderedProperties[0], property) < 4) {
          // If the property is reasonably close to an existing Chai property,
          // suggest that property to the user.
          throw Error('Invalid Chai property: ' + property + '. Did you mean "' + orderedProperties[0] + '"?');
        } else {
          throw Error('Invalid Chai property: ' + property);
        }
      } // Use this proxy getter as the starting point for removing implementation
      // frames from the stack trace of a failed assertion. For property
      // assertions, this prevents the proxy getter from showing up in the stack
      // trace since it's invoked before the property getter. For method and
      // chainable method assertions, this flag will end up getting changed to
      // the method wrapper, which is good since this frame will no longer be in
      // the stack once the method is invoked. Note that Chai builtin assertion
      // properties such as `__flags` are skipped since this is only meant to
      // capture the starting point of an assertion. This step is also skipped
      // if the `lockSsfi` flag is set, thus indicating that this assertion is
      // being called from within another assertion. In that case, the `ssfi`
      // flag is already set to the outer assertion's starting point.


      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {
        flag(target, 'ssfi', proxyGetter);
      }

      return Reflect.get(target, property);
    }
  });
};
/**
 * # stringDistance(strA, strB)
 * Return the Levenshtein distance between two strings.
 * @param {string} strA
 * @param {string} strB
 * @return {number} the string distance between strA and strB
 * @api private
 */


function stringDistance(strA, strB, memo) {
  if (!memo) {
    // `memo` is a two-dimensional array containing a cache of distances
    // memo[i][j] is the distance between strA.slice(0, i) and
    // strB.slice(0, j).
    memo = [];

    for (var i = 0; i <= strA.length; i++) {
      memo[i] = [];
    }
  }

  if (!memo[strA.length] || !memo[strA.length][strB.length]) {
    if (strA.length === 0 || strB.length === 0) {
      memo[strA.length][strB.length] = Math.max(strA.length, strB.length);
    } else {
      memo[strA.length][strB.length] = Math.min(stringDistance(strA.slice(0, -1), strB, memo) + 1, stringDistance(strA, strB.slice(0, -1), memo) + 1, stringDistance(strA.slice(0, -1), strB.slice(0, -1), memo) + (strA.slice(-1) === strB.slice(-1) ? 0 : 1));
    }
  }

  return memo[strA.length][strB.length];
}/*!
 * Chai - addMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .addMethod(ctx, name, method)
 *
 * Adds a method to the prototype of an object.
 *
 *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(fooStr).to.be.foo('bar');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for name
 * @namespace Utils
 * @name addMethod
 * @api public
 */

var addMethod = function addMethod(ctx, name, method) {
  var methodWrapper = function () {
    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the
    // starting point for removing implementation frames from the stack trace of
    // a failed assertion.
    //
    // However, we only want to use this function as the starting point if the
    // `lockSsfi` flag isn't set.
    //
    // If the `lockSsfi` flag is set, then either this assertion has been
    // overwritten by another assertion, or this assertion is being invoked from
    // inside of another assertion. In the first case, the `ssfi` flag has
    // already been set by the overwriting assertion. In the second case, the
    // `ssfi` flag has already been set by the outer assertion.
    if (!flag(this, 'lockSsfi')) {
      flag(this, 'ssfi', methodWrapper);
    }

    var result = method.apply(this, arguments);
    if (result !== undefined) return result;
    var newAssertion = new chai$1.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  };

  addLengthGuard(methodWrapper, name, false);
  ctx[name] = proxify(methodWrapper, name);
};/*!
 * Chai - overwriteProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .overwriteProperty(ctx, name, fn)
 *
 * Overwites an already existing property getter and provides
 * access to previous value. Must return function to use as getter.
 *
 *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {
 *       return function () {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.name).to.equal('bar');
 *         } else {
 *           _super.call(this);
 *         }
 *       }
 *     });
 *
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.ok;
 *
 * @param {Object} ctx object whose property is to be overwritten
 * @param {String} name of property to overwrite
 * @param {Function} getter function that returns a getter function to be used for name
 * @namespace Utils
 * @name overwriteProperty
 * @api public
 */

var overwriteProperty = function overwriteProperty(ctx, name, getter) {
  var _get = Object.getOwnPropertyDescriptor(ctx, name),
      _super = function () {};

  if (_get && 'function' === typeof _get.get) _super = _get.get;
  Object.defineProperty(ctx, name, {
    get: function overwritingPropertyGetter() {
      // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this
      // function to be the starting point for removing implementation frames
      // from the stack trace of a failed assertion.
      //
      // However, we only want to use this function as the starting point if
      // the `lockSsfi` flag isn't set and proxy protection is disabled.
      //
      // If the `lockSsfi` flag is set, then either this assertion has been
      // overwritten by another assertion, or this assertion is being invoked
      // from inside of another assertion. In the first case, the `ssfi` flag
      // has already been set by the overwriting assertion. In the second
      // case, the `ssfi` flag has already been set by the outer assertion.
      //
      // If proxy protection is enabled, then the `ssfi` flag has already been
      // set by the proxy getter.
      if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {
        flag(this, 'ssfi', overwritingPropertyGetter);
      } // Setting the `lockSsfi` flag to `true` prevents the overwritten
      // assertion from changing the `ssfi` flag. By this point, the `ssfi`
      // flag is already set to the correct starting point for this assertion.


      var origLockSsfi = flag(this, 'lockSsfi');
      flag(this, 'lockSsfi', true);
      var result = getter(_super).call(this);
      flag(this, 'lockSsfi', origLockSsfi);

      if (result !== undefined) {
        return result;
      }

      var newAssertion = new chai$1.Assertion();
      transferFlags(this, newAssertion);
      return newAssertion;
    },
    configurable: true
  });
};/*!
 * Chai - overwriteMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .overwriteMethod(ctx, name, fn)
 *
 * Overwites an already existing method and provides
 * access to previous function. Must return function
 * to be used for name.
 *
 *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {
 *       return function (str) {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.value).to.equal(str);
 *         } else {
 *           _super.apply(this, arguments);
 *         }
 *       }
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.equal('bar');
 *
 * @param {Object} ctx object whose method is to be overwritten
 * @param {String} name of method to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @namespace Utils
 * @name overwriteMethod
 * @api public
 */

var overwriteMethod = function overwriteMethod(ctx, name, method) {
  var _method = ctx[name],
      _super = function () {
    throw new Error(name + ' is not a function');
  };

  if (_method && 'function' === typeof _method) _super = _method;

  var overwritingMethodWrapper = function () {
    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this
    // function to be the starting point for removing implementation frames from
    // the stack trace of a failed assertion.
    //
    // However, we only want to use this function as the starting point if the
    // `lockSsfi` flag isn't set.
    //
    // If the `lockSsfi` flag is set, then either this assertion has been
    // overwritten by another assertion, or this assertion is being invoked from
    // inside of another assertion. In the first case, the `ssfi` flag has
    // already been set by the overwriting assertion. In the second case, the
    // `ssfi` flag has already been set by the outer assertion.
    if (!flag(this, 'lockSsfi')) {
      flag(this, 'ssfi', overwritingMethodWrapper);
    } // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion
    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already
    // set to the correct starting point for this assertion.


    var origLockSsfi = flag(this, 'lockSsfi');
    flag(this, 'lockSsfi', true);
    var result = method(_super).apply(this, arguments);
    flag(this, 'lockSsfi', origLockSsfi);

    if (result !== undefined) {
      return result;
    }

    var newAssertion = new chai$1.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  };

  addLengthGuard(overwritingMethodWrapper, name, false);
  ctx[name] = proxify(overwritingMethodWrapper, name);
};/*!
 * Chai - addChainingMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

/*!
 * Module variables
 */
// Check whether `Object.setPrototypeOf` is supported

var canSetPrototype = typeof Object.setPrototypeOf === 'function'; // Without `Object.setPrototypeOf` support, this module will need to add properties to a function.
// However, some of functions' own props are not configurable and should be skipped.

var testFn = function () {};

var excludeNames = Object.getOwnPropertyNames(testFn).filter(function (name) {
  var propDesc = Object.getOwnPropertyDescriptor(testFn, name); // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,
  // but then returns `undefined` as the property descriptor for `callee`. As a
  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,
  // and then filter it out if it's not an object as it should be.

  if (typeof propDesc !== 'object') return true;
  return !propDesc.configurable;
}); // Cache `Function` properties

var call = Function.prototype.call,
    apply = Function.prototype.apply;
/**
 * ### .addChainableMethod(ctx, name, method, chainingBehavior)
 *
 * Adds a method to an object, such that the method can also be chained.
 *
 *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);
 *
 * The result can then be used as both a method assertion, executing both `method` and
 * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.
 *
 *     expect(fooStr).to.be.foo('bar');
 *     expect(fooStr).to.be.foo.equal('foo');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for `name`, when called
 * @param {Function} chainingBehavior function to be called every time the property is accessed
 * @namespace Utils
 * @name addChainableMethod
 * @api public
 */

var addChainableMethod = function addChainableMethod(ctx, name, method, chainingBehavior) {
  if (typeof chainingBehavior !== 'function') {
    chainingBehavior = function () {};
  }

  var chainableBehavior = {
    method: method,
    chainingBehavior: chainingBehavior
  }; // save the methods so we can overwrite them later, if we need to.

  if (!ctx.__methods) {
    ctx.__methods = {};
  }

  ctx.__methods[name] = chainableBehavior;
  Object.defineProperty(ctx, name, {
    get: function chainableMethodGetter() {
      chainableBehavior.chainingBehavior.call(this);

      var chainableMethodWrapper = function () {
        // Setting the `ssfi` flag to `chainableMethodWrapper` causes this
        // function to be the starting point for removing implementation
        // frames from the stack trace of a failed assertion.
        //
        // However, we only want to use this function as the starting point if
        // the `lockSsfi` flag isn't set.
        //
        // If the `lockSsfi` flag is set, then this assertion is being
        // invoked from inside of another assertion. In this case, the `ssfi`
        // flag has already been set by the outer assertion.
        //
        // Note that overwriting a chainable method merely replaces the saved
        // methods in `ctx.__methods` instead of completely replacing the
        // overwritten assertion. Therefore, an overwriting assertion won't
        // set the `ssfi` or `lockSsfi` flags.
        if (!flag(this, 'lockSsfi')) {
          flag(this, 'ssfi', chainableMethodWrapper);
        }

        var result = chainableBehavior.method.apply(this, arguments);

        if (result !== undefined) {
          return result;
        }

        var newAssertion = new chai$1.Assertion();
        transferFlags(this, newAssertion);
        return newAssertion;
      };

      addLengthGuard(chainableMethodWrapper, name, true); // Use `Object.setPrototypeOf` if available

      if (canSetPrototype) {
        // Inherit all properties from the object by replacing the `Function` prototype
        var prototype = Object.create(this); // Restore the `call` and `apply` methods from `Function`

        prototype.call = call;
        prototype.apply = apply;
        Object.setPrototypeOf(chainableMethodWrapper, prototype);
      } // Otherwise, redefine all properties (slow!)
      else {
          var asserterNames = Object.getOwnPropertyNames(ctx);
          asserterNames.forEach(function (asserterName) {
            if (excludeNames.indexOf(asserterName) !== -1) {
              return;
            }

            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
            Object.defineProperty(chainableMethodWrapper, asserterName, pd);
          });
        }

      transferFlags(this, chainableMethodWrapper);
      return proxify(chainableMethodWrapper);
    },
    configurable: true
  });
};/*!
 * Chai - overwriteChainableMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)
 *
 * Overwites an already existing chainable method
 * and provides access to the previous function or
 * property.  Must return functions to be used for
 * name.
 *
 *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',
 *       function (_super) {
 *       }
 *     , function (_super) {
 *       }
 *     );
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.have.lengthOf(3);
 *     expect(myFoo).to.have.lengthOf.above(3);
 *
 * @param {Object} ctx object whose method / property is to be overwritten
 * @param {String} name of method / property to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @param {Function} chainingBehavior function that returns a function to be used for property
 * @namespace Utils
 * @name overwriteChainableMethod
 * @api public
 */

var overwriteChainableMethod = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {
  var chainableBehavior = ctx.__methods[name];
  var _chainingBehavior = chainableBehavior.chainingBehavior;

  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {
    var result = chainingBehavior(_chainingBehavior).call(this);

    if (result !== undefined) {
      return result;
    }

    var newAssertion = new chai$1.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  };

  var _method = chainableBehavior.method;

  chainableBehavior.method = function overwritingChainableMethodWrapper() {
    var result = method(_method).apply(this, arguments);

    if (result !== undefined) {
      return result;
    }

    var newAssertion = new chai$1.Assertion();
    transferFlags(this, newAssertion);
    return newAssertion;
  };
};/*!
 * Chai - compareByInspect utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

/**
 * ### .compareByInspect(mixed, mixed)
 *
 * To be used as a compareFunction with Array.prototype.sort. Compares elements
 * using inspect instead of default behavior of using toString so that Symbols
 * and objects with irregular/missing toString can still be sorted without a
 * TypeError.
 *
 * @param {Mixed} first element to compare
 * @param {Mixed} second element to compare
 * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1 
 * @name compareByInspect
 * @namespace Utils
 * @api public
 */

var compareByInspect = function compareByInspect(a, b) {
  return inspect_1(a) < inspect_1(b) ? -1 : 1;
};/*!
 * Chai - getOwnEnumerablePropertySymbols utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getOwnEnumerablePropertySymbols(object)
 *
 * This allows the retrieval of directly-owned enumerable property symbols of an
 * object. This function is necessary because Object.getOwnPropertySymbols
 * returns both enumerable and non-enumerable property symbols.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getOwnEnumerablePropertySymbols
 * @api public
 */
var getOwnEnumerablePropertySymbols = function getOwnEnumerablePropertySymbols(obj) {
  if (typeof Object.getOwnPropertySymbols !== 'function') return [];
  return Object.getOwnPropertySymbols(obj).filter(function (sym) {
    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;
  });
};/*!
 * Chai - getOwnEnumerableProperties utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

/**
 * ### .getOwnEnumerableProperties(object)
 *
 * This allows the retrieval of directly-owned enumerable property names and
 * symbols of an object. This function is necessary because Object.keys only
 * returns enumerable property names, not enumerable property symbols.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getOwnEnumerableProperties
 * @api public
 */

var getOwnEnumerableProperties = function getOwnEnumerableProperties(obj) {
  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));
};/* !
 * Chai - checkError utility
 * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .checkError
 *
 * Checks that an error conforms to a given set of criteria and/or retrieves information about it.
 *
 * @api public
 */

/**
 * ### .compatibleInstance(thrown, errorLike)
 *
 * Checks if two instances are compatible (strict equal).
 * Returns false if errorLike is not an instance of Error, because instances
 * can only be compatible if they're both error instances.
 *
 * @name compatibleInstance
 * @param {Error} thrown error
 * @param {Error|ErrorConstructor} errorLike object to compare against
 * @namespace Utils
 * @api public
 */

function compatibleInstance(thrown, errorLike) {
  return errorLike instanceof Error && thrown === errorLike;
}
/**
 * ### .compatibleConstructor(thrown, errorLike)
 *
 * Checks if two constructors are compatible.
 * This function can receive either an error constructor or
 * an error instance as the `errorLike` argument.
 * Constructors are compatible if they're the same or if one is
 * an instance of another.
 *
 * @name compatibleConstructor
 * @param {Error} thrown error
 * @param {Error|ErrorConstructor} errorLike object to compare against
 * @namespace Utils
 * @api public
 */


function compatibleConstructor(thrown, errorLike) {
  if (errorLike instanceof Error) {
    // If `errorLike` is an instance of any error we compare their constructors
    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;
  } else if (errorLike.prototype instanceof Error || errorLike === Error) {
    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly
    return thrown.constructor === errorLike || thrown instanceof errorLike;
  }

  return false;
}
/**
 * ### .compatibleMessage(thrown, errMatcher)
 *
 * Checks if an error's message is compatible with a matcher (String or RegExp).
 * If the message contains the String or passes the RegExp test,
 * it is considered compatible.
 *
 * @name compatibleMessage
 * @param {Error} thrown error
 * @param {String|RegExp} errMatcher to look for into the message
 * @namespace Utils
 * @api public
 */


function compatibleMessage(thrown, errMatcher) {
  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;

  if (errMatcher instanceof RegExp) {
    return errMatcher.test(comparisonString);
  } else if (typeof errMatcher === 'string') {
    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers
  }

  return false;
}
/**
 * ### .getFunctionName(constructorFn)
 *
 * Returns the name of a function.
 * This also includes a polyfill function if `constructorFn.name` is not defined.
 *
 * @name getFunctionName
 * @param {Function} constructorFn
 * @namespace Utils
 * @api private
 */


var functionNameMatch$1 = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\(\/]+)/;

function getFunctionName(constructorFn) {
  var name = '';

  if (typeof constructorFn.name === 'undefined') {
    // Here we run a polyfill if constructorFn.name is not defined
    var match = String(constructorFn).match(functionNameMatch$1);

    if (match) {
      name = match[1];
    }
  } else {
    name = constructorFn.name;
  }

  return name;
}
/**
 * ### .getConstructorName(errorLike)
 *
 * Gets the constructor name for an Error instance or constructor itself.
 *
 * @name getConstructorName
 * @param {Error|ErrorConstructor} errorLike
 * @namespace Utils
 * @api public
 */


function getConstructorName(errorLike) {
  var constructorName = errorLike;

  if (errorLike instanceof Error) {
    constructorName = getFunctionName(errorLike.constructor);
  } else if (typeof errorLike === 'function') {
    // If `err` is not an instance of Error it is an error constructor itself or another function.
    // If we've got a common function we get its name, otherwise we may need to create a new instance
    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.
    constructorName = getFunctionName(errorLike).trim() || getFunctionName(new errorLike()); // eslint-disable-line new-cap
  }

  return constructorName;
}
/**
 * ### .getMessage(errorLike)
 *
 * Gets the error message from an error.
 * If `err` is a String itself, we return it.
 * If the error has no message, we return an empty string.
 *
 * @name getMessage
 * @param {Error|String} errorLike
 * @namespace Utils
 * @api public
 */


function getMessage$1(errorLike) {
  var msg = '';

  if (errorLike && errorLike.message) {
    msg = errorLike.message;
  } else if (typeof errorLike === 'string') {
    msg = errorLike;
  }

  return msg;
}

var checkError = {
  compatibleInstance: compatibleInstance,
  compatibleConstructor: compatibleConstructor,
  compatibleMessage: compatibleMessage,
  getMessage: getMessage$1,
  getConstructorName: getConstructorName
};/*!
 * Chai - isNaN utility
 * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>
 * MIT Licensed
 */

/**
 * ### .isNaN(value)
 *
 * Checks if the given value is NaN or not.
 *
 *     utils.isNaN(NaN); // true
 *
 * @param {Value} The value which has to be checked if it is NaN
 * @name isNaN
 * @api private
 */
function isNaN$1(value) {
  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number
  // section's NOTE.
  return value !== value;
} // If ECMAScript 6's Number.isNaN is present, prefer that.


var _isNaN = Number.isNaN || isNaN$1;/*!
 * chai
 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Dependencies that are used for multiple exports are required here only once
 */

/*!
 * test utility
 */

var test$2 = test$1;
/*!
 * type utility
 */

var type = typeDetect;
/*!
 * expectTypes utility
 */

var expectTypes$1 = expectTypes;
/*!
 * message utility
 */

var getMessage$2 = getMessage;
/*!
 * actual utility
 */

var getActual$1 = getActual;
/*!
 * Inspect util
 */

var inspect = inspect_1;
/*!
 * Object Display util
 */

var objDisplay$1 = objDisplay;
/*!
 * Flag utility
 */

var flag$1 = flag;
/*!
 * Flag transferring utility
 */

var transferFlags$1 = transferFlags;
/*!
 * Deep equal utility
 */

var eql = deepEql;
/*!
 * Deep path info
 */

var getPathInfo$1 = pathval.getPathInfo;
/*!
 * Check if a property exists
 */

var hasProperty$1 = pathval.hasProperty;
/*!
 * Function name
 */

var getName = getFuncName_1;
/*!
 * add Property
 */

var addProperty$1 = addProperty;
/*!
 * add Method
 */

var addMethod$1 = addMethod;
/*!
 * overwrite Property
 */

var overwriteProperty$1 = overwriteProperty;
/*!
 * overwrite Method
 */

var overwriteMethod$1 = overwriteMethod;
/*!
 * Add a chainable method
 */

var addChainableMethod$1 = addChainableMethod;
/*!
 * Overwrite chainable method
 */

var overwriteChainableMethod$1 = overwriteChainableMethod;
/*!
 * Compare by inspect method
 */

var compareByInspect$1 = compareByInspect;
/*!
 * Get own enumerable property symbols method
 */

var getOwnEnumerablePropertySymbols$1 = getOwnEnumerablePropertySymbols;
/*!
 * Get own enumerable properties method
 */

var getOwnEnumerableProperties$1 = getOwnEnumerableProperties;
/*!
 * Checks error against a given set of criteria
 */

var checkError$1 = checkError;
/*!
 * Proxify util
 */

var proxify$1 = proxify;
/*!
 * addLengthGuard util
 */

var addLengthGuard$1 = addLengthGuard;
/*!
 * isProxyEnabled helper
 */

var isProxyEnabled$1 = isProxyEnabled;
/*!
 * isNaN method
 */

var isNaN$2 = _isNaN;
var utils = {
  test: test$2,
  type: type,
  expectTypes: expectTypes$1,
  getMessage: getMessage$2,
  getActual: getActual$1,
  inspect: inspect,
  objDisplay: objDisplay$1,
  flag: flag$1,
  transferFlags: transferFlags$1,
  eql: eql,
  getPathInfo: getPathInfo$1,
  hasProperty: hasProperty$1,
  getName: getName,
  addProperty: addProperty$1,
  addMethod: addMethod$1,
  overwriteProperty: overwriteProperty$1,
  overwriteMethod: overwriteMethod$1,
  addChainableMethod: addChainableMethod$1,
  overwriteChainableMethod: overwriteChainableMethod$1,
  compareByInspect: compareByInspect$1,
  getOwnEnumerablePropertySymbols: getOwnEnumerablePropertySymbols$1,
  getOwnEnumerableProperties: getOwnEnumerableProperties$1,
  checkError: checkError$1,
  proxify: proxify$1,
  addLengthGuard: addLengthGuard$1,
  isProxyEnabled: isProxyEnabled$1,
  isNaN: isNaN$2
};/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var assertion = function (_chai, util) {
  /*!
   * Module dependencies.
   */
  var AssertionError = _chai.AssertionError,
      flag = util.flag;
  /*!
   * Module export.
   */

  _chai.Assertion = Assertion;
  /*!
   * Assertion Constructor
   *
   * Creates object for chaining.
   *
   * `Assertion` objects contain metadata in the form of flags. Three flags can
   * be assigned during instantiation by passing arguments to this constructor:
   *
   * - `object`: This flag contains the target of the assertion. For example, in
   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will
   *   contain `numKittens` so that the `equal` assertion can reference it when
   *   needed.
   *
   * - `message`: This flag contains an optional custom error message to be
   *   prepended to the error message that's generated by the assertion when it
   *   fails.
   *
   * - `ssfi`: This flag stands for "start stack function indicator". It
   *   contains a function reference that serves as the starting point for
   *   removing frames from the stack trace of the error that's created by the
   *   assertion when it fails. The goal is to provide a cleaner stack trace to
   *   end users by removing Chai's internal functions. Note that it only works
   *   in environments that support `Error.captureStackTrace`, and only when
   *   `Chai.config.includeStack` hasn't been set to `false`.
   *
   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag
   *   should retain its current value, even as assertions are chained off of
   *   this object. This is usually set to `true` when creating a new assertion
   *   from within another assertion. It's also temporarily set to `true` before
   *   an overwritten assertion gets called by the overwriting assertion.
   *
   * @param {Mixed} obj target of the assertion
   * @param {String} msg (optional) custom error message
   * @param {Function} ssfi (optional) starting point for removing stack frames
   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked
   * @api private
   */

  function Assertion(obj, msg, ssfi, lockSsfi) {
    flag(this, 'ssfi', ssfi || Assertion);
    flag(this, 'lockSsfi', lockSsfi);
    flag(this, 'object', obj);
    flag(this, 'message', msg);
    return util.proxify(this);
  }

  Object.defineProperty(Assertion, 'includeStack', {
    get: function () {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      return config.includeStack;
    },
    set: function (value) {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      config.includeStack = value;
    }
  });
  Object.defineProperty(Assertion, 'showDiff', {
    get: function () {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      return config.showDiff;
    },
    set: function (value) {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      config.showDiff = value;
    }
  });

  Assertion.addProperty = function (name, fn) {
    util.addProperty(this.prototype, name, fn);
  };

  Assertion.addMethod = function (name, fn) {
    util.addMethod(this.prototype, name, fn);
  };

  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  Assertion.overwriteProperty = function (name, fn) {
    util.overwriteProperty(this.prototype, name, fn);
  };

  Assertion.overwriteMethod = function (name, fn) {
    util.overwriteMethod(this.prototype, name, fn);
  };

  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
  };
  /**
   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)
   *
   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.
   *
   * @name assert
   * @param {Philosophical} expression to be tested
   * @param {String|Function} message or function that returns message to display if expression fails
   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails
   * @param {Mixed} expected value (remember to check for negation)
   * @param {Mixed} actual (optional) will default to `this.obj`
   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails
   * @api private
   */


  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
    var ok = util.test(this, arguments);
    if (false !== showDiff) showDiff = true;
    if (undefined === expected && undefined === _actual) showDiff = false;
    if (true !== config.showDiff) showDiff = false;

    if (!ok) {
      msg = util.getMessage(this, arguments);
      var actual = util.getActual(this, arguments);
      throw new AssertionError(msg, {
        actual: actual,
        expected: expected,
        showDiff: showDiff
      }, config.includeStack ? this.assert : flag(this, 'ssfi'));
    }
  };
  /*!
   * ### ._obj
   *
   * Quick reference to stored `actual` value for plugin developers.
   *
   * @api private
   */


  Object.defineProperty(Assertion.prototype, '_obj', {
    get: function () {
      return flag(this, 'object');
    },
    set: function (val) {
      flag(this, 'object', val);
    }
  });
};/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var assertions = function (chai, _) {
  var Assertion = chai.Assertion,
      AssertionError = chai.AssertionError,
      flag = _.flag;
  /**
   * ### Language Chains
   *
   * The following are provided as chainable getters to improve the readability
   * of your assertions.
   *
   * **Chains**
   *
   * - to
   * - be
   * - been
   * - is
   * - that
   * - which
   * - and
   * - has
   * - have
   * - with
   * - at
   * - of
   * - same
   * - but
   * - does
   *
   * @name language chains
   * @namespace BDD
   * @api public
   */

  ['to', 'be', 'been', 'is', 'and', 'has', 'have', 'with', 'that', 'which', 'at', 'of', 'same', 'but', 'does'].forEach(function (chain) {
    Assertion.addProperty(chain);
  });
  /**
   * ### .not
   *
   * Negates all assertions that follow in the chain.
   *
   *     expect(function () {}).to.not.throw();
   *     expect({a: 1}).to.not.have.property('b');
   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);
   *
   * Just because you can negate any assertion with `.not` doesn't mean you
   * should. With great power comes great responsibility. It's often best to
   * assert that the one expected output was produced, rather than asserting
   * that one of countless unexpected outputs wasn't produced. See individual
   * assertions for specific guidance.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.equal(1); // Not recommended
   *
   * @name not
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('not', function () {
    flag(this, 'negate', true);
  });
  /**
   * ### .deep
   *
   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`
   * assertions that follow in the chain to use deep equality instead of strict
   * (`===`) equality. See the `deep-eql` project page for info on the deep
   * equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) equals `{a: 1}`
   *     expect({a: 1}).to.deep.equal({a: 1});
   *     expect({a: 1}).to.not.equal({a: 1});
   *
   *     // Target array deeply (but not strictly) includes `{a: 1}`
   *     expect([{a: 1}]).to.deep.include({a: 1});
   *     expect([{a: 1}]).to.not.include({a: 1});
   *
   *     // Target object deeply (but not strictly) includes `x: {a: 1}`
   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});
   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});
   *
   *     // Target array deeply (but not strictly) has member `{a: 1}`
   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);
   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);
   *
   *     // Target set deeply (but not strictly) has key `{a: 1}`
   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);
   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);
   *
   *     // Target object deeply (but not strictly) has property `x: {a: 1}`
   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});
   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});
   *
   * @name deep
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('deep', function () {
    flag(this, 'deep', true);
  });
  /**
   * ### .nested
   *
   * Enables dot- and bracket-notation in all `.property` and `.include`
   * assertions that follow in the chain.
   *
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');
   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\.a.\\[b\\]');
   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\.a.\\[b\\]': 'x'});
   *
   * `.nested` cannot be combined with `.own`.
   *
   * @name nested
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('nested', function () {
    flag(this, 'nested', true);
  });
  /**
   * ### .own
   *
   * Causes all `.property` and `.include` assertions that follow in the chain
   * to ignore inherited properties.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.have.own.property('a');
   *     expect({a: 1}).to.have.property('b').but.not.own.property('b'); 
   *
   *     expect({a: 1}).to.own.include({a: 1});
   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});
   *
   * `.own` cannot be combined with `.nested`.
   *
   * @name own
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('own', function () {
    flag(this, 'own', true);
  });
  /**
   * ### .ordered
   *
   * Causes all `.members` assertions that follow in the chain to require that
   * members be in the same order.
   *
   *     expect([1, 2]).to.have.ordered.members([1, 2])
   *       .but.not.have.ordered.members([2, 1]);
   *
   * When `.include` and `.ordered` are combined, the ordering begins at the
   * start of both arrays.
   *
   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])
   *       .but.not.include.ordered.members([2, 3]);
   *
   * @name ordered
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('ordered', function () {
    flag(this, 'ordered', true);
  });
  /**
   * ### .any
   *
   * Causes all `.keys` assertions that follow in the chain to only require that
   * the target have at least one of the given keys. This is the opposite of
   * `.all`, which requires that the target have all of the given keys.
   *
   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
   *
   * See the `.keys` doc for guidance on when to use `.any` or `.all`.
   *
   * @name any
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('any', function () {
    flag(this, 'any', true);
    flag(this, 'all', false);
  });
  /**
   * ### .all
   *
   * Causes all `.keys` assertions that follow in the chain to require that the
   * target have all of the given keys. This is the opposite of `.any`, which
   * only requires that the target have at least one of the given keys.
   *
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *
   * Note that `.all` is used by default when neither `.all` nor `.any` are
   * added earlier in the chain. However, it's often best to add `.all` anyway
   * because it improves readability.
   *
   * See the `.keys` doc for guidance on when to use `.any` or `.all`.
   *
   * @name all
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('all', function () {
    flag(this, 'all', true);
    flag(this, 'any', false);
  });
  /**
   * ### .a(type[, msg])
   *
   * Asserts that the target's type is equal to the given string `type`. Types
   * are case insensitive. See the `type-detect` project page for info on the
   * type detection algorithm: https://github.com/chaijs/type-detect.
   *
   *     expect('foo').to.be.a('string');
   *     expect({a: 1}).to.be.an('object');
   *     expect(null).to.be.a('null');
   *     expect(undefined).to.be.an('undefined');
   *     expect(new Error).to.be.an('error');
   *     expect(Promise.resolve()).to.be.a('promise');
   *     expect(new Float32Array).to.be.a('float32array');
   *     expect(Symbol()).to.be.a('symbol');
   *
   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.
   *
   *     var myObj = {
   *       [Symbol.toStringTag]: 'myCustomType'
   *     };
   *
   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');
   *
   * It's often best to use `.a` to check a target's type before making more
   * assertions on the same target. That way, you avoid unexpected behavior from
   * any assertion that does different things based on the target's type.
   *
   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);
   *     expect([]).to.be.an('array').that.is.empty;
   *
   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to
   * assert that the target is the expected type, rather than asserting that it
   * isn't one of many unexpected types.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.an('array'); // Not recommended
   *
   * `.a` accepts an optional `msg` argument which is a custom error message to
   * show when the assertion fails. The message can also be given as the second
   * argument to `expect`.
   *
   *     expect(1).to.be.a('string', 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.a('string');
   *
   * `.a` can also be used as a language chain to improve the readability of
   * your assertions. 
   *
   *     expect({b: 2}).to.have.a.property('b');
   *
   * The alias `.an` can be used interchangeably with `.a`.
   *
   * @name a
   * @alias an
   * @param {String} type
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function an(type, msg) {
    if (msg) flag(this, 'message', msg);
    type = type.toLowerCase();
    var obj = flag(this, 'object'),
        article = ~['a', 'e', 'i', 'o', 'u'].indexOf(type.charAt(0)) ? 'an ' : 'a ';
    this.assert(type === _.type(obj).toLowerCase(), 'expected #{this} to be ' + article + type, 'expected #{this} not to be ' + article + type);
  }

  Assertion.addChainableMethod('an', an);
  Assertion.addChainableMethod('a', an);
  /**
   * ### .include(val[, msg])
   *
   * When the target is a string, `.include` asserts that the given string `val`
   * is a substring of the target.
   *
   *     expect('foobar').to.include('foo');
   *
   * When the target is an array, `.include` asserts that the given `val` is a
   * member of the target.
   *
   *     expect([1, 2, 3]).to.include(2);
   *
   * When the target is an object, `.include` asserts that the given object
   * `val`'s properties are a subset of the target's properties.
   *
   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});
   *
   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a
   * member of the target. SameValueZero equality algorithm is used.
   *
   *     expect(new Set([1, 2])).to.include(2);
   *
   * When the target is a Map, `.include` asserts that the given `val` is one of
   * the values of the target. SameValueZero equality algorithm is used.
   *
   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);
   *
   * Because `.include` does different things based on the target's type, it's
   * important to check the target's type before using `.include`. See the `.a`
   * doc for info on testing a target's type.
   *
   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);
   *
   * By default, strict (`===`) equality is used to compare array members and
   * object properties. Add `.deep` earlier in the chain to use deep equality
   * instead (WeakSet targets are not supported). See the `deep-eql` project
   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target array deeply (but not strictly) includes `{a: 1}`
   *     expect([{a: 1}]).to.deep.include({a: 1});
   *     expect([{a: 1}]).to.not.include({a: 1});
   *
   *     // Target object deeply (but not strictly) includes `x: {a: 1}`
   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});
   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});
   *
   * By default, all of the target's properties are searched when working with
   * objects. This includes properties that are inherited and/or non-enumerable.
   * Add `.own` earlier in the chain to exclude the target's inherited
   * properties from the search.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.own.include({a: 1});
   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});
   *
   * Note that a target object is always only searched for `val`'s own
   * enumerable properties.
   *
   * `.deep` and `.own` can be combined.
   *
   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});
   *
   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when
   * referencing nested properties.
   *
   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\.a.\\[b\\]': 2});
   *
   * `.deep` and `.nested` can be combined.
   *
   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});
   *
   * `.own` and `.nested` cannot be combined.
   *
   * Add `.not` earlier in the chain to negate `.include`.
   *
   *     expect('foobar').to.not.include('taco');
   *     expect([1, 2, 3]).to.not.include(4);
   * 
   * However, it's dangerous to negate `.include` when the target is an object.
   * The problem is that it creates uncertain expectations by asserting that the
   * target object doesn't have all of `val`'s key/value pairs but may or may
   * not have some of them. It's often best to identify the exact output that's
   * expected, and then write an assertion that only accepts that exact output.
   *
   * When the target object isn't even expected to have `val`'s keys, it's
   * often best to assert exactly that.
   *
   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended
   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended
   *
   * When the target object is expected to have `val`'s keys, it's often best to
   * assert that each of the properties has its expected value, rather than
   * asserting that each property doesn't have one of many unexpected values.
   *
   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended
   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended
   *
   * `.include` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');
   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);
   *
   * `.include` can also be used as a language chain, causing all `.members` and
   * `.keys` assertions that follow in the chain to require the target to be a
   * superset of the expected set, rather than an identical set. Note that
   * `.members` ignores duplicates in the subset when `.include` is added.
   *
   *     // Target object's keys are a superset of ['a', 'b'] but not identical
   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');
   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');
   *
   *     // Target array is a superset of [1, 2] but not identical
   *     expect([1, 2, 3]).to.include.members([1, 2]);
   *     expect([1, 2, 3]).to.not.have.members([1, 2]);
   *
   *     // Duplicates in the subset are ignored
   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);
   *
   * Note that adding `.any` earlier in the chain causes the `.keys` assertion
   * to ignore `.include`.
   *
   *     // Both assertions are identical
   *     expect({a: 1}).to.include.any.keys('a', 'b');
   *     expect({a: 1}).to.have.any.keys('a', 'b');
   *
   * The aliases `.includes`, `.contain`, and `.contains` can be used
   * interchangeably with `.include`.
   *
   * @name include
   * @alias contain
   * @alias includes
   * @alias contains
   * @param {Mixed} val
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function SameValueZero(a, b) {
    return _.isNaN(a) && _.isNaN(b) || a === b;
  }

  function includeChainingBehavior() {
    flag(this, 'contains', true);
  }

  function include(val, msg) {
    if (msg) flag(this, 'message', msg);

    var obj = flag(this, 'object'),
        objType = _.type(obj).toLowerCase(),
        flagMsg = flag(this, 'message'),
        negate = flag(this, 'negate'),
        ssfi = flag(this, 'ssfi'),
        isDeep = flag(this, 'deep'),
        descriptor = isDeep ? 'deep ' : '';

    flagMsg = flagMsg ? flagMsg + ': ' : '';
    var included = false;

    switch (objType) {
      case 'string':
        included = obj.indexOf(val) !== -1;
        break;

      case 'weakset':
        if (isDeep) {
          throw new AssertionError(flagMsg + 'unable to use .deep.include with WeakSet', undefined, ssfi);
        }

        included = obj.has(val);
        break;

      case 'map':
        var isEql = isDeep ? _.eql : SameValueZero;
        obj.forEach(function (item) {
          included = included || isEql(item, val);
        });
        break;

      case 'set':
        if (isDeep) {
          obj.forEach(function (item) {
            included = included || _.eql(item, val);
          });
        } else {
          included = obj.has(val);
        }

        break;

      case 'array':
        if (isDeep) {
          included = obj.some(function (item) {
            return _.eql(item, val);
          });
        } else {
          included = obj.indexOf(val) !== -1;
        }

        break;

      default:
        // This block is for asserting a subset of properties in an object.
        // `_.expectTypes` isn't used here because `.include` should work with
        // objects with a custom `@@toStringTag`.
        if (val !== Object(val)) {
          throw new AssertionError(flagMsg + 'object tested must be an array, a map, an object,' + ' a set, a string, or a weakset, but ' + objType + ' given', undefined, ssfi);
        }

        var props = Object.keys(val),
            firstErr = null,
            numErrs = 0;
        props.forEach(function (prop) {
          var propAssertion = new Assertion(obj);

          _.transferFlags(this, propAssertion, true);

          flag(propAssertion, 'lockSsfi', true);

          if (!negate || props.length === 1) {
            propAssertion.property(prop, val[prop]);
            return;
          }

          try {
            propAssertion.property(prop, val[prop]);
          } catch (err) {
            if (!_.checkError.compatibleConstructor(err, AssertionError)) {
              throw err;
            }

            if (firstErr === null) firstErr = err;
            numErrs++;
          }
        }, this); // When validating .not.include with multiple properties, we only want
        // to throw an assertion error if all of the properties are included,
        // in which case we throw the first property assertion error that we
        // encountered.

        if (negate && props.length > 1 && numErrs === props.length) {
          throw firstErr;
        }

        return;
    } // Assert inclusion in collection or substring in a string.


    this.assert(included, 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val), 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));
  }

  Assertion.addChainableMethod('include', include, includeChainingBehavior);
  Assertion.addChainableMethod('contain', include, includeChainingBehavior);
  Assertion.addChainableMethod('contains', include, includeChainingBehavior);
  Assertion.addChainableMethod('includes', include, includeChainingBehavior);
  /**
   * ### .ok
   *
   * Asserts that the target is loosely (`==`) equal to `true`. However, it's
   * often best to assert that the target is strictly (`===`) or deeply equal to
   * its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.ok; // Not recommended
   *
   *     expect(true).to.be.true; // Recommended
   *     expect(true).to.be.ok; // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.ok`.
   *
   *     expect(0).to.equal(0); // Recommended
   *     expect(0).to.not.be.ok; // Not recommended
   *
   *     expect(false).to.be.false; // Recommended
   *     expect(false).to.not.be.ok; // Not recommended
   *
   *     expect(null).to.be.null; // Recommended
   *     expect(null).to.not.be.ok; // Not recommended
   *
   *     expect(undefined).to.be.undefined; // Recommended
   *     expect(undefined).to.not.be.ok; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(false, 'nooo why fail??').to.be.ok;
   *
   * @name ok
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('ok', function () {
    this.assert(flag(this, 'object'), 'expected #{this} to be truthy', 'expected #{this} to be falsy');
  });
  /**
   * ### .true
   *
   * Asserts that the target is strictly (`===`) equal to `true`.
   *
   *     expect(true).to.be.true;
   *
   * Add `.not` earlier in the chain to negate `.true`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `true`.
   *
   *     expect(false).to.be.false; // Recommended
   *     expect(false).to.not.be.true; // Not recommended
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.true; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(false, 'nooo why fail??').to.be.true;
   *
   * @name true
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('true', function () {
    this.assert(true === flag(this, 'object'), 'expected #{this} to be true', 'expected #{this} to be false', flag(this, 'negate') ? false : true);
  });
  /**
   * ### .false
   *
   * Asserts that the target is strictly (`===`) equal to `false`.
   *
   *     expect(false).to.be.false;
   *
   * Add `.not` earlier in the chain to negate `.false`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to `false`.
   *
   *     expect(true).to.be.true; // Recommended
   *     expect(true).to.not.be.false; // Not recommended
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.false; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(true, 'nooo why fail??').to.be.false;
   *
   * @name false
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('false', function () {
    this.assert(false === flag(this, 'object'), 'expected #{this} to be false', 'expected #{this} to be true', flag(this, 'negate') ? true : false);
  });
  /**
   * ### .null
   *
   * Asserts that the target is strictly (`===`) equal to `null`.
   *
   *     expect(null).to.be.null;
   *
   * Add `.not` earlier in the chain to negate `.null`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `null`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.null; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.null;
   *
   * @name null
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('null', function () {
    this.assert(null === flag(this, 'object'), 'expected #{this} to be null', 'expected #{this} not to be null');
  });
  /**
   * ### .undefined
   *
   * Asserts that the target is strictly (`===`) equal to `undefined`.
   *
   *     expect(undefined).to.be.undefined;
   *
   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to `undefined`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.undefined; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.undefined;
   *
   * @name undefined
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('undefined', function () {
    this.assert(undefined === flag(this, 'object'), 'expected #{this} to be undefined', 'expected #{this} not to be undefined');
  });
  /**
   * ### .NaN
   *
   * Asserts that the target is exactly `NaN`.
   *
   *     expect(NaN).to.be.NaN;
   *
   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `NaN`.
   *
   *     expect('foo').to.equal('foo'); // Recommended
   *     expect('foo').to.not.be.NaN; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.NaN;
   *
   * @name NaN
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('NaN', function () {
    this.assert(_.isNaN(flag(this, 'object')), 'expected #{this} to be NaN', 'expected #{this} not to be NaN');
  });
  /**
   * ### .exist
   *
   * Asserts that the target is not strictly (`===`) equal to either `null` or
   * `undefined`. However, it's often best to assert that the target is equal to
   * its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.exist; // Not recommended
   *
   *     expect(0).to.equal(0); // Recommended
   *     expect(0).to.exist; // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.exist`.
   *
   *     expect(null).to.be.null; // Recommended
   *     expect(null).to.not.exist; // Not recommended
   *
   *     expect(undefined).to.be.undefined; // Recommended
   *     expect(undefined).to.not.exist; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(null, 'nooo why fail??').to.exist;
   *
   * @name exist
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('exist', function () {
    var val = flag(this, 'object');
    this.assert(val !== null && val !== undefined, 'expected #{this} to exist', 'expected #{this} to not exist');
  });
  /**
   * ### .empty
   *
   * When the target is a string or array, `.empty` asserts that the target's
   * `length` property is strictly (`===`) equal to `0`.
   *
   *     expect([]).to.be.empty;
   *     expect('').to.be.empty;
   *
   * When the target is a map or set, `.empty` asserts that the target's `size`
   * property is strictly equal to `0`.
   *
   *     expect(new Set()).to.be.empty;
   *     expect(new Map()).to.be.empty;
   *
   * When the target is a non-function object, `.empty` asserts that the target
   * doesn't have any own enumerable properties. Properties with Symbol-based
   * keys are excluded from the count.
   *
   *     expect({}).to.be.empty;
   *
   * Because `.empty` does different things based on the target's type, it's
   * important to check the target's type before using `.empty`. See the `.a`
   * doc for info on testing a target's type.
   *
   *     expect([]).to.be.an('array').that.is.empty;
   *
   * Add `.not` earlier in the chain to negate `.empty`. However, it's often
   * best to assert that the target contains its expected number of values,
   * rather than asserting that it's not empty.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended
   *
   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended
   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended
   *
   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended
   *     expect({a: 1}).to.not.be.empty; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;
   *
   * @name empty
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('empty', function () {
    var val = flag(this, 'object'),
        ssfi = flag(this, 'ssfi'),
        flagMsg = flag(this, 'message'),
        itemsCount;
    flagMsg = flagMsg ? flagMsg + ': ' : '';

    switch (_.type(val).toLowerCase()) {
      case 'array':
      case 'string':
        itemsCount = val.length;
        break;

      case 'map':
      case 'set':
        itemsCount = val.size;
        break;

      case 'weakmap':
      case 'weakset':
        throw new AssertionError(flagMsg + '.empty was passed a weak collection', undefined, ssfi);

      case 'function':
        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);

        throw new AssertionError(msg.trim(), undefined, ssfi);

      default:
        if (val !== Object(val)) {
          throw new AssertionError(flagMsg + '.empty was passed non-string primitive ' + _.inspect(val), undefined, ssfi);
        }

        itemsCount = Object.keys(val).length;
    }

    this.assert(0 === itemsCount, 'expected #{this} to be empty', 'expected #{this} not to be empty');
  });
  /**
   * ### .arguments
   *
   * Asserts that the target is an `arguments` object.
   *
   *     function test () {
   *       expect(arguments).to.be.arguments;
   *     }
   *
   *     test();
   *
   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often
   * best to assert which type the target is expected to be, rather than
   * asserting that its not an `arguments` object.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.arguments; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({}, 'nooo why fail??').to.be.arguments;
   *
   * The alias `.Arguments` can be used interchangeably with `.arguments`.
   *
   * @name arguments
   * @alias Arguments
   * @namespace BDD
   * @api public
   */

  function checkArguments() {
    var obj = flag(this, 'object'),
        type = _.type(obj);

    this.assert('Arguments' === type, 'expected #{this} to be arguments but got ' + type, 'expected #{this} to not be arguments');
  }

  Assertion.addProperty('arguments', checkArguments);
  Assertion.addProperty('Arguments', checkArguments);
  /**
   * ### .equal(val[, msg])
   *
   * Asserts that the target is strictly (`===`) equal to the given `val`.
   *
   *     expect(1).to.equal(1);
   *     expect('foo').to.equal('foo');
   * 
   * Add `.deep` earlier in the chain to use deep equality instead. See the
   * `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) equals `{a: 1}`
   *     expect({a: 1}).to.deep.equal({a: 1});
   *     expect({a: 1}).to.not.equal({a: 1});
   *
   *     // Target array deeply (but not strictly) equals `[1, 2]`
   *     expect([1, 2]).to.deep.equal([1, 2]);
   *     expect([1, 2]).to.not.equal([1, 2]);
   *
   * Add `.not` earlier in the chain to negate `.equal`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to one of countless unexpected values.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.equal(2); // Not recommended
   *
   * `.equal` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.equal(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.equal(2);
   *
   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.
   *
   * @name equal
   * @alias equals
   * @alias eq
   * @param {Mixed} val
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertEqual(val, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');

    if (flag(this, 'deep')) {
      return this.eql(val);
    } else {
      this.assert(val === obj, 'expected #{this} to equal #{exp}', 'expected #{this} to not equal #{exp}', val, this._obj, true);
    }
  }

  Assertion.addMethod('equal', assertEqual);
  Assertion.addMethod('equals', assertEqual);
  Assertion.addMethod('eq', assertEqual);
  /**
   * ### .eql(obj[, msg])
   *
   * Asserts that the target is deeply equal to the given `obj`. See the
   * `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target object is deeply (but not strictly) equal to {a: 1}
   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});
   *
   *     // Target array is deeply (but not strictly) equal to [1, 2]
   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);
   *
   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best
   * to assert that the target is deeply equal to its expected value, rather
   * than not deeply equal to one of countless unexpected values.
   *
   *     expect({a: 1}).to.eql({a: 1}); // Recommended
   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended
   *
   * `.eql` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');
   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});
   *
   * The alias `.eqls` can be used interchangeably with `.eql`.
   *
   * The `.deep.equal` assertion is almost identical to `.eql` but with one
   * difference: `.deep.equal` causes deep equality comparisons to also be used
   * for any other assertions that follow in the chain.
   *
   * @name eql
   * @alias eqls
   * @param {Mixed} obj
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertEql(obj, msg) {
    if (msg) flag(this, 'message', msg);
    this.assert(_.eql(obj, flag(this, 'object')), 'expected #{this} to deeply equal #{exp}', 'expected #{this} to not deeply equal #{exp}', obj, this._obj, true);
  }

  Assertion.addMethod('eql', assertEql);
  Assertion.addMethod('eqls', assertEql);
  /**
   * ### .above(n[, msg])
   *
   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.above(1); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the value of the
   * target's `length` property is greater than the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.above(2); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.above`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(1).to.not.be.above(2); // Not recommended
   *
   * `.above` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.above(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.above(2);
   *
   * The aliases `.gt` and `.greaterThan` can be used interchangeably with
   * `.above`.
   *
   * @name above
   * @alias gt
   * @alias greaterThan
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertAbove(n, msg) {
    if (msg) flag(this, 'message', msg);

    var obj = flag(this, 'object'),
        doLength = flag(this, 'doLength'),
        flagMsg = flag(this, 'message'),
        msgPrefix = flagMsg ? flagMsg + ': ' : '',
        ssfi = flag(this, 'ssfi'),
        objType = _.type(obj).toLowerCase(),
        nType = _.type(n).toLowerCase(),
        shouldThrow = true;

    if (doLength) {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && objType === 'date' && nType !== 'date') {
      errorMessage = msgPrefix + 'the argument to above must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to above must be a number';
    } else if (!doLength && objType !== 'date' && objType !== 'number') {
      var printObj = objType === 'string' ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var len = obj.length;
      this.assert(len > n, 'expected #{this} to have a length above #{exp} but got #{act}', 'expected #{this} to not have a length above #{exp}', n, len);
    } else {
      this.assert(obj > n, 'expected #{this} to be above #{exp}', 'expected #{this} to be at most #{exp}', n);
    }
  }

  Assertion.addMethod('above', assertAbove);
  Assertion.addMethod('gt', assertAbove);
  Assertion.addMethod('greaterThan', assertAbove);
  /**
   * ### .least(n[, msg])
   *
   * Asserts that the target is a number or a date greater than or equal to the given
   * number or date `n` respectively. However, it's often best to assert that the target is equal to
   * its expected value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.at.least(1); // Not recommended
   *     expect(2).to.be.at.least(2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the value of the
   * target's `length` property is greater than or equal to the given number
   * `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.least`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.at.least(2); // Not recommended
   *
   * `.least` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.at.least(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.at.least(2);
   *
   * The alias `.gte` can be used interchangeably with `.least`.
   *
   * @name least
   * @alias gte
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertLeast(n, msg) {
    if (msg) flag(this, 'message', msg);

    var obj = flag(this, 'object'),
        doLength = flag(this, 'doLength'),
        flagMsg = flag(this, 'message'),
        msgPrefix = flagMsg ? flagMsg + ': ' : '',
        ssfi = flag(this, 'ssfi'),
        objType = _.type(obj).toLowerCase(),
        nType = _.type(n).toLowerCase(),
        shouldThrow = true;

    if (doLength) {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && objType === 'date' && nType !== 'date') {
      errorMessage = msgPrefix + 'the argument to least must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to least must be a number';
    } else if (!doLength && objType !== 'date' && objType !== 'number') {
      var printObj = objType === 'string' ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var len = obj.length;
      this.assert(len >= n, 'expected #{this} to have a length at least #{exp} but got #{act}', 'expected #{this} to have a length below #{exp}', n, len);
    } else {
      this.assert(obj >= n, 'expected #{this} to be at least #{exp}', 'expected #{this} to be below #{exp}', n);
    }
  }

  Assertion.addMethod('least', assertLeast);
  Assertion.addMethod('gte', assertLeast);
  /**
   * ### .below(n[, msg])
   *
   * Asserts that the target is a number or a date less than the given number or date `n` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.below(2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the value of the
   * target's `length` property is less than the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.below(4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.length(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.below`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.be.below(1); // Not recommended
   *
   * `.below` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(2).to.be.below(1, 'nooo why fail??');
   *     expect(2, 'nooo why fail??').to.be.below(1);
   *
   * The aliases `.lt` and `.lessThan` can be used interchangeably with
   * `.below`.
   *
   * @name below
   * @alias lt
   * @alias lessThan
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertBelow(n, msg) {
    if (msg) flag(this, 'message', msg);

    var obj = flag(this, 'object'),
        doLength = flag(this, 'doLength'),
        flagMsg = flag(this, 'message'),
        msgPrefix = flagMsg ? flagMsg + ': ' : '',
        ssfi = flag(this, 'ssfi'),
        objType = _.type(obj).toLowerCase(),
        nType = _.type(n).toLowerCase(),
        shouldThrow = true;

    if (doLength) {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && objType === 'date' && nType !== 'date') {
      errorMessage = msgPrefix + 'the argument to below must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to below must be a number';
    } else if (!doLength && objType !== 'date' && objType !== 'number') {
      var printObj = objType === 'string' ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var len = obj.length;
      this.assert(len < n, 'expected #{this} to have a length below #{exp} but got #{act}', 'expected #{this} to not have a length below #{exp}', n, len);
    } else {
      this.assert(obj < n, 'expected #{this} to be below #{exp}', 'expected #{this} to be at least #{exp}', n);
    }
  }

  Assertion.addMethod('below', assertBelow);
  Assertion.addMethod('lt', assertBelow);
  Assertion.addMethod('lessThan', assertBelow);
  /**
   * ### .most(n[, msg])
   *
   * Asserts that the target is a number or a date less than or equal to the given number
   * or date `n` respectively. However, it's often best to assert that the target is equal to its
   * expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.at.most(2); // Not recommended
   *     expect(1).to.be.at.most(1); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the value of the
   * target's `length` property is less than or equal to the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.most`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.be.at.most(1); // Not recommended
   *
   * `.most` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(2).to.be.at.most(1, 'nooo why fail??');
   *     expect(2, 'nooo why fail??').to.be.at.most(1);
   *
   * The alias `.lte` can be used interchangeably with `.most`.
   *
   * @name most
   * @alias lte
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertMost(n, msg) {
    if (msg) flag(this, 'message', msg);

    var obj = flag(this, 'object'),
        doLength = flag(this, 'doLength'),
        flagMsg = flag(this, 'message'),
        msgPrefix = flagMsg ? flagMsg + ': ' : '',
        ssfi = flag(this, 'ssfi'),
        objType = _.type(obj).toLowerCase(),
        nType = _.type(n).toLowerCase(),
        shouldThrow = true;

    if (doLength) {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && objType === 'date' && nType !== 'date') {
      errorMessage = msgPrefix + 'the argument to most must be a date';
    } else if (nType !== 'number' && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the argument to most must be a number';
    } else if (!doLength && objType !== 'date' && objType !== 'number') {
      var printObj = objType === 'string' ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var len = obj.length;
      this.assert(len <= n, 'expected #{this} to have a length at most #{exp} but got #{act}', 'expected #{this} to have a length above #{exp}', n, len);
    } else {
      this.assert(obj <= n, 'expected #{this} to be at most #{exp}', 'expected #{this} to be above #{exp}', n);
    }
  }

  Assertion.addMethod('most', assertMost);
  Assertion.addMethod('lte', assertMost);
  /**
   * ### .within(start, finish[, msg])
   *
   * Asserts that the target is a number or a date greater than or equal to the given
   * number or date `start`, and less than or equal to the given number or date `finish` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.within(1, 3); // Not recommended
   *     expect(2).to.be.within(2, 3); // Not recommended
   *     expect(2).to.be.within(1, 2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the value of the
   * target's `length` property is greater than or equal to the given number
   * `start`, and less than or equal to the given number `finish`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.within`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.within(2, 4); // Not recommended
   *
   * `.within` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(4).to.be.within(1, 3, 'nooo why fail??');
   *     expect(4, 'nooo why fail??').to.be.within(1, 3);
   *
   * @name within
   * @param {Number} start lower bound inclusive
   * @param {Number} finish upper bound inclusive
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  Assertion.addMethod('within', function (start, finish, msg) {
    if (msg) flag(this, 'message', msg);

    var obj = flag(this, 'object'),
        doLength = flag(this, 'doLength'),
        flagMsg = flag(this, 'message'),
        msgPrefix = flagMsg ? flagMsg + ': ' : '',
        ssfi = flag(this, 'ssfi'),
        objType = _.type(obj).toLowerCase(),
        startType = _.type(start).toLowerCase(),
        finishType = _.type(finish).toLowerCase(),
        shouldThrow = true,
        range = startType === 'date' && finishType === 'date' ? start.toUTCString() + '..' + finish.toUTCString() : start + '..' + finish;

    if (doLength) {
      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    }

    if (!doLength && objType === 'date' && (startType !== 'date' || finishType !== 'date')) {
      errorMessage = msgPrefix + 'the arguments to within must be dates';
    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {
      errorMessage = msgPrefix + 'the arguments to within must be numbers';
    } else if (!doLength && objType !== 'date' && objType !== 'number') {
      var printObj = objType === 'string' ? "'" + obj + "'" : obj;
      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';
    } else {
      shouldThrow = false;
    }

    if (shouldThrow) {
      throw new AssertionError(errorMessage, undefined, ssfi);
    }

    if (doLength) {
      var len = obj.length;
      this.assert(len >= start && len <= finish, 'expected #{this} to have a length within ' + range, 'expected #{this} to not have a length within ' + range);
    } else {
      this.assert(obj >= start && obj <= finish, 'expected #{this} to be within ' + range, 'expected #{this} to not be within ' + range);
    }
  });
  /**
   * ### .instanceof(constructor[, msg])
   *
   * Asserts that the target is an instance of the given `constructor`.
   *
   *     function Cat () { }
   *
   *     expect(new Cat()).to.be.an.instanceof(Cat);
   *     expect([1, 2]).to.be.an.instanceof(Array);
   *
   * Add `.not` earlier in the chain to negate `.instanceof`.
   *
   *     expect({a: 1}).to.not.be.an.instanceof(Array);
   *
   * `.instanceof` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);
   *
   * Due to limitations in ES5, `.instanceof` may not always work as expected
   * when using a transpiler such as Babel or TypeScript. In particular, it may
   * produce unexpected results when subclassing built-in object such as
   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:
   *
   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))
   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))
   *
   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.
   *
   * @name instanceof
   * @param {Constructor} constructor
   * @param {String} msg _optional_
   * @alias instanceOf
   * @namespace BDD
   * @api public
   */

  function assertInstanceOf(constructor, msg) {
    if (msg) flag(this, 'message', msg);
    var target = flag(this, 'object');
    var ssfi = flag(this, 'ssfi');
    var flagMsg = flag(this, 'message');

    try {
      var isInstanceOf = target instanceof constructor;
    } catch (err) {
      if (err instanceof TypeError) {
        flagMsg = flagMsg ? flagMsg + ': ' : '';
        throw new AssertionError(flagMsg + 'The instanceof assertion needs a constructor but ' + _.type(constructor) + ' was given.', undefined, ssfi);
      }

      throw err;
    }

    var name = _.getName(constructor);

    if (name === null) {
      name = 'an unnamed constructor';
    }

    this.assert(isInstanceOf, 'expected #{this} to be an instance of ' + name, 'expected #{this} to not be an instance of ' + name);
  }
  Assertion.addMethod('instanceof', assertInstanceOf);
  Assertion.addMethod('instanceOf', assertInstanceOf);
  /**
   * ### .property(name[, val[, msg]])
   *
   * Asserts that the target has a property with the given key `name`.
   *
   *     expect({a: 1}).to.have.property('a');
   *
   * When `val` is provided, `.property` also asserts that the property's value
   * is equal to the given `val`.
   *
   *     expect({a: 1}).to.have.property('a', 1);
   *
   * By default, strict (`===`) equality is used. Add `.deep` earlier in the
   * chain to use deep equality instead. See the `deep-eql` project page for
   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) has property `x: {a: 1}`
   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});
   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});
   *
   * The target's enumerable and non-enumerable properties are always included
   * in the search. By default, both own and inherited properties are included.
   * Add `.own` earlier in the chain to exclude inherited properties from the
   * search.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.have.own.property('a');
   *     expect({a: 1}).to.have.own.property('a', 1);
   *     expect({a: 1}).to.have.property('b').but.not.own.property('b'); 
   *
   * `.deep` and `.own` can be combined.
   *
   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});
   *
   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when
   * referencing nested properties.
   *
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\.a.\\[b\\]');
   *
   * `.deep` and `.nested` can be combined.
   *
   *     expect({a: {b: [{c: 3}]}})
   *       .to.have.deep.nested.property('a.b[0]', {c: 3});
   *
   * `.own` and `.nested` cannot be combined.
   *
   * Add `.not` earlier in the chain to negate `.property`.
   *
   *     expect({a: 1}).to.not.have.property('b');
   * 
   * However, it's dangerous to negate `.property` when providing `val`. The
   * problem is that it creates uncertain expectations by asserting that the
   * target either doesn't have a property with the given key `name`, or that it
   * does have a property with the given key `name` but its value isn't equal to
   * the given `val`. It's often best to identify the exact output that's
   * expected, and then write an assertion that only accepts that exact output.
   *
   * When the target isn't expected to have a property with the given key
   * `name`, it's often best to assert exactly that.
   *
   *     expect({b: 2}).to.not.have.property('a'); // Recommended
   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended
   *
   * When the target is expected to have a property with the given key `name`,
   * it's often best to assert that the property has its expected value, rather
   * than asserting that it doesn't have one of many unexpected values.
   *
   *     expect({a: 3}).to.have.property('a', 3); // Recommended
   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended
   *
   * `.property` changes the target of any assertions that follow in the chain
   * to be the value of the property from the original target object.
   *
   *     expect({a: 1}).to.have.property('a').that.is.a('number');
   *
   * `.property` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing `val`, only use the
   * second form.
   *
   *     // Recommended
   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');
   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);
   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');
   *
   *     // Not recommended
   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');
   * 
   * The above assertion isn't the same thing as not providing `val`. Instead,
   * it's asserting that the target object has a `b` property that's equal to
   * `undefined`.
   *
   * The assertions `.ownProperty` and `.haveOwnProperty` can be used
   * interchangeably with `.own.property`.
   *
   * @name property
   * @param {String} name
   * @param {Mixed} val (optional)
   * @param {String} msg _optional_
   * @returns value of property for chaining
   * @namespace BDD
   * @api public
   */

  function assertProperty(name, val, msg) {
    if (msg) flag(this, 'message', msg);
    var isNested = flag(this, 'nested'),
        isOwn = flag(this, 'own'),
        flagMsg = flag(this, 'message'),
        obj = flag(this, 'object'),
        ssfi = flag(this, 'ssfi');

    if (isNested && isOwn) {
      flagMsg = flagMsg ? flagMsg + ': ' : '';
      throw new AssertionError(flagMsg + 'The "nested" and "own" flags cannot be combined.', undefined, ssfi);
    }

    if (obj === null || obj === undefined) {
      flagMsg = flagMsg ? flagMsg + ': ' : '';
      throw new AssertionError(flagMsg + 'Target cannot be null or undefined.', undefined, ssfi);
    }

    var isDeep = flag(this, 'deep'),
        negate = flag(this, 'negate'),
        pathInfo = isNested ? _.getPathInfo(obj, name) : null,
        value = isNested ? pathInfo.value : obj[name];
    var descriptor = '';
    if (isDeep) descriptor += 'deep ';
    if (isOwn) descriptor += 'own ';
    if (isNested) descriptor += 'nested ';
    descriptor += 'property ';
    var hasProperty;
    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);else if (isNested) hasProperty = pathInfo.exists;else hasProperty = _.hasProperty(obj, name); // When performing a negated assertion for both name and val, merely having
    // a property with the given name isn't enough to cause the assertion to
    // fail. It must both have a property with the given name, and the value of
    // that property must equal the given val. Therefore, skip this assertion in
    // favor of the next.

    if (!negate || arguments.length === 1) {
      this.assert(hasProperty, 'expected #{this} to have ' + descriptor + _.inspect(name), 'expected #{this} to not have ' + descriptor + _.inspect(name));
    }

    if (arguments.length > 1) {
      this.assert(hasProperty && (isDeep ? _.eql(val, value) : val === value), 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}', 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}', val, value);
    }

    flag(this, 'object', value);
  }

  Assertion.addMethod('property', assertProperty);

  function assertOwnProperty(name, value, msg) {
    flag(this, 'own', true);
    assertProperty.apply(this, arguments);
  }

  Assertion.addMethod('ownProperty', assertOwnProperty);
  Assertion.addMethod('haveOwnProperty', assertOwnProperty);
  /**
   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])
   *
   * Asserts that the target has its own property descriptor with the given key
   * `name`. Enumerable and non-enumerable properties are included in the
   * search.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');
   *
   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that
   * the property's descriptor is deeply equal to the given `descriptor`. See
   * the `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.
   *
   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');
   * 
   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing
   * a `descriptor`. The problem is that it creates uncertain expectations by
   * asserting that the target either doesn't have a property descriptor with
   * the given key `name`, or that it does have a property descriptor with the
   * given key `name` but its not deeply equal to the given `descriptor`. It's
   * often best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to have a property descriptor with the given
   * key `name`, it's often best to assert exactly that.
   *
   *     // Recommended
   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');
   *
   *     // Not recommended
   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * When the target is expected to have a property descriptor with the given
   * key `name`, it's often best to assert that the property has its expected
   * descriptor, rather than asserting that it doesn't have one of many
   * unexpected descriptors.
   *
   *     // Recommended
   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 3,
   *     });
   *
   *     // Not recommended
   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * `.ownPropertyDescriptor` changes the target of any assertions that follow
   * in the chain to be the value of the property descriptor from the original
   * target object.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')
   *       .that.has.property('enumerable', true);
   *
   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a
   * custom error message to show when the assertion fails. The message can also
   * be given as the second argument to `expect`. When not providing
   * `descriptor`, only use the second form.
   *
   *     // Recommended
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 2,
   *     }, 'nooo why fail??');
   *
   *     // Recommended
   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 2,
   *     });
   * 
   *     // Recommended
   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');
   *
   *     // Not recommended
   *     expect({a: 1})
   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');
   *
   * The above assertion isn't the same thing as not providing `descriptor`.
   * Instead, it's asserting that the target object has a `b` property
   * descriptor that's deeply equal to `undefined`.
   *
   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with
   * `.ownPropertyDescriptor`.
   *
   * @name ownPropertyDescriptor
   * @alias haveOwnPropertyDescriptor
   * @param {String} name
   * @param {Object} descriptor _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertOwnPropertyDescriptor(name, descriptor, msg) {
    if (typeof descriptor === 'string') {
      msg = descriptor;
      descriptor = null;
    }

    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);

    if (actualDescriptor && descriptor) {
      this.assert(_.eql(descriptor, actualDescriptor), 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor), 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor), descriptor, actualDescriptor, true);
    } else {
      this.assert(actualDescriptor, 'expected #{this} to have an own property descriptor for ' + _.inspect(name), 'expected #{this} to not have an own property descriptor for ' + _.inspect(name));
    }

    flag(this, 'object', actualDescriptor);
  }

  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);
  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);
  /**
   * ### .lengthOf(n[, msg])
   *
   * Asserts that the target's `length` property is equal to the given number
   * `n`.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3);
   *     expect('foo').to.have.lengthOf(3);
   *
   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often
   * best to assert that the target's `length` property is equal to its expected
   * value, rather than not equal to one of many unexpected values.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.not.have.lengthOf(4); // Not recommended
   *
   * `.lengthOf` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');
   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);
   *
   * `.lengthOf` can also be used as a language chain, causing all `.above`,
   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the
   * chain to use the target's `length` property as the target. However, it's
   * often best to assert that the target's `length` property is equal to its
   * expected length, rather than asserting that its `length` property falls
   * within some range of values.
   *
   *     // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf(3);
   *
   *     // Not recommended
   *     expect([1, 2, 3]).to.have.lengthOf.above(2);
   *     expect([1, 2, 3]).to.have.lengthOf.below(4);
   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);
   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);
   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);
   *
   * Due to a compatibility issue, the alias `.length` can't be chained directly
   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used
   * interchangeably with `.lengthOf` in every situation. It's recommended to
   * always use `.lengthOf` instead of `.length`.
   *
   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error
   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected
   *
   * @name lengthOf
   * @alias length
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertLengthChain() {
    flag(this, 'doLength', true);
  }

  function assertLength(n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object'),
        flagMsg = flag(this, 'message'),
        ssfi = flag(this, 'ssfi');
    new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');
    var len = obj.length;
    this.assert(len == n, 'expected #{this} to have a length of #{exp} but got #{act}', 'expected #{this} to not have a length of #{act}', n, len);
  }

  Assertion.addChainableMethod('length', assertLength, assertLengthChain);
  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);
  /**
   * ### .match(re[, msg])
   *
   * Asserts that the target matches the given regular expression `re`.
   *
   *     expect('foobar').to.match(/^foo/);
   *
   * Add `.not` earlier in the chain to negate `.match`.
   *
   *     expect('foobar').to.not.match(/taco/);
   *
   * `.match` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect('foobar').to.match(/taco/, 'nooo why fail??');
   *     expect('foobar', 'nooo why fail??').to.match(/taco/);
   *
   * The alias `.matches` can be used interchangeably with `.match`.
   *
   * @name match
   * @alias matches
   * @param {RegExp} re
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertMatch(re, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    this.assert(re.exec(obj), 'expected #{this} to match ' + re, 'expected #{this} not to match ' + re);
  }

  Assertion.addMethod('match', assertMatch);
  Assertion.addMethod('matches', assertMatch);
  /**
   * ### .string(str[, msg])
   *
   * Asserts that the target string contains the given substring `str`.
   *
   *     expect('foobar').to.have.string('bar');
   *
   * Add `.not` earlier in the chain to negate `.string`.
   *
   *     expect('foobar').to.not.have.string('taco');
   *
   * `.string` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect('foobar').to.have.string(/taco/, 'nooo why fail??');
   *     expect('foobar', 'nooo why fail??').to.have.string(/taco/);
   *
   * @name string
   * @param {String} str
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  Assertion.addMethod('string', function (str, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object'),
        flagMsg = flag(this, 'message'),
        ssfi = flag(this, 'ssfi');
    new Assertion(obj, flagMsg, ssfi, true).is.a('string');
    this.assert(~obj.indexOf(str), 'expected #{this} to contain ' + _.inspect(str), 'expected #{this} to not contain ' + _.inspect(str));
  });
  /**
   * ### .keys(key1[, key2[, ...]])
   *
   * Asserts that the target object, array, map, or set has the given keys. Only
   * the target's own inherited properties are included in the search. 
   *
   * When the target is an object or array, keys can be provided as one or more
   * string arguments, a single array argument, or a single object argument. In
   * the latter case, only the keys in the given object matter; the values are
   * ignored.
   *
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *     expect(['x', 'y']).to.have.all.keys(0, 1);
   *
   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);
   *     expect(['x', 'y']).to.have.all.keys([0, 1]);
   *
   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5
   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5
   *
   * When the target is a map or set, each key must be provided as a separate
   * argument.
   *
   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');
   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');
   *
   * Because `.keys` does different things based on the target's type, it's
   * important to check the target's type before using `.keys`. See the `.a` doc
   * for info on testing a target's type.
   *
   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');
   *
   * By default, strict (`===`) equality is used to compare keys of maps and
   * sets. Add `.deep` earlier in the chain to use deep equality instead. See
   * the `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target set deeply (but not strictly) has key `{a: 1}`
   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);
   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);
   *
   * By default, the target must have all of the given keys and no more. Add
   * `.any` earlier in the chain to only require that the target have at least
   * one of the given keys. Also, add `.not` earlier in the chain to negate
   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use
   * `.all` when asserting `.keys` without negation.
   *
   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts
   * exactly what's expected of the output, whereas `.not.all.keys` creates
   * uncertain expectations.
   *
   *     // Recommended; asserts that target doesn't have any of the given keys
   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
   *
   *     // Not recommended; asserts that target doesn't have all of the given
   *     // keys but may or may not have some of them
   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');
   *
   * When asserting `.keys` without negation, `.all` is preferred because
   * `.all.keys` asserts exactly what's expected of the output, whereas
   * `.any.keys` creates uncertain expectations.
   *
   *     // Recommended; asserts that target has all the given keys
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *
   *     // Not recommended; asserts that target has at least one of the given
   *     // keys but may or may not have more of them
   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');
   *
   * Note that `.all` is used by default when neither `.all` nor `.any` appear
   * earlier in the chain. However, it's often best to add `.all` anyway because
   * it improves readability.
   *
   *     // Both assertions are identical
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended
   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended
   *
   * Add `.include` earlier in the chain to require that the target's keys be a
   * superset of the expected keys, rather than identical sets.
   *
   *     // Target object's keys are a superset of ['a', 'b'] but not identical
   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');
   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');
   *
   * However, if `.any` and `.include` are combined, only the `.any` takes
   * effect. The `.include` is ignored in this case.
   *
   *     // Both assertions are identical
   *     expect({a: 1}).to.have.any.keys('a', 'b');
   *     expect({a: 1}).to.include.any.keys('a', 'b');
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');
   *
   * The alias `.key` can be used interchangeably with `.keys`.
   *
   * @name keys
   * @alias key
   * @param {...String|Array|Object} keys
   * @namespace BDD
   * @api public
   */

  function assertKeys(keys) {
    var obj = flag(this, 'object'),
        objType = _.type(obj),
        keysType = _.type(keys),
        ssfi = flag(this, 'ssfi'),
        isDeep = flag(this, 'deep'),
        str,
        deepStr = '',
        ok = true,
        flagMsg = flag(this, 'message');

    flagMsg = flagMsg ? flagMsg + ': ' : '';
    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';

    if (objType === 'Map' || objType === 'Set') {
      deepStr = isDeep ? 'deeply ' : '';
      actual = []; // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.

      obj.forEach(function (val, key) {
        actual.push(key);
      });

      if (keysType !== 'Array') {
        keys = Array.prototype.slice.call(arguments);
      }
    } else {
      actual = _.getOwnEnumerableProperties(obj);

      switch (keysType) {
        case 'Array':
          if (arguments.length > 1) {
            throw new AssertionError(mixedArgsMsg, undefined, ssfi);
          }

          break;

        case 'Object':
          if (arguments.length > 1) {
            throw new AssertionError(mixedArgsMsg, undefined, ssfi);
          }

          keys = Object.keys(keys);
          break;

        default:
          keys = Array.prototype.slice.call(arguments);
      } // Only stringify non-Symbols because Symbols would become "Symbol()"


      keys = keys.map(function (val) {
        return typeof val === 'symbol' ? val : String(val);
      });
    }

    if (!keys.length) {
      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);
    }

    var len = keys.length,
        any = flag(this, 'any'),
        all = flag(this, 'all'),
        expected = keys,
        actual;

    if (!any && !all) {
      all = true;
    } // Has any


    if (any) {
      ok = expected.some(function (expectedKey) {
        return actual.some(function (actualKey) {
          if (isDeep) {
            return _.eql(expectedKey, actualKey);
          } else {
            return expectedKey === actualKey;
          }
        });
      });
    } // Has all


    if (all) {
      ok = expected.every(function (expectedKey) {
        return actual.some(function (actualKey) {
          if (isDeep) {
            return _.eql(expectedKey, actualKey);
          } else {
            return expectedKey === actualKey;
          }
        });
      });

      if (!flag(this, 'contains')) {
        ok = ok && keys.length == actual.length;
      }
    } // Key string


    if (len > 1) {
      keys = keys.map(function (key) {
        return _.inspect(key);
      });
      var last = keys.pop();

      if (all) {
        str = keys.join(', ') + ', and ' + last;
      }

      if (any) {
        str = keys.join(', ') + ', or ' + last;
      }
    } else {
      str = _.inspect(keys[0]);
    } // Form


    str = (len > 1 ? 'keys ' : 'key ') + str; // Have / include

    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str; // Assertion

    this.assert(ok, 'expected #{this} to ' + deepStr + str, 'expected #{this} to not ' + deepStr + str, expected.slice(0).sort(_.compareByInspect), actual.sort(_.compareByInspect), true);
  }

  Assertion.addMethod('keys', assertKeys);
  Assertion.addMethod('key', assertKeys);
  /**
   * ### .throw([errorLike], [errMsgMatcher], [msg])
   *
   * When no arguments are provided, `.throw` invokes the target function and
   * asserts that an error is thrown.
   * 
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw();
   *
   * When one argument is provided, and it's an error constructor, `.throw`
   * invokes the target function and asserts that an error is thrown that's an
   * instance of that error constructor.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(TypeError);
   *
   * When one argument is provided, and it's an error instance, `.throw` invokes
   * the target function and asserts that an error is thrown that's strictly
   * (`===`) equal to that error instance.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(err);
   *
   * When one argument is provided, and it's a string, `.throw` invokes the
   * target function and asserts that an error is thrown with a message that
   * contains that string.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw('salmon');
   *
   * When one argument is provided, and it's a regular expression, `.throw`
   * invokes the target function and asserts that an error is thrown with a
   * message that matches that regular expression.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(/salmon/);
   *
   * When two arguments are provided, and the first is an error instance or
   * constructor, and the second is a string or regular expression, `.throw`
   * invokes the function and asserts that an error is thrown that fulfills both
   * conditions as described above.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(TypeError, 'salmon');
   *     expect(badFn).to.throw(TypeError, /salmon/);
   *     expect(badFn).to.throw(err, 'salmon');
   *     expect(badFn).to.throw(err, /salmon/);
   *
   * Add `.not` earlier in the chain to negate `.throw`.
   *     
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.not.throw();
   * 
   * However, it's dangerous to negate `.throw` when providing any arguments.
   * The problem is that it creates uncertain expectations by asserting that the
   * target either doesn't throw an error, or that it throws an error but of a
   * different type than the given type, or that it throws an error of the given
   * type but with a message that doesn't include the given string. It's often
   * best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to throw an error, it's often best to assert
   * exactly that.
   *
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.not.throw(); // Recommended
   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended
   *
   * When the target is expected to throw an error, it's often best to assert
   * that the error is of its expected type, and has a message that includes an
   * expected string, rather than asserting that it doesn't have one of many
   * unexpected types, and doesn't have a message that includes some string.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended
   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended
   *
   * `.throw` changes the target of any assertions that follow in the chain to
   * be the error object that's thrown.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     err.code = 42;
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(TypeError).with.property('code', 42);
   *
   * `.throw` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`. When not providing two arguments, always use
   * the second form.
   *
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');
   *     expect(goodFn, 'nooo why fail??').to.throw();
   *
   * Due to limitations in ES5, `.throw` may not always work as expected when
   * using a transpiler such as Babel or TypeScript. In particular, it may
   * produce unexpected results when subclassing the built-in `Error` object and
   * then passing the subclassed constructor to `.throw`. See your transpiler's
   * docs for details:
   *
   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))
   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))
   *
   * Beware of some common mistakes when using the `throw` assertion. One common
   * mistake is to accidentally invoke the function yourself instead of letting
   * the `throw` assertion invoke the function for you. For example, when
   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as
   * the target for the assertion.
   *
   *     expect(fn).to.throw();     // Good! Tests `fn` as desired
   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`
   *
   * If you need to assert that your function `fn` throws when passed certain
   * arguments, then wrap a call to `fn` inside of another function.
   *
   *     expect(function () { fn(42); }).to.throw();  // Function expression
   *     expect(() => fn(42)).to.throw();             // ES6 arrow function
   *
   * Another common mistake is to provide an object method (or any stand-alone
   * function that relies on `this`) as the target of the assertion. Doing so is
   * problematic because the `this` context will be lost when the function is
   * invoked by `.throw`; there's no way for it to know what `this` is supposed
   * to be. There are two ways around this problem. One solution is to wrap the
   * method or function call inside of another function. Another solution is to
   * use `bind`.
   *
   *     expect(function () { cat.meow(); }).to.throw();  // Function expression
   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function
   *     expect(cat.meow.bind(cat)).to.throw();           // Bind
   *
   * Finally, it's worth mentioning that it's a best practice in JavaScript to
   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,
   * `TypeError`, and user-defined objects that extend `Error`. No other type of
   * value will generate a stack trace when initialized. With that said, the
   * `throw` assertion does technically support any type of value being thrown,
   * not just `Error` and its derivatives.
   *
   * The aliases `.throws` and `.Throw` can be used interchangeably with
   * `.throw`.
   *
   * @name throw
   * @alias throws
   * @alias Throw
   * @param {Error|ErrorConstructor} errorLike
   * @param {String|RegExp} errMsgMatcher error message
   * @param {String} msg _optional_
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @returns error for chaining (null if no error)
   * @namespace BDD
   * @api public
   */

  function assertThrows(errorLike, errMsgMatcher, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object'),
        ssfi = flag(this, 'ssfi'),
        flagMsg = flag(this, 'message'),
        negate = flag(this, 'negate') || false;
    new Assertion(obj, flagMsg, ssfi, true).is.a('function');

    if (errorLike instanceof RegExp || typeof errorLike === 'string') {
      errMsgMatcher = errorLike;
      errorLike = null;
    }

    var caughtErr;

    try {
      obj();
    } catch (err) {
      caughtErr = err;
    } // If we have the negate flag enabled and at least one valid argument it means we do expect an error
    // but we want it to match a given set of criteria


    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined; // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible
    // See Issue #551 and PR #683@GitHub

    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);
    var errorLikeFail = false;
    var errMsgMatcherFail = false; // Checking if error was thrown

    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {
      // We need this to display results correctly according to their types
      var errorLikeString = 'an error';

      if (errorLike instanceof Error) {
        errorLikeString = '#{exp}';
      } else if (errorLike) {
        errorLikeString = _.checkError.getConstructorName(errorLike);
      }

      this.assert(caughtErr, 'expected #{this} to throw ' + errorLikeString, 'expected #{this} to not throw an error but #{act} was thrown', errorLike && errorLike.toString(), caughtErr instanceof Error ? caughtErr.toString() : typeof caughtErr === 'string' ? caughtErr : caughtErr && _.checkError.getConstructorName(caughtErr));
    }

    if (errorLike && caughtErr) {
      // We should compare instances only if `errorLike` is an instance of `Error`
      if (errorLike instanceof Error) {
        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);

        if (isCompatibleInstance === negate) {
          // These checks were created to ensure we won't fail too soon when we've got both args and a negate
          // See Issue #551 and PR #683@GitHub
          if (everyArgIsDefined && negate) {
            errorLikeFail = true;
          } else {
            this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : ''), errorLike.toString(), caughtErr.toString());
          }
        }
      }

      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);

      if (isCompatibleConstructor === negate) {
        if (everyArgIsDefined && negate) {
          errorLikeFail = true;
        } else {
          this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : ''), errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike), caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr));
        }
      }
    }

    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {
      // Here we check compatible messages
      var placeholder = 'including';

      if (errMsgMatcher instanceof RegExp) {
        placeholder = 'matching';
      }

      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);

      if (isCompatibleMessage === negate) {
        if (everyArgIsDefined && negate) {
          errMsgMatcherFail = true;
        } else {
          this.assert(negate, 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}', 'expected #{this} to throw error not ' + placeholder + ' #{exp}', errMsgMatcher, _.checkError.getMessage(caughtErr));
        }
      }
    } // If both assertions failed and both should've matched we throw an error


    if (errorLikeFail && errMsgMatcherFail) {
      this.assert(negate, 'expected #{this} to throw #{exp} but #{act} was thrown', 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : ''), errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike), caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr));
    }

    flag(this, 'object', caughtErr);
  }
  Assertion.addMethod('throw', assertThrows);
  Assertion.addMethod('throws', assertThrows);
  Assertion.addMethod('Throw', assertThrows);
  /**
   * ### .respondTo(method[, msg])
   *
   * When the target is a non-function object, `.respondTo` asserts that the
   * target has a method with the given name `method`. The method can be own or
   * inherited, and it can be enumerable or non-enumerable.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(new Cat()).to.respondTo('meow');
   *
   * When the target is a function, `.respondTo` asserts that the target's
   * `prototype` property has a method with the given name `method`. Again, the
   * method can be own or inherited, and it can be enumerable or non-enumerable.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(Cat).to.respondTo('meow');
   *
   * Add `.itself` earlier in the chain to force `.respondTo` to treat the
   * target as a non-function object, even if it's a function. Thus, it asserts
   * that the target has a method with the given name `method`, rather than
   * asserting that the target's `prototype` property has a method with the
   * given name `method`.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *     Cat.hiss = function () {};
   *
   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');
   *
   * When not adding `.itself`, it's important to check the target's type before
   * using `.respondTo`. See the `.a` doc for info on checking a target's type.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');
   *
   * Add `.not` earlier in the chain to negate `.respondTo`.
   *
   *     function Dog () {}
   *     Dog.prototype.bark = function () {};
   *
   *     expect(new Dog()).to.not.respondTo('meow');
   *
   * `.respondTo` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect({}).to.respondTo('meow', 'nooo why fail??');
   *     expect({}, 'nooo why fail??').to.respondTo('meow');
   *
   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.
   *
   * @name respondTo
   * @alias respondsTo
   * @param {String} method
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function respondTo(method, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object'),
        itself = flag(this, 'itself'),
        context = 'function' === typeof obj && !itself ? obj.prototype[method] : obj[method];
    this.assert('function' === typeof context, 'expected #{this} to respond to ' + _.inspect(method), 'expected #{this} to not respond to ' + _.inspect(method));
  }

  Assertion.addMethod('respondTo', respondTo);
  Assertion.addMethod('respondsTo', respondTo);
  /**
   * ### .itself
   *
   * Forces all `.respondTo` assertions that follow in the chain to behave as if
   * the target is a non-function object, even if it's a function. Thus, it
   * causes `.respondTo` to assert that the target has a method with the given
   * name, rather than asserting that the target's `prototype` property has a
   * method with the given name.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *     Cat.hiss = function () {};
   *
   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');
   *
   * @name itself
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('itself', function () {
    flag(this, 'itself', true);
  });
  /**
   * ### .satisfy(matcher[, msg])
   *
   * Invokes the given `matcher` function with the target being passed as the
   * first argument, and asserts that the value returned is truthy.
   *
   *     expect(1).to.satisfy(function(num) {
   *       return num > 0; 
   *     });
   *
   * Add `.not` earlier in the chain to negate `.satisfy`.
   *
   *     expect(1).to.not.satisfy(function(num) {
   *       return num > 2;
   *     });
   *
   * `.satisfy` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1).to.satisfy(function(num) {
   *       return num > 2;
   *     }, 'nooo why fail??');
   *
   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {
   *       return num > 2;
   *     });
   *
   * The alias `.satisfies` can be used interchangeably with `.satisfy`.
   *
   * @name satisfy
   * @alias satisfies
   * @param {Function} matcher
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function satisfy(matcher, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var result = matcher(obj);
    this.assert(result, 'expected #{this} to satisfy ' + _.objDisplay(matcher), 'expected #{this} to not satisfy' + _.objDisplay(matcher), flag(this, 'negate') ? false : true, result);
  }

  Assertion.addMethod('satisfy', satisfy);
  Assertion.addMethod('satisfies', satisfy);
  /**
   * ### .closeTo(expected, delta[, msg])
   *
   * Asserts that the target is a number that's within a given +/- `delta` range
   * of the given number `expected`. However, it's often best to assert that the
   * target is equal to its expected value.
   *
   *     // Recommended
   *     expect(1.5).to.equal(1.5);
   *
   *     // Not recommended
   *     expect(1.5).to.be.closeTo(1, 0.5);
   *     expect(1.5).to.be.closeTo(2, 0.5);
   *     expect(1.5).to.be.closeTo(1, 1);
   *
   * Add `.not` earlier in the chain to negate `.closeTo`.
   *
   *     expect(1.5).to.equal(1.5); // Recommended
   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended
   *
   * `.closeTo` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');
   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);
   *
   * The alias `.approximately` can be used interchangeably with `.closeTo`.
   *
   * @name closeTo
   * @alias approximately
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function closeTo(expected, delta, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object'),
        flagMsg = flag(this, 'message'),
        ssfi = flag(this, 'ssfi');
    new Assertion(obj, flagMsg, ssfi, true).is.a('number');

    if (typeof expected !== 'number' || typeof delta !== 'number') {
      flagMsg = flagMsg ? flagMsg + ': ' : '';
      throw new AssertionError(flagMsg + 'the arguments to closeTo or approximately must be numbers', undefined, ssfi);
    }

    this.assert(Math.abs(obj - expected) <= delta, 'expected #{this} to be close to ' + expected + ' +/- ' + delta, 'expected #{this} not to be close to ' + expected + ' +/- ' + delta);
  }

  Assertion.addMethod('closeTo', closeTo);
  Assertion.addMethod('approximately', closeTo); // Note: Duplicates are ignored if testing for inclusion instead of sameness.

  function isSubsetOf(subset, superset, cmp, contains, ordered) {
    if (!contains) {
      if (subset.length !== superset.length) return false;
      superset = superset.slice();
    }

    return subset.every(function (elem, idx) {
      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];

      if (!cmp) {
        var matchIdx = superset.indexOf(elem);
        if (matchIdx === -1) return false; // Remove match from superset so not counted twice if duplicate in subset.

        if (!contains) superset.splice(matchIdx, 1);
        return true;
      }

      return superset.some(function (elem2, matchIdx) {
        if (!cmp(elem, elem2)) return false; // Remove match from superset so not counted twice if duplicate in subset.

        if (!contains) superset.splice(matchIdx, 1);
        return true;
      });
    });
  }
  /**
   * ### .members(set[, msg])
   *
   * Asserts that the target array has the same members as the given array
   * `set`.
   *
   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);
   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);
   *
   * By default, members are compared using strict (`===`) equality. Add `.deep`
   * earlier in the chain to use deep equality instead. See the `deep-eql`
   * project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target array deeply (but not strictly) has member `{a: 1}`
   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);
   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);
   *
   * By default, order doesn't matter. Add `.ordered` earlier in the chain to
   * require that members appear in the same order.
   *
   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);
   *     expect([1, 2, 3]).to.have.members([2, 1, 3])
   *       .but.not.ordered.members([2, 1, 3]);
   *
   * By default, both arrays must be the same size. Add `.include` earlier in
   * the chain to require that the target's members be a superset of the
   * expected members. Note that duplicates are ignored in the subset when
   * `.include` is added.
   *
   *     // Target array is a superset of [1, 2] but not identical
   *     expect([1, 2, 3]).to.include.members([1, 2]);
   *     expect([1, 2, 3]).to.not.have.members([1, 2]);
   *
   *     // Duplicates in the subset are ignored
   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);
   *
   * `.deep`, `.ordered`, and `.include` can all be combined. However, if
   * `.include` and `.ordered` are combined, the ordering begins at the start of
   * both arrays.
   *
   *     expect([{a: 1}, {b: 2}, {c: 3}])
   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])
   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);
   *
   * Add `.not` earlier in the chain to negate `.members`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the target array doesn't have all of the same members as
   * the given array `set` but may or may not have some of them. It's often best
   * to identify the exact output that's expected, and then write an assertion
   * that only accepts that exact output.
   *
   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended
   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended
   *
   * `.members` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');
   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);
   *
   * @name members
   * @param {Array} set
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */


  Assertion.addMethod('members', function (subset, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object'),
        flagMsg = flag(this, 'message'),
        ssfi = flag(this, 'ssfi');
    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');
    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');
    var contains = flag(this, 'contains');
    var ordered = flag(this, 'ordered');
    var subject, failMsg, failNegateMsg;

    if (contains) {
      subject = ordered ? 'an ordered superset' : 'a superset';
      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';
      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';
    } else {
      subject = ordered ? 'ordered members' : 'members';
      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';
      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';
    }

    var cmp = flag(this, 'deep') ? _.eql : undefined;
    this.assert(isSubsetOf(subset, obj, cmp, contains, ordered), failMsg, failNegateMsg, subset, obj, true);
  });
  /**
   * ### .oneOf(list[, msg])
   *
   * Asserts that the target is a member of the given array `list`. However,
   * it's often best to assert that the target is equal to its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended
   *
   * Comparisons are performed using strict (`===`) equality.
   *
   * Add `.not` earlier in the chain to negate `.oneOf`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended
   *
   * `.oneOf` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);
   *
   * @name oneOf
   * @param {Array<*>} list
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function oneOf(list, msg) {
    if (msg) flag(this, 'message', msg);
    var expected = flag(this, 'object'),
        flagMsg = flag(this, 'message'),
        ssfi = flag(this, 'ssfi');
    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');
    this.assert(list.indexOf(expected) > -1, 'expected #{this} to be one of #{exp}', 'expected #{this} to not be one of #{exp}', list, expected);
  }

  Assertion.addMethod('oneOf', oneOf);
  /**
   * ### .change(subject[, prop[, msg]])
   *
   * When one argument is provided, `.change` asserts that the given function
   * `subject` returns a different value when it's invoked before the target
   * function compared to when it's invoked afterward. However, it's often best
   * to assert that `subject` is equal to its expected value.
   *
   *     var dots = ''
   *       , addDot = function () { dots += '.'; }
   *       , getDots = function () { return dots; };
   *
   *     // Recommended
   *     expect(getDots()).to.equal('');
   *     addDot();
   *     expect(getDots()).to.equal('.');
   *
   *     // Not recommended
   *     expect(addDot).to.change(getDots);
   *
   * When two arguments are provided, `.change` asserts that the value of the
   * given object `subject`'s `prop` property is different before invoking the
   * target function compared to afterward.
   *
   *     var myObj = {dots: ''}
   *       , addDot = function () { myObj.dots += '.'; };
   *
   *     // Recommended
   *     expect(myObj).to.have.property('dots', '');
   *     addDot();
   *     expect(myObj).to.have.property('dots', '.');
   *
   *     // Not recommended
   *     expect(addDot).to.change(myObj, 'dots');
   *
   * Strict (`===`) equality is used to compare before and after values.
   *
   * Add `.not` earlier in the chain to negate `.change`.
   *
   *     var dots = ''
   *       , noop = function () {}
   *       , getDots = function () { return dots; };
   *
   *     expect(noop).to.not.change(getDots);
   *
   *     var myObj = {dots: ''}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'dots');
   *
   * `.change` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {dots: ''}
   *       , addDot = function () { myObj.dots += '.'; };
   *
   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');
   *
   *     var dots = ''
   *       , addDot = function () { dots += '.'; }
   *       , getDots = function () { return dots; };
   *
   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);
   *
   * `.change` also causes all `.by` assertions that follow in the chain to
   * assert how much a numeric subject was increased or decreased by. However,
   * it's dangerous to use `.change.by`. The problem is that it creates
   * uncertain expectations by asserting that the subject either increases by
   * the given delta, or that it decreases by the given delta. It's often best
   * to identify the exact output that's expected, and then write an assertion
   * that only accepts that exact output.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; }
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   * The alias `.changes` can be used interchangeably with `.change`.
   *
   * @name change
   * @alias changes
   * @param {String} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertChanges(subject, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object'),
        flagMsg = flag(this, 'message'),
        ssfi = flag(this, 'ssfi');
    new Assertion(fn, flagMsg, ssfi, true).is.a('function');
    var initial;

    if (!prop) {
      new Assertion(subject, flagMsg, ssfi, true).is.a('function');
      initial = subject();
    } else {
      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
      initial = subject[prop];
    }

    fn();
    var final = prop === undefined || prop === null ? subject() : subject[prop];
    var msgObj = prop === undefined || prop === null ? initial : '.' + prop; // This gets flagged because of the .by(delta) assertion

    flag(this, 'deltaMsgObj', msgObj);
    flag(this, 'initialDeltaValue', initial);
    flag(this, 'finalDeltaValue', final);
    flag(this, 'deltaBehavior', 'change');
    flag(this, 'realDelta', final !== initial);
    this.assert(initial !== final, 'expected ' + msgObj + ' to change', 'expected ' + msgObj + ' to not change');
  }

  Assertion.addMethod('change', assertChanges);
  Assertion.addMethod('changes', assertChanges);
  /**
   * ### .increase(subject[, prop[, msg]])
   *
   * When one argument is provided, `.increase` asserts that the given function
   * `subject` returns a greater number when it's invoked after invoking the
   * target function compared to when it's invoked beforehand. `.increase` also
   * causes all `.by` assertions that follow in the chain to assert how much
   * greater of a number is returned. It's often best to assert that the return
   * value increased by the expected amount, rather than asserting it increased
   * by any amount.
   *
   *     var val = 1
   *       , addTwo = function () { val += 2; }
   *       , getVal = function () { return val; };
   *
   *     expect(addTwo).to.increase(getVal).by(2); // Recommended
   *     expect(addTwo).to.increase(getVal); // Not recommended
   *
   * When two arguments are provided, `.increase` asserts that the value of the
   * given object `subject`'s `prop` property is greater after invoking the
   * target function compared to beforehand.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.increase`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either decreases, or that it stays the same.
   * It's often best to identify the exact output that's expected, and then
   * write an assertion that only accepts that exact output.
   *
   * When the subject is expected to decrease, it's often best to assert that it
   * decreased by the expected amount.
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended
   * 
   * When the subject is expected to stay the same, it's often best to assert
   * exactly that.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'val'); // Recommended
   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended
   *
   * `.increase` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');
   *
   *     var val = 1
   *       , noop = function () {}
   *       , getVal = function () { return val; };
   *
   *     expect(noop, 'nooo why fail??').to.increase(getVal);
   *
   * The alias `.increases` can be used interchangeably with `.increase`.
   *
   * @name increase
   * @alias increases
   * @param {String|Function} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertIncreases(subject, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object'),
        flagMsg = flag(this, 'message'),
        ssfi = flag(this, 'ssfi');
    new Assertion(fn, flagMsg, ssfi, true).is.a('function');
    var initial;

    if (!prop) {
      new Assertion(subject, flagMsg, ssfi, true).is.a('function');
      initial = subject();
    } else {
      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
      initial = subject[prop];
    } // Make sure that the target is a number


    new Assertion(initial, flagMsg, ssfi, true).is.a('number');
    fn();
    var final = prop === undefined || prop === null ? subject() : subject[prop];
    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
    flag(this, 'deltaMsgObj', msgObj);
    flag(this, 'initialDeltaValue', initial);
    flag(this, 'finalDeltaValue', final);
    flag(this, 'deltaBehavior', 'increase');
    flag(this, 'realDelta', final - initial);
    this.assert(final - initial > 0, 'expected ' + msgObj + ' to increase', 'expected ' + msgObj + ' to not increase');
  }

  Assertion.addMethod('increase', assertIncreases);
  Assertion.addMethod('increases', assertIncreases);
  /**
   * ### .decrease(subject[, prop[, msg]])
   *
   * When one argument is provided, `.decrease` asserts that the given function
   * `subject` returns a lesser number when it's invoked after invoking the
   * target function compared to when it's invoked beforehand. `.decrease` also
   * causes all `.by` assertions that follow in the chain to assert how much
   * lesser of a number is returned. It's often best to assert that the return
   * value decreased by the expected amount, rather than asserting it decreased
   * by any amount.
   *
   *     var val = 1
   *       , subtractTwo = function () { val -= 2; }
   *       , getVal = function () { return val; };
   *
   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended
   *     expect(subtractTwo).to.decrease(getVal); // Not recommended
   *
   * When two arguments are provided, `.decrease` asserts that the value of the
   * given object `subject`'s `prop` property is lesser after invoking the
   * target function compared to beforehand. 
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.decrease`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either increases, or that it stays the same.
   * It's often best to identify the exact output that's expected, and then
   * write an assertion that only accepts that exact output.
   *
   * When the subject is expected to increase, it's often best to assert that it
   * increased by the expected amount.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended
   * 
   * When the subject is expected to stay the same, it's often best to assert
   * exactly that.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'val'); // Recommended
   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended
   *
   * `.decrease` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');
   *
   *     var val = 1
   *       , noop = function () {}
   *       , getVal = function () { return val; };
   *
   *     expect(noop, 'nooo why fail??').to.decrease(getVal);
   *
   * The alias `.decreases` can be used interchangeably with `.decrease`.
   *
   * @name decrease
   * @alias decreases
   * @param {String|Function} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertDecreases(subject, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object'),
        flagMsg = flag(this, 'message'),
        ssfi = flag(this, 'ssfi');
    new Assertion(fn, flagMsg, ssfi, true).is.a('function');
    var initial;

    if (!prop) {
      new Assertion(subject, flagMsg, ssfi, true).is.a('function');
      initial = subject();
    } else {
      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
      initial = subject[prop];
    } // Make sure that the target is a number


    new Assertion(initial, flagMsg, ssfi, true).is.a('number');
    fn();
    var final = prop === undefined || prop === null ? subject() : subject[prop];
    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;
    flag(this, 'deltaMsgObj', msgObj);
    flag(this, 'initialDeltaValue', initial);
    flag(this, 'finalDeltaValue', final);
    flag(this, 'deltaBehavior', 'decrease');
    flag(this, 'realDelta', initial - final);
    this.assert(final - initial < 0, 'expected ' + msgObj + ' to decrease', 'expected ' + msgObj + ' to not decrease');
  }

  Assertion.addMethod('decrease', assertDecreases);
  Assertion.addMethod('decreases', assertDecreases);
  /**
   * ### .by(delta[, msg])
   *
   * When following an `.increase` assertion in the chain, `.by` asserts that
   * the subject of the `.increase` assertion increased by the given `delta`.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2);
   *
   * When following a `.decrease` assertion in the chain, `.by` asserts that the
   * subject of the `.decrease` assertion decreased by the given `delta`.
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);
   *
   * When following a `.change` assertion in the chain, `.by` asserts that the
   * subject of the `.change` assertion either increased or decreased by the
   * given `delta`. However, it's dangerous to use `.change.by`. The problem is
   * that it creates uncertain expectations. It's often best to identify the
   * exact output that's expected, and then write an assertion that only accepts
   * that exact output.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; }
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.by`. However, it's often best
   * to assert that the subject changed by its expected delta, rather than
   * asserting that it didn't change by one of countless unexpected deltas.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     // Recommended
   *     expect(addTwo).to.increase(myObj, 'val').by(2);
   *
   *     // Not recommended
   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);
   *
   * `.by` accepts an optional `msg` argument which is a custom error message to
   * show when the assertion fails. The message can also be given as the second
   * argument to `expect`.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');
   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);
   *
   * @name by
   * @param {Number} delta
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */

  function assertDelta(delta, msg) {
    if (msg) flag(this, 'message', msg);
    var msgObj = flag(this, 'deltaMsgObj');
    var initial = flag(this, 'initialDeltaValue');
    var final = flag(this, 'finalDeltaValue');
    var behavior = flag(this, 'deltaBehavior');
    var realDelta = flag(this, 'realDelta');
    var expression;

    if (behavior === 'change') {
      expression = Math.abs(final - initial) === Math.abs(delta);
    } else {
      expression = realDelta === Math.abs(delta);
    }

    this.assert(expression, 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta, 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta);
  }

  Assertion.addMethod('by', assertDelta);
  /**
   * ### .extensible
   *
   * Asserts that the target is extensible, which means that new properties can
   * be added to it. Primitives are never extensible.
   *
   *     expect({a: 1}).to.be.extensible;
   *
   * Add `.not` earlier in the chain to negate `.extensible`.
   *
   *     var nonExtensibleObject = Object.preventExtensions({})
   *       , sealedObject = Object.seal({})
   *       , frozenObject = Object.freeze({});
   *
   *     expect(nonExtensibleObject).to.not.be.extensible;
   *     expect(sealedObject).to.not.be.extensible;
   *     expect(frozenObject).to.not.be.extensible;
   *     expect(1).to.not.be.extensible;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(1, 'nooo why fail??').to.be.extensible;
   *
   * @name extensible
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('extensible', function () {
    var obj = flag(this, 'object'); // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible
    // The following provides ES6 behavior for ES5 environments.

    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);
    this.assert(isExtensible, 'expected #{this} to be extensible', 'expected #{this} to not be extensible');
  });
  /**
   * ### .sealed
   *
   * Asserts that the target is sealed, which means that new properties can't be
   * added to it, and its existing properties can't be reconfigured or deleted.
   * However, it's possible that its existing properties can still be reassigned
   * to different values. Primitives are always sealed.
   *
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freeze({});
   *
   *     expect(sealedObject).to.be.sealed;
   *     expect(frozenObject).to.be.sealed;
   *     expect(1).to.be.sealed;
   *
   * Add `.not` earlier in the chain to negate `.sealed`.
   *
   *     expect({a: 1}).to.not.be.sealed;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;
   *
   * @name sealed
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('sealed', function () {
    var obj = flag(this, 'object'); // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed
    // The following provides ES6 behavior for ES5 environments.

    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;
    this.assert(isSealed, 'expected #{this} to be sealed', 'expected #{this} to not be sealed');
  });
  /**
   * ### .frozen
   *
   * Asserts that the target is frozen, which means that new properties can't be
   * added to it, and its existing properties can't be reassigned to different
   * values, reconfigured, or deleted. Primitives are always frozen.
   *
   *     var frozenObject = Object.freeze({});
   *
   *     expect(frozenObject).to.be.frozen;
   *     expect(1).to.be.frozen;
   *
   * Add `.not` earlier in the chain to negate `.frozen`.
   *
   *     expect({a: 1}).to.not.be.frozen;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;
   *
   * @name frozen
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('frozen', function () {
    var obj = flag(this, 'object'); // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen
    // The following provides ES6 behavior for ES5 environments.

    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;
    this.assert(isFrozen, 'expected #{this} to be frozen', 'expected #{this} to not be frozen');
  });
  /**
   * ### .finite
   *
   * Asserts that the target is a number, and isn't `NaN` or positive/negative
   * `Infinity`.
   *
   *     expect(1).to.be.finite;
   *
   * Add `.not` earlier in the chain to negate `.finite`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either isn't a number, or that it's `NaN`, or
   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often
   * best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to be a number, it's often best to assert
   * that it's the expected type, rather than asserting that it isn't one of
   * many unexpected types.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.finite; // Not recommended
   *
   * When the target is expected to be `NaN`, it's often best to assert exactly
   * that.
   *
   *     expect(NaN).to.be.NaN; // Recommended
   *     expect(NaN).to.not.be.finite; // Not recommended
   *
   * When the target is expected to be positive infinity, it's often best to
   * assert exactly that.
   *
   *     expect(Infinity).to.equal(Infinity); // Recommended
   *     expect(Infinity).to.not.be.finite; // Not recommended
   *
   * When the target is expected to be negative infinity, it's often best to
   * assert exactly that.
   *
   *     expect(-Infinity).to.equal(-Infinity); // Recommended
   *     expect(-Infinity).to.not.be.finite; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect('foo', 'nooo why fail??').to.be.finite;
   *
   * @name finite
   * @namespace BDD
   * @api public
   */

  Assertion.addProperty('finite', function (msg) {
    var obj = flag(this, 'object');
    this.assert(typeof obj === "number" && isFinite(obj), 'expected #{this} to be a finite number', 'expected #{this} to not be a finite number');
  });
};/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var expect = function (chai, util) {
  chai.expect = function (val, message) {
    return new chai.Assertion(val, message);
  };
  /**
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure.
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @namespace BDD
   * @api public
   */


  chai.expect.fail = function (actual, expected, message, operator) {
    message = message || 'expect.fail()';
    throw new chai.AssertionError(message, {
      actual: actual,
      expected: expected,
      operator: operator
    }, chai.expect.fail);
  };
};/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var should = function (chai, util) {
  var Assertion = chai.Assertion;

  function loadShould() {
    // explicitly define this method as function as to have it's name to include as `ssfi`
    function shouldGetter() {
      if (this instanceof String || this instanceof Number || this instanceof Boolean || typeof Symbol === 'function' && this instanceof Symbol) {
        return new Assertion(this.valueOf(), null, shouldGetter);
      }

      return new Assertion(this, null, shouldGetter);
    }

    function shouldSetter(value) {
      // See https://github.com/chaijs/chai/issues/86: this makes
      // `whatever.should = someValue` actually set `someValue`, which is
      // especially useful for `global.should = require('chai').should()`.
      //
      // Note that we have to use [[DefineProperty]] instead of [[Put]]
      // since otherwise we would trigger this very setter!
      Object.defineProperty(this, 'should', {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } // modify Object.prototype to have `should`


    Object.defineProperty(Object.prototype, 'should', {
      set: shouldSetter,
      get: shouldGetter,
      configurable: true
    });
    var should = {};
    /**
     * ### .fail(actual, expected, [message], [operator])
     *
     * Throw a failure.
     *
     * @name fail
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @param {String} operator
     * @namespace BDD
     * @api public
     */

    should.fail = function (actual, expected, message, operator) {
      message = message || 'should.fail()';
      throw new chai.AssertionError(message, {
        actual: actual,
        expected: expected,
        operator: operator
      }, should.fail);
    };
    /**
     * ### .equal(actual, expected, [message])
     *
     * Asserts non-strict equality (`==`) of `actual` and `expected`.
     *
     *     should.equal(3, '3', '== coerces values to strings');
     *
     * @name equal
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Should
     * @api public
     */


    should.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.equal(val2);
    };
    /**
     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])
     *
     * Asserts that `function` will throw an error that is an instance of
     * `constructor`, or alternately that it will throw an error with message
     * matching `regexp`.
     *
     *     should.throw(fn, 'function throws a reference error');
     *     should.throw(fn, /function throws a reference error/);
     *     should.throw(fn, ReferenceError);
     *     should.throw(fn, ReferenceError, 'function throws a reference error');
     *     should.throw(fn, ReferenceError, /function throws a reference error/);
     *
     * @name throw
     * @alias Throw
     * @param {Function} function
     * @param {ErrorConstructor} constructor
     * @param {RegExp} regexp
     * @param {String} message
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @namespace Should
     * @api public
     */


    should.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.Throw(errt, errs);
    };
    /**
     * ### .exist
     *
     * Asserts that the target is neither `null` nor `undefined`.
     *
     *     var foo = 'hi';
     *
     *     should.exist(foo, 'foo exists');
     *
     * @name exist
     * @namespace Should
     * @api public
     */


    should.exist = function (val, msg) {
      new Assertion(val, msg).to.exist;
    }; // negation


    should.not = {};
    /**
     * ### .not.equal(actual, expected, [message])
     *
     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
     *
     *     should.not.equal(3, 4, 'these numbers are not equal');
     *
     * @name not.equal
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Should
     * @api public
     */

    should.not.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.not.equal(val2);
    };
    /**
     * ### .throw(function, [constructor/regexp], [message])
     *
     * Asserts that `function` will _not_ throw an error that is an instance of
     * `constructor`, or alternately that it will not throw an error with message
     * matching `regexp`.
     *
     *     should.not.throw(fn, Error, 'function does not throw');
     *
     * @name not.throw
     * @alias not.Throw
     * @param {Function} function
     * @param {ErrorConstructor} constructor
     * @param {RegExp} regexp
     * @param {String} message
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @namespace Should
     * @api public
     */


    should.not.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.not.Throw(errt, errs);
    };
    /**
     * ### .not.exist
     *
     * Asserts that the target is neither `null` nor `undefined`.
     *
     *     var bar = null;
     *
     *     should.not.exist(bar, 'bar does not exist');
     *
     * @name not.exist
     * @namespace Should
     * @api public
     */


    should.not.exist = function (val, msg) {
      new Assertion(val, msg).to.not.exist;
    };

    should['throw'] = should['Throw'];
    should.not['throw'] = should.not['Throw'];
    return should;
  }
  chai.should = loadShould;
  chai.Should = loadShould;
};/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */
var assert = function (chai, util) {
  /*!
   * Chai dependencies.
   */
  var Assertion = chai.Assertion,
      flag = util.flag;
  /*!
   * Module export.
   */

  /**
   * ### assert(expression, message)
   *
   * Write your own test expressions.
   *
   *     assert('foo' !== 'bar', 'foo is not bar');
   *     assert(Array.isArray([]), 'empty arrays are arrays');
   *
   * @param {Mixed} expression to test for truthiness
   * @param {String} message to display on error
   * @name assert
   * @namespace Assert
   * @api public
   */

  var assert = chai.assert = function (express, errmsg) {
    var test = new Assertion(null, null, chai.assert, true);
    test.assert(express, errmsg, '[ negation message unavailable ]');
  };
  /**
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure. Node.js `assert` module-compatible.
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @namespace Assert
   * @api public
   */


  assert.fail = function (actual, expected, message, operator) {
    message = message || 'assert.fail()';
    throw new chai.AssertionError(message, {
      actual: actual,
      expected: expected,
      operator: operator
    }, assert.fail);
  };
  /**
   * ### .isOk(object, [message])
   *
   * Asserts that `object` is truthy.
   *
   *     assert.isOk('everything', 'everything is ok');
   *     assert.isOk(false, 'this will fail');
   *
   * @name isOk
   * @alias ok
   * @param {Mixed} object to test
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isOk = function (val, msg) {
    new Assertion(val, msg, assert.isOk, true).is.ok;
  };
  /**
   * ### .isNotOk(object, [message])
   *
   * Asserts that `object` is falsy.
   *
   *     assert.isNotOk('everything', 'this will fail');
   *     assert.isNotOk(false, 'this will pass');
   *
   * @name isNotOk
   * @alias notOk
   * @param {Mixed} object to test
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotOk = function (val, msg) {
    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;
  };
  /**
   * ### .equal(actual, expected, [message])
   *
   * Asserts non-strict equality (`==`) of `actual` and `expected`.
   *
   *     assert.equal(3, '3', '== coerces values to strings');
   *
   * @name equal
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.equal = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.equal, true);
    test.assert(exp == flag(test, 'object'), 'expected #{this} to equal #{exp}', 'expected #{this} to not equal #{act}', exp, act, true);
  };
  /**
   * ### .notEqual(actual, expected, [message])
   *
   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
   *
   *     assert.notEqual(3, 4, 'these numbers are not equal');
   *
   * @name notEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notEqual = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.notEqual, true);
    test.assert(exp != flag(test, 'object'), 'expected #{this} to not equal #{exp}', 'expected #{this} to equal #{act}', exp, act, true);
  };
  /**
   * ### .strictEqual(actual, expected, [message])
   *
   * Asserts strict equality (`===`) of `actual` and `expected`.
   *
   *     assert.strictEqual(true, true, 'these booleans are strictly equal');
   *
   * @name strictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.strictEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);
  };
  /**
   * ### .notStrictEqual(actual, expected, [message])
   *
   * Asserts strict inequality (`!==`) of `actual` and `expected`.
   *
   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');
   *
   * @name notStrictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notStrictEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);
  };
  /**
   * ### .deepEqual(actual, expected, [message])
   *
   * Asserts that `actual` is deeply equal to `expected`.
   *
   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });
   *
   * @name deepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @alias deepStrictEqual
   * @namespace Assert
   * @api public
   */


  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);
  };
  /**
   * ### .notDeepEqual(actual, expected, [message])
   *
   * Assert that `actual` is not deeply equal to `expected`.
   *
   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });
   *
   * @name notDeepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notDeepEqual = function (act, exp, msg) {
    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);
  };
  /**
  * ### .isAbove(valueToCheck, valueToBeAbove, [message])
  *
  * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.
  *
  *     assert.isAbove(5, 2, '5 is strictly greater than 2');
  *
  * @name isAbove
  * @param {Mixed} valueToCheck
  * @param {Mixed} valueToBeAbove
  * @param {String} message
  * @namespace Assert
  * @api public
  */


  assert.isAbove = function (val, abv, msg) {
    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);
  };
  /**
  * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])
  *
  * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.
  *
  *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');
  *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');
  *
  * @name isAtLeast
  * @param {Mixed} valueToCheck
  * @param {Mixed} valueToBeAtLeast
  * @param {String} message
  * @namespace Assert
  * @api public
  */


  assert.isAtLeast = function (val, atlst, msg) {
    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);
  };
  /**
  * ### .isBelow(valueToCheck, valueToBeBelow, [message])
  *
  * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.
  *
  *     assert.isBelow(3, 6, '3 is strictly less than 6');
  *
  * @name isBelow
  * @param {Mixed} valueToCheck
  * @param {Mixed} valueToBeBelow
  * @param {String} message
  * @namespace Assert
  * @api public
  */


  assert.isBelow = function (val, blw, msg) {
    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);
  };
  /**
  * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])
  *
  * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.
  *
  *     assert.isAtMost(3, 6, '3 is less than or equal to 6');
  *     assert.isAtMost(4, 4, '4 is less than or equal to 4');
  *
  * @name isAtMost
  * @param {Mixed} valueToCheck
  * @param {Mixed} valueToBeAtMost
  * @param {String} message
  * @namespace Assert
  * @api public
  */


  assert.isAtMost = function (val, atmst, msg) {
    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);
  };
  /**
   * ### .isTrue(value, [message])
   *
   * Asserts that `value` is true.
   *
   *     var teaServed = true;
   *     assert.isTrue(teaServed, 'the tea has been served');
   *
   * @name isTrue
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isTrue = function (val, msg) {
    new Assertion(val, msg, assert.isTrue, true).is['true'];
  };
  /**
   * ### .isNotTrue(value, [message])
   *
   * Asserts that `value` is not true.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotTrue(tea, 'great, time for tea!');
   *
   * @name isNotTrue
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotTrue = function (val, msg) {
    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);
  };
  /**
   * ### .isFalse(value, [message])
   *
   * Asserts that `value` is false.
   *
   *     var teaServed = false;
   *     assert.isFalse(teaServed, 'no tea yet? hmm...');
   *
   * @name isFalse
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isFalse = function (val, msg) {
    new Assertion(val, msg, assert.isFalse, true).is['false'];
  };
  /**
   * ### .isNotFalse(value, [message])
   *
   * Asserts that `value` is not false.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotFalse(tea, 'great, time for tea!');
   *
   * @name isNotFalse
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotFalse = function (val, msg) {
    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);
  };
  /**
   * ### .isNull(value, [message])
   *
   * Asserts that `value` is null.
   *
   *     assert.isNull(err, 'there was no error');
   *
   * @name isNull
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNull = function (val, msg) {
    new Assertion(val, msg, assert.isNull, true).to.equal(null);
  };
  /**
   * ### .isNotNull(value, [message])
   *
   * Asserts that `value` is not null.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotNull(tea, 'great, time for tea!');
   *
   * @name isNotNull
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotNull = function (val, msg) {
    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);
  };
  /**
   * ### .isNaN
   *
   * Asserts that value is NaN.
   *
   *     assert.isNaN(NaN, 'NaN is NaN');
   *
   * @name isNaN
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNaN = function (val, msg) {
    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;
  };
  /**
   * ### .isNotNaN
   *
   * Asserts that value is not NaN.
   *
   *     assert.isNotNaN(4, '4 is not NaN');
   *
   * @name isNotNaN
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotNaN = function (val, msg) {
    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;
  };
  /**
   * ### .exists
   *
   * Asserts that the target is neither `null` nor `undefined`.
   *
   *     var foo = 'hi';
   *
   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');
   *
   * @name exists
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.exists = function (val, msg) {
    new Assertion(val, msg, assert.exists, true).to.exist;
  };
  /**
   * ### .notExists
   *
   * Asserts that the target is either `null` or `undefined`.
   *
   *     var bar = null
   *       , baz;
   *
   *     assert.notExists(bar);
   *     assert.notExists(baz, 'baz is either null or undefined');
   *
   * @name notExists
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notExists = function (val, msg) {
    new Assertion(val, msg, assert.notExists, true).to.not.exist;
  };
  /**
   * ### .isUndefined(value, [message])
   *
   * Asserts that `value` is `undefined`.
   *
   *     var tea;
   *     assert.isUndefined(tea, 'no tea defined');
   *
   * @name isUndefined
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isUndefined = function (val, msg) {
    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);
  };
  /**
   * ### .isDefined(value, [message])
   *
   * Asserts that `value` is not `undefined`.
   *
   *     var tea = 'cup of chai';
   *     assert.isDefined(tea, 'tea has been defined');
   *
   * @name isDefined
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isDefined = function (val, msg) {
    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);
  };
  /**
   * ### .isFunction(value, [message])
   *
   * Asserts that `value` is a function.
   *
   *     function serveTea() { return 'cup of tea'; };
   *     assert.isFunction(serveTea, 'great, we can have tea now');
   *
   * @name isFunction
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isFunction = function (val, msg) {
    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');
  };
  /**
   * ### .isNotFunction(value, [message])
   *
   * Asserts that `value` is _not_ a function.
   *
   *     var serveTea = [ 'heat', 'pour', 'sip' ];
   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');
   *
   * @name isNotFunction
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotFunction = function (val, msg) {
    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');
  };
  /**
   * ### .isObject(value, [message])
   *
   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).
   * _The assertion does not match subclassed objects._
   *
   *     var selection = { name: 'Chai', serve: 'with spices' };
   *     assert.isObject(selection, 'tea selection is an object');
   *
   * @name isObject
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isObject = function (val, msg) {
    new Assertion(val, msg, assert.isObject, true).to.be.a('object');
  };
  /**
   * ### .isNotObject(value, [message])
   *
   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).
   *
   *     var selection = 'chai'
   *     assert.isNotObject(selection, 'tea selection is not an object');
   *     assert.isNotObject(null, 'null is not an object');
   *
   * @name isNotObject
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotObject = function (val, msg) {
    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');
  };
  /**
   * ### .isArray(value, [message])
   *
   * Asserts that `value` is an array.
   *
   *     var menu = [ 'green', 'chai', 'oolong' ];
   *     assert.isArray(menu, 'what kind of tea do we want?');
   *
   * @name isArray
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isArray = function (val, msg) {
    new Assertion(val, msg, assert.isArray, true).to.be.an('array');
  };
  /**
   * ### .isNotArray(value, [message])
   *
   * Asserts that `value` is _not_ an array.
   *
   *     var menu = 'green|chai|oolong';
   *     assert.isNotArray(menu, 'what kind of tea do we want?');
   *
   * @name isNotArray
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotArray = function (val, msg) {
    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');
  };
  /**
   * ### .isString(value, [message])
   *
   * Asserts that `value` is a string.
   *
   *     var teaOrder = 'chai';
   *     assert.isString(teaOrder, 'order placed');
   *
   * @name isString
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isString = function (val, msg) {
    new Assertion(val, msg, assert.isString, true).to.be.a('string');
  };
  /**
   * ### .isNotString(value, [message])
   *
   * Asserts that `value` is _not_ a string.
   *
   *     var teaOrder = 4;
   *     assert.isNotString(teaOrder, 'order placed');
   *
   * @name isNotString
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotString = function (val, msg) {
    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');
  };
  /**
   * ### .isNumber(value, [message])
   *
   * Asserts that `value` is a number.
   *
   *     var cups = 2;
   *     assert.isNumber(cups, 'how many cups');
   *
   * @name isNumber
   * @param {Number} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNumber = function (val, msg) {
    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');
  };
  /**
   * ### .isNotNumber(value, [message])
   *
   * Asserts that `value` is _not_ a number.
   *
   *     var cups = '2 cups please';
   *     assert.isNotNumber(cups, 'how many cups');
   *
   * @name isNotNumber
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotNumber = function (val, msg) {
    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');
  };
  /**
  * ### .isFinite(value, [message])
  *
  * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.
  *
  *     var cups = 2;
  *     assert.isFinite(cups, 'how many cups');
  *
  *     assert.isFinite(NaN); // throws
  *
  * @name isFinite
  * @param {Number} value
  * @param {String} message
  * @namespace Assert
  * @api public
  */


  assert.isFinite = function (val, msg) {
    new Assertion(val, msg, assert.isFinite, true).to.be.finite;
  };
  /**
   * ### .isBoolean(value, [message])
   *
   * Asserts that `value` is a boolean.
   *
   *     var teaReady = true
   *       , teaServed = false;
   *
   *     assert.isBoolean(teaReady, 'is the tea ready');
   *     assert.isBoolean(teaServed, 'has tea been served');
   *
   * @name isBoolean
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isBoolean = function (val, msg) {
    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');
  };
  /**
   * ### .isNotBoolean(value, [message])
   *
   * Asserts that `value` is _not_ a boolean.
   *
   *     var teaReady = 'yep'
   *       , teaServed = 'nope';
   *
   *     assert.isNotBoolean(teaReady, 'is the tea ready');
   *     assert.isNotBoolean(teaServed, 'has tea been served');
   *
   * @name isNotBoolean
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.isNotBoolean = function (val, msg) {
    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');
  };
  /**
   * ### .typeOf(value, name, [message])
   *
   * Asserts that `value`'s type is `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');
   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');
   *     assert.typeOf('tea', 'string', 'we have a string');
   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');
   *     assert.typeOf(null, 'null', 'we have a null');
   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');
   *
   * @name typeOf
   * @param {Mixed} value
   * @param {String} name
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.typeOf = function (val, type, msg) {
    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);
  };
  /**
   * ### .notTypeOf(value, name, [message])
   *
   * Asserts that `value`'s type is _not_ `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');
   *
   * @name notTypeOf
   * @param {Mixed} value
   * @param {String} typeof name
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notTypeOf = function (val, type, msg) {
    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);
  };
  /**
   * ### .instanceOf(object, constructor, [message])
   *
   * Asserts that `value` is an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new Tea('chai');
   *
   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');
   *
   * @name instanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.instanceOf = function (val, type, msg) {
    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);
  };
  /**
   * ### .notInstanceOf(object, constructor, [message])
   *
   * Asserts `value` is not an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new String('chai');
   *
   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');
   *
   * @name notInstanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notInstanceOf = function (val, type, msg) {
    new Assertion(val, msg, assert.notInstanceOf, true).to.not.be.instanceOf(type);
  };
  /**
   * ### .include(haystack, needle, [message])
   *
   * Asserts that `haystack` includes `needle`. Can be used to assert the
   * inclusion of a value in an array, a substring in a string, or a subset of
   * properties in an object.
   *
   *     assert.include([1,2,3], 2, 'array contains value');
   *     assert.include('foobar', 'foo', 'string contains substring');
   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');
   *
   * Strict equality (===) is used. When asserting the inclusion of a value in
   * an array, the array is searched for an element that's strictly equal to the
   * given value. When asserting a subset of properties in an object, the object
   * is searched for the given property keys, checking that each one is present
   * and stricty equal to the given property value. For instance:
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.include([obj1, obj2], obj1);
   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});
   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});
   *
   * @name include
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.include = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.include, true).include(inc);
  };
  /**
   * ### .notInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` does not include `needle`. Can be used to assert
   * the absence of a value in an array, a substring in a string, or a subset of
   * properties in an object.
   *
   *     assert.notInclude([1,2,3], 4, 'array doesn't contain value');
   *     assert.notInclude('foobar', 'baz', 'string doesn't contain substring');
   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');
   *
   * Strict equality (===) is used. When asserting the absence of a value in an
   * array, the array is searched to confirm the absence of an element that's
   * strictly equal to the given value. When asserting a subset of properties in
   * an object, the object is searched to confirm that at least one of the given
   * property keys is either not present or not strictly equal to the given
   * property value. For instance:
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.notInclude([obj1, obj2], {a: 1});
   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});
   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});
   *
   * @name notInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);
  };
  /**
   * ### .deepInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` includes `needle`. Can be used to assert the
   * inclusion of a value in an array or a subset of properties in an object.
   * Deep equality is used.
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.deepInclude([obj1, obj2], {a: 1});
   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});
   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});
   *
   * @name deepInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.deepInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);
  };
  /**
   * ### .notDeepInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` does not include `needle`. Can be used to assert
   * the absence of a value in an array or a subset of properties in an object.
   * Deep equality is used.
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.notDeepInclude([obj1, obj2], {a: 9});
   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});
   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});
   *
   * @name notDeepInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notDeepInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);
  };
  /**
   * ### .nestedInclude(haystack, needle, [message])
   * 
   * Asserts that 'haystack' includes 'needle'. 
   * Can be used to assert the inclusion of a subset of properties in an 
   * object.
   * Enables the use of dot- and bracket-notation for referencing nested 
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   * 
   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\.a.[b]': 'x'});
   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\[b\\]': 'x'});
   * 
   * @name nestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public 
   */


  assert.nestedInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);
  };
  /**
   * ### .notNestedInclude(haystack, needle, [message])
   * 
   * Asserts that 'haystack' does not include 'needle'. 
   * Can be used to assert the absence of a subset of properties in an 
   * object.
   * Enables the use of dot- and bracket-notation for referencing nested 
   * properties. 
   * '[]' and '.' in property names can be escaped using double backslashes.
   * 
   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\.a.b': 'y'});
   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\[b\\]': 'y'});
   * 
   * @name notNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public 
   */


  assert.notNestedInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notNestedInclude, true).not.nested.include(inc);
  };
  /**
   * ### .deepNestedInclude(haystack, needle, [message])
   * 
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an 
   * object while checking for deep equality.
   * Enables the use of dot- and bracket-notation for referencing nested 
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   * 
   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});
   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\.a.\\[b\\]': {x: 1}});
   *    
   * @name deepNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public 
   */


  assert.deepNestedInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.deepNestedInclude, true).deep.nested.include(inc);
  };
  /**
   * ### .notDeepNestedInclude(haystack, needle, [message])
   * 
   * Asserts that 'haystack' does not include 'needle'.
   * Can be used to assert the absence of a subset of properties in an 
   * object while checking for deep equality.
   * Enables the use of dot- and bracket-notation for referencing nested 
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   * 
   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})
   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\.a.\\[b\\]': {y: 2}});
   *    
   * @name notDeepNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public 
   */


  assert.notDeepNestedInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notDeepNestedInclude, true).not.deep.nested.include(inc);
  };
  /**
   * ### .ownInclude(haystack, needle, [message])
   * 
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an 
   * object while ignoring inherited properties.
   * 
   *     assert.ownInclude({ a: 1 }, { a: 1 });
   * 
   * @name ownInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.ownInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);
  };
  /**
   * ### .notOwnInclude(haystack, needle, [message])
   * 
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the absence of a subset of properties in an 
   * object while ignoring inherited properties.
   * 
   *     Object.prototype.b = 2;
   * 
   *     assert.notOwnInclude({ a: 1 }, { b: 2 });
   * 
   * @name notOwnInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notOwnInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);
  };
  /**
   * ### .deepOwnInclude(haystack, needle, [message])
   * 
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an 
   * object while ignoring inherited properties and checking for deep equality.
   * 
   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});
   *      
   * @name deepOwnInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.deepOwnInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.deepOwnInclude, true).deep.own.include(inc);
  };
  /**
  * ### .notDeepOwnInclude(haystack, needle, [message])
  * 
  * Asserts that 'haystack' includes 'needle'.
  * Can be used to assert the absence of a subset of properties in an 
  * object while ignoring inherited properties and checking for deep equality.
  * 
  *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});
  *      
  * @name notDeepOwnInclude
  * @param {Object} haystack
  * @param {Object} needle
  * @param {String} message
  * @namespace Assert
  * @api public
  */


  assert.notDeepOwnInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notDeepOwnInclude, true).not.deep.own.include(inc);
  };
  /**
   * ### .match(value, regexp, [message])
   *
   * Asserts that `value` matches the regular expression `regexp`.
   *
   *     assert.match('foobar', /^foo/, 'regexp matches');
   *
   * @name match
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.match = function (exp, re, msg) {
    new Assertion(exp, msg, assert.match, true).to.match(re);
  };
  /**
   * ### .notMatch(value, regexp, [message])
   *
   * Asserts that `value` does not match the regular expression `regexp`.
   *
   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');
   *
   * @name notMatch
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notMatch = function (exp, re, msg) {
    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);
  };
  /**
   * ### .property(object, property, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property`.
   *
   *     assert.property({ tea: { green: 'matcha' }}, 'tea');
   *     assert.property({ tea: { green: 'matcha' }}, 'toString');
   *
   * @name property
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.property = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.property, true).to.have.property(prop);
  };
  /**
   * ### .notProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property`.
   *
   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');
   *
   * @name notProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.notProperty, true).to.not.have.property(prop);
  };
  /**
   * ### .propertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property` with a value given by `value`. Uses a strict equality check
   * (===).
   *
   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');
   *
   * @name propertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.propertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.propertyVal, true).to.have.property(prop, val);
  };
  /**
   * ### .notPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property` with value given by `value`. Uses a strict equality check
   * (===).
   *
   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');
   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');
   *
   * @name notPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notPropertyVal, true).to.not.have.property(prop, val);
  };
  /**
   * ### .deepPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property` with a value given by `value`. Uses a deep equality check.
   *
   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });
   *
   * @name deepPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.deepPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.deepPropertyVal, true).to.have.deep.property(prop, val);
  };
  /**
   * ### .notDeepPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property` with value given by `value`. Uses a deep equality check.
   *
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });
   *
   * @name notDeepPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notDeepPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notDeepPropertyVal, true).to.not.have.deep.property(prop, val);
  };
  /**
   * ### .ownProperty(object, property, [message])
   *
   * Asserts that `object` has a direct property named by `property`. Inherited
   * properties aren't checked.
   *
   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');
   *
   * @name ownProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */


  assert.ownProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.ownProperty, true).to.have.own.property(prop);
  };
  /**
   * ### .notOwnProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by
   * `property`. Inherited properties aren't checked.
   *
   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');
   *     assert.notOwnProperty({}, 'toString');
   *
   * @name notOwnProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */


  assert.notOwnProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.notOwnProperty, true).to.not.have.own.property(prop);
  };
  /**
   * ### .ownPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct property named by `property` and a value
   * equal to the provided `value`. Uses a strict equality check (===).
   * Inherited properties aren't checked.
   *
   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');
   *
   * @name ownPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */


  assert.ownPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.ownPropertyVal, true).to.have.own.property(prop, value);
  };
  /**
   * ### .notOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by `property`
   * with a value equal to the provided `value`. Uses a strict equality check
   * (===). Inherited properties aren't checked.
   *
   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');
   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);
   *
   * @name notOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */


  assert.notOwnPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.notOwnPropertyVal, true).to.not.have.own.property(prop, value);
  };
  /**
   * ### .deepOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct property named by `property` and a value
   * equal to the provided `value`. Uses a deep equality check. Inherited
   * properties aren't checked.
   *
   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });
   *
   * @name deepOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */


  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.deepOwnPropertyVal, true).to.have.deep.own.property(prop, value);
  };
  /**
   * ### .notDeepOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by `property`
   * with a value equal to the provided `value`. Uses a deep equality check.
   * Inherited properties aren't checked.
   *
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });
   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);
   *
   * @name notDeepOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */


  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {
    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true).to.not.have.deep.own.property(prop, value);
  };
  /**
   * ### .nestedProperty(object, property, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property`, which can be a string using dot- and bracket-notation for
   * nested reference.
   *
   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');
   *
   * @name nestedProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.nestedProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.nestedProperty, true).to.have.nested.property(prop);
  };
  /**
   * ### .notNestedProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property`, which
   * can be a string using dot- and bracket-notation for nested reference. The
   * property cannot exist on the object nor anywhere in its prototype chain.
   *
   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');
   *
   * @name notNestedProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notNestedProperty = function (obj, prop, msg) {
    new Assertion(obj, msg, assert.notNestedProperty, true).to.not.have.nested.property(prop);
  };
  /**
   * ### .nestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with value given
   * by `value`. `property` can use dot- and bracket-notation for nested
   * reference. Uses a strict equality check (===).
   *
   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');
   *
   * @name nestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.nestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.nestedPropertyVal, true).to.have.nested.property(prop, val);
  };
  /**
   * ### .notNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property` with
   * value given by `value`. `property` can use dot- and bracket-notation for
   * nested reference. Uses a strict equality check (===).
   *
   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');
   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');
   *
   * @name notNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notNestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notNestedPropertyVal, true).to.not.have.nested.property(prop, val);
  };
  /**
   * ### .deepNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with a value given
   * by `value`. `property` can use dot- and bracket-notation for nested
   * reference. Uses a deep equality check.
   *
   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });
   *
   * @name deepNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.deepNestedPropertyVal, true).to.have.deep.nested.property(prop, val);
  };
  /**
   * ### .notDeepNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property` with
   * value given by `value`. `property` can use dot- and bracket-notation for
   * nested reference. Uses a deep equality check.
   *
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });
   *
   * @name notDeepNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true).to.not.have.deep.nested.property(prop, val);
  };
  /**
   * ### .lengthOf(object, length, [message])
   *
   * Asserts that `object` has a `length` property with the expected value.
   *
   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');
   *     assert.lengthOf('foobar', 6, 'string has length of 6');
   *
   * @name lengthOf
   * @param {Mixed} object
   * @param {Number} length
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.lengthOf = function (exp, len, msg) {
    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);
  };
  /**
   * ### .hasAnyKeys(object, [keys], [message])
   *
   * Asserts that `object` has at least one of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);
   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});
   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);
   *
   * @name hasAnyKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.hasAnyKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);
  };
  /**
   * ### .hasAllKeys(object, [keys], [message])
   *
   * Asserts that `object` has all and only all of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);
   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);
   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);
   *
   * @name hasAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.hasAllKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);
  };
  /**
   * ### .containsAllKeys(object, [keys], [message])
   *
   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});
   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);
   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);
   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);
   *
   * @name containsAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.containsAllKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.containsAllKeys, true).to.contain.all.keys(keys);
  };
  /**
   * ### .doesNotHaveAnyKeys(object, [keys], [message])
   *
   * Asserts that `object` has none of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);
   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});
   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);
   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);
   *
   * @name doesNotHaveAnyKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true).to.not.have.any.keys(keys);
  };
  /**
   * ### .doesNotHaveAllKeys(object, [keys], [message])
   *
   * Asserts that `object` does not have at least one of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);
   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});
   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);
   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);
   *
   * @name doesNotHaveAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.doesNotHaveAllKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true).to.not.have.all.keys(keys);
  };
  /**
   * ### .hasAnyDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` has at least one of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
   *
   * @name doesNotHaveAllKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.hasAnyDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAnyDeepKeys, true).to.have.any.deep.keys(keys);
  };
  /**
    * ### .hasAllDeepKeys(object, [keys], [message])
    *
    * Asserts that `object` has all and only all of the `keys` provided.
    * Since Sets and Maps can have objects as keys you can use this assertion to perform
    * a deep comparison.
    * You can also provide a single object instead of a `keys` array and its keys
    * will be used as the expected set of keys.
    *
    *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});
    *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
    *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});
    *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
    *
    * @name hasAllDeepKeys
    * @param {Mixed} object
    * @param {Array|Object} keys
    * @param {String} message
    * @namespace Assert
    * @api public
    */


  assert.hasAllDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.hasAllDeepKeys, true).to.have.all.deep.keys(keys);
  };
  /**
    * ### .containsAllDeepKeys(object, [keys], [message])
    *
    * Asserts that `object` contains all of the `keys` provided.
    * Since Sets and Maps can have objects as keys you can use this assertion to perform
    * a deep comparison.
    * You can also provide a single object instead of a `keys` array and its keys
    * will be used as the expected set of keys.
    *
    *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});
    *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
    *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});
    *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
    *
    * @name containsAllDeepKeys
    * @param {Mixed} object
    * @param {Array|Object} keys
    * @param {String} message
    * @namespace Assert
    * @api public
    */


  assert.containsAllDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.containsAllDeepKeys, true).to.contain.all.deep.keys(keys);
  };
  /**
    * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])
    *
    * Asserts that `object` has none of the `keys` provided.
    * Since Sets and Maps can have objects as keys you can use this assertion to perform
    * a deep comparison.
    * You can also provide a single object instead of a `keys` array and its keys
    * will be used as the expected set of keys.
    *
    *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});
    *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);
    *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});
    *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);
    *
    * @name doesNotHaveAnyDeepKeys
    * @param {Mixed} object
    * @param {Array|Object} keys
    * @param {String} message
    * @namespace Assert
    * @api public
    */


  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true).to.not.have.any.deep.keys(keys);
  };
  /**
    * ### .doesNotHaveAllDeepKeys(object, [keys], [message])
    *
    * Asserts that `object` does not have at least one of the `keys` provided.
    * Since Sets and Maps can have objects as keys you can use this assertion to perform
    * a deep comparison.
    * You can also provide a single object instead of a `keys` array and its keys
    * will be used as the expected set of keys.
    *
    *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});
    *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);
    *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});
    *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);
    *
    * @name doesNotHaveAllDeepKeys
    * @param {Mixed} object
    * @param {Array|Object} keys
    * @param {String} message
    * @namespace Assert
    * @api public
    */


  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {
    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true).to.not.have.all.deep.keys(keys);
  };
  /**
    * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])
    *
    * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an
    * instance of `errorLike`.
    * If `errorLike` is an `Error` instance, asserts that the error thrown is the same
    * instance as `errorLike`.
    * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a
    * message matching `errMsgMatcher`.
    *
    *     assert.throws(fn, 'function throws a reference error');
    *     assert.throws(fn, /function throws a reference error/);
    *     assert.throws(fn, ReferenceError);
    *     assert.throws(fn, errorInstance);
    *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');
    *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');
    *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);
    *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);
    *
    * @name throws
    * @alias throw
    * @alias Throw
    * @param {Function} fn
    * @param {ErrorConstructor|Error} errorLike
    * @param {RegExp|String} errMsgMatcher
    * @param {String} message
    * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
    * @namespace Assert
    * @api public
    */


  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {
    if ('string' === typeof errorLike || errorLike instanceof RegExp) {
      errMsgMatcher = errorLike;
      errorLike = null;
    }

    var assertErr = new Assertion(fn, msg, assert.throws, true).to.throw(errorLike, errMsgMatcher);
    return flag(assertErr, 'object');
  };
  /**
   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])
   *
   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an
   * instance of `errorLike`.
   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same
   * instance as `errorLike`.
   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a
   * message matching `errMsgMatcher`.
   *
   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');
   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);
   *     assert.doesNotThrow(fn, Error);
   *     assert.doesNotThrow(fn, errorInstance);
   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');
   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');
   *     assert.doesNotThrow(fn, Error, /Error must not match this/);
   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);
   *
   * @name doesNotThrow
   * @param {Function} fn
   * @param {ErrorConstructor} errorLike
   * @param {RegExp|String} errMsgMatcher
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @namespace Assert
   * @api public
   */


  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {
    if ('string' === typeof errorLike || errorLike instanceof RegExp) {
      errMsgMatcher = errorLike;
      errorLike = null;
    }

    new Assertion(fn, msg, assert.doesNotThrow, true).to.not.throw(errorLike, errMsgMatcher);
  };
  /**
   * ### .operator(val1, operator, val2, [message])
   *
   * Compares two values using `operator`.
   *
   *     assert.operator(1, '<', 2, 'everything is ok');
   *     assert.operator(1, '>', 2, 'this will fail');
   *
   * @name operator
   * @param {Mixed} val1
   * @param {String} operator
   * @param {Mixed} val2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.operator = function (val, operator, val2, msg) {
    var ok;

    switch (operator) {
      case '==':
        ok = val == val2;
        break;

      case '===':
        ok = val === val2;
        break;

      case '>':
        ok = val > val2;
        break;

      case '>=':
        ok = val >= val2;
        break;

      case '<':
        ok = val < val2;
        break;

      case '<=':
        ok = val <= val2;
        break;

      case '!=':
        ok = val != val2;
        break;

      case '!==':
        ok = val !== val2;
        break;

      default:
        msg = msg ? msg + ': ' : msg;
        throw new chai.AssertionError(msg + 'Invalid operator "' + operator + '"', undefined, assert.operator);
    }

    var test = new Assertion(ok, msg, assert.operator, true);
    test.assert(true === flag(test, 'object'), 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2), 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2));
  };
  /**
   * ### .closeTo(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');
   *
   * @name closeTo
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.closeTo = function (act, exp, delta, msg) {
    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);
  };
  /**
   * ### .approximately(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');
   *
   * @name approximately
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.approximately = function (act, exp, delta, msg) {
    new Assertion(act, msg, assert.approximately, true).to.be.approximately(exp, delta);
  };
  /**
   * ### .sameMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in any order. Uses a
   * strict equality check (===).
   *
   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');
   *
   * @name sameMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.sameMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameMembers, true).to.have.same.members(set2);
  };
  /**
   * ### .notSameMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in any order.
   * Uses a strict equality check (===).
   *
   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');
   *
   * @name notSameMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notSameMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameMembers, true).to.not.have.same.members(set2);
  };
  /**
   * ### .sameDeepMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in any order. Uses a
   * deep equality check.
   *
   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');
   *
   * @name sameDeepMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.sameDeepMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameDeepMembers, true).to.have.same.deep.members(set2);
  };
  /**
   * ### .notSameDeepMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in any order.
   * Uses a deep equality check.
   *
   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');
   *
   * @name notSameDeepMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notSameDeepMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameDeepMembers, true).to.not.have.same.deep.members(set2);
  };
  /**
   * ### .sameOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in the same order.
   * Uses a strict equality check (===).
   *
   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');
   *
   * @name sameOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.sameOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameOrderedMembers, true).to.have.same.ordered.members(set2);
  };
  /**
   * ### .notSameOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in the same
   * order. Uses a strict equality check (===).
   *
   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');
   *
   * @name notSameOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notSameOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameOrderedMembers, true).to.not.have.same.ordered.members(set2);
  };
  /**
   * ### .sameDeepOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in the same order.
   * Uses a deep equality check.
   *
   * assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');
   *
   * @name sameDeepOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.sameDeepOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true).to.have.same.deep.ordered.members(set2);
  };
  /**
   * ### .notSameDeepOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in the same
   * order. Uses a deep equality check.
   *
   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');
   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');
   *
   * @name notSameDeepOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {
    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true).to.not.have.same.deep.ordered.members(set2);
  };
  /**
   * ### .includeMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in any order. Uses a
   * strict equality check (===). Duplicates are ignored.
   *
   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');
   *
   * @name includeMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.includeMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeMembers, true).to.include.members(subset);
  };
  /**
   * ### .notIncludeMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in any order. Uses a
   * strict equality check (===). Duplicates are ignored.
   *
   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');
   *
   * @name notIncludeMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notIncludeMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeMembers, true).to.not.include.members(subset);
  };
  /**
   * ### .includeDeepMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in any order. Uses a deep
   * equality check. Duplicates are ignored.
   *
   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');
   *
   * @name includeDeepMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.includeDeepMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeDeepMembers, true).to.include.deep.members(subset);
  };
  /**
   * ### .notIncludeDeepMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in any order. Uses a
   * deep equality check. Duplicates are ignored.
   *
   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');
   *
   * @name notIncludeDeepMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notIncludeDeepMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeDeepMembers, true).to.not.include.deep.members(subset);
  };
  /**
   * ### .includeOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a strict equality
   * check (===).
   *
   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');
   *
   * @name includeOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.includeOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeOrderedMembers, true).to.include.ordered.members(subset);
  };
  /**
   * ### .notIncludeOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a strict equality
   * check (===).
   *
   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');
   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');
   *
   * @name notIncludeOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notIncludeOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true).to.not.include.ordered.members(subset);
  };
  /**
   * ### .includeDeepOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a deep equality
   * check.
   *
   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');
   *
   * @name includeDeepOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.includeDeepOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true).to.include.deep.ordered.members(subset);
  };
  /**
   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a deep equality
   * check.
   *
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');
   *
   * @name notIncludeDeepOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {
    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true).to.not.include.deep.ordered.members(subset);
  };
  /**
   * ### .oneOf(inList, list, [message])
   *
   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.
   *
   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');
   *
   * @name oneOf
   * @param {*} inList
   * @param {Array<*>} list
   * @param {String} message
   * @namespace Assert
   * @api public
   */


  assert.oneOf = function (inList, list, msg) {
    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);
  };
  /**
   * ### .changes(function, object, property, [message])
   *
   * Asserts that a function changes the value of a property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 22 };
   *     assert.changes(fn, obj, 'val');
   *
   * @name changes
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.changes = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);
  };
  /**
  * ### .changesBy(function, object, property, delta, [message])
  *
  * Asserts that a function changes the value of a property by an amount (delta).
  *
  *     var obj = { val: 10 };
  *     var fn = function() { obj.val += 2 };
  *     assert.changesBy(fn, obj, 'val', 2);
  *
  * @name changesBy
  * @param {Function} modifier function
  * @param {Object} object or getter function
  * @param {String} property name _optional_
  * @param {Number} change amount (delta)
  * @param {String} message _optional_
  * @namespace Assert
  * @api public
  */


  assert.changesBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.changesBy, true).to.change(obj, prop).by(delta);
  };
  /**
  * ### .doesNotChange(function, object, property, [message])
  *
  * Asserts that a function does not change the value of a property.
  *
  *     var obj = { val: 10 };
  *     var fn = function() { console.log('foo'); };
  *     assert.doesNotChange(fn, obj, 'val');
  *
  * @name doesNotChange
  * @param {Function} modifier function
  * @param {Object} object or getter function
  * @param {String} property name _optional_
  * @param {String} message _optional_
  * @namespace Assert
  * @api public
  */


  assert.doesNotChange = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotChange, true).to.not.change(obj, prop);
  };
  /**
   * ### .changesButNotBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 10 };
   *     assert.changesButNotBy(fn, obj, 'val', 5);
   *
   * @name changesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.changesButNotBy, true).to.change(obj, prop).but.not.by(delta);
  };
  /**
   * ### .increases(function, object, property, [message])
   *
   * Asserts that a function increases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 13 };
   *     assert.increases(fn, obj, 'val');
   *
   * @name increases
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.increases = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.increases, true).to.increase(obj, prop);
  };
  /**
   * ### .increasesBy(function, object, property, delta, [message])
   *
   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 10 };
   *     assert.increasesBy(fn, obj, 'val', 10);
   *
   * @name increasesBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.increasesBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.increasesBy, true).to.increase(obj, prop).by(delta);
  };
  /**
   * ### .doesNotIncrease(function, object, property, [message])
   *
   * Asserts that a function does not increase a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 8 };
   *     assert.doesNotIncrease(fn, obj, 'val');
   *
   * @name doesNotIncrease
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.doesNotIncrease = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotIncrease, true).to.not.increase(obj, prop);
  };
  /**
   * ### .increasesButNotBy(function, object, property, [message])
   *
   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 15 };
   *     assert.increasesButNotBy(fn, obj, 'val', 10);
   *
   * @name increasesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.increasesButNotBy, true).to.increase(obj, prop).but.not.by(delta);
  };
  /**
   * ### .decreases(function, object, property, [message])
   *
   * Asserts that a function decreases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.decreases(fn, obj, 'val');
   *
   * @name decreases
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.decreases = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.decreases, true).to.decrease(obj, prop);
  };
  /**
   * ### .decreasesBy(function, object, property, delta, [message])
   *
   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val -= 5 };
   *     assert.decreasesBy(fn, obj, 'val', 5);
   *
   * @name decreasesBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.decreasesBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.decreasesBy, true).to.decrease(obj, prop).by(delta);
  };
  /**
   * ### .doesNotDecrease(function, object, property, [message])
   *
   * Asserts that a function does not decreases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 15 };
   *     assert.doesNotDecrease(fn, obj, 'val');
   *
   * @name doesNotDecrease
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.doesNotDecrease = function (fn, obj, prop, msg) {
    if (arguments.length === 3 && typeof obj === 'function') {
      msg = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotDecrease, true).to.not.decrease(obj, prop);
  };
  /**
   * ### .doesNotDecreaseBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);
   *
   * @name doesNotDecrease
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true).to.not.decrease(obj, prop).by(delta);
  };
  /**
   * ### .decreasesButNotBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.decreasesButNotBy(fn, obj, 'val', 1);
   *
   * @name decreasesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {
    if (arguments.length === 4 && typeof obj === 'function') {
      var tmpMsg = delta;
      delta = prop;
      msg = tmpMsg;
    } else if (arguments.length === 3) {
      delta = prop;
      prop = null;
    }

    new Assertion(fn, msg, assert.decreasesButNotBy, true).to.decrease(obj, prop).but.not.by(delta);
  };
  /*!
   * ### .ifError(object)
   *
   * Asserts if value is not a false value, and throws if it is a true value.
   * This is added to allow for chai to be a drop-in replacement for Node's
   * assert class.
   *
   *     var err = new Error('I am a custom error');
   *     assert.ifError(err); // Rethrows err!
   *
   * @name ifError
   * @param {Object} object
   * @namespace Assert
   * @api public
   */


  assert.ifError = function (val) {
    if (val) {
      throw val;
    }
  };
  /**
   * ### .isExtensible(object)
   *
   * Asserts that `object` is extensible (can have new properties added to it).
   *
   *     assert.isExtensible({});
   *
   * @name isExtensible
   * @alias extensible
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.isExtensible = function (obj, msg) {
    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;
  };
  /**
   * ### .isNotExtensible(object)
   *
   * Asserts that `object` is _not_ extensible.
   *
   *     var nonExtensibleObject = Object.preventExtensions({});
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freeze({});
   *
   *     assert.isNotExtensible(nonExtensibleObject);
   *     assert.isNotExtensible(sealedObject);
   *     assert.isNotExtensible(frozenObject);
   *
   * @name isNotExtensible
   * @alias notExtensible
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.isNotExtensible = function (obj, msg) {
    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;
  };
  /**
   * ### .isSealed(object)
   *
   * Asserts that `object` is sealed (cannot have new properties added to it
   * and its existing properties cannot be removed).
   *
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.seal({});
   *
   *     assert.isSealed(sealedObject);
   *     assert.isSealed(frozenObject);
   *
   * @name isSealed
   * @alias sealed
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.isSealed = function (obj, msg) {
    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;
  };
  /**
   * ### .isNotSealed(object)
   *
   * Asserts that `object` is _not_ sealed.
   *
   *     assert.isNotSealed({});
   *
   * @name isNotSealed
   * @alias notSealed
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.isNotSealed = function (obj, msg) {
    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;
  };
  /**
   * ### .isFrozen(object)
   *
   * Asserts that `object` is frozen (cannot have new properties added to it
   * and its existing properties cannot be modified).
   *
   *     var frozenObject = Object.freeze({});
   *     assert.frozen(frozenObject);
   *
   * @name isFrozen
   * @alias frozen
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.isFrozen = function (obj, msg) {
    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;
  };
  /**
   * ### .isNotFrozen(object)
   *
   * Asserts that `object` is _not_ frozen.
   *
   *     assert.isNotFrozen({});
   *
   * @name isNotFrozen
   * @alias notFrozen
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.isNotFrozen = function (obj, msg) {
    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;
  };
  /**
   * ### .isEmpty(target)
   *
   * Asserts that the target does not contain any values.
   * For arrays and strings, it checks the `length` property.
   * For `Map` and `Set` instances, it checks the `size` property.
   * For non-function objects, it gets the count of own
   * enumerable string keys.
   *
   *     assert.isEmpty([]);
   *     assert.isEmpty('');
   *     assert.isEmpty(new Map);
   *     assert.isEmpty({});
   *
   * @name isEmpty
   * @alias empty
   * @param {Object|Array|String|Map|Set} target
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.isEmpty = function (val, msg) {
    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;
  };
  /**
   * ### .isNotEmpty(target)
   *
   * Asserts that the target contains values.
   * For arrays and strings, it checks the `length` property.
   * For `Map` and `Set` instances, it checks the `size` property.
   * For non-function objects, it gets the count of own
   * enumerable string keys.
   *
   *     assert.isNotEmpty([1, 2]);
   *     assert.isNotEmpty('34');
   *     assert.isNotEmpty(new Set([5, 6]));
   *     assert.isNotEmpty({ key: 7 });
   *
   * @name isNotEmpty
   * @alias notEmpty
   * @param {Object|Array|String|Map|Set} target
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */


  assert.isNotEmpty = function (val, msg) {
    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;
  };
  /*!
   * Aliases.
   */


  (function alias(name, as) {
    assert[as] = assert[name];
    return alias;
  })('isOk', 'ok')('isNotOk', 'notOk')('throws', 'throw')('throws', 'Throw')('isExtensible', 'extensible')('isNotExtensible', 'notExtensible')('isSealed', 'sealed')('isNotSealed', 'notSealed')('isFrozen', 'frozen')('isNotFrozen', 'notFrozen')('isEmpty', 'empty')('isNotEmpty', 'notEmpty');
};var chai$1 = createCommonjsModule(function (module, exports) {
  /*!
   * chai
   * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */
  var used = [];
  /*!
   * Chai version
   */

  exports.version = '4.1.2';
  /*!
   * Assertion Error
   */

  exports.AssertionError = assertionError;
  /*!
   * Utils for plugins (not exported)
   */

  /**
   * # .use(function)
   *
   * Provides a way to extend the internals of Chai.
   *
   * @param {Function}
   * @returns {this} for chaining
   * @api public
   */

  exports.use = function (fn) {
    if (!~used.indexOf(fn)) {
      fn(exports, utils);
      used.push(fn);
    }

    return exports;
  };
  /*!
   * Utility Functions
   */


  exports.util = utils;
  /*!
   * Configuration
   */

  exports.config = config;
  /*!
   * Primary `Assertion` prototype
   */

  exports.use(assertion);
  /*!
   * Core Assertions
   */

  exports.use(assertions);
  /*!
   * Expect interface
   */

  exports.use(expect);
  /*!
   * Should interface
   */

  exports.use(should);
  /*!
   * Assert interface
   */

  exports.use(assert);
});
var chai_1 = chai$1.version;
var chai_2 = chai$1.AssertionError;
var chai_3 = chai$1.use;
var chai_4 = chai$1.util;
var chai_5 = chai$1.config;var chai$2 = chai$1;var chaiDom = createCommonjsModule(function (module, exports) {
  (function (chaiDom) {
    if (typeof commonjsRequire === 'function' && 'object' === 'object' && 'object' === 'object') {
      module.exports = chaiDom;
    } else {
      chai.use(chaiDom);
    }
  })(function (chai, utils) {
    var flag = utils.flag,
        elToString = function (el) {
      var desc;

      if (el instanceof window.NodeList) {
        if (el.length === 0) return 'empty NodeList';
        desc = Array.prototype.slice.call(el, 0, 5).map(elToString).join(', ');
        return el.length > 5 ? desc + '... (+' + (el.length - 5) + ' more)' : desc;
      }

      if (!(el instanceof window.HTMLElement)) {
        return String(el);
      }

      desc = el.tagName.toLowerCase();

      if (el.id) {
        desc += '#' + el.id;
      }

      if (el.className) {
        desc += '.' + String(el.className).replace(/\s+/g, '.');
      }

      Array.prototype.forEach.call(el.attributes, function (attr) {
        if (attr.name !== 'class' && attr.name !== 'id') {
          desc += '[' + attr.name + (attr.value ? '="' + attr.value + '"]' : ']');
        }
      });
      return desc;
    },
        attrAssert = function (name, val) {
      var el = flag(this, 'object'),
          actual = el.getAttribute(name);

      if (!flag(this, 'negate') || undefined === val) {
        this.assert(!!el.attributes[name], 'expected ' + elToString(el) + ' to have an attribute #{exp}', 'expected ' + elToString(el) + ' not to have an attribute #{exp}', name);
      }

      if (undefined !== val) {
        this.assert(val === actual, 'expected ' + elToString(el) + ' to have an attribute ' + utils.inspect(name) + ' with the value #{exp}, but the value was #{act}', 'expected ' + elToString(el) + ' not to have an attribute ' + utils.inspect(name) + ' with the value #{act}', val, actual);
      }

      flag(this, 'object', actual);
    };

    utils.elToString = elToString;
    chai.Assertion.addMethod('attr', attrAssert);
    chai.Assertion.addMethod('attribute', attrAssert);
    chai.Assertion.addMethod('class', function (className) {
      var el = flag(this, 'object');
      this.assert(el.classList.contains(className), 'expected ' + elToString(el) + ' to have class #{exp}', 'expected ' + elToString(el) + ' not to have class #{exp}', className);
    });
    chai.Assertion.addMethod('id', function (id) {
      var el = flag(this, 'object');
      this.assert(el.id == id, 'expected ' + elToString(el) + ' to have id #{exp}', 'expected ' + elToString(el) + ' not to have id #{exp}', id);
    });
    chai.Assertion.addMethod('html', function (html) {
      var el = flag(this, 'object'),
          actual = flag(this, 'object').innerHTML;

      if (flag(this, 'contains')) {
        this.assert(actual.indexOf(html) >= 0, 'expected #{act} to contain HTML #{exp}', 'expected #{act} not to contain HTML #{exp}', html, actual);
      } else {
        this.assert(actual === html, 'expected ' + elToString(el) + ' to have HTML #{exp}, but the HTML was #{act}', 'expected ' + elToString(el) + ' not to have HTML #{exp}', html, actual);
      }
    });
    chai.Assertion.addMethod('text', function (text) {
      var obj = flag(this, 'object'),
          contains = flag(this, 'contains'),
          actual,
          result;

      if (obj instanceof window.NodeList) {
        actual = Array.prototype.map.call(obj, function (el) {
          return el.textContent;
        });

        if (Array.isArray(text)) {
          result = contains ? text[flag(this, 'negate') ? 'some' : 'every'](function (t) {
            return Array.prototype.some.call(obj, function (el) {
              return el.textContent === t;
            });
          }) : utils.eql(actual, text);
          actual = actual.join();
          text = text.join();
        } else {
          actual = actual.join('');
          result = contains ? actual.indexOf(text) >= 0 : actual === text;
        }
      } else {
        actual = flag(this, 'object').textContent;
        result = contains ? actual.indexOf(text) >= 0 : actual === text;
      }

      var objDesc = elToString(obj);

      if (contains) {
        this.assert(result, 'expected ' + objDesc + ' to contain #{exp}, but the text was #{act}', 'expected ' + objDesc + ' not to contain #{exp}, but the text was #{act}', text, actual);
      } else {
        this.assert(result, 'expected ' + objDesc + ' to have text #{exp}, but the text was #{act}', 'expected ' + objDesc + ' not to have text #{exp}', text, actual);
      }
    });
    chai.Assertion.addMethod('value', function (value) {
      var el = flag(this, 'object'),
          actual = flag(this, 'object').value;
      this.assert(flag(this, 'object').value === value, 'expected ' + elToString(el) + ' to have value #{exp}, but the value was #{act}', 'expected ' + elToString(el) + ' not to have value #{exp}', value, actual);
    });
    chai.Assertion.overwriteProperty('exist', function (_super) {
      return function () {
        var obj = flag(this, 'object');

        if (obj instanceof window.NodeList) {
          this.assert(obj.length > 0, 'expected an empty NodeList to have nodes', 'expected ' + elToString(obj) + ' to not exist');
        } else {
          _super.apply(this, arguments);
        }
      };
    });
    chai.Assertion.overwriteProperty('empty', function (_super) {
      return function () {
        var obj = flag(this, 'object');

        if (obj instanceof window.HTMLElement) {
          this.assert(obj.children.length === 0, 'expected ' + elToString(obj) + ' to be empty', 'expected ' + elToString(obj) + ' to not be empty');
        } else if (obj instanceof window.NodeList) {
          this.assert(obj.length === 0, 'expected ' + elToString(obj) + ' to be empty', 'expected ' + elToString(obj) + ' to not be empty');
        } else {
          _super.apply(this, arguments);
        }
      };
    });
    chai.Assertion.overwriteChainableMethod('length', function (_super) {
      return function (length) {
        var obj = flag(this, 'object');

        if (obj instanceof window.NodeList || obj instanceof window.HTMLElement) {
          var actualLength = obj.children ? obj.children.length : obj.length;
          this.assert(actualLength === length, 'expected ' + elToString(obj) + ' to have #{exp} children but it had #{act} children', 'expected ' + elToString(obj) + ' to not have #{exp} children', length, actualLength);
        } else {
          _super.apply(this, arguments);
        }
      };
    }, function (_super) {
      return function () {
        _super.call(this);
      };
    });
    chai.Assertion.overwriteMethod('match', function (_super) {
      return function (selector) {
        var obj = flag(this, 'object');

        if (obj instanceof window.HTMLElement) {
          this.assert(obj.matches(selector), 'expected ' + elToString(obj) + ' to match #{exp}', 'expected ' + elToString(obj) + ' to not match #{exp}', selector);
        } else if (obj instanceof window.NodeList) {
          this.assert(!!obj.length && Array.prototype.every.call(obj, function (el) {
            return el.matches(selector);
          }), 'expected ' + elToString(obj) + ' to match #{exp}', 'expected ' + elToString(obj) + ' to not match #{exp}', selector);
        } else {
          _super.apply(this, arguments);
        }
      };
    });
    chai.Assertion.overwriteChainableMethod('contain', function (_super) {
      return function (subitem) {
        var obj = flag(this, 'object');

        if (obj instanceof window.HTMLElement) {
          if (typeof subitem === 'string') {
            this.assert(!!obj.querySelector(subitem), 'expected ' + elToString(obj) + ' to contain #{exp}', 'expected ' + elToString(obj) + ' to not contain #{exp}', subitem);
          } else {
            this.assert(obj.contains(subitem), 'expected ' + elToString(obj) + ' to contain ' + elToString(subitem), 'expected ' + elToString(obj) + ' to not contain ' + elToString(subitem));
          }
        } else {
          _super.apply(this, arguments);
        }
      };
    }, function (_super) {
      return function () {
        _super.call(this);
      };
    });
    chai.Assertion.addProperty('displayed', function () {
      var el = flag(this, 'object'),
          actual = document.body.contains(el) ? window.getComputedStyle(el).display : el.style.display;
      this.assert(actual !== 'none', 'expected ' + elToString(el) + ' to be displayed, but it was not', 'expected ' + elToString(el) + ' to not be displayed, but it was as ' + actual, actual);
    });
  });
});var sources = chaiStyle;

function chaiStyle(chai, utils) {
  const {
    Assertion
  } = chai;
  const {
    flag
  } = utils;
  Assertion.addMethod('style', function (property, value = '') {
    const element = flag(this, 'object');
    const style = window.getComputedStyle(element);
    value = value.trim();
    const isNonColors = style[property] === 'rgba(0, 0, 0, 0)' // webkit
    || style[property] === 'transparent'; // firefox

    const propertyValue = isNonColors ? '' : style[property];
    const assertion = value ? compareCSSValue(propertyValue, value) : Boolean(propertyValue);
    const elementTag = element.tagName.toLowerCase();
    const throwMessage = `expect ${elementTag} to have {${property}: ${value}}, is receiving {${property}: ${propertyValue}}`;
    const throwMessageNegative = `expect ${elementTag} to not have {${property}: ${value}}, is receiving {${property}: ${propertyValue}}`;
    this.assert(assertion, throwMessage, throwMessageNegative, value);

    function compareCSSValue(computed, expected) {
      const propertyHifenCase = property.replace(/[A-Z]/g, match => '-' + match.toLowerCase());
      const fake = document.createElement('div');
      fake.style.fontSize = style.fontSize;
      fake.style.setProperty(propertyHifenCase, expected, 'important');
      const iframe = document.createElement('iframe');
      iframe.style.visibility = 'hidden';
      document.body.appendChild(iframe);
      iframe.appendChild(fake);
      const fakeStyle = window.getComputedStyle(fake);
      const value = fakeStyle[property];
      const hasAutoValue = value.includes('auto');
      const reg = new RegExp(escapeRegExp(value).replace(/auto/g, '(\\d+(.\\d+)?px|auto)'));
      return hasAutoValue ? reg.test(computed) : computed === value;
    }
  });
} // https://github.com/benjamingr/RegExp.escape/blob/master/polyfill.js


function escapeRegExp(value) {
  return String(value).replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
}var typeDetect$1 = createCommonjsModule(function (module) {
  /* !
   * type-detect
   * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
   * MIT Licensed
   */

  var getPrototypeOfExists = typeof Object.getPrototypeOf === 'function';
  var promiseExists = typeof Promise === 'function';
  var globalObject = typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : self; // eslint-disable-line

  var isDom = 'location' in globalObject && 'document' in globalObject;
  var htmlElementExists = typeof HTMLElement !== 'undefined';
  var isArrayExists = typeof Array.isArray === 'function';
  var symbolExists = typeof Symbol !== 'undefined';
  var mapExists = typeof Map !== 'undefined';
  var setExists = typeof Set !== 'undefined';
  var weakMapExists = typeof WeakMap !== 'undefined';
  var weakSetExists = typeof WeakSet !== 'undefined';
  var dataViewExists = typeof DataView !== 'undefined';
  var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';
  var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';
  var setEntriesExists = setExists && typeof Set.prototype.entries === 'function';
  var mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';
  var setIteratorPrototype = getPrototypeOfExists && setEntriesExists && Object.getPrototypeOf(new Set().entries());
  var mapIteratorPrototype = getPrototypeOfExists && mapEntriesExists && Object.getPrototypeOf(new Map().entries());
  var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
  var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
  var stringIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';
  var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());
  var toStringLeftSliceLength = 8;
  var toStringRightSliceLength = -1;
  /**
   * ### typeOf (obj)
   *
   * Uses `Object.prototype.toString` to determine the type of an object,
   * normalising behaviour across engine versions & well optimised.
   *
   * @param {Mixed} object
   * @return {String} object type
   * @api public
   */

  module.exports = function typeDetect(obj) {
    /* ! Speed optimisation
     * Pre:
     *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)
     *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)
     *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)
     *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)
     *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)
     * Post:
     *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)
     *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)
     *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)
     *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)
     *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)
     */
    var typeofObj = typeof obj;

    if (typeofObj !== 'object') {
      return typeofObj;
    }
    /* ! Speed optimisation
     * Pre:
     *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)
     * Post:
     *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)
     */


    if (obj === null) {
      return 'null';
    }
    /* ! Spec Conformance
     * Test: `Object.prototype.toString.call(window)``
     *  - Node === "[object global]"
     *  - Chrome === "[object global]"
     *  - Firefox === "[object Window]"
     *  - PhantomJS === "[object Window]"
     *  - Safari === "[object Window]"
     *  - IE 11 === "[object Window]"
     *  - IE Edge === "[object Window]"
     * Test: `Object.prototype.toString.call(this)``
     *  - Chrome Worker === "[object global]"
     *  - Firefox Worker === "[object DedicatedWorkerGlobalScope]"
     *  - Safari Worker === "[object DedicatedWorkerGlobalScope]"
     *  - IE 11 Worker === "[object WorkerGlobalScope]"
     *  - IE Edge Worker === "[object WorkerGlobalScope]"
     */


    if (obj === globalObject) {
      return 'global';
    }
    /* ! Speed optimisation
     * Pre:
     *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)
     * Post:
     *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)
     */


    if (isArrayExists && Array.isArray(obj)) {
      return 'Array';
    }

    if (isDom) {
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/browsers.html#location)
       * WhatWG HTML$7.7.3 - The `Location` interface
       * Test: `Object.prototype.toString.call(window.location)``
       *  - IE <=11 === "[object Object]"
       *  - IE Edge <=13 === "[object Object]"
       */
      if (obj === globalObject.location) {
        return 'Location';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#document)
       * WhatWG HTML$3.1.1 - The `Document` object
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       *       WhatWG HTML states:
       *         > For historical reasons, Window objects must also have a
       *         > writable, configurable, non-enumerable property named
       *         > HTMLDocument whose value is the Document interface object.
       * Test: `Object.prototype.toString.call(document)``
       *  - Chrome === "[object HTMLDocument]"
       *  - Firefox === "[object HTMLDocument]"
       *  - Safari === "[object HTMLDocument]"
       *  - IE <=10 === "[object Document]"
       *  - IE 11 === "[object HTMLDocument]"
       *  - IE Edge <=13 === "[object HTMLDocument]"
       */


      if (obj === globalObject.document) {
        return 'Document';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray
       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``
       *  - IE <=10 === "[object MSMimeTypesCollection]"
       */


      if (obj === (globalObject.navigator || {}).mimeTypes) {
        return 'MimeTypeArray';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray
       * Test: `Object.prototype.toString.call(navigator.plugins)``
       *  - IE <=10 === "[object MSPluginsCollection]"
       */


      if (obj === (globalObject.navigator || {}).plugins) {
        return 'PluginArray';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
       * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`
       * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``
       *  - IE <=10 === "[object HTMLBlockElement]"
       */


      if (htmlElementExists && obj instanceof HTMLElement && obj.tagName === 'BLOCKQUOTE') {
        return 'HTMLQuoteElement';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltabledatacellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('td'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */


      if (htmlElementExists && obj instanceof HTMLElement && obj.tagName === 'TD') {
        return 'HTMLTableDataCellElement';
      }
      /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltableheadercellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('th'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */


      if (htmlElementExists && obj instanceof HTMLElement && obj.tagName === 'TH') {
        return 'HTMLTableHeaderCellElement';
      }
    }
    /* ! Speed optimisation
    * Pre:
    *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)
    *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)
    *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)
    *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)
    *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)
    *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)
    *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)
    *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)
    *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)
    * Post:
    *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)
    *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)
    *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)
    *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)
    *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)
    *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)
    *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)
    *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)
    *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)
    */


    var stringTag = symbolToStringTagExists && obj[Symbol.toStringTag];

    if (typeof stringTag === 'string') {
      return stringTag;
    }

    if (getPrototypeOfExists) {
      var objPrototype = Object.getPrototypeOf(obj);
      /* ! Speed optimisation
      * Pre:
      *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)
      *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)
      * Post:
      *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)
      *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)
      */

      if (objPrototype === RegExp.prototype) {
        return 'RegExp';
      }
      /* ! Speed optimisation
      * Pre:
      *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)
      * Post:
      *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)
      */


      if (objPrototype === Date.prototype) {
        return 'Date';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)
       * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be "Promise":
       * Test: `Object.prototype.toString.call(Promise.resolve())``
       *  - Chrome <=47 === "[object Object]"
       *  - Edge <=20 === "[object Object]"
       *  - Firefox 29-Latest === "[object Promise]"
       *  - Safari 7.1-Latest === "[object Promise]"
       */


      if (promiseExists && objPrototype === Promise.prototype) {
        return 'Promise';
      }
      /* ! Speed optimisation
      * Pre:
      *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)
      * Post:
      *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)
      */


      if (setExists && objPrototype === Set.prototype) {
        return 'Set';
      }
      /* ! Speed optimisation
      * Pre:
      *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)
      * Post:
      *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)
      */


      if (mapExists && objPrototype === Map.prototype) {
        return 'Map';
      }
      /* ! Speed optimisation
      * Pre:
      *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)
      * Post:
      *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)
      */


      if (weakSetExists && objPrototype === WeakSet.prototype) {
        return 'WeakSet';
      }
      /* ! Speed optimisation
      * Pre:
      *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)
      * Post:
      *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)
      */


      if (weakMapExists && objPrototype === WeakMap.prototype) {
        return 'WeakMap';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)
       * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be "DataView":
       * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``
       *  - Edge <=13 === "[object Object]"
       */


      if (dataViewExists && objPrototype === DataView.prototype) {
        return 'DataView';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)
       * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be "Map Iterator":
       * Test: `Object.prototype.toString.call(new Map().entries())``
       *  - Edge <=13 === "[object Object]"
       */


      if (mapExists && objPrototype === mapIteratorPrototype) {
        return 'Map Iterator';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)
       * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be "Set Iterator":
       * Test: `Object.prototype.toString.call(new Set().entries())``
       *  - Edge <=13 === "[object Object]"
       */


      if (setExists && objPrototype === setIteratorPrototype) {
        return 'Set Iterator';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)
       * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be "Array Iterator":
       * Test: `Object.prototype.toString.call([][Symbol.iterator]())``
       *  - Edge <=13 === "[object Object]"
       */


      if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {
        return 'Array Iterator';
      }
      /* ! Spec Conformance
       * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)
       * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be "String Iterator":
       * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``
       *  - Edge <=13 === "[object Object]"
       */


      if (stringIteratorExists && objPrototype === stringIteratorPrototype) {
        return 'String Iterator';
      }
      /* ! Speed optimisation
      * Pre:
      *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)
      * Post:
      *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)
      */


      if (objPrototype === null) {
        return 'Object';
      }
    }

    return Object.prototype.toString.call(obj).slice(toStringLeftSliceLength, toStringRightSliceLength);
  };

  module.exports.typeDetect = module.exports;
});
var typeDetect_1$1 = typeDetect$1.typeDetect;/* globals Symbol: true, Uint8Array: true, WeakMap: true */

/*!
 * deep-eql
 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */


function FakeMap$1() {
  this.clear();
}

FakeMap$1.prototype = {
  clear: function clearMap() {
    this.keys = [];
    this.values = [];
    return this;
  },
  set: function setMap(key, value) {
    var index = this.keys.indexOf(key);

    if (index >= 0) {
      this.values[index] = value;
    } else {
      this.keys.push(key);
      this.values.push(value);
    }

    return this;
  },
  get: function getMap(key) {
    return this.values[this.keys.indexOf(key)];
  },
  delete: function deleteMap(key) {
    var index = this.keys.indexOf(key);

    if (index >= 0) {
      this.values = this.values.slice(0, index).concat(this.values.slice(index + 1));
      this.keys = this.keys.slice(0, index).concat(this.keys.slice(index + 1));
    }

    return this;
  }
};
var MemoizeMap$1 = null;

if (typeof WeakMap === 'function') {
  MemoizeMap$1 = WeakMap;
} else {
  MemoizeMap$1 = FakeMap$1;
}
/*!
 * Check to see if the MemoizeMap has recorded a result of the two operands
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @returns {Boolean|null} result
*/


function memoizeCompare$1(leftHandOperand, rightHandOperand, memoizeMap) {
  // Technically, WeakMap keys can *only* be objects, not primitives.
  if (!memoizeMap || isPrimitive$1(leftHandOperand) || isPrimitive$1(rightHandOperand)) {
    return null;
  }

  var leftHandMap = memoizeMap.get(leftHandOperand);

  if (leftHandMap) {
    var result = leftHandMap.get(rightHandOperand);

    if (typeof result === 'boolean') {
      return result;
    }
  }

  return null;
}
/*!
 * Set the result of the equality into the MemoizeMap
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @param {Boolean} result
*/


function memoizeSet$1(leftHandOperand, rightHandOperand, memoizeMap, result) {
  // Technically, WeakMap keys can *only* be objects, not primitives.
  if (!memoizeMap || isPrimitive$1(leftHandOperand) || isPrimitive$1(rightHandOperand)) {
    return;
  }

  var leftHandMap = memoizeMap.get(leftHandOperand);

  if (leftHandMap) {
    leftHandMap.set(rightHandOperand, result);
  } else {
    leftHandMap = new MemoizeMap$1();
    leftHandMap.set(rightHandOperand, result);
    memoizeMap.set(leftHandOperand, leftHandMap);
  }
}
/*!
 * Primary Export
 */


var deepEql$1 = deepEqual$1;
var MemoizeMap_1$1 = MemoizeMap$1;
/**
 * Assert deeply nested sameValue equality between two objects of any type.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
 */

function deepEqual$1(leftHandOperand, rightHandOperand, options) {
  // If we have a comparator, we can't assume anything; so bail to its check first.
  if (options && options.comparator) {
    return extensiveDeepEqual$1(leftHandOperand, rightHandOperand, options);
  }

  var simpleResult = simpleEqual$1(leftHandOperand, rightHandOperand);

  if (simpleResult !== null) {
    return simpleResult;
  } // Deeper comparisons are pushed through to a larger function


  return extensiveDeepEqual$1(leftHandOperand, rightHandOperand, options);
}
/**
 * Many comparisons can be canceled out early via simple equality or primitive checks.
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @return {Boolean|null} equal match
 */


function simpleEqual$1(leftHandOperand, rightHandOperand) {
  // Equal references (except for Numbers) can be returned early
  if (leftHandOperand === rightHandOperand) {
    // Handle +-0 cases
    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;
  } // handle NaN cases


  if (leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare
  rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare
  ) {
      return true;
    } // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,
  // strings, and undefined, can be compared by reference.


  if (isPrimitive$1(leftHandOperand) || isPrimitive$1(rightHandOperand)) {
    // Easy out b/c it would have passed the first equality check
    return false;
  }

  return null;
}
/*!
 * The main logic of the `deepEqual` function.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
*/


function extensiveDeepEqual$1(leftHandOperand, rightHandOperand, options) {
  options = options || {};
  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap$1();
  var comparator = options && options.comparator; // Check if a memoized result exists.

  var memoizeResultLeft = memoizeCompare$1(leftHandOperand, rightHandOperand, options.memoize);

  if (memoizeResultLeft !== null) {
    return memoizeResultLeft;
  }

  var memoizeResultRight = memoizeCompare$1(rightHandOperand, leftHandOperand, options.memoize);

  if (memoizeResultRight !== null) {
    return memoizeResultRight;
  } // If a comparator is present, use it.


  if (comparator) {
    var comparatorResult = comparator(leftHandOperand, rightHandOperand); // Comparators may return null, in which case we want to go back to default behavior.

    if (comparatorResult === false || comparatorResult === true) {
      memoizeSet$1(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);
      return comparatorResult;
    } // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide
    // what to do, we need to make sure to return the basic tests first before we move on.


    var simpleResult = simpleEqual$1(leftHandOperand, rightHandOperand);

    if (simpleResult !== null) {
      // Don't memoize this, it takes longer to set/retrieve than to just compare.
      return simpleResult;
    }
  }

  var leftHandType = typeDetect$1(leftHandOperand);

  if (leftHandType !== typeDetect$1(rightHandOperand)) {
    memoizeSet$1(leftHandOperand, rightHandOperand, options.memoize, false);
    return false;
  } // Temporarily set the operands in the memoize object to prevent blowing the stack


  memoizeSet$1(leftHandOperand, rightHandOperand, options.memoize, true);
  var result = extensiveDeepEqualByType$1(leftHandOperand, rightHandOperand, leftHandType, options);
  memoizeSet$1(leftHandOperand, rightHandOperand, options.memoize, result);
  return result;
}

function extensiveDeepEqualByType$1(leftHandOperand, rightHandOperand, leftHandType, options) {
  switch (leftHandType) {
    case 'String':
    case 'Number':
    case 'Boolean':
    case 'Date':
      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values
      return deepEqual$1(leftHandOperand.valueOf(), rightHandOperand.valueOf());

    case 'Promise':
    case 'Symbol':
    case 'function':
    case 'WeakMap':
    case 'WeakSet':
    case 'Error':
      return leftHandOperand === rightHandOperand;

    case 'Arguments':
    case 'Int8Array':
    case 'Uint8Array':
    case 'Uint8ClampedArray':
    case 'Int16Array':
    case 'Uint16Array':
    case 'Int32Array':
    case 'Uint32Array':
    case 'Float32Array':
    case 'Float64Array':
    case 'Array':
      return iterableEqual$1(leftHandOperand, rightHandOperand, options);

    case 'RegExp':
      return regexpEqual$1(leftHandOperand, rightHandOperand);

    case 'Generator':
      return generatorEqual$1(leftHandOperand, rightHandOperand, options);

    case 'DataView':
      return iterableEqual$1(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);

    case 'ArrayBuffer':
      return iterableEqual$1(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);

    case 'Set':
      return entriesEqual$1(leftHandOperand, rightHandOperand, options);

    case 'Map':
      return entriesEqual$1(leftHandOperand, rightHandOperand, options);

    default:
      return objectEqual$1(leftHandOperand, rightHandOperand, options);
  }
}
/*!
 * Compare two Regular Expressions for equality.
 *
 * @param {RegExp} leftHandOperand
 * @param {RegExp} rightHandOperand
 * @return {Boolean} result
 */


function regexpEqual$1(leftHandOperand, rightHandOperand) {
  return leftHandOperand.toString() === rightHandOperand.toString();
}
/*!
 * Compare two Sets/Maps for equality. Faster than other equality functions.
 *
 * @param {Set} leftHandOperand
 * @param {Set} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function entriesEqual$1(leftHandOperand, rightHandOperand, options) {
  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach
  if (leftHandOperand.size !== rightHandOperand.size) {
    return false;
  }

  if (leftHandOperand.size === 0) {
    return true;
  }

  var leftHandItems = [];
  var rightHandItems = [];
  leftHandOperand.forEach(function gatherEntries(key, value) {
    leftHandItems.push([key, value]);
  });
  rightHandOperand.forEach(function gatherEntries(key, value) {
    rightHandItems.push([key, value]);
  });
  return iterableEqual$1(leftHandItems.sort(), rightHandItems.sort(), options);
}
/*!
 * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function iterableEqual$1(leftHandOperand, rightHandOperand, options) {
  var length = leftHandOperand.length;

  if (length !== rightHandOperand.length) {
    return false;
  }

  if (length === 0) {
    return true;
  }

  var index = -1;

  while (++index < length) {
    if (deepEqual$1(leftHandOperand[index], rightHandOperand[index], options) === false) {
      return false;
    }
  }

  return true;
}
/*!
 * Simple equality for generator objects such as those returned by generator functions.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function generatorEqual$1(leftHandOperand, rightHandOperand, options) {
  return iterableEqual$1(getGeneratorEntries$1(leftHandOperand), getGeneratorEntries$1(rightHandOperand), options);
}
/*!
 * Determine if the given object has an @@iterator function.
 *
 * @param {Object} target
 * @return {Boolean} `true` if the object has an @@iterator function.
 */


function hasIteratorFunction$1(target) {
  return typeof Symbol !== 'undefined' && typeof target === 'object' && typeof Symbol.iterator !== 'undefined' && typeof target[Symbol.iterator] === 'function';
}
/*!
 * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.
 * This will consume the iterator - which could have side effects depending on the @@iterator implementation.
 *
 * @param {Object} target
 * @returns {Array} an array of entries from the @@iterator function
 */


function getIteratorEntries$1(target) {
  if (hasIteratorFunction$1(target)) {
    try {
      return getGeneratorEntries$1(target[Symbol.iterator]());
    } catch (iteratorError) {
      return [];
    }
  }

  return [];
}
/*!
 * Gets all entries from a Generator. This will consume the generator - which could have side effects.
 *
 * @param {Generator} target
 * @returns {Array} an array of entries from the Generator.
 */


function getGeneratorEntries$1(generator) {
  var generatorResult = generator.next();
  var accumulator = [generatorResult.value];

  while (generatorResult.done === false) {
    generatorResult = generator.next();
    accumulator.push(generatorResult.value);
  }

  return accumulator;
}
/*!
 * Gets all own and inherited enumerable keys from a target.
 *
 * @param {Object} target
 * @returns {Array} an array of own and inherited enumerable keys from the target.
 */


function getEnumerableKeys$1(target) {
  var keys = [];

  for (var key in target) {
    keys.push(key);
  }

  return keys;
}
/*!
 * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of
 * each key. If any value of the given key is not equal, the function will return false (early).
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function keysEqual$1(leftHandOperand, rightHandOperand, keys, options) {
  var length = keys.length;

  if (length === 0) {
    return true;
  }

  for (var i = 0; i < length; i += 1) {
    if (deepEqual$1(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {
      return false;
    }
  }

  return true;
}
/*!
 * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`
 * for each enumerable key in the object.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */


function objectEqual$1(leftHandOperand, rightHandOperand, options) {
  var leftHandKeys = getEnumerableKeys$1(leftHandOperand);
  var rightHandKeys = getEnumerableKeys$1(rightHandOperand);

  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {
    leftHandKeys.sort();
    rightHandKeys.sort();

    if (iterableEqual$1(leftHandKeys, rightHandKeys) === false) {
      return false;
    }

    return keysEqual$1(leftHandOperand, rightHandOperand, leftHandKeys, options);
  }

  var leftHandEntries = getIteratorEntries$1(leftHandOperand);
  var rightHandEntries = getIteratorEntries$1(rightHandOperand);

  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {
    leftHandEntries.sort();
    rightHandEntries.sort();
    return iterableEqual$1(leftHandEntries, rightHandEntries, options);
  }

  if (leftHandKeys.length === 0 && leftHandEntries.length === 0 && rightHandKeys.length === 0 && rightHandEntries.length === 0) {
    return true;
  }

  return false;
}
/*!
 * Returns true if the argument is a primitive.
 *
 * This intentionally returns true for all objects that can be compared by reference,
 * including functions and symbols.
 *
 * @param {Mixed} value
 * @return {Boolean} result
 */


function isPrimitive$1(value) {
  return value === null || typeof value !== 'object';
}
deepEql$1.MemoizeMap = MemoizeMap_1$1;var DEFAULT_TOLERANCE = 1e-6;
/**
 * small utility functions
 */

function isNumber(val) {
  return typeDetect(val) === 'number';
}

function bothNumbers(left, right) {
  return isNumber(right) && isNumber(left);
}

function almostEqual(left, right, tol) {
  return Math.abs(left - right) <= tol;
}
/**
 * Makes a comparator function to be passed to deepEqual.
 * The returned function will return null if both arguments are not numbers,
 * indicating that deepEqual should proceed with other equality checks
 */


function comparator(tolerance) {
  return function (left, right) {
    if (bothNumbers(left, right)) {
      return almostEqual(left, right, tolerance);
    }

    return null;
  };
}
/**
 * Sets global tolerance and returns a function to be passed to chai.use
 * @see http://chaijs.com/guide/plugins/
 */


function chaiAlmost(customTolerance) {
  var standardTolerance = customTolerance || DEFAULT_TOLERANCE;
  return function (chai, utils) {
    var Assertion = chai.Assertion;
    var flag = utils.flag;
    /**
     * Returns a new shallow equality function to override
     * .equal, .equals, .eq that tests 'almost' equality
     * if both values are numbers and a 'tolerance' flag is set.
     * Sends to deep equality check if deep flag is set
     */

    function overrideAssertEqual(_super) {
      return function assertEqual(val, msg) {
        if (msg) flag(this, 'message', msg);
        var deep = flag(this, 'deep');
        var tolerance = flag(this, 'tolerance');

        if (deep) {
          return this.eql(val);
        } else if (tolerance && bothNumbers(val, this._obj)) {
          this.assert(almostEqual(val, this._obj, tolerance), 'expected #{this} to almost equal #{exp}', 'expected #{this} to not almost equal #{exp}', val, this._obj, true);
        } else {
          return _super.apply(this, arguments);
        }
      };
    }
    /**
     * Returns a new deep equality function to override
     * .eql, .eqls that tests 'almost' equality if both corresponding
     * values are numbers and tolerance flag is set
     */


    function overrideAssertEql(_super) {
      return function assertEql(val, msg) {
        if (msg) flag(this, 'message', msg);
        var tolerance = flag(this, 'tolerance');

        if (tolerance) {
          this.assert(deepEql$1(val, this._obj, {
            comparator: comparator(tolerance)
          }), 'expected #{this} to deeply almost equal #{exp}', 'expected #{this} to not deeply almost equal #{exp}', val, this._obj, true);
        } else {
          return _super.apply(this, arguments);
        }
      };
    }
    /**
     * .almost() method. To be used at the end of the chain like:
     * expect(4).to.not.be.almost(5, 1.5). Simply adds tolerance flag then calls
     * .equal. This will redirect to .eql if deep flag set
     */


    function method(val, toleranceOverride) {
      var tolerance = toleranceOverride || standardTolerance;
      flag(this, 'tolerance', tolerance);
      return this.equal(val);
    }
    /**
     * .almost chainable property to be used like:
     * expect(3.99999999).to.almost.equal(4). Simply adds
     * tolerance flag to be read by equality checking methods
     */


    function chainingBehavior() {
      flag(this, 'tolerance', standardTolerance);
    }

    Assertion.addChainableMethod('almost', method, chainingBehavior);
    Assertion.overwriteMethod('equal', overrideAssertEqual);
    Assertion.overwriteMethod('equals', overrideAssertEqual);
    Assertion.overwriteMethod('eq', overrideAssertEqual);
    Assertion.overwriteMethod('eql', overrideAssertEql);
    Assertion.overwriteMethod('eqls', overrideAssertEql);
  };
}

var chaiAlmost_1 = chaiAlmost;var checkTypes = createCommonjsModule(function (module) {
  /*globals define, module, Symbol */

  /*jshint -W056 */
  (function (globals) {

    var strings, messages, predicates, functions, assert, not, maybe, collections, slice, neginf, posinf, isArray, haveSymbols;
    strings = {
      v: 'value',
      n: 'number',
      s: 'string',
      b: 'boolean',
      o: 'object',
      t: 'type',
      a: 'array',
      al: 'array-like',
      i: 'iterable',
      d: 'date',
      f: 'function',
      l: 'length'
    };
    messages = {};
    predicates = {};
    [{
      n: 'equal',
      f: equal,
      s: 'v'
    }, {
      n: 'undefined',
      f: isUndefined,
      s: 'v'
    }, {
      n: 'null',
      f: isNull,
      s: 'v'
    }, {
      n: 'assigned',
      f: assigned,
      s: 'v'
    }, {
      n: 'primitive',
      f: primitive,
      s: 'v'
    }, {
      n: 'includes',
      f: includes,
      s: 'v'
    }, {
      n: 'zero',
      f: zero
    }, {
      n: 'infinity',
      f: infinity
    }, {
      n: 'number',
      f: number
    }, {
      n: 'integer',
      f: integer
    }, {
      n: 'even',
      f: even
    }, {
      n: 'odd',
      f: odd
    }, {
      n: 'greater',
      f: greater
    }, {
      n: 'less',
      f: less
    }, {
      n: 'between',
      f: between
    }, {
      n: 'greaterOrEqual',
      f: greaterOrEqual
    }, {
      n: 'lessOrEqual',
      f: lessOrEqual
    }, {
      n: 'inRange',
      f: inRange
    }, {
      n: 'positive',
      f: positive
    }, {
      n: 'negative',
      f: negative
    }, {
      n: 'string',
      f: string,
      s: 's'
    }, {
      n: 'emptyString',
      f: emptyString,
      s: 's'
    }, {
      n: 'nonEmptyString',
      f: nonEmptyString,
      s: 's'
    }, {
      n: 'contains',
      f: contains,
      s: 's'
    }, {
      n: 'match',
      f: match,
      s: 's'
    }, {
      n: 'boolean',
      f: boolean,
      s: 'b'
    }, {
      n: 'object',
      f: object,
      s: 'o'
    }, {
      n: 'emptyObject',
      f: emptyObject,
      s: 'o'
    }, {
      n: 'nonEmptyObject',
      f: nonEmptyObject,
      s: 'o'
    }, {
      n: 'instanceStrict',
      f: instanceStrict,
      s: 't'
    }, {
      n: 'instance',
      f: instance,
      s: 't'
    }, {
      n: 'like',
      f: like,
      s: 't'
    }, {
      n: 'array',
      f: array,
      s: 'a'
    }, {
      n: 'emptyArray',
      f: emptyArray,
      s: 'a'
    }, {
      n: 'nonEmptyArray',
      f: nonEmptyArray,
      s: 'a'
    }, {
      n: 'arrayLike',
      f: arrayLike,
      s: 'al'
    }, {
      n: 'iterable',
      f: iterable,
      s: 'i'
    }, {
      n: 'date',
      f: date,
      s: 'd'
    }, {
      n: 'function',
      f: isFunction,
      s: 'f'
    }, {
      n: 'hasLength',
      f: hasLength,
      s: 'l'
    }].map(function (data) {
      var n = data.n;
      messages[n] = 'Invalid ' + strings[data.s || 'n'];
      predicates[n] = data.f;
    });
    functions = {
      apply: apply,
      map: map,
      all: all,
      any: any
    };
    collections = ['array', 'arrayLike', 'iterable', 'object'];
    slice = Array.prototype.slice;
    neginf = Number.NEGATIVE_INFINITY;
    posinf = Number.POSITIVE_INFINITY;
    isArray = Array.isArray;
    haveSymbols = typeof Symbol === 'function';
    functions = mixin(functions, predicates);
    assert = createModifiedPredicates(assertModifier, assertImpl);
    not = createModifiedPredicates(notModifier, notImpl);
    maybe = createModifiedPredicates(maybeModifier, maybeImpl);
    assert.not = createModifiedModifier(assertModifier, not);
    assert.maybe = createModifiedModifier(assertModifier, maybe);
    collections.forEach(createOfPredicates);
    createOfModifiers(assert, assertModifier);
    createOfModifiers(not, notModifier);
    collections.forEach(createMaybeOfModifiers);
    exportFunctions(mixin(functions, {
      assert: assert,
      not: not,
      maybe: maybe
    }));
    /**
     * Public function `equal`.
     *
     * Returns true if `lhs` and `rhs` are strictly equal, without coercion.
     * Returns false otherwise.
     */

    function equal(lhs, rhs) {
      return lhs === rhs;
    }
    /**
     * Public function `undefined`.
     *
     * Returns true if `data` is undefined, false otherwise.
     */


    function isUndefined(data) {
      return data === undefined;
    }
    /**
     * Public function `null`.
     *
     * Returns true if `data` is null, false otherwise.
     */


    function isNull(data) {
      return data === null;
    }
    /**
     * Public function `assigned`.
     *
     * Returns true if `data` is not null or undefined, false otherwise.
     */


    function assigned(data) {
      return data !== undefined && data !== null;
    }
    /**
     * Public function `primitive`.
     *
     * Returns true if `data` is a primitive type, false otherwise.
     */


    function primitive(data) {
      var type;

      switch (data) {
        case null:
        case undefined:
        case false:
        case true:
          return true;
      }

      type = typeof data;
      return type === 'string' || type === 'number' || haveSymbols && type === 'symbol';
    }
    /**
     * Public function `zero`.
     *
     * Returns true if `data` is zero, false otherwise.
     */


    function zero(data) {
      return data === 0;
    }
    /**
     * Public function `infinity`.
     *
     * Returns true if `data` is positive or negative infinity, false otherwise.
     */


    function infinity(data) {
      return data === neginf || data === posinf;
    }
    /**
     * Public function `number`.
     *
     * Returns true if `data` is a number, false otherwise.
     */


    function number(data) {
      return typeof data === 'number' && data > neginf && data < posinf;
    }
    /**
     * Public function `integer`.
     *
     * Returns true if `data` is an integer, false otherwise.
     */


    function integer(data) {
      return typeof data === 'number' && data % 1 === 0;
    }
    /**
     * Public function `even`.
     *
     * Returns true if `data` is an even number, false otherwise.
     */


    function even(data) {
      return typeof data === 'number' && data % 2 === 0;
    }
    /**
     * Public function `odd`.
     *
     * Returns true if `data` is an odd number, false otherwise.
     */


    function odd(data) {
      return integer(data) && data % 2 !== 0;
    }
    /**
     * Public function `greater`.
     *
     * Returns true if `lhs` is a number greater than `rhs`, false otherwise.
     */


    function greater(lhs, rhs) {
      return number(lhs) && lhs > rhs;
    }
    /**
     * Public function `less`.
     *
     * Returns true if `lhs` is a number less than `rhs`, false otherwise.
     */


    function less(lhs, rhs) {
      return number(lhs) && lhs < rhs;
    }
    /**
     * Public function `between`.
     *
     * Returns true if `data` is a number between `x` and `y`, false otherwise.
     */


    function between(data, x, y) {
      if (x < y) {
        return greater(data, x) && data < y;
      }

      return less(data, x) && data > y;
    }
    /**
     * Public function `greaterOrEqual`.
     *
     * Returns true if `lhs` is a number greater than or equal to `rhs`, false
     * otherwise.
     */


    function greaterOrEqual(lhs, rhs) {
      return number(lhs) && lhs >= rhs;
    }
    /**
     * Public function `lessOrEqual`.
     *
     * Returns true if `lhs` is a number less than or equal to `rhs`, false
     * otherwise.
     */


    function lessOrEqual(lhs, rhs) {
      return number(lhs) && lhs <= rhs;
    }
    /**
     * Public function `inRange`.
     *
     * Returns true if `data` is a number in the range `x..y`, false otherwise.
     */


    function inRange(data, x, y) {
      if (x < y) {
        return greaterOrEqual(data, x) && data <= y;
      }

      return lessOrEqual(data, x) && data >= y;
    }
    /**
     * Public function `positive`.
     *
     * Returns true if `data` is a positive number, false otherwise.
     */


    function positive(data) {
      return greater(data, 0);
    }
    /**
     * Public function `negative`.
     *
     * Returns true if `data` is a negative number, false otherwise.
     */


    function negative(data) {
      return less(data, 0);
    }
    /**
     * Public function `string`.
     *
     * Returns true if `data` is a string, false otherwise.
     */


    function string(data) {
      return typeof data === 'string';
    }
    /**
     * Public function `emptyString`.
     *
     * Returns true if `data` is the empty string, false otherwise.
     */


    function emptyString(data) {
      return data === '';
    }
    /**
     * Public function `nonEmptyString`.
     *
     * Returns true if `data` is a non-empty string, false otherwise.
     */


    function nonEmptyString(data) {
      return string(data) && data !== '';
    }
    /**
     * Public function `contains`.
     *
     * Returns true if `data` is a string that contains `substring`, false
     * otherwise.
     */


    function contains(data, substring) {
      return string(data) && data.indexOf(substring) !== -1;
    }
    /**
     * Public function `match`.
     *
     * Returns true if `data` is a string that matches `regex`, false otherwise.
     */


    function match(data, regex) {
      return string(data) && !!data.match(regex);
    }
    /**
     * Public function `boolean`.
     *
     * Returns true if `data` is a boolean value, false otherwise.
     */


    function boolean(data) {
      return data === false || data === true;
    }
    /**
     * Public function `object`.
     *
     * Returns true if `data` is a plain-old JS object, false otherwise.
     */


    function object(data) {
      return Object.prototype.toString.call(data) === '[object Object]';
    }
    /**
     * Public function `emptyObject`.
     *
     * Returns true if `data` is an empty object, false otherwise.
     */


    function emptyObject(data) {
      return object(data) && Object.keys(data).length === 0;
    }
    /**
     * Public function `nonEmptyObject`.
     *
     * Returns true if `data` is a non-empty object, false otherwise.
     */


    function nonEmptyObject(data) {
      return object(data) && Object.keys(data).length > 0;
    }
    /**
     * Public function `instanceStrict`.
     *
     * Returns true if `data` is an instance of `prototype`, false otherwise.
     */


    function instanceStrict(data, prototype) {
      try {
        return data instanceof prototype;
      } catch (error) {
        return false;
      }
    }
    /**
     * Public function `instance`.
     *
     * Returns true if `data` is an instance of `prototype`, false otherwise.
     * Falls back to testing constructor.name and Object.prototype.toString
     * if the initial instanceof test fails.
     */


    function instance(data, prototype) {
      try {
        return instanceStrict(data, prototype) || data.constructor.name === prototype.name || Object.prototype.toString.call(data) === '[object ' + prototype.name + ']';
      } catch (error) {
        return false;
      }
    }
    /**
     * Public function `like`.
     *
     * Tests whether `data` 'quacks like a duck'. Returns true if `data` has all
     * of the properties of `archetype` (the 'duck'), false otherwise.
     */


    function like(data, archetype) {
      var name;

      for (name in archetype) {
        if (archetype.hasOwnProperty(name)) {
          if (data.hasOwnProperty(name) === false || typeof data[name] !== typeof archetype[name]) {
            return false;
          }

          if (object(data[name]) && like(data[name], archetype[name]) === false) {
            return false;
          }
        }
      }

      return true;
    }
    /**
     * Public function `array`.
     *
     * Returns true if `data` is an array, false otherwise.
     */


    function array(data) {
      return isArray(data);
    }
    /**
     * Public function `emptyArray`.
     *
     * Returns true if `data` is an empty array, false otherwise.
     */


    function emptyArray(data) {
      return array(data) && data.length === 0;
    }
    /**
     * Public function `nonEmptyArray`.
     *
     * Returns true if `data` is a non-empty array, false otherwise.
     */


    function nonEmptyArray(data) {
      return array(data) && greater(data.length, 0);
    }
    /**
     * Public function `arrayLike`.
     *
     * Returns true if `data` is an array-like object, false otherwise.
     */


    function arrayLike(data) {
      return assigned(data) && greaterOrEqual(data.length, 0);
    }
    /**
     * Public function `iterable`.
     *
     * Returns true if `data` is an iterable, false otherwise.
     */


    function iterable(data) {
      if (!haveSymbols) {
        // Fall back to `arrayLike` predicate in pre-ES6 environments.
        return arrayLike(data);
      }

      return assigned(data) && isFunction(data[Symbol.iterator]);
    }
    /**
     * Public function `includes`.
     *
     * Returns true if `data` contains `value`, false otherwise.
     */


    function includes(data, value) {
      var iterator, iteration, keys, length, i;

      if (!assigned(data)) {
        return false;
      }

      if (haveSymbols && data[Symbol.iterator] && isFunction(data.values)) {
        iterator = data.values();

        do {
          iteration = iterator.next();

          if (iteration.value === value) {
            return true;
          }
        } while (!iteration.done);

        return false;
      }

      keys = Object.keys(data);
      length = keys.length;

      for (i = 0; i < length; ++i) {
        if (data[keys[i]] === value) {
          return true;
        }
      }

      return false;
    }
    /**
     * Public function `hasLength`.
     *
     * Returns true if `data` has a length property that equals `length`, false
     * otherwise.
     */


    function hasLength(data, length) {
      return assigned(data) && data.length === length;
    }
    /**
     * Public function `date`.
     *
     * Returns true if `data` is a valid date, false otherwise.
     */


    function date(data) {
      return instanceStrict(data, Date) && integer(data.getTime());
    }
    /**
     * Public function `function`.
     *
     * Returns true if `data` is a function, false otherwise.
     */


    function isFunction(data) {
      return typeof data === 'function';
    }
    /**
     * Public function `apply`.
     *
     * Maps each value from the `data` to the corresponding predicate and returns
     * the result array. If the same function is to be applied across all of the
     * data, a single predicate function may be passed in.
     *
     */


    function apply(data, predicates) {
      assert.array(data);

      if (isFunction(predicates)) {
        return data.map(function (value) {
          return predicates(value);
        });
      }

      assert.array(predicates);
      assert.hasLength(data, predicates.length);
      return data.map(function (value, index) {
        return predicates[index](value);
      });
    }
    /**
     * Public function `map`.
     *
     * Maps each value from the `data` to the corresponding predicate and returns
     * the result object. Supports nested objects. If the `data` is not nested and
     * the same function is to be applied across all of it, a single predicate
     * function may be passed in.
     *
     */


    function map(data, predicates) {
      assert.object(data);

      if (isFunction(predicates)) {
        return mapSimple(data, predicates);
      }

      assert.object(predicates);
      return mapComplex(data, predicates);
    }

    function mapSimple(data, predicate) {
      var result = {};
      Object.keys(data).forEach(function (key) {
        result[key] = predicate(data[key]);
      });
      return result;
    }

    function mapComplex(data, predicates) {
      var result = {};
      Object.keys(predicates).forEach(function (key) {
        var predicate = predicates[key];

        if (isFunction(predicate)) {
          if (not.assigned(data)) {
            result[key] = !!predicate.m;
          } else {
            result[key] = predicate(data[key]);
          }
        } else if (object(predicate)) {
          result[key] = mapComplex(data[key], predicate);
        }
      });
      return result;
    }
    /**
     * Public function `all`
     *
     * Check that all boolean values are true
     * in an array (returned from `apply`)
     * or object (returned from `map`).
     *
     */


    function all(data) {
      if (array(data)) {
        return testArray(data, false);
      }

      assert.object(data);
      return testObject(data, false);
    }

    function testArray(data, result) {
      var i;

      for (i = 0; i < data.length; i += 1) {
        if (data[i] === result) {
          return result;
        }
      }

      return !result;
    }

    function testObject(data, result) {
      var key, value;

      for (key in data) {
        if (data.hasOwnProperty(key)) {
          value = data[key];

          if (object(value) && testObject(value, result) === result) {
            return result;
          }

          if (value === result) {
            return result;
          }
        }
      }

      return !result;
    }
    /**
     * Public function `any`
     *
     * Check that at least one boolean value is true
     * in an array (returned from `apply`)
     * or object (returned from `map`).
     *
     */


    function any(data) {
      if (array(data)) {
        return testArray(data, true);
      }

      assert.object(data);
      return testObject(data, true);
    }

    function mixin(target, source) {
      Object.keys(source).forEach(function (key) {
        target[key] = source[key];
      });
      return target;
    }
    /**
     * Public modifier `assert`.
     *
     * Throws if `predicate` returns false.
     */


    function assertModifier(predicate, defaultMessage) {
      return function () {
        return assertPredicate(predicate, arguments, defaultMessage);
      };
    }

    function assertPredicate(predicate, args, defaultMessage) {
      var argCount = predicate.l || predicate.length;
      var message = args[argCount];
      var ErrorType = args[argCount + 1];
      assertImpl(predicate.apply(null, args), nonEmptyString(message) ? message : defaultMessage, isFunction(ErrorType) ? ErrorType : TypeError);
      return args[0];
    }

    function assertImpl(value, message, ErrorType) {
      if (value) {
        return value;
      }

      throw new (ErrorType || Error)(message || 'Assertion failed');
    }
    /**
     * Public modifier `not`.
     *
     * Negates `predicate`.
     */


    function notModifier(predicate) {
      var modifiedPredicate = function () {
        return notImpl(predicate.apply(null, arguments));
      };

      modifiedPredicate.l = predicate.length;
      return modifiedPredicate;
    }

    function notImpl(value) {
      return !value;
    }
    /**
     * Public modifier `maybe`.
     *
     * Returns true if predicate argument is  null or undefined,
     * otherwise propagates the return value from `predicate`.
     */


    function maybeModifier(predicate) {
      var modifiedPredicate = function () {
        if (not.assigned(arguments[0])) {
          return true;
        }

        return predicate.apply(null, arguments);
      };

      modifiedPredicate.l = predicate.length; // Hackishly indicate that this is a maybe.xxx predicate.
      // Without this flag, the alternative would be to iterate
      // through the maybe predicates or use indexOf to check,
      // which would be time-consuming.

      modifiedPredicate.m = true;
      return modifiedPredicate;
    }

    function maybeImpl(value) {
      if (assigned(value) === false) {
        return true;
      }

      return value;
    }
    /**
     * Public modifier `of`.
     *
     * Applies the chained predicate to members of the collection.
     */


    function ofModifier(target, type, predicate) {
      var modifiedPredicate = function () {
        var collection, args;
        collection = arguments[0];

        if (target === 'maybe' && not.assigned(collection)) {
          return true;
        }

        if (!type(collection)) {
          return false;
        }

        collection = coerceCollection(type, collection);
        args = slice.call(arguments, 1);

        try {
          collection.forEach(function (item) {
            if ((target !== 'maybe' || assigned(item)) && !predicate.apply(null, [item].concat(args))) {
              // TODO: Replace with for...of when ES6 is required.
              throw 0;
            }
          });
        } catch (ignore) {
          return false;
        }

        return true;
      };

      modifiedPredicate.l = predicate.length;
      return modifiedPredicate;
    }

    function coerceCollection(type, collection) {
      switch (type) {
        case arrayLike:
          return slice.call(collection);

        case object:
          return Object.keys(collection).map(function (key) {
            return collection[key];
          });

        default:
          return collection;
      }
    }

    function createModifiedPredicates(modifier, object) {
      return createModifiedFunctions([modifier, predicates, object]);
    }

    function createModifiedFunctions(args) {
      var modifier, object, functions, result;
      modifier = args.shift();
      object = args.pop();
      functions = args.pop();
      result = object || {};
      Object.keys(functions).forEach(function (key) {
        Object.defineProperty(result, key, {
          configurable: false,
          enumerable: true,
          writable: false,
          value: modifier.apply(null, args.concat(functions[key], messages[key]))
        });
      });
      return result;
    }

    function createModifiedModifier(modifier, modified) {
      return createModifiedFunctions([modifier, modified, null]);
    }

    function createOfPredicates(key) {
      predicates[key].of = createModifiedFunctions([ofModifier.bind(null, null), predicates[key], predicates, null]);
    }

    function createOfModifiers(base, modifier) {
      collections.forEach(function (key) {
        base[key].of = createModifiedModifier(modifier, predicates[key].of);
      });
    }

    function createMaybeOfModifiers(key) {
      maybe[key].of = createModifiedFunctions([ofModifier.bind(null, 'maybe'), predicates[key], predicates, null]);
      assert.maybe[key].of = createModifiedModifier(assertModifier, maybe[key].of);
      assert.not[key].of = createModifiedModifier(assertModifier, not[key].of);
    }

    function exportFunctions(functions) {
      if (module !== null && module.exports) {
        module.exports = functions;
      } else {
        globals.check = functions;
      }
    }
  })(commonjsGlobal);
});var asserttype = chai => {
  const types = ['number', 'string', 'boolean', 'object', 'array', 'date', 'function'];
  types.forEach(type => {
    chai.Assertion.addMethod(type, function () {
      this.assert(checkTypes[type](this._obj), `expected #{this} to be ${type}`, `expected #{this} not to be ${type}`);
    });
  });
};var chaiEvents = createCommonjsModule(function (module, exports) {
  function plugin(chai, utils) {
    var Assertion = chai.Assertion;
    /**
     * Checks if a given entry is an event emitter.
     * Uses EventEmitter or EventTarget if available to quickly check `instanceof`.  Otherwise, checks that common methods
     * to event emitters are available.
     *
     * Gracefully handles custom implementations of event emitters even if EventEmitter or EventTarget are available,
     * checking methods if the emitter doesn't inherit from the global emitter.
    */

    function isEmitter() {
      // Easy check: if Node's EventEmitter or window.EventEmitter exist, check if this is an instance of it.
      if (typeof EventEmitter !== "undefined" && EventEmitter !== null && this._obj instanceof EventEmitter) {
        return this.assert(true, "", "expected #{this} to not be an EventEmitter");
      } // Easy check: if the browser's EventTarget exists, check if this is an instance of it.


      if (typeof EventTarget !== "undefined" && EventTarget !== null && this._obj instanceof EventTarget) {
        return this.assert(true, "", "expected #{this} to not be an EventTarget");
      }

      var obj = this._obj; // Check for Node.js style event emitters with "on", "emit", etc.

      var node = ["on", "emit"].every(function (method) {
        return typeof obj[method] === "function";
      });

      if (node) {
        return this.assert(true, "", "expected #{this} to not be an EventEmitter");
      } // Check for Browser-based event emitters with "addEventListener", etc.


      var browser = ["addEventListener", "dispatchEvent", "removeEventListener"].every(function (method) {
        return typeof obj[method] === "function";
      });

      if (browser) {
        return this.assert(true, "", "expected #{this} to not be an EventEmitter");
      }

      this.assert(false, "expected #{this} to be an EventEmitter", "");
    }
    Assertion.addProperty("emitter", isEmitter);
    Assertion.addProperty("target", isEmitter);
    Assertion.addMethod("emit", function (name, args) {
      new Assertion(this._obj).to.be.an.emitter;
      new Assertion(name).to.be.a("string");
      var obj = this._obj;

      var _this = this;

      var assert = function () {
        _this.assert.apply(_this, arguments);
      };

      var timeout = utils.flag(this, 'timeout') || 1500;

      if (utils.flag(this, 'negate')) {
        // Ensure that the event doesn't fire before timeout
        return new Promise(function (resolve, reject) {
          var done = false;
          obj.on(name, function () {
            if (done) {
              return;
            }

            done = true;
            assert(false, "expected #{this} to not emit " + name + ".");
            resolve();
          });
          setTimeout(function () {
            if (done) {
              return;
            }

            done = true;
            resolve();
          }, timeout);
        });
      } else {
        // Ensure that the event fires
        return new Promise(function (resolve, reject) {
          var done = false;
          obj.on(name, function () {
            if (done) {
              return;
            }

            done = true;
            resolve();
          });
          setTimeout(function () {
            if (done) {
              return;
            }

            done = true;
            assert(false, "expected #{this} to emit " + name + ".");
            resolve();
          }, timeout);
        });
      }
    });
  }

  if (typeof commonjsRequire === "function" && 'object' === "object" && 'object' === "object") {
    module.exports = plugin;
  } else {
    // Other environment (usually <script> tag): plug in to global chai instance directly.
    chai.use(plugin);
  }
});var registered;
registered = false;

function registerAnimations() {
  if (registered) {
    return;
  }

  registered = true;
  index.animation('checkmarkAnimateSuccessTip', {
    '0%, 54%': {
      width: 0,
      left: 0,
      top: 3
    },
    '70%': {
      width: 14,
      left: -2,
      top: 8
    },
    '84%': {
      width: 5,
      left: 5,
      top: 10
    },
    '100%': {
      width: 8,
      left: 3,
      top: 10
    }
  });
  index.animation('checkmarkAnimateSuccessLong', {
    '0%, 65%': {
      width: 0,
      right: 12,
      top: 12
    },
    '84%': {
      width: 14,
      right: 0,
      top: 7
    },
    '100%': {
      width: 12,
      right: 2,
      top: 8
    }
  });
  index.animation('checkmarkAnimateError', {
    '0%, 65%': {
      transform: 'scale(0.4)',
      opacity: 0
    },
    '84%': {
      transform: 'scale(1.15)'
    },
    '100%': {
      transform: 'scale(1)'
    }
  });
  index.animation('checkmarkRotatePlaceholder', {
    '0%, 5%': {
      transform: 'rotate(-45deg)'
    },
    '12%, 100%': {
      transform: 'rotate(-405deg)'
    }
  });
  return index.animation('fieldErrorShake', {
    '0%, 50%': {
      transform: 'translateX(-10px)'
    },
    '25%, 75%': {
      transform: 'translateX(10px)'
    },
    '100%': {
      transform: 'translateX(0px)'
    }
  });
}var IS$2;
IS$2 = index$1.create('natives', 'dom');
IS$2.load({
  // field: (target)-> target and target instanceof Field
  regex: function (target) {
    return target instanceof RegExp;
  },
  objectable: function (target) {
    return IS$2.object(target) || IS$2.function(target);
  }
});
var IS$1$1 = IS$2;/* istanbul ignore next */
if (window.console == null) {
  window.console = {};
}
/* istanbul ignore next */


if (console.log == null) {
  console.log = function () {};
}
/* istanbul ignore next */


if (console.warn == null) {
  console.warn = console.log;
}var simplybind = createCommonjsModule(function (module) {
  (function (t) {
    if (t = function (e, i, s) {
      return function (n) {
        if (!i[n]) throw Error(n + " is not a module");
        return e[n] ? e[n].exports : (e[n] = {
          exports: {}
        }, e[n].exports = i[n].call(s, t, e[n], e[n].exports));
      };
    }({}, {
      0: function (t, e, i) {
        var s = 0,
            n = "push pop shift unshift splice reverse sort".split(" "),
            r = {},
            h = {},
            o = ["{{", "}}"],
            u = Object.create({
          silent: !1
        }, {
          placeholder: {
            get: function () {
              return o;
            },
            set: function (t) {
              O.iA(t) && 2 === t.length && (o = t, C());
            }
          }
        }),
            c = {
          delay: !1,
          throttle: !1,
          simpleSelector: !1,
          promiseTransforms: !1,
          dispatchEvents: !1,
          sendArrayCopies: !1,
          updateEvenIfSame: !1,
          updateOnBind: !0
        },
            a = Object.defineProperty,
            f = Object.getOwnPropertyDescriptor,
            l = null,
            p = function () {
          if (!l) {
            var t = l = document.createEvent("Event");
            t.initEvent("change", !0, !1), t._sb = !0;
          }

          return l;
        },
            d = !("className" in Element.prototype && f(Element.prototype, "className").get),
            v = "innerWidth innerHeight outerWidth outerHeight scrollX scrollY pageXOffset pageYOffset screenX screenY screenLeft screenTop".split(" "),
            b = function (t, e) {
          return this.uAS(e || this);
        },
            g = function () {
          return "" + ++s;
        },
            y = function () {
          return Object.create(null);
        },
            _ = function (t, e) {
          return function (i, s, n) {
            return H(i, s, n, t, e);
          };
        },
            m = function (t, e) {
          return t.sU || (t.sU = new R(function () {
            return e ? t.sV(t.fDV(), t, !0) : t.uAS(t);
          }, "Func", {}));
        },
            D = function (t, e) {
          return t && -1 !== t.indexOf(e);
        },
            O = {
          iD: function (t) {
            return void 0 !== t;
          },
          iA: function (t) {
            return t instanceof Array;
          },
          iO: function (t) {
            return "object" == typeof t && t;
          },
          iS: function (t) {
            return "string" == typeof t;
          },
          iN: function (t) {
            return "number" == typeof t;
          },
          iF: function (t) {
            return "function" == typeof t;
          },
          iBI: function (t) {
            return t instanceof X;
          },
          iB: function (t) {
            return t instanceof R;
          },
          isI: function (t) {
            return O.iO(t) && O.iN(t.length);
          },
          DM: function (t) {
            return t.nodeName && 1 === t.nodeType;
          },
          dI: function (t) {
            return "INPUT" === (t = t.nodeName) || "TEXTAREA" === t || "SELECT" === t;
          },
          dR: function (t) {
            return "radio" === t.type;
          },
          dC: function (t) {
            return "checkbox" === t.type;
          },
          eC: function (t) {
            return t instanceof NodeList || t instanceof HTMLCollection || window.jQuery && t instanceof jQuery;
          },
          eAS: function (t) {
            var e = t[0].type;
            return [].filter.call(t, function (t) {
              return t.type === e;
            }).length === t.length;
          },
          dN: function (t) {
            return O.DM(t) || t === window || t === document;
          }
        },
            M = function (t, e, i) {
          var s;
          return (s = f(t, e)) ? (i && (s.configurable = !0), s) : (t = Object.getPrototypeOf(t)) ? M(t, e, !0) : void 0;
        },
            I = function (t, e, i) {
          var s;
          if (t.OD || (t.OD = M(e, t.pr)), i) n.forEach(function (i) {
            return a(e, i, {
              configurable: !0,
              value: function () {
                var s = Array.prototype[i].apply(e, arguments);
                return t.uAS(t), s;
              }
            });
          });else if ("Proxy" === t.type) {
            var h = t.oR = t.value;

            if (t.value = {
              result: null,
              args: null
            }, O.iF(h)) {
              var o = [].slice,
                  u = s = function () {
                var i = o.call(arguments);
                return t.value.args = i = t.tfS ? t.tfS(i) : i, t.value.result = i = h.apply(e, i), t.uAS(t), i;
              };

              a(e, t.pr, {
                configurable: t.isL = !0,
                get: function () {
                  return u;
                },
                set: function (e) {
                  O.iF(e) ? e !== h && (e !== s && (h = t.oR = e), u !== s && (u = s)) : u = e;
                }
              });
            }
          } else if (!(D(t.type, "DOM") || t.object === window && D(v, t.pr))) {
            (i = t.OD || r).get && (t.OG = i.get.bind(e)), i.set && (t.OS = i.set.bind(e));
            var c = (c = i.configurable) && e.constructor !== CSSStyleDeclaration;

            if (d && t.DM && t.pr in e.cloneNode(!1) && (t.OD = c = !1, t.isL = !0, t.OG = function () {
              return t.object[t.pr];
            }, t.OS = function (e) {
              return t.object[t.pr] = e;
            }), c) {
              c = "Array" === t.type;
              var f = !t.OS && !c;
              a(e, t.pr, {
                configurable: t.isL = !0,
                enumerable: i.enumerable,
                get: t.OG || function () {
                  return t.value;
                },
                set: function (e) {
                  t.sV(e, t, f);
                }
              }), c && I(t, e[t.pr], !0);
            }
          }
        },
            j = function (t, e, i) {
          if (i) {
            var s = [];

            for (t = 0, i = n.length; t < i; t++) {
              var r = n[t];
              s.push(delete e[r]);
            }

            return s;
          }

          return (i = t.OD).set || i.get || (i.value = t.oR || t.value), a(e, t.pr, i);
        },
            S = function (t) {
          var e,
              i = y();

          for (e in t) i[e] = t[e];

          return i;
        },
            E = function (t, e) {
          var i,
              s = Object.keys(e),
              n = 0;

          for (i = s.length; n < i; n++) {
            var r = s[n];
            t[r] = e[r];
          }
        },
            P = {
          get: function (t, e, i, s) {
            return e ? h[t._sb_ID] : s && t[0]._sb_map && (e = h[t[0]._sb_map[i]]).gB ? e.gB : t._sb_map && t._sb_map[i] ? h[t._sb_map[i]] : void 0;
          },
          set: function (t, e) {
            if (e) a(t.object, "_sb_ID", {
              configurable: !0,
              value: t.ID
            });else {
              var i = t.se;
              t.object._sb_map ? t.object._sb_map[i] = t.ID : (e = {}, e[i] = t.ID, a(t.object, "_sb_map", {
                configurable: !0,
                value: e
              }));
            }
          }
        },
            V,
            N = /[.*+?^${}()|[\]\\]/g,
            A = V = null,
            C = function () {
          var t = u.placeholder[0].replace(N, "\\$&"),
              e = u.placeholder[1].replace(N, "\\$&"),
              i = "[^" + e + "]+";
          A = new RegExp(t + "(" + i + ")" + e, "g"), V = new RegExp("" + t + i + e, "g");
        };

        C();

        var x = function (t, e, i) {
          var s,
              n,
              r = "",
              h = s = 0;

          for (n = t.length; s < n; h = ++s) r += t[h], i[h] && (r += e[i[h]]);

          return r;
        },
            k = function (t, e, i) {
          null == t[i] && (t[i] = []), t[i].push(e);
        },
            B = function (t, e) {
          var i,
              s,
              n,
              r = 0;

          for (s = (t = Array.prototype.slice.call(t.childNodes)).length; r < s; r++) {
            var h = t[r];
            if (3 !== h.nodeType) B(h, e);else if (h.textContent.match(V)) {
              var o = h.textContent.split(A);
              if (3 === o.length && "" === o[0] + o[2]) k(e, h, o[1]);else {
                var u = document.createDocumentFragment(),
                    c = i = 0;

                for (n = o.length; i < n; c = ++i) {
                  var a = o[c],
                      f = u.appendChild(document.createTextNode(a));
                  c % 2 && k(e, f, a);
                }

                h.parentNode.replaceChild(u, h);
              }
            }
          }
        },
            F = function (t) {
          throw Error("SimplyBind: " + (T[t] || t));
        },
            G = function (t, e) {
          u.silent || (e = L(e), t = T[t], console.warn("SimplyBind: " + t + "\n\n" + e));
        },
            w = function (t) {
          F("Invalid argument/s (" + t + ")", !0);
        },
            L = function (t) {
          return (Error().stack || "").split("\n").slice(t + 3).join("\n");
        },
            T = {
          erIP: "SimplyBind() and .to() only accept a function, an array, a bound object, a string, or a number.",
          erFN: "Only functions are allowed for .transform/.condition/All()",
          erEV: "Invalid argument number in .ofEvent()",
          emptyList: "Empty collection provided",
          erOD: "You can only pass a single DOM element to a binding",
          erMX: "'checked' of Mixed list of element cannot be bound"
        },
            H = function (t, e, i, s, n) {
          return (t || 0 === t) && (O.iS(t) || O.iN(t) || O.iF(t) || t instanceof Array) || O.iBI(t) || F("erIP"), !O.iO(t) || t instanceof Array ? (e = new X(e), e.so = i, e.IS = s, e.cC = n, t = O.iF(t) ? e.sS(t, !0) : e.sP(t)) : t = n ? n(t) : t.sC(), t;
        };

        H.version = "1.15.8", H.settings = u, H.defaultOptions = c, H.unBindAll = function (t, e) {
          var i;

          if (t && (O.iO(t) || O.iF(t))) {
            O.isI(t) && !t._sb_ID && t[0] && O.DM(t[0]) && (t = t[0]);
            var s = t._sb_map;
            if (t._sb_ID && h[t._sb_ID].rAS(e), s) for (i in s) t = s[i], h[t].rAS(e);
          }
        };

        var R = function (t, e, i) {
          return E(this, i), this.oD = this.so ? this.options : c, this.type = e, this.object = t, this.ID = g(), this.subs = [], this.sM = y(), this.pM = y(), this.atEV = [], "Proxy" === this.type && (this.sV = b), this.mC && (this.cH = y(), this.object.forEach(function (t) {
            return function (e) {
              var i = t.cH[e.value] = H("checked").of(e)._;

              i.aS(t), i.sM[t.ID].tF = function () {
                return i;
              }, i.gB = t;
            };
          }(this))), "Event" === this.type || "Func" === this.type && this.IS || ("Pholder" === this.type ? (e = this.de && !D(this.de, "multi") ? this.de + ":" + this.pr : this.pr, (t = this.pB = H(e).of(t)._).sPH(), this.value = t.pVL[this.Ph], t.txN && (this.txN = t.txN[this.Ph])) : (this.value = t = this.fDV(), "ObjectProp" !== this.type || O.iD(t) || f(this.object, this.pr) || (this.object[this.pr] = t), I(this, this.object))), this.aEV(), h[this.ID] = this;
        };

        R.prototype = {
          aS: function (t, e, i, s) {
            var n;

            if (t.isMulti) {
              var r = t.bindings;

              for (t = 0, n = r.length; t < n; t++) {
                var h = r[t];
                this.aS(h, e, i, s);
              }
            } else if (this.sM[t.ID]) var o = !0;else t.pM[this.ID] = this, this.subs.unshift(t), (n = this.sM[t.ID] = y()).uO = i, n.opts = S(e), (s || "Event" === this.type || "Proxy" === this.type || "Array" === this.type) && (n.opts.updateEvenIfSame = !0), n.VR = "Func" === t.type ? "ps" : "value";

            return o;
          },
          rS: function (t, e) {
            var i;

            if (t.isMulti) {
              var s = t.bindings;

              for (t = 0, i = s.length; t < i; t++) {
                var n = s[t];
                this.rS(n, e);
              }
            } else this.sM[t.ID] && (this.subs.splice(this.subs.indexOf(t), 1), delete this.sM[t.ID], delete t.pM[this.ID]), e && (t.rS(this), delete this.pM[t.ID]);

            0 === this.subs.length && 0 === Object.keys(this.pM).length && this.DES();
          },
          rAS: function (t) {
            var e,
                i = this.subs.slice(),
                s = 0;

            for (e = i.length; s < e; s++) {
              var n = i[s];
              this.rS(n, t);
            }
          },
          DES: function () {
            var t;

            if (delete h[this.ID], this.rPI(), "Event" === this.type) {
              var e = this.atEV,
                  i = 0;

              for (t = e.length; i < t; i++) {
                var s = e[i];
                this.urEVE(s);
              }
            } else "Func" === this.type && delete this.object._sb_ID;

            this.isL && this.OD && j(this, this.object), "Array" === this.type && j(this, this.value, !0), this.object._sb_map && (delete this.object._sb_map[this.se], 0 === Object.keys(this.object._sb_map).length && delete this.object._sb_map);
          },
          fDV: function () {
            var t,
                e = this.type;

            switch (!1) {
              case "Func" !== e:
                return this.object();

              case "DOMAttr" !== e:
                return this.object.getAttribute(this.pr) || "";

              case !this.mC:
                var i = [],
                    s = this.cH;

                for (t in s) if (s[t].object.checked) {
                  if ("DOMRadio" === e) return t;
                  i.push(t);
                }

                return i;

              default:
                return this.object[this.pr];
            }
          },
          sV: function (t, e, i, s) {
            if (e || (e = this), this.tfS && (t = this.tfS(t)), !i) switch (this.type) {
              case "ObjectProp":
                if (this.isL) {
                  if (this.dI) {
                    if (s) {
                      if (t !== this.OG()) {
                        var n = this.object.selectionStart;
                        this.OS(t), n && this.object.setSelectionRange(n, n);
                      }
                    } else this.OS(t), u.dispatchEvents && this.object.dispatchEvent(p());
                  } else this.OS && this.OS(t);
                } else t !== this.value && (this.object[this.pr] = t);
                break;

              case "Pholder":
                if (s = this.pB, s.pVL[this.Ph] = t, n = x(s.pCT, s.pVL, s.pIM), this.txN && t !== this.value) {
                  var r = this.txN,
                      h = 0;

                  for (i = r.length; h < i; h++) {
                    var o = r[h];
                    o.textContent = t;
                  }
                }

                "textContent" !== this.pr && s.sV(n, e);
                break;

              case "Array":
                t !== this.value && (O.iA(t) || (t = Array.prototype.concat(t)), j(this, this.value, !0), I(this, t = t.slice(), !0), this.OS && this.OS(t));
                break;

              case "Func":
                n = this.ps, this.ps = t, t = this.object(t, n);
                break;

              case "Event":
                this.iE = !0, this.eE(t), this.iE = !1;
                break;

              case "DOMRadio":
                if (this.mC) {
                  if (s = O.iB(t) ? t : this.cH[t]) for (h in t = s.object.value, n = this.cH) (i = n[h]).sV(i.ID === s.ID, e);else t = this.value;
                } else {
                  if ((t = !!t) === this.value) return;
                  this.object.checked !== t && (this.object.checked = t), t && u.dispatchEvents && this.object.dispatchEvent(p());
                }
                break;

              case "DOMCheckbox":
                if (this.mC) {
                  for (h = !O.iB(t), i = s = 0, r = (t = [].concat(t)).length; s < r; i = ++s) o = t[i], t[i] = O.iB(o) ? o : this.cH[o];

                  r = [], o = this.cH;

                  for (n in o) i = o[n], s = h ? D(t, i) : i.value, i.sV(s, e), s && r.push(n);

                  t = r;
                } else {
                  if ((t = !!t) === this.value) return;
                  this.object.checked !== t && (this.object.checked = t, u.dispatchEvents && this.object.dispatchEvent(p()));
                }

                break;

              case "DOMAttr":
                this.object.setAttribute(this.pr, t);
            }
            this.value = t, this.uAS(e);
          },
          uAS: function (t) {
            var e, i;
            if (i = (e = this.subs).length) for (; i--;) this.uS(e[i], t);
          },
          uS: function (t, e, i) {
            var s;

            if (!(e === t || e !== this && e.sM[t.ID])) {
              var n = this.sM[t.ID];

              if (!n.dL || !n.dL[e.ID]) {
                if (n.opts.throttle) {
                  var r = (i = +new Date()) - n.lU;
                  if (r < n.opts.throttle) return clearTimeout(n.uT), n.uT = setTimeout(function (i) {
                    return function () {
                      if (i.sM[t.ID]) return i.uS(t, e);
                    };
                  }(this), n.opts.throttle - r);
                  n.lU = i;
                } else if (n.opts.delay && !i) return setTimeout(function (i) {
                  return function () {
                    if (i.sM[t.ID]) return i.uS(t, e, !0);
                  };
                }(this), n.opts.delay);

                i = "Array" === this.type && n.opts.sendArrayCopies ? this.value.slice() : this.value, r = t[n.VR], (i = (s = n.tF) ? s(i, r, t.object) : i) === r && !n.opts.updateEvenIfSame || n.cN && !n.cN(i, r, t.object) || (n.opts.promiseTransforms && i && O.iF(i.then) ? i.then(function (i) {
                  t.sV(i, e);
                }) : t.sV(i, e), n.uO && this.rS(t));
              }
            }
          },
          aM: function (t, e, i, s) {
            var n, r;

            if (O.iF(i)) {
              var h = 0;

              for (r = e.length; h < r; h++) {
                var o = e[h],
                    u = o._ || o;
                u.isMulti ? this.aM(t, u.bindings, i, s) : (o = this.sM[u.ID], o[t] = i, s = s && !o.uO, this.pM[u.ID] && ((n = u.sM[this.ID])[t] || (n[t] = i)), !s && "Func" !== this.type || "tF" !== t || this.uS(u, this));
              }

              return !0;
            }

            return G("erFN", 2);
          },
          ss: function (t, e) {
            this.tfS = t, e && this.sV(this.value);
          },
          aD: function (t, e) {
            var i;
            (null != (i = this.sM[t.ID]).dL ? i.dL : i.dL = y())[e.ID] = 1;
          },
          sPH: function () {
            if (!this.pVL) {
              if (this.pVL = y(), this.pIM = y(), this.pCT = [], O.iS(this.value)) {
                this.pCT = this.value.split(V);
                var t = 0;
                this.value = this.value.replace(A, function (e) {
                  return function (i, s) {
                    return e.pIM[t++] = s, e.pVL[s] = s;
                  };
                }(this));
              }

              this.DM && "textContent" === this.pr && B(this.object, this.txN = y());
            }
          },
          aPI: function (t) {
            if ("Event" !== this.type) return this.rPI(), this.PI = setInterval(function (t) {
              return function () {
                var e = t.fDV();
                return t.sV(e, t, !0);
              };
            }(this), t);
          },
          rPI: function () {
            return clearInterval(this.PI), this.PI = null;
          },
          aUV: function (t, e) {
            this.object.addEventListener(t, function (t) {
              return function (i) {
                i._sb || (i = t.tfS && t.dI, t.sV(t.object[e], null, !i, !0));
              };
            }(this), !1);
          },
          aEV: function () {
            this.evN ? this.rEVE(this.evN) : this.dI ? (this.aUV("input", "value"), this.aUV("change", "value")) : this.mC || "DOMRadio" !== this.type && "DOMCheckbox" !== this.type || this.aUV("change", "checked");
          },
          rEVE: function (t) {
            this.atEV.push(t), this.evH || (this.evH = U.bind(this)), this.object[this.eM.listen](t, this.evH);
          },
          urEVE: function (t) {
            this.atEV.splice(this.atEV.indexOf(t), 1), this.object[this.eM.remove](t, this.evH);
          },
          eE: function (t) {
            var e = this.evN;
            "dispatchEvent" === this.eM.emit && (this.evO || (this.evO = document.createEvent("Event"), this.evO.initEvent(this.evN, !0, !0)), this.evO.bindingData = t, e = this.evO), this.object[this.eM.emit](e, t);
          }
        };

        var U = function () {
          this.iE || this.sV(arguments[this.pr], null, !0);
        },
            X = function (t, e) {
          var i;
          if (e) E(this, e), this.sG = 1;else for (i in this.sG = 0, this.subs = [], this.oP = t || (t = {}), this.options = {}, c) this.options[i] = null != t[i] ? t[i] : c[i];
          return this;
        };

        t = {
          sC: function () {
            return new X(null, this);
          },
          dM: function (t) {
            return this._ = t, Object.defineProperties(this, {
              value: {
                get: function () {
                  return t.value;
                }
              },
              original: {
                get: function () {
                  return t.objects || t.object;
                }
              },
              subscribers: {
                get: function () {
                  return t.subs.slice().map(function (t) {
                    return t.object;
                  });
                }
              }
            });
          },
          createBP: function (t, e, i, s) {
            var n;
            return this.object = t, (n = P.get(t, s, this.se, this.mC)) ? this.patchCachedBP(n) : (t = new R(t, e, i), P.set(t, s), t);
          },
          patchCachedBP: function (t) {
            var e;

            if ("ObjectProp" !== t.type || this.pr in this.object || I(t, this.object), this.so) {
              var i = this.oP;

              for (n in i) {
                var s = i[n];
                t.oD[n] = s;
              }
            }

            var n = t.oD;

            for (e in n) s = n[e], this.options[e] = O.iD(this.oP[e]) ? this.oP[e] : s;

            return t;
          },
          sP: function (t) {
            if (O.iN(t) && (t = t.toString()), this.se = this.pr = t, !this.options.simpleSelector) {
              if (D(t, ":")) {
                var e = t.split(":");
                this.de = e.slice(0, -1).join(":"), this.pr = e[e.length - 1];
              }

              D(t, ".") && (e = this.pr.split("."), this.pr = e[0], this.Ph = e.slice(1).join(".")), D(this.de, "event") && (D(t, "#") ? (e = this.pr.split("#"), this.evN = e[0], this.pr = e[1]) : (this.evN = this.pr, this.pr = 0), isNaN(parseInt(this.pr)) && G("erEV", 1));
            }

            return this;
          },
          sS: function (t, e) {
            this.sG = 1;
            var i,
                s = (i = t !== window && O.isI(t) && !t.nodeType) ? t[0] : t;

            if (s) {
              if (this.DM = O.DM(s)) {
                if ("checked" === this.pr) var n = s && O.dR(s),
                    r = !n && s && O.dC(s);else "value" === this.pr && (this.dI = O.dI(s));
                if (i && !D(this.de, "multi")) if (1 === t.length) t = t[0];else {
                  if ((n || r) && !O.eAS(t)) return G("erMX", 3);
                  n || r ? (this.mC = !0, t = [].slice.call(t)) : (t = t[0], G("erOD", 3));
                }
              }
            } else i && O.eC(t) && F("emptyList");

            switch (!1) {
              case !e:
                r = "Func";
                break;

              case !this.Ph:
                r = "Pholder";
                break;

              case !(D(this.de, "array") && O.iA(t[this.pr])):
                r = "Array";
                break;

              case !D(this.de, "event"):
                r = "Event", this.eM = {
                  listen: this.oP.listenMethod,
                  remove: this.oP.removeMethod,
                  emit: this.oP.emitMethod
                }, t[this.eM.listen] || (this.eM.listen = O.dN(t) ? "addEventListener" : "on"), t[this.eM.remove] || (this.eM.remove = O.dN(t) ? "removeEventListener" : "removeListener"), t[this.eM.emit] || (this.eM.emit = O.dN(t) ? "dispatchEvent" : "emit");
                break;

              case !D(this.de, "func"):
                r = "Proxy";
                break;

              case !n:
                r = "DOMRadio";
                break;

              case !r:
                r = "DOMCheckbox";
                break;

              case !D(this.de, "attr"):
                r = "DOMAttr";
                break;

              default:
                r = "ObjectProp";
            }

            return D(this.de, "multi") ? (t.length || F("emptyList"), this.dM(new nt(this, t, r))) : this.dM(this.createBP(t, r, this, e)), D(this._.type, "Event") || D(this._.type, "Proxy") ? this.options.updateOnBind = !1 : D(this._.type, "Func") && (this.options.updateOnBind = !0), this.cC ? this.cC(this) : this;
          },
          aP: function (t) {
            var e;
            t.sG = 2, t.subs.push(this);

            var i = t._.aS(this._, t.options, t.uO);

            if (t.uO) delete t.uO;else if (t.options.updateOnBind && !i) if (this._.isMulti) {
              var s = this._.bindings,
                  n = 0;

              for (e = s.length; n < e; n++) i = s[n], t._.uS(i, t._);
            } else t._.uS(this._, t._);
          }
        }, X.prototype = Object.create(t, {
          of: {
            get: function () {
              if (!this.sG) return W;
            }
          },
          set: {
            get: function () {
              if (this.sG) return $;
            }
          },
          chainTo: {
            get: function () {
              if (2 === this.sG) return Y;
            }
          },
          transformSelf: {
            get: function () {
              if (1 === this.sG) return Q;
            }
          },
          transform: {
            get: function () {
              if (2 === this.sG) return q;
            }
          },
          transformAll: {
            get: function () {
              if (2 === this.sG) return z;
            }
          },
          condition: {
            get: function () {
              if (2 === this.sG) return J;
            }
          },
          conditionAll: {
            get: function () {
              if (2 === this.sG) return K;
            }
          },
          bothWays: {
            get: function () {
              if (2 === this.sG) return Z;
            }
          },
          unBind: {
            get: function () {
              if (2 === this.sG) return tt;
            }
          },
          pollEvery: {
            get: function () {
              if (this.sG) return et;
            }
          },
          stopPolling: {
            get: function () {
              if (this.sG) return it;
            }
          },
          setOption: {
            get: function () {
              if (2 === this.sG) return st;
            }
          },
          disallowFrom: {
            get: function () {
              var t;
              if (2 === this.sG && (t = this)) return _(!1, function (e) {
                return t._.aD(t.subs[t.subs.length - 1]._, e._), t;
              });
            }
          },
          updateOn: {
            get: function () {
              var t;
              if (this.sG && (t = this)) return _(!1, function (e) {
                return e._ !== t._ && (t._.pM[e._.ID] = e._, e._.aS(m(t._, !0), e.options, !1, !0)), t;
              });
            }
          },
          removeUpdater: {
            get: function () {
              var t, e;
              if (this.sG && (e = this) && (t = this._.sU)) return _(!1, function (i) {
                i._.sM[t.ID] && (delete e._.pM[i._.ID], i._.rS(t));
              });
            }
          },
          to: {
            get: function () {
              var t;
              if (1 === this.sG && (t = this)) return _(!0, function (e) {
                return e._ !== t._ && e.aP(t), t;
              });
            }
          },
          and: {
            get: function () {
              var t = this.sC();
              if (2 === this.sG) return t;

              if (1 === this.sG) {
                if (!t._.isMulti) {
                  var e = t._;
                  t._ = t._ = new nt(t), t._.addBP(e);
                }

                return _(!1, function (e) {
                  return t._.addBP(e._), t;
                });
              }
            }
          },
          once: {
            get: function () {
              if (1 === this.sG) {
                var t = this.sC();
                return t.uO = !0, t;
              }
            }
          },
          update: {
            get: function () {
              return this.set;
            }
          },
          twoWay: {
            get: function () {
              return this.bothWays;
            }
          },
          pipe: {
            get: function () {
              return this.chainTo;
            }
          }
        });

        var W = function (t) {
          return O.iO(t) || O.iF(t) || w(t), O.iBI(t) && (t = t.object), this.sG = 1, this.sS(t);
        },
            Y = function (t, e, i) {
          return H(this.subs[this.subs.length - 1]).to(t, e, i);
        },
            $ = function (t) {
          return this._.sV(t), this;
        },
            Q = function (t) {
          return O.iF(t) ? this._.ss(t, this.options.updateOnBind) : G("erFN", 1), this;
        },
            q = function (t) {
          return this._.aM("tF", this.subs.slice(-1), t, this.options.updateOnBind), this;
        },
            z = function (t) {
          return this._.aM("tF", this.subs, t, this.options.updateOnBind), this;
        },
            J = function (t) {
          return this._.aM("cN", this.subs.slice(-1), t), this;
        },
            K = function (t) {
          return this._.aM("cN", this.subs, t), this;
        },
            Z = function (t) {
          var e,
              i = this.subs[this.subs.length - 1],
              s = i._,
              n = this._.isMulti ? this._.bindings : [this._];

          for (s.aS(this._, i.options), i = 0, e = n.length; i < e; i++) {
            var r = n[i],
                h = r.sM[s.ID].tF;
            r = r.sM[s.ID].cN, (h || t) && (h = O.iF(t) ? t : h) && !1 !== t && (s.sM[this._.ID].tF = h), r && (s.sM[this._.ID].cN = r);
          }

          return this;
        },
            tt = function (t) {
          var e,
              i = this.subs,
              s = 0;

          for (e = i.length; s < e; s++) {
            var n = i[s];

            this._.rS(n._, t);
          }

          return this;
        },
            et = function (t) {
          return this._.aPI(t), this;
        },
            it = function () {
          return this._.rPI(), this;
        },
            st = function (t, e) {
          return this._.sM[this.subs[this.subs.length - 1]._.ID].opts[t] = e, this;
        },
            nt = function (t, e, i) {
          var s, n;
          if (t.se = t.se.slice(6), E(this, this.In = t), this.isMulti = !0, this.bindings = s = [], e) for (t = 0, n = e.length; t < n; t++) {
            var r = e[t];
            this.addBP(r, i);
          }
          return Object.defineProperties(this, {
            type: {
              get: function () {
                return s.map(function (t) {
                  return t.type;
                });
              }
            },
            value: {
              get: function () {
                return s.map(function (t) {
                  return t.value;
                });
              }
            }
          });
        },
            rt = nt.prototype = Object.create(t);

        return Object.keys(R.prototype).forEach(function (t) {
          return rt[t] = function (e, i, s, n) {
            var r,
                h = this.bindings,
                o = 0;

            for (r = h.length; o < r; o++) {
              var u = h[o];
              "uS" === t && (i = u), u[t](e, i, s, n);
            }
          };
        }), rt.addBP = function (t, e) {
          this.bindings.push(e ? this.createBP(t, e, this.In) : t);
        }, e.exports = H, e.exports;
      }
    }, this), "function" == typeof undefined && undefined.umd) ;else {
      if (!module.exports) return this.simplybind = t(0);
      module.exports = t(0);
    }
  }).call(commonjsGlobal, null);
});var REGEX = {
  any: /./,
  whiteSpace: /\s+/,
  numeric: /^\d$/,
  letter: /^[a-zA-Z]$/,
  // alphanumeric: /[\da-zA-Z]/
  widenumeric: /^[0-9\!#\$\%\*\+\/\=\?\^\{\|\}\(\)\~\-\.]$/,
  alphanumeric: /^[0-9A-Za-z\!#\$\%\&\'\*\+\/\=\?\^\_\`\{\|\}\(\)\~\-\ ]$/,
  email: /^[\w\-\.]+@[\w\-\.]+\.[A-Za-z]{2,10}$/
};var noop = function () {};

var includes$2 = function (target, item) {
  return target && target.indexOf(item) !== -1;
};

var repeat = function (string, count) {
  var i;
  return function () {
    var j, ref, results1;
    results1 = [];

    for (i = j = 1, ref = count; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
      results1.push(string);
    }

    return results1;
  }().join('');
};

var removeItem$1 = function (target, item) {
  var itemIndex;
  itemIndex = target.indexOf(item);

  if (itemIndex !== -1) {
    return target.splice(itemIndex, 1);
  }
};

var insertAfter$1 = function (target, item, newItem) {
  var itemIndex;
  itemIndex = target.indexOf(item);

  if (itemIndex !== -1) {
    return target.splice(itemIndex, 0, newItem);
  }
};

var hexToRGBA = function (hex, alpha) {
  var B, G, R;

  if (hex[0] === '#') {
    hex = hex.slice(1);
  }

  R = parseInt(hex.slice(0, 2), 16);
  G = parseInt(hex.slice(2, 4), 16);
  B = parseInt(hex.slice(4, 6), 16);
  return `rgba(${R}, ${G}, ${B}, ${alpha})`;
};

var defaultColor = function (color, defaultColor) {
  if (color === 'transparent' || !color) {
    return defaultColor;
  } else {
    return color;
  }
};

var calcPadding = function (desiredHeight, fontSize) {
  return Math.ceil((desiredHeight - fontSize * 1.231) / 2);
};

var unlockScroll = function (excludedEl) {
  window._isLocked = false;
  return quickdom(window).off('wheel.lock');
};

var lockScroll = function (excludedEl) {
  if (!window._isLocked) {
    window._isLocked = true;
    return quickdom(window).on('wheel.lock', function (event) {
      if (event.target === excludedEl.raw || quickdom(event.target).parentMatching(function (parent) {
        return parent === excludedEl;
      })) {
        if (event.wheelDelta > 0 && excludedEl.raw.scrollTop === 0) {
          return event.preventDefault();
        }

        if (event.wheelDelta < 0 && excludedEl.raw.scrollHeight - excludedEl.raw.scrollTop === excludedEl.raw.clientHeight) {
          return event.preventDefault();
        }
      } else {
        return event.preventDefault();
      }
    });
  }
};

var fuzzyMatch = function (needle, haystack, caseSensitive) {
  var hI, hLength, matchedCount, nI, nLength, needleChar;
  nLength = needle.length;
  hLength = haystack.length;

  if (!caseSensitive) {
    needle = needle.toUpperCase();
    haystack = haystack.toUpperCase();
  }

  if (nLength > hLength) {
    return false;
  }

  if (nLength === hLength) {
    return needle === haystack;
  }

  nI = hI = matchedCount = 0;

  while (nI < nLength) {
    needleChar = needle[nI++];

    while (hI < hLength) {
      if (haystack[hI++] === needleChar) {
        matchedCount++;
        break;
      }
    }
  }

  return matchedCount === nLength;
};

var startsWith = function (needle, haystack, caseSensitive) {
  var i;

  if (!caseSensitive) {
    needle = needle.toUpperCase();
    haystack = haystack.toUpperCase();
  }

  if (needle.length > haystack.length) {
    return false;
  }

  if (needle.length === haystack.length) {
    return needle === haystack;
  }

  i = -1;

  while (needle[++i]) {
    if (needle[i] !== haystack[i]) {
      return false;
    }
  }

  return true;
};

var getIndexOfFirstDiff = function (sourceString, compareString) {
  var currentPos, maxLength;
  currentPos = 0;
  maxLength = Math.max(sourceString.length, compareString.length);

  while (currentPos < maxLength) {
    if (sourceString[currentPos] !== compareString[currentPos]) {
      return currentPos;
    }

    currentPos++;
  }

  return null;
};

var parseCssShorthandValue = function (string) {
  var result, values;
  values = string.split(REGEX.whiteSpace).map(parseFloat);
  result = {};

  switch (values.length) {
    case 1:
      result.top = result.right = result.bottom = result.left = values[0];
      break;

    case 2:
      result.top = result.bottom = values[0];
      result.right = result.left = values[1];
      break;

    case 3:
      result.top = values[0];
      result.right = result.left = values[1];
      result.bottom = values[2];
      break;

    case 4:
      result.top = values[0];
      result.right = values[1];
      result.bottom = values[2];
      result.left = values[3];
  }

  return result;
};

var shorthandSideValue = function (value, side) {
  var values;

  switch (typeof value) {
    case 'number':
      return value;

    case 'string':
      values = parseCssShorthandValue(value);
      return values[side];

    default:
      return 0;
  }
};

var updateShorthandValue = function (value, side, newValue) {
  var values;
  values = parseCssShorthandValue('' + (value || 0));

  switch (side) {
    case 'top':
      values.top += newValue;
      break;

    case 'right':
      values.right += newValue;
      break;

    case 'bottom':
      values.bottom += newValue;
      break;

    case 'left':
      values.left += newValue;
      break;

    default:
      Object.keys(values).forEach(function (side) {
        return values[side] += newValue;
      });
  }

  return `${values.top}px ${values.right}px ${values.bottom}px ${values.left}px`;
};

var inheritProto = function (child, parent, keys) {
  var j, key, len, ref;
  ref = Object.getOwnPropertyNames(parent.prototype);

  for (j = 0, len = ref.length; j < len; j++) {
    key = ref[j];

    if (keys && !keys.includes(key)) {
      continue;
    }

    if (!child.prototype[key]) {
      child.prototype[key] = parent.prototype[key];
    }
  }

  return child;
};var REQUIRED_FIELD_METHODS = ['_getValue', '_setValue', '_validate'];var fastdom = createCommonjsModule(function (module) {
  !function (win) {
    /**
     * Mini logger
     *
     * @return {Function}
     */

    var debug = function () {};
    /**
     * Normalized rAF
     *
     * @type {Function}
     */

    var raf = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.msRequestAnimationFrame || function (cb) {
      return setTimeout(cb, 16);
    };
    /**
     * Initialize a `FastDom`.
     *
     * @constructor
     */


    function FastDom() {
      var self = this;
      self.reads = [];
      self.writes = [];
      self.raf = raf.bind(win); // test hook
    }

    FastDom.prototype = {
      constructor: FastDom,

      /**
       * Adds a job to the read batch and
       * schedules a new frame if need be.
       *
       * @param  {Function} fn
       * @public
       */
      measure: function (fn, ctx) {
        var task = !ctx ? fn : fn.bind(ctx);
        this.reads.push(task);
        scheduleFlush(this);
        return task;
      },

      /**
       * Adds a job to the
       * write batch and schedules
       * a new frame if need be.
       *
       * @param  {Function} fn
       * @public
       */
      mutate: function (fn, ctx) {
        var task = !ctx ? fn : fn.bind(ctx);
        this.writes.push(task);
        scheduleFlush(this);
        return task;
      },

      /**
       * Clears a scheduled 'read' or 'write' task.
       *
       * @param {Object} task
       * @return {Boolean} success
       * @public
       */
      clear: function (task) {
        return remove(this.reads, task) || remove(this.writes, task);
      },

      /**
       * Extend this FastDom with some
       * custom functionality.
       *
       * Because fastdom must *always* be a
       * singleton, we're actually extending
       * the fastdom instance. This means tasks
       * scheduled by an extension still enter
       * fastdom's global task queue.
       *
       * The 'super' instance can be accessed
       * from `this.fastdom`.
       *
       * @example
       *
       * var myFastdom = fastdom.extend({
       *   initialize: function() {
       *     // runs on creation
       *   },
       *
       *   // override a method
       *   measure: function(fn) {
       *     // do extra stuff ...
       *
       *     // then call the original
       *     return this.fastdom.measure(fn);
       *   },
       *
       *   ...
       * });
       *
       * @param  {Object} props  properties to mixin
       * @return {FastDom}
       */
      extend: function (props) {
        if (typeof props != 'object') throw new Error('expected object');
        var child = Object.create(this);
        mixin(child, props);
        child.fastdom = this; // run optional creation hook

        if (child.initialize) child.initialize();
        return child;
      },
      // override this with a function
      // to prevent Errors in console
      // when tasks throw
      catch: null
    };
    /**
     * Schedules a new read/write
     * batch if one isn't pending.
     *
     * @private
     */

    function scheduleFlush(fastdom) {
      if (!fastdom.scheduled) {
        fastdom.scheduled = true;
        fastdom.raf(flush.bind(null, fastdom));
      }
    }
    /**
     * Runs queued `read` and `write` tasks.
     *
     * Errors are caught and thrown by default.
     * If a `.catch` function has been defined
     * it is called instead.
     *
     * @private
     */


    function flush(fastdom) {
      var writes = fastdom.writes;
      var reads = fastdom.reads;
      var error;

      try {
        debug('flushing reads', reads.length);
        runTasks(reads);
        debug('flushing writes', writes.length);
        runTasks(writes);
      } catch (e) {
        error = e;
      }

      fastdom.scheduled = false; // If the batch errored we may still have tasks queued

      if (reads.length || writes.length) scheduleFlush(fastdom);

      if (error) {
        debug('task errored', error.message);
        if (fastdom.catch) fastdom.catch(error);else throw error;
      }
    }
    /**
     * We run this inside a try catch
     * so that if any jobs error, we
     * are able to recover and continue
     * to flush the batch until it's empty.
     *
     * @private
     */


    function runTasks(tasks) {
      var task;

      while (task = tasks.shift()) task();
    }
    /**
     * Remove an item from an Array.
     *
     * @param  {Array} array
     * @param  {*} item
     * @return {Boolean}
     */


    function remove(array, item) {
      var index = array.indexOf(item);
      return !!~index && !!array.splice(index, 1);
    }
    /**
     * Mixin own properties of source
     * object into the target.
     *
     * @param  {Object} target
     * @param  {Object} source
     */


    function mixin(target, source) {
      for (var key in source) {
        if (source.hasOwnProperty(key)) target[key] = source[key];
      }
    } // There should never be more than
    // one instance of `FastDom` in an app


    var exports = win.fastdom = win.fastdom || new FastDom(); // jshint ignore:line
    // Expose to CJS & AMD

    module.exports = exports;
  }(typeof window !== 'undefined' ? window : commonjsGlobal);
});var Condition;
Condition = class Condition {
  constructor(field1, settings, callback1) {
    var property, target;
    this.field = field1;
    this.settings = settings;
    this.callback = callback1;
    this.satisfied = false;
    this.value = this.settings.value;
    this.property = this.settings.property || '_value';

    if (this.settings.property === 'value') {
      this.property = '_value';
    }

    target = this.field.allFields[this.settings.target];

    if (target) {
      this.target = target;
    } else {
      return console.warn(`condition target not found for the provided ID '${this.settings.target}'`, this.field);
    }

    property = IS$1$1.array(this.target[this.property]) ? `array:${this.property}` : this.property;
    simplybind(property, {
      updateOnBind: false
    }).of(this.target).and('visible').of(this.target.state).to(this.callback);
    simplybind('satisfied', {
      updateOnBind: false
    }).of(this).to((newValue, oldValue) => {
      var base;

      if (oldValue != null) {
        return typeof (base = this.field).emit === "function" ? base.emit('conditionChange', this) : void 0;
      }
    });
  }

  test() {
    var comparison, comparisonOperators, passedComparisons, ref, targetValue;

    if (!((ref = this.target) != null ? ref.state.visible : void 0)) {
      return false;
    }

    comparison = function () {
      switch (false) {
        case !IS$1$1.objectPlain(this.value):
          return this.value;

        case !IS$1$1.regex(this.value):
          return {
            '$regex': this.value
          };

        case !(this.value === 'valid' && !this.settings.property || !IS$1$1.defined(this.value)):
          return 'valid';

        default:
          return {
            '$eq': this.value
          };
      }
    }.call(this);

    if (comparison === 'valid') {
      return this.target.validate();
    }

    targetValue = (() => {
      var nestedObject, propertyChain;

      if (this.property === '_value') {
        return this.target.value;
      }

      propertyChain = this.property.split('.');

      switch (false) {
        case propertyChain.length !== 1:
          return this.target[this.property];

        case !IS$1$1.defined(this.target[this.property]):
          return this.target[this.property];

        default:
          nestedObject = this.target;

          while (IS$1$1.object(nestedObject)) {
            nestedObject = nestedObject[propertyChain.pop()];
          }

          return nestedObject;
      }
    })();

    comparisonOperators = Object.keys(comparison);
    passedComparisons = comparisonOperators.filter(function (operator) {
      var seekedValue;
      seekedValue = comparison[operator];

      switch (operator) {
        case '$eq':
          return targetValue === seekedValue;

        case '$ne':
          return targetValue !== seekedValue;

        case '$gt':
          return targetValue > seekedValue;

        case '$gte':
          return targetValue >= seekedValue;

        case '$lt':
          return targetValue < seekedValue;

        case '$lte':
          return targetValue <= seekedValue;

        case '$ct':
          return helpers.includes(targetValue, seekedValue);

        case '$nct':
          return !helpers.includes(targetValue, seekedValue);

        case '$regex':
          return seekedValue.test(targetValue);

        case '$nregex':
          return !seekedValue.test(targetValue);

        case '$mask':
          return helpers.testMask(targetValue, seekedValue);

        default:
          return false;
      }
    });
    return passedComparisons.length === comparisonOperators.length;
  }

  static validate(conditions) {
    var validConditions;

    if (conditions) {
      validConditions = conditions.filter(function (condition) {
        return condition.satisfied = condition.test();
      });
      return validConditions.length === conditions.length;
    }
  }

  static init(field, conditions, callback) {
    return setTimeout(() => {
      if (callback == null) {
        callback = () => {
          return field.validateConditions();
        };
      }

      field.conditions = conditions.map(function (condition) {
        return new Condition(field, condition, callback);
      });
      return callback();
    });
  }

};
var Condition$1 = Condition;var transformSettings = {
  conditions: function (conditions) {
    var results, target, value;

    if (IS$1$1.objectPlain(conditions)) {
      results = [];

      for (target in conditions) {
        value = conditions[target];
        results.push({
          target,
          value
        });
      }

      return results;
    } else if (IS$1$1.array(conditions)) {
      return conditions.map(function (item) {
        if (IS$1$1.string(item)) {
          return {
            target: item
          };
        } else {
          return item;
        }
      });
    }
  },
  choices: function (choices) {
    var label, results, value;

    if (IS$1$1.objectPlain(choices)) {
      results = [];

      for (label in choices) {
        value = choices[label];
        results.push({
          label,
          value
        });
      }

      return results;
    } else if (IS$1$1.array(choices)) {
      return choices.map(function (item) {
        if (!IS$1$1.objectPlain(item)) {
          return {
            label: item,
            value: item
          };
        } else {
          return item;
        }
      });
    }
  },
  validWhenRegex: function (regex) {
    if (IS$1$1.string(regex)) {
      return new RegExp(regex);
    } else {
      return regex;
    }
  }
};var globalDefaults = {
  fontFamily: 'system-ui, sans-serif',
  templates: {},
  events: null,
  label: false,
  error: '',
  help: '',
  required: false,
  disabled: false,
  defaultValue: null,
  width: '100%',
  mobileWidth: null,
  mobileThreshold: 736,
  border: 1,
  margin: null,
  padding: null,
  distance: null,
  inputPadding: 12,
  fontSize: 14,
  labelSize: null,
  icon: null,
  iconSize: 22,
  getter: null,
  setter: null,
  validator: null,
  clearErrorOnValid: true,
  makeRoomForHelp: true
};var Field, currentID;
currentID = 0;

Field = function () {
  class Field {
    constructor(settings, builder, settingOverrides, templateOverrides) {
      var ref, shallowSettings, transformSettings_;
      this.builder = builder;

      if (settingOverrides) {
        if (settingOverrides.globalDefaults) {
          this.globalDefaults = settingOverrides.globalDefaults;
        }

        if (settingOverrides[settings.type]) {
          this.defaults = settingOverrides[settings.type];
        }
      }

      if (templateOverrides && templateOverrides[settings.type]) {
        this.templates = templateOverrides[settings.type];
        this.template = templateOverrides[settings.type].default;
      }

      shallowSettings = this.shallowSettings ? Field.shallowSettings.concat(this.shallowSettings) : Field.shallowSettings;
      transformSettings_ = this.transformSettings ? Field.transformSettings.concat(this.transformSettings) : Field.transformSettings;
      this.settings = primaryBuilder$1.deep.clone.notDeep(shallowSettings).transform(transformSettings_)(this.globalDefaults, this.defaults, settings);
      this.ID = this.settings.ID || currentID++ + '';
      this.type = settings.type;
      this.name = settings.name;
      this.allFields = this.settings.fieldInstances || Field.instances;
      this._value = null;
      this._eventCallbacks = {};
      this.state = {
        valid: true,
        visible: true,
        focused: false,
        hovered: false,
        filled: false,
        interacted: false,
        isMobile: false,
        disabled: this.settings.disabled,
        margin: this.settings.margin,
        padding: this.settings.padding,
        width: this.settings.width,
        showLabel: this.settings.label,
        label: this.settings.label,
        showHelp: this.settings.help,
        help: this.settings.help,
        showError: false,
        error: this.settings.error
      };

      if (IS$1$1.defined(this.settings.placeholder)) {
        this.state.placeholder = this.settings.placeholder;
      }

      if (IS$1$1.number(this.settings.width) && this.settings.width <= 1) {
        this.state.width = `${this.settings.width * 100}%`;
      }

      if ((ref = this.settings.conditions) != null ? ref.length : void 0) {
        this.state.visible = false;
        Condition$1.init(this, this.settings.conditions);
      }

      if (this.allFields[this.ID]) {
        if (typeof console !== "undefined" && console !== null) {
          console.warn(`Duplicate field IDs found: '${this.ID}'`);
        }
      }

      this.allFields[this.ID] = this;
    }

    _constructorEnd() {
      var base, handler, ref, target;
      this.el.childf; //.field.on 'inserted', ()=> @emit('inserted')

      if (this.settings.ID) {
        this.el.raw.id = this.ID;
      }

      if (this.settings.value != null) {
        if ((base = this.settings).defaultValue == null) {
          base.defaultValue = this.settings.value;
        }
      }

      if (this.settings.defaultValue != null) {
        this.value = this.settings.multiple ? [].concat(this.settings.defaultValue) : this.settings.defaultValue;
      }

      simplybind('showError', {
        updateOnBind: false
      }).of(this.state).to('help').of(this.state).transform(show => {
        if (show && this.state.error && IS$1$1.string(this.state.error)) {
          return this.state.error;
        } else {
          return this.settings.help || this.state.help;
        }
      });
      simplybind('error', {
        updateOnBind: false
      }).of(this.state).to('help').of(this.state).condition(error => {
        return error && this.state.showError;
      });
      simplybind('help').of(this.state).to('html').of(this.el.child.help).and.to('showHelp').of(this.state);
      simplybind('label').of(this.state).to('text').of(this.el.child.label).and.to('showLabel').of(this.state);
      simplybind('margin').of(this.state).to(this.el.style.bind(this.el, 'margin'));
      simplybind('padding').of(this.state).to(this.el.style.bind(this.el, 'padding'));
      simplybind('showHelp').of(this.state).to((show, prevShow) => {
        var changeAmount;

        if (this.settings.makeRoomForHelp) {
          changeAmount = !!show === !!prevShow ? 0 : show ? 25 : prevShow ? -25 : void 0;

          if (changeAmount) {
            return this.state.margin = updateShorthandValue(this.state.margin, 'bottom', changeAmount);
          }
        }
      });
      simplybind('focused', {
        updateOnBind: false
      }).of(this.state).to(focused => {
        return this.emit(focused ? 'focus' : 'blur');
      });

      if (this.settings.mobileWidth) {
        simplybind(() => {
          return fastdom.measure(() => {
            return this.state.isMobile = window.innerWidth <= this.settings.mobileThreshold;
          });
        }).updateOn('event:resize').of(window);
      }

      if (IS$1$1.object(this.settings.events)) {
        ref = this.settings.events;

        for (target in ref) {
          handler = ref[target];
          this.on(target, handler);
        }
      }

      this.emit('created', this);
      return this.el.raw._quickField = this;
    }

    _formatWidth(width) {
      width = this.state.isMobile ? this.settings.mobileWidth || width : width;

      if (this.settings.distance && width !== '100%') {
        width = `calc(${width} - ${this.settings.distance}px)`;
      }

      return width;
    }

    appendTo(target) {
      this.el.appendTo(target);
      return this;
    }

    prependTo(target) {
      this.el.prependTo(target);
      return this;
    }

    insertAfter(target) {
      this.el.insertAfter(target);
      return this;
    }

    insertBefore(target) {
      this.el.insertBefore(target);
      return this;
    }

    detach(target) {
      this.el.detach(target);
      return this;
    }

    remove() {
      this.el.remove();
      return this.destroy(false);
    }

    destroy(removeFromDOM = true) {
      var child, i, len, ref;
      simplybind.unBindAll(this);
      simplybind.unBindAll(this.state);
      simplybind.unBindAll(this.el);
      ref = this.el.child;

      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        simplybind.unBindAll(child);
      }

      if (removeFromDOM) {
        this.el.remove();
      }

      if (this._destroy) {
        this._destroy();
      }

      delete this.allFields[this.ID];
      return true;
    }

    on(eventNames, callback, useCapture) {
      this.el.on.call(this.el, eventNames, callback, useCapture, true);
      return this;
    }

    once(eventNames, callback, useCapture) {
      return this.on(eventNames, () => {
        this.off(eventNames, callback);
        return callback.apply(this.el, arguments);
      }, useCapture);
    }

    off() {
      this.el.off.apply(this.el, arguments);
      return this;
    }

    emit() {
      this.el.emitPrivate.apply(this.el, arguments);
      return this;
    }

    validate(providedValue = this[this.coreValueProp], testUnrequired, report) {
      var isValid;

      isValid = function () {
        switch (false) {
          case !this.settings.validator:
            return this.settings.validator(providedValue);

          case !(!this.settings.required && !testUnrequired):
            return true;

          case this._validate(providedValue, testUnrequired, report) !== false:
            return false;

          case !this.settings.required:
            switch (false) {
              case !this.settings.multiple:
                return !!(providedValue != null ? providedValue.length : void 0);

              case typeof providedValue !== 'string':
                return !!providedValue;

              default:
                return providedValue != null;
            }

            break;

          default:
            return true;
        }
      }.call(this);

      if (isValid && this.settings.clearErrorOnValid) {
        this.state.showError = false;
      }

      return isValid;
    }

    validateConditions(conditions) {
      var passedConditions, toggleVisibility;

      if (conditions) {
        toggleVisibility = false;
      } else {
        conditions = this.conditions;
        toggleVisibility = true;
      }

      passedConditions = Condition$1.validate(conditions);

      if (toggleVisibility) {
        return this.state.visible = passedConditions;
      } else {
        return passedConditions;
      }
    }

    validateAndReport(providedValue, testUnrequired) {
      var isValid;
      isValid = this.validate(providedValue, testUnrequired, true);
      this.state.showError = !isValid;
      return isValid;
    }

  }

  Field.instances = Object.create(null);
  Field.shallowSettings = ['templates', 'fieldInstances', 'value', 'defaultValue'];
  Field.transformSettings = transformSettings;
  Field.prototype.globalDefaults = globalDefaults;
  Field.prototype.coreValueProp = '_value';
  Object.defineProperties(Field.prototype, {
    'removeListener': {
      get: function () {
        return this.off;
      }
    },
    'els': {
      get: function () {
        return this.el.child;
      }
    },
    'valueRaw': {
      get: function () {
        return this._value;
      }
    },
    'value': {
      get: function () {
        if (this.settings.getter) {
          return this.settings.getter(this._getValue());
        } else {
          return this._getValue();
        }
      },
      set: function (value) {
        return this._setValue(this.settings.setter ? this.settings.setter(value) : value);
      }
    }
  });
  return Field;
}.call(undefined);

var Field$1 = Field;var keyCodes;
var KEYCODES = keyCodes = {
  delete: 8,
  enter: 13,
  esc: 27,
  ctrl: 17,
  alt: 18,
  shift: 16,
  super: 91,
  super2: 93,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  hyphen: 45,
  underscore: 95,
  question: 63,
  exclamation: 33,
  frontslash: 47,
  backslash: 92,
  comma: 44,
  period: 46,
  space: 32,
  anyArrow: function (code) {
    return code === keyCodes.up || code === keyCodes.down || code === keyCodes.left || code === keyCodes.right;
  },
  anyModifier: function (code) {
    return code === keyCodes.ctrl || code === keyCodes.alt || code === keyCodes.shift || code === keyCodes.super || code === keyCodes.super2;
  },
  anyAlpha: function (code) {
    return 97 <= code && code <= 122 || 65 <= code && code <= 90;
  },
  anyNumeric: function (code) {
    return 48 <= code && code <= 57;
  },
  anyAlphaNumeric: function (code) {
    return keyCodes.anyAlpha(code) || keyCodes.anyNumeric(code);
  },
  anyPrintable: function (code) {
    return keyCodes.anyAlpha(code) || keyCodes.anyNumeric(code) || code === keyCodes.hyphen || code === keyCodes.underscore || code === keyCodes.question || code === keyCodes.exclamation || code === keyCodes.frontslash || code === keyCodes.backslash || code === keyCodes.comma || code === keyCodes.period || code === keyCodes.space;
  }
};var checkmark = quickdom.template(['*svg', {
  attrs: {
    width: '12px',
    height: '12px',
    viewBox: '5 7 12 12',
    tabindex: -1,
    focusable: false
  },
  style: {
    width: '9px',
    height: '9px'
  }
}, ['*polyline', {
  attrs: {
    'stroke-width': '2',
    'stroke-linecap': 'round',
    'stroke-linejoin': 'round',
    fill: 'none',
    points: '7 13.8888889 9.66666667 17 15 9',
    tabindex: -1,
    focusable: false
  }
}]]);var angleDown = quickdom.template(['*svg', {
  attrs: {
    width: '1792px',
    height: '1792px',
    viewBox: '0 0 1792 1792',
    tabindex: -1,
    focusable: false
  },
  style: {
    width: '100%',
    height: '100%',
    outline: 'none'
  }
}, ['*path', {
  attrs: {
    tabindex: -1,
    focusable: false,
    d: 'M1395 736q0 13-10 23l-466 466q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l393 393 393-393q10-10 23-10t23 10l50 50q10 10 10 23z'
  }
}]]);var caretUp = quickdom.template(['*svg', {
  attrs: {
    viewBox: '0 0 512 512',
    tabindex: -1,
    focusable: false
  },
  style: {
    width: '100%',
    height: '100%',
    outline: 'none'
  }
}, ['*path', {
  attrs: {
    tabindex: -1,
    focusable: false,
    d: 'M402 347c0 5-2 10-5 13-4 4-8 6-13 6h-256c-5 0-9-2-13-6-3-3-5-8-5-13s2-9 5-12l128-128c4-4 8-6 13-6s9 2 13 6l128 128c3 3 5 7 5 12z'
  }
}]]);var caretDown = quickdom.template(['*svg', {
  attrs: {
    viewBox: '0 0 512 512',
    tabindex: -1,
    focusable: false
  },
  style: {
    width: '100%',
    height: '100%',
    outline: 'none'
  }
}, ['*path', {
  attrs: {
    tabindex: -1,
    focusable: false,
    d: 'M402 201c0 5-2 9-5 13l-128 128c-4 4-8 5-13 5s-9-1-13-5l-128-128c-3-4-5-8-5-13s2-9 5-13c4-3 8-5 13-5h256c5 0 9 2 13 5 3 4 5 8 5 13z'
  }
}]]);var plus = quickdom.template(['*svg', {
  attrs: {
    viewBox: '0 0 15 15',
    tabindex: -1,
    focusable: false
  },
  style: {
    width: '100%',
    height: '100%',
    outline: 'none'
  }
}, ['*polygon', {
  attrs: {
    tabindex: -1,
    focusable: false,
    points: '9 0 6 0 6 6 0 6 0 9 6 9 6 15 9 15 9 9 15 9 15 6 9 6'
  }
}]]);var clone$1 = quickdom.template(['*svg', {
  attrs: {
    viewBox: '0 0 18 20',
    tabindex: -1,
    focusable: false
  },
  style: {
    width: '100%',
    height: '100%',
    outline: 'none'
  }
}, ['*path', {
  attrs: {
    tabindex: -1,
    focusable: false,
    d: 'M13.414,0 L6,0 C4.897,0 4,0.898 4,2 L4,14 C4,15.103 4.897,16 6,16 L16,16 C17.103,16 18,15.103 18,14 L18,4.586 L13.414,0 Z M16.001,14 L6,14 L6,2 L12,2 L12,6 L16,6 L16.001,14 Z'
  }
}], ['*path', {
  attrs: {
    tabindex: -1,
    focusable: false,
    d: 'M2,6.42379282 L0,6.42379282 L0,18 C0,19.103 0.897,20 2,20 L14,20 L14,18 L2,18 L2,6.42379282 Z'
  }
}]]);var remove$1 = plus.extend({
  options: {
    style: {
      transform: 'rotate(45deg)'
    }
  }
});var template$1 = quickdom.template(['div', {
  ref: 'dropdown',
  styleAfterInsert: true,
  style: {
    position: 'absolute',
    zIndex: 10,
    overflow: 'hidden',
    top: function (dropdown) {
      if (dropdown.field.type === 'text') {
        return this.parent.raw.style.height;
      } else {
        return '-7px';
      }
    },
    left: function () {
      if (this.parent.rect.left - 5 < 0) {
        return 0;
      } else {
        return -5;
      }
    },
    display: 'none',
    // backgroundColor: hexToRGBA('f6f6f6', 0.9)
    backgroundColor: '#f6f6f6',
    boxShadow: `0px 6px 10px ${hexToRGBA('000000', 0.32)}`,
    borderWidth: '1px',
    borderStyle: 'solid',
    borderColor: '#d1d1d1',
    borderRadius: '5px',
    boxSizing: 'border-box',
    padding: '4px 0',
    $isOpen: {
      $hasVisibleChoices: {
        display: 'block'
      }
    }
  }
}]);
var list = quickdom.template(['div', {
  ref: 'list',
  passStateToChildren: false,
  style: {
    position: 'relative',
    overflow: 'scroll',
    overflowScrolling: 'touch',
    overflowStyle: '-ms-autohiding-scrollbar'
  }
}]);
var choice = quickdom.template(['div', {
  style: {
    display: 'none',
    fontSize: '0',
    color: '#000000',
    userSelect: 'none',
    lineHeight: '1em',
    cursor: 'pointer',
    $visible: {
      display: 'block'
    },
    $unavailable: {
      display: 'none'
    },
    $hover: {
      color: '#ffffff',
      backgroundColor: '#4C96FF'
    }
  }
}, ['div', // Checkmark
{
  style: {
    display: 'inline-block',
    verticalAlign: 'top',
    width: '20px',
    // height: ()-> @parent.raw.style.height
    // lineHeight: ()-> @parent.style('height')
    // fontSize: ()-> @parent.style('height')
    lineHeight: '20px',
    fontSize: '13px',
    textAlign: 'center',
    color: 'inherit',
    stroke: 'currentColor',
    visibility: 'hidden',
    $selected: {
      visibility: 'visible'
    }
  }
}, checkmark], ['div', // Text
{
  styleAfterInsert: true,
  style: {
    display: 'inline-block',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    wordWrap: 'normal',
    maxWidth: function () {
      return `calc(100% - ${this.prev.styleSafe('width', true)})`;
    },
    paddingRight: '10px',
    lineHeight: '20px',
    fontSize: '11px',
    fontFamily: function (dropdown) {
      return dropdown.settings.fontFamily;
    },
    color: 'inherit',
    boxSizing: 'border-box'
  }
}]]);
var scrollIndicatorUp = quickdom.template(['div', {
  ref: 'scrollIndicatorUp',
  style: {
    position: 'absolute',
    top: 0,
    left: 0,
    display: 'none',
    width: '100%',
    height: '20px',
    backgroundColor: '#f6f6f6',
    color: '#000000',
    textAlign: 'center',
    $visible: {
      display: 'block'
    }
  }
}, ['div', {
  style: {
    position: 'absolute',
    top: '50%',
    left: 0,
    right: 0,
    width: '15px',
    height: '15px',
    display: 'block',
    margin: '0 auto',
    transform: 'translateY(-50%)'
  }
}, caretUp]]);
var scrollIndicatorDown = quickdom.template(['div', {
  ref: 'scrollIndicatorDown',
  style: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    display: 'none',
    width: '100%',
    height: '20px',
    backgroundColor: '#f6f6f6',
    color: '#000000',
    textAlign: 'center',
    $visible: {
      display: 'block'
    }
  }
}, ['div', {
  style: {
    position: 'absolute',
    top: '50%',
    left: 0,
    right: 0,
    width: '15px',
    height: '15px',
    display: 'block',
    margin: '0 auto',
    transform: 'translateY(-50%)'
  }
}, caretDown]]);
var help = quickdom.template(['div', {
  ref: 'help',
  style: {
    display: 'none',
    borderTop: '2px solid rgba(0,0,0,0.05)',
    padding: '4px 12px 1px',
    color: 'rgba(0,0,0,0.5)',
    fontWeight: '500',
    fontSize: '11px',
    userSelect: 'none',
    $showHelp: {
      display: 'block'
    }
  }
}]);
var template$1$1 =
/*#__PURE__*/
Object.freeze({
  default: template$1,
  list: list,
  choice: choice,
  scrollIndicatorUp: scrollIndicatorUp,
  scrollIndicatorDown: scrollIndicatorDown,
  help: help
});var defaults = {
  maxHeight: 300,
  multiple: false,
  lockScroll: true,
  typeBuffer: false,
  help: '',
  templates: {}
};var Choice, Dropdown, List;

Dropdown = function () {
  class Dropdown {
    constructor(initialChoices, field) {
      this.initialChoices = initialChoices;
      this.field = field;
      this.isOpen = false;
      this.typeBuffer = '';
      this.settings = primaryBuilder$1.deep.clone.filter(this._settingFilters)(globalDefaults, this.defaults, this.field.settings.dropdown);
      this.selected = this.settings.multiple ? [] : null;
      this.lastSelected = null;
      this.choices = [];
      this.currentHighlighted = null;
      this.visibleChoicesCount = 0;
      this.visibleChoices = [];
      this.els = {};
      this._selectedCallback = noop;

      this._createElements();

      this._attachBindings();

      return this;
    }

    _createElements() {
      var choice$$1, globalOpts, i, len, ref;
      globalOpts = {
        relatedInstance: this
      };
      this.els.container = this.template.default.spawn(this.settings.templates.default, primaryBuilder$1({
        passStateToChildren: false
      }, globalOpts));
      this.els.list = this.template.list.spawn(this.settings.templates.list, globalOpts).appendTo(this.els.container);
      this.els.help = this.template.help.spawn(this.settings.templates.help, globalOpts).appendTo(this.els.container);
      this.els.scrollIndicatorUp = this.template.scrollIndicatorUp.spawn(this.settings.templates.scrollIndicatorUp, globalOpts).appendTo(this.els.container);
      this.els.scrollIndicatorDown = this.template.scrollIndicatorDown.spawn(this.settings.templates.scrollIndicatorDown, globalOpts).appendTo(this.els.container);
      this.list = new List(this);
      ref = this.initialChoices;

      for (i = 0, len = ref.length; i < len; i++) {
        choice$$1 = ref[i];
        this.addChoice(choice$$1);
      }
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_display();

      return this._attachBindings_scrollIndicators();
    }

    _attachBindings_elState() {
      simplybind('help').of(this.settings).to('text').of(this.els.help).and.to(showHelp => {
        return this.els.help.state('showHelp', showHelp);
      });
      simplybind('visibleChoicesCount').of(this).to(count => {
        return this.els.container.state('hasVisibleChoices', !!count);
      });
      return simplybind('currentHighlighted').of(this).to((current, prev) => {
        if (prev) {
          prev.el.state('hover', false);
        }

        if (current) {
          return current.el.state('hover', true);
        }
      });
    }

    _attachBindings_display() {
      simplybind('isOpen', {
        updateOnBind: false
      }).of(this).to(isOpen => {
        this.els.container.state('isOpen', isOpen);

        if (!isOpen) {
          this.currentHighlighted = null;
        }

        if (this.settings.lockScroll) {
          if (isOpen) {
            lockScroll(this.els.list);
          } else {
            unlockScroll();
          }
        }

        if (isOpen) {
          this.list.appendChoices();
          this.list.calcDisplay();

          if (this.selected && !this.settings.multiple) {
            return this.list.scrollToChoice(this.selected);
          }
        } else {
          return this.list.setTranslate(0);
        }
      });
      simplybind('lastSelected', {
        updateOnBind: false,
        updateEvenIfSame: true
      }).of(this).to((newChoice, prevChoice) => {
        return this._selectedCallback(newChoice, prevChoice);
      });
      simplybind('focused', {
        updateOnBind: false
      }).of(this.field.state).to(focused => {
        if (!focused) {
          return this.field.el.child.input.off('keydown.dropdownNav');
        } else {
          return this.field.el.child.input.on('keydown.dropdownNav', event => {
            if (this.isOpen) {
              switch (event.keyCode) {
                case KEYCODES.up:
                  event.preventDefault();
                  return this.highlightPrev();

                case KEYCODES.down:
                  event.preventDefault();
                  return this.highlightNext();

                case KEYCODES.enter:
                  event.preventDefault();

                  if (this.currentHighlighted) {
                    return this.lastSelected = this.currentHighlighted;
                  }

                  break;

                case KEYCODES.esc:
                  event.preventDefault();
                  return this.isOpen = false;
              }
            }
          });
        }
      });

      if (!this.settings.typeBuffer) {
        return;
      }

      simplybind('focused', {
        updateOnBind: false
      }).of(this.field.state).to(focused => {
        if (!focused) {
          return quickdom(document).off('keypress.dropdownTypeBuffer');
        } else {
          return quickdom(document).on('keypress.dropdownTypeBuffer', event => {
            if (this.isOpen) {
              event.preventDefault();

              if (!KEYCODES.anyPrintable(event.keyCode)) {
                return;
              }

              return this.typeBuffer += event.key;
            }
          });
        }
      });
      return simplybind('typeBuffer', {
        updateOnBind: false
      }).of(this).to(() => {
        clearTimeout(this.typeBufferTimeout);
        return this.typeBufferTimeout = setTimeout(() => {
          return this.typeBuffer = '';
        }, 1500);
      }).and.to(buffer => {
        var choice$$1, i, len, ref;

        if (buffer) {
          ref = this.visibleChoices;

          for (i = 0, len = ref.length; i < len; i++) {
            choice$$1 = ref[i];

            if (startsWith(buffer, choice$$1.label)) {
              this.currentHighlighted = choice$$1;

              if (!this.list.choiceInView(choice$$1)) {
                this.list.scrollToChoice(choice$$1);
              }

              return;
            }
          }
        }
      });
    }

    _attachBindings_scrollIndicators() {
      simplybind('scrollTop', {
        updateEvenIfSame: true
      }).of(this.els.list.raw).to(scrollTop => {
        return this._updateScrollIndicatorVisibility();
      }).condition(() => {
        return this.isOpen && !this.settings.help && this.els.list.raw.scrollHeight !== this.els.list.raw.clientHeight && this.els.list.raw.clientHeight >= 100;
      }).updateOn('event:scroll').of(this.els.list.raw).updateOn('isOpen').of(this);
      this.els.scrollIndicatorUp.on('mouseenter', () => {
        return this.list.startScrolling('up');
      });
      this.els.scrollIndicatorUp.on('mouseleave', () => {
        return this.list.stopScrolling();
      });
      this.els.scrollIndicatorDown.on('mouseenter', () => {
        return this.list.startScrolling('down');
      });
      return this.els.scrollIndicatorDown.on('mouseleave', () => {
        return this.list.stopScrolling();
      });
    }

    _updateScrollIndicatorVisibility() {
      var scrollTop, showBottomIndicator, showTopIndicator;
      scrollTop = this.els.list.raw;
      showTopIndicator = scrollTop > 0;
      showBottomIndicator = this.els.list.raw.scrollHeight - this.els.list.raw.clientHeight > scrollTop;
      this.els.scrollIndicatorUp.state('visible', showTopIndicator);
      return this.els.scrollIndicatorDown.state('visible', showBottomIndicator);
    }

    addChoice(config) {
      var i, item, len, newChoice;

      if (IS$1$1.array(config)) {
        for (i = 0, len = config.length; i < len; i++) {
          item = config[i];
          this.addChoice(item);
        }

        return;
      } else if (IS$1$1.string(config)) {
        config = {
          label: config,
          value: config
        };
      } else if (IS$1$1.objectPlain(config)) {
        if (config.value == null) {
          config.value = config.label;
        }

        if (config.label == null) {
          config.label = config.value;
        }
      } else {
        return;
      }

      newChoice = new Choice(this, config, this.list, this.choices.length);

      if (this.list.appendedChoices) {
        newChoice.init();
      }

      this.choices.push(newChoice);
      return newChoice;
    }

    removeChoice(choice$$1) {
      var i, item, len;

      if (IS$1$1.array(choice$$1)) {
        for (i = 0, len = choice$$1.length; i < len; i++) {
          item = choice$$1[i];
          this.removeChoice(item);
        }

        return;
      } else {
        choice$$1 = this.findChoiceAny(choice$$1);
      }

      if (!choice$$1) {
        return;
      }

      choice$$1.remove();
      return this.choices.splice(this.choices.indexOf(choice$$1), 1);
    }

    replaceChoices(newChoices) {
      this.removeChoice(this.choices.slice());
      this.addChoice(newChoices);
    }

    appendTo(target) {
      return this.els.container.appendTo(target);
    }

    onSelected(callback) {
      return this._selectedCallback = callback;
    }

    findChoice(providedValue, byLabel) {
      var matches;
      matches = this.choices.filter(function (choice$$1) {
        switch (false) {
          case !IS$1$1.object(providedValue):
            return providedValue === choice$$1;

          case !byLabel:
            return providedValue === choice$$1.label;

          default:
            return providedValue === choice$$1.value;
        }
      });
      return matches[0];
    }

    findChoiceAny(providedValue) {
      return this.findChoice(providedValue) || this.findChoice(providedValue, true);
    }

    highlightPrev() {
      var choice$$1, currentIndex;
      currentIndex = this.visibleChoices.indexOf(this.currentHighlighted);

      if (currentIndex > 0) {
        this.currentHighlighted = choice$$1 = this.visibleChoices[currentIndex - 1];

        if (!this.list.choiceInView(choice$$1)) {
          return this.list.scrollUp(choice$$1);
        }
      } else {
        this.currentHighlighted = choice$$1 = this.visibleChoices[this.visibleChoices.length - 1];

        if (!this.list.choiceInView(choice$$1)) {
          return this.list.scrollToChoice(choice$$1, 1);
        }
      }
    }

    highlightNext() {
      var choice$$1, currentIndex;
      currentIndex = this.visibleChoices.indexOf(this.currentHighlighted);

      if (currentIndex < this.visibleChoices.length - 1) {
        this.currentHighlighted = choice$$1 = this.visibleChoices[currentIndex + 1];

        if (!this.list.choiceInView(choice$$1)) {
          return this.list.scrollDown(choice$$1);
        }
      } else {
        this.currentHighlighted = choice$$1 = this.visibleChoices[0];

        if (!this.list.choiceInView(choice$$1)) {
          return this.list.scrollToChoice(choice$$1, 1);
        }
      }
    }

  }

  Dropdown.prototype.template = template$1$1;
  Dropdown.prototype.defaults = defaults;
  Dropdown.prototype._settingFilters = {
    maxHeight: function (value) {
      return IS$1$1.number(value);
    }
  };
  return Dropdown;
}.call(undefined);

List = class List {
  constructor(dropdown) {
    this.choiceInView = this.choiceInView.bind(this);
    this.dropdown = dropdown;
    ({
      els: this.els,
      field: this.field,
      settings: this.settings
    } = this.dropdown);
    this.el = this.els.list;
    this.container = this.els.container;
    this.appendedChoices = false;
  }

  appendChoices() {
    var choice$$1, i, len, ref;

    if (this.appendedChoices) {
      return;
    }

    ref = this.dropdown.choices;

    for (i = 0, len = ref.length; i < len; i++) {
      choice$$1 = ref[i];
      choice$$1.init();
    }

    return this.appendedChoices = true;
  }

  calcDisplay() {
    var bottomCutoff, clippingParent, clippingRect, cutoff, height, isBottomCutoff, isTopCutoff, needsNewHeight, padding, scrollHeight, selfRect, topCutoff, translation, windowCutoff, windowHeight;
    windowHeight = window.innerHeight;
    translation = this.translation || 0;
    clippingParent = this.container.parentMatching(function (parent) {
      var overflow;
      overflow = parent.style('overflowY');
      return overflow === 'hidden' || overflow === 'scroll';
    });
    scrollHeight = this.el.raw.scrollHeight || 2e308;
    selfRect = primaryBuilder$1.clone(this.container.rect);
    padding = selfRect.height - this.el.height;
    height = Math.min(scrollHeight, this.settings.maxHeight, window.innerHeight - 40);
    selfRect.bottom = selfRect.top + height;

    if (clippingParent) {
      clippingRect = clippingParent.rect;
      bottomCutoff = selfRect.bottom - clippingRect.bottom;
      topCutoff = clippingRect.top - selfRect.top;
      isBottomCutoff = bottomCutoff > 0;
      isTopCutoff = topCutoff > 0;

      if (selfRect.top >= clippingRect.bottom || clippingRect.top >= selfRect.bottom) {
        console.warn(`The dropdown for element '${this.field.ID}' cannot be displayed as it's hidden by the parent overflow`);
      } else if (isBottomCutoff || isTopCutoff) {
        needsNewHeight = true;

        if (selfRect.top - bottomCutoff > clippingRect.top && !isTopCutoff) {
          translation = bottomCutoff;
          selfRect.top -= translation;
          selfRect.bottom -= translation;
          cutoff = clippingRect.top - selfRect.top;
        } else if (selfRect.bottom - topCutoff < clippingRect.bottom) {
          translation = topCutoff * -1;
          selfRect.top += translation;
          selfRect.bottom += translation;
          cutoff = selfRect.bottom - clippingRect.bottom;
        }

        if (needsNewHeight = cutoff > 0) {
          height = cutoff - padding;
        }
      }
    }

    windowCutoff = selfRect.top + height - windowHeight;

    if (windowCutoff > 0 && height < windowHeight) {
      translation += windowCutoff + 10;
    }

    this.setDimensions(height, this.field.el.child.innerwrap.width + 10);
    return this.setTranslate(translation);
  }

  setDimensions(height, width) {
    if (height != null) {
      this.el.style('maxHeight', height);
    }

    if (width != null) {
      return this.el.style('minWidth', width);
    }
  }

  setTranslate(translation) {
    this.translation = translation;
    translation *= -1;
    return this.container.style('transform', `translateY(${translation}px)`);
  }

  scrollToChoice(choice$$1, offset = 3) {
    var distaneFromTop, selectedHeight;
    distaneFromTop = choice$$1.el.raw.offsetTop;
    selectedHeight = choice$$1.el.height;
    return this.el.raw.scrollTop = distaneFromTop - selectedHeight * offset;
  }

  scrollDown(choice$$1) {
    return this.el.raw.scrollTop += choice$$1.el.height;
  }

  scrollUp(choice$$1) {
    return this.el.raw.scrollTop -= choice$$1.el.height;
  }

  choiceInView(choice$$1) {
    var choiceRect, downPadding, listRect, upPadding;
    choiceRect = choice$$1.el.rect;
    listRect = this.el.rect;
    upPadding = this.els.scrollIndicatorUp.state('visible') ? parseFloat(this.els.scrollIndicatorUp.styleSafe('height', true)) : void 0;
    downPadding = this.els.scrollIndicatorDown.state('visible') ? parseFloat(this.els.scrollIndicatorDown.styleSafe('height', true)) : void 0;
    return choiceRect.bottom <= listRect.bottom - downPadding && choiceRect.top >= listRect.top + upPadding;
  }

  startScrolling(direction) {
    return this.scrollIntervalID = setInterval(() => {
      return this.el.raw.scrollTop += direction === 'up' ? -20 : 20;
    }, 50);
  }

  stopScrolling() {
    return clearInterval(this.scrollIntervalID);
  }

};
Choice = class Choice {
  constructor(dropdown, settings, list$$1, index) {
    var ref;
    this.dropdown = dropdown;
    this.settings = settings;
    this.list = list$$1;
    this.index = index;
    ({
      label: this.label,
      value: this.value,
      conditions: this.conditions
    } = this.settings);

    if (this.label == null) {
      this.label = this.value;
    }

    if (this.value == null) {
      this.value = this.label;
    }

    this.field = this.dropdown.field;
    this.visible = true;
    this.selected = false;
    this.unavailable = false;
    this.initialized = false;

    if ((ref = this.conditions) != null ? ref.length : void 0) {
      this.unavailable = true;
      this.allFields = this.field.allFields;
      Condition$1.init(this, this.conditions, () => {
        return this.unavailable = !Condition$1.validate(this.conditions);
      });
    }
  }

  init() {
    if (this.initialized) {
      return;
    }

    this.initialized = true;
    this.el = this.dropdown.template.choice.spawn(null, {
      relatedInstance: this.dropdown
    });
    this.el.children[1].text = this.label;
    this.el.appendTo(this.list.el);
    return this._attachBindings();
  }

  remove() {
    if (!this.initialized) {
      return;
    }

    return this.el.remove();
  }

  _attachBindings() {
    return (() => {
      simplybind('visible').of(this).to((visible, prev) => {
        this.dropdown.visibleChoicesCount += visible ? 1 : -1;
        this.el.state('visible', visible);

        if (visible) {
          this.dropdown.visibleChoices.push(this);

          if (IS$1$1.defined(prev)) {
            // indicates state has changed
            return this.dropdown.visibleChoices.sort(function (a$$1, b) {
              return a$$1.index - b.index;
            });
          }
        } else {
          return removeItem$1(this.dropdown.visibleChoices, this);
        }
      });
      simplybind('selected').of(this).to(selected => {
        return this.el.state('selected', selected);
      });
      simplybind('unavailable').of(this).to(unavailable => {
        return this.el.state('unavailable', unavailable);
      }).and.to(unavailable => {
        if (unavailable) {
          return this.toggle(false, true);
        }
      });
      simplybind('event:click').of(this.el).to(() => {
        return this.dropdown.lastSelected = this;
      });
      simplybind('event:mousedown').of(this.el).to(event => {
        event.preventDefault();
        return event.stopPropagation();
      });
      return simplybind('event:mouseenter').of(this.el).to(() => {
        return this.dropdown.currentHighlighted = this;
      });
    })();
  }

  toggle(newValue, unavailable) {
    var newState, prevState, ref, wasSelected;
    prevState = this.selected;
    newState = IS$1$1.defined(newValue) ? newValue : !this.selected;

    if (!newState) {
      if (this.dropdown.settings.multiple && prevState) {
        this.selected = newState;
        return removeItem$1(this.field._value, this);
      } else {
        wasSelected = this.selected;

        if (IS$1$1.defined(newValue)) {
          this.selected = newState;
        }

        if (unavailable && wasSelected) {
          return this.field._value = null;
        }
      }
    } else {
      this.selected = newState;

      if (this.field.settings.multiple) {
        this.field._value.push(this);
      } else {
        if ((ref = this.field._value) != null) {
          ref.toggle(false);
        }

        this.field._value = this;
      }

      return this.field.lastSelected = this;
    }
  }

};
var Dropdown$1 = Dropdown;var textMaskCore = createCommonjsModule(function (module, exports) {
  !function (e, r) {
    module.exports = r();
  }(commonjsGlobal, function () {
    return function (e) {
      function r(n) {
        if (t[n]) return t[n].exports;
        var o = t[n] = {
          exports: {},
          id: n,
          loaded: !1
        };
        return e[n].call(o.exports, o, o.exports, r), o.loaded = !0, o.exports;
      }

      var t = {};
      return r.m = e, r.c = t, r.p = "", r(0);
    }([function (e, r, t) {

      function n(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      });
      var o = t(3);
      Object.defineProperty(r, "conformToMask", {
        enumerable: !0,
        get: function () {
          return n(o).default;
        }
      });
      var i = t(2);
      Object.defineProperty(r, "adjustCaretPosition", {
        enumerable: !0,
        get: function () {
          return n(i).default;
        }
      });
      var a = t(5);
      Object.defineProperty(r, "createTextMaskInputElement", {
        enumerable: !0,
        get: function () {
          return n(a).default;
        }
      });
    }, function (e, r) {

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.placeholderChar = "_";
    }, function (e, r) {

      function t(e) {
        var r = e.previousConformedValue,
            t = void 0 === r ? o : r,
            i = e.previousPlaceholder,
            a = void 0 === i ? o : i,
            u = e.currentCaretPosition,
            l = void 0 === u ? 0 : u,
            s = e.conformedValue,
            f = e.rawValue,
            d = e.placeholderChar,
            c = e.placeholder,
            v = e.indexesOfPipedChars,
            p = void 0 === v ? n : v,
            h = e.caretTrapIndexes,
            g = void 0 === h ? n : h;
        if (0 === l) return 0;
        var m = f.length,
            y = t.length,
            b = c.length,
            C = s.length,
            P = m - y,
            x = P > 0,
            O = 0 === y,
            k = P > 1 && !x && !O;
        if (k) return l;
        var j = x && (t === s || s === c),
            M = 0,
            T = void 0,
            w = void 0;
        if (j) M = l - P;else {
          var _ = s.toLowerCase(),
              V = f.toLowerCase(),
              S = V.substr(0, l).split(o),
              N = S.filter(function (e) {
            return _.indexOf(e) !== -1;
          });

          w = N[N.length - 1];
          var E = a.substr(0, N.length).split(o).filter(function (e) {
            return e !== d;
          }).length,
              A = c.substr(0, N.length).split(o).filter(function (e) {
            return e !== d;
          }).length,
              R = A !== E,
              I = void 0 !== a[N.length - 1] && void 0 !== c[N.length - 2] && a[N.length - 1] !== d && a[N.length - 1] !== c[N.length - 1] && a[N.length - 1] === c[N.length - 2];
          !x && (R || I) && E > 0 && c.indexOf(w) > -1 && void 0 !== f[l] && (T = !0, w = f[l]);

          for (var J = p.map(function (e) {
            return _[e];
          }), q = J.filter(function (e) {
            return e === w;
          }).length, F = N.filter(function (e) {
            return e === w;
          }).length, L = c.substr(0, c.indexOf(d)).split(o).filter(function (e, r) {
            return e === w && f[r] !== e;
          }).length, W = L + F + q + (T ? 1 : 0), z = 0, B = 0; B < C; B++) {
            var D = _[B];
            if (M = B + 1, D === w && z++, z >= W) break;
          }
        }

        if (x) {
          for (var G = M, H = M; H <= b; H++) if (c[H] === d && (G = H), c[H] === d || g.indexOf(H) !== -1 || H === b) return G;
        } else if (T) {
          for (var K = M - 1; K >= 0; K--) if (s[K] === w || g.indexOf(K) !== -1 || 0 === K) return K;
        } else for (var Q = M; Q >= 0; Q--) if (c[Q - 1] === d || g.indexOf(Q) !== -1 || 0 === Q) return Q;
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = t;
      var n = [],
          o = "";
    }, function (e, r, t) {

      function n() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : a,
            r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : a,
            t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
            n = t.guide,
            u = void 0 === n || n,
            l = t.previousConformedValue,
            s = void 0 === l ? a : l,
            f = t.placeholderChar,
            d = void 0 === f ? i.placeholderChar : f,
            c = t.placeholder,
            v = void 0 === c ? (0, o.convertMaskToPlaceholder)(r, d) : c,
            p = t.currentCaretPosition,
            h = t.keepCharPositions,
            g = u === !1 && void 0 !== s,
            m = e.length,
            y = s.length,
            b = v.length,
            C = r.length,
            P = m - y,
            x = P > 0,
            O = p + (x ? -P : 0),
            k = O + Math.abs(P);

        if (h === !0 && !x) {
          for (var j = a, M = O; M < k; M++) v[M] === d && (j += d);

          e = e.slice(0, O) + j + e.slice(O, m);
        }

        for (var T = e.split(a).map(function (e, r) {
          return {
            char: e,
            isNew: r >= O && r < k
          };
        }), w = m - 1; w >= 0; w--) {
          var _ = T[w].char;

          if (_ !== d) {
            var V = w >= O && y === C;
            _ === v[V ? w - P : w] && T.splice(w, 1);
          }
        }

        var S = a,
            N = !1;

        e: for (var E = 0; E < b; E++) {
          var A = v[E];

          if (A === d) {
            if (T.length > 0) for (; T.length > 0;) {
              var R = T.shift(),
                  I = R.char,
                  J = R.isNew;

              if (I === d && g !== !0) {
                S += d;
                continue e;
              }

              if (r[E].test(I)) {
                if (h === !0 && J !== !1 && s !== a && u !== !1 && x) {
                  for (var q = T.length, F = null, L = 0; L < q; L++) {
                    var W = T[L];
                    if (W.char !== d && W.isNew === !1) break;

                    if (W.char === d) {
                      F = L;
                      break;
                    }
                  }

                  null !== F ? (S += I, T.splice(F, 1)) : E--;
                } else S += I;

                continue e;
              }

              N = !0;
            }
            g === !1 && (S += v.substr(E, b));
            break;
          }

          S += A;
        }

        if (g && x === !1) {
          for (var z = null, B = 0; B < S.length; B++) v[B] === d && (z = B);

          S = null !== z ? S.substr(0, z + 1) : a;
        }

        return {
          conformedValue: S,
          meta: {
            someCharsRejected: N
          }
        };
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = n;
      var o = t(4),
          i = t(1),
          a = "";
    }, function (e, r, t) {

      function n() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : l,
            r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : u.placeholderChar;
        if (e.indexOf(r) !== -1) throw new Error("Placeholder character must not be used as part of the mask. Please specify a character that is not present in your mask as your placeholder character.\n\n" + ("The placeholder character that was received is: " + JSON.stringify(r) + "\n\n") + ("The mask that was received is: " + JSON.stringify(e)));
        return e.map(function (e) {
          return e instanceof RegExp ? r : e;
        }).join("");
      }

      function o(e) {
        return "string" == typeof e || e instanceof String;
      }

      function i(e) {
        return "number" == typeof e && void 0 === e.length && !isNaN(e);
      }

      function a(e) {
        for (var r = [], t = void 0; t = e.indexOf(s), t !== -1;) r.push(t), e.splice(t, 1);

        return {
          maskWithoutCaretTraps: e,
          indexes: r
        };
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.convertMaskToPlaceholder = n, r.isString = o, r.isNumber = i, r.processCaretTraps = a;
      var u = t(1),
          l = [],
          s = "[]";
    }, function (e, r, t) {

      function n(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      function o(e) {
        var r = {
          previousConformedValue: void 0,
          previousPlaceholder: void 0
        };
        return {
          state: r,
          update: function (t) {
            var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e,
                o = n.inputElement,
                s = n.mask,
                d = n.guide,
                m = n.pipe,
                b = n.placeholderChar,
                C = void 0 === b ? p.placeholderChar : b,
                P = n.keepCharPositions,
                x = void 0 !== P && P,
                O = n.showMask,
                k = void 0 !== O && O;

            if ("undefined" == typeof t && (t = o.value), t !== r.previousConformedValue) {
              ("undefined" == typeof s ? "undefined" : l(s)) === y && void 0 !== s.pipe && void 0 !== s.mask && (m = s.pipe, s = s.mask);
              var j = void 0,
                  M = void 0;

              if (s instanceof Array && (j = (0, v.convertMaskToPlaceholder)(s, C)), s !== !1) {
                var T = a(t),
                    w = o.selectionEnd,
                    _ = r.previousConformedValue,
                    V = r.previousPlaceholder,
                    S = void 0;

                if (("undefined" == typeof s ? "undefined" : l(s)) === h) {
                  if (M = s(T, {
                    currentCaretPosition: w,
                    previousConformedValue: _,
                    placeholderChar: C
                  }), M === !1) return;
                  var N = (0, v.processCaretTraps)(M),
                      E = N.maskWithoutCaretTraps,
                      A = N.indexes;
                  M = E, S = A, j = (0, v.convertMaskToPlaceholder)(M, C);
                } else M = s;

                var R = {
                  previousConformedValue: _,
                  guide: d,
                  placeholderChar: C,
                  pipe: m,
                  placeholder: j,
                  currentCaretPosition: w,
                  keepCharPositions: x
                },
                    I = (0, c.default)(T, M, R),
                    J = I.conformedValue,
                    q = ("undefined" == typeof m ? "undefined" : l(m)) === h,
                    F = {};
                q && (F = m(J, u({
                  rawValue: T
                }, R)), F === !1 ? F = {
                  value: _,
                  rejected: !0
                } : (0, v.isString)(F) && (F = {
                  value: F
                }));
                var L = q ? F.value : J,
                    W = (0, f.default)({
                  previousConformedValue: _,
                  previousPlaceholder: V,
                  conformedValue: L,
                  placeholder: j,
                  rawValue: T,
                  currentCaretPosition: w,
                  placeholderChar: C,
                  indexesOfPipedChars: F.indexesOfPipedChars,
                  caretTrapIndexes: S
                }),
                    z = L === j && 0 === W,
                    B = k ? j : g,
                    D = z ? B : L;
                r.previousConformedValue = D, r.previousPlaceholder = j, o.value !== D && (o.value = D, i(o, W));
              }
            }
          }
        };
      }

      function i(e, r) {
        document.activeElement === e && (b ? C(function () {
          return e.setSelectionRange(r, r, m);
        }, 0) : e.setSelectionRange(r, r, m));
      }

      function a(e) {
        if ((0, v.isString)(e)) return e;
        if ((0, v.isNumber)(e)) return String(e);
        if (void 0 === e || null === e) return g;
        throw new Error("The 'value' provided to Text Mask needs to be a string or a number. The value received was:\n\n " + JSON.stringify(e));
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      });

      var u = Object.assign || function (e) {
        for (var r = 1; r < arguments.length; r++) {
          var t = arguments[r];

          for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
        }

        return e;
      },
          l = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
        return typeof e;
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
      };

      r.default = o;
      var s = t(2),
          f = n(s),
          d = t(3),
          c = n(d),
          v = t(4),
          p = t(1),
          h = "function",
          g = "",
          m = "none",
          y = "object",
          b = "undefined" != typeof navigator && /Android/i.test(navigator.userAgent),
          C = "undefined" != typeof requestAnimationFrame ? requestAnimationFrame : setTimeout;
    }]);
  });
});
var maskCore = unwrapExports(textMaskCore);
var textMaskCore_1 = textMaskCore.textMaskCore;var textMaskAddons = createCommonjsModule(function (module, exports) {
  !function (e, t) {
    module.exports = t();
  }(commonjsGlobal, function () {
    return function (e) {
      function t(r) {
        if (n[r]) return n[r].exports;
        var o = n[r] = {
          exports: {},
          id: r,
          loaded: !1
        };
        return e[r].call(o.exports, o, o.exports, t), o.loaded = !0, o.exports;
      }

      var n = {};
      return t.m = e, t.c = n, t.p = "", t(0);
    }([function (e, t, n) {

      function r(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      Object.defineProperty(t, "__esModule", {
        value: !0
      });
      var o = n(1);
      Object.defineProperty(t, "createAutoCorrectedDatePipe", {
        enumerable: !0,
        get: function () {
          return r(o).default;
        }
      });
      var i = n(2);
      Object.defineProperty(t, "createNumberMask", {
        enumerable: !0,
        get: function () {
          return r(i).default;
        }
      });
      var u = n(3);
      Object.defineProperty(t, "emailMask", {
        enumerable: !0,
        get: function () {
          return r(u).default;
        }
      });
    }, function (e, t) {

      function n() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "mm dd yyyy";
        return function (t) {
          var n = [],
              r = e.split(/[^dmy]+/),
              o = {
            dd: 31,
            mm: 12,
            yy: 99,
            yyyy: 9999
          },
              i = {
            dd: 1,
            mm: 1,
            yy: 0,
            yyyy: 1
          },
              u = t.split("");
          r.forEach(function (t) {
            var r = e.indexOf(t),
                i = parseInt(o[t].toString().substr(0, 1), 10);
            parseInt(u[r], 10) > i && (u[r + 1] = u[r], u[r] = 0, n.push(r));
          });
          var c = r.some(function (n) {
            var r = e.indexOf(n),
                u = n.length,
                c = t.substr(r, u).replace(/\D/g, ""),
                l = parseInt(c, 10);
            return l > o[n] || c.length === u && l < i[n];
          });
          return !c && {
            value: u.join(""),
            indexesOfPipedChars: n
          };
        };
      }

      Object.defineProperty(t, "__esModule", {
        value: !0
      }), t.default = n;
    }, function (e, t) {

      function n() {
        function e() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : c,
              t = e.length;
          if (e === c || e[0] === h[0] && 1 === t) return h.split(c).concat([v]).concat(m.split(c));
          if (e === S && M) return h.split(c).concat(["0", S, v]).concat(m.split(c));
          var n = e.lastIndexOf(S),
              u = n !== -1,
              l = e[0] === s && I,
              a = void 0,
              g = void 0,
              b = void 0;

          if (e.slice(V * -1) === m && (e = e.slice(0, V * -1)), u && (M || D) ? (a = e.slice(e.slice(0, $) === h ? $ : 0, n), g = e.slice(n + 1, t), g = r(g.replace(f, c))) : a = e.slice(0, $) === h ? e.slice($) : e, N && ("undefined" == typeof N ? "undefined" : i(N)) === p) {
            var O = "." === _ ? "[.]" : "" + _,
                j = (a.match(new RegExp(O, "g")) || []).length;
            a = a.slice(0, N + j * q);
          }

          return a = a.replace(f, c), A || (a = a.replace(/^0+(0$|[^0])/, "$1")), a = x ? o(a, _) : a, b = r(a), (u && M || D === !0) && (e[n - 1] !== S && b.push(y), b.push(S, y), g && (("undefined" == typeof C ? "undefined" : i(C)) === p && (g = g.slice(0, C)), b = b.concat(g)), D === !0 && e[n - 1] === S && b.push(v)), $ > 0 && (b = h.split(c).concat(b)), l && (b.length === $ && b.push(v), b = [d].concat(b)), m.length > 0 && (b = b.concat(m.split(c))), b;
        }

        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            n = t.prefix,
            h = void 0 === n ? u : n,
            g = t.suffix,
            m = void 0 === g ? c : g,
            b = t.includeThousandsSeparator,
            x = void 0 === b || b,
            O = t.thousandsSeparatorSymbol,
            _ = void 0 === O ? l : O,
            j = t.allowDecimal,
            M = void 0 !== j && j,
            P = t.decimalSymbol,
            S = void 0 === P ? a : P,
            w = t.decimalLimit,
            C = void 0 === w ? 2 : w,
            k = t.requireDecimal,
            D = void 0 !== k && k,
            E = t.allowNegative,
            I = void 0 !== E && E,
            R = t.allowLeadingZeroes,
            A = void 0 !== R && R,
            L = t.integerLimit,
            N = void 0 === L ? null : L,
            $ = h && h.length || 0,
            V = m && m.length || 0,
            q = _ && _.length || 0;

        return e.instanceOf = "createNumberMask", e;
      }

      function r(e) {
        return e.split(c).map(function (e) {
          return v.test(e) ? v : e;
        });
      }

      function o(e, t) {
        return e.replace(/\B(?=(\d{3})+(?!\d))/g, t);
      }

      Object.defineProperty(t, "__esModule", {
        value: !0
      });
      var i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
        return typeof e;
      } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
      };
      t.default = n;
      var u = "$",
          c = "",
          l = ",",
          a = ".",
          s = "-",
          d = /-/,
          f = /\D+/g,
          p = "number",
          v = /\d/,
          y = "[]";
    }, function (e, t, n) {

      function r(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      function o(e, t) {
        e = e.replace(O, v);
        var n = t.placeholderChar,
            r = t.currentCaretPosition,
            o = e.indexOf(y),
            s = e.lastIndexOf(p),
            d = s < o ? -1 : s,
            f = i(e, o + 1, y),
            h = i(e, d - 1, p),
            g = u(e, o, n),
            m = c(e, o, d, n),
            b = l(e, d, n, r);
        g = a(g), m = a(m), b = a(b, !0);
        var x = g.concat(f).concat(m).concat(h).concat(b);
        return x;
      }

      function i(e, t, n) {
        var r = [];
        return e[t] === n ? r.push(n) : r.push(h, n), r.push(h), r;
      }

      function u(e, t) {
        return t === -1 ? e : e.slice(0, t);
      }

      function c(e, t, n, r) {
        var o = v;
        return t !== -1 && (o = n === -1 ? e.slice(t + 1, e.length) : e.slice(t + 1, n)), o = o.replace(new RegExp("[\\s" + r + "]", m), v), o === y ? f : o.length < 1 ? g : o[o.length - 1] === p ? o.slice(0, o.length - 1) : o;
      }

      function l(e, t, n, r) {
        var o = v;
        return t !== -1 && (o = e.slice(t + 1, e.length)), o = o.replace(new RegExp("[\\s" + n + ".]", m), v), 0 === o.length ? e[t - 1] === p && r !== e.length ? f : v : o;
      }

      function a(e, t) {
        return e.split(v).map(function (e) {
          return e === g ? e : t ? x : b;
        });
      }

      Object.defineProperty(t, "__esModule", {
        value: !0
      });
      var s = n(4),
          d = r(s),
          f = "*",
          p = ".",
          v = "",
          y = "@",
          h = "[]",
          g = " ",
          m = "g",
          b = /[^\s]/,
          x = /[^.\s]/,
          O = /\s/g;
      t.default = {
        mask: o,
        pipe: d.default
      };
    }, function (e, t) {

      function n(e, t) {
        var n = t.currentCaretPosition,
            i = t.rawValue,
            f = t.previousConformedValue,
            p = t.placeholderChar,
            v = e;
        v = r(v);
        var y = v.indexOf(c),
            h = null === i.match(new RegExp("[^@\\s." + p + "]"));
        if (h) return u;
        if (v.indexOf(a) !== -1 || y !== -1 && n !== y + 1 || i.indexOf(o) === -1 && f !== u && i.indexOf(l) !== -1) return !1;
        var g = v.indexOf(o),
            m = v.slice(g + 1, v.length);
        return (m.match(d) || s).length > 1 && v.substr(-1) === l && n !== i.length && (v = v.slice(0, v.length - 1)), v;
      }

      function r(e) {
        var t = 0;
        return e.replace(i, function () {
          return t++, 1 === t ? o : u;
        });
      }

      Object.defineProperty(t, "__esModule", {
        value: !0
      }), t.default = n;
      var o = "@",
          i = /@/g,
          u = "",
          c = "@.",
          l = ".",
          a = "..",
          s = [],
          d = /\./g;
    }]);
  });
});
var maskAddons = unwrapExports(textMaskAddons);
var textMaskAddons_1 = textMaskAddons.textMaskAddons;var Mask, defaultPatternChars;
defaultPatternChars = {
  '1': REGEX.numeric,
  '#': REGEX.widenumeric,
  'a': REGEX.letter,
  '*': REGEX.any
};
Mask = class Mask {
  constructor(field, config) {
    this.field = field;
    this.config = config;
    this.value = '';
    this.prevValue = '';
    this.cursor = 0;
    this.prevCursor = 0;
    this.pattern = this.patternRaw = this.config.pattern;
    this.patternSetter = this.config.setter;
    this.placeholderChar = this.config.placeholder;
    this.placeholderRegex = new RegExp('\\' + (this.placeholderChar || '_'), 'g');
    this.guide = this.config.guide;
    this.keepCharPositions = this.config.keepCharPositions;
    this.chars = primaryBuilder$1.clone(defaultPatternChars, this.config.customPatterns);
    this.setPattern(this.pattern);
  }

  getState(pattern, rawValue) {
    return {
      rawValue,
      guide: this.guide,
      placeholderChar: this.placeholderChar,
      keepCharPositions: this.keepCharPositions,
      currentCaretPosition: this.field.el ? this.field.selection().end : this.cursor,
      previousConformedValue: this.prevValue,
      placeholder: this.getPlaceholder(pattern)
    };
  }

  getPlaceholder(pattern) {
    var char, j, len, placeholder;
    if (IS$1$1.function(pattern)) ;else {
      placeholder = '';

      for (j = 0, len = pattern.length; j < len; j++) {
        char = pattern[j];

        if (IS$1$1.regex(char)) {
          placeholder += this.placeholderChar;
        } else {
          placeholder += char;
        }
      }

      return placeholder;
    }
  }

  resolvePattern(pattern, input, state) {
    var char, copy, i, j, len, offset, trapIndexes;
    pattern = typeof pattern === 'function' ? pattern(input, this.getState(pattern, input)) : pattern;
    offset = 0;
    trapIndexes = [];
    copy = pattern.slice();

    for (i = j = 0, len = copy.length; j < len; i = ++j) {
      char = copy[i];

      if (!(char === '[]')) {
        continue;
      }

      trapIndexes.push(i - offset);
      pattern.splice(i - offset, 1);
      offset++;
    }

    this.prevPattern = this.resolvedPattern;
    this.resolvedPattern = pattern;
    return {
      pattern,
      caretTrapIndexes: trapIndexes
    };
  }

  setPattern(string, updateValue = true, updateField) {
    this.patternRaw = string;
    this.pattern = this.parsePattern(string);
    this.transform = this.parseTransform(string);

    if (updateValue) {
      this.value = this.setValue(this.value);

      if (updateField) {
        return this.field.value = this.value;
      }
    }
  }

  parsePattern(string) {
    var char, escaped, i, j, len, pattern;

    switch (false) {
      case string !== 'EMAIL':
        return maskAddons.emailMask.mask;

      case string !== 'PHONE':
        this.patternSetter = function (value) {
          return repeat('#', Math.max(7, value.length));
        };

        this.guide = false;
        return '#';

      case string !== 'NAME':
        this.patternSetter = function (value) {
          value = value.replace(this.placeholderRegex, '').trim();
          return repeat('a', Math.max(2, value.length));
        };

        return 'a';

      case string !== 'FULLNAME':
        this.patternSetter = function (value) {
          var split;

          if (value[value.length - 1] === ' ') {
            value += 'x';
          }

          split = value.replace(this.placeholderRegex, '').trim().split(/\s+/);

          if (split.length === 4) {
            return;
          }

          return split.map(function (part) {
            return repeat('a', Math.max(2, part.length));
          }).join(' ');
        };

        return 'a';

      case string !== 'DATE':
        return [/\d/, /\d/, '/', /\d/, /\d/, '/', /\d/, /\d/, /\d/, /\d/];

      case !(string[0] === 'DATE' && IS$1$1.string(string[1])):
        return string[1].split('').map(char => {
          if (REGEX.letter.test(char)) {
            return /\d/;
          } else {
            return char;
          }
        });

      case string !== 'NUMBER':
        return maskAddons.createNumberMask({
          prefix: this.config.prefix || '',
          suffix: this.config.suffix || '',
          includeThousandsSeparator: this.config.sep ? true : false,
          thousandsSeparatorSymbol: IS$1$1.string(this.config.sep) ? this.config.sep : void 0,
          allowDecimal: this.config.decimal,
          decimalLimit: IS$1$1.number(this.config.decimal) ? this.config.decimal : void 0,
          integerLimit: IS$1$1.number(this.config.limit) ? this.config.limit : void 0
        });

      case !IS$1$1.array(string):
        return string;

      default:
        pattern = [];

        for (i = j = 0, len = string.length; j < len; i = ++j) {
          char = string[i];

          if (char === '\\') {
            escaped = true;
            continue;
          }

          pattern.push(escaped ? char : this.chars[char] || char);
          escaped = false;
        }

        return pattern;
    }
  }

  parseTransform(string) {
    switch (false) {
      case string !== 'EMAIL':
        return maskAddons.emailMask.pipe;

      case string !== 'DATE':
        return maskAddons.createAutoCorrectedDatePipe('mm/dd/yyyy');

      case !(string[0] === 'DATE' && IS$1$1.string(string[1])):
        return maskAddons.createAutoCorrectedDatePipe(string[1]);

      case !this.config.transform:
        return this.config.transform;
    }
  }

  setValue(input) {
    var caretTrapIndexes, conformedValue, indexesOfPipedChars, newPattern, pattern, state, transformed;

    if (this.patternSetter) {
      newPattern = this.patternSetter(input) || this.pattern;

      if (newPattern !== this.patternRaw && newPattern !== this.pattern) {
        this.setPattern(newPattern, false);
      }
    }

    ({
      caretTrapIndexes,
      pattern
    } = this.resolvePattern(this.pattern, input));

    if (pattern === false) {
      return this.value;
    }

    this.prevValue = this.value;
    this.prevCursor = this.cursor;
    state = this.getState(pattern, input);
    ({
      conformedValue
    } = maskCore.conformToMask(input, pattern, state));

    if (this.transform) {
      transformed = this.transform(conformedValue, state);
    }

    if (transformed === false) {
      return this.value;
    }

    if (IS$1$1.string(transformed)) {
      conformedValue = transformed;
    } else if (IS$1$1.object(transformed)) {
      indexesOfPipedChars = transformed.indexesOfPipedChars;
      conformedValue = transformed.value;
    }

    this.cursor = maskCore.adjustCaretPosition(primaryBuilder$1(state, {
      indexesOfPipedChars,
      caretTrapIndexes,
      conformedValue
    }));
    return this.value = conformedValue;
  }

  validate(input) {
    var char, i, j, len, pattern;

    if (input !== this.value && this.patternSetter) {
      pattern = this.patternSetter(input) || this.pattern;
    } else {
      pattern = this.resolvedPattern;

      if (!pattern) {
        ({
          pattern
        } = this.resolvePattern(this.pattern, input));
      }
    }

    if (pattern === false) {
      return true;
    }

    for (i = j = 0, len = pattern.length; j < len; i = ++j) {
      char = pattern[i];

      switch (false) {
        case !!input[i]:
          return false;

        case !(IS$1$1.regex(char) && !char.test(input[i])):
          return false;

        case !(IS$1$1.string(char) && input[i] !== char):
          return false;
      }
    }

    return true;
  }

  isEmpty() {
    var char, i, input, j, len, pattern;
    input = this.value;
    pattern = this.resolvedPattern;

    if (!pattern) {
      if (this.patternSetter) {
        pattern = this.patternSetter(input);
      }

      ({
        pattern
      } = this.resolvePattern(pattern || this.pattern, input));
    }

    if (input === this.config.prefix || input === this.config.suffix) {
      return true;
    }

    for (i = j = 0, len = pattern.length; j < len; i = ++j) {
      char = pattern[i];

      switch (false) {
        case !!input[i]:
          return true;

        case !IS$1$1.regex(char):
          return !char.test(input[i]);
      }
    }

    return false;
  }

};
var Mask$1 = Mask;var COLORS$1 = {
  red: '#cc4820',
  green: '#72c322',
  orange: '#ff9c00',
  black: '#181818',
  grey_dark: '#5e5e5e',
  grey: '#909090',
  grey_semi_light: '#bebebe',
  grey_light: '#d3d3d3',
  grey_light2: '#dddddd',
  grey_light3: '#f2f5f7',
  grey_light4: '#e5e5e5'
};var textFieldTemplate = quickdom.template(['div', {
  ref: 'field',
  style: {
    position: 'relative',
    verticalAlign: 'top',
    display: 'none',
    boxSizing: 'border-box',
    fontFamily: function (field) {
      return field.settings.fontFamily;
    },
    textAlign: 'left',
    $visible: {
      display: 'inline-block'
    },
    $showError: {
      animation: '0.2s fieldErrorShake'
    }
  }
}, ['div', {
  ref: 'label',
  styleAfterInsert: true,
  style: {
    position: 'absolute',
    zIndex: 1,
    top: function (field) {
      return this.styleParsed('fontSize', true) * 0.7;
    },
    left: function (field) {
      var ref;
      return shorthandSideValue(field.settings.padding, 'left') + (((ref = field.el.child.icon) != null ? ref.width : void 0) || 0);
    },
    padding: function (field) {
      return `0 ${field.settings.inputPadding}px`;
    },
    fontFamily: 'inherit',
    fontSize: function (field) {
      return field.settings.labelSize || field.settings.fontSize * (11 / 14);
    },
    fontWeight: 600,
    lineHeight: 1,
    color: COLORS$1.grey,
    opacity: 0,
    transition: 'opacity 0.2s, color 0.2s',
    whiteSpace: 'nowrap',
    userSelect: 'none',
    cursor: 'default',
    pointerEvents: 'none',
    $filled: {
      $showLabel: {
        opacity: 1
      }
    },
    $focus: {
      color: COLORS$1.orange
    },
    $showError: {
      color: COLORS$1.red
    }
  }
}], ['div', {
  ref: 'innerwrap',
  style: {
    position: 'relative',
    height: function (field) {
      return field.settings.height;
    },
    backgroundColor: 'white',
    borderWidth: function (field) {
      return field.settings.border;
    },
    borderStyle: 'solid',
    borderColor: COLORS$1.grey_light,
    borderRadius: '2px',
    boxSizing: 'border-box',
    fontFamily: 'inherit',
    transition: 'border-color 0.2s',
    $focus: {
      borderColor: COLORS$1.orange
    },
    $showError: {
      borderColor: COLORS$1.red
    },
    $disabled: {
      borderColor: COLORS$1.grey_light,
      backgroundColor: COLORS$1.grey_light
    }
  }
}, ['input', {
  ref: 'input',
  type: 'text',
  styleAfterInsert: true,
  style: {
    position: 'relative',
    zIndex: 3,
    display: 'inline-block',
    verticalAlign: 'top',
    height: function () {
      return this.parent.styleSafe('height', 1) || this.parent.styleSafe('height');
    },
    width: function (field) {
      var iconSibling, inputSibling, padding, paddingLeft, paddingRight, subtract, width;

      if (!field.settings.autoWidth) {
        subtract = 0;

        if (iconSibling = field.el.child.icon) {
          subtract += iconSibling.width;
        }

        if (inputSibling = field.el.child[field.settings.inputSibling]) {
          width = inputSibling.styleParsed('width', 1) || 0;
          padding = inputSibling.styleParsed('padding', 1) || 0;
          paddingLeft = inputSibling.styleParsed('paddingLeft', 1) || padding || 0;
          paddingRight = inputSibling.styleParsed('paddingRight', 1) || padding || 0;
          subtract += width + paddingLeft + paddingRight;
        }

        return `calc(100% - ${subtract}px)`;
      }
    },
    padding: function (field) {
      if (this.padding == null) {
        this.padding = Math.max(0, calcPadding(field.settings.height, 14) - 3);
      }

      return `${this.padding}px ${field.settings.inputPadding}px`;
    },
    margin: '0',
    backgroundColor: 'transparent',
    appearance: 'none',
    border: 'none',
    outline: 'none',
    fontFamily: 'inherit',
    fontSize: function (field) {
      return field.settings.fontSize;
    },
    color: COLORS$1.black,
    boxSizing: 'border-box',
    boxShadow: 'none',
    whiteSpace: 'nowrap',
    backgroundClip: 'content-box',
    // semi-fix for yellow autofill background
    transform: 'translateY(0)',
    transition: 'transform 0.2s, -webkit-transform 0.2s',
    $disabled: {
      cursor: 'not-allowed'
    },
    $filled: {
      $showLabel: {
        transform: function (field) {
          var label, totalHeight, translation, workableHeight;

          if (this.translation != null || !(label = field.el.child.label) || label.styleSafe('position', 1) !== 'absolute') {
            return this.translation;
          }

          totalHeight = this.parent.styleParsed('height', 1);
          workableHeight = totalHeight - (label.styleParsed('fontSize', 1) + label.styleParsed('top', 1) * 2);
          translation = Math.max(0, Math.floor((totalHeight - workableHeight) / 4));
          return `translateY(${translation}px)`;
        }
      }
    }
  }
}], ['div', {
  ref: 'placeholder',
  styleAfterInsert: true,
  style: {
    position: 'absolute',
    zIndex: 2,
    top: '0px',
    left: function (field) {
      var ref;
      return ((ref = field.el.child.icon) != null ? ref.width : void 0) || 0;
    },
    fontFamily: function (field) {
      return field.el.child.input.styleSafe('fontFamily', 1);
    },
    fontSize: function (field) {
      return field.el.child.input.styleSafe('fontSize', 1);
    },
    padding: function (field) {
      var horiz, verti;
      verti = field.el.child.input.styleParsed('paddingTop', 1) || field.el.child.input.styleParsed('paddingTop');
      horiz = field.el.child.input.styleParsed('paddingLeft', 1) || field.el.child.input.styleParsed('paddingLeft');
      return `${verti + 3}px ${horiz}px`;
    },
    color: COLORS$1.black,
    opacity: 0.5,
    pointerEvents: 'none',
    userSelect: 'none',
    whiteSpace: 'nowrap',
    transform: 'translateY(0)',
    transition: 'transform 0.2s, -webkit-transform 0.2s',
    $filled: {
      visibility: 'hidden',
      $showLabel: {
        transform: function (field) {
          return field.el.child.input.raw.style.transform;
        }
      }
    }
  }
}]], ['div', {
  ref: 'help',
  styleAfterInsert: true,
  style: {
    position: 'absolute',
    top: '110%',
    left: function (field) {
      return shorthandSideValue(field.settings.padding, 'left');
    },
    fontFamily: 'inherit',
    fontSize: '11px',
    color: COLORS$1.grey,
    display: 'none',
    $showError: {
      color: COLORS$1.red
    },
    $showHelp: {
      display: 'block'
    }
  }
}]]);
var icon = quickdom.template(['div', {
  ref: 'icon',
  styleAfterInsert: true,
  style: {
    position: 'relative',
    zIndex: 2,
    display: 'inline-block',
    boxSizing: 'border-box',
    width: function (field) {
      return field.settings.iconSize;
    },
    height: function (field) {
      return field.settings.iconSize;
    },
    fontSize: function (field) {
      return field.settings.iconSize;
    },
    paddingLeft: function (field) {
      return field.settings.inputPadding;
    },
    paddingTop: function (field) {
      return this.parent.styleParsed('height', 1) / 2 - field.settings.iconSize / 2;
    },
    lineHeight: '1em',
    userSelect: 'none'
  },
  methods: {
    width: {
      get: function () {
        if (this._inserted) {
          return this.raw.offsetWidth;
        } else {
          return this.styleParsed('width', 1) || this.related.settings.iconSize;
        }
      }
    }
  }
}]); // @styleParsed('width',1) or @raw.offsetWidth or @related.settings.iconSize or 0

var checkmark$1 = quickdom.template(['div', {
  ref: 'checkmark',
  styleAfterInsert: true,
  style: {
    position: 'relative',
    zIndex: 4,
    display: 'none',
    width: 26,
    height: '100%',
    paddingTop: function () {
      return this.parent.styleParsed('height', 1) / 2 - 13;
    },
    paddingRight: function (field) {
      return field.settings.inputPadding;
    },
    verticalAlign: 'top',
    $filled: {
      display: 'inline-block'
    }
  }
}, ['div', {
  ref: 'checkmark_innerwrap',
  style: {
    width: '20px',
    height: '20px',
    borderRadius: '50%',
    borderWidth: '3px',
    borderStyle: 'solid',
    borderColor: COLORS$1.green,
    transform: 'scale(0.8)',
    // transformOrigin: '100% 0'
    $showError: {
      borderColor: COLORS$1.red
    }
  }
}, ['div', {
  ref: 'checkmark_mask1',
  styleAfterInsert: true,
  style: {
    position: 'absolute',
    top: '-4px',
    left: '-10px',
    width: '15px',
    height: '30px',
    borderRadius: '30px 0 0 30px',
    backgroundColor: function (field) {
      return defaultColor(field.els.innerwrap.styleSafe('backgroundColor', 1), 'white');
    },
    transform: 'rotate(-45deg)',
    transformOrigin: '15px 15px 0'
  }
}], ['div', {
  ref: 'checkmark_mask2',
  styleAfterInsert: true,
  style: {
    position: 'absolute',
    top: '-5px',
    left: '8px',
    width: '15px',
    height: '30px',
    borderRadius: '0 30px 30px 0',
    backgroundColor: function (field) {
      return defaultColor(field.els.innerwrap.styleSafe('backgroundColor', 1), 'white');
    },
    transform: 'rotate(-45deg)',
    transformOrigin: '0 15px 0',
    $filled: {
      animation: '4.25s ease-in checkmarkRotatePlaceholder',
      $invalid: {
        animation: ''
      }
    }
  }
}], ['div', {
  ref: 'checkmark_lineWrapper',
  style: {
    $filled: {
      $invalid: {
        position: 'relative',
        zIndex: 2,
        animation: '0.55s checkmarkAnimateError',
        transformOrigin: '50% 10px'
      }
    }
  }
}, ['div', {
  ref: 'checkmark_lineShort',
  style: {
    position: 'absolute',
    zIndex: 2,
    top: '10px',
    left: '3px',
    display: 'block',
    width: '8px',
    height: '3px',
    borderRadius: '2px',
    backgroundColor: COLORS$1.green,
    transform: 'rotate(45deg)',
    $filled: {
      animation: '0.75s checkmarkAnimateSuccessTip'
    },
    $invalid: {
      backgroundColor: COLORS$1.red,
      left: '4px',
      top: '8px',
      width: '12px',
      $filled: {
        animation: ''
      }
    }
  }
}], ['div', {
  ref: 'checkmark_lineLong',
  style: {
    position: 'absolute',
    zIndex: 2,
    top: '8px',
    right: '2px',
    display: 'block',
    width: '12px',
    height: '3px',
    borderRadius: '2px',
    backgroundColor: COLORS$1.green,
    transform: 'rotate(-45deg)',
    $filled: {
      animation: '0.75s checkmarkAnimateSuccessLong'
    },
    $invalid: {
      backgroundColor: COLORS$1.red,
      top: '8px',
      left: '4px',
      right: 'auto',
      $filled: {
        animation: ''
      }
    }
  }
}]], ['div', {
  ref: 'checkmark_placeholder',
  style: {
    position: 'absolute',
    zIndex: 2,
    top: '-4px',
    left: '-3px',
    width: '20px',
    height: '20px',
    borderRadius: '50%',
    borderWidth: '3px',
    borderStyle: 'solid',
    borderColor: hexToRGBA(COLORS$1.green, 0.4),
    $invalid: {
      borderColor: hexToRGBA(COLORS$1.red, 0.4)
    }
  }
}], ['div', {
  ref: 'checkmark_patch',
  styleAfterInsert: true,
  style: {
    position: 'absolute',
    zIndex: 1,
    top: '-2px',
    left: '6px',
    width: '4px',
    height: '28px',
    backgroundColor: function (field) {
      return defaultColor(field.els.innerwrap.styleSafe('backgroundColor', 1), 'white');
    },
    transform: 'rotate(-45deg)'
  }
}]]]);
var templates =
/*#__PURE__*/
Object.freeze({
  default: textFieldTemplate,
  icon: icon,
  checkmark: checkmark$1
});var defaults$1 = {
  placeholder: true,
  validWhenIsChoice: false,
  validWhenRegex: false,
  autoWidth: false,
  maxWidth: '100%',
  minWidth: 2,
  height: 46,
  checkmark: true,
  keyboard: 'text',
  dropdown: {
    lockScroll: false
  },
  choices: null,
  minLength: null,
  maxLength: null,
  inputSibling: 'checkmark',
  mask: {
    pattern: false,
    placeholder: '_',
    guide: true,
    customPatterns: false
  }
};var TextField;

TextField = function () {
  class TextField extends Field$1 {
    constructor() {
      super(...arguments);

      if (this._value == null) {
        this._value = '';
      }

      this.state.typing = false;
      this.cursor = {
        prev: 0,
        current: 0
      };

      if (!this.settings.validWhenRegex) {
        if (this.settings.keyboard === 'email' && this.settings.required) {
          this.settings.validWhenRegex = REGEX.email;
        } else if (this.settings.mask === 'NAME' || this.settings.mask.pattern === 'NAME') {
          this.settings.validWhenRegex = /^[a-zA-Z]{2}/;
        } else if (this.settings.mask === 'FULLNAME' || this.settings.mask.pattern === 'FULLNAME') {
          this.settings.validWhenRegex = /^[a-zA-Z]+\s+[a-zA-Z]+/;
        }
      }

      if (!this.settings.mask.pattern) {
        if (IS$1$1.string(this.settings.mask)) {
          this.settings.mask = primaryBuilder$1.deep.clone(this.defaults.mask, {
            pattern: this.settings.mask
          });
        } else if (IS$1$1.object(this.settings.mask)) {
          this.settings.mask.pattern = function () {
            switch (this.settings.keyboard) {
              case 'date':
                return 'DATE';

              case 'number':
                return 'NUMBER';

              case 'phone':
              case 'tel':
                return 'PHONE';

              case 'email':
                return 'EMAIL';
            }
          }.call(this);
        }
      }

      if (this.settings.mask.pattern) {
        this.mask = new Mask$1(this, this.settings.mask);
      }

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      if (this.dropdown && this.selected && this._value === this.selected.label) {
        return this.selected.value;
      } else {
        return this._value;
      }
    }

    _setValue(newValue) {
      if (IS$1$1.string(newValue) || IS$1$1.number(newValue)) {
        newValue = String(newValue);
        return this._value = this.mask ? this.mask.setValue(newValue) : newValue;
      }
    }

    _recalcDisplay() {
      if (this.settings.autoWidth) {
        return this._value = this._value;
      }
    }

    _createElements() {
      var globalOpts;
      globalOpts = {
        relatedInstance: this
      };
      this.el = this.template.spawn(this.settings.templates.default, globalOpts);

      if (this.settings.choices) {
        this.dropdown = new Dropdown$1(this.settings.choices, this);
        this.dropdown.appendTo(this.el.child.innerwrap);
      }

      if (this.settings.icon) {
        this.templates.icon.spawn(this.settings.templates.icon, globalOpts).append(this.settings.icon).insertBefore(this.el.child.input);
      }

      if (this.settings.checkmark) {
        this.templates.checkmark.spawn(this.settings.templates.checkmark, globalOpts).insertAfter(this.el.child.input);
      }

      this.el.child.input.prop('type', function () {
        switch (this.settings.keyboard) {
          case 'number':
          case 'tel':
          case 'phone':
            return 'tel';

          case 'password':
            return 'password';

          case 'url':
            return 'url';

          default:
            // when 'email' then 'email'
            return 'text';
        }
      }.call(this));
      this.el.state('hasLabel', this.settings.label);
      this.el.child.innerwrap.raw._quickField = this.el.child.input.raw._quickField = this;
      return this.el.childf;
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_display();

      this._attachBindings_display_autoWidth();

      this._attachBindings_value();

      this._attachBindings_autocomplete();

      this._attachBindings_stateTriggers();
    }

    _attachBindings_elState() {
      simplybind('visible').of(this.state).to(visible => {
        return this.el.state('visible', visible);
      });
      simplybind('hovered').of(this.state).to(hovered => {
        return this.el.state('hover', hovered);
      });
      simplybind('focused').of(this.state).to(focused => {
        return this.el.state('focus', focused);
      });
      simplybind('filled').of(this.state).to(filled => {
        return this.el.state('filled', filled);
      });
      simplybind('disabled').of(this.state).to(disabled => {
        return this.el.state('disabled', disabled);
      });
      simplybind('showLabel').of(this.state).to(showLabel => {
        return this.el.state('showLabel', showLabel);
      });
      simplybind('showError').of(this.state).to(showError => {
        return this.el.state('showError', showError);
      });
      simplybind('showHelp').of(this.state).to(showHelp => {
        return this.el.state('showHelp', showHelp);
      });
      simplybind('valid').of(this.state).to(valid => {
        this.el.state('valid', valid);
        return this.el.state('invalid', !valid);
      });
    }

    _attachBindings_display() {
      simplybind('placeholder').of(this.state).to('text').of(this.el.child.placeholder).transform(placeholder => {
        switch (false) {
          case !(placeholder === true && this.settings.label):
            return this.settings.label;

          case !IS$1$1.string(placeholder):
            return placeholder;

          default:
            return '';
        }
      });
      simplybind('disabled', {
        updateOnBind: this.state.disabled
      }).of(this.state).to((disabled, prev) => {
        if (this.settings.checkmark) {
          if (disabled || !disabled && prev != null) {
            return setTimeout(() => {
              this.el.child.checkmark_mask1.recalcStyle();
              this.el.child.checkmark_mask2.recalcStyle();
              return this.el.child.checkmark_patch.recalcStyle();
            });
          }
        }
      });
    } // @el.child.checkmark.recalcStyle(true)


    _attachBindings_display_autoWidth() {
      simplybind('width', {
        updateEvenIfSame: true
      }).of(this.state).to(width => {
        return (this.settings.autoWidth ? this.el.child.input : this.el).style('width', width);
      }).transform(this._formatWidth.bind(this)).updateOn('isMobile').of(this.state);

      if (this.settings.autoWidth) {
        simplybind('_value', {
          updateEvenIfSame: true,
          updateOnBind: false
        }).of(this).to('width').of(this.state).transform(() => {
          return `${this._getInputAutoWidth()}px`;
        }).updateOn('event:inserted').of(this.el).updateOn('visible').of(this.state);
      }
    }

    _attachBindings_value() {
      var input, resetInput;
      input = this.el.child.input.raw;

      resetInput = () => {
        var filled;
        filled = !this.mask.isEmpty();

        if (!filled) {
          this.selection(this.mask.cursor = 0);
          this._value = '';
          this.state.filled = false;
        }

        return filled;
      };

      simplybind('event:input').of(input).to(() => {
        this.value = input.value;

        if (this.mask) {
          this.selection(this.mask.cursor);
        }

        return this.emit('input', this.value);
      });
      simplybind('_value', {
        updateEvenIfSame: !!this.mask
      }).of(this).to('value').of(input).and.to(value => {
        var filled;
        filled = !!value;

        if (filled && this.mask && this.mask.guide && (!this.state.focused || this.mask.cursor === 0)) {
          filled = resetInput();
        }

        this.state.filled = filled;

        if (filled) {
          this.state.interacted = true;
        }

        this.state.valid = this.validate(void 0, true);

        if (!this.state.focused) {
          return this.emit('input', this.value);
        }
      });
      simplybind('event:keydown').of(this.el.child.input).to(event => {
        if (event.keyCode === KEYCODES.enter) {
          this.emit('submit');
        }

        return this.emit(`key-${event.keyCode}`);
      });

      if (this.mask && this.mask.guide) {
        simplybind('event:blur').of(this.el.child.input).to(resetInput);
      }
    }

    _attachBindings_autocomplete() {
      if (this.dropdown) {
        simplybind.defaultOptions.updateOnBind = false;
        simplybind('typing', {
          updateEvenIfSame: true
        }).of(this.state).to(isTyping => {
          if (isTyping) {
            if (!this._value) {
              return;
            }

            if (this.dropdown.isOpen) {
              return this.dropdown.list.calcDisplay();
            } else {
              this.dropdown.isOpen = true;
              return simplybind('event:click').of(document).once.to(() => {
                return this.dropdown.isOpen = false;
              }).condition(event => {
                return !quickdom(event.target).parentMatching(parent => {
                  return parent === this.el.child.innerwrap;
                });
              });
            }
          } else {
            return this.dropdown.isOpen = false;
          }
        });
        simplybind('_value').of(this).to(value => {
          var choice, i, len, ref, shouldBeVisible;
          ref = this.dropdown.choices;

          for (i = 0, len = ref.length; i < len; i++) {
            choice = ref[i];
            shouldBeVisible = !value ? true : fuzzyMatch(value, choice.label);

            if (choice.visible !== shouldBeVisible) {
              choice.visible = shouldBeVisible;
            }
          }

          if (this.dropdown.isOpen && !value) {
            this.dropdown.isOpen = false;
          }
        });
        this.dropdown.onSelected(selectedChoice => {
          this.selected = selectedChoice;
          this.value = selectedChoice.label;
          this.dropdown.isOpen = false;
          return this.selection(this.el.child.input.raw.value.length);
        });
        simplybind.defaultOptions.updateOnBind = true;
      }
    }

    _attachBindings_stateTriggers() {
      simplybind('event:mouseenter').of(this.el.child.input).to(() => {
        return this.state.hovered = true;
      });
      simplybind('event:mouseleave').of(this.el.child.input).to(() => {
        return this.state.hovered = false;
      });
      simplybind('event:focus').of(this.el.child.input).to(() => {
        this.state.focused = true;

        if (this.state.disabled) {
          return this.blur();
        }
      });
      simplybind('event:blur').of(this.el.child.input).to(() => {
        return this.state.typing = this.state.focused = false;
      });
      simplybind('event:input').of(this.el.child.input).to(() => {
        return this.state.typing = true;
      });
      simplybind('event:keydown').of(this.el.child.input).to(() => {
        return this.cursor.prev = this.selection().end;
      });
    }

    _scheduleCursorReset() {
      var currentCursor, diffIndex, newCursor;
      diffIndex = getIndexOfFirstDiff(this.mask.value, this.mask.prev.value);
      currentCursor = this.cursor.current;
      newCursor = this.mask.normalizeCursorPos(currentCursor, this.cursor.prev);

      if (newCursor !== currentCursor) {
        this.selection(newCursor);
      }
    }

    _setValueIfNotSet() {
      if (this.el.child.input.raw.value !== this._value) {
        this.el.child.input.raw.value = this._value;
      }
    }

    _getInputAutoWidth() {
      var inputWidth, labelWidth;

      if (this._value) {
        this._setValueIfNotSet();

        this.el.child.input.style('width', 0);
        this.el.child.input.raw.scrollLeft = 1e+10;
        inputWidth = Math.max(this.el.child.input.raw.scrollLeft + this.el.child.input.raw.offsetWidth, this.el.child.input.raw.scrollWidth) + 2;
        labelWidth = this.settings.label && this.el.child.label.styleSafe('position') === 'absolute' ? this.el.child.label.rect.width : 0;
      } else {
        inputWidth = this.el.child.placeholder.rect.width;
        labelWidth = 0;
      }

      return Math.min(this._getWidthSetting('max'), Math.max(this._getWidthSetting('min'), inputWidth, labelWidth));
    }

    _getWidthSetting(target) {
      var parent, parentWidth, result;

      if (target === 'min' || target === 'max') {
        target += 'Width';
      }

      if (typeof this.settings[target] === 'number') {
        result = this.settings[target];
      } else if (typeof this.settings[target] === 'string') {
        result = parseFloat(this.settings[target]);

        if (includes$2(this.settings[target], '%')) {
          if ((parent = this.el.parent) && parent.style('display') === 'block') {
            parentWidth = parent.styleParsed('width') - parent.styleParsed('paddingLeft') - parent.styleParsed('paddingRight') - 2;
            result = parentWidth * (result / 100);
          } else {
            result = 0;
          }
        }
      }

      return result || (target === 'minWidth' ? 0 : 2e308);
    }

    _validate(providedValue) {
      var matchingChoice, ref;

      if (this.settings.validWhenRegex && IS$1$1.regex(this.settings.validWhenRegex)) {
        if (!this.settings.validWhenRegex.test(providedValue)) {
          return false;
        }
      }

      if (this.settings.validWhenIsChoice && ((ref = this.settings.choices) != null ? ref.length : void 0)) {
        matchingChoice = this.settings.choices.filter(function (choice) {
          return choice.value === providedValue;
        });

        if (!matchingChoice.length) {
          return false;
        }
      }

      if (this.settings.minLength) {
        if (providedValue.length < this.settings.minLength) {
          return false;
        }
      }

      if (this.settings.maxLength) {
        if (providedValue.length >= this.settings.maxLength) {
          return false;
        }
      }

      if (this.mask) {
        if (!this.mask.validate(providedValue)) {
          return false;
        }
      }

      return true;
    }

    selection(arg) {
      var end, start;

      if (IS$1$1.object(arg)) {
        start = arg.start;
        end = arg.end;
      } else {
        start = arg;
        end = arguments[1];
      }

      if (start != null) {
        if (!end || end < start) {
          end = start;
        }

        this.el.child.input.raw.setSelectionRange(start, end);
      } else {
        return {
          'start': this.el.child.input.raw.selectionStart,
          'end': this.el.child.input.raw.selectionEnd
        };
      }
    }

    focus() {
      return this.el.child.input.raw.focus();
    }

    blur() {
      return this.el.child.input.raw.blur();
    }

  }

  TextField.prototype.template = textFieldTemplate;
  TextField.prototype.templates = templates;
  TextField.prototype.defaults = defaults$1;
  return TextField;
}.call(undefined);

var TextField$1 = TextField;var version$3 = "1.0.97";
var createBuilder, quickfield$1;

createBuilder = function (settingOverrides, templateOverrides) {
  var builder;

  builder = function (settings) {
    if (arguments.length > 1) {
      settings = primaryBuilder$1.clone(...arguments);
    }

    if (!IS$1$1.object(settings)) {
      settings = {};
    }

    if (settings.type == null) {
      settings.type = 'text';
    }

    if (!Field$1[settings.type]) {
      throw new Error(`QuickField: '${settings.type}' is not a valid/registered field type`);
    }

    registerAnimations();
    return new Field$1[settings.type](settings, builder, settingOverrides, templateOverrides);
  };

  builder.register = function (type, targetField) {
    var i, len, requiredMethod;

    if (!IS$1$1.string(type) || !IS$1$1.function(targetField)) {
      throw new Error("QuickField Registration: invalid arguments");
    }

    for (i = 0, len = REQUIRED_FIELD_METHODS.length; i < len; i++) {
      requiredMethod = REQUIRED_FIELD_METHODS[i];

      if (!targetField.prototype[requiredMethod]) {
        throw new Error(`QuickField Registration: '${requiredMethod}' method is required in order to register the field`);
      }
    }

    Field$1[type] = targetField;
    return this;
  };

  builder.config = function (newSettings, newTemplates) {
    var config, globalConfig, name$$1, originalTemplates, outputSettings, outputTemplates, ref, templates, type;

    if (!IS$1$1.object(newSettings)) {
      throw new Error(`QuickField Config: invalid config object provided ${String(newSettings)}`);
    }

    outputSettings = Object.create(null);

    for (type in newSettings) {
      config = newSettings[type];

      if (type === 'global') {
        outputSettings.globalDefaults = primaryBuilder$1.deep.notDeep(Field$1.shallowSettings).clone(Field$1.prototype.globalDefaults, config);
      } else if (Field$1[type]) {
        outputSettings[type] = primaryBuilder$1.clone.deep.notDeep(Field$1.shallowSettings)(Field$1[type].prototype.defaults, config);
      }
    }

    if (IS$1$1.object(newTemplates)) {
      outputTemplates = Object.create(null);
      globalConfig = newTemplates.global;

      if (globalConfig && globalConfig.field && !globalConfig.default) {
        globalConfig.default = globalConfig.field;
      }

      for (type in Field$1) {
        originalTemplates = (ref = Field$1[type].prototype) != null ? ref.templates : void 0;
        templates = newTemplates[type] || globalConfig;

        if (!originalTemplates) {
          continue;
        }

        if (!templates) {
          outputTemplates[type] = originalTemplates;
          continue;
        }

        if (templates.field && !templates.default) {
          templates.default = templates.field;
        }

        outputTemplates[type] = Object.create(null);

        for (name$$1 in templates) {
          config = templates[name$$1];

          if (name$$1 === 'field' || !originalTemplates[name$$1]) {
            continue;
          }

          if (globalConfig && globalConfig[name$$1]) {
            config = primaryBuilder$1.clone.deep.concat(globalConfig[name$$1], config);
          }

          outputTemplates[type][name$$1] = originalTemplates[name$$1].extend(config);
        }

        for (name$$1 in originalTemplates) {
          config = originalTemplates[name$$1];

          if (!outputTemplates[type][name$$1]) {
            outputTemplates[type][name$$1] = config;
          }
        }
      }
    }

    return createBuilder(outputSettings, outputTemplates);
  };

  Object.defineProperty(builder, 'fields', {
    get: function () {
      return primaryBuilder$1.clone.own.notKeys('instances')(Field$1);
    }
  });
  builder.settingOverrides = settingOverrides;
  builder.templateOverrides = templateOverrides;
  builder.version = version$3;
  builder.Field = Field$1;
  return builder;
}; // import NumberField from './fields/number'
// import SelectField from './fields/select'
// import ChoiceField from './fields/choice'
// import TruefalseField from './fields/truefalse'
// import ToggleField from './fields/toggle'
// import GroupField from './fields/group'
// import RepeaterField from './fields/repeater'
// import FileField from './fields/file'
// import CheckboxField from './fields/checkbox'


quickfield$1 = createBuilder();
quickfield$1.register('text', TextField$1); // quickfield.register 'textarea', TextareaField
// quickfield.register 'number', NumberField
// quickfield.register 'select', SelectField
// quickfield.register 'choice', ChoiceField
// quickfield.register 'truefalse', TruefalseField
// quickfield.register 'toggle', ToggleField
// quickfield.register 'group', GroupField
// quickfield.register 'repeater', RepeaterField
// quickfield.register 'checkbox', FileField
// quickfield.register 'file', CheckboxField

var quickfield$1$1 = quickfield$1;var defaults$2 = {
  placeholder: true,
  validWhenRegex: false,
  autoWidth: false,
  autoHeight: true,
  minHeight: 46,
  maxWidth: '100%',
  maxHeight: 2e308,
  minWidth: 2,
  minLength: null,
  maxLength: null,
  counter: false
}; // dropdown: {storeSelected:false, lockScroll:false}
var template$2 = textFieldTemplate.extend({
  children: {
    'innerwrap': {
      options: {
        style: {
          overflow: 'hidden',
          height: function (field) {
            return field.settings.minHeight || 46;
          },
          width: function (field) {
            if (!field.settings.autoWidth) {
              return '100%';
            }
          }
        }
      }
    },
    'label': {
      options: {
        style: {
          left: function (field) {
            return shorthandSideValue(field.settings.padding, 'left');
          },
          top: '7.6px'
        }
      }
    },
    'input': {
      type: 'textarea',
      options: {
        type: null,
        styleAfterInsert: true,
        style: {
          resize: 'none',
          whiteSpace: 'normal',
          width: '100%',
          height: function () {
            return `calc(100% - ${this.styleSafe('marginTop', true)} - ${this.styleSafe('marginBottom', true)})`;
          },
          margin: '0',
          marginTop: '15px',
          marginBottom: '12px',
          padding: '0 12px'
        }
      }
    },
    'placeholder': {
      options: {
        styleAfterInsert: true,
        style: {
          left: 0,
          padding: function (field) {
            var horiz, verti;
            horiz = field.el.child.input.styleSafe('paddingLeft', true) || field.el.child.input.styleSafe('paddingLeft');
            verti = field.el.child.input.styleSafe('marginTop', true) || field.el.child.input.styleSafe('marginTop');
            return `${verti} ${horiz}`;
          }
        }
      }
    }
  }
});
var counter = quickdom.template(['div', {
  ref: 'counter',
  style: {
    position: 'absolute',
    bottom: -10,
    right: 0,
    fontSize: 10,
    fontWeight: 500
  }
}]);
var templates$1 =
/*#__PURE__*/
Object.freeze({
  default: template$2,
  counter: counter
});var TextareaField;

TextareaField = function () {
  class TextareaField extends Field$1 {
    constructor() {
      super(...arguments);

      if (this._value == null) {
        this._value = '';
      }

      this.state.height = this.settings.autoHeight ? 'auto' : this.settings.height;
      this.state.typing = false;
      this.cursor = {
        prev: 0,
        current: 0
      };

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      return this._value;
    }

    _setValue(newValue) {
      if (IS$1$1.string(newValue) || IS$1$1.number(newValue)) {
        return this._value = String(newValue);
      }
    }

    _recalcDisplay() {
      if (this.settings.autoHeight || this.settings.autoWidth) {
        return this._value = this._value;
      }
    }

    _createElements() {
      var forceOpts;
      forceOpts = {
        relatedInstance: this
      };
      this.el = this.template.spawn(this.settings.templates.defaults, forceOpts);
      this.el.state('hasLabel', this.settings.label);
      this.el.child.innerwrap.raw._quickField = this.el.child.input.raw._quickField = this;
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_display();

      this._attachBindings_display_autoWidth();

      this._attachBindings_display_autoHeight();

      this._attachBindings_value();

      this._attachBindings_autocomplete();

      this._attachBindings_stateTriggers();
    }

    _attachBindings_display_autoHeight() {
      simplybind('height', {
        updateEvenIfSame: true
      }).of(this.state).transformSelf(function (value) {
        if (isNaN(value) && isNaN(parseFloat(value))) {
          return 'auto';
        } else {
          return value;
        }
      }).to(height => {
        return this.el.child.innerwrap.style('height', height);
      }).updateOn('event:inserted').of(this);

      if (this.settings.autoHeight) {
        simplybind('_value', {
          updateEvenIfSame: true,
          updateOnBind: false
        }).of(this).to('height').of(this.state).transform(() => {
          return this._getInputAutoHeight();
        }).updateOn('event:inserted').of(this);
      }
    }

    _attachBindings_display_autoWidth() {
      simplybind('width', {
        updateEvenIfSame: true
      }).of(this.state).to(width => {
        return (this.settings.autoWidth ? this.el.child.innerwrap : this.el).style('width', width);
      }).transform(this._formatWidth.bind(this)).updateOn('isMobile').of(this.state);

      if (this.settings.autoWidth) {
        simplybind('_value', {
          updateEvenIfSame: true,
          updateOnBind: false
        }).of(this).to('width').of(this.state).transform(() => {
          return this._getInputAutoWidth();
        }).updateOn('event:inserted').of(this);
      }
    }

    _attachBindings_value() {
      var input;
      input = this.el.child.input.raw;
      simplybind('event:input').of(input).to(() => {
        return this.value = input.value;
      });
      simplybind('_value').of(this).to('value').of(input).and.to(value => {
        this.state.filled = !!value;

        if (value) {
          this.state.interacted = true;
        }

        this.state.valid = this.validate(void 0, true);
        return this.emit('input', value);
      });
    }

    _attachBindings_autocomplete() {}

    _getInputAutoHeight() {
      var inputHeight, prevHeight;
      prevHeight = this.el.child.input.raw.style.height;

      if (this._value) {
        this._setValueIfNotSet();

        this.el.child.input.style('height', 0);
        inputHeight = this.el.child.input.raw.scrollHeight + 2;
        inputHeight += this.el.child.input.styleParsed('marginTop') + this.el.child.input.styleParsed('marginBottom');
      } else {
        inputHeight = this.el.child.placeholder.height;
      }

      this.el.child.input.style('height', prevHeight);
      return Math.min(this.settings.maxHeight, Math.max(inputHeight, this.settings.minHeight));
    }

    _getInputAutoWidth() {
      var inputPadding, inputWidth, labelWidth;

      if (this._value) {
        this._setValueIfNotSet();

        this.el.child.input.style({
          width: 0,
          whiteSpace: 'nowrap'
        }).raw.scrollLeft = 1e+10;
        inputPadding = this.el.child.input.styleParsed('paddingLeft') || this.el.child.input.styleParsed('padding');
        inputWidth = Math.max(this.el.child.input.raw.scrollLeft + this.el.child.input.raw.offsetWidth, this.el.child.input.raw.scrollWidth) + 2 + inputPadding + 1;
        labelWidth = this.settings.label && this.el.child.label.styleSafe('position') === 'absolute' ? this.el.child.label.rect.width : 0;
      } else {
        inputWidth = this.el.child.placeholder.rect.width;
        labelWidth = 0;
      }

      this.el.child.input.style({
        width: '100%',
        whiteSpace: 'normal'
      });
      return Math.min(this._getWidthSetting('max'), Math.max(this._getWidthSetting('min'), inputWidth, labelWidth));
    }

  }

  TextareaField.prototype.template = template$2;
  TextareaField.prototype.templates = templates$1;
  TextareaField.prototype.defaults = defaults$2;
  inheritProto(TextareaField, TextField$1);
  return TextareaField;
}.call(undefined);

var TextareaField$1 = TextareaField;var defaults$3 = {
  placeholder: true,
  validWhenMin: false,
  validWhenMax: false,
  autoWidth: false,
  maxWidth: '100%',
  height: 46,
  buttons: true,
  minValue: -2e308,
  maxValue: 2e308,
  step: 1,
  enforce: false,
  inputSibling: 'buttons'
};var template$3 = textFieldTemplate.extend();
var stepButton = quickdom.template(['div', {
  stateTriggers: {
    'active': {
      on: 'mousedown',
      off: 'mouseup',
      bubbles: false
    }
  },
  attrs: {
    tabindex: -1
  },
  style: {
    display: 'inline-block',
    width: '100%',
    height: 17,
    boxSizing: 'border-box',
    verticalAlign: 'top',
    outline: 'none',
    cursor: 'pointer',
    fill: COLORS$1.grey,
    $active: {
      fill: COLORS$1.grey_dark
    }
  }
}]);
var buttons = quickdom.template(['div', {
  ref: 'buttons',
  style: {
    position: 'relative',
    zIndex: 3,
    top: '50%',
    transform: 'translateY(-50%)',
    display: 'inline-block',
    width: 17,
    paddingRight: function (field) {
      return field.settings.inputPadding;
    },
    outline: 'none'
  }
}, stepButton.extend({
  children: [caretUp],
  options: {
    ref: 'stepUp'
  }
}), stepButton.extend({
  children: [caretDown],
  options: {
    ref: 'stepDown'
  }
})]);
var templates$2 =
/*#__PURE__*/
Object.freeze({
  default: template$3,
  stepButton: stepButton,
  buttons: buttons
});var NumberField;

NumberField = function () {
  class NumberField extends Field$1 {
    constructor() {
      var ref;
      super(...arguments);

      if (this._value == null) {
        this._value = '';
      }

      if (this.settings.enforce && this.settings.minValue && this.settings.minValue !== -2e308) {
        this._value || (this._value = this.settings.minValue);
      }

      this.settings.step = Number(this.settings.step) || 1;
      this.state.typing = false;
      this.cursor = {
        prev: 0,
        current: 0
      };
      this.precision = ((ref = this.settings.step.toString().split('.')[1]) != null ? ref.length : void 0) || 0;

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      return Number(this._value) || 0;
    }

    _setValue(newValue) {
      return this._value = this._normalizeValue(newValue, this.settings.enforce);
    }

    _createElements() {
      var globalOpts;
      globalOpts = {
        relatedInstance: this
      };
      this.el = this.template.spawn(this.settings.templates.defaults, globalOpts);

      if (this.settings.buttons) {
        buttons.spawn(this.settings.templates.buttons, globalOpts).insertAfter(this.el.child.input);
      }

      this.el.state('hasLabel', this.settings.label);
      this.el.child.innerwrap.raw._quickField = this.el.childf.input.raw._quickField = this;
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_display();

      this._attachBindings_display_autoWidth();

      this._attachBindings_value();

      this._attachBindings_stateTriggers();

      this._attachBindings_stepEvents();
    }

    _attachBindings_value() {
      var input;
      input = this.el.child.input.raw;
      simplybind('event:input').of(input).to(() => {
        var newValue, selectNumberPart;
        this.cursor.prev = this.cursor.current;
        this.cursor.current = this.selection().end;
        newValue = input.value;

        if (newValue[newValue.length - 1] === '-') {
          if (this.settings.minValue > -1) {
            newValue = this._value;
          } else {
            newValue = -1;
            selectNumberPart = true;
          }
        }

        this._setValue(newValue);

        if (this.state.focused) {
          if (selectNumberPart) {
            return this.selection(1, 2);
          } else {
            return this.selection(this.cursor.current, this.cursor.current + (String(this._value).length - newValue.length));
          }
        }
      });
      simplybind('_value').of(this).to('value').of(input).and.to(value => {
        this.state.filled = !!String(value);

        if (String(value)) {
          this.state.interacted = true;
        }

        this.state.valid = this.validate(void 0, true);
        return this.emit('input', value);
      });
      simplybind('event:blur').of(input).to(() => {
        var value;

        if (!this.settings.enforce) {
          value = Number(this._value) || 0;

          if (value === 0 || !this.state.interacted && value === this.settings.minValue) {
            return this._value = '';
          }
        }
      });
      simplybind('event:keydown').of(this.el.child.input).to(event => {
        if (event.keyCode === KEYCODES.enter) {
          this.emit('submit');
        }

        return this.emit(`key-${event.keyCode}`);
      });
    }

    _attachBindings_stepEvents() {
      var stopPropagation;
      simplybind('event:keydown').of(this.el.child.input).to(event => {
        switch (event.keyCode) {
          case KEYCODES.up:
            event.preventDefault();
            return this.stepUp();

          case KEYCODES.down:
            event.preventDefault();
            return this.stepDown();
        }
      });

      if (this.settings.buttons) {
        stopPropagation = function (event) {
          event.preventDefault();
          return event.stopPropagation();
        };

        simplybind('event:click').of(this.el.child.stepUp).to(this.stepUp.bind(this)).and.to(stopPropagation);
        simplybind('event:click').of(this.el.child.stepDown).to(this.stepDown.bind(this)).and.to(stopPropagation);
      }
    }

    _setValueIfNotSet() {
      if (Number(this.el.child.input.raw.value) !== this._value) {
        return this.el.child.input.raw.value = this._value;
      }
    }

    _normalizeValue(value, enforce) {
      value = value ? parseFloat(value) || 0 : 0;

      if (value % this.settings.step && enforce) {
        if (value < this.settings.step) {
          value = this.settings.step;
        } else {
          value = this._roundToNearest(value, this.settings.step);
        }
      }

      if (value < this.settings.minValue) {
        value = this.settings.minValue;
      }

      if (value > this.settings.maxValue) {
        value = this.settings.maxValue;
      }

      return value;
    }

    _roundToNearest(value, target) {
      var multiplier;
      value = (value || 0).toFixed(this.precision) * 1;
      multiplier = target < 1 ? 1 / target : 1;
      target *= multiplier;
      value *= multiplier;
      value = Math.ceil(value / target) * target / multiplier;
      return value;
    }

    stepUp() {
      var newValue, rounded;
      rounded = this._roundToNearest(this._value, this.settings.step);
      newValue = Math.min(rounded + this.settings.step, this._value + this.settings.step);
      return this._setValue(this._roundToNearest(newValue, this.settings.step));
    }

    stepDown() {
      var newValue, rounded;
      rounded = this._roundToNearest(this._value, this.settings.step);
      newValue = Math.max(rounded - this.settings.step, this._value - this.settings.step);
      return this._setValue(this._roundToNearest(newValue, this.settings.step));
    }

  }

  NumberField.prototype.template = template$3;
  NumberField.prototype.templates = templates$2;
  NumberField.prototype.defaults = defaults$3;
  inheritProto(NumberField, TextField$1);
  return NumberField;
}.call(undefined);

primaryBuilder$1.notKeys(NumberField.prototype)(NumberField.prototype, TextField$1.prototype);
var NumberField$1 = NumberField;var defaults$4 = {
  placeholder: true,
  validWhenIsChoice: false,
  validWhenRegex: false,
  validWhenChoseMin: 2e308,
  autoWidth: false,
  maxWidth: '100%',
  height: 46,
  labelFilter: null,
  choices: [],
  multiple: false,
  dropdown: {
    typeBuffer: true
  },
  inputSibling: 'caret'
};var template$4 = textFieldTemplate.extend({
  children: {
    innerwrap: {
      children: {
        'input': ['div', {
          props: {
            tabIndex: 0
          },
          style: {
            marginTop: 3,
            height: 'auto',
            cursor: 'default',
            userSelect: 'none',
            // overflow: 'scroll'
            overflow: 'hidden'
          }
        }],
        'caret': ['div', {
          ref: 'caret',
          styleAfterInsert: true,
          style: {
            position: 'relative',
            zIndex: 3,
            top: function (field) {
              return this.parent.styleParsed('height', true) / 2 - this.styleParsed('height') / 2;
            },
            display: 'inline-block',
            width: 17,
            height: 17,
            paddingRight: function (field) {
              return field.settings.inputPadding;
            },
            verticalAlign: 'top',
            outline: 'none',
            pointerEvents: 'none',
            fill: COLORS$1.grey
          }
        }, caretDown]
      }
    }
  }
});
var templates$3 =
/*#__PURE__*/
Object.freeze({
  default: template$4
});var SelectField;

SelectField = function () {
  class SelectField extends Field$1 {
    constructor() {
      var base;
      super(...arguments);
      this.settings.dropdown.multiple = this.settings.multiple;

      if (this.settings.multiple) {
        if ((base = this.settings.dropdown).help == null) {
          base.help = 'Tip: press ESC to close this menu';
        }
      }

      this._value = this.settings.multiple ? [] : null;
      this.dropdown = new Dropdown$1(this.settings.choices, this);

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      var ref;

      if (!this.settings.multiple) {
        return (ref = this._value) != null ? ref.value : void 0;
      } else {
        return this._value.map(function (choice) {
          return choice.value;
        });
      }
    }

    _setValue(newValue) {
      var i, len, value;

      if (!this.settings.multiple || !IS$1$1.array(newValue)) {
        this.setChoice(newValue);
      } else {
        for (i = 0, len = newValue.length; i < len; i++) {
          value = newValue[i];
          this.setChoice(value);
        }
      }
    }

    _recalcDisplay() {
      if (this.settings.autoWidth) {
        return this.valueLabel = this.valueLabel;
      }
    }

    _createElements() {
      var forceOpts;
      forceOpts = {
        relatedInstance: this
      };
      this.el = this.template.spawn(this.settings.templates.default, forceOpts);
      this.dropdown.appendTo(this.el.child.innerwrap);
      this.el.child.placeholder.insertBefore(this.el.child.input);

      if (this.settings.label) {
        this.el.child.label.text = this.settings.label;
        this.el.state('hasLabel', true);
      }

      this.el.child.innerwrap.raw._quickField = this.el.child.input.raw._quickField = this;
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_value();

      this._attachBindings_display();

      this._attachBindings_display_autoWidth();

      this._attachBindings_dropdown();

      this._attachBindings_stateTriggers();
    }

    _attachBindings_display_autoWidth() {
      simplybind('width', {
        updateEvenIfSame: true
      }).of(this.state).to(width => {
        return (this.settings.autoWidth ? this.el.child.input : this.el).style({
          width
        });
      }).transform(this._formatWidth.bind(this)).updateOn('isMobile').of(this.state);

      if (this.settings.autoWidth) {
        simplybind('valueLabel', {
          updateEvenIfSame: true,
          updateOnBind: false
        }).of(this).to('width').of(this.state).transform(() => {
          return this._getInputAutoWidth();
        }).updateOn('event:inserted').of(this);
      }
    }

    _getInputAutoWidth() {
      var inputWidth, labelWidth;

      if (this.valueLabel) {
        this.el.child.input.style('width', 0);
        inputWidth = this.el.child.input.raw.scrollWidth + 2;
        labelWidth = this.el.child.label.styleSafe('position') === 'absolute' ? this.el.child.label.rect.width : 0;
      } else {
        inputWidth = this.el.child.placeholder.rect.width;
        labelWidth = 0;
      }

      return Math.max(inputWidth, labelWidth);
    }

    _attachBindings_value() {
      simplybind('array:_value').of(this).to(selected => {
        this.state.filled = this.settings.multiple ? !!(selected != null ? selected.length : void 0) : !!selected;

        if (this.state.filled) {
          this.state.interacted = true;
        }

        this.state.valid = this.validate(void 0, true);
        return this.emit('input', this.value);
      }).and.to('valueLabel').of(this).transform(selected => {
        if (!selected) {
          return '';
        } else {
          if (this.settings.multiple) {
            return selected.map(function (choice) {
              return choice.label;
            }).join(', ');
          } else {
            return selected.label;
          }
        }
      });
      simplybind('valueLabel').of(this).to('text').of(this.el.child.input).transform(label => {
        if (this.settings.labelFormat) {
          return this.settings.labelFormat(label);
        } else {
          return label;
        }
      });
    }

    _attachBindings_dropdown() {
      simplybind('event:click').of(this.el.child.input).to(event => {
        var escListener;

        if (!(this.state.disabled || this.dropdown.choices.length === 0)) {
          this.dropdown.isOpen = true;
          this.focus();
          quickdom(document).on('click.dropdown', event => {
            if (quickdom(event.target).parentMatching(parent => {
              return parent === this.el.child.innerwrap;
            })) {
              return;
            }

            return this.dropdown.isOpen = false;
          }, true);
          escListener = simplybind('event:keydown').of(document).once.to(() => {
            return this.dropdown.isOpen = false;
          }).condition(function (event) {
            return event.keyCode === 27;
          });
          return simplybind('isOpen', {
            updateOnBind: false
          }).of(this.dropdown).once.to(function () {
            escListener.unBind();
            return quickdom(document).off('click.dropdown');
          }).condition(function (isOpen) {
            return !isOpen;
          });
        }
      });
      simplybind('event:click').of(this.el.child.innerwrap).to(event => {
        event.stopPropagation();
        return this.el.child.input.emitPrivate('click');
      }).condition(event => {
        return event.target === this.el.child.innerwrap.raw;
      });
      simplybind('focused', {
        updateOnBind: false
      }).of(this.state).to(focused => {
        var triggeringKeycodes;

        if (!focused) {
          return this.el.child.input.off('keydown.dropdownTrigger');
        } else {
          triggeringKeycodes = [32, 37, 38, 39, 40];
          return this.el.child.input.on('keydown.dropdownTrigger', event => {
            var ref;

            if (includes$2(triggeringKeycodes, event.keyCode) && !this.dropdown.isOpen) {
              this.dropdown.isOpen = true;

              if ((ref = this.dropdown.lastSelected) != null ? ref.selected : void 0) {
                this.dropdown.currentHighlighted = this.dropdown.lastSelected;
              }

              return event.preventDefault();
            } else if (event.keyCode === 9 && this.dropdown.isOpen) {
              // Prevent tab key
              return event.preventDefault();
            }
          });
        }
      });
      this.dropdown.onSelected(choice => {
        if (!(choice.selected && !this.settings.multiple)) {
          this.value = choice;
        }

        if (!this.settings.multiple) {
          return this.dropdown.isOpen = false;
        }
      });
    }

    _attachBindings_stateTriggers() {
      //# ==========================================================================
      //# State event triggers
      //# ========================================================================== 
      simplybind('event:mouseenter').of(this.el.child.input).to(() => {
        return this.state.hovered = true;
      });
      simplybind('event:mouseleave').of(this.el.child.input).to(() => {
        return this.state.hovered = false;
      });
      simplybind('event:focus').of(this.el.child.input).to(() => {
        this.state.focused = true;

        if (this.state.disabled) {
          return this.blur();
        }
      });
      simplybind('event:blur').of(this.el.child.input).to(() => {
        return this.state.focused = false;
      });
    }

    _validate(providedValue) {
      var matchingChoice, ref, ref1;

      if (this.settings.validWhenRegex && IS$1$1.regex(this.settings.validWhenRegex)) {
        switch (false) {
          case !this.settings.multiple:
            if (!(() => {
              var validChoices;

              if (providedValue.length === 0) {
                return false;
              }

              validChoices = providedValue.filter(choice => {
                return this.settings.validWhenRegex.test(choice);
              });

              if (this.settings.validWhenChoseMin === 2e308 || !IS$1$1.number(this.settings.validWhenChoseMin)) {
                return validChoices.length === providedValue.length;
              } else {
                return validChoices.length >= this.settings.validWhenChoseMin;
              }
            })()) {
              return false;
            }

            break;

          default:
            if (!this.settings.validWhenRegex.test(providedValue)) {
              return false;
            }

        }
      }

      if (this.settings.validWhenIsChoice && ((ref = this.dropdown.choices) != null ? ref.length : void 0)) {
        matchingChoice = this.dropdown.choices.filter(function (option) {
          return option.value === providedValue;
        });

        if (!!!matchingChoice.length) {
          return false;
        }
      }

      if (this.settings.multiple && -1 > (ref1 = this.settings.validWhenChoseMin) && ref1 < 2e308) {
        if (!providedValue.length >= this.settings.validWhenChoseMin) {
          return false;
        }
      }

      if (this.settings.multiple && this.settings.required) {
        if (!providedValue.length) {
          return false;
        }
      }

      return true;
    }

    addChoice(choice) {
      return this.dropdown.addChoice(choice);
    }

    setChoice(choice) {
      var match, ref;

      if (IS$1$1.object(choice) && choice instanceof Choice) {
        return choice.toggle();
      } else if (match = this.dropdown.findChoiceAny(choice)) {
        return match.toggle(true);
      } else {
        return (ref = this.addChoice(choice)) != null ? ref.toggle(true) : void 0;
      }
    }

  }

  SelectField.prototype.template = template$4;
  SelectField.prototype.templates = templates$3;
  SelectField.prototype.defaults = defaults$4;
  SelectField.prototype.coreValueProp = 'value';
  return SelectField;
}.call(undefined);

inheritProto(SelectField, TextField$1, ['_getMaxWidth', '_attachBindings_elState', '_attachBindings_display', 'focus', 'blur']);
var SelectField$1 = SelectField;var template$5 = quickdom.template(['div', {
  ref: 'field',
  style: {
    position: 'relative',
    display: 'none',
    width: function (field) {
      return field.state.width;
    },
    boxSizing: 'border-box',
    fontFamily: function (field) {
      return field.settings.fontFamily;
    },
    textAlign: 'left',
    $visible: {
      $hasVisibleChoices: {
        display: 'inline-block'
      }
    },
    $showError: {
      animation: '0.2s fieldErrorShake'
    }
  }
}, ['div', {
  ref: 'label',
  style: {
    display: 'none',
    marginBottom: '12px',
    fontFamily: 'inherit',
    fontSize: '13px',
    fontWeight: 600,
    color: COLORS$1.black,
    cursor: 'default',
    pointerEvents: 'none',
    userSelect: 'none',
    $showLabel: {
      display: 'block'
    },
    $showError: {
      color: COLORS$1.red
    }
  }
}], ['div', {
  ref: 'innerwrap',
  style: {
    position: 'relative',
    boxSizing: 'border-box',
    fontFamily: 'inherit'
  }
}], ['div', {
  ref: 'help',
  style: {
    marginTop: '10px',
    fontFamily: 'inherit',
    fontSize: '11px',
    color: COLORS$1.grey,
    display: 'none',
    $showError: {
      color: COLORS$1.red,
      display: 'block'
    },
    $showHelp: {
      display: 'block'
    }
  }
}]]);
var choiceGroup = quickdom.template(['div', {
  ref: 'choiceGroup',
  style: {
    marginBottom: function (field) {
      return field.settings.spacing;
    },
    userSelect: 'none',
    fontSize: '0',
    whiteSpace: 'nowrap'
  }
}]);
var choice$1 = quickdom.template(['div', {
  ref: 'choice',
  styleAfterInsert: true,
  style: {
    position: 'relative',
    display: 'inline-block',
    width: 'auto',
    marginLeft: function (field) {
      if (this.index) {
        return `calc(100% - (100% - ${field.settings.spacing}px))`;
      }
    },
    // minHeight: '46px'
    padding: '0 12px',
    borderRadius: '2px',
    backgroundColor: 'white',
    fontFamily: 'inherit',
    textAlign: 'center',
    color: COLORS$1.black,
    boxSizing: 'border-box',
    verticalAlign: 'top',
    cursor: 'pointer',
    $definedWidth: {
      width: function (field) {
        return `calc((100% - ${field.settings.spacing * (field.settings.perGroup - 1)}px) / ${field.settings.perGroup})`;
      }
    },
    $selected: {
      color: COLORS$1.orange
    },
    $unavailable: {
      display: 'none'
    },
    $disabled: {
      cursor: 'not-allowed',
      opacity: 0.7,
      color: COLORS$1.grey
    }
  }
}, ['div', {
  ref: 'border',
  style: {
    position: 'absolute',
    zIndex: 2,
    top: '0',
    left: '0',
    width: '100%',
    height: '100%',
    borderWidth: '1px',
    borderStyle: 'solid',
    borderColor: COLORS$1.grey_light,
    borderRadius: '2px',
    boxSizing: 'border-box',
    $selected: {
      borderColor: 'inherit',
      borderWidth: '2px'
    },
    $disabled: {
      borderColor: COLORS$1.grey_light
    }
  }
}], ['div', {
  ref: 'label',
  style: {
    position: 'relative',
    display: 'block',
    padding: '15px 0px',
    fontFamily: 'inherit',
    fontSize: function (field) {
      return field.settings.fontSize;
    },
    fontWeight: '500'
  }
}]]);
var choiceIcon = quickdom.template(['div', {
  ref: 'icon',
  style: {
    position: 'absolute',
    top: '50%',
    display: 'block',
    fontSize: '20px',
    opacity: 0.16,
    transform: 'translateY(-50%)'
  }
}]);
var templates$4 =
/*#__PURE__*/
Object.freeze({
  default: template$5,
  choiceGroup: choiceGroup,
  choice: choice$1,
  choiceIcon: choiceIcon
});var defaults$5 = {
  validWhenSelected: false,
  validWhenIsChoice: false,
  showSelectAll: false,
  perGroup: 7,
  spacing: 8,
  choices: []
};var Choice$1, ChoiceField;

ChoiceField = function () {
  class ChoiceField extends Field$1 {
    constructor() {
      var ref;
      super(...arguments);

      if (!((ref = this.settings.choices) != null ? ref.length : void 0)) {
        throw new Error(`Choices were not provided for choice field '${this.settings.label || this.ID}'`);
      }

      this._value = this.settings.multiple ? [] : null;
      this.lastSelected = null;
      this.visibleChoicesCount = 0;
      this.choices = this.settings.choices;

      if (this.settings.validWhenSelected === true) {
        this.settings.validWhenSelected = 1;
      }

      this.settings.perGroup = Math.min(this.settings.perGroup, this.choices.length + (this.settings.multiple && this.settings.showSelectAll ? 1 : 0));

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      var ref;

      if (!this.settings.multiple) {
        return (ref = this._value) != null ? ref.value : void 0;
      } else {
        return this._value.map(function (choice) {
          return choice.value;
        });
      }
    }

    _setValue(newValue) {
      var i, len, value;

      if (!this.settings.multiple || !IS$1$1.array(newValue)) {
        this.setChoice(newValue);
      } else {
        for (i = 0, len = newValue.length; i < len; i++) {
          value = newValue[i];
          this.setChoice(value);
        }
      }
    }

    _createElements() {
      var choiceGroups, choices, globalOpts, perGroup;
      globalOpts = {
        relatedInstance: this
      };
      this.el = this.template.spawn(this.settings.templates.default, globalOpts);
      this.choices = [];
      choices = this.settings.choices;
      perGroup = this.settings.perGroup;
      choiceGroups = Array(Math.ceil(choices.length / perGroup)).fill().map(function (s, index) {
        return choices.slice(index * perGroup, index * perGroup + perGroup);
      });
      choiceGroups.forEach((choices, groupIndex) => {
        var groupEl;
        groupEl = this.templates.choiceGroup.spawn(this.settings.templates.choiceGroup, globalOpts).appendTo(this.el.child.innerwrap);
        return choices.forEach((choice, index) => {
          return this.choices.push(new Choice$1(this, choice, index, groupIndex, groupEl));
        });
      });
      this.el.child.innerwrap.raw._quickField = this;
    }

    _attachBindings() {
      var choice, i, len, ref;

      this._attachBindings_elState();

      this._attachBindings_stateTriggers();

      this._attachBindings_display();

      this._attachBindings_value();

      ref = this.choices;

      for (i = 0, len = ref.length; i < len; i++) {
        choice = ref[i];

        choice._attachBindings();
      }
    }

    _attachBindings_elState() {
      simplybind('visible').of(this.state).to(visible => {
        return this.el.state('visible', visible);
      });
      simplybind('hovered').of(this.state).to(hovered => {
        return this.el.state('hovered', hovered);
      });
      simplybind('filled').of(this.state).to(filled => {
        return this.el.state('filled', filled);
      });
      simplybind('disabled').of(this.state).to(disabled => {
        return this.el.state('disabled', disabled);
      });
      simplybind('showLabel').of(this.state).to(showLabel => {
        return this.el.state('showLabel', showLabel);
      });
      simplybind('showError').of(this.state).to(showError => {
        return this.el.state('showError', showError);
      });
      simplybind('showHelp').of(this.state).to(showHelp => {
        return this.el.state('showHelp', showHelp);
      });
      simplybind('valid').of(this.state).to(valid => {
        this.el.state('valid', valid);
        return this.el.state('invalid', !valid);
      });
    }

    _attachBindings_stateTriggers() {
      simplybind('event:mouseenter').of(this.el).to(() => {
        return this.state.hovered = true;
      });
      simplybind('event:mouseleave').of(this.el).to(() => {
        return this.state.hovered = false;
      });
    }

    _attachBindings_display() {
      simplybind('width').of(this.state).to(width => {
        return this.el.style('width', width).state('definedWidth', width !== 'auto');
      }).transform(this._formatWidth.bind(this)).updateOn('isMobile').of(this.state);
      simplybind('visibleChoicesCount').of(this).to(count => {
        return this.el.state('hasVisibleChoices', !!count);
      });
    }

    _attachBindings_value() {
      simplybind('_value').of(this).to(selected => {
        this.state.filled = !!(selected != null ? selected.length : void 0);

        if (this.state.filled) {
          this.state.interacted = true;
        }

        return this.state.valid = this.validate(void 0, true);
      });
      simplybind('array:_value', {
        updateOnBind: false
      }).of(this).to(() => {
        return this.emit('input', this.value);
      });
    }

    _validate(providedValue) {
      if (this.settings.multiple) {
        if (!IS$1$1.array(providedValue)) {
          providedValue = [providedValue];
        }

        if (providedValue.length && !IS$1$1.object(providedValue[0])) {
          providedValue = providedValue.map(function (choice) {
            return choice.value;
          });
        }
      } else {
        if (IS$1$1.object(providedValue)) {
          providedValue = providedValue.value;
        }
      }

      if (IS$1$1.number(this.settings.validWhenSelected)) {
        if (!((providedValue != null ? providedValue.length : void 0) >= this.settings.validWhenSelected)) {
          return false;
        }
      }

      if (this.settings.validWhenIsChoice) {
        if (this.settings.multiple) {
          if (!includes$2(providedValue, this.settings.validWhenIsChoice)) {
            return false;
          }
        } else {
          if (providedValue !== this.settings.validWhenIsChoice) {
            return false;
          }
        }
      }

      return true;
    }

    findChoice(providedValue, byLabel) {
      var matches;
      matches = this.choices.filter(function (choice) {
        switch (false) {
          case !IS$1$1.object(providedValue):
            return providedValue === choice;

          case !byLabel:
            return providedValue === choice.label;

          default:
            return providedValue === choice.value;
        }
      });
      return matches[0];
    }

    findChoiceAny(providedValue) {
      return this.findChoice(providedValue) || this.findChoice(providedValue, true);
    }

    setChoice(choice) {
      if (IS$1$1.object(choice) && choice instanceof Choice$1) {
        return choice.toggle();
      } else if (choice = this.findChoiceAny(choice)) {
        return choice.toggle(true);
      }
    }

  }

  ChoiceField.prototype.template = template$5;
  ChoiceField.prototype.templates = templates$4;
  ChoiceField.prototype.defaults = defaults$5;
  return ChoiceField;
}.call(undefined);

Choice$1 = class Choice {
  constructor(field, settings, index1, groupIndex, groupEl) {
    var globalOpts, iconEl, ref;
    this.field = field;
    this.settings = settings;
    this.index = index1;
    globalOpts = {
      relatedInstance: this.field
    };
    ({
      label: this.label,
      value: this.value,
      conditions: this.conditions
    } = this.settings);

    if (this.label == null) {
      this.label = this.value;
    }

    if (this.value == null) {
      this.value = this.label;
    }

    this.el = this.field.templates.choice.spawn(this.field.settings.templates.choice, globalOpts).appendTo(groupEl);

    if (this.icon) {
      iconEl = this.templates.choiceIcon.spawn(this.field.settings.templates.choiceIcon, globalOpts).insertBefore(this.el.child.label);
      iconEl.text = this.icon;
    }

    if (this.el.index == null) {
      this.el.index = this.index;
    }

    this.el.totalIndex = this.index * groupIndex;
    this.el.prop('title', this.label);
    this.el.child.label.text = this.label;
    this.visible = true;
    this.selected = false;
    this.disabled = this.settings.disabled || false;
    this.unavailable = false;

    if ((ref = this.conditions) != null ? ref.length : void 0) {
      this.unavailable = true;
      this.allFields = this.field.allFields;
      Condition$1.init(this, this.conditions, () => {
        return this.unavailable = !Condition$1.validate(this.conditions);
      });
    }
  }

  _attachBindings() {
    return (() => {
      simplybind('visible').of(this).to(visible => {
        return this.el.state('visible', visible);
      }).and.to(visible => {
        return this.field.visibleChoicesCount += visible ? 1 : -1;
      });
      simplybind('selected', {
        updateOnBind: false
      }).of(this).to(selected => {
        return this.el.state('selected', selected);
      });
      simplybind('disabled', {
        updateOnBind: false
      }).of(this).to(disabled => {
        return this.el.state('disabled', disabled);
      });
      simplybind('unavailable', {
        updateOnBind: false
      }).of(this).to(unavailable => {
        return this.el.state('unavailable', unavailable);
      }).and.to(unavailable => {
        if (unavailable) {
          return this.toggle(false, true);
        }
      });
      return simplybind('event:click').of(this.el).to(() => {
        return this.field.value = this;
      }).condition(() => {
        return !this.disabled;
      });
    })();
  }

  toggle(newValue, unavailable) {
    var newState, prevState, ref;
    prevState = this.selected;
    newState = IS$1$1.defined(newValue) ? newValue : !this.selected;

    if (!newState) {
      if (this.field.settings.multiple && prevState) {
        this.selected = newState;
        return removeItem$1(this.field._value, this);
      } else {
        if (IS$1$1.defined(newValue)) {
          this.selected = newState;
        }

        if (unavailable) {
          return this.field._value = null;
        }
      }
    } else {
      this.selected = newState;

      if (this.field.settings.multiple) {
        this.field._value.push(this);
      } else {
        if (this.field._value !== this) {
          if ((ref = this.field._value) != null) {
            ref.toggle(false);
          }
        }

        this.field._value = this;
      }

      return this.field.lastSelected = this;
    }
  }

};
var ChoiceField$1 = ChoiceField;var template$1$2 = template$5.extend();
var choice$1$1 = choice$1.extend();
var choiceIcon$1 = choiceIcon.extend();
var choiceGroup$1 = choiceGroup.extend();
var templates$5 =
/*#__PURE__*/
Object.freeze({
  default: template$1$2,
  choice: choice$1$1,
  choiceIcon: choiceIcon$1,
  choiceGroup: choiceGroup$1
});var defaults$6 = {
  validWhenSelected: false,
  validWhenIsChoice: false,
  validWhenTrue: true,
  choiceLabels: ['True', 'False'],
  choices: [{
    value: true
  }, {
    value: false
  }],
  spacing: 8
};var TrueFalseField;

TrueFalseField = function () {
  class TrueFalseField extends Field$1 {
    constructor() {
      super(...arguments);
      this.lastSelected = null;
      this.visibleChoicesCount = 2;
      this.choices = this.settings.choices;
      this.choices[0].label = this.settings.choiceLabels[0];
      this.choices[1].label = this.settings.choiceLabels[1];
      this.settings.perGroup = 2;

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      if (this._value === null) {
        return null;
      } else {
        if (this._value.index === 0) {
          return true;
        } else {
          return false;
        }
      }
    }

    _setValue(newValue) {
      var ref;

      if (newValue === this.choices[0]) {
        newValue = this.choices[0].value;
      }

      if (newValue === this.choices[1]) {
        newValue = this.choices[1].value;
      }

      if (newValue === null) {
        this._value = null;

        if ((ref = this.lastSelected) != null) {
          ref.toggle(false);
        }

        return;
      }

      if (typeof newValue === 'string') {
        newValue = newValue.toLowerCase();

        if (newValue === 'false') {
          newValue = false;
        }
      }

      return (newValue ? this.choices[0] : this.choices[1]).toggle();
    }

    _validate(providedValue) {
      if (typeof providedValue === 'string') {
        providedValue = this.findChoice(providedValue);
      }

      if (this.settings.validWhenIsChoice) {
        if (providedValue) {
          if (this.settings.validWhenIsChoice !== providedValue.value) {
            return false;
          }
        } else {
          return false;
        }
      }

      if (this.settings.validWhenSelected) {
        if (!providedValue) {
          return false;
        }
      }

      if (this.settings.validWhenTrue) {
        if ((providedValue != null ? providedValue.index : void 0) !== 0) {
          return false;
        }
      }

      return true;
    }

  }

  TrueFalseField.prototype.template = template$1$2;
  TrueFalseField.prototype.templates = templates$5;
  TrueFalseField.prototype.defaults = defaults$6;
  return TrueFalseField;
}.call(undefined);

inheritProto(TrueFalseField, ChoiceField$1, ['_createElements', '_attachBindings', '_attachBindings_elState', '_attachBindings_stateTriggers', '_attachBindings_display', '_attachBindings_value']);
var TrueFalseField$1 = TrueFalseField;var defaults$7 = {
  validWhenTrue: true,
  size: 50,
  style: 'centered',
  color: COLORS$1.green,
  background: COLORS$1.grey_light,
  triggerEvent: 'mouseup'
};var template$6 = quickdom.template(['div', {
  ref: 'field',
  style: {
    position: 'relative',
    display: 'none',
    width: function (field) {
      return field.state.width;
    },
    boxSizing: 'border-box',
    fontFamily: function (field) {
      return field.settings.fontFamily;
    },
    textAlign: 'left',
    $visible: {
      display: 'inline-block'
    },
    $showError: {
      animation: '0.2s fieldErrorShake'
    },
    $alignedStyle: {
      paddingRight: function (field) {
        return field.settings.size + 20;
      }
    }
  }
}, ['div', {
  ref: 'label',
  style: {
    display: 'none',
    marginBottom: '12px',
    fontFamily: 'inherit',
    fontSize: '13px',
    fontWeight: 600,
    textAlign: 'center',
    color: COLORS$1.black,
    cursor: 'default',
    pointerEvents: 'none',
    userSelect: 'none',
    $showLabel: {
      display: 'block'
    },
    $showError: {
      color: COLORS$1.red
    },
    $alignedStyle: {
      marginBottom: '0',
      textAlign: 'left'
    }
  }
}], ['div', {
  ref: 'innerwrap',
  style: {
    position: 'relative',
    boxSizing: 'border-box',
    fontFamily: 'inherit',
    $alignedStyle: {
      position: 'absolute',
      right: 0,
      top: '50%',
      transform: 'translateY(-50%)'
    }
  }
}, ['div', {
  ref: 'input',
  style: {
    position: 'relative',
    zIndex: 2,
    width: function (field) {
      return field.settings.size;
    },
    height: function (field) {
      return field.settings.size / 2;
    },
    margin: '0 auto',
    backgroundColor: function (field) {
      return field.settings.background;
    },
    border: `1px solid ${COLORS$1.grey_semi_light}`,
    borderRadius: function (field) {
      return field.settings.size;
    },
    cursor: 'pointer'
  }
}, ['div', {
  ref: 'background',
  style: {
    position: 'absolute',
    zIndex: 1,
    left: 0,
    right: 0,
    width: function (field) {
      return field.settings.size / 2;
    },
    height: '100%',
    borderRadius: function (field) {
      var size;
      size = field.settings.size;
      return `${size}px 0 0 ${size}px`;
    },
    backgroundColor: function (field) {
      return field.settings.color;
    },
    opacity: 0,
    transition: 'opacity 0.2s, width 0.2s',
    $toggled: {
      opacity: 1,
      width: function (field) {
        return field.settings.size * 0.7;
      }
    }
  }
}], ['div', {
  ref: 'ball',
  style: {
    position: 'absolute',
    zIndex: 2,
    left: 0,
    right: 0,
    width: function (field) {
      return field.settings.size / 2;
    },
    height: function (field) {
      return field.settings.size / 2;
    },
    margin: '0 auto',
    backgroundColor: 'white',
    borderRadius: '50%',
    border: `1px solid ${COLORS$1.grey_light}`,
    boxSizing: 'border-box',
    transform: 'translateX(-55%)',
    transition: 'transform 0.2s',
    userSelect: 'none',
    $toggled: {
      transform: 'translateX(50%)',
      border: function (field) {
        return `1px solid ${field.settings.color}`;
      }
    }
  }
}]]], ['div', {
  ref: 'help',
  style: {
    marginTop: '10px',
    fontFamily: 'inherit',
    fontSize: '11px',
    color: COLORS$1.grey,
    display: 'none',
    $showError: {
      color: COLORS$1.red,
      display: 'block'
    },
    $showHelp: {
      display: 'block'
    }
  }
}]]);
var templates$6 =
/*#__PURE__*/
Object.freeze({
  default: template$6
});var ToggleField;

ToggleField = function () {
  class ToggleField extends Field$1 {
    constructor() {
      super(...arguments);
      this._value = !!this._value;
      this.settings.size = parseFloat(this.settings.size) || defaults$7.size;

      if (this.settings.style !== 'centered' && this.settings.style !== 'aligned') {
        this.settings.style = defaults$7.style;
      }

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      return this._value;
    }

    _setValue(newValue) {
      return this._value = !!newValue;
    }

    _createElements() {
      var forceOpts;
      forceOpts = {
        relatedInstance: this
      };
      this.el = this.template.spawn(this.settings.templates.default, forceOpts);
      this.el.state('alignedStyle', this.settings.style === 'aligned').child.innerwrap.raw._quickField = this;
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_stateTriggers();

      this._attachBindings_display();

      this._attachBindings_value();
    }

    _attachBindings_value() {
      simplybind('_value').of(this).to(value => {
        return this.el.state('toggled', value);
      });
      simplybind('_value', {
        updateOnBind: false
      }).of(this).to(value => {
        return this.emit('input', value);
      });
      simplybind(`event:${this.settings.triggerEvent}`).of(this.el.child.input).to(() => {
        return this.value = !this._value;
      });
    }

    _validate(providedValue) {
      if (this.settings.validWhenTrue) {
        if (!providedValue) {
          return false;
        }
      }

      return true;
    }

  }

  ToggleField.prototype.template = template$6;
  ToggleField.prototype.templates = templates$6;
  ToggleField.prototype.defaults = defaults$7;
  return ToggleField;
}.call(undefined);

inheritProto(ToggleField, TrueFalseField$1, ['_attachBindings_elState', '_attachBindings_stateTriggers', '_attachBindings_display']);
var ToggleField$1 = ToggleField;var defaults$8 = {
  fields: {},
  collapsable: true,
  startCollapsed: false,
  padding: 20,
  fieldMargin: 0,
  fieldAlign: 'top',
  labelSize: 16,
  color: COLORS$1.grey_light4
};var action = quickdom.template(['div', {
  events: {
    inserted: function () {
      if (this.index) {
        return this.style('marginLeft', 5);
      }
    }
  },
  style: {
    display: 'inline-block',
    boxSizing: 'border-box'
  }
}, [// verticalAlign: 'middle'
'div', {
  ref: 'icon',
  style: {
    width: 17,
    height: 17,
    color: COLORS$1.grey,
    fill: COLORS$1.grey,
    $hover: {
      color: COLORS$1.grey_dark,
      fill: COLORS$1.grey_dark
    }
  }
}]]);
var collapseIcons = [caretUp.extend({
  options: {
    style: {
      position: 'relative',
      top: -2,
      display: 'none',
      $collapsed: {
        display: 'block'
      }
    }
  }
}), caretDown.extend({
  options: {
    style: {
      display: 'block',
      $collapsed: {
        display: 'none'
      }
    }
  }
})];
var template$7 = quickdom.template(['div', {
  ref: 'field',
  style: {
    position: 'relative',
    boxSizing: 'border-box',
    verticalAlign: 'top',
    display: 'none',
    width: function (field) {
      return field.state.width;
    },
    fontFamily: function (field) {
      return field.settings.fontFamily;
    },
    // backgroundColor: (field)-> field.settings.color
    border: `1px solid ${COLORS$1.grey_light}`,
    borderRadius: 3,
    textAlign: 'left',
    // lineHeight: '1em'
    $visible: {
      display: 'inline-block'
    },
    $showError: {
      $collapsed: {
        animation: '0.2s fieldErrorShake'
      }
    }
  }
}, ['div', {
  ref: 'label',
  style: {
    display: 'none',
    fontFamily: 'inherit',
    fontSize: function (field) {
      return field.settings.labelSize;
    },
    fontWeight: 600,
    textAlign: 'left',
    color: COLORS$1.black,
    cursor: 'default',
    userSelect: 'none',
    $showLabel: {
      display: 'block'
    },
    $showError: {
      color: COLORS$1.red
    }
  }
}], ['div', {
  ref: 'actions',
  style: {
    position: 'absolute',
    top: function (field) {
      return field.settings.padding * (12 / 20);
    },
    right: function (field) {
      return field.settings.padding * (12 / 20);
    },
    lineHeight: 0,
    fontSize: 0,
    textAlign: 'center',
    $showLabel: {
      top: function (field) {
        return field.settings.padding * (21 / 20);
      }
    }
  }
}], ['div', {
  ref: 'help',
  style: {
    marginTop: '10px',
    fontFamily: 'inherit',
    fontSize: '11px',
    color: COLORS$1.grey,
    display: 'none',
    whiteSpace: 'pre-line',
    $showError: {
      color: COLORS$1.red,
      display: 'block'
    },
    $showHelp: {
      display: 'block'
    }
  }
}], ['div', {
  ref: 'innerwrap',
  unpassableStates: ['visible', 'hover', 'focus', 'disabled', 'showLabel', 'showError', 'showHelp', 'collapsed', 'valid', 'invalid'],
  style: {
    position: 'relative',
    boxSizing: 'border-box',
    marginTop: 15,
    fontFamily: 'inherit',
    textAlign: 'justify',
    textJustify: 'distribute-all-lines',
    fontSize: 0,
    $collapsed: {
      display: 'none'
    }
  }
}]]);
var templates$7 =
/*#__PURE__*/
Object.freeze({
  action: action,
  collapseIcons: collapseIcons,
  default: template$7
});var GroupField;

GroupField = function () {
  class GroupField extends Field$1 {
    constructor() {
      super(...arguments);
      this._calcFocusState = this._calcFocusState.bind(this);
      this._calcBlurState = this._calcBlurState.bind(this);
      this._emitSubmit = this.emit.bind(this, 'submit');
      this.state.collapsed = this.settings.startCollapsed && this.settings.collapsable;

      if (this._value == null) {
        this._value = Object.create(null);
      }

      this.fields = Object.create(null);
      this.fieldsArray = [];

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      var field, name, ref, values;
      values = Object.create(null);
      ref = this.fields;

      for (name in ref) {
        field = ref[name];
        values[name] = field.value;
      }

      return values;
    }

    _setValue(newValue) {
      var name, value;

      if (IS$1$1.object(newValue)) {
        for (name in newValue) {
          value = newValue[name];

          if (this.fields[name]) {
            this.fields[name].value = value;
          }
        }

        return newValue;
      }
    }

    _recalcDisplay() {
      var field, i, len, ref;
      ref = this.fieldsArray;

      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];

        if (field._recalcDisplay) {
          field._recalcDisplay();
        }
      }
    }

    _createElements() {
      var config, field, fields, forceOpts, i, len, margin, name, ref, ref1;
      forceOpts = {
        relatedInstance: this
      };
      margin = `0 0 ${this.settings.fieldMargin}px 0`;
      this.el = this.template.spawn(this.settings.templates.default, forceOpts);

      if (this.settings.collapsable) {
        this.addAction('collapse', this.templates.collapseIcons);
      }

      if (IS$1$1.array(this.settings.fields)) {
        fields = Object.create(null);
        ref = this.settings.fields;

        for (i = 0, len = ref.length; i < len; i++) {
          field = ref[i];

          if (!field.name) {
            throw new Error(`field ${this.name || this.ID}:group fields provided in array format must have a name`);
          }

          fields[field.name] = field;
        }

        this.settings.fields = fields;
      }

      ref1 = this.settings.fields;

      for (name in ref1) {
        field = ref1[name];
        config = primaryBuilder$1({
          margin,
          fieldInstances: this.fields
        }, field, {
          ID: name
        });
        this.fieldsArray.push(this.fields[name] = this.builder(config).appendTo(this.el.child.innerwrap));
        this.fields[name].on('focus', this._calcFocusState).on('blur', this._calcBlurState).on('submit', this._emitSubmit).el.style('verticalAlign', this.settings.fieldAlign).after(' ');
      }

      this.el.child.innerwrap.append(quickdom.div({
        style: {
          display: 'inline-block',
          width: '100%'
        }
      }));
      this.el.state('collapsable', this.settings.collapsable);
      this.el.raw._quickField = this.el.childf.innerwrap.raw._quickField = this;
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_display();

      this._attachBindings_stateTriggers();

      this._attachBindings_value();
    }

    _attachBindings_elState() {
      simplybind('visible').of(this.state).to(visible => {
        return this.el.state('visible', visible);
      });
      simplybind('hovered').of(this.state).to(hovered => {
        return this.el.state('hover', hovered);
      });
      simplybind('focused').of(this.state).to(focused => {
        return this.el.state('focus', focused);
      });
      simplybind('disabled').of(this.state).to(disabled => {
        return this.el.state('disabled', disabled);
      });
      simplybind('showLabel').of(this.state).to(showLabel => {
        return this.el.state('showLabel', showLabel);
      });
      simplybind('showError').of(this.state).to(showError => {
        return this.el.state('showError', showError);
      });
      simplybind('showHelp').of(this.state).to(showHelp => {
        return this.el.state('showHelp', showHelp);
      });
      simplybind('collapsed').of(this.state).to(collapsed => {
        return this.el.state('collapsed', collapsed);
      });
      return simplybind('valid').of(this.state).to(valid => {
        this.el.state('valid', valid);
        return this.el.state('invalid', !valid);
      });
    }

    _attachBindings_display() {
      var field, i, len, ref;
      simplybind('width').of(this.state).to(width => {
        return this.el.style('width', width).state('definedWidth', width !== 'auto');
      }).transform(this._formatWidth.bind(this)).updateOn('isMobile').of(this.state);
      ref = this.fieldsArray;

      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];
        simplybind('disabled').of(this.state).to('disabled').of(field.state);
      }
    }

    _attachBindings_stateTriggers() {
      var toggleCollapse;

      if (this.settings.collapsable) {
        toggleCollapse = () => {
          this.state.collapsed = !this.state.collapsed;
          return this.emit('collapsed', this.state.collapsed);
        };

        simplybind('event:click').of(this.el.child.collapse).to(toggleCollapse);
        simplybind('event:click').of(this.el.child.label).to(toggleCollapse);
        simplybind('collapsed').of(this.state).once.to(() => {
          return this._recalcDisplay();
        }).condition(function (collapsed) {
          return !collapsed;
        });
      }
    }

    _attachBindings_value() {
      var field, fieldName, ref;
      ref = this.fields;

      for (fieldName in ref) {
        field = ref[fieldName];
        simplybind('_value').of(field).to(fieldName).of(this._value);
        simplybind('_value', {
          updateOnBind: false
        }).of(field).to(value => {
          if (value) {
            this.state.interacted = true;
          }

          this.state.valid = this.validate(void 0, true);
          return this.emit('input', this._value);
        });
      }
    }

    _validate(providedValue, testUnrequired, report) {
      var field, i, isValid, len, ref, someInvalid;
      someInvalid = false;
      ref = this.fieldsArray;

      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];

        if (!field.state.visible) {
          continue;
        }

        if (report) {
          isValid = field.validateAndReport(providedValue[field.name], testUnrequired);
        } else {
          isValid = field.validate(providedValue[field.name], testUnrequired);
        }

        if (!isValid) {
          someInvalid = true;
        }
      }

      return !someInvalid;
    }

    _calcFocusState() {
      return this.state.focused = this.fieldsArray.some(function (field) {
        return field.state.focused;
      });
    }

    _calcBlurState() {
      return setTimeout(this._calcFocusState);
    }

    focus() {
      var field, i, len, ref;
      this.state.collapsed = false;
      ref = this.fieldsArray;

      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];

        if (field.focus) {
          return field.focus();
        }
      }
    }

    blur() {
      var field, i, len, ref;
      ref = this.fieldsArray;

      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];

        if (field.blur) {
          return field.blur();
        }
      }
    }

    addAction(name, icons, callback, prepend) {
      var action$$1, i, icon, len;

      if (icons && !IS$1$1.array(icons)) {
        icons = [icons];
      }

      action$$1 = this.templates.action.spawn(this.settings.templates.action, {
        relatedInstance: this
      });
      action$$1.ref = action$$1.options.ref = name;

      for (i = 0, len = icons.length; i < len; i++) {
        icon = icons[i];
        action$$1.child.icon.append(icon);
      }

      this.el.child.actions[prepend ? 'prepend' : 'append'](action$$1);

      if (callback) {
        simplybind('event:click').of(action$$1).to(callback);
      }

      return action$$1;
    }

  }

  GroupField.prototype.template = template$7;
  GroupField.prototype.templates = templates$7;
  GroupField.prototype.defaults = defaults$8;
  GroupField.prototype.shallowSettings = ['fields'];
  return GroupField;
}.call(undefined);

var GroupField$1 = GroupField;var template$8 = quickdom.template(['div', {
  ref: 'field',
  style: {
    position: 'relative',
    boxSizing: 'border-box',
    verticalAlign: 'top',
    display: 'none',
    width: function (field) {
      return field.state.width;
    },
    fontFamily: function (field) {
      return field.settings.fontFamily;
    },
    borderRadius: 3,
    textAlign: 'left',
    $visible: {
      display: 'inline-block'
    },
    $showError: {
      animation: '0.2s fieldErrorShake'
    }
  }
}, ['div', {
  ref: 'label',
  style: {
    display: 'none',
    fontFamily: 'inherit',
    fontSize: '16px',
    fontWeight: 600,
    textAlign: 'left',
    color: COLORS$1.black,
    cursor: 'default',
    userSelect: 'none',
    $showLabel: {
      display: 'block'
    },
    $showError: {
      color: COLORS$1.red
    }
  }
}], ['div', {
  ref: 'collapse',
  style: {
    position: 'absolute',
    top: 5,
    right: 0,
    lineHeight: 0,
    fontSize: 0,
    display: 'none',
    $showLabel: {
      $collapsable: {
        display: 'block'
      }
    }
  }
}, ['div', {
  ref: 'icon',
  style: {
    width: 17,
    height: 17,
    color: COLORS$1.grey,
    fill: COLORS$1.grey,
    $hover: {
      color: COLORS$1.grey_dark,
      fill: COLORS$1.grey_dark
    }
  }
}, ...collapseIcons]], ['div', {
  ref: 'help',
  style: {
    marginTop: '10px',
    fontFamily: 'inherit',
    fontSize: '11px',
    color: COLORS$1.grey,
    display: 'none',
    $showError: {
      color: COLORS$1.red,
      display: 'block'
    },
    $showHelp: {
      display: 'block'
    }
  }
}], ['div', {
  ref: 'innerwrap',
  unpassableStates: ['visible', 'hover', 'focus', 'disabled', 'showLabel', 'showError', 'showHelp', 'collapsed', 'valid', 'invalid'],
  style: {
    position: 'relative',
    boxSizing: 'border-box',
    marginTop: 15,
    fontFamily: 'inherit',
    textAlign: 'justify',
    textJustify: 'distribute-all-lines',
    fontSize: 0,
    $collapsed: {
      display: 'none'
    }
  }
}, ['div', {
  ref: 'addButton',
  style: {
    position: 'relative',
    verticalAlign: 'middle',
    boxSizing: 'border-box',
    padding: 12,
    backgroundColor: COLORS$1.grey_semi_light,
    borderRadius: 3,
    cursor: 'pointer',
    userSelect: 'none',
    lineHeight: '1em',
    textAlign: 'center',
    $disabled: {
      display: 'none'
    },
    $inlineStyle: {
      display: 'inline-block',
      top: function (field) {
        return field.settings.groupMargin / 2 * -1;
      }
    }
  }
}, ['div', {
  style: {
    display: 'inline-block',
    width: 15,
    height: 15,
    color: COLORS$1.black,
    fill: COLORS$1.black
  }
}, plus]]]]);
var cloneIcon = clone$1.extend({
  options: {
    style: {
      width: 11
    }
  }
});
var removeIcon = remove$1.extend({
  options: {
    style: {
      width: 11
    }
  }
});
var blockGroup = {};
var inlineGroup = {
  default: {
    // options: style:
    // 	verticalAlign: 'middle'
    children: {
      innerwrap: {
        options: {
          style: {
            display: 'inline-block',
            verticalAlign: 'middle',
            marginTop: 0
          }
        }
      },
      actions: {
        options: {
          events: {
            inserted: function () {
              return this.insertAfter(this.parent.child.innerwrap);
            }
          },
          style: {
            position: 'static',
            verticalAlign: 'middle',
            display: 'inline-table'
          }
        }
      }
    }
  },
  action: ['div', {
    events: {
      inserted: function () {
        if (this.index) {
          return this.style('borderTop', `1px solid ${COLORS$1.grey}`);
        }
      }
    },
    style: {
      boxSizing: 'border-box',
      display: 'table-row',
      padding: 4
    }
  }, ['div', {
    ref: 'icon',
    style: {
      verticalAlign: 'middle',
      display: 'table-cell',
      color: COLORS$1.black,
      fill: COLORS$1.black,
      opacity: 0.6,
      $hover: {
        opacity: 1
      }
    }
  }]]
};
var templates$8 =
/*#__PURE__*/
Object.freeze({
  default: template$8,
  cloneIcon: cloneIcon,
  removeIcon: removeIcon,
  blockGroup: blockGroup,
  inlineGroup: inlineGroup
});var defaults$9 = {
  fields: null,
  style: 'block',
  collapsable: true,
  startCollapsed: false,
  groupMargin: 10,
  groupWidth: '100%',
  autoWidth: true,
  autoRemoveEmpty: false,
  dynamicLabel: false,
  minItems: null,
  maxItems: null,
  draggable: false,
  cloneable: false,
  removeable: true,
  singleMode: false,
  numbering: false,
  multiple: true,
  dragdrop: true,
  groupSettings: {
    labelSize: 14,
    inline: {
      padding: 0,
      fieldMargin: 0,
      width: 'auto',
      collapsable: false,
      startCollapsed: false,
      templates: inlineGroup
    },
    block: {
      startCollapsed: false,
      templates: blockGroup
    }
  }
};var atoa = function atoa(a, n) {
  return Array.prototype.slice.call(a, n);
};var si = typeof setImmediate === 'function',
    tick;

if (si) {
  tick = function (fn) {
    setImmediate(fn);
  };
} else {
  tick = function (fn) {
    setTimeout(fn, 0);
  };
}

var tickyBrowser = tick;var debounce = function debounce(fn, args, ctx) {
  if (!fn) {
    return;
  }

  tickyBrowser(function run() {
    fn.apply(ctx || null, args || []);
  });
};var emitter = function emitter(thing, options) {
  var opts = options || {};
  var evt = {};

  if (thing === undefined) {
    thing = {};
  }

  thing.on = function (type, fn) {
    if (!evt[type]) {
      evt[type] = [fn];
    } else {
      evt[type].push(fn);
    }

    return thing;
  };

  thing.once = function (type, fn) {
    fn._once = true; // thing.off(fn) still works!

    thing.on(type, fn);
    return thing;
  };

  thing.off = function (type, fn) {
    var c = arguments.length;

    if (c === 1) {
      delete evt[type];
    } else if (c === 0) {
      evt = {};
    } else {
      var et = evt[type];

      if (!et) {
        return thing;
      }

      et.splice(et.indexOf(fn), 1);
    }

    return thing;
  };

  thing.emit = function () {
    var args = atoa(arguments);
    return thing.emitterSnapshot(args.shift()).apply(this, args);
  };

  thing.emitterSnapshot = function (type) {
    var et = (evt[type] || []).slice(0);
    return function () {
      var args = atoa(arguments);
      var ctx = this || thing;

      if (type === 'error' && opts.throws !== false && !et.length) {
        throw args.length === 1 ? args[0] : args;
      }

      et.forEach(function emitter(listen) {
        if (opts.async) {
          debounce(listen, args, ctx);
        } else {
          listen.apply(ctx, args);
        }

        if (listen._once) {
          thing.off(type, listen);
        }
      });
      return thing;
    };
  };

  return thing;
};var NativeCustomEvent = commonjsGlobal.CustomEvent;

function useNative() {
  try {
    var p = new NativeCustomEvent('cat', {
      detail: {
        foo: 'bar'
      }
    });
    return 'cat' === p.type && 'bar' === p.detail.foo;
  } catch (e) {}

  return false;
}
/**
 * Cross-browser `CustomEvent` constructor.
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.CustomEvent
 *
 * @public
 */


var customEvent = useNative() ? NativeCustomEvent : // IE >= 9
'function' === typeof document.createEvent ? function CustomEvent(type, params) {
  var e = document.createEvent('CustomEvent');

  if (params) {
    e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);
  } else {
    e.initCustomEvent(type, false, false, void 0);
  }

  return e;
} : // IE <= 8
function CustomEvent(type, params) {
  var e = document.createEventObject();
  e.type = type;

  if (params) {
    e.bubbles = Boolean(params.bubbles);
    e.cancelable = Boolean(params.cancelable);
    e.detail = params.detail;
  } else {
    e.bubbles = false;
    e.cancelable = false;
    e.detail = void 0;
  }

  return e;
};var eventmap = [];
var eventname = '';
var ron = /^on/;

for (eventname in commonjsGlobal) {
  if (ron.test(eventname)) {
    eventmap.push(eventname.slice(2));
  }
}

var eventmap_1 = eventmap;var doc = commonjsGlobal.document;
var addEvent = addEventEasy;
var removeEvent = removeEventEasy;
var hardCache = [];

if (!commonjsGlobal.addEventListener) {
  addEvent = addEventHard;
  removeEvent = removeEventHard;
}

var crossvent = {
  add: addEvent,
  remove: removeEvent,
  fabricate: fabricateEvent
};

function addEventEasy(el, type, fn, capturing) {
  return el.addEventListener(type, fn, capturing);
}

function addEventHard(el, type, fn) {
  return el.attachEvent('on' + type, wrap$1(el, type, fn));
}

function removeEventEasy(el, type, fn, capturing) {
  return el.removeEventListener(type, fn, capturing);
}

function removeEventHard(el, type, fn) {
  var listener = unwrap$1(el, type, fn);

  if (listener) {
    return el.detachEvent('on' + type, listener);
  }
}

function fabricateEvent(el, type, model) {
  var e = eventmap_1.indexOf(type) === -1 ? makeCustomEvent() : makeClassicEvent();

  if (el.dispatchEvent) {
    el.dispatchEvent(e);
  } else {
    el.fireEvent('on' + type, e);
  }

  function makeClassicEvent() {
    var e;

    if (doc.createEvent) {
      e = doc.createEvent('Event');
      e.initEvent(type, true, true);
    } else if (doc.createEventObject) {
      e = doc.createEventObject();
    }

    return e;
  }

  function makeCustomEvent() {
    return new customEvent(type, {
      detail: model
    });
  }
}

function wrapperFactory(el, type, fn) {
  return function wrapper(originalEvent) {
    var e = originalEvent || commonjsGlobal.event;
    e.target = e.target || e.srcElement;

    e.preventDefault = e.preventDefault || function preventDefault() {
      e.returnValue = false;
    };

    e.stopPropagation = e.stopPropagation || function stopPropagation() {
      e.cancelBubble = true;
    };

    e.which = e.which || e.keyCode;
    fn.call(el, e);
  };
}

function wrap$1(el, type, fn) {
  var wrapper = unwrap$1(el, type, fn) || wrapperFactory(el, type, fn);
  hardCache.push({
    wrapper: wrapper,
    element: el,
    type: type,
    fn: fn
  });
  return wrapper;
}

function unwrap$1(el, type, fn) {
  var i = find$1(el, type, fn);

  if (i) {
    var wrapper = hardCache[i].wrapper;
    hardCache.splice(i, 1); // free up a tad of memory

    return wrapper;
  }
}

function find$1(el, type, fn) {
  var i, item;

  for (i = 0; i < hardCache.length; i++) {
    item = hardCache[i];

    if (item.element === el && item.type === type && item.fn === fn) {
      return i;
    }
  }
}var cache = {};
var start = '(?:^|\\s)';
var end = '(?:\\s|$)';

function lookupClass(className) {
  var cached = cache[className];

  if (cached) {
    cached.lastIndex = 0;
  } else {
    cache[className] = cached = new RegExp(start + className + end, 'g');
  }

  return cached;
}

function addClass$1(el, className) {
  var current = el.className;

  if (!current.length) {
    el.className = className;
  } else if (!lookupClass(className).test(current)) {
    el.className += ' ' + className;
  }
}

function rmClass(el, className) {
  el.className = el.className.replace(lookupClass(className), ' ').trim();
}

var classes = {
  add: addClass$1,
  rm: rmClass
};var doc$1 = document;
var documentElement = doc$1.documentElement;

function dragula(initialContainers, options) {
  var len = arguments.length;

  if (len === 1 && Array.isArray(initialContainers) === false) {
    options = initialContainers;
    initialContainers = [];
  }

  var _mirror; // mirror image


  var _source; // source container


  var _item; // item being dragged


  var _offsetX; // reference x


  var _offsetY; // reference y


  var _moveX; // reference move x


  var _moveY; // reference move y


  var _initialSibling; // reference sibling when grabbed


  var _currentSibling; // reference sibling now


  var _copy; // item used for copying


  var _renderTimer; // timer for setTimeout renderMirrorImage


  var _lastDropTarget = null; // last container item was over

  var _grabbed; // holds mousedown context until first mousemove


  var o = options || {};

  if (o.moves === void 0) {
    o.moves = always;
  }

  if (o.accepts === void 0) {
    o.accepts = always;
  }

  if (o.invalid === void 0) {
    o.invalid = invalidTarget;
  }

  if (o.containers === void 0) {
    o.containers = initialContainers || [];
  }

  if (o.isContainer === void 0) {
    o.isContainer = never;
  }

  if (o.copy === void 0) {
    o.copy = false;
  }

  if (o.copySortSource === void 0) {
    o.copySortSource = false;
  }

  if (o.revertOnSpill === void 0) {
    o.revertOnSpill = false;
  }

  if (o.removeOnSpill === void 0) {
    o.removeOnSpill = false;
  }

  if (o.direction === void 0) {
    o.direction = 'vertical';
  }

  if (o.ignoreInputTextSelection === void 0) {
    o.ignoreInputTextSelection = true;
  }

  if (o.mirrorContainer === void 0) {
    o.mirrorContainer = doc$1.body;
  }

  var drake = emitter({
    containers: o.containers,
    start: manualStart,
    end: end,
    cancel: cancel,
    remove: remove,
    destroy: destroy,
    canMove: canMove,
    dragging: false
  });

  if (o.removeOnSpill === true) {
    drake.on('over', spillOver).on('out', spillOut);
  }

  events();
  return drake;

  function isContainer(el) {
    return drake.containers.indexOf(el) !== -1 || o.isContainer(el);
  }

  function events(remove) {
    var op = remove ? 'remove' : 'add';
    touchy(documentElement, op, 'mousedown', grab);
    touchy(documentElement, op, 'mouseup', release);
  }

  function eventualMovements(remove) {
    var op = remove ? 'remove' : 'add';
    touchy(documentElement, op, 'mousemove', startBecauseMouseMoved);
  }

  function movements(remove) {
    var op = remove ? 'remove' : 'add';
    crossvent[op](documentElement, 'selectstart', preventGrabbed); // IE8

    crossvent[op](documentElement, 'click', preventGrabbed);
  }

  function destroy() {
    events(true);
    release({});
  }

  function preventGrabbed(e) {
    if (_grabbed) {
      e.preventDefault();
    }
  }

  function grab(e) {
    _moveX = e.clientX;
    _moveY = e.clientY;
    var ignore = whichMouseButton(e) !== 1 || e.metaKey || e.ctrlKey;

    if (ignore) {
      return; // we only care about honest-to-god left clicks and touch events
    }

    var item = e.target;
    var context = canStart(item);

    if (!context) {
      return;
    }

    _grabbed = context;
    eventualMovements();

    if (e.type === 'mousedown') {
      if (isInput(item)) {
        // see also: https://github.com/bevacqua/dragula/issues/208
        item.focus(); // fixes https://github.com/bevacqua/dragula/issues/176
      } else {
        e.preventDefault(); // fixes https://github.com/bevacqua/dragula/issues/155
      }
    }
  }

  function startBecauseMouseMoved(e) {
    if (!_grabbed) {
      return;
    }

    if (whichMouseButton(e) === 0) {
      release({});
      return; // when text is selected on an input and then dragged, mouseup doesn't fire. this is our only hope
    } // truthy check fixes #239, equality fixes #207


    if (e.clientX !== void 0 && e.clientX === _moveX && e.clientY !== void 0 && e.clientY === _moveY) {
      return;
    }

    if (o.ignoreInputTextSelection) {
      var clientX = getCoord('clientX', e);
      var clientY = getCoord('clientY', e);
      var elementBehindCursor = doc$1.elementFromPoint(clientX, clientY);

      if (isInput(elementBehindCursor)) {
        return;
      }
    }

    var grabbed = _grabbed; // call to end() unsets _grabbed

    eventualMovements(true);
    movements();
    end();
    start(grabbed);
    var offset = getOffset(_item);
    _offsetX = getCoord('pageX', e) - offset.left;
    _offsetY = getCoord('pageY', e) - offset.top;
    classes.add(_copy || _item, 'gu-transit');
    renderMirrorImage();
    drag(e);
  }

  function canStart(item) {
    if (drake.dragging && _mirror) {
      return;
    }

    if (isContainer(item)) {
      return; // don't drag container itself
    }

    var handle = item;

    while (getParent(item) && isContainer(getParent(item)) === false) {
      if (o.invalid(item, handle)) {
        return;
      }

      item = getParent(item); // drag target should be a top element

      if (!item) {
        return;
      }
    }

    var source = getParent(item);

    if (!source) {
      return;
    }

    if (o.invalid(item, handle)) {
      return;
    }

    var movable = o.moves(item, source, handle, nextEl(item));

    if (!movable) {
      return;
    }

    return {
      item: item,
      source: source
    };
  }

  function canMove(item) {
    return !!canStart(item);
  }

  function manualStart(item) {
    var context = canStart(item);

    if (context) {
      start(context);
    }
  }

  function start(context) {
    if (isCopy(context.item, context.source)) {
      _copy = context.item.cloneNode(true);
      drake.emit('cloned', _copy, context.item, 'copy');
    }

    _source = context.source;
    _item = context.item;
    _initialSibling = _currentSibling = nextEl(context.item);
    drake.dragging = true;
    drake.emit('drag', _item, _source);
  }

  function invalidTarget() {
    return false;
  }

  function end() {
    if (!drake.dragging) {
      return;
    }

    var item = _copy || _item;
    drop(item, getParent(item));
  }

  function ungrab() {
    _grabbed = false;
    eventualMovements(true);
    movements(true);
  }

  function release(e) {
    ungrab();

    if (!drake.dragging) {
      return;
    }

    var item = _copy || _item;
    var clientX = getCoord('clientX', e);
    var clientY = getCoord('clientY', e);
    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);

    if (dropTarget && (_copy && o.copySortSource || !_copy || dropTarget !== _source)) {
      drop(item, dropTarget);
    } else if (o.removeOnSpill) {
      remove();
    } else {
      cancel();
    }
  }

  function drop(item, target) {
    var parent = getParent(item);

    if (_copy && o.copySortSource && target === _source) {
      parent.removeChild(_item);
    }

    if (isInitialPlacement(target)) {
      drake.emit('cancel', item, _source, _source);
    } else {
      drake.emit('drop', item, target, _source, _currentSibling);
    }

    cleanup();
  }

  function remove() {
    if (!drake.dragging) {
      return;
    }

    var item = _copy || _item;
    var parent = getParent(item);

    if (parent) {
      parent.removeChild(item);
    }

    drake.emit(_copy ? 'cancel' : 'remove', item, parent, _source);
    cleanup();
  }

  function cancel(revert) {
    if (!drake.dragging) {
      return;
    }

    var reverts = arguments.length > 0 ? revert : o.revertOnSpill;
    var item = _copy || _item;
    var parent = getParent(item);
    var initial = isInitialPlacement(parent);

    if (initial === false && reverts) {
      if (_copy) {
        if (parent) {
          parent.removeChild(_copy);
        }
      } else {
        _source.insertBefore(item, _initialSibling);
      }
    }

    if (initial || reverts) {
      drake.emit('cancel', item, _source, _source);
    } else {
      drake.emit('drop', item, parent, _source, _currentSibling);
    }

    cleanup();
  }

  function cleanup() {
    var item = _copy || _item;
    ungrab();
    removeMirrorImage();

    if (item) {
      classes.rm(item, 'gu-transit');
    }

    if (_renderTimer) {
      clearTimeout(_renderTimer);
    }

    drake.dragging = false;

    if (_lastDropTarget) {
      drake.emit('out', item, _lastDropTarget, _source);
    }

    drake.emit('dragend', item);
    _source = _item = _copy = _initialSibling = _currentSibling = _renderTimer = _lastDropTarget = null;
  }

  function isInitialPlacement(target, s) {
    var sibling;

    if (s !== void 0) {
      sibling = s;
    } else if (_mirror) {
      sibling = _currentSibling;
    } else {
      sibling = nextEl(_copy || _item);
    }

    return target === _source && sibling === _initialSibling;
  }

  function findDropTarget(elementBehindCursor, clientX, clientY) {
    var target = elementBehindCursor;

    while (target && !accepted()) {
      target = getParent(target);
    }

    return target;

    function accepted() {
      var droppable = isContainer(target);

      if (droppable === false) {
        return false;
      }

      var immediate = getImmediateChild(target, elementBehindCursor);
      var reference = getReference(target, immediate, clientX, clientY);
      var initial = isInitialPlacement(target, reference);

      if (initial) {
        return true; // should always be able to drop it right back where it was
      }

      return o.accepts(_item, target, _source, reference);
    }
  }

  function drag(e) {
    if (!_mirror) {
      return;
    }

    e.preventDefault();
    var clientX = getCoord('clientX', e);
    var clientY = getCoord('clientY', e);
    var x = clientX - _offsetX;
    var y = clientY - _offsetY;
    _mirror.style.left = x + 'px';
    _mirror.style.top = y + 'px';
    var item = _copy || _item;
    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);
    var changed = dropTarget !== null && dropTarget !== _lastDropTarget;

    if (changed || dropTarget === null) {
      out();
      _lastDropTarget = dropTarget;
      over();
    }

    var parent = getParent(item);

    if (dropTarget === _source && _copy && !o.copySortSource) {
      if (parent) {
        parent.removeChild(item);
      }

      return;
    }

    var reference;
    var immediate = getImmediateChild(dropTarget, elementBehindCursor);

    if (immediate !== null) {
      reference = getReference(dropTarget, immediate, clientX, clientY);
    } else if (o.revertOnSpill === true && !_copy) {
      reference = _initialSibling;
      dropTarget = _source;
    } else {
      if (_copy && parent) {
        parent.removeChild(item);
      }

      return;
    }

    if (reference === null && changed || reference !== item && reference !== nextEl(item)) {
      _currentSibling = reference;
      dropTarget.insertBefore(item, reference);
      drake.emit('shadow', item, dropTarget, _source);
    }

    function moved(type) {
      drake.emit(type, item, _lastDropTarget, _source);
    }

    function over() {
      if (changed) {
        moved('over');
      }
    }

    function out() {
      if (_lastDropTarget) {
        moved('out');
      }
    }
  }

  function spillOver(el) {
    classes.rm(el, 'gu-hide');
  }

  function spillOut(el) {
    if (drake.dragging) {
      classes.add(el, 'gu-hide');
    }
  }

  function renderMirrorImage() {
    if (_mirror) {
      return;
    }

    var rect = _item.getBoundingClientRect();

    _mirror = _item.cloneNode(true);
    _mirror.style.width = getRectWidth(rect) + 'px';
    _mirror.style.height = getRectHeight(rect) + 'px';
    classes.rm(_mirror, 'gu-transit');
    classes.add(_mirror, 'gu-mirror');
    o.mirrorContainer.appendChild(_mirror);
    touchy(documentElement, 'add', 'mousemove', drag);
    classes.add(o.mirrorContainer, 'gu-unselectable');
    drake.emit('cloned', _mirror, _item, 'mirror');
  }

  function removeMirrorImage() {
    if (_mirror) {
      classes.rm(o.mirrorContainer, 'gu-unselectable');
      touchy(documentElement, 'remove', 'mousemove', drag);
      getParent(_mirror).removeChild(_mirror);
      _mirror = null;
    }
  }

  function getImmediateChild(dropTarget, target) {
    var immediate = target;

    while (immediate !== dropTarget && getParent(immediate) !== dropTarget) {
      immediate = getParent(immediate);
    }

    if (immediate === documentElement) {
      return null;
    }

    return immediate;
  }

  function getReference(dropTarget, target, x, y) {
    var horizontal = o.direction === 'horizontal';
    var reference = target !== dropTarget ? inside() : outside();
    return reference;

    function outside() {
      // slower, but able to figure out any position
      var len = dropTarget.children.length;
      var i;
      var el;
      var rect;

      for (i = 0; i < len; i++) {
        el = dropTarget.children[i];
        rect = el.getBoundingClientRect();

        if (horizontal && rect.left + rect.width / 2 > x) {
          return el;
        }

        if (!horizontal && rect.top + rect.height / 2 > y) {
          return el;
        }
      }

      return null;
    }

    function inside() {
      // faster, but only available if dropped inside a child element
      var rect = target.getBoundingClientRect();

      if (horizontal) {
        return resolve(x > rect.left + getRectWidth(rect) / 2);
      }

      return resolve(y > rect.top + getRectHeight(rect) / 2);
    }

    function resolve(after) {
      return after ? nextEl(target) : target;
    }
  }

  function isCopy(item, container) {
    return typeof o.copy === 'boolean' ? o.copy : o.copy(item, container);
  }
}

function touchy(el, op, type, fn) {
  var touch = {
    mouseup: 'touchend',
    mousedown: 'touchstart',
    mousemove: 'touchmove'
  };
  var pointers = {
    mouseup: 'pointerup',
    mousedown: 'pointerdown',
    mousemove: 'pointermove'
  };
  var microsoft = {
    mouseup: 'MSPointerUp',
    mousedown: 'MSPointerDown',
    mousemove: 'MSPointerMove'
  };

  if (commonjsGlobal.navigator.pointerEnabled) {
    crossvent[op](el, pointers[type], fn);
  } else if (commonjsGlobal.navigator.msPointerEnabled) {
    crossvent[op](el, microsoft[type], fn);
  } else {
    crossvent[op](el, touch[type], fn);
    crossvent[op](el, type, fn);
  }
}

function whichMouseButton(e) {
  if (e.touches !== void 0) {
    return e.touches.length;
  }

  if (e.which !== void 0 && e.which !== 0) {
    return e.which;
  } // see https://github.com/bevacqua/dragula/issues/261


  if (e.buttons !== void 0) {
    return e.buttons;
  }

  var button = e.button;

  if (button !== void 0) {
    // see https://github.com/jquery/jquery/blob/99e8ff1baa7ae341e94bb89c3e84570c7c3ad9ea/src/event.js#L573-L575
    return button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
  }
}

function getOffset(el) {
  var rect = el.getBoundingClientRect();
  return {
    left: rect.left + getScroll('scrollLeft', 'pageXOffset'),
    top: rect.top + getScroll('scrollTop', 'pageYOffset')
  };
}

function getScroll(scrollProp, offsetProp) {
  if (typeof commonjsGlobal[offsetProp] !== 'undefined') {
    return commonjsGlobal[offsetProp];
  }

  if (documentElement.clientHeight) {
    return documentElement[scrollProp];
  }

  return doc$1.body[scrollProp];
}

function getElementBehindPoint(point, x, y) {
  var p = point || {};
  var state = p.className;
  var el;
  p.className += ' gu-hide';
  el = doc$1.elementFromPoint(x, y);
  p.className = state;
  return el;
}

function never() {
  return false;
}

function always() {
  return true;
}

function getRectWidth(rect) {
  return rect.width || rect.right - rect.left;
}

function getRectHeight(rect) {
  return rect.height || rect.bottom - rect.top;
}

function getParent(el) {
  return el.parentNode === doc$1 ? null : el.parentNode;
}

function isInput(el) {
  return el.tagName === 'INPUT' || el.tagName === 'TEXTAREA' || el.tagName === 'SELECT' || isEditable$1(el);
}

function isEditable$1(el) {
  if (!el) {
    return false;
  } // no parents were editable


  if (el.contentEditable === 'false') {
    return false;
  } // stop the lookup


  if (el.contentEditable === 'true') {
    return true;
  } // found a contentEditable element in the chain


  return isEditable$1(getParent(el)); // contentEditable is set to 'inherit'
}

function nextEl(el) {
  return el.nextElementSibling || manually();

  function manually() {
    var sibling = el;

    do {
      sibling = sibling.nextSibling;
    } while (sibling && sibling.nodeType !== 1);

    return sibling;
  }
}

function getEventHost(e) {
  // on touchend event, we have to use `e.changedTouches`
  // see http://stackoverflow.com/questions/7192563/touchend-event-properties
  // see https://github.com/bevacqua/dragula/issues/34
  if (e.targetTouches && e.targetTouches.length) {
    return e.targetTouches[0];
  }

  if (e.changedTouches && e.changedTouches.length) {
    return e.changedTouches[0];
  }

  return e;
}

function getCoord(coord, e) {
  var host = getEventHost(e);
  var missMap = {
    pageX: 'clientX',
    // IE8
    pageY: 'clientY' // IE8

  };

  if (coord in missMap && !(coord in host) && missMap[coord] in host) {
    coord = missMap[coord];
  }

  return host[coord];
}

var dragula_1 = dragula;(function () {
  var css = ".gu-mirror {\n  position: fixed !important;\n  margin: 0 !important;\n  z-index: 9999 !important;\n  opacity: 0.8;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=80)\";\n  filter: alpha(opacity=80);\n}\n.gu-hide {\n  display: none !important;\n}\n.gu-unselectable {\n  -webkit-user-select: none !important;\n  -moz-user-select: none !important;\n  -ms-user-select: none !important;\n  user-select: none !important;\n}\n.gu-transit {\n  opacity: 0.2;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=20)\";\n  filter: alpha(opacity=20);\n}\n";
  var head = document.getElementsByTagName('head')[0];
  var sheet = document.createElement('style');
  sheet.setAttribute('data-file', '/Users/danielkalen/sandbox/quickfield/node_modules/dragula/dist/dragula.css');
  sheet.innerHTML = css;
  head.appendChild(sheet);
})();

var RepeaterField;

RepeaterField = function () {
  class RepeaterField extends Field$1 {
    constructor() {
      var base, diff$$1;
      super(...arguments);
      this._calcFocusState = this._calcFocusState.bind(this);
      this._calcBlurState = this._calcBlurState.bind(this);
      this._emitSubmit = this.emit.bind(this, 'submit');
      this.groupLabel = IS$1$1.string(this.settings.numbering) ? this.settings.numbering : 'Item';
      this.labelRegex = new RegExp(`^${this.groupLabel} \\d+(?:\: )?`);
      this.state.collapsed = this.settings.startCollapsed && this.settings.collapsable;

      if (this._value == null) {
        this._value = [];
      }

      this.settings._groupSettings = primaryBuilder$1.notKeys(['inline', 'block']).clone(this.settings.groupSettings);
      this.settings.groupSettings = primaryBuilder$1.keys(['inline', 'block']).clone(this.settings.groupSettings);

      if (this.settings.style === 'block') {
        this.settings.autoWidth = true;
      }

      if (this.settings.field) {
        this.settings.singleMode = true;
      }

      if (this.settings.singleMode) {
        this.settings.fields = [this.settings.field || this.settings.fields];
      }

      if ((base = this.settings).value == null) {
        base.value = [];
      }

      if (this.settings.minItems && this.settings.value.length < this.settings.minItems) {
        diff$$1 = this.settings.minItems - this.settings.value.length;

        while (--diff$$1) {
          this.settings.value.push(null);
        }
      }

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      var group, i, index, len, ref, values;
      values = [];
      ref = this._value;

      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        group = ref[index];
        values[index] = group.value;
      }

      return values;
    }

    _setValue(newValue) {
      var i, index, len, value;

      if (!IS$1$1.array(newValue)) {
        this.addItem(newValue, false, true);
      } else {
        for (index = i = 0, len = newValue.length; i < len; index = ++i) {
          value = newValue[index];

          if (this._value[index] != null) {
            this._value[index].value = value;
          } else {
            this.addItem(value, false, true);
          }
        }
      }

      return newValue;
    }

    _createElements() {
      var forceOpts;
      forceOpts = {
        relatedInstance: this
      };
      this.el = this.template.spawn(this.settings.templates.default, forceOpts);
      this.el.state('collapsable', this.settings.collapsable);
      this.el.state(`${this.settings.style}Style`, true);
      this.el.raw._quickField = this.el.childf.innerwrap.raw._quickField = this;

      if (this.settings.dragdrop) {
        this.dragger = dragula_1([this.el.child.innerwrap.raw], {
          revertOnSpill: true,
          invalid: function (el) {
            var ref;
            return ((ref = el._quickElement) != null ? ref.ref : void 0) === 'addButton';
          }
        }); // moves: (_, __, el)-> el._quickElement?.ref is 'header'

        this.dragger.on('drop', () => {
          return this.reOrganize();
        });
      }
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_display();

      this._attachBindings_stateTriggers();

      this._attachBindings_value();
    }

    _attachBindings_elState() {
      simplybind('visible').of(this.state).to(visible => {
        return this.el.state('visible', visible);
      });
      simplybind('disabled').of(this.state).to(disabled => {
        return this.el.state('disabled', disabled);
      });
      simplybind('showLabel').of(this.state).to(showLabel => {
        return this.el.state('showLabel', showLabel);
      });
      simplybind('showError').of(this.state).to(showError => {
        return this.el.state('showError', showError);
      });
      simplybind('showHelp').of(this.state).to(showHelp => {
        return this.el.state('showHelp', showHelp);
      });
      simplybind('collapsed').of(this.state).to(collapsed => {
        return this.el.state('collapsed', collapsed);
      });
      return simplybind('valid').of(this.state).to(valid => {
        this.el.state('valid', valid);
        return this.el.state('invalid', !valid);
      });
    }

    _attachBindings_display() {
      var group, i, len, ref;
      simplybind('width').of(this.state).to(width => {
        return this.el.style('width', width).state('definedWidth', width !== 'auto');
      }).transform(this._formatWidth.bind(this)).updateOn('isMobile').of(this.state);
      simplybind('showError', {
        updateOnBind: false
      }).of(this.state).to(showError => {
        var group, i, len, ref, results;
        ref = this._value;
        results = [];

        for (i = 0, len = ref.length; i < len; i++) {
          group = ref[i];
          results.push(group.state.showError = showError);
        }

        return results;
      });
      ref = this._value;

      for (i = 0, len = ref.length; i < len; i++) {
        group = ref[i];
        simplybind('disabled').of(this.state).to('disabled').of(field.state);
      }
    }

    _attachBindings_stateTriggers() {
      var toggleCollapse;

      if (this.settings.collapsable) {
        toggleCollapse = () => {
          this.state.collapsed = !this.state.collapsed;
          return this.emit('collapsed', this.state.collapsed);
        };

        simplybind('event:click').of(this.el.child.collapse).to(toggleCollapse);
        simplybind('event:click').of(this.el.child.label).to(toggleCollapse);
        simplybind('collapsed').of(this.state).once.to(() => {
          return this._recalcDisplay();
        }).condition(function (collapsed) {
          return !collapsed;
        });
      }
    }

    _attachBindings_value() {
      simplybind('array:_value', {
        updateOnBind: true
      }).of(this).to((value, prevValue) => {
        if (value.length) {
          this._recalcLabels();
        }

        if (prevValue) {
          this.state.interacted = true;
          return this.state.valid = this.validate(void 0, true);
        }
      });
      simplybind('event:click').of(this.el.child.addButton).to(() => {
        return this.addItem().focus();
      });
    }

    _validate(providedValue, testUnrequired) {
      var group, i, isValid, len, ref;
      ref = this._value;

      for (i = 0, len = ref.length; i < len; i++) {
        group = ref[i];
        isValid = group.validate(providedValue[group.name], testUnrequired);

        if (!isValid) {
          return false;
        }
      }

      return true;
    }

    _calcFocusState() {
      return this.state.focused = this._value.some(function (field) {
        return field.state.focused;
      });
    }

    _calcBlurState() {
      return setTimeout(this._calcFocusState);
    }

    focus() {
      var ref;
      return (ref = this._value[0]) != null ? ref.focus() : void 0;
    }

    blur() {
      var field, i, len, ref;
      ref = this._value;

      for (i = 0, len = ref.length; i < len; i++) {
        field = ref[i];

        if (field.blur) {
          field.blur();
        }
      }
    }

    _recalcLabels() {
      var group, i, index, len, ref;

      if (this.settings.style === 'block') {
        if (!this.settings.numbering && !this.settings.dynamicLabel) {
          return;
        }

        ref = this._value;

        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          group = ref[index];

          this._recalcLabel(group, index);
        }
      }
    }

    _recalcLabel(group, index) {
      var existingLabel, newLabel;

      if (this.settings.dynamicLabel && group.fields[this.settings.dynamicLabel]) {
        newLabel = group.fields[this.settings.dynamicLabel].value;
      } else {
        existingLabel = group.state.label || '';
        existingLabel = existingLabel.replace(this.labelRegex, '');
        newLabel = `${this.groupLabel} ${index + 1}`;

        if (existingLabel) {
          newLabel += `: ${existingLabel}`;
        }
      }

      return group.state.label = newLabel;
    }

    _recalcDisplay() {
      var group, i, len, ref;
      ref = this._value;

      for (i = 0, len = ref.length; i < len; i++) {
        group = ref[i];

        if (group._recalcDisplay) {
          group._recalcDisplay();
        }
      }
    }

    addItem(value, skipInsert, skipEmit) {
      var firstField, group, margin, refreshChildren, settings;

      if (this.settings.maxItems && this._value.length === this.settings.maxItems || this.state.disabled) {
        return;
      }

      margin = this.settings.style === 'inline' ? `0 ${this.settings.groupMargin}px ${this.settings.groupMargin}px 0` : `0 0 ${this.settings.groupMargin}px 0`;
      settings = primaryBuilder$1({
        type: 'group',
        fields: this.settings.fields,
        margin,
        value
      }, this.settings._groupSettings, this.settings.groupSettings[this.settings.style]);

      if (this.settings.singleMode) {
        firstField = this.settings.fields[0].name;

        settings.getter = function (fields) {
          return fields[firstField];
        };

        settings.setter = function (value) {
          return {
            [`${firstField}`]: value
          };
        };
      }

      group = this.builder(settings);
      group.el.child.actions.append(this.settings.groupSettings[this.settings.style]);

      if (this.settings.cloneable) {
        group.addAction('clone', this.templates.cloneIcon, this.cloneItem.bind(this, group), this.settings.style === 'block');
      }

      if (this.settings.removeable) {
        group.addAction('remove', this.templates.removeIcon, this.removeItem.bind(this, group), this.settings.style === 'block');
      }

      group.on('focus', this._calcFocusState);
      group.on('blur', this._calcBlurState);
      group.on('submit', this._emitSubmit);
      simplybind('event:input').of(group).to(() => {
        return this.emit('input', this._value, group);
      });
      simplybind('disabled').of(this.state).to('disabled').of(group.state);
      refreshChildren = group.el.childf;

      if (this.settings.dynamicLabel) {
        group.on('input', () => {
          return this._recalcLabel(group);
        });
      }

      if (this.settings.autoRemoveEmpty) {
        group.once('blur', () => {
          if (!group.state.interacted) {
            return this.removeItem(group);
          }
        });
      }

      if (!this.settings.autoWidth) {
        group.state.width = this.settings.groupWidth;
        group.el.child.innerwrap.once('inserted', function () {
          return this.style('width', `calc(100% - ${this.parent.child.actions.width || 17}px)`);
        });
      }

      if (!skipInsert) {
        group.insertBefore(this.el.child.addButton);

        if (!skipEmit) {
          this.emit('itemAdd', group);
        }

        this._value.push(group);
      }

      return group;
    }

    cloneItem(group) {
      var clone;

      if (this.settings.maxItems && this._value.length === this.settings.maxItems || this.state.disabled) {
        return;
      }

      if (!includes$2(this._value, group)) {
        return;
      }

      clone = this.addItem(group.value, true);
      clone.insertAfter(group.el);
      insertAfter$1(this._value, group, clone);
      this.emit('itemAdd', clone);
      this.emit('itemClone', clone);
      this.reOrganize();
      return clone;
    }

    removeItem(group) {
      var ref, removed, targetIndex;

      if (this.settings.minItems && this._value.length === this.settings.minItems || this.state.disabled) {
        return;
      }

      targetIndex = Math.max(1, this._value.indexOf(group));

      if (removed = removeItem$1(this._value, group)) {
        group.destroy();
        this.emit('itemRemove', group);

        if ((ref = this._value[targetIndex - 1]) != null) {
          ref.focus();
        }
      }

      this.reOrganize();
      return !!removed;
    }

    reOrganize() {
      var children;
      children = [].slice.call(this.el.child.innerwrap.raw.childNodes, 0, -1);
      return this._value = children.map(function (entry) {
        return entry._quickField;
      });
    }

  }

  RepeaterField.prototype.template = template$8;
  RepeaterField.prototype.templates = templates$8;
  RepeaterField.prototype.defaults = defaults$9;
  RepeaterField.prototype.shallowSettings = ['fields'];
  return RepeaterField;
}.call(undefined);

var RepeaterField$1 = RepeaterField;var defaults$a = {
  alwaysValid: false,
  labelClicks: false,
  size: 15,
  fontSize: 13,
  display: 'block',
  colors: {
    text: COLORS$1.grey,
    symbol: COLORS$1.orange,
    background: 'white'
  }
};var template$9 = quickdom.template(['div', {
  ref: 'field',
  style: {
    position: 'relative',
    display: 'none',
    width: function (field) {
      return field.state.width;
    },
    boxSizing: 'border-box',
    fontFamily: function (field) {
      return field.settings.fontFamily;
    },
    textAlign: 'left',
    $visible: {
      display: 'inline-block'
    },
    $showError: {
      animation: '0.2s fieldErrorShake'
    }
  }
}, ['div', {
  ref: 'innerwrap',
  style: {
    position: 'relative',
    boxSizing: 'border-box',
    fontFamily: 'inherit',
    display: 'flex',
    flexWrap: 'nowrap',
    alignContent: 'flex-start',
    alignItems: 'flex-start'
  }
}, ['div', {
  ref: 'input',
  style: {
    position: 'relative',
    alignSelf: 'start',
    zIndex: 2,
    flexGrow: 0,
    flexShrink: 0,
    width: function (field) {
      return field.settings.size;
    },
    height: function (field) {
      return field.settings.size;
    },
    margin: '0 auto',
    backgroundColor: function (field) {
      return field.settings.colors.background;
    },
    border: `1px solid ${COLORS$1.grey_light}`,
    borderRadius: 3,
    cursor: 'pointer'
  }
}, [// $toggled:
// 	borderColor: (field)-> field.settings.colors.symbol
'div', {
  ref: 'checkmark',
  style: {
    position: 'absolute',
    zIndex: 2,
    left: 0,
    right: 0,
    top: '50%',
    transform: 'translateY(-50%)',
    width: function (field) {
      return field.settings.size / 1.5;
    },
    height: function (field) {
      return field.settings.size / 1.5;
    },
    margin: '0 auto',
    boxSizing: 'border-box',
    lineHeight: 0,
    userSelect: 'none',
    display: 'none',
    $toggled: {
      display: 'block'
    }
  }
}, checkmark.extend({
  style: {
    width: '100%',
    height: '100%',
    stroke: function (field) {
      return field.settings.colors.symbol;
    },
    outline: 'none'
  }
})]], ['div', {
  ref: 'label',
  style: {
    display: 'none',
    marginLeft: 5,
    fontFamily: 'inherit',
    fontSize: function (field) {
      return field.settings.fontSize;
    },
    color: COLORS$1.black,
    cursor: 'default',
    userSelect: 'none',
    $showLabel: {
      display: 'block'
    },
    $showError: {
      color: COLORS$1.red
    }
  }
}]], ['div', {
  ref: 'help',
  style: {
    marginTop: '10px',
    fontFamily: 'inherit',
    fontSize: '11px',
    color: COLORS$1.grey,
    display: 'none',
    $showError: {
      color: COLORS$1.red,
      display: 'block'
    },
    $showHelp: {
      display: 'block'
    }
  }
}]]);
var templates$9 =
/*#__PURE__*/
Object.freeze({
  default: template$9
});var CheckboxField;

CheckboxField = function () {
  class CheckboxField extends Field$1 {
    constructor() {
      super(...arguments);
      this._value = !!this._value;
      this.settings.size = parseFloat(this.settings.size) || defaults$a.size;

      if (this.settings.display !== 'block' && this.settings.display !== 'inline') {
        this.settings.display = defaults$a.display;
      }

      this._createElements();

      this._attachBindings();

      this._constructorEnd();
    }

    _getValue() {
      return this._value;
    }

    _setValue(newValue) {
      return this._value = !!newValue;
    }

    _createElements() {
      var forceOpts;
      forceOpts = {
        relatedInstance: this
      };
      this.el = this.template.spawn(this.settings.templates.default, forceOpts);
      this.el.child.innerwrap.raw._quickField = this;
    }

    _attachBindings() {
      this._attachBindings_elState();

      this._attachBindings_stateTriggers();

      this._attachBindings_display();

      this._attachBindings_value();

      setTimeout(() => {
        return simplybind('label').of(this.state).to('html').of(this.el.child.label);
      });
    }

    _attachBindings_value() {
      simplybind('_value').of(this).to(value => {
        return this.el.state('toggled', value);
      });
      simplybind('_value', {
        updateOnBind: false
      }).of(this).to(value => {
        return this.emit('input', value);
      });
      simplybind("event:click").of(this.el.child.input).to(() => {
        return this.value = !this._value;
      });

      if (this.settings.labelClicks) {
        simplybind("event:click").of(this.el.child.label).to(() => {
          return this.value = !this._value;
        });
      }
    }

    _validate(providedValue) {
      if (this.settings.validWhenTrue) {
        if (!providedValue) {
          return false;
        }
      }

      return true;
    }

  }

  CheckboxField.prototype.template = template$9;
  CheckboxField.prototype.templates = templates$9;
  CheckboxField.prototype.defaults = defaults$a;
  return CheckboxField;
}.call(undefined);

inheritProto(CheckboxField, ChoiceField$1, ['_attachBindings_elState', '_attachBindings_stateTriggers', '_attachBindings_display']);
var CheckboxField$1 = CheckboxField;var assert$1, emitEvent, expect$1;
chai$2.use(chaiDom);
chai$2.use(sources);
chai$2.use(chaiAlmost_1);
chai$2.use(asserttype);
chai$2.use(chaiEvents);
chai$2.config.truncateThreshold = 1e3;
mocha.setup('tdd');
mocha.slow(400);
mocha.timeout(12000);

if (!window.__karma__) {
  mocha.bail();
}

assert$1 = chai$2.assert;
expect$1 = chai$2.expect;
window.sandbox = null;
quickfield$1$1.register('textarea', TextareaField$1);
quickfield$1$1.register('number', NumberField$1);
quickfield$1$1.register('select', SelectField$1);
quickfield$1$1.register('choice', ChoiceField$1);
quickfield$1$1.register('truefalse', TrueFalseField$1);
quickfield$1$1.register('toggle', ToggleField$1);
quickfield$1$1.register('group', GroupField$1);
quickfield$1$1.register('repeater', RepeaterField$1);
quickfield$1$1.register('checkbox', CheckboxField$1); // quickfield.register('file', FileField)

window.quickfield = quickfield$1$1;

emitEvent = function (target, event, trigger) {
  var promise;
  promise = pEvent(target, event);
  trigger();
  return promise;
};

suite("QuickField", function () {
  teardown(function () {
    var lastChild;
    lastChild = sandbox.children[sandbox.children.length - 1];

    if ((lastChild != null ? lastChild.ref : void 0) === 'testTitle') {
      return lastChild.remove();
    }
  });
  suiteSetup(function () {
    return restartSandbox$1();
  });
  suite("creation", function () {
    teardown(restartSandbox$1);
    test("text field", function () {
      var field;
      field = quickfield$1$1({
        type: 'text'
      }).appendTo(sandbox);
      assert$1.equal(field.el.parent, sandbox);
      return assert$1.equal(field.el.child.input.attr('type'), 'text');
    });
    test("textarea field", function () {
      var field;
      field = quickfield$1$1({
        type: 'textarea'
      }).appendTo(sandbox);
      return assert$1.equal(field.el.parent, sandbox);
    });
    test("number field", function () {
      var field;
      field = quickfield$1$1({
        type: 'number'
      }).appendTo(sandbox);
      return assert$1.equal(field.el.parent, sandbox);
    });
    test("select field", function () {
      var field;
      field = quickfield$1$1({
        type: 'select'
      }).appendTo(sandbox);
      return assert$1.equal(field.el.parent, sandbox);
    });
    test("choice field", function () {
      var field;
      field = quickfield$1$1({
        type: 'choice',
        choices: ['a', 'b']
      }).appendTo(sandbox);
      return assert$1.equal(field.el.parent, sandbox);
    });
    test("truefalse field", function () {
      var field;
      field = quickfield$1$1({
        type: 'truefalse'
      }).appendTo(sandbox);
      return assert$1.equal(field.el.parent, sandbox);
    });
    test("toggle field", function () {
      var field;
      field = quickfield$1$1({
        type: 'toggle'
      }).appendTo(sandbox);
      return assert$1.equal(field.el.parent, sandbox);
    });
    return suite("misc", function () {
      return test("with multiple options object", function () {
        var config, field1, field2;
        config = {
          type: 'text',
          label: 'abc',
          value: '123'
        };
        field1 = quickfield$1$1(config);
        field2 = quickfield$1$1(config, {
          label: 'def'
        }, {
          height: 50,
          value: '456'
        });
        expect$1(config).to.eql({
          type: 'text',
          label: 'abc',
          value: '123'
        });
        expect$1(field1.settings.label).to.equal('abc');
        expect$1(field2.settings.label).to.equal('def');
        expect$1(field1.settings.height).to.equal(46);
        expect$1(field2.settings.height).to.equal(50);
        expect$1(field1.value).to.equal('123');
        return expect$1(field2.value).to.equal('456');
      });
    });
  });
  suite("text field", function () {
    suiteSetup(function () {
      addTitle("text field");
      return this.control = quickfield$1$1({
        type: 'text',
        label: 'Regular'
      }).appendTo(sandbox);
    });
    teardown(function () {
      return this.control.value = '';
    });
    test("getter/setter", function () {
      var fieldA, fieldB, fieldC, getter, setter;

      getter = function (value) {
        return `example.com/${value}`;
      };

      setter = function (value) {
        return value.toLowerCase();
      };

      fieldA = quickfield$1$1({
        type: 'text',
        label: 'path',
        getter
      });
      fieldB = quickfield$1$1({
        type: 'text',
        label: 'path',
        setter
      });
      fieldC = quickfield$1$1({
        type: 'text',
        label: 'path',
        getter,
        setter
      });
      expect$1(fieldA.value).to.equal('example.com/');
      expect$1(fieldA.el.child.input.raw.value).to.equal('');
      expect$1(fieldB.value).to.equal('');
      expect$1(fieldB.el.child.input.raw.value).to.equal('');
      expect$1(fieldC.value).to.equal('example.com/');
      expect$1(fieldC.el.child.input.raw.value).to.equal('');
      simulateKeys(fieldA.el.child.input.raw, 'AbC');
      simulateKeys(fieldB.el.child.input.raw, 'AbC');
      simulateKeys(fieldC.el.child.input.raw, 'AbC');
      expect$1(fieldA.value).to.equal('example.com/AbC');
      expect$1(fieldA.el.child.input.raw.value).to.equal('AbC');
      expect$1(fieldB.value).to.equal('abc');
      expect$1(fieldB.el.child.input.raw.value).to.equal('abc');
      expect$1(fieldC.value).to.equal('example.com/abc');
      expect$1(fieldC.el.child.input.raw.value).to.equal('abc');
      fieldA.value = 'DeF';
      fieldB.value = 'DeF';
      fieldC.value = 'DeF';
      expect$1(fieldA.value).to.equal('example.com/DeF');
      expect$1(fieldA.el.child.input.raw.value).to.equal('DeF');
      expect$1(fieldB.value).to.equal('def');
      expect$1(fieldB.el.child.input.raw.value).to.equal('def');
      expect$1(fieldC.value).to.equal('example.com/def');
      return expect$1(fieldC.el.child.input.raw.value).to.equal('def');
    });
    test("with help message", function () {
      var field;
      field = quickfield$1$1({
        type: 'text',
        label: 'With Help Message',
        help: 'help <b>message</b> here'
      }).appendTo(sandbox);
      expect$1(field.el.text).to.include('help message here');
      expect$1(field.els.help.html).to.equal('help <b>message</b> here');
      expect$1(this.control.els.help.html).to.equal('');
      expect$1(this.control.el.raw).to.have.style('marginBottom', '0px');
      expect$1(field.el.raw).to.have.style('marginBottom', '25px');
      field.state.help = '';
      expect$1(field.el.raw).to.have.style('marginBottom', '0px');
      expect$1(field.els.help.html).to.equal('');
      field.state.error = 'abc123';
      expect$1(field.el.raw).to.have.style('marginBottom', '0px');
      expect$1(field.els.help.html).to.equal('');
      field.state.showError = true;
      expect$1(field.el.raw).to.have.style('marginBottom', '25px');
      expect$1(field.els.help.html).to.equal('abc123');
      field.state.help = 'def456';
      expect$1(field.el.raw).to.have.style('marginBottom', '25px');
      expect$1(field.els.help.html).to.equal('def456');
      field.state.help = '';
      field.state.showError = false;
      expect$1(field.el.raw).to.have.style('marginBottom', '25px');
      return expect$1(field.els.help.html).to.equal('help <b>message</b> here');
    });
    test("without label", function () {
      var initialTop, withLabel, withoutLabel;
      withLabel = quickfield$1$1({
        type: 'text',
        label: 'With Label'
      }).appendTo(sandbox);
      withoutLabel = quickfield$1$1({
        type: 'text',
        placeholder: 'Without Label'
      }).appendTo(sandbox);
      quickdom.batch([withLabel.els.label, withLabel.els.innerwrap, withLabel.els.input, withoutLabel.els.label, withoutLabel.els.innerwrap, withoutLabel.els.input]).style('transition', null);
      assert$1.equal(withLabel.el.child.placeholder.html, 'With Label');
      assert$1.equal(withLabel.el.child.label.html, 'With Label');
      assert$1.equal(withLabel.el.child.label.style('opacity'), '0');
      assert$1.equal(withoutLabel.el.child.placeholder.html, 'Without Label');
      assert$1.notEqual(withoutLabel.el.child.label.html, 'Without Label');
      assert$1.equal(withoutLabel.el.child.label.style('opacity'), '0');
      initialTop = {
        withLabel: withLabel.el.child.input.rect.top,
        withoutLabel: withoutLabel.el.child.input.rect.top
      };
      withLabel.value = 'abc123';
      withoutLabel.value = 'abc123';
      assert$1.notEqual(withLabel.el.child.input.rect.top, initialTop.withLabel);
      assert$1.equal(withoutLabel.el.child.input.rect.top, initialTop.withoutLabel);
      assert$1.equal(withLabel.el.child.label.style('opacity'), '1');
      return assert$1.equal(withoutLabel.el.child.label.style('opacity'), '0');
    });
    test("with icon", function () {
      var iconField;
      return iconField = quickfield$1$1({
        type: 'text',
        label: 'With Icon',
        icon: 'B'
      }).appendTo(sandbox);
    });
    test("custom height/fontsize", function () {
      var fieldA, fieldB;
      fieldA = quickfield$1$1({
        type: 'text',
        label: 'Custom Height',
        height: 40,
        fontSize: 13,
        autoWidth: true
      }).appendTo(sandbox);
      fieldB = quickfield$1$1({
        type: 'text',
        label: 'Custom Height',
        height: 60,
        fontSize: 16,
        autoWidth: true
      }).appendTo(sandbox);
      assert$1.isAtLeast(this.control.el.height, this.control.settings.height);
      assert$1.isAtMost(this.control.el.height, this.control.settings.height + 5);
      assert$1.isAtLeast(fieldA.el.height, 40);
      assert$1.isAtMost(fieldA.el.height, 45);
      assert$1.isAtLeast(fieldB.el.height, 60);
      return assert$1.isAtMost(fieldB.el.height, 65);
    });
    test("custom border", function () {
      var custom;
      custom = quickfield$1$1({
        type: 'text',
        label: 'Custom Border',
        border: '0 0 2px 0'
      }).appendTo(sandbox);
      assert$1.deepEqual(getBorderSides(this.control.el.child.innerwrap), {
        top: '1px',
        left: '1px',
        right: '1px',
        bottom: '1px'
      });
      return assert$1.deepEqual(getBorderSides(custom.el.child.innerwrap), {
        top: '0px',
        left: '0px',
        right: '0px',
        bottom: '2px'
      });
    });
    test("default value", function () {
      var fieldA, fieldB, fieldC;
      fieldA = quickfield$1$1({
        type: 'text'
      });
      fieldB = quickfield$1$1({
        type: 'text',
        defaultValue: 'valueB'
      });
      fieldC = quickfield$1$1({
        type: 'text',
        value: 'valueC'
      });
      assert$1.equal(fieldA.value, '');
      assert$1.equal(fieldA.el.child.input.raw.value, '');
      assert$1.equal(fieldB.value, 'valueB');
      assert$1.equal(fieldB.el.child.input.raw.value, 'valueB');
      assert$1.equal(fieldC.value, 'valueC');
      return assert$1.equal(fieldC.el.child.input.raw.value, 'valueC');
    });
    test("disabled", function () {
      var fieldA, fieldB;
      fieldA = quickfield$1$1({
        type: 'text',
        label: 'Disabled',
        autoWidth: true,
        disabled: true
      }).appendTo(sandbox);
      fieldB = quickfield$1$1({
        type: 'text',
        label: 'Disabled w/ value',
        autoWidth: true,
        disabled: true,
        value: 'abc123'
      }).appendTo(sandbox);
      window.assert = assert$1;
      expect$1(this.control.value).to.equal('');
      expect$1(this.control.el.child.input.raw.value).to.equal('');
      expect$1(this.control.el.child.innerwrap.raw).to.have.style('backgroundColor', 'white');
      expect$1(fieldA.value).to.equal('');
      expect$1(fieldA.el.child.input.raw.value).to.equal('');
      expect$1(fieldA.el.child.innerwrap.raw).to.have.style('backgroundColor', COLORS.grey_light);
      expect$1(fieldB.value).to.equal('abc123');
      expect$1(fieldB.el.child.input.raw.value).to.equal('abc123');
      return expect$1(fieldB.el.child.innerwrap.raw).to.have.style('backgroundColor', COLORS.grey_light);
    }); // expect(@control.state.focused).to.equal false
    // @control.focus()
    // expect(@control.state.focused).to.equal true
    // expect(fieldA.state.focused).to.equal false
    // fieldA.focus()
    // Promise.delay(5).then ()->
    // 	expect(fieldA.state.focused).to.equal false

    test("conditions", function () {
      var master, slave;
      master = quickfield$1$1({
        type: 'text',
        label: 'Master Field',
        ID: 'masterField',
        mask: 'aaa-111',
        required: true,
        autoWidth: true
      }).appendTo(sandbox);
      return slave = quickfield$1$1({
        type: 'text',
        label: 'Slave Field',
        conditions: [{
          target: 'masterField'
        }],
        autoWidth: true
      }).appendTo(sandbox);
    });
    test("autowidth", function () {
      var field;
      return field = quickfield$1$1({
        type: 'text',
        label: 'Autowidth',
        autoWidth: true,
        checkmark: false
      }).appendTo(sandbox);
    });
    test("input event", function () {
      var count, field, input;
      count = 0;
      field = this.control;
      input = field.els.input.raw;
      field.on('input', function () {
        return count++;
      });
      return Promise.resolve().then(function () {
        return expect$1(count).to.equal(0);
      }).then(function () {
        return emitEvent(field, 'input', () => {
          return field.value = 'change';
        });
      }).then(function () {
        return expect$1(count).to.equal(1);
      }).then(function () {
        return emitEvent(field, 'input', () => {
          return field.value = 'change2';
        });
      }).then(function () {
        return expect$1(count).to.equal(2);
      }).then(function () {
        return emitEvent(field, 'input', () => {
          return simulateKeys(input, 'a');
        });
      }).then(function () {
        return expect$1(count).to.equal(3);
      }).then(function () {
        return emitEvent(field, 'input', () => {
          return simulateKeys(input, 'abc');
        });
      }).then(function () {
        return expect$1(count).to.equal(6);
      });
    });
    suite("options/autocomplete", function () {
      suiteSetup(function () {
        this.field = quickfield$1$1({
          type: 'text',
          label: 'My options field',
          choices: ['apple', 'banana', 'orange', 'banana republic', {
            label: 'orange split',
            value: 'split'
          }]
        }).appendTo(sandbox);
        this.choices = this.field.dropdown.choices;
        this.dropdownEl = this.field.dropdown.els.container.raw;
        return this.inputEl = this.field.el.child.input.raw;
      });
      teardown(function () {
        this.field.blur();
        return this.field.value = '';
      });
      test("triggering", function () {
        return Promise.bind(this).then(function () {
          var promise;
          expect$1(this.dropdownEl).not.to.be.displayed;
          promise = pEvent(this.field.el.child.input, 'focus');
          this.field.focus();
          return promise;
        }).then(function () {
          var promise;
          expect$1(this.dropdownEl).not.to.be.displayed;
          simulateKeys(this.inputEl, 'a');
          expect$1(this.dropdownEl).to.be.displayed;
          promise = pEvent(this.field.el.child.input, 'blur');
          this.field.blur();
          return promise;
        }).then(function () {
          expect$1(this.dropdownEl).not.to.be.displayed;
          this.field.focus();
          simulateAction(this.inputEl, 'down');
          return expect$1(this.dropdownEl).not.to.be.displayed;
        }).then(function () {
          simulateKeys(this.inputEl, 'a');
          return expect$1(this.dropdownEl).to.be.displayed;
        }).then(function () {
          var promise;
          promise = pEvent(this.field.el.child.input, 'blur');
          this.field.blur();
          return promise;
        }).then(function () {
          this.field.dropdown.isOpen = true;
          expect$1(this.dropdownEl).to.be.displayed;
          this.field.dropdown.isOpen = false;
          return expect$1(this.dropdownEl).not.to.be.displayed;
        });
      });
      test("highlighting", function () {
        this.field.focus();
        simulateKeys(this.inputEl, 'a');
        expect$1(this.field.dropdown.currentHighlighted).to.equal(null);
        simulateAction(this.inputEl, 'down');
        expect$1(this.field.dropdown.currentHighlighted).to.equal(this.choices[0]);
        simulateAction(this.inputEl, 'down');
        simulateAction(this.inputEl, 'down');
        expect$1(this.field.dropdown.currentHighlighted).to.equal(this.choices[2]);
        simulateAction(this.inputEl, 'down');
        simulateAction(this.inputEl, 'down');
        expect$1(this.field.dropdown.currentHighlighted).to.equal(this.choices[4]);
        simulateAction(this.inputEl, 'down');
        expect$1(this.field.dropdown.currentHighlighted).to.equal(this.choices[0]);
        simulateAction(this.inputEl, 'up');
        expect$1(this.field.dropdown.currentHighlighted).to.equal(this.choices[4]);
        simulateAction(this.inputEl, 'up');
        expect$1(this.field.dropdown.currentHighlighted).to.equal(this.choices[3]);
        this.field.blur();
        return expect$1(this.field.dropdown.currentHighlighted).to.equal(null);
      });
      test("filtering", function () {
        var getVisible;

        getVisible = () => {
          return this.choices.filter(function (choice) {
            return choice.visible;
          }).map(function (choice) {
            return choice.value;
          });
        };

        this.field.focus();
        expect$1(getVisible()).to.eql(['apple', 'banana', 'orange', 'banana republic', 'split']);
        simulateKeys(this.inputEl, 'ban');
        expect$1(getVisible()).to.eql(['banana', 'banana republic']);
        simulateKeys(this.inputEl, 'ana');
        expect$1(getVisible()).to.eql(['banana', 'banana republic']);
        simulateKeys(this.inputEl, ' ');
        expect$1(getVisible()).to.eql(['banana republic']);
        this.field.value = 'ora';
        return expect$1(getVisible()).to.eql(['orange', 'split']);
      });
      return test("selecting", function () {
        this.field.focus();
        expect$1(this.field.value).to.equal('');
        this.choices[1].el.emit('click');
        expect$1(this.field.value).to.equal('banana');
        expect$1(this.inputEl.value).to.equal('banana');
        this.field.focus();
        this.field.state.typing = true;
        this.field.value = 'ora';
        simulateAction(this.inputEl, 'down');
        simulateAction(this.inputEl, 'down');
        expect$1(this.field.dropdown.currentHighlighted).to.equal(this.choices[4]);
        expect$1(this.field.value).to.equal('ora');
        expect$1(this.inputEl.value).to.equal('ora');
        simulateAction(this.inputEl, 'enter');
        expect$1(this.field.value).to.equal('split');
        expect$1(this.inputEl.value).to.equal('orange split');
        this.field.value = 'orange';
        expect$1(this.field.value).to.equal('orange');
        expect$1(this.inputEl.value).to.equal('orange');
        this.field.value = 'orange split';
        expect$1(this.field.value).to.equal('split');
        return expect$1(this.inputEl.value).to.equal('orange split');
      });
    });
    suite("keyboard/custom-type", function () {
      test("password", function () {
        var field;
        return field = quickfield$1$1({
          type: 'text',
          label: 'Password',
          keyboard: 'password'
        }).appendTo(sandbox);
      });
      test("email", function () {
        var field;
        field = quickfield$1$1({
          type: 'text',
          label: 'Email',
          ID: 'email',
          keyboard: 'email',
          required: true
        }).appendTo(sandbox);
        return field = quickfield$1$1({
          type: 'text',
          label: 'Email',
          keyboard: 'email',
          mask: {
            guide: false
          },
          required: true
        }).appendTo(sandbox);
      });
      return test("number (simluated)", function () {
        var field;
        return field = quickfield$1$1({
          type: 'text',
          label: 'Number (simluated)',
          keyboard: 'number',
          validWhenRegex: /[^0]/,
          autoWidth: true
        }).appendTo(sandbox);
      });
    });
    return suite("mask", function () {
      suiteSetup(function () {
        return addTitle('mask');
      });
      test("alpha", function () {
        var field;
        field = quickfield$1$1({
          type: 'text',
          label: 'Name',
          mask: 'NAME',
          width: '50%'
        }).appendTo(sandbox);
        return field = quickfield$1$1({
          type: 'text',
          label: 'Full Name',
          mask: 'FULLNAME',
          width: '50%'
        }).appendTo(sandbox);
      });
      test("numeric", function () {
        var field;
        field = quickfield$1$1({
          type: 'text',
          label: 'Phone',
          distance: 10,
          width: '50%',
          mobileWidth: '100%',
          mask: '(111) 111-1111'
        }).appendTo(sandbox);
        return field = quickfield$1$1({
          type: 'text',
          label: 'Phone',
          distance: 10,
          width: '50%',
          mobileWidth: '100%',
          keyboard: 'phone'
        }).appendTo(sandbox);
      });
      test("alphanumeric", function () {
        var field;
        return field = quickfield$1$1({
          type: 'text',
          label: 'Licence Plate',
          mask: {
            pattern: 'aaa-111',
            transform: function (v) {
              return v.toUpperCase();
            }
          }
        }).appendTo(sandbox);
      });
      test("prefix", function () {
        var field;
        return field = quickfield$1$1({
          type: 'text',
          label: 'Dollar',
          mask: {
            pattern: 'NUMBER',
            prefix: '$',
            decimal: true,
            sep: true
          }
        }).appendTo(sandbox);
      });
      test("date", function () {
        var field;
        field = quickfield$1$1({
          type: 'text',
          label: 'Date',
          keyboard: 'date',
          autoWidth: true
        }).appendTo(sandbox);
        return field = quickfield$1$1({
          type: 'text',
          label: 'Date',
          mask: {
            pattern: ['DATE', 'mm / yy']
          },
          autoWidth: true
        }).appendTo(sandbox);
      });
      test("literal", function () {
        var field;
        return field = quickfield$1$1({
          type: 'text',
          label: 'Literal',
          mask: 'My N\\ame is a+ K\\alen'
        }).appendTo(sandbox);
      });
      test("optionals", function () {
        var field;
        return field = quickfield$1$1({
          type: 'text',
          label: 'Optionals',
          mask: 'aaa[AAA]111'
        }).appendTo(sandbox);
      });
      return test("custom patterns", function () {
        var field;
        return field = quickfield$1$1({
          type: 'text',
          label: 'Only specific chars',
          mask: {
            pattern: '&&+-aa-111-[ aa+]',
            customPatterns: {
              '&': /[ab12]/,
              'a': /[0-4]/
            }
          }
        }).appendTo(sandbox);
      });
    });
  });
  suite("number field", function () {
    suiteSetup(function () {
      return addTitle('number field');
    });
    test("basic", function () {
      var field;
      return field = quickfield$1$1({
        type: 'number',
        label: 'Number',
        autoWidth: false
      }).appendTo(sandbox);
    });
    test.skip("getter/setter", function () {
      var fieldA, fieldB, fieldC, getter, setter;

      getter = function (value) {
        return (value || 0) * 10;
      };

      setter = function (value) {
        return (value || 0) * 2;
      };

      fieldA = quickfield$1$1({
        type: 'number',
        label: 'Number',
        autoWidth: true,
        getter
      });
      fieldB = quickfield$1$1({
        type: 'number',
        label: 'Number',
        autoWidth: true,
        setter
      });
      fieldC = quickfield$1$1({
        type: 'number',
        label: 'Number',
        autoWidth: true,
        getter,
        setter
      });
      expect$1(fieldA.value).to.equal(0);
      expect$1(fieldA.el.child.input.raw.value).to.equal('');
      expect$1(fieldB.value).to.equal(0);
      expect$1(fieldB.el.child.input.raw.value).to.equal('');
      expect$1(fieldC.value).to.equal(0);
      expect$1(fieldC.el.child.input.raw.value).to.equal('');
      simulateKeys(fieldA.el.child.input.raw, '3');
      simulateKeys(fieldB.el.child.input.raw, '3');
      simulateKeys(fieldC.el.child.input.raw, '3');
      expect$1(fieldA.value).to.equal(30);
      expect$1(fieldA.el.child.input.raw.value).to.equal('3');
      expect$1(fieldB.value).to.equal(6);
      expect$1(fieldB.el.child.input.raw.value).to.equal('6');
      expect$1(fieldC.value).to.equal(60);
      expect$1(fieldC.el.child.input.raw.value).to.equal('6');
      fieldA.value = 12;
      fieldB.value = 12;
      fieldC.value = 12;
      expect$1(fieldA.value).to.equal(120);
      expect$1(fieldA.el.child.input.raw.value).to.equal('12');
      expect$1(fieldB.value).to.equal(24);
      expect$1(fieldB.el.child.input.raw.value).to.equal('24');
      expect$1(fieldC.value).to.equal(240);
      return expect$1(fieldC.el.child.input.raw.value).to.equal('24');
    });
    test("min/max", function () {
      var field;
      return field = quickfield$1$1({
        type: 'number',
        label: 'Number (min/max)',
        minValue: 10,
        maxValue: 1000,
        autoWidth: true
      }).appendTo(sandbox);
    });
    test("min/max/step", function () {
      var field;
      return field = quickfield$1$1({
        type: 'number',
        label: 'Number (min/max/step)',
        minValue: 10,
        maxValue: 100,
        step: 3,
        autoWidth: true
      }).appendTo(sandbox);
    });
    test("min/max/step (enforced)", function () {
      var field;
      return field = quickfield$1$1({
        type: 'number',
        label: 'Number (enforced)',
        minValue: 10,
        maxValue: 100,
        step: 12,
        enforce: true,
        autoWidth: true
      }).appendTo(sandbox);
    });
    return test("decimal step", function () {
      var field;
      return field = quickfield$1$1({
        type: 'number',
        label: 'Number (decimal step)',
        minValue: 0.1,
        maxValue: 100,
        step: 0.1,
        autoWidth: true
      }).appendTo(sandbox);
    });
  });
  suite("textarea field", function () {
    suiteSetup(function () {
      return addTitle('textarea field');
    });
    test("basic", function () {
      var field;
      return field = quickfield$1$1({
        type: 'textarea',
        label: 'Textarea',
        width: '300px',
        height: '250px',
        autoHeight: false
      }).appendTo(sandbox);
    });
    test("getter/setter", function () {
      var fieldA, fieldB, fieldC, getter, setter;

      getter = function (value) {
        return `example.com/${value}`;
      };

      setter = function (value) {
        return value.toLowerCase();
      };

      fieldA = quickfield$1$1({
        type: 'textarea',
        label: 'path',
        getter
      });
      fieldB = quickfield$1$1({
        type: 'textarea',
        label: 'path',
        setter
      });
      fieldC = quickfield$1$1({
        type: 'textarea',
        label: 'path',
        getter,
        setter
      });
      expect$1(fieldA.value).to.equal('example.com/');
      expect$1(fieldA.el.child.input.raw.value).to.equal('');
      expect$1(fieldB.value).to.equal('');
      expect$1(fieldB.el.child.input.raw.value).to.equal('');
      expect$1(fieldC.value).to.equal('example.com/');
      expect$1(fieldC.el.child.input.raw.value).to.equal('');
      simulateKeys(fieldA.el.child.input.raw, 'AbC');
      simulateKeys(fieldB.el.child.input.raw, 'AbC');
      simulateKeys(fieldC.el.child.input.raw, 'AbC');
      expect$1(fieldA.value).to.equal('example.com/AbC');
      expect$1(fieldA.el.child.input.raw.value).to.equal('AbC');
      expect$1(fieldB.value).to.equal('abc');
      expect$1(fieldB.el.child.input.raw.value).to.equal('abc');
      expect$1(fieldC.value).to.equal('example.com/abc');
      expect$1(fieldC.el.child.input.raw.value).to.equal('abc');
      fieldA.value = 'DeF';
      fieldB.value = 'DeF';
      fieldC.value = 'DeF';
      expect$1(fieldA.value).to.equal('example.com/DeF');
      expect$1(fieldA.el.child.input.raw.value).to.equal('DeF');
      expect$1(fieldB.value).to.equal('def');
      expect$1(fieldB.el.child.input.raw.value).to.equal('def');
      expect$1(fieldC.value).to.equal('example.com/def');
      return expect$1(fieldC.el.child.input.raw.value).to.equal('def');
    });
    test("autoheight", function () {
      var field;
      return field = quickfield$1$1({
        type: 'textarea',
        label: 'Textarea (autoHeight)',
        width: '300px',
        maxHeight: 500
      }).appendTo(sandbox);
    });
    return test("autowidth", function () {
      var field;
      return field = quickfield$1$1({
        type: 'textarea',
        label: 'Textarea (autowidth)',
        autoWidth: true,
        maxWidth: 300
      }).appendTo(sandbox);
    });
  });
  suite("select field", function () {
    suiteSetup(function () {
      return addTitle('select field');
    });
    test("single selectable", function () {
      var field;
      return field = quickfield$1$1({
        type: 'select',
        label: 'My Choices (single)',
        choices: ['Apple', 'Apple Juice', 'Banana', 'Orange', {
          label: 'Lemon',
          value: 'lime',
          conditions: {
            'email': 'valid'
          }
        }]
      }).appendTo(sandbox);
    });
    test("multi selectable", function () {
      var field;
      field = quickfield$1$1({
        type: 'select',
        label: 'My Choices (multi)',
        choices: ['Apple', 'Banana', 'Orange', 'Lime', 'Kiwi'],
        multiple: true,
        defaultValue: 'Apple'
      }).appendTo(sandbox);
      return assert$1.equal(field.value, 'Apple');
    });
    test("default value", function () {
      var field;
      field = quickfield$1$1({
        type: 'select',
        label: 'My Choices (default)',
        choices: ['Apple', 'Banana', 'Orange', {
          label: 'Lemon',
          value: 'lime',
          conditions: {
            'email': 'valid'
          }
        }],
        value: 'Banana'
      }).appendTo(sandbox);
      assert$1.equal(field.value, 'Banana');
      field = quickfield$1$1({
        type: 'select',
        label: 'My Choices (default)',
        value: 'Banana'
      }).appendTo(sandbox);
      return assert$1.equal(field.value, 'Banana');
    });
    test("cusotm border", function () {
      var field;
      return field = quickfield$1$1({
        type: 'select',
        label: 'Custom Border',
        choices: ['Apple', 'Banana', 'Orange'],
        border: '0 0 2px 0',
        margin: '0 0 30px'
      }).appendTo(sandbox);
    });
    test("no choices", function () {
      var field;
      return field = quickfield$1$1({
        type: 'select',
        label: 'No choices',
        autoWidth: true
      }).appendTo(sandbox);
    });
    return test("many choices", function () {
      var field;
      return field = quickfield$1$1({
        type: 'select',
        label: 'Many Choices',
        choices: companyNames,
        autoWidth: true
      }).appendTo(sandbox);
    });
  });
  suite("choice field", function () {
    suiteSetup(function () {
      addTitle('choice field');
      this.control = quickfield$1$1({
        type: 'choice',
        choices: ['Apple', 'Banana', 'Orange'],
        required: true
      });
      return this.controlMulti = quickfield$1$1({
        type: 'choice',
        choices: ['Apple', 'Banana', 'Orange'],
        required: true,
        multiple: true
      });
    });
    test("single selectable", function () {
      var field;
      return field = quickfield$1$1({
        type: 'choice',
        label: 'My Choices (single)',
        choices: ['Apple', 'Banana', 'Orange']
      }).appendTo(sandbox);
    });
    test("multi selectable", function () {
      var field;
      return field = quickfield$1$1({
        type: 'choice',
        label: 'My Choices (multi)',
        choices: ['Apple', 'Banana', 'Orange', 'Lime', 'Kiwi'],
        perGroup: 3,
        multiple: true
      }).appendTo(sandbox);
    });
    test("default value", function () {
      var field;
      field = quickfield$1$1({
        type: 'choice',
        label: 'My Choices (single)',
        choices: ['Apple', 'Banana', 'Orange'],
        value: 'Orange'
      }).appendTo(sandbox);
      assert$1.equal(field.value, 'Orange');
      assert$1.equal(field.findChoice('Orange').selected, true);
      field = quickfield$1$1({
        type: 'choice',
        label: 'My Choices (multi)',
        choices: ['Apple', 'Banana', 'Orange', 'Lime', 'Kiwi'],
        multiple: true,
        value: ['Banana', 'Lime']
      }).appendTo(sandbox);
      assert$1.deepEqual(field.value, ['Banana', 'Lime']);
      assert$1.equal(field.findChoice('Banana').selected, true);
      return assert$1.equal(field.findChoice('Lime').selected, true);
    });
    test("conditions", function () {
      var field, master;
      master = quickfield$1$1({
        type: 'text',
        ID: 'master',
        required: true
      }).appendTo(sandbox);
      return field = quickfield$1$1({
        type: 'choice',
        label: 'My Choices (single)',
        choices: ['Apple', {
          label: 'Banana',
          value: 'banana',
          conditions: {
            'master': /^bana/
          }
        }, 'Orange', {
          label: 'Lemon',
          value: 'lime',
          conditions: {
            'master': 'valid'
          }
        }]
      }).appendTo(sandbox);
    });
    test("getter/setter", function () {
      var fieldA, fieldB, fieldC, getter, ref, ref1, ref2, ref3, ref4, ref5, setter;

      getter = function (value) {
        return (value != null ? value.toUpperCase() : void 0) || value;
      };

      setter = function (value) {
        if ((value != null ? value.value : void 0) === 'Banana') {
          return 'Apple';
        } else {
          return value;
        }
      };

      fieldA = quickfield$1$1({
        type: 'choice',
        choices: ['Apple', 'Banana', 'Orange'],
        getter
      }).appendTo(sandbox);
      fieldB = quickfield$1$1({
        type: 'choice',
        choices: ['Apple', 'Banana', 'Orange'],
        setter
      }).appendTo(sandbox);
      fieldC = quickfield$1$1({
        type: 'choice',
        choices: ['Apple', 'Banana', 'Orange'],
        getter,
        setter
      }).appendTo(sandbox);
      expect$1(fieldA.value).to.equal(void 0);
      expect$1(fieldA.valueRaw).to.equal(null);
      expect$1(fieldB.value).to.equal(void 0);
      expect$1(fieldB.valueRaw).to.equal(null);
      expect$1(fieldC.value).to.equal(void 0);
      expect$1(fieldC.valueRaw).to.equal(null);
      fieldA.choices[1].el.emit('click');
      fieldB.choices[1].el.emit('click');
      fieldC.choices[1].el.emit('click');
      expect$1(fieldA.value).to.equal('BANANA');
      expect$1((ref = fieldA.valueRaw) != null ? ref.value : void 0).to.equal('Banana');
      expect$1(fieldB.value).to.equal('Apple');
      expect$1((ref1 = fieldB.valueRaw) != null ? ref1.value : void 0).to.equal('Apple');
      expect$1(fieldC.value).to.equal('APPLE');
      expect$1((ref2 = fieldC.valueRaw) != null ? ref2.value : void 0).to.equal('Apple');
      fieldA.value = 'Orange';
      fieldB.value = 'Orange';
      fieldC.value = 'Orange';
      expect$1(fieldA.value).to.equal('ORANGE');
      expect$1((ref3 = fieldA.valueRaw) != null ? ref3.value : void 0).to.equal('Orange');
      expect$1(fieldB.value).to.equal('Orange');
      expect$1((ref4 = fieldB.valueRaw) != null ? ref4.value : void 0).to.equal('Orange');
      expect$1(fieldC.value).to.equal('ORANGE');
      return expect$1((ref5 = fieldC.valueRaw) != null ? ref5.value : void 0).to.equal('Orange');
    });
    return test("valid when selected", function () {
      var multiple, single;
      single = quickfield$1$1({
        type: 'choice',
        choices: ['Apple', 'Banana', 'Orange'],
        required: true,
        validWhenSelected: true
      });
      multiple = quickfield$1$1({
        type: 'choice',
        choices: ['Apple', 'Banana', 'Orange'],
        required: true,
        validWhenSelected: 2,
        multiple: true
      });
      expect$1(single.validate()).to.equal(false);
      expect$1(multiple.validate()).to.equal(false);
      expect$1(this.control.validate()).to.equal(false);
      expect$1(this.controlMulti.validate()).to.equal(false);
      single.value = multiple.value = this.control.value = this.controlMulti.value = 'Banana';
      expect$1(single.validate()).to.equal(true);
      expect$1(multiple.validate()).to.equal(false);
      expect$1(this.control.validate()).to.equal(true);
      expect$1(this.controlMulti.validate()).to.equal(true);
      multiple.value = ['Apple', 'Banana'];
      return expect$1(multiple.validate()).to.equal(true);
    });
  });
  suite("truefalse field", function () {
    suiteSetup(function () {
      return addTitle('truefalse field');
    });
    test("basic", function () {
      var field;
      field = quickfield$1$1({
        type: 'truefalse',
        label: 'Is it true or false?',
        width: 'auto'
      }).appendTo(sandbox).el.style('marginRight', 20);
      return assert$1.equal(field.value, null);
    });
    return test("default value", function () {
      var field;
      field = quickfield$1$1({
        type: 'truefalse',
        label: 'It\'s false by default',
        width: 'auto',
        choiceLabels: ['Yes', 'No'],
        value: false
      }).appendTo(sandbox);
      field.el.style('marginRight', 20);
      assert$1.equal(field.value, false);
      field = quickfield$1$1({
        type: 'truefalse',
        label: 'It\'s true by default',
        width: 'auto',
        choiceLabels: ['Yes', 'No'],
        value: true
      }).appendTo(sandbox);
      field.el.style('marginRight', 20);
      return assert$1.equal(field.value, true);
    });
  });
  suite("toggle field", function () {
    suiteSetup(function () {
      return addTitle('toggle field');
    });
    test("basic", function () {
      var field;
      return field = quickfield$1$1({
        type: 'toggle',
        label: 'The toggle field',
        width: 'auto'
      }).appendTo(sandbox).el.style('marginRight', 20);
    });
    test("default value", function () {
      var field;
      return field = quickfield$1$1({
        type: 'toggle',
        label: 'Toggled by default',
        width: '130px',
        defaultValue: 1
      }).appendTo(sandbox).el.style('marginRight', 20);
    });
    test("custom size", function () {
      var field;
      return field = quickfield$1$1({
        type: 'toggle',
        label: 'Custom size toggle',
        width: 'auto',
        size: 40
      }).appendTo(sandbox).el.style('marginRight', 20);
    });
    test("aligned style", function () {
      var field;
      return field = quickfield$1$1({
        type: 'toggle',
        label: 'Aligned style',
        style: 'aligned',
        width: 'auto'
      }).appendTo(sandbox);
    });
    return test("aligned style + defined width", function () {
      var field;
      field = quickfield$1$1({
        type: 'toggle',
        label: 'Aligned style with defined width',
        style: 'aligned',
        width: '400px'
      }).appendTo(sandbox);
      return field = quickfield$1$1({
        type: 'toggle',
        label: 'Aligned style with defined width',
        style: 'aligned',
        width: '200px'
      }).appendTo(sandbox);
    });
  });
  suite("checkbox field", function () {
    suiteSetup(function () {
      return addTitle('checkbox field');
    });
    test("basic", function () {
      var field;
      field = quickfield$1$1({
        type: 'checkbox',
        label: 'Is it true or false?',
        width: 'auto'
      }).appendTo(sandbox);
      field.el.style('marginRight', 20);
      return assert$1.equal(field.value, false);
    });
    test("default value", function () {
      var field;
      field = quickfield$1$1({
        type: 'checkbox',
        label: 'It\'s false by default',
        width: 'auto',
        value: false
      }).appendTo(sandbox);
      field.el.style('marginRight', 20);
      assert$1.equal(field.value, false);
      field = quickfield$1$1({
        type: 'checkbox',
        label: 'It\'s true by default',
        width: 'auto',
        choiceLabels: ['Yes', 'No'],
        value: true
      }).appendTo(sandbox);
      field.el.style('marginRight', 20);
      return assert$1.equal(field.value, true);
    });
    return test("multi-line display", function () {
      var field, label;
      label = 'Is it true or false? This is a fairly long text and can get even <b>longer</b> if we dont stop typing.';
      field = quickfield$1$1({
        type: 'checkbox',
        label,
        labelClicks: true,
        width: '150px'
      }).appendTo(sandbox);
      field.el.style('marginRight', 20);
      assert$1.equal(field.value, false);
      field.el.child.label.raw.click();
      return assert$1.equal(field.value, true);
    });
  });
  suite("group field", function () {
    setup(addDivider);
    suiteSetup(function () {
      addTitle('group field');
      this.fields = {
        first: {
          type: 'text',
          label: 'First',
          width: '49%'
        },
        second: {
          type: 'text',
          label: 'Second',
          width: '49%'
        },
        third: {
          type: 'select',
          label: 'Third',
          width: '74%',
          choices: ['Apple', 'Banana', 'Kiwi'],
          value: 'Kiwi'
        },
        fourth: {
          type: 'toggle',
          label: 'Fourth',
          style: 'aligned',
          width: '24%',
          conditions: {
            third: 'Kiwi'
          }
        }
      };
      return this.control = quickfield$1$1({
        type: 'group',
        label: 'Basic Group',
        width: '70%',
        fieldMargin: 10,
        fieldAlign: 'middle',
        fields: this.fields
      }).appendTo(sandbox);
    });
    test("basic", function () {
      expect$1(this.control.value).to.eql({
        first: '',
        second: '',
        third: 'Kiwi',
        fourth: false
      });
      expect$1(this.control.state.interacted).to.equal(false);
      this.control.value = {
        first: 'valueA',
        third: 'Kawa',
        fourth: true,
        fifth: '5'
      };
      expect$1(this.control.value).to.eql({
        first: 'valueA',
        second: '',
        third: 'Kawa',
        fourth: true
      });
      expect$1(this.control.state.interacted).to.equal(true);
      this.control.value = {
        second: 'valueB',
        third: 'Apple'
      };
      expect$1(this.control.value).to.eql({
        first: 'valueA',
        second: 'valueB',
        third: 'Apple',
        fourth: true
      });
      this.control.value = null;
      return expect$1(this.control.value).to.eql({
        first: 'valueA',
        second: 'valueB',
        third: 'Apple',
        fourth: true
      });
    });
    test("collapsed by default", function () {
      var field;
      field = quickfield$1$1({
        type: 'group',
        width: '70%',
        fieldMargin: 10,
        startCollapsed: true,
        fields: this.fields
      }).appendTo(sandbox);
      expect$1(this.control.els.innerwrap.raw).to.be.displayed;
      expect$1(field.els.innerwrap.raw).not.to.be.displayed;
      this.control.state.collapsed = true;
      field.state.collapsed = false;
      expect$1(this.control.els.innerwrap.raw).not.to.be.displayed;
      expect$1(field.els.innerwrap.raw).to.be.displayed;
      this.control.els.collapse.emit('click');
      field.els.collapse.emit('click');
      expect$1(this.control.els.innerwrap.raw).to.be.displayed;
      return expect$1(field.els.innerwrap.raw).not.to.be.displayed;
    });
    return test("default value", function () {
      var field;
      field = quickfield$1$1({
        type: 'group',
        width: '70%',
        fieldMargin: 10,
        fields: this.fields,
        value: {
          first: 'firstValue',
          third: 'Banana'
        }
      });
      return expect$1(field.value).to.eql({
        first: 'firstValue',
        second: '',
        third: 'Banana',
        fourth: false
      });
    });
  }); // test "inline mode", ()->
  // 	field = quickfield({type:'group', width:'70%', fieldMargin:10, @fields, value:{first:'firstValue', third:'Banana'}})
  // 	expect(field.value).to.eql {first:'firstValue', second:'', third:'Banana', fourth:false}

  suite("repeater field", function () {
    setup(addDivider);
    suiteSetup(function () {
      addDivider(40);
      this.fields = {
        first: {
          type: 'text',
          name: 'first',
          label: 'First',
          width: '49%'
        },
        second: {
          type: 'text',
          name: 'second',
          label: 'Second',
          width: '49%'
        }
      };
      return this.control = quickfield$1$1({
        type: 'repeater',
        label: 'Basic Repeater',
        width: '70%',
        fieldMargin: 10,
        numbering: true,
        cloneable: true,
        dragdrop: true,
        fields: this.fields
      }).appendTo(sandbox);
    });
    test("block", function () {
      expect$1(this.control.value).to.eql([]);
      expect$1(this.control.state.interacted).to.equal(false);
      this.control.els.addButton.emit('click');
      expect$1(this.control.value).to.eql([{
        first: '',
        second: ''
      }]);
      expect$1(this.control.state.interacted).to.equal(true);
      this.control.value = {
        first: 'abc',
        second: 'def'
      };
      expect$1(this.control.value).to.eql([{
        first: '',
        second: ''
      }, {
        first: 'abc',
        second: 'def'
      }]);
      expect$1(this.control._value[0].els.label.text).to.equal('Item 1');
      expect$1(this.control._value[1].els.label.text).to.equal('Item 2');

      this.control._value[0].els.remove.emit('click');

      expect$1(this.control.value).to.eql([{
        first: 'abc',
        second: 'def'
      }]);
      expect$1(this.control._value[0].els.label.text).to.equal('Item 1');
      this.control.value = [{
        first: 'ABC'
      }, {
        second: 'DEF'
      }];
      return expect$1(this.control.value).to.eql([{
        first: 'ABC',
        second: 'def'
      }, {
        first: '',
        second: 'DEF'
      }]);
    });
    test("inline", function () {
      var field;
      field = quickfield$1$1({
        type: 'repeater',
        label: 'Inline Repeater',
        width: '70%',
        fieldMargin: 10,
        numbering: true,
        autoRemoveEmpty: true,
        dragdrop: true,
        style: 'inline',
        value: [{
          first: 'abc',
          second: '123'
        }, {
          second: '456'
        }],
        fields: {
          first: primaryBuilder$1({
            autoWidth: true
          }, this.fields.first),
          second: primaryBuilder$1({
            autoWidth: true
          }, this.fields.second)
        }
      }).appendTo(sandbox);
      return expect$1(field.value).to.eql([{
        first: 'abc',
        second: '123'
      }, {
        first: '',
        second: '456'
      }]);
    });
    test("inline singleMode", function () {
      var field;
      field = quickfield$1$1({
        type: 'repeater',
        label: 'Inline Repeater',
        width: '70%',
        fieldMargin: 10,
        autoWidth: false,
        autoRemoveEmpty: true,
        numbering: true,
        style: 'inline',
        singleMode: true,
        dragdrop: true,
        groupSettings: {
          inline: {
            width: '100%'
          }
        },
        fields: primaryBuilder$1.clone(this.fields.first, {
          width: '100%'
        })
      }).appendTo(sandbox);
      expect$1(field.value).to.eql([]);
      field.value = ['abc', '123'];
      expect$1(field.value).to.eql(['abc', '123']);
      field.value = 'def';
      return expect$1(field.value).to.eql(['abc', '123', 'def']);
    });
    return test("dynamicLabel", function () {
      var field;
      field = quickfield$1$1({
        type: 'repeater',
        label: 'Inline Repeater',
        width: '70%',
        dynamicLabel: 'first',
        fieldMargin: 10,
        autoRemoveEmpty: true,
        dragdrop: true,
        value: [{
          first: 'abc',
          second: '123'
        }, {
          second: '456'
        }],
        fields: {
          first: primaryBuilder$1({
            autoWidth: true
          }, this.fields.first),
          second: primaryBuilder$1({
            autoWidth: true
          }, this.fields.second)
        }
      }).appendTo(sandbox);
      expect$1(field._value[0].el.child.label.text).to.equal('abc');
      expect$1(field._value[1].el.child.label.text).to.equal('');
      field.value = [{
        first: 'def'
      }, {
        first: '123'
      }];
      expect$1(field._value[0].el.child.label.text).to.equal('def');
      return expect$1(field._value[1].el.child.label.text).to.equal('123');
    });
  }); // expect(field.value).to.eql [
  // 	{first:'abc', second:'123'}
  // 	{first:'', second:'456'}
  // ]

  return suite(".config()", function () {
    return test("creates a new copy of QuickField with setting overrides and template overrides", function () {
      var choice, quickfield2, textA, textB, textC, textD;
      quickfield2 = quickfield$1$1.config({
        global: {
          fontFamily: 'helvetica',
          width: '50%',
          required: true,
          border: '0 0 2px 0',
          margin: '0 10px 10px 0',
          fontSize: 13,
          inputPadding: 8
        },
        text: {
          height: 40,
          autoWidth: true,
          inputPadding: 0,
          checkmark: false,
          minLength: 2,
          mask: {
            placeholder: '*',
            decimal: true
          }
        }
      }, {
        global: {
          field: {
            options: {
              style: {
                verticalAlign: 'middle'
              }
            },
            children: {
              label: {
                options: {
                  style: {
                    $focus: {
                      color: COLORS.green
                    }
                  }
                }
              },
              innerwrap: {
                options: {
                  style: {
                    $focus: {
                      borderColor: COLORS.green
                    }
                  }
                }
              }
            }
          }
        },
        text: {
          default: {
            children: {
              label: {
                options: {
                  style: {
                    fontWeight: 700
                  }
                }
              }
            }
          }
        },
        choice: {
          choice: {
            options: {
              style: {
                $selected: {
                  color: COLORS.green
                }
              }
            }
          }
        }
      });
      expect$1(quickfield2).not.to.equal(quickfield$1$1);
      textA = quickfield$1$1({
        type: 'text',
        label: 'textA'
      }).appendTo(sandbox);
      textB = quickfield2({
        type: 'text',
        label: 'textB',
        autoWidth: false
      }).appendTo(sandbox);
      addDivider();
      textC = quickfield2({
        type: 'text',
        label: 'textC',
        mask: {
          pattern: 'NUMBER',
          suffix: '%'
        }
      }).appendTo(sandbox);
      textD = quickfield2({
        type: 'text',
        label: 'textD',
        mask: {
          pattern: 'DATE',
          suffix: '%'
        }
      }).appendTo(sandbox);
      choice = quickfield2({
        type: 'choice',
        choices: ['Apple', 'Banana', 'Orange']
      }).appendTo(sandbox);
      expect$1(textA.el.style('fontFamily')).to.equal(quickfield$1$1.Field.prototype.globalDefaults.fontFamily);
      expect$1(textB.el.style('fontFamily')).to.equal('helvetica');
      expect$1(textA.el.style('verticalAlign')).to.equal('top');
      expect$1(textB.el.style('verticalAlign')).to.equal('middle');
      expect$1(textA.el.styleParsed('marginBottom')).to.equal(0);
      expect$1(textB.el.styleParsed('marginBottom')).to.equal(10);
      expect$1(textA.el.styleSafe('width', true)).to.equal('100%');
      expect$1(textB.el.styleSafe('width', true)).to.equal('50%');
      expect$1(textA.el.child.label.styleParsed('fontWeight', true)).to.equal(600);
      expect$1(textB.el.child.label.styleParsed('fontWeight', true)).to.equal(700);
      expect$1(textA.el.height).to.equal(quickfield$1$1.Field.text.prototype.defaults.height);
      expect$1(textB.el.height).to.equal(40);
      expect$1(textA.el.child.checkmark).to.be.object();
      expect$1(textB.el.child.checkmark).not.to.be.object();
      expect$1(getBorderSides(textA.els.innerwrap)).to.eql({
        top: '1px',
        left: '1px',
        right: '1px',
        bottom: '1px'
      });
      expect$1(getBorderSides(textB.els.innerwrap)).to.eql({
        top: '0px',
        left: '0px',
        right: '0px',
        bottom: '2px'
      });
      expect$1(textA.validate()).to.equal(true);
      expect$1(textB.validate()).to.equal(false);
      simulateKeys(textA.el.child.input.raw, 'abc');
      simulateKeys(textB.el.child.input.raw, 'abc');
      expect$1(textA.validate()).to.equal(true);
      expect$1(textB.validate()).to.equal(true);
      simulateKeys(textD.el.child.input.raw, '1');
      expect$1(textD.value).to.equal('1*/**/****');
      quickdom.batch([textA.els.label, textB.els.label, textA.els.innerwrap, textB.els.innerwrap]).style('transition', null);
      textA.state.focused = textB.state.focused = true;
      expect$1(textA.el.child.label.raw).to.have.style('color', COLORS.orange);
      expect$1(textB.el.child.label.raw).to.have.style('color', COLORS.green);
      expect$1(textA.el.child.innerwrap.raw).to.have.style('borderColor', COLORS.orange);
      expect$1(textB.el.child.innerwrap.raw).to.have.style('borderColor', COLORS.green);
      textA.blur();
      textB.blur();
      choice.value = 'Banana';
      expect$1(choice.valueRaw.label).to.equal('Banana');
      return expect$1(choice.valueRaw.el.raw).to.have.style('color', COLORS.green);
    });
  });
});}));//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZXMiOlsiaGVscGVycy9jb21wYW55TmFtZXMuY29mZmVlIiwiLi4vbm9kZV9tb2R1bGVzL2tleXNpbS9kaXN0L2tleXNpbS5tanMiLCJoZWxwZXJzL3NpbXVsYXRlS2V5cy5jb2ZmZWUiLCJoZWxwZXJzL3NpbXVsYXRlQWN0aW9uLmNvZmZlZSIsIi4uL25vZGVfbW9kdWxlcy9xdWlja2Nzcy9kaXN0L3F1aWNrY3NzLmVzbS5qcyIsIi4uL25vZGVfbW9kdWxlcy9zbWFydC1leHRlbmQvZGlzdC9zbWFydC1leHRlbmQuZXNtLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BkYW5pZWxrYWxlbi9pcy9kaXN0L2lzLmVzbS5qcyIsIi4uL25vZGVfbW9kdWxlcy9xdWlja2RvbS9kaXN0L3F1aWNrZG9tLmVzbS5qcyIsImhlbHBlcnMvcmVzdGFydFNhbmRib3guY29mZmVlIiwiaGVscGVycy9hZGRUaXRsZS5jb2ZmZWUiLCJoZWxwZXJzL2FkZERpdmlkZXIuY29mZmVlIiwiaGVscGVycy9nZXRCb3JkZXJTaWRlcy5jb2ZmZWUiLCIuLi9ub2RlX21vZHVsZXMvcC1maW5hbGx5L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3AtdGltZW91dC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9wLWV2ZW50L2luZGV4LmpzIiwiLi4vc3JjL2NvbnN0YW50cy9jb2xvcnMuY29mZmVlIiwiLi4vbm9kZV9tb2R1bGVzL2Fzc2VydGlvbi1lcnJvci9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9wYXRodmFsL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvZmxhZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL3Rlc3QuanMiLCIuLi9ub2RlX21vZHVsZXMvdHlwZS1kZXRlY3QvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9leHBlY3RUeXBlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2dldEFjdHVhbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9nZXQtZnVuYy1uYW1lL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvZ2V0UHJvcGVydGllcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2dldEVudW1lcmFibGVQcm9wZXJ0aWVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvY29uZmlnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvaW5zcGVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL29iakRpc3BsYXkuanMiLCIuLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9nZXRNZXNzYWdlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvdHJhbnNmZXJGbGFncy5qcyIsIi4uL25vZGVfbW9kdWxlcy9kZWVwLWVxbC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2lzUHJveHlFbmFibGVkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvYWRkUHJvcGVydHkuanMiLCIuLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9hZGRMZW5ndGhHdWFyZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL3Byb3hpZnkuanMiLCIuLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9hZGRNZXRob2QuanMiLCIuLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9vdmVyd3JpdGVQcm9wZXJ0eS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL292ZXJ3cml0ZU1ldGhvZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2FkZENoYWluYWJsZU1ldGhvZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL292ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2NvbXBhcmVCeUluc3BlY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9nZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvdXRpbHMvZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvY2hlY2stZXJyb3IvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS91dGlscy9pc05hTi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL3V0aWxzL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvYXNzZXJ0aW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvY29yZS9hc3NlcnRpb25zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkvaW50ZXJmYWNlL2V4cGVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jaGFpL2xpYi9jaGFpL2ludGVyZmFjZS9zaG91bGQuanMiLCIuLi9ub2RlX21vZHVsZXMvY2hhaS9saWIvY2hhaS9pbnRlcmZhY2UvYXNzZXJ0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NoYWkvbGliL2NoYWkuanMiLCIuLi9ub2RlX21vZHVsZXMvY2hhaS9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jaGFpLWRvbS9jaGFpLWRvbS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jaGFpLXN0eWxlL3NvdXJjZXMvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvY2hhaS1hbG1vc3Qvbm9kZV9tb2R1bGVzL2RlZXAtZXFsL25vZGVfbW9kdWxlcy90eXBlLWRldGVjdC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jaGFpLWFsbW9zdC9ub2RlX21vZHVsZXMvZGVlcC1lcWwvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvY2hhaS1hbG1vc3QvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvY2hlY2stdHlwZXMvc3JjL2NoZWNrLXR5cGVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NoYWktYXNzZXJ0dHlwZS9hc3NlcnR0eXBlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NoYWktZXZlbnRzL2NoYWktZXZlbnRzLmpzIiwiLi4vYnVpbGQvYW5pbWF0aW9ucy5qcyIsIi4uL2J1aWxkL2NoZWNrcy5qcyIsIi4uL2J1aWxkL2NvbnNvbGVQYXRjaC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AZGFuaWVsa2FsZW4vc2ltcGx5YmluZC9kaXN0L3NpbXBseWJpbmQuanMiLCIuLi9idWlsZC9jb25zdGFudHMvcmVnZXguanMiLCIuLi9idWlsZC9oZWxwZXJzLmpzIiwiLi4vYnVpbGQvY29uc3RhbnRzL3JlcUZpZWxkTWV0aG9kcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9mYXN0ZG9tL2Zhc3Rkb20uanMiLCIuLi9idWlsZC9jb21wb25lbnRzL2NvbmRpdGlvbi5qcyIsIi4uL2J1aWxkL2ZpZWxkL3RyYW5zZm9ybVNldHRpbmdzLmpzIiwiLi4vYnVpbGQvZmllbGQvZ2xvYmFsRGVmYXVsdHMuanMiLCIuLi9idWlsZC9maWVsZC9pbmRleC5qcyIsIi4uL2J1aWxkL2NvbnN0YW50cy9rZXlDb2Rlcy5qcyIsIi4uL2J1aWxkL3N2Zy9jaGVja21hcmsuanMiLCIuLi9idWlsZC9zdmcvYW5nbGVEb3duLmpzIiwiLi4vYnVpbGQvc3ZnL2NhcmV0VXAuanMiLCIuLi9idWlsZC9zdmcvY2FyZXREb3duLmpzIiwiLi4vYnVpbGQvc3ZnL3BsdXMuanMiLCIuLi9idWlsZC9zdmcvY2xvbmUuanMiLCIuLi9idWlsZC9zdmcvcmVtb3ZlLmpzIiwiLi4vYnVpbGQvY29tcG9uZW50cy9kcm9wZG93bi90ZW1wbGF0ZS1iOTYxZjgxZi5qcyIsIi4uL2J1aWxkL2NvbXBvbmVudHMvZHJvcGRvd24vZGVmYXVsdHMuanMiLCIuLi9idWlsZC9jb21wb25lbnRzL2Ryb3Bkb3duL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3RleHQtbWFzay1jb3JlL2Rpc3QvdGV4dE1hc2tDb3JlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3RleHQtbWFzay1hZGRvbnMvZGlzdC90ZXh0TWFza0FkZG9ucy5qcyIsIi4uL2J1aWxkL2NvbXBvbmVudHMvbWFzay5qcyIsIi4uL2J1aWxkL2NvbnN0YW50cy9jb2xvcnMuanMiLCIuLi9idWlsZC9maWVsZHMvdGV4dC90ZW1wbGF0ZS0yMzNlOTQxMy5qcyIsIi4uL2J1aWxkL2ZpZWxkcy90ZXh0L2RlZmF1bHRzLmpzIiwiLi4vYnVpbGQvZmllbGRzL3RleHQvaW5kZXguanMiLCIuLi9idWlsZC9xdWlja2ZpZWxkLmpzIiwiLi4vYnVpbGQvZmllbGRzL3RleHRhcmVhL2RlZmF1bHRzLmpzIiwiLi4vYnVpbGQvZmllbGRzL3RleHRhcmVhL3RlbXBsYXRlLTY1ZmVkYTA1LmpzIiwiLi4vYnVpbGQvZmllbGRzL3RleHRhcmVhL2luZGV4LmpzIiwiLi4vYnVpbGQvZmllbGRzL251bWJlci9kZWZhdWx0cy5qcyIsIi4uL2J1aWxkL2ZpZWxkcy9udW1iZXIvdGVtcGxhdGUtYzkyMmUxNjMuanMiLCIuLi9idWlsZC9maWVsZHMvbnVtYmVyL2luZGV4LmpzIiwiLi4vYnVpbGQvZmllbGRzL3NlbGVjdC9kZWZhdWx0cy5qcyIsIi4uL2J1aWxkL2ZpZWxkcy9zZWxlY3QvdGVtcGxhdGUtNmJiY2RkZDAuanMiLCIuLi9idWlsZC9maWVsZHMvc2VsZWN0L2luZGV4LmpzIiwiLi4vYnVpbGQvZmllbGRzL2Nob2ljZS90ZW1wbGF0ZS1jODhmYTk1Yi5qcyIsIi4uL2J1aWxkL2ZpZWxkcy9jaG9pY2UvZGVmYXVsdHMuanMiLCIuLi9idWlsZC9maWVsZHMvY2hvaWNlL2luZGV4LmpzIiwiLi4vYnVpbGQvZmllbGRzL3RydWVmYWxzZS90ZW1wbGF0ZS0zZDZjNTRhMC5qcyIsIi4uL2J1aWxkL2ZpZWxkcy90cnVlZmFsc2UvZGVmYXVsdHMuanMiLCIuLi9idWlsZC9maWVsZHMvdHJ1ZWZhbHNlL2luZGV4LmpzIiwiLi4vYnVpbGQvZmllbGRzL3RvZ2dsZS9kZWZhdWx0cy5qcyIsIi4uL2J1aWxkL2ZpZWxkcy90b2dnbGUvdGVtcGxhdGUtYmY3Yjk5YzEuanMiLCIuLi9idWlsZC9maWVsZHMvdG9nZ2xlL2luZGV4LmpzIiwiLi4vYnVpbGQvZmllbGRzL2dyb3VwL2RlZmF1bHRzLmpzIiwiLi4vYnVpbGQvZmllbGRzL2dyb3VwL3RlbXBsYXRlLTA4NmE4MmUyLmpzIiwiLi4vYnVpbGQvZmllbGRzL2dyb3VwL2luZGV4LmpzIiwiLi4vYnVpbGQvZmllbGRzL3JlcGVhdGVyL3RlbXBsYXRlLTdjMjg0ZTYxLmpzIiwiLi4vYnVpbGQvZmllbGRzL3JlcGVhdGVyL2RlZmF1bHRzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F0b2EvYXRvYS5qcyIsIi4uL25vZGVfbW9kdWxlcy90aWNreS90aWNreS1icm93c2VyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2NvbnRyYS9kZWJvdW5jZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9jb250cmEvZW1pdHRlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9jcm9zc3ZlbnQvbm9kZV9tb2R1bGVzL2N1c3RvbS1ldmVudC9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9jcm9zc3ZlbnQvc3JjL2V2ZW50bWFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2Nyb3NzdmVudC9zcmMvY3Jvc3N2ZW50LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RyYWd1bGEvY2xhc3Nlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9kcmFndWxhL2RyYWd1bGEuanMiLCIuLi9idWlsZC9maWVsZHMvcmVwZWF0ZXIvaW5kZXguanMiLCIuLi9idWlsZC9maWVsZHMvY2hlY2tib3gvZGVmYXVsdHMuanMiLCIuLi9idWlsZC9maWVsZHMvY2hlY2tib3gvdGVtcGxhdGUtMGI5MDdiYmUuanMiLCIuLi9idWlsZC9maWVsZHMvY2hlY2tib3gvaW5kZXguanMiLCJ0ZXN0LmNvZmZlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBbXG4gIFwiS2llaG4gSW5jXCJcbiAgXCJNYXJrcyBhbmQgU29uc1wiXG4gIFwiV2FlbGNoaSBTY2hpbGxlciBhbmQgRGVuZXNpa1wiXG4gIFwiT2xzb24gWmVtbGFrIGFuZCBNYWdnaW9cIlxuICBcIkphY29icyAtIFZvblwiXG4gIFwiQXVlciBMb3dlIGFuZCBHdXRtYW5uXCJcbiAgXCJGZWVuZXkgUmVtcGVsIGFuZCBDYXNzaW5cIlxuICBcIlNhd2F5biAtIE1hcmtzXCJcbiAgXCJKb2hucyBhbmQgU29uc1wiXG4gIFwiUm9kcmlndWV6IENoYW1wbGluIGFuZCBEYXJlXCJcbiAgXCJMb3dlIC0gUml0Y2hpZVwiXG4gIFwiR2xlaWNobmVyIEdvbGRuZXIgYW5kIEJlY2tlclwiXG4gIFwiSmVyZGUgLSBPc2luc2tpXCJcbiAgXCJCYXVtYmFjaCBHcm91cFwiXG4gIFwiU2Nocm9lZGVyIFp1bGF1ZiBhbmQgUmVtcGVsXCJcbiAgXCJPJ1JlaWxseSBNaWxscyBhbmQgRGVuZXNpa1wiXG4gIFwiS29obGVyIC0gVmV1bVwiXG4gIFwiTydIYXJhIEluY1wiXG4gIFwiT2JlcmJydW5uZXIgYW5kIFNvbnNcIlxuICBcIkVtbWVyaWNoIEdyb3VwXCJcbiAgXCJNdXJyYXkgWmllbWUgYW5kIEZyYW5lY2tpXCJcbiAgXCJNb2VuIC0gTHVldHRnZW5cIlxuICBcIkdvcmN6YW55IEhhcnZleSBhbmQgR3VsZ293c2tpXCJcbiAgXCJSZWlsbHkgLSBSdWVja2VyXCJcbiAgXCJNY0Rlcm1vdHQgLSBIeWF0dFwiXG4gIFwiU3BpbmthIC0gTWFya3NcIlxuICBcIkhheWVzIGFuZCBTb25zXCJcbiAgXCJLaWxiYWNrIEtpZWhuIGFuZCBNb25haGFuXCJcbiAgXCJEYXZpcyBhbmQgU29uc1wiXG4gIFwiSHVkc29uIC0gWXVuZHRcIlxuICBcIkdvb2R3aW4gLSBaZW1sYWtcIlxuICBcIkJlZXIgS3VobG1hbiBhbmQgV2Fsa2VyXCJcbiAgXCJKb25lcyBDYXJyb2xsIGFuZCBBbmRlcnNvblwiXG4gIFwiUnV0aGVyZm9yZCBJbmNcIlxuICBcIlByZWRvdmljIFdoaXRlIGFuZCBDb2xsaW5zXCJcbiAgXCJTcG9yZXIgQmF1bWJhY2ggYW5kIENyaXN0XCJcbiAgXCJHcmltZXMgYW5kIFNvbnNcIlxuICBcIkt1bmRlIGFuZCBTb25zXCJcbiAgXCJUaWxsbWFuIC0gQm9kZVwiXG4gIFwiQ3JvbmluIC0gS29lcHBcIlxuICBcIlNtaXRoYW0gWmllbWUgYW5kIERhbmllbFwiXG4gIFwiS3VuemUgV2VsY2ggYW5kIFJ1c3NlbFwiXG4gIFwiSm9obnMgTGFiYWRpZSBhbmQgSGFyYmVyXCJcbiAgXCJMZXNjaCAtIFdhdGVyc1wiXG4gIFwiQnJha3VzIC0gU21pdGhhbVwiXG4gIFwiQmlucyBhbmQgU29uc1wiXG4gIFwiTml0enNjaGUgSW5jXCJcbiAgXCJXdW5zY2ggSW5jXCJcbiAgXCJTY2hvd2FsdGVyIEZyYW5lY2tpIGFuZCBLdXBoYWxcIlxuICBcIlJleW5vbGRzIC0gU3dhbmlhd3NraVwiXG5dIiwidmFyIGlzRWRpdGFibGUgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudC5vd25lckRvY3VtZW50LmRlc2lnbk1vZGUgJiYgZWxlbWVudC5vd25lckRvY3VtZW50LmRlc2lnbk1vZGUudG9Mb3dlckNhc2UoKSA9PT0gJ29uJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgc3dpdGNoIChlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgIHJldHVybiBpc0VkaXRhYmxlSW5wdXQoZWxlbWVudCk7XG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoaXNDb250ZW50RWRpdGFibGUoZWxlbWVudCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmZ1bmN0aW9uIGlzQ29udGVudEVkaXRhYmxlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQuY29udGVudEVkaXRhYmxlICYmIGVsZW1lbnQuY29udGVudEVkaXRhYmxlLnRvTG93ZXJDYXNlKCkgPT09ICd0cnVlJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChlbGVtZW50LmNvbnRlbnRFZGl0YWJsZSAmJiBlbGVtZW50LmNvbnRlbnRFZGl0YWJsZS50b0xvd2VyQ2FzZSgpID09PSAnaW5oZXJpdCcgJiYgZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIGlzQ29udGVudEVkaXRhYmxlKGVsZW1lbnQucGFyZW50Tm9kZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0VkaXRhYmxlSW5wdXQoaW5wdXQpIHtcbiAgc3dpdGNoIChpbnB1dC50eXBlKSB7XG4gICAgY2FzZSAndGV4dCc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBjYXNlICdlbWFpbCc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBjYXNlICdwYXNzd29yZCc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBjYXNlICdzZWFyY2gnOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgY2FzZSAndGVsJzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGNhc2UgJ3VybCc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cbnZhciBDVFJMID0gMSA8PCAwO1xudmFyIE1FVEEgPSAxIDw8IDE7XG52YXIgQUxUID0gMSA8PCAyO1xudmFyIFNISUZUID0gMSA8PCAzO1xuXG4vLyBLZXkgRXZlbnRzXG52YXIgS2V5RXZlbnRzID0ge1xuICBET1dOOiAxIDw8IDAsXG4gIFBSRVNTOiAxIDw8IDEsXG4gIFVQOiAxIDw8IDIsXG4gIElOUFVUOiAxIDw8IDNcbn07XG5LZXlFdmVudHMuQUxMID0gS2V5RXZlbnRzLkRPV04gfCBLZXlFdmVudHMuUFJFU1MgfCBLZXlFdmVudHMuVVAgfCBLZXlFdmVudHMuSU5QVVQ7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGtleXN0cm9rZSwgb3IgYSBzaW5nbGUga2V5IGNvZGUgd2l0aCBhIHNldCBvZiBhY3RpdmUgbW9kaWZpZXJzLlxuICpcbiAqIEBjbGFzcyBLZXlzdHJva2VcbiAqL1xudmFyIEtleXN0cm9rZSA9XG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBtb2RpZmllcnMgQSBiaXRtYXNrIGZvcm1lZCBieSBDVFJMLCBNRVRBLCBBTFQsIGFuZCBTSElGVC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBrZXlDb2RlXG4gKi9cbmZ1bmN0aW9uIEtleXN0cm9rZShtb2RpZmllcnMsIGtleUNvZGUpIHtcbiAgY2xhc3NDYWxsQ2hlY2sodGhpcywgS2V5c3Ryb2tlKTtcblxuICB0aGlzLm1vZGlmaWVycyA9IG1vZGlmaWVycztcbiAgdGhpcy5jdHJsS2V5ID0gISEobW9kaWZpZXJzICYgQ1RSTCk7XG4gIHRoaXMubWV0YUtleSA9ICEhKG1vZGlmaWVycyAmIE1FVEEpO1xuICB0aGlzLmFsdEtleSA9ICEhKG1vZGlmaWVycyAmIEFMVCk7XG4gIHRoaXMuc2hpZnRLZXkgPSAhIShtb2RpZmllcnMgJiBTSElGVCk7XG4gIHRoaXMua2V5Q29kZSA9IGtleUNvZGU7XG59O1xuXG4vKipcbiAqIFNpbXVsYXRlcyBhIGtleWJvYXJkIHdpdGggYSBwYXJ0aWN1bGFyIGtleS10by1jaGFyYWN0ZXIgYW5kIGtleS10by1hY3Rpb25cbiAqIG1hcHBpbmcuIFVzZSBgVVNfRU5HTElTSGAgdG8gZ2V0IGEgcHJlLWNvbmZpZ3VyZWQga2V5Ym9hcmQuXG4gKi9cbktleXN0cm9rZS5DVFJMID0gQ1RSTDtcbktleXN0cm9rZS5NRVRBID0gTUVUQTtcbktleXN0cm9rZS5BTFQgPSBBTFQ7XG5LZXlzdHJva2UuU0hJRlQgPSBTSElGVDtcbnZhciBLZXlib2FyZCA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0LjxudW1iZXIsIEtleXN0cm9rZT59IGNoYXJDb2RlS2V5Q29kZU1hcFxuICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCBudW1iZXI+fSBhY3Rpb25LZXlDb2RlTWFwXG4gICAqL1xuICBmdW5jdGlvbiBLZXlib2FyZChjaGFyQ29kZUtleUNvZGVNYXAsIGFjdGlvbktleUNvZGVNYXApIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBLZXlib2FyZCk7XG5cbiAgICB0aGlzLl9jaGFyQ29kZUtleUNvZGVNYXAgPSBjaGFyQ29kZUtleUNvZGVNYXA7XG4gICAgdGhpcy5fYWN0aW9uS2V5Q29kZU1hcCA9IGFjdGlvbktleUNvZGVNYXA7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgY2hhcmFjdGVyIGNvZGUgZ2VuZXJhdGVkIGJ5IHByZXNzaW5nIHRoZSBnaXZlbiBrZXlzdHJva2UuXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5c3Ryb2tlfSBrZXlzdHJva2VcbiAgICogQHJldHVybiB7P251bWJlcn1cbiAgICovXG5cblxuICBjcmVhdGVDbGFzcyhLZXlib2FyZCwgW3tcbiAgICBrZXk6ICdjaGFyQ29kZUZvcktleXN0cm9rZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNoYXJDb2RlRm9yS2V5c3Ryb2tlKGtleXN0cm9rZSkge1xuICAgICAgdmFyIG1hcCA9IHRoaXMuX2NoYXJDb2RlS2V5Q29kZU1hcDtcbiAgICAgIGZvciAodmFyIGNoYXJDb2RlIGluIG1hcCkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1hcCwgY2hhckNvZGUpKSB7XG4gICAgICAgICAgdmFyIGtleXN0cm9rZUZvckNoYXJDb2RlID0gbWFwW2NoYXJDb2RlXTtcbiAgICAgICAgICBpZiAoa2V5c3Ryb2tlLmtleUNvZGUgPT09IGtleXN0cm9rZUZvckNoYXJDb2RlLmtleUNvZGUgJiYga2V5c3Ryb2tlLm1vZGlmaWVycyA9PT0ga2V5c3Ryb2tlRm9yQ2hhckNvZGUubW9kaWZpZXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoY2hhckNvZGUsIDEwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gZXZlbnQgcmVhZHkgZm9yIGRpc3BhdGNoaW5nIG9udG8gdGhlIGdpdmVuIHRhcmdldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIE9uZSBvZiBcImtleWRvd25cIiwgXCJrZXlwcmVzc1wiLCBcImtleXVwXCIsIFwidGV4dElucHV0XCIgb3IgXCJpbnB1dFwiLlxuICAgICAqIEBwYXJhbSB7S2V5c3Ryb2tlfSBrZXlzdHJva2VcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXRcbiAgICAgKiBAcmV0dXJuIHtFdmVudH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlRXZlbnRGcm9tS2V5c3Ryb2tlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRXZlbnRGcm9tS2V5c3Ryb2tlKHR5cGUsIGtleXN0cm9rZSwgdGFyZ2V0KSB7XG4gICAgICB2YXIgZG9jdW1lbnQgPSB0YXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAgIHZhciB3aW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcbiAgICAgIHZhciBFdmVudCA9IHdpbmRvdy5FdmVudDtcblxuICAgICAgdmFyIGV2ZW50ID0gdm9pZCAwO1xuXG4gICAgICB0cnkge1xuICAgICAgICBldmVudCA9IG5ldyBFdmVudCh0eXBlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnVUlFdmVudHMnKTtcbiAgICAgIH1cblxuICAgICAgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xuXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAndGV4dElucHV0JzpcbiAgICAgICAgICBldmVudC5kYXRhID0gU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLmNoYXJDb2RlRm9yS2V5c3Ryb2tlKGtleXN0cm9rZSkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2tleWRvd24nOmNhc2UgJ2tleXByZXNzJzpjYXNlICdrZXl1cCc6XG4gICAgICAgICAgZXZlbnQuc2hpZnRLZXkgPSBrZXlzdHJva2Uuc2hpZnRLZXk7XG4gICAgICAgICAgZXZlbnQuYWx0S2V5ID0ga2V5c3Ryb2tlLmFsdEtleTtcbiAgICAgICAgICBldmVudC5tZXRhS2V5ID0ga2V5c3Ryb2tlLm1ldGFLZXk7XG4gICAgICAgICAgZXZlbnQuY3RybEtleSA9IGtleXN0cm9rZS5jdHJsS2V5O1xuICAgICAgICAgIGV2ZW50LmtleUNvZGUgPSB0eXBlID09PSAna2V5cHJlc3MnID8gdGhpcy5jaGFyQ29kZUZvcktleXN0cm9rZShrZXlzdHJva2UpIDoga2V5c3Ryb2tlLmtleUNvZGU7XG4gICAgICAgICAgZXZlbnQuY2hhckNvZGUgPSB0eXBlID09PSAna2V5cHJlc3MnID8gZXZlbnQua2V5Q29kZSA6IDA7XG4gICAgICAgICAgZXZlbnQud2hpY2ggPSBldmVudC5rZXlDb2RlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgdGhlIGNvcnJlY3Qgc2VxdWVuY2Ugb2YgZXZlbnRzIG9uIHRoZSBnaXZlbiB0YXJnZXQgYXMgaWYgdGhlIGdpdmVuXG4gICAgICogYWN0aW9uIHdhcyB1bmRlcnRha2VuIGJ5IGEgaHVtYW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYWN0aW9uIGUuZy4gXCJhbHQrc2hpZnQrbGVmdFwiIG9yIFwiYmFja3NwYWNlXCJcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGlzcGF0Y2hFdmVudHNGb3JBY3Rpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwYXRjaEV2ZW50c0ZvckFjdGlvbihhY3Rpb24sIHRhcmdldCkge1xuICAgICAgdmFyIGtleXN0cm9rZSA9IHRoaXMua2V5c3Ryb2tlRm9yQWN0aW9uKGFjdGlvbik7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnRzRm9yS2V5c3Ryb2tlKGtleXN0cm9rZSwgdGFyZ2V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB0aGUgY29ycmVjdCBzZXF1ZW5jZSBvZiBldmVudHMgb24gdGhlIGdpdmVuIHRhcmdldCBhcyBpZiB0aGUgZ2l2ZW5cbiAgICAgKiBpbnB1dCBoYWQgYmVlbiB0eXBlZCBieSBhIGh1bWFuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlucHV0XG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFyZ2V0XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Rpc3BhdGNoRXZlbnRzRm9ySW5wdXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwYXRjaEV2ZW50c0ZvcklucHV0KGlucHV0LCB0YXJnZXQpIHtcbiAgICAgIHZhciBjdXJyZW50TW9kaWZpZXJTdGF0ZSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gaW5wdXQubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGtleXN0cm9rZSA9IHRoaXMua2V5c3Ryb2tlRm9yQ2hhckNvZGUoaW5wdXQuY2hhckNvZGVBdChpKSk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hNb2RpZmllclN0YXRlVHJhbnNpdGlvbih0YXJnZXQsIGN1cnJlbnRNb2RpZmllclN0YXRlLCBrZXlzdHJva2UubW9kaWZpZXJzKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50c0ZvcktleXN0cm9rZShrZXlzdHJva2UsIHRhcmdldCwgZmFsc2UpO1xuICAgICAgICBjdXJyZW50TW9kaWZpZXJTdGF0ZSA9IGtleXN0cm9rZS5tb2RpZmllcnM7XG4gICAgICB9XG4gICAgICB0aGlzLmRpc3BhdGNoTW9kaWZpZXJTdGF0ZVRyYW5zaXRpb24odGFyZ2V0LCBjdXJyZW50TW9kaWZpZXJTdGF0ZSwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgdGhlIGNvcnJlY3Qgc2VxdWVuY2Ugb2YgZXZlbnRzIG9uIHRoZSBnaXZlbiB0YXJnZXQgYXMgaWYgdGhlIGdpdmVuXG4gICAgICoga2V5c3Ryb2tlIHdhcyBwZXJmb3JtZWQgYnkgYSBodW1hbi4gV2hlbiBzaW11bGF0aW5nLCBmb3IgZXhhbXBsZSwgdHlwaW5nXG4gICAgICogdGhlIGxldHRlciBcIkFcIiAoYXNzdW1pbmcgYSBVLlMuIEVuZ2xpc2gga2V5Ym9hcmQpIHRoZW4gdGhlIHNlcXVlbmNlIHdpbGxcbiAgICAgKiBsb29rIGxpa2UgdGhpczpcbiAgICAgKlxuICAgICAqICAga2V5ZG93biAgIGtleUNvZGU9MTYgKFNISUZUKSBjaGFyQ29kZT0wICAgICAgc2hpZnRLZXk9dHJ1ZVxuICAgICAqICAga2V5ZG93biAgIGtleUNvZGU9NjUgKEEpICAgICBjaGFyQ29kZT0wICAgICAgc2hpZnRLZXk9dHJ1ZVxuICAgICAqICAga2V5cHJlc3MgIGtleUNvZGU9NjUgKEEpICAgICBjaGFyQ29kZT02NSAoQSkgc2hpZnRLZXk9dHJ1ZVxuICAgICAqICAgdGV4dElucHV0IGRhdGE9QVxuICAgICAqICAgaW5wdXRcbiAgICAgKiAgIGtleXVwICAgICBrZXlDb2RlPTY1IChBKSAgICAgY2hhckNvZGU9MCAgICAgIHNoaWZ0S2V5PXRydWVcbiAgICAgKiAgIGtleXVwICAgICBrZXlDb2RlPTE2IChTSElGVCkgY2hhckNvZGU9MCAgICAgIHNoaWZ0S2V5PWZhbHNlXG4gICAgICpcbiAgICAgKiBJZiB0aGUga2V5c3Ryb2tlIHdvdWxkIG5vdCBjYXVzZSBhIGNoYXJhY3RlciB0byBiZSBpbnB1dCwgc3VjaCBhcyB3aGVuXG4gICAgICogcHJlc3NpbmcgYWx0K3NoaWZ0K2xlZnQsIHRoZSBzZXF1ZW5jZSBsb29rcyBsaWtlIHRoaXM6XG4gICAgICpcbiAgICAgKiAgIGtleWRvd24gICBrZXlDb2RlPTE2IChTSElGVCkgY2hhckNvZGU9MCBhbHRLZXk9ZmFsc2Ugc2hpZnRLZXk9dHJ1ZVxuICAgICAqICAga2V5ZG93biAgIGtleUNvZGU9MTggKEFMVCkgICBjaGFyQ29kZT0wIGFsdEtleT10cnVlICBzaGlmdEtleT10cnVlXG4gICAgICogICBrZXlkb3duICAga2V5Q29kZT0zNyAoTEVGVCkgIGNoYXJDb2RlPTAgYWx0S2V5PXRydWUgIHNoaWZ0S2V5PXRydWVcbiAgICAgKiAgIGtleXVwICAgICBrZXlDb2RlPTM3IChMRUZUKSAgY2hhckNvZGU9MCBhbHRLZXk9dHJ1ZSAgc2hpZnRLZXk9dHJ1ZVxuICAgICAqICAga2V5dXAgICAgIGtleUNvZGU9MTggKEFMVCkgICBjaGFyQ29kZT0wIGFsdEtleT1mYWxzZSBzaGlmdEtleT10cnVlXG4gICAgICogICBrZXl1cCAgICAga2V5Q29kZT0xNiAoU0hJRlQpIGNoYXJDb2RlPTAgYWx0S2V5PWZhbHNlIHNoaWZ0S2V5PWZhbHNlXG4gICAgICpcbiAgICAgKiBUbyBkaXNhYmxlIGhhbmRsaW5nIG9mIG1vZGlmaWVyIGtleXMsIGNhbGwgd2l0aCBgdHJhbnNpdGlvbk1vZGlmZXJzYCBzZXRcbiAgICAgKiB0byBmYWxzZS4gRG9pbmcgc28gd2lsbCBvbWl0IHRoZSBrZXlkb3duIGFuZCBrZXl1cCBldmVudHMgYXNzb2NpYXRlZCB3aXRoXG4gICAgICogc2hpZnQsIGN0cmwsIGFsdCwgYW5kIG1ldGEga2V5cyBzdXJyb3VuZGluZyB0aGUgYWN0dWFsIGtleXN0cm9rZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7S2V5c3Ryb2tlfSBrZXlzdHJva2VcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSB0cmFuc2l0aW9uTW9kaWZpZXJzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50c1xuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkaXNwYXRjaEV2ZW50c0ZvcktleXN0cm9rZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnRzRm9yS2V5c3Ryb2tlKGtleXN0cm9rZSwgdGFyZ2V0KSB7XG4gICAgICB2YXIgdHJhbnNpdGlvbk1vZGlmaWVycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdHJ1ZTtcbiAgICAgIHZhciBldmVudHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IEtleUV2ZW50cy5BTEw7XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uTW9kaWZpZXJzKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hNb2RpZmllclN0YXRlVHJhbnNpdGlvbih0YXJnZXQsIDAsIGtleXN0cm9rZS5tb2RpZmllcnMsIGV2ZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBrZXlkb3duRXZlbnQgPSB2b2lkIDA7XG4gICAgICBpZiAoZXZlbnRzICYgS2V5RXZlbnRzLkRPV04pIHtcbiAgICAgICAga2V5ZG93bkV2ZW50ID0gdGhpcy5jcmVhdGVFdmVudEZyb21LZXlzdHJva2UoJ2tleWRvd24nLCBrZXlzdHJva2UsIHRhcmdldCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXlkb3duRXZlbnQgJiYgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoa2V5ZG93bkV2ZW50KSAmJiB0aGlzLnRhcmdldENhblJlY2VpdmVUZXh0SW5wdXQodGFyZ2V0KSkge1xuICAgICAgICB2YXIga2V5cHJlc3NFdmVudCA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGV2ZW50cyAmIEtleUV2ZW50cy5QUkVTUykge1xuICAgICAgICAgIGtleXByZXNzRXZlbnQgPSB0aGlzLmNyZWF0ZUV2ZW50RnJvbUtleXN0cm9rZSgna2V5cHJlc3MnLCBrZXlzdHJva2UsIHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleXByZXNzRXZlbnQgJiYga2V5cHJlc3NFdmVudC5jaGFyQ29kZSAmJiB0YXJnZXQuZGlzcGF0Y2hFdmVudChrZXlwcmVzc0V2ZW50KSkge1xuICAgICAgICAgIGlmIChldmVudHMgJiBLZXlFdmVudHMuSU5QVVQpIHtcbiAgICAgICAgICAgIHZhciB0ZXh0aW5wdXRFdmVudCA9IHRoaXMuY3JlYXRlRXZlbnRGcm9tS2V5c3Ryb2tlKCd0ZXh0SW5wdXQnLCBrZXlzdHJva2UsIHRhcmdldCk7XG4gICAgICAgICAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudCh0ZXh0aW5wdXRFdmVudCk7XG5cbiAgICAgICAgICAgIHZhciBpbnB1dEV2ZW50ID0gdGhpcy5jcmVhdGVFdmVudEZyb21LZXlzdHJva2UoJ2lucHV0Jywga2V5c3Ryb2tlLCB0YXJnZXQpO1xuICAgICAgICAgICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoaW5wdXRFdmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudHMgJiBLZXlFdmVudHMuVVApIHtcbiAgICAgICAgdmFyIGtleXVwRXZlbnQgPSB0aGlzLmNyZWF0ZUV2ZW50RnJvbUtleXN0cm9rZSgna2V5dXAnLCBrZXlzdHJva2UsIHRhcmdldCk7XG4gICAgICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KGtleXVwRXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHJhbnNpdGlvbk1vZGlmaWVycykge1xuICAgICAgICB0aGlzLmRpc3BhdGNoTW9kaWZpZXJTdGF0ZVRyYW5zaXRpb24odGFyZ2V0LCBrZXlzdHJva2UubW9kaWZpZXJzLCAwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2l0aW9ucyBmcm9tIG9uZSBtb2RpZmllciBzdGF0ZSB0byBhbm90aGVyIGJ5IGRpc3BhdGNoaW5nIGtleSBldmVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSB0YXJnZXRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbU1vZGlmaWVyU3RhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdG9Nb2RpZmllclN0YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50c1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Rpc3BhdGNoTW9kaWZpZXJTdGF0ZVRyYW5zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNwYXRjaE1vZGlmaWVyU3RhdGVUcmFuc2l0aW9uKHRhcmdldCwgZnJvbU1vZGlmaWVyU3RhdGUsIHRvTW9kaWZpZXJTdGF0ZSkge1xuICAgICAgdmFyIGV2ZW50cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogS2V5RXZlbnRzLkFMTDtcblxuICAgICAgdmFyIGN1cnJlbnRNb2RpZmllclN0YXRlID0gZnJvbU1vZGlmaWVyU3RhdGU7XG4gICAgICB2YXIgZGlkSGF2ZU1ldGEgPSAoZnJvbU1vZGlmaWVyU3RhdGUgJiBNRVRBKSA9PT0gTUVUQTtcbiAgICAgIHZhciB3aWxsSGF2ZU1ldGEgPSAodG9Nb2RpZmllclN0YXRlICYgTUVUQSkgPT09IE1FVEE7XG4gICAgICB2YXIgZGlkSGF2ZUN0cmwgPSAoZnJvbU1vZGlmaWVyU3RhdGUgJiBDVFJMKSA9PT0gQ1RSTDtcbiAgICAgIHZhciB3aWxsSGF2ZUN0cmwgPSAodG9Nb2RpZmllclN0YXRlICYgQ1RSTCkgPT09IENUUkw7XG4gICAgICB2YXIgZGlkSGF2ZVNoaWZ0ID0gKGZyb21Nb2RpZmllclN0YXRlICYgU0hJRlQpID09PSBTSElGVDtcbiAgICAgIHZhciB3aWxsSGF2ZVNoaWZ0ID0gKHRvTW9kaWZpZXJTdGF0ZSAmIFNISUZUKSA9PT0gU0hJRlQ7XG4gICAgICB2YXIgZGlkSGF2ZUFsdCA9IChmcm9tTW9kaWZpZXJTdGF0ZSAmIEFMVCkgPT09IEFMVDtcbiAgICAgIHZhciB3aWxsSGF2ZUFsdCA9ICh0b01vZGlmaWVyU3RhdGUgJiBBTFQpID09PSBBTFQ7XG5cbiAgICAgIHZhciBpbmNsdWRlS2V5VXAgPSBldmVudHMgJiBLZXlFdmVudHMuVVA7XG4gICAgICB2YXIgaW5jbHVkZUtleURvd24gPSBldmVudHMgJiBLZXlFdmVudHMuRE9XTjtcblxuICAgICAgaWYgKGluY2x1ZGVLZXlVcCAmJiBkaWRIYXZlTWV0YSA9PT0gdHJ1ZSAmJiB3aWxsSGF2ZU1ldGEgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIFJlbGVhc2UgdGhlIG1ldGEga2V5LlxuICAgICAgICBjdXJyZW50TW9kaWZpZXJTdGF0ZSAmPSB+TUVUQTtcbiAgICAgICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQodGhpcy5jcmVhdGVFdmVudEZyb21LZXlzdHJva2UoJ2tleXVwJywgbmV3IEtleXN0cm9rZShjdXJyZW50TW9kaWZpZXJTdGF0ZSwgdGhpcy5fYWN0aW9uS2V5Q29kZU1hcC5NRVRBKSwgdGFyZ2V0KSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmNsdWRlS2V5VXAgJiYgZGlkSGF2ZUN0cmwgPT09IHRydWUgJiYgd2lsbEhhdmVDdHJsID09PSBmYWxzZSkge1xuICAgICAgICAvLyBSZWxlYXNlIHRoZSBjdHJsIGtleS5cbiAgICAgICAgY3VycmVudE1vZGlmaWVyU3RhdGUgJj0gfkNUUkw7XG4gICAgICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KHRoaXMuY3JlYXRlRXZlbnRGcm9tS2V5c3Ryb2tlKCdrZXl1cCcsIG5ldyBLZXlzdHJva2UoY3VycmVudE1vZGlmaWVyU3RhdGUsIHRoaXMuX2FjdGlvbktleUNvZGVNYXAuQ1RSTCksIHRhcmdldCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5jbHVkZUtleVVwICYmIGRpZEhhdmVTaGlmdCA9PT0gdHJ1ZSAmJiB3aWxsSGF2ZVNoaWZ0ID09PSBmYWxzZSkge1xuICAgICAgICAvLyBSZWxlYXNlIHRoZSBzaGlmdCBrZXkuXG4gICAgICAgIGN1cnJlbnRNb2RpZmllclN0YXRlICY9IH5TSElGVDtcbiAgICAgICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQodGhpcy5jcmVhdGVFdmVudEZyb21LZXlzdHJva2UoJ2tleXVwJywgbmV3IEtleXN0cm9rZShjdXJyZW50TW9kaWZpZXJTdGF0ZSwgdGhpcy5fYWN0aW9uS2V5Q29kZU1hcC5TSElGVCksIHRhcmdldCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5jbHVkZUtleVVwICYmIGRpZEhhdmVBbHQgPT09IHRydWUgJiYgd2lsbEhhdmVBbHQgPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIFJlbGVhc2UgdGhlIGFsdCBrZXkuXG4gICAgICAgIGN1cnJlbnRNb2RpZmllclN0YXRlICY9IH5BTFQ7XG4gICAgICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KHRoaXMuY3JlYXRlRXZlbnRGcm9tS2V5c3Ryb2tlKCdrZXl1cCcsIG5ldyBLZXlzdHJva2UoY3VycmVudE1vZGlmaWVyU3RhdGUsIHRoaXMuX2FjdGlvbktleUNvZGVNYXAuQUxUKSwgdGFyZ2V0KSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmNsdWRlS2V5RG93biAmJiBkaWRIYXZlTWV0YSA9PT0gZmFsc2UgJiYgd2lsbEhhdmVNZXRhID09PSB0cnVlKSB7XG4gICAgICAgIC8vIFByZXNzIHRoZSBtZXRhIGtleS5cbiAgICAgICAgY3VycmVudE1vZGlmaWVyU3RhdGUgfD0gTUVUQTtcbiAgICAgICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQodGhpcy5jcmVhdGVFdmVudEZyb21LZXlzdHJva2UoJ2tleWRvd24nLCBuZXcgS2V5c3Ryb2tlKGN1cnJlbnRNb2RpZmllclN0YXRlLCB0aGlzLl9hY3Rpb25LZXlDb2RlTWFwLk1FVEEpLCB0YXJnZXQpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGluY2x1ZGVLZXlEb3duICYmIGRpZEhhdmVDdHJsID09PSBmYWxzZSAmJiB3aWxsSGF2ZUN0cmwgPT09IHRydWUpIHtcbiAgICAgICAgLy8gUHJlc3MgdGhlIGN0cmwga2V5LlxuICAgICAgICBjdXJyZW50TW9kaWZpZXJTdGF0ZSB8PSBDVFJMO1xuICAgICAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudCh0aGlzLmNyZWF0ZUV2ZW50RnJvbUtleXN0cm9rZSgna2V5ZG93bicsIG5ldyBLZXlzdHJva2UoY3VycmVudE1vZGlmaWVyU3RhdGUsIHRoaXMuX2FjdGlvbktleUNvZGVNYXAuQ1RSTCksIHRhcmdldCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5jbHVkZUtleURvd24gJiYgZGlkSGF2ZVNoaWZ0ID09PSBmYWxzZSAmJiB3aWxsSGF2ZVNoaWZ0ID09PSB0cnVlKSB7XG4gICAgICAgIC8vIFByZXNzIHRoZSBzaGlmdCBrZXkuXG4gICAgICAgIGN1cnJlbnRNb2RpZmllclN0YXRlIHw9IFNISUZUO1xuICAgICAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudCh0aGlzLmNyZWF0ZUV2ZW50RnJvbUtleXN0cm9rZSgna2V5ZG93bicsIG5ldyBLZXlzdHJva2UoY3VycmVudE1vZGlmaWVyU3RhdGUsIHRoaXMuX2FjdGlvbktleUNvZGVNYXAuU0hJRlQpLCB0YXJnZXQpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGluY2x1ZGVLZXlEb3duICYmIGRpZEhhdmVBbHQgPT09IGZhbHNlICYmIHdpbGxIYXZlQWx0ID09PSB0cnVlKSB7XG4gICAgICAgIC8vIFByZXNzIHRoZSBhbHQga2V5LlxuICAgICAgICBjdXJyZW50TW9kaWZpZXJTdGF0ZSB8PSBBTFQ7XG4gICAgICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KHRoaXMuY3JlYXRlRXZlbnRGcm9tS2V5c3Ryb2tlKCdrZXlkb3duJywgbmV3IEtleXN0cm9rZShjdXJyZW50TW9kaWZpZXJTdGF0ZSwgdGhpcy5fYWN0aW9uS2V5Q29kZU1hcC5BTFQpLCB0YXJnZXQpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRNb2RpZmllclN0YXRlICE9PSB0b01vZGlmaWVyU3RhdGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnRlcm5hbCBlcnJvciwgZXhwZWN0ZWQgbW9kaWZpZXIgc3RhdGU6ICcgKyB0b01vZGlmaWVyU3RhdGUgKyAoJywgZ290OiAnICsgY3VycmVudE1vZGlmaWVyU3RhdGUpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBrZXlzdHJva2UgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYWN0aW9uXG4gICAgICogQHJldHVybiB7P0tleXN0cm9rZX1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAna2V5c3Ryb2tlRm9yQWN0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24ga2V5c3Ryb2tlRm9yQWN0aW9uKGFjdGlvbikge1xuICAgICAgdmFyIGtleUNvZGUgPSBudWxsO1xuICAgICAgdmFyIG1vZGlmaWVycyA9IDA7XG5cbiAgICAgIHZhciBwYXJ0cyA9IGFjdGlvbi5zcGxpdCgnKycpO1xuICAgICAgdmFyIGxhc3RQYXJ0ID0gcGFydHMucG9wKCk7XG5cbiAgICAgIHBhcnRzLmZvckVhY2goZnVuY3Rpb24gKHBhcnQpIHtcbiAgICAgICAgc3dpdGNoIChwYXJ0LnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgICBjYXNlICdDVFJMJzpcbiAgICAgICAgICAgIG1vZGlmaWVycyB8PSBDVFJMO2JyZWFrO1xuICAgICAgICAgIGNhc2UgJ01FVEEnOlxuICAgICAgICAgICAgbW9kaWZpZXJzIHw9IE1FVEE7YnJlYWs7XG4gICAgICAgICAgY2FzZSAnQUxUJzpcbiAgICAgICAgICAgIG1vZGlmaWVycyB8PSBBTFQ7YnJlYWs7XG4gICAgICAgICAgY2FzZSAnU0hJRlQnOlxuICAgICAgICAgICAgbW9kaWZpZXJzIHw9IFNISUZUO2JyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2luIFwiJyArIGFjdGlvbiArICdcIiwgaW52YWxpZCBtb2RpZmllcjogJyArIHBhcnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGxhc3RQYXJ0LnRvVXBwZXJDYXNlKCkgaW4gdGhpcy5fYWN0aW9uS2V5Q29kZU1hcCkge1xuICAgICAgICBrZXlDb2RlID0gdGhpcy5fYWN0aW9uS2V5Q29kZU1hcFtsYXN0UGFydC50b1VwcGVyQ2FzZSgpXTtcbiAgICAgIH0gZWxzZSBpZiAobGFzdFBhcnQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHZhciBsYXN0UGFydEtleXN0cm9rZSA9IHRoaXMua2V5c3Ryb2tlRm9yQ2hhckNvZGUobGFzdFBhcnQuY2hhckNvZGVBdCgwKSk7XG4gICAgICAgIG1vZGlmaWVycyB8PSBsYXN0UGFydEtleXN0cm9rZS5tb2RpZmllcnM7XG4gICAgICAgIGtleUNvZGUgPSBsYXN0UGFydEtleXN0cm9rZS5rZXlDb2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbiBcIicgKyBhY3Rpb24gKyAnXCIsIGludmFsaWQgYWN0aW9uOiAnICsgbGFzdFBhcnQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IEtleXN0cm9rZShtb2RpZmllcnMsIGtleUNvZGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGtleXN0cm9rZSB1c2VkIHRvIGdlbmVyYXRlIHRoZSBnaXZlbiBjaGFyYWN0ZXIgY29kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjaGFyQ29kZVxuICAgICAqIEByZXR1cm4gez9LZXlzdHJva2V9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2tleXN0cm9rZUZvckNoYXJDb2RlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24ga2V5c3Ryb2tlRm9yQ2hhckNvZGUoY2hhckNvZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jaGFyQ29kZUtleUNvZGVNYXBbY2hhckNvZGVdIHx8IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFdmVudFRhcmdldH0gdGFyZ2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndGFyZ2V0Q2FuUmVjZWl2ZVRleHRJbnB1dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRhcmdldENhblJlY2VpdmVUZXh0SW5wdXQodGFyZ2V0KSB7XG4gICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc0VkaXRhYmxlKHRhcmdldCk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBLZXlib2FyZDtcbn0oKTtcblxudmFyIFVTX0VOR0xJU0hfQ0hBUkNPREVfS0VZQ09ERV9NQVAgPSB7XG4gIDMyOiBuZXcgS2V5c3Ryb2tlKDAsIDMyKSwgLy8gPHNwYWNlPlxuICAzMzogbmV3IEtleXN0cm9rZShTSElGVCwgNDkpLCAvLyAhXG4gIDM0OiBuZXcgS2V5c3Ryb2tlKFNISUZULCAyMjIpLCAvLyBcIlxuICAzNTogbmV3IEtleXN0cm9rZShTSElGVCwgNTEpLCAvLyAjXG4gIDM2OiBuZXcgS2V5c3Ryb2tlKFNISUZULCA1MiksIC8vICRcbiAgMzc6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDUzKSwgLy8gJVxuICAzODogbmV3IEtleXN0cm9rZShTSElGVCwgNTUpLCAvLyAmXG4gIDM5OiBuZXcgS2V5c3Ryb2tlKDAsIDIyMiksIC8vICdcbiAgNDA6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDU3KSwgLy8gKFxuICA0MTogbmV3IEtleXN0cm9rZShTSElGVCwgNDgpLCAvLyApXG4gIDQyOiBuZXcgS2V5c3Ryb2tlKFNISUZULCA1NiksIC8vICpcbiAgNDM6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDE4NyksIC8vICtcbiAgNDQ6IG5ldyBLZXlzdHJva2UoMCwgMTg4KSwgLy8gLFxuICA0NTogbmV3IEtleXN0cm9rZSgwLCAxODkpLCAvLyAtXG4gIDQ2OiBuZXcgS2V5c3Ryb2tlKDAsIDE5MCksIC8vIC5cbiAgNDc6IG5ldyBLZXlzdHJva2UoMCwgMTkxKSwgLy8gL1xuICA0ODogbmV3IEtleXN0cm9rZSgwLCA0OCksIC8vIDBcbiAgNDk6IG5ldyBLZXlzdHJva2UoMCwgNDkpLCAvLyAxXG4gIDUwOiBuZXcgS2V5c3Ryb2tlKDAsIDUwKSwgLy8gMlxuICA1MTogbmV3IEtleXN0cm9rZSgwLCA1MSksIC8vIDNcbiAgNTI6IG5ldyBLZXlzdHJva2UoMCwgNTIpLCAvLyA0XG4gIDUzOiBuZXcgS2V5c3Ryb2tlKDAsIDUzKSwgLy8gNVxuICA1NDogbmV3IEtleXN0cm9rZSgwLCA1NCksIC8vIDZcbiAgNTU6IG5ldyBLZXlzdHJva2UoMCwgNTUpLCAvLyA3XG4gIDU2OiBuZXcgS2V5c3Ryb2tlKDAsIDU2KSwgLy8gOFxuICA1NzogbmV3IEtleXN0cm9rZSgwLCA1NyksIC8vIDlcbiAgNTg6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDE4NiksIC8vIDpcbiAgNTk6IG5ldyBLZXlzdHJva2UoMCwgMTg2KSwgLy8gO1xuICA2MDogbmV3IEtleXN0cm9rZShTSElGVCwgMTg4KSwgLy8gPFxuICA2MTogbmV3IEtleXN0cm9rZSgwLCAxODcpLCAvLyA9XG4gIDYyOiBuZXcgS2V5c3Ryb2tlKFNISUZULCAxOTApLCAvLyA+XG4gIDYzOiBuZXcgS2V5c3Ryb2tlKFNISUZULCAxOTEpLCAvLyA/XG4gIDY0OiBuZXcgS2V5c3Ryb2tlKFNISUZULCA1MCksIC8vIEBcbiAgNjU6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDY1KSwgLy8gQVxuICA2NjogbmV3IEtleXN0cm9rZShTSElGVCwgNjYpLCAvLyBCXG4gIDY3OiBuZXcgS2V5c3Ryb2tlKFNISUZULCA2NyksIC8vIENcbiAgNjg6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDY4KSwgLy8gRFxuICA2OTogbmV3IEtleXN0cm9rZShTSElGVCwgNjkpLCAvLyBFXG4gIDcwOiBuZXcgS2V5c3Ryb2tlKFNISUZULCA3MCksIC8vIEZcbiAgNzE6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDcxKSwgLy8gR1xuICA3MjogbmV3IEtleXN0cm9rZShTSElGVCwgNzIpLCAvLyBIXG4gIDczOiBuZXcgS2V5c3Ryb2tlKFNISUZULCA3MyksIC8vIElcbiAgNzQ6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDc0KSwgLy8gSlxuICA3NTogbmV3IEtleXN0cm9rZShTSElGVCwgNzUpLCAvLyBLXG4gIDc2OiBuZXcgS2V5c3Ryb2tlKFNISUZULCA3NiksIC8vIExcbiAgNzc6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDc3KSwgLy8gTVxuICA3ODogbmV3IEtleXN0cm9rZShTSElGVCwgNzgpLCAvLyBOXG4gIDc5OiBuZXcgS2V5c3Ryb2tlKFNISUZULCA3OSksIC8vIE9cbiAgODA6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDgwKSwgLy8gUFxuICA4MTogbmV3IEtleXN0cm9rZShTSElGVCwgODEpLCAvLyBRXG4gIDgyOiBuZXcgS2V5c3Ryb2tlKFNISUZULCA4MiksIC8vIFJcbiAgODM6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDgzKSwgLy8gU1xuICA4NDogbmV3IEtleXN0cm9rZShTSElGVCwgODQpLCAvLyBUXG4gIDg1OiBuZXcgS2V5c3Ryb2tlKFNISUZULCA4NSksIC8vIFVcbiAgODY6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDg2KSwgLy8gVlxuICA4NzogbmV3IEtleXN0cm9rZShTSElGVCwgODcpLCAvLyBXXG4gIDg4OiBuZXcgS2V5c3Ryb2tlKFNISUZULCA4OCksIC8vIFhcbiAgODk6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDg5KSwgLy8gWVxuICA5MDogbmV3IEtleXN0cm9rZShTSElGVCwgOTApLCAvLyBaXG4gIDkxOiBuZXcgS2V5c3Ryb2tlKDAsIDIxOSksIC8vIFtcbiAgOTI6IG5ldyBLZXlzdHJva2UoMCwgMjIwKSwgLy8gXFxcbiAgOTM6IG5ldyBLZXlzdHJva2UoMCwgMjIxKSwgLy8gXVxuICA5NjogbmV3IEtleXN0cm9rZSgwLCAxOTIpLCAvLyBgXG4gIDk3OiBuZXcgS2V5c3Ryb2tlKDAsIDY1KSwgLy8gYVxuICA5ODogbmV3IEtleXN0cm9rZSgwLCA2NiksIC8vIGJcbiAgOTk6IG5ldyBLZXlzdHJva2UoMCwgNjcpLCAvLyBjXG4gIDEwMDogbmV3IEtleXN0cm9rZSgwLCA2OCksIC8vIGRcbiAgMTAxOiBuZXcgS2V5c3Ryb2tlKDAsIDY5KSwgLy8gZVxuICAxMDI6IG5ldyBLZXlzdHJva2UoMCwgNzApLCAvLyBmXG4gIDEwMzogbmV3IEtleXN0cm9rZSgwLCA3MSksIC8vIGdcbiAgMTA0OiBuZXcgS2V5c3Ryb2tlKDAsIDcyKSwgLy8gaFxuICAxMDU6IG5ldyBLZXlzdHJva2UoMCwgNzMpLCAvLyBpXG4gIDEwNjogbmV3IEtleXN0cm9rZSgwLCA3NCksIC8vIGpcbiAgMTA3OiBuZXcgS2V5c3Ryb2tlKDAsIDc1KSwgLy8ga1xuICAxMDg6IG5ldyBLZXlzdHJva2UoMCwgNzYpLCAvLyBsXG4gIDEwOTogbmV3IEtleXN0cm9rZSgwLCA3NyksIC8vIG1cbiAgMTEwOiBuZXcgS2V5c3Ryb2tlKDAsIDc4KSwgLy8gblxuICAxMTE6IG5ldyBLZXlzdHJva2UoMCwgNzkpLCAvLyBvXG4gIDExMjogbmV3IEtleXN0cm9rZSgwLCA4MCksIC8vIHBcbiAgMTEzOiBuZXcgS2V5c3Ryb2tlKDAsIDgxKSwgLy8gcVxuICAxMTQ6IG5ldyBLZXlzdHJva2UoMCwgODIpLCAvLyByXG4gIDExNTogbmV3IEtleXN0cm9rZSgwLCA4MyksIC8vIHNcbiAgMTE2OiBuZXcgS2V5c3Ryb2tlKDAsIDg0KSwgLy8gdFxuICAxMTc6IG5ldyBLZXlzdHJva2UoMCwgODUpLCAvLyB1XG4gIDExODogbmV3IEtleXN0cm9rZSgwLCA4NiksIC8vIHZcbiAgMTE5OiBuZXcgS2V5c3Ryb2tlKDAsIDg3KSwgLy8gd1xuICAxMjA6IG5ldyBLZXlzdHJva2UoMCwgODgpLCAvLyB4XG4gIDEyMTogbmV3IEtleXN0cm9rZSgwLCA4OSksIC8vIHlcbiAgMTIyOiBuZXcgS2V5c3Ryb2tlKDAsIDkwKSwgLy8gelxuICAxMjM6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDIxOSksIC8vIHtcbiAgMTI0OiBuZXcgS2V5c3Ryb2tlKFNISUZULCAyMjApLCAvLyB8XG4gIDEyNTogbmV3IEtleXN0cm9rZShTSElGVCwgMjIxKSwgLy8gfVxuICAxMjY6IG5ldyBLZXlzdHJva2UoU0hJRlQsIDE5MikgLy8gflxufTtcblxudmFyIFVTX0VOR0xJU0hfQUNUSU9OX0tFWUNPREVfTUFQID0ge1xuICBCQUNLU1BBQ0U6IDgsXG4gIFRBQjogOSxcbiAgRU5URVI6IDEzLFxuICBTSElGVDogMTYsXG4gIENUUkw6IDE3LFxuICBBTFQ6IDE4LFxuICBQQVVTRTogMTksXG4gIENBUFNMT0NLOiAyMCxcbiAgRVNDQVBFOiAyNyxcbiAgUEFHRVVQOiAzMyxcbiAgUEFHRURPV046IDM0LFxuICBFTkQ6IDM1LFxuICBIT01FOiAzNixcbiAgTEVGVDogMzcsXG4gIFVQOiAzOCxcbiAgUklHSFQ6IDM5LFxuICBET1dOOiA0MCxcbiAgSU5TRVJUOiA0NSxcbiAgREVMRVRFOiA0NixcbiAgTUVUQTogOTEsXG4gIEYxOiAxMTIsXG4gIEYyOiAxMTMsXG4gIEYzOiAxMTQsXG4gIEY0OiAxMTUsXG4gIEY1OiAxMTYsXG4gIEY2OiAxMTcsXG4gIEY3OiAxMTgsXG4gIEY4OiAxMTksXG4gIEY5OiAxMjAsXG4gIEYxMDogMTIxLFxuICBGMTE6IDEyMixcbiAgRjEyOiAxMjNcbn07XG5cbi8qKlxuICogR2V0cyBhIGtleWJvYXJkIGluc3RhbmNlIGNvbmZpZ3VyZWQgYXMgYSBVLlMuIEVuZ2xpc2gga2V5Ym9hcmQgd291bGQgYmUuXG4gKlxuICogQHJldHVybiB7S2V5Ym9hcmR9XG4gKi9cbktleWJvYXJkLlVTX0VOR0xJU0ggPSBuZXcgS2V5Ym9hcmQoVVNfRU5HTElTSF9DSEFSQ09ERV9LRVlDT0RFX01BUCwgVVNfRU5HTElTSF9BQ1RJT05fS0VZQ09ERV9NQVApO1xuXG5leHBvcnQgeyBLZXlFdmVudHMsIEtleXN0cm9rZSwgS2V5Ym9hcmQgfTtcbiIsImltcG9ydCB7S2V5Ym9hcmR9IGZyb20gJ2tleXNpbSdcbmtleWJvYXJkID0gS2V5Ym9hcmQuVVNfRU5HTElTSFxuXG5cbmV4cG9ydCBkZWZhdWx0ICh0YXJnZXQsIGtleXMsIHZhbHVlKS0+XG5cdHRhcmdldC5mb2N1cygpIGlmIHRhcmdldC5mb2N1c1xuXHR0YXJnZXQudmFsdWUgKz0gaWYgdmFsdWU/IHRoZW4gKHZhbHVlIG9yICcnKSBlbHNlIGtleXNcblx0a2V5Ym9hcmQuZGlzcGF0Y2hFdmVudHNGb3JJbnB1dChrZXlzLCB0YXJnZXQpXG5cblxuXG5cbiIsImltcG9ydCB7S2V5Ym9hcmR9IGZyb20gJ2tleXNpbSdcbmtleWJvYXJkID0gS2V5Ym9hcmQuVVNfRU5HTElTSFxuXG5cbmV4cG9ydCBkZWZhdWx0ICh0YXJnZXQsIGtleXMpLT5cblx0a2V5Ym9hcmQuZGlzcGF0Y2hFdmVudHNGb3JBY3Rpb24oa2V5cywgdGFyZ2V0KVxuXG5cblxuXG4iLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59dmFyIFJFR0VYX0xFTl9WQUwgPSAvXlxcZCsoPzpbYS16XXxcXCUpKyQvaTtcbnZhciBSRUdFWF9ESUdJVFMgPSAvXFxkKyQvO1xudmFyIFJFR0VYX1NQQUNFID0gL1xccy87XG52YXIgUkVHRVhfS0VCQUIgPSAvKFtBLVpdKSsvZztcbnZhciBJTVBPUlRBTlQgPSAnaW1wb3J0YW50JztcbnZhciBQT1NTSUJMRV9QUkVGSVhFUyA9IFsnd2Via2l0JywgJ21veicsICdtcycsICdvJ107XG52YXIgUkVRVUlSRVNfVU5JVF9WQUxVRSA9IFsnYmFja2dyb3VuZC1wb3NpdGlvbi14JywgJ2JhY2tncm91bmQtcG9zaXRpb24teScsICdibG9jay1zaXplJywgJ2JvcmRlci13aWR0aCcsICdjb2x1bW5SdWxlLXdpZHRoJywgJ2N4JywgJ2N5JywgJ2ZvbnQtc2l6ZScsICdncmlkLWNvbHVtbi1nYXAnLCAnZ3JpZC1yb3ctZ2FwJywgJ2hlaWdodCcsICdpbmxpbmUtc2l6ZScsICdsaW5lLWhlaWdodCcsICdtaW5CbG9jay1zaXplJywgJ21pbi1oZWlnaHQnLCAnbWluLWlubGluZS1zaXplJywgJ21pbi13aWR0aCcsICdtYXgtaGVpZ2h0JywgJ21heC13aWR0aCcsICdvdXRsaW5lLW9mZnNldCcsICdvdXRsaW5lLXdpZHRoJywgJ3BlcnNwZWN0aXZlJywgJ3NoYXBlLW1hcmdpbicsICdzdHJva2UtZGFzaG9mZnNldCcsICdzdHJva2Utd2lkdGgnLCAndGV4dC1pbmRlbnQnLCAnd2lkdGgnLCAnd29yZC1zcGFjaW5nJywgJ3RvcCcsICdib3R0b20nLCAnbGVmdCcsICdyaWdodCcsICd4JywgJ3knXTtcbnZhciBRVUFEX1NIT1JUSEFORFMgPSBbJ21hcmdpbicsICdwYWRkaW5nJywgJ2JvcmRlcicsICdib3JkZXItcmFkaXVzJ107XG52YXIgRElSRUNUSU9OUyA9IFsndG9wJywgJ2JvdHRvbScsICdsZWZ0JywgJ3JpZ2h0J107XG5RVUFEX1NIT1JUSEFORFMuZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgdmFyIGRpcmVjdGlvbiwgaSwgbGVuO1xuICBSRVFVSVJFU19VTklUX1ZBTFVFLnB1c2gocHJvcGVydHkpO1xuXG4gIGZvciAoaSA9IDAsIGxlbiA9IERJUkVDVElPTlMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBkaXJlY3Rpb24gPSBESVJFQ1RJT05TW2ldO1xuICAgIFJFUVVJUkVTX1VOSVRfVkFMVUUucHVzaChwcm9wZXJ0eSArICctJyArIGRpcmVjdGlvbik7XG4gIH1cbn0pO3ZhciBTQU1QTEVfU1RZTEUsIHN0eWxlQ29uZmlnO1xuU0FNUExFX1NUWUxFID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG52YXIgaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyh0YXJnZXQsIGl0ZW0pIHtcbiAgcmV0dXJuIHRhcmdldCAmJiB0YXJnZXQuaW5kZXhPZihpdGVtKSAhPT0gLTE7XG59O1xudmFyIGlzSXRlcmFibGUgPSBmdW5jdGlvbiBpc0l0ZXJhYmxlKHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0ICYmIF90eXBlb2YodGFyZ2V0KSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHRhcmdldC5sZW5ndGggPT09ICdudW1iZXInICYmICF0YXJnZXQubm9kZVR5cGU7XG59O1xudmFyIHRvS2ViYWJDYXNlID0gZnVuY3Rpb24gdG9LZWJhYkNhc2Uoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShSRUdFWF9LRUJBQiwgZnVuY3Rpb24gKGUsIGxldHRlcikge1xuICAgIHJldHVybiBcIi1cIi5jb25jYXQobGV0dGVyLnRvTG93ZXJDYXNlKCkpO1xuICB9KTtcbn07XG52YXIgaXNQcm9wU3VwcG9ydGVkID0gZnVuY3Rpb24gaXNQcm9wU3VwcG9ydGVkKHByb3BlcnR5KSB7XG4gIHJldHVybiB0eXBlb2YgU0FNUExFX1NUWUxFW3Byb3BlcnR5XSAhPT0gJ3VuZGVmaW5lZCc7XG59O1xudmFyIGlzVmFsdWVTdXBwb3J0ZWQgPSBmdW5jdGlvbiBpc1ZhbHVlU3VwcG9ydGVkKHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAod2luZG93LkNTUyAmJiB3aW5kb3cuQ1NTLnN1cHBvcnRzKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5DU1Muc3VwcG9ydHMocHJvcGVydHksIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBTQU1QTEVfU1RZTEVbcHJvcGVydHldID0gdmFsdWU7XG4gICAgcmV0dXJuIFNBTVBMRV9TVFlMRVtwcm9wZXJ0eV0gPT09ICcnICsgdmFsdWU7XG4gIH1cbn07XG52YXIgZ2V0UHJlZml4ID0gZnVuY3Rpb24gZ2V0UHJlZml4KHByb3BlcnR5LCBza2lwSW5pdGlhbENoZWNrKSB7XG4gIHZhciBqLCBsZW4xLCBwcmVmaXg7XG5cbiAgaWYgKHNraXBJbml0aWFsQ2hlY2sgfHwgIWlzUHJvcFN1cHBvcnRlZChwcm9wZXJ0eSkpIHtcbiAgICBmb3IgKGogPSAwLCBsZW4xID0gUE9TU0lCTEVfUFJFRklYRVMubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICBwcmVmaXggPSBQT1NTSUJMRV9QUkVGSVhFU1tqXTtcblxuICAgICAgaWYgKGlzUHJvcFN1cHBvcnRlZChcIi1cIi5jb25jYXQocHJlZml4LCBcIi1cIikuY29uY2F0KHByb3BlcnR5KSkpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgcmV0dXJuIFwiLVwiLmNvbmNhdChwcmVmaXgsIFwiLVwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gJyc7XG59O1xudmFyIG5vcm1hbGl6ZVByb3BlcnR5ID0gZnVuY3Rpb24gbm9ybWFsaXplUHJvcGVydHkocHJvcGVydHkpIHtcbiAgcHJvcGVydHkgPSB0b0tlYmFiQ2FzZShwcm9wZXJ0eSk7XG5cbiAgaWYgKGlzUHJvcFN1cHBvcnRlZChwcm9wZXJ0eSkpIHtcbiAgICByZXR1cm4gcHJvcGVydHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KGdldFByZWZpeChwcm9wZXJ0eSwgdHJ1ZSkpLmNvbmNhdChwcm9wZXJ0eSk7XG4gIH1cbn07XG52YXIgbm9ybWFsaXplVmFsdWUgPSBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKGluY2x1ZGVzKFJFUVVJUkVTX1VOSVRfVkFMVUUsIHByb3BlcnR5KSAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgIHZhbHVlID0gJycgKyB2YWx1ZTtcblxuICAgIGlmIChSRUdFWF9ESUdJVFMudGVzdCh2YWx1ZSkgJiYgIVJFR0VYX0xFTl9WQUwudGVzdCh2YWx1ZSkgJiYgIVJFR0VYX1NQQUNFLnRlc3QodmFsdWUpKSB7XG4gICAgICB2YWx1ZSArPSBwcm9wZXJ0eSA9PT0gJ2xpbmUtaGVpZ2h0JyA/ICdlbScgOiAncHgnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG52YXIgc29ydCA9IGZ1bmN0aW9uIHNvcnQoYXJyYXkpIHtcbiAgdmFyIGdyZWF0LCBpLCBsZW4sIGxlc3MsIHBpdm90O1xuXG4gIGlmIChhcnJheS5sZW5ndGggPCAyKSB7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9IGVsc2Uge1xuICAgIHBpdm90ID0gYXJyYXlbMF07XG4gICAgbGVzcyA9IFtdO1xuICAgIGdyZWF0ID0gW107XG4gICAgbGVuID0gYXJyYXkubGVuZ3RoO1xuICAgIGkgPSAwO1xuXG4gICAgd2hpbGUgKCsraSAhPT0gbGVuKSB7XG4gICAgICBpZiAoYXJyYXlbaV0gPD0gcGl2b3QpIHtcbiAgICAgICAgbGVzcy5wdXNoKGFycmF5W2ldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdyZWF0LnB1c2goYXJyYXlbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzb3J0KGxlc3MpLmNvbmNhdChwaXZvdCwgc29ydChncmVhdCkpO1xuICB9XG59O1xudmFyIGhhc2ggPSBmdW5jdGlvbiBoYXNoKHN0cmluZykge1xuICB2YXIgaHNoLCBpLCBsZW5ndGg7XG4gIGhzaCA9IDUzODE7XG4gIGkgPSAtMTtcbiAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcblxuICB3aGlsZSAoKytpICE9PSBzdHJpbmcubGVuZ3RoKSB7XG4gICAgaHNoID0gKGhzaCA8PCA1KSAtIGhzaCArIHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgIGhzaCB8PSAwO1xuICB9XG5cbiAgcmV0dXJuICdfJyArIChoc2ggPCAwID8gaHNoICogLTIgOiBoc2gpO1xufTtcbnZhciBydWxlVG9TdHJpbmcgPSBmdW5jdGlvbiBydWxlVG9TdHJpbmcocnVsZSwgaW1wb3J0YW50KSB7XG4gIHZhciBqLCBsZW4xLCBvdXRwdXQsIHByb3AsIHByb3BlcnR5LCBwcm9wcywgdmFsdWU7XG4gIG91dHB1dCA9ICcnO1xuICBwcm9wcyA9IHNvcnQoT2JqZWN0LmtleXMocnVsZSkpO1xuXG4gIGZvciAoaiA9IDAsIGxlbjEgPSBwcm9wcy5sZW5ndGg7IGogPCBsZW4xOyBqKyspIHtcbiAgICBwcm9wID0gcHJvcHNbal07XG5cbiAgICBpZiAodHlwZW9mIHJ1bGVbcHJvcF0gPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBydWxlW3Byb3BdID09PSAnbnVtYmVyJykge1xuICAgICAgcHJvcGVydHkgPSBub3JtYWxpemVQcm9wZXJ0eShwcm9wKTtcbiAgICAgIHZhbHVlID0gbm9ybWFsaXplVmFsdWUocHJvcGVydHksIHJ1bGVbcHJvcF0pO1xuXG4gICAgICBpZiAoaW1wb3J0YW50KSB7XG4gICAgICAgIHZhbHVlICs9IFwiICFpbXBvcnRhbnRcIjtcbiAgICAgIH1cblxuICAgICAgb3V0cHV0ICs9IFwiXCIuY29uY2F0KHByb3BlcnR5LCBcIjpcIikuY29uY2F0KHZhbHVlLCBcIjtcIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn07XG52YXIgaW5saW5lU3R5bGVDb25maWcgPSBzdHlsZUNvbmZpZyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG52YXIgaW5saW5lU3R5bGUgPSBmdW5jdGlvbiBpbmxpbmVTdHlsZShydWxlLCB2YWx1ZVRvU3RvcmUsIGxldmVsKSB7XG4gIHZhciBjb25maWcsIHN0eWxlRWw7XG5cbiAgaWYgKCEoY29uZmlnID0gc3R5bGVDb25maWdbbGV2ZWxdKSkge1xuICAgIHN0eWxlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgIHN0eWxlRWwuaWQgPSBcInF1aWNrY3NzXCIuY29uY2F0KGxldmVsIHx8ICcnKTtcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlRWwpO1xuICAgIHN0eWxlQ29uZmlnW2xldmVsXSA9IGNvbmZpZyA9IHtcbiAgICAgIGVsOiBzdHlsZUVsLFxuICAgICAgY29udGVudDogJycsXG4gICAgICBjYWNoZTogT2JqZWN0LmNyZWF0ZShudWxsKVxuICAgIH07XG4gIH1cblxuICBpZiAoIWNvbmZpZy5jYWNoZVtydWxlXSkge1xuICAgIGNvbmZpZy5jYWNoZVtydWxlXSA9IHZhbHVlVG9TdG9yZSB8fCB0cnVlO1xuICAgIGNvbmZpZy5lbC50ZXh0Q29udGVudCA9IGNvbmZpZy5jb250ZW50ICs9IHJ1bGU7XG4gIH1cbn07XG52YXIgY2xlYXJJbmxpbmVTdHlsZSA9IGZ1bmN0aW9uIGNsZWFySW5saW5lU3R5bGUobGV2ZWwpIHtcbiAgdmFyIGNvbmZpZywgaiwga2V5LCBrZXlzLCBsZW4xO1xuXG4gIGlmIChjb25maWcgPSBzdHlsZUNvbmZpZ1tsZXZlbF0pIHtcbiAgICBpZiAoIWNvbmZpZy5jb250ZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uZmlnLmVsLnRleHRDb250ZW50ID0gY29uZmlnLmNvbnRlbnQgPSAnJztcbiAgICBrZXlzID0gT2JqZWN0LmtleXMoY29uZmlnLmNhY2hlKTtcblxuICAgIGZvciAoaiA9IDAsIGxlbjEgPSBrZXlzLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAga2V5ID0ga2V5c1tqXTtcbiAgICAgIGNvbmZpZy5jYWNoZVtrZXldID0gbnVsbDtcbiAgICB9XG4gIH1cbn07dmFyIHZlcnNpb24gPSBcIjEuNC4zXCI7dmFyIF9xdWlja2NzcztcbnZhciBpbmRleCA9IF9xdWlja2NzcyA9IGZ1bmN0aW9uIHF1aWNrY3NzKHRhcmdldEVsLCBwcm9wZXJ0eSwgdmFsdWUsIGltcG9ydGFudCkge1xuICB2YXIgY29tcHV0ZWRTdHlsZSwgaSwgbGVuLCBzdWJFbCwgc3ViUHJvcGVydHksIHN1YlZhbHVlO1xuXG4gIHN3aXRjaCAoZmFsc2UpIHtcbiAgICBjYXNlICFpc0l0ZXJhYmxlKHRhcmdldEVsKTpcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHRhcmdldEVsLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHN1YkVsID0gdGFyZ2V0RWxbaV07XG5cbiAgICAgICAgX3F1aWNrY3NzKHN1YkVsLCBwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgX3R5cGVvZihwcm9wZXJ0eSkgIT09ICdvYmplY3QnOlxuICAgICAgLy8gUGFzc2VkIGEgc3R5bGUgbWFwXG4gICAgICBmb3IgKHN1YlByb3BlcnR5IGluIHByb3BlcnR5KSB7XG4gICAgICAgIHN1YlZhbHVlID0gcHJvcGVydHlbc3ViUHJvcGVydHldO1xuXG4gICAgICAgIF9xdWlja2Nzcyh0YXJnZXRFbCwgc3ViUHJvcGVydHksIHN1YlZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcHJvcGVydHkgPSBub3JtYWxpemVQcm9wZXJ0eShwcm9wZXJ0eSk7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbXB1dGVkU3R5bGUgPSB0YXJnZXRFbC5fY29tcHV0ZWRTdHlsZSB8fCAodGFyZ2V0RWwuX2NvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHRhcmdldEVsKSk7XG4gICAgICAgIHJldHVybiBjb21wdXRlZFN0eWxlW3Byb3BlcnR5XTtcbiAgICAgIH0gZWxzZSBpZiAocHJvcGVydHkpIHtcbiAgICAgICAgdGFyZ2V0RWwuc3R5bGUuc2V0UHJvcGVydHkocHJvcGVydHksIG5vcm1hbGl6ZVZhbHVlKHByb3BlcnR5LCB2YWx1ZSksIGltcG9ydGFudCA/IElNUE9SVEFOVCA6IHZvaWQgMCk7XG4gICAgICB9XG5cbiAgfVxufTtcblxuX3F1aWNrY3NzLmFuaW1hdGlvbiA9IGZ1bmN0aW9uIChuYW1lJCQxLCBmcmFtZXMpIHtcbiAgdmFyIGZyYW1lLCBnZW5lcmF0ZWQsIHByZWZpeCwgcnVsZXM7XG5cbiAgaWYgKG5hbWUkJDEgJiYgdHlwZW9mIG5hbWUkJDEgPT09ICdzdHJpbmcnICYmIGZyYW1lcyAmJiBfdHlwZW9mKGZyYW1lcykgPT09ICdvYmplY3QnKSB7XG4gICAgcHJlZml4ID0gZ2V0UHJlZml4KCdhbmltYXRpb24nKTtcbiAgICBnZW5lcmF0ZWQgPSAnJztcblxuICAgIGZvciAoZnJhbWUgaW4gZnJhbWVzKSB7XG4gICAgICBydWxlcyA9IGZyYW1lc1tmcmFtZV07XG4gICAgICBnZW5lcmF0ZWQgKz0gXCJcIi5jb25jYXQoZnJhbWUsIFwiIHtcIikuY29uY2F0KHJ1bGVUb1N0cmluZyhydWxlcyksIFwifVwiKTtcbiAgICB9XG5cbiAgICBnZW5lcmF0ZWQgPSBcIkBcIi5jb25jYXQocHJlZml4LCBcImtleWZyYW1lcyBcIikuY29uY2F0KG5hbWUkJDEsIFwiIHtcIikuY29uY2F0KGdlbmVyYXRlZCwgXCJ9XCIpO1xuICAgIHJldHVybiBpbmxpbmVTdHlsZShnZW5lcmF0ZWQsIHRydWUsIDApO1xuICB9XG59O1xuXG5fcXVpY2tjc3MucmVnaXN0ZXIgPSBmdW5jdGlvbiAocnVsZSwgbGV2ZWwsIGltcG9ydGFudCkge1xuICB2YXIgY2xhc3NOYW1lLCByZWYsIHN0eWxlO1xuXG4gIGlmIChydWxlICYmIF90eXBlb2YocnVsZSkgPT09ICdvYmplY3QnKSB7XG4gICAgbGV2ZWwgfHwgKGxldmVsID0gMCk7XG4gICAgcnVsZSA9IHJ1bGVUb1N0cmluZyhydWxlLCBpbXBvcnRhbnQpO1xuXG4gICAgaWYgKCEoY2xhc3NOYW1lID0gKHJlZiA9IGlubGluZVN0eWxlQ29uZmlnW2xldmVsXSkgIT0gbnVsbCA/IHJlZltydWxlXSA6IHZvaWQgMCkpIHtcbiAgICAgIGNsYXNzTmFtZSA9IGhhc2gocnVsZSk7XG4gICAgICBzdHlsZSA9IFwiLlwiLmNvbmNhdChjbGFzc05hbWUsIFwiIHtcIikuY29uY2F0KHJ1bGUsIFwifVwiKTtcbiAgICAgIGlubGluZVN0eWxlKHN0eWxlLCBjbGFzc05hbWUsIGxldmVsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG59O1xuXG5fcXVpY2tjc3MuY2xlYXJSZWdpc3RlcmVkID0gZnVuY3Rpb24gKGxldmVsKSB7XG4gIHJldHVybiBjbGVhcklubGluZVN0eWxlKGxldmVsIHx8IDApO1xufTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cblxuX3F1aWNrY3NzLlVOU0VUID0gZnVuY3Rpb24gKCkge1xuICBzd2l0Y2ggKGZhbHNlKSB7XG4gICAgY2FzZSAhaXNWYWx1ZVN1cHBvcnRlZCgnZGlzcGxheScsICd1bnNldCcpOlxuICAgICAgcmV0dXJuICd1bnNldCc7XG5cbiAgICBjYXNlICFpc1ZhbHVlU3VwcG9ydGVkKCdkaXNwbGF5JywgJ2luaXRpYWwnKTpcbiAgICAgIHJldHVybiAnaW5pdGlhbCc7XG5cbiAgICBjYXNlICFpc1ZhbHVlU3VwcG9ydGVkKCdkaXNwbGF5JywgJ2luaGVyaXQnKTpcbiAgICAgIHJldHVybiAnaW5oZXJpdCc7XG4gIH1cbn0oKTtcblxuX3F1aWNrY3NzLnN1cHBvcnRzID0gaXNWYWx1ZVN1cHBvcnRlZDtcbl9xdWlja2Nzcy5zdXBwb3J0c1Byb3BlcnR5ID0gaXNQcm9wU3VwcG9ydGVkO1xuX3F1aWNrY3NzLm5vcm1hbGl6ZVByb3BlcnR5ID0gbm9ybWFsaXplUHJvcGVydHk7XG5fcXVpY2tjc3Mubm9ybWFsaXplVmFsdWUgPSBub3JtYWxpemVWYWx1ZTtcbl9xdWlja2Nzcy52ZXJzaW9uID0gdmVyc2lvbjtleHBvcnQgZGVmYXVsdCBpbmRleDsiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59dmFyIF9leHRlbmQsIGlzQXJyYXksIGlzT2JqZWN0LCBfc2hvdWxkRGVlcEV4dGVuZDtcblxuaXNBcnJheSA9IGZ1bmN0aW9uIGlzQXJyYXkodGFyZ2V0KSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHRhcmdldCk7XG59O1xuXG5pc09iamVjdCA9IGZ1bmN0aW9uIGlzT2JqZWN0KHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0ICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0YXJnZXQpID09PSAnW29iamVjdCBPYmplY3RdJyB8fCBpc0FycmF5KHRhcmdldCk7XG59O1xuXG5fc2hvdWxkRGVlcEV4dGVuZCA9IGZ1bmN0aW9uIHNob3VsZERlZXBFeHRlbmQob3B0aW9ucywgdGFyZ2V0LCBwYXJlbnRLZXkpIHtcbiAgaWYgKG9wdGlvbnMuZGVlcCkge1xuICAgIGlmIChvcHRpb25zLm5vdERlZXApIHtcbiAgICAgIHJldHVybiAhb3B0aW9ucy5ub3REZWVwW3RhcmdldF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChvcHRpb25zLmRlZXBPbmx5KSB7XG4gICAgcmV0dXJuIG9wdGlvbnMuZGVlcE9ubHlbdGFyZ2V0XSB8fCBwYXJlbnRLZXkgJiYgX3Nob3VsZERlZXBFeHRlbmQob3B0aW9ucywgcGFyZW50S2V5KTtcbiAgfVxufTsgLy8gZWxzZSBmYWxzZVxuXG5cbnZhciBleHRlbmQgPSBfZXh0ZW5kID0gZnVuY3Rpb24gZXh0ZW5kKG9wdGlvbnMsIHRhcmdldCwgc291cmNlcywgcGFyZW50S2V5KSB7XG4gIHZhciBpLCBrZXksIGxlbiwgc291cmNlLCBzb3VyY2VWYWx1ZSwgc3ViVGFyZ2V0LCB0YXJnZXRWYWx1ZTtcblxuICBpZiAoIXRhcmdldCB8fCBfdHlwZW9mKHRhcmdldCkgIT09ICdvYmplY3QnICYmIHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0YXJnZXQgPSB7fTtcbiAgfVxuXG4gIGZvciAoaSA9IDAsIGxlbiA9IHNvdXJjZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuXG4gICAgaWYgKHNvdXJjZSAhPSBudWxsKSB7XG4gICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgc291cmNlVmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgdGFyZ2V0VmFsdWUgPSB0YXJnZXRba2V5XTtcblxuICAgICAgICBpZiAoc291cmNlVmFsdWUgPT09IHRhcmdldCB8fCBzb3VyY2VWYWx1ZSA9PT0gdm9pZCAwIHx8IHNvdXJjZVZhbHVlID09PSBudWxsICYmICFvcHRpb25zLmFsbG93TnVsbCAmJiAhb3B0aW9ucy5udWxsRGVsZXRlcyB8fCBvcHRpb25zLmtleXMgJiYgIW9wdGlvbnMua2V5c1trZXldIHx8IG9wdGlvbnMubm90S2V5cyAmJiBvcHRpb25zLm5vdEtleXNba2V5XSB8fCBvcHRpb25zLm93biAmJiAhc291cmNlLmhhc093blByb3BlcnR5KGtleSkgfHwgb3B0aW9ucy5nbG9iYWxGaWx0ZXIgJiYgIW9wdGlvbnMuZ2xvYmFsRmlsdGVyKHNvdXJjZVZhbHVlLCBrZXksIHNvdXJjZSkgfHwgb3B0aW9ucy5maWx0ZXJzICYmIG9wdGlvbnMuZmlsdGVyc1trZXldICYmICFvcHRpb25zLmZpbHRlcnNba2V5XShzb3VyY2VWYWx1ZSwga2V5LCBzb3VyY2UpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc291cmNlVmFsdWUgPT09IG51bGwgJiYgb3B0aW9ucy5udWxsRGVsZXRlcykge1xuICAgICAgICAgIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmdsb2JhbFRyYW5zZm9ybSkge1xuICAgICAgICAgIHNvdXJjZVZhbHVlID0gb3B0aW9ucy5nbG9iYWxUcmFuc2Zvcm0oc291cmNlVmFsdWUsIGtleSwgc291cmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnRyYW5zZm9ybXMgJiYgb3B0aW9ucy50cmFuc2Zvcm1zW2tleV0pIHtcbiAgICAgICAgICBzb3VyY2VWYWx1ZSA9IG9wdGlvbnMudHJhbnNmb3Jtc1trZXldKHNvdXJjZVZhbHVlLCBrZXksIHNvdXJjZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGZhbHNlKSB7XG4gICAgICAgICAgY2FzZSAhKG9wdGlvbnMuY29uY2F0ICYmIGlzQXJyYXkoc291cmNlVmFsdWUpICYmIGlzQXJyYXkodGFyZ2V0VmFsdWUpKTpcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gdGFyZ2V0VmFsdWUuY29uY2F0KHNvdXJjZVZhbHVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAhKF9zaG91bGREZWVwRXh0ZW5kKG9wdGlvbnMsIGtleSwgcGFyZW50S2V5KSAmJiBpc09iamVjdChzb3VyY2VWYWx1ZSkpOlxuICAgICAgICAgICAgc3ViVGFyZ2V0ID0gaXNPYmplY3QodGFyZ2V0VmFsdWUpID8gdGFyZ2V0VmFsdWUgOiBpc0FycmF5KHNvdXJjZVZhbHVlKSA/IFtdIDoge307XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IF9leHRlbmQob3B0aW9ucywgc3ViVGFyZ2V0LCBbc291cmNlVmFsdWVdLCBrZXkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2VWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O3ZhciB2ZXJzaW9uID0gXCIxLjcuNFwiO3ZhciBtb2RpZmllcnMsIG5ld0J1aWxkZXIsIG5vcm1hbGl6ZUtleXMsIHByaW1hcnlCdWlsZGVyO1xuXG5ub3JtYWxpemVLZXlzID0gZnVuY3Rpb24gbm9ybWFsaXplS2V5cyhrZXlzKSB7XG4gIHZhciBpLCBrZXksIGxlbiwgb3V0cHV0O1xuXG4gIGlmIChrZXlzKSB7XG4gICAgb3V0cHV0ID0ge307XG5cbiAgICBpZiAoX3R5cGVvZihrZXlzKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIG91dHB1dFtrZXlzXSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShrZXlzKSkge1xuICAgICAgICBrZXlzID0gT2JqZWN0LmtleXMoa2V5cyk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGtleXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgb3V0cHV0W2tleV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH1cbn07XG5cbm5ld0J1aWxkZXIgPSBmdW5jdGlvbiBuZXdCdWlsZGVyKGlzQmFzZSkge1xuICB2YXIgX2J1aWxkZXI7XG5cbiAgX2J1aWxkZXIgPSBmdW5jdGlvbiBidWlsZGVyKHRhcmdldCkge1xuICAgIHZhciB0aGVUYXJnZXQ7XG4gICAgdmFyICRfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgJF9pID0gLTEsIHNvdXJjZXMgPSBuZXcgQXJyYXkoJF9sZW4pOyB3aGlsZSAoKyskX2kgPCAkX2xlbikgc291cmNlc1skX2ldID0gYXJndW1lbnRzWyRfaV07XG5cbiAgICBpZiAoX2J1aWxkZXIub3B0aW9ucy50YXJnZXQpIHtcbiAgICAgIHRoZVRhcmdldCA9IF9idWlsZGVyLm9wdGlvbnMudGFyZ2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGVUYXJnZXQgPSB0YXJnZXQ7XG4gICAgICBzb3VyY2VzLnNoaWZ0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4dGVuZChfYnVpbGRlci5vcHRpb25zLCB0aGVUYXJnZXQsIHNvdXJjZXMpO1xuICB9O1xuXG4gIGlmIChpc0Jhc2UpIHtcbiAgICBfYnVpbGRlci5pc0Jhc2UgPSB0cnVlO1xuICB9XG5cbiAgX2J1aWxkZXIub3B0aW9ucyA9IHt9O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhfYnVpbGRlciwgbW9kaWZpZXJzKTtcbiAgcmV0dXJuIF9idWlsZGVyO1xufTtcblxubW9kaWZpZXJzID0ge1xuICAnZGVlcCc6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBfO1xuXG4gICAgICBfID0gdGhpcy5pc0Jhc2UgPyBuZXdCdWlsZGVyKCkgOiB0aGlzO1xuICAgICAgXy5vcHRpb25zLmRlZXAgPSB0cnVlO1xuICAgICAgcmV0dXJuIF87XG4gICAgfVxuICB9LFxuICAnb3duJzoge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIF87XG5cbiAgICAgIF8gPSB0aGlzLmlzQmFzZSA/IG5ld0J1aWxkZXIoKSA6IHRoaXM7XG4gICAgICBfLm9wdGlvbnMub3duID0gdHJ1ZTtcbiAgICAgIHJldHVybiBfO1xuICAgIH1cbiAgfSxcbiAgJ2FsbG93TnVsbCc6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBfO1xuXG4gICAgICBfID0gdGhpcy5pc0Jhc2UgPyBuZXdCdWlsZGVyKCkgOiB0aGlzO1xuICAgICAgXy5vcHRpb25zLmFsbG93TnVsbCA9IHRydWU7XG4gICAgICByZXR1cm4gXztcbiAgICB9XG4gIH0sXG4gICdudWxsRGVsZXRlcyc6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBfO1xuXG4gICAgICBfID0gdGhpcy5pc0Jhc2UgPyBuZXdCdWlsZGVyKCkgOiB0aGlzO1xuICAgICAgXy5vcHRpb25zLm51bGxEZWxldGVzID0gdHJ1ZTtcbiAgICAgIHJldHVybiBfO1xuICAgIH1cbiAgfSxcbiAgJ2NvbmNhdCc6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBfO1xuXG4gICAgICBfID0gdGhpcy5pc0Jhc2UgPyBuZXdCdWlsZGVyKCkgOiB0aGlzO1xuICAgICAgXy5vcHRpb25zLmNvbmNhdCA9IHRydWU7XG4gICAgICByZXR1cm4gXztcbiAgICB9XG4gIH0sXG4gICdjbG9uZSc6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBfO1xuXG4gICAgICBfID0gdGhpcy5pc0Jhc2UgPyBuZXdCdWlsZGVyKCkgOiB0aGlzO1xuICAgICAgXy5vcHRpb25zLnRhcmdldCA9IHt9O1xuICAgICAgcmV0dXJuIF87XG4gICAgfVxuICB9LFxuICAnbm90RGVlcCc6IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBfO1xuXG4gICAgICBfID0gdGhpcy5pc0Jhc2UgPyBuZXdCdWlsZGVyKCkgOiB0aGlzO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChrZXlzKSB7XG4gICAgICAgIF8ub3B0aW9ucy5ub3REZWVwID0gbm9ybWFsaXplS2V5cyhrZXlzKTtcbiAgICAgICAgcmV0dXJuIF87XG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgJ2RlZXBPbmx5Jzoge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIF87XG5cbiAgICAgIF8gPSB0aGlzLmlzQmFzZSA/IG5ld0J1aWxkZXIoKSA6IHRoaXM7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGtleXMpIHtcbiAgICAgICAgXy5vcHRpb25zLmRlZXBPbmx5ID0gbm9ybWFsaXplS2V5cyhrZXlzKTtcbiAgICAgICAgcmV0dXJuIF87XG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgJ2tleXMnOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgXztcblxuICAgICAgXyA9IHRoaXMuaXNCYXNlID8gbmV3QnVpbGRlcigpIDogdGhpcztcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoa2V5cykge1xuICAgICAgICBfLm9wdGlvbnMua2V5cyA9IG5vcm1hbGl6ZUtleXMoa2V5cyk7XG4gICAgICAgIHJldHVybiBfO1xuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gICdub3RLZXlzJzoge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIF87XG5cbiAgICAgIF8gPSB0aGlzLmlzQmFzZSA/IG5ld0J1aWxkZXIoKSA6IHRoaXM7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGtleXMpIHtcbiAgICAgICAgXy5vcHRpb25zLm5vdEtleXMgPSBub3JtYWxpemVLZXlzKGtleXMpO1xuICAgICAgICByZXR1cm4gXztcbiAgICAgIH07XG4gICAgfVxuICB9LFxuICAndHJhbnNmb3JtJzoge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIF87XG5cbiAgICAgIF8gPSB0aGlzLmlzQmFzZSA/IG5ld0J1aWxkZXIoKSA6IHRoaXM7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHRyYW5zZm9ybSkge1xuICAgICAgICBpZiAodHlwZW9mIHRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIF8ub3B0aW9ucy5nbG9iYWxUcmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNmb3JtICYmIF90eXBlb2YodHJhbnNmb3JtKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBfLm9wdGlvbnMudHJhbnNmb3JtcyA9IHRyYW5zZm9ybTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfO1xuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gICdmaWx0ZXInOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgXztcblxuICAgICAgXyA9IHRoaXMuaXNCYXNlID8gbmV3QnVpbGRlcigpIDogdGhpcztcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgXy5vcHRpb25zLmdsb2JhbEZpbHRlciA9IGZpbHRlcjtcbiAgICAgICAgfSBlbHNlIGlmIChmaWx0ZXIgJiYgX3R5cGVvZihmaWx0ZXIpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIF8ub3B0aW9ucy5maWx0ZXJzID0gZmlsdGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF87XG4gICAgICB9O1xuICAgIH1cbiAgfVxufTtcbnByaW1hcnlCdWlsZGVyID0gbmV3QnVpbGRlcih0cnVlKTtcbnByaW1hcnlCdWlsZGVyLnZlcnNpb24gPSB2ZXJzaW9uO1xudmFyIHByaW1hcnlCdWlsZGVyJDEgPSBwcmltYXJ5QnVpbGRlcjtleHBvcnQgZGVmYXVsdCBwcmltYXJ5QnVpbGRlciQxOyIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufXZhciBkZWZpbmVkID0gZnVuY3Rpb24gZGVmaW5lZChzdWJqZWN0KSB7XG4gIHJldHVybiBzdWJqZWN0ICE9PSB2b2lkIDA7XG59O1xudmFyIGFycmF5ID0gZnVuY3Rpb24gYXJyYXkoc3ViamVjdCkge1xuICByZXR1cm4gc3ViamVjdCBpbnN0YW5jZW9mIEFycmF5O1xufTtcbnZhciBvYmplY3QgPSBmdW5jdGlvbiBvYmplY3Qoc3ViamVjdCkge1xuICByZXR1cm4gX3R5cGVvZihzdWJqZWN0KSA9PT0gJ29iamVjdCcgJiYgc3ViamVjdDsgLy8gMm5kIGNoZWNrIGlzIHRvIHRlc3QgYWdhaW5zdCAnbnVsbCcgdmFsdWVzXG59O1xudmFyIG9iamVjdFBsYWluID0gZnVuY3Rpb24gb2JqZWN0UGxhaW4oc3ViamVjdCkge1xuICByZXR1cm4gb2JqZWN0KHN1YmplY3QpICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzdWJqZWN0KSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiYgc3ViamVjdC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufTtcbnZhciBzdHJpbmcgPSBmdW5jdGlvbiBzdHJpbmcoc3ViamVjdCkge1xuICByZXR1cm4gdHlwZW9mIHN1YmplY3QgPT09ICdzdHJpbmcnO1xufTtcbnZhciBudW1iZXIgPSBmdW5jdGlvbiBudW1iZXIoc3ViamVjdCkge1xuICByZXR1cm4gdHlwZW9mIHN1YmplY3QgPT09ICdudW1iZXInICYmICFpc05hTihzdWJqZWN0KTtcbn07XG52YXIgbnVtYmVyTG9vc2UgPSBmdW5jdGlvbiBudW1iZXJMb29zZShzdWJqZWN0KSB7XG4gIHJldHVybiBudW1iZXIoc3ViamVjdCkgfHwgc3RyaW5nKHN1YmplY3QpICYmIG51bWJlcihOdW1iZXIoc3ViamVjdCkpO1xufTtcbnZhciBpdGVyYWJsZSA9IGZ1bmN0aW9uIGl0ZXJhYmxlKHN1YmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdChzdWJqZWN0KSAmJiBudW1iZXIoc3ViamVjdC5sZW5ndGgpO1xufTtcbnZhciBmdW5jdGlvbl8gPSBmdW5jdGlvbiBmdW5jdGlvbl8oc3ViamVjdCkge1xuICByZXR1cm4gdHlwZW9mIHN1YmplY3QgPT09ICdmdW5jdGlvbic7XG59O3ZhciBuYXRpdmVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe2RlZmluZWQ6IGRlZmluZWQsYXJyYXk6IGFycmF5LG9iamVjdDogb2JqZWN0LG9iamVjdFBsYWluOiBvYmplY3RQbGFpbixzdHJpbmc6IHN0cmluZyxudW1iZXI6IG51bWJlcixudW1iZXJMb29zZTogbnVtYmVyTG9vc2UsaXRlcmFibGU6IGl0ZXJhYmxlLGZ1bmN0aW9uXzogZnVuY3Rpb25ffSk7dmFyIGRvbURvYyA9IGZ1bmN0aW9uIGRvbURvYyhzdWJqZWN0KSB7XG4gIHJldHVybiBzdWJqZWN0ICYmIHN1YmplY3Qubm9kZVR5cGUgPT09IDk7XG59O1xudmFyIGRvbUVsID0gZnVuY3Rpb24gZG9tRWwoc3ViamVjdCkge1xuICByZXR1cm4gc3ViamVjdCAmJiBzdWJqZWN0Lm5vZGVUeXBlID09PSAxO1xufTtcbnZhciBkb21UZXh0ID0gZnVuY3Rpb24gZG9tVGV4dChzdWJqZWN0KSB7XG4gIHJldHVybiBzdWJqZWN0ICYmIHN1YmplY3Qubm9kZVR5cGUgPT09IDM7XG59O1xudmFyIGRvbU5vZGUgPSBmdW5jdGlvbiBkb21Ob2RlKHN1YmplY3QpIHtcbiAgcmV0dXJuIGRvbUVsKHN1YmplY3QpIHx8IGRvbVRleHQoc3ViamVjdCk7XG59O1xudmFyIGRvbVRleHRhcmVhID0gZnVuY3Rpb24gZG9tVGV4dGFyZWEoc3ViamVjdCkge1xuICByZXR1cm4gc3ViamVjdCAmJiBzdWJqZWN0Lm5vZGVOYW1lID09PSAnVEVYVEFSRUEnO1xufTtcbnZhciBkb21JbnB1dCA9IGZ1bmN0aW9uIGRvbUlucHV0KHN1YmplY3QpIHtcbiAgcmV0dXJuIHN1YmplY3QgJiYgc3ViamVjdC5ub2RlTmFtZSA9PT0gJ0lOUFVUJztcbn07XG52YXIgZG9tU2VsZWN0ID0gZnVuY3Rpb24gZG9tU2VsZWN0KHN1YmplY3QpIHtcbiAgcmV0dXJuIHN1YmplY3QgJiYgc3ViamVjdC5ub2RlTmFtZSA9PT0gJ1NFTEVDVCc7XG59O1xudmFyIGRvbUZpZWxkID0gZnVuY3Rpb24gZG9tRmllbGQoc3ViamVjdCkge1xuICByZXR1cm4gZG9tSW5wdXQoc3ViamVjdCkgfHwgZG9tVGV4dGFyZWEoc3ViamVjdCkgfHwgZG9tU2VsZWN0KHN1YmplY3QpO1xufTt2YXIgZG9tID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe2RvbURvYzogZG9tRG9jLGRvbUVsOiBkb21FbCxkb21UZXh0OiBkb21UZXh0LGRvbU5vZGU6IGRvbU5vZGUsZG9tVGV4dGFyZWE6IGRvbVRleHRhcmVhLGRvbUlucHV0OiBkb21JbnB1dCxkb21TZWxlY3Q6IGRvbVNlbGVjdCxkb21GaWVsZDogZG9tRmllbGR9KTt2YXIgQVZBSUxfU0VUUywgQ2hlY2tzO1xuQVZBSUxfU0VUUyA9IHtcbiAgbmF0aXZlczogbmF0aXZlcyxcbiAgZG9tOiBkb21cbn07XG5cbkNoZWNrcyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIF9jcmVhdGVDbGFzcyhDaGVja3MsIFt7XG4gICAga2V5OiBcImNyZWF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgYXJncztcblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgQ2hlY2tzKGFyZ3MpO1xuICAgIH1cbiAgfV0pO1xuXG4gIGZ1bmN0aW9uIENoZWNrcyhzZXRzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENoZWNrcyk7XG5cbiAgICB2YXIgaSwgbGVuLCBzZXQ7XG5cbiAgICBpZiAoc2V0cyA9PSBudWxsKSB7XG4gICAgICBzZXRzID0gWyduYXRpdmVzJ107XG4gICAgfVxuXG4gICAgZm9yIChpID0gMCwgbGVuID0gc2V0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgc2V0ID0gc2V0c1tpXTtcblxuICAgICAgaWYgKEFWQUlMX1NFVFNbc2V0XSkge1xuICAgICAgICB0aGlzLmxvYWQoQVZBSUxfU0VUU1tzZXRdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQ2hlY2tzLCBbe1xuICAgIGtleTogXCJsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQoc2V0KSB7XG4gICAgICB2YXIga2V5LCB2YWx1ZTtcblxuICAgICAgaWYgKEFWQUlMX1NFVFMubmF0aXZlcy5zdHJpbmcoc2V0KSkge1xuICAgICAgICBzZXQgPSBBVkFJTF9TRVRTW3NldF07XG4gICAgICB9XG5cbiAgICAgIGlmICghQVZBSUxfU0VUUy5uYXRpdmVzLm9iamVjdFBsYWluKHNldCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGtleSBpbiBzZXQpIHtcbiAgICAgICAgdmFsdWUgPSBzZXRba2V5XTtcblxuICAgICAgICBpZiAoa2V5ID09PSAnZnVuY3Rpb25fJykge1xuICAgICAgICAgIGtleSA9ICdmdW5jdGlvbic7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ2hlY2tzO1xufSgpO1xuXG52YXIgaW5kZXggPSBDaGVja3MucHJvdG90eXBlLmNyZWF0ZSgpO2V4cG9ydCBkZWZhdWx0IGluZGV4OyIsImltcG9ydCBDU1MgZnJvbSdxdWlja2Nzcyc7aW1wb3J0IGV4dGVuZCBmcm9tJ3NtYXJ0LWV4dGVuZCc7aW1wb3J0IElTXyBmcm9tJ0BkYW5pZWxrYWxlbi9pcyc7ZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfVxufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59dmFyIHRlbXBsYXRlID0gWydpZCcsICduYW1lJywgJ3R5cGUnLCAnaHJlZicsICdzZWxlY3RlZCcsICdjaGVja2VkJywgJ2NsYXNzTmFtZSddOyAvLyBUbyBjb3B5IGZyb20gRE9NIEVsZW1lbnRzXG5cbnZhciBlbGVtZW50ID0gWydpZCcsICdyZWYnLCAndHlwZScsICduYW1lJywgJ3RleHQnLCAnc3R5bGUnLCAnY2xhc3MnLCAnY2xhc3NOYW1lJywgJ3VybCcsICdocmVmJywgJ3NlbGVjdGVkJywgJ2NoZWNrZWQnLCAncHJvcHMnLCAnYXR0cnMnLCAncGFzc1N0YXRlVG9DaGlsZHJlbicsICdzdGF0ZVRyaWdnZXJzJywgJ3VucGFzc2FibGVTdGF0ZXMnXTsgLy8gVXNlZCBpbiBRdWlja0VsZW1lbnQ6OnRvSlNPTlxuLy8gJ3JlbGF0ZWRJbnN0YW5jZSdcbnZhciBJUztcbklTID0gSVNfLmNyZWF0ZSgnbmF0aXZlcycsICdkb20nKTtcbklTLmxvYWQoe1xuICBxdWlja0RvbUVsOiBmdW5jdGlvbiBxdWlja0RvbUVsKHN1YmplY3QpIHtcbiAgICByZXR1cm4gc3ViamVjdCAmJiBzdWJqZWN0LmNvbnN0cnVjdG9yLm5hbWUgPT09ICdRdWlja0VsZW1lbnQnO1xuICB9LFxuICB0ZW1wbGF0ZTogZnVuY3Rpb24gdGVtcGxhdGUoc3ViamVjdCkge1xuICAgIHJldHVybiBzdWJqZWN0ICYmIHN1YmplY3QuY29uc3RydWN0b3IubmFtZSA9PT0gJ1F1aWNrVGVtcGxhdGUnO1xuICB9XG59KTsgLy8gYmF0Y2g6IChzdWJqZWN0KS0+IHN1YmplY3QgYW5kIHN1YmplY3QuY29uc3RydWN0b3IubmFtZSBpcyAnUXVpY2tCYXRjaCdcblxudmFyIElTJDEgPSBJUzt2YXIgUXVpY2tFbGVtZW50LCBRdWlja1dpbmRvdywgX3F1aWNrZG9tO1xuUXVpY2tFbGVtZW50ID0gbnVsbDtcblF1aWNrV2luZG93ID0gbnVsbDtcblxuX3F1aWNrZG9tID0gZnVuY3Rpb24gcXVpY2tkb20oKSB7XG4gIHZhciBhcmcsIGFyZ3MsIGVsZW1lbnQsIGksIGosIGxlbiwgcHJldkNvdW50O1xuICBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuXG4gIGZvciAoaSA9IGogPSAwLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOyBqIDwgbGVuOyBpID0gKytqKSB7XG4gICAgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgIGFyZ3NbaV0gPSBhcmc7XG4gIH1cblxuICBwcmV2Q291bnQgPSBRdWlja0VsZW1lbnQuY291bnQ7XG4gIGVsZW1lbnQgPSBfcXVpY2tkb20uY3JlYXRlKGFyZ3MpO1xuXG4gIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuX3Bvc3RDcmVhdGlvbiAmJiBRdWlja0VsZW1lbnQuY291bnQgIT09IHByZXZDb3VudCkge1xuICAgIGVsZW1lbnQuX3Bvc3RDcmVhdGlvbigpO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQ7XG59O1xuXG5fcXVpY2tkb20uY3JlYXRlID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgdmFyIGFyZ3NMZW5ndGgsIGNoaWxkLCBjaGlsZHJlbiwgZWxlbWVudCwgaSwgaiwgbGVuLCBvcHRpb25zLCB0eXBlO1xuXG4gIHN3aXRjaCAoZmFsc2UpIHtcbiAgICBjYXNlICFJUyQxLmFycmF5KGFyZ3NbMF0pOlxuICAgICAgcmV0dXJuIF9xdWlja2RvbS5hcHBseSh2b2lkIDAsIF90b0NvbnN1bWFibGVBcnJheShhcmdzWzBdKSk7XG5cbiAgICBjYXNlICFJUyQxLnRlbXBsYXRlKGFyZ3NbMF0pOlxuICAgICAgcmV0dXJuIGFyZ3NbMF0uc3Bhd24oKTtcblxuICAgIGNhc2UgIUlTJDEucXVpY2tEb21FbChhcmdzWzBdKTpcbiAgICAgIGlmIChhcmdzWzFdKSB7XG4gICAgICAgIHJldHVybiBhcmdzWzBdLnVwZGF0ZU9wdGlvbnMoYXJnc1sxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYXJnc1swXTtcbiAgICAgIH1cblxuICAgIGNhc2UgIShJUyQxLmRvbU5vZGUoYXJnc1swXSkgfHwgSVMkMS5kb21Eb2MoYXJnc1swXSkpOlxuICAgICAgaWYgKGFyZ3NbMF0uX3F1aWNrRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gYXJnc1swXS5fcXVpY2tFbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0eXBlID0gYXJnc1swXS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJyMnLCAnJyk7XG4gICAgICBvcHRpb25zID0gYXJnc1sxXSB8fCB7fTtcbiAgICAgIG9wdGlvbnMuZXhpc3RpbmcgPSBhcmdzWzBdO1xuICAgICAgcmV0dXJuIG5ldyBRdWlja0VsZW1lbnQodHlwZSwgb3B0aW9ucyk7XG5cbiAgICBjYXNlIGFyZ3NbMF0gIT09IHdpbmRvdzpcbiAgICAgIHJldHVybiBRdWlja1dpbmRvdztcblxuICAgIGNhc2UgIUlTJDEuc3RyaW5nKGFyZ3NbMF0pOlxuICAgICAgdHlwZSA9IGFyZ3NbMF0udG9Mb3dlckNhc2UoKTtcblxuICAgICAgaWYgKHR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICBvcHRpb25zID0gSVMkMS5vYmplY3QoYXJnc1sxXSkgPyBhcmdzWzFdIDoge1xuICAgICAgICAgIHRleHQ6IGFyZ3NbMV0gfHwgJydcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnMgPSBJUyQxLm9iamVjdChhcmdzWzFdKSA/IGFyZ3NbMV0gOiB7fTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudCA9IG5ldyBRdWlja0VsZW1lbnQodHlwZSwgb3B0aW9ucyk7XG5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBuZXcgQXJyYXkoYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoKTtcbiAgICAgICAgaSA9IDE7XG5cbiAgICAgICAgd2hpbGUgKCsraSA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICBjaGlsZHJlbltpICsgMV0gPSBhcmdzW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChqID0gMCwgbGVuID0gY2hpbGRyZW4ubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICBjaGlsZCA9IGNoaWxkcmVuW2pdO1xuXG4gICAgICAgICAgaWYgKElTJDEuc3RyaW5nKGNoaWxkKSkge1xuICAgICAgICAgICAgY2hpbGQgPSBfcXVpY2tkb20udGV4dChjaGlsZCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKElTJDEuYXJyYXkoY2hpbGQpKSB7XG4gICAgICAgICAgICBjaGlsZCA9IF9xdWlja2RvbS5hcHBseSh2b2lkIDAsIF90b0NvbnN1bWFibGVBcnJheShjaGlsZCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChJUyQxLnF1aWNrRG9tRWwoY2hpbGQpKSB7XG4gICAgICAgICAgICBlbGVtZW50LmFwcGVuZChjaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlbGVtZW50O1xuXG4gICAgY2FzZSAhKGFyZ3NbMF0gJiYgKElTJDEuZG9tTm9kZShhcmdzWzBdWzBdKSB8fCBJUyQxLmRvbURvYyhhcmdzWzBdWzBdKSkpOlxuICAgICAgcmV0dXJuIF9xdWlja2RvbShhcmdzWzBdWzBdKTtcbiAgfVxufTtcblxuX3F1aWNrZG9tLmh0bWwgPSBmdW5jdGlvbiAoaW5uZXJIVE1MKSB7XG4gIHZhciBjaGlsZHJlbiwgY29udGFpbmVyO1xuICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29udGFpbmVyLmlubmVySFRNTCA9IGlubmVySFRNTDtcbiAgY2hpbGRyZW4gPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChjb250YWluZXIuY2hpbGROb2Rlcyk7XG4gIHJldHVybiBfcXVpY2tkb20uYmF0Y2goY2hpbGRyZW4pO1xufTtcblxuX3F1aWNrZG9tLmlzUXVpY2tFbCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgcmV0dXJuIElTJDEucXVpY2tEb21FbCh0YXJnZXQpO1xufTtcblxuX3F1aWNrZG9tLmlzRWwgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIHJldHVybiBJUyQxLmRvbUVsKHRhcmdldCk7XG59O1xudmFyIGluaXQgPSBmdW5jdGlvbiBpbml0KFF1aWNrRWxlbWVudF8sIFF1aWNrV2luZG93Xykge1xuICBRdWlja0VsZW1lbnQgPSBRdWlja0VsZW1lbnRfO1xuICBRdWlja1dpbmRvdyA9IFF1aWNrV2luZG93XztcbiAgcmV0dXJuIF9xdWlja2RvbTtcbn07dmFyIGluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXModGFyZ2V0LCBpdGVtKSB7XG4gIHJldHVybiB0YXJnZXQgJiYgdGFyZ2V0LmluZGV4T2YoaXRlbSkgIT09IC0xO1xufTtcbnZhciByZW1vdmVJdGVtID0gZnVuY3Rpb24gcmVtb3ZlSXRlbSh0YXJnZXQsIGl0ZW0pIHtcbiAgdmFyIGl0ZW1JbmRleDtcbiAgaXRlbUluZGV4ID0gdGFyZ2V0LmluZGV4T2YoaXRlbSk7XG5cbiAgaWYgKGl0ZW1JbmRleCAhPT0gLTEpIHtcbiAgICB0YXJnZXQuc3BsaWNlKGl0ZW1JbmRleCwgMSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcbnZhciBub3JtYWxpemVFbGVtZW50QXJnID0gZnVuY3Rpb24gbm9ybWFsaXplRWxlbWVudEFyZyh0YXJnZXRFbCkge1xuICBzd2l0Y2ggKGZhbHNlKSB7XG4gICAgY2FzZSAhSVMkMS5zdHJpbmcodGFyZ2V0RWwpOlxuICAgICAgcmV0dXJuIHF1aWNrZG9tLnRleHQodGFyZ2V0RWwpO1xuXG4gICAgY2FzZSAhSVMkMS5kb21Ob2RlKHRhcmdldEVsKTpcbiAgICAgIHJldHVybiBxdWlja2RvbSh0YXJnZXRFbCk7XG5cbiAgICBjYXNlICFJUyQxLnRlbXBsYXRlKHRhcmdldEVsKTpcbiAgICAgIHJldHVybiB0YXJnZXRFbC5zcGF3bigpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB0YXJnZXRFbDtcbiAgfVxufTtcbnZhciBpc1N0YXRlU3R5bGUgPSBmdW5jdGlvbiBpc1N0YXRlU3R5bGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmdbMF0gPT09ICckJyB8fCBzdHJpbmdbMF0gPT09ICdAJztcbn07XG52YXIgcmVnaXN0ZXJTdHlsZSA9IGZ1bmN0aW9uIHJlZ2lzdGVyU3R5bGUocnVsZSwgbGV2ZWwsIGltcG9ydGFudCkge1xuICB2YXIgY2FjaGVkLCBpLCBsZW4sIG91dHB1dCwgcHJvcCwgcHJvcHM7XG4gIGxldmVsIHx8IChsZXZlbCA9IDApO1xuICBjYWNoZWQgPSBzdHlsZUNhY2hlLmdldChydWxlLCBsZXZlbCk7XG5cbiAgaWYgKGNhY2hlZCkge1xuICAgIHJldHVybiBjYWNoZWQ7XG4gIH1cblxuICBvdXRwdXQgPSB7XG4gICAgY2xhc3NOYW1lOiBbQ1NTLnJlZ2lzdGVyKHJ1bGUsIGxldmVsLCBpbXBvcnRhbnQpXSxcbiAgICBmbnM6IFtdLFxuICAgIHJ1bGU6IHJ1bGVcbiAgfTtcbiAgcHJvcHMgPSBPYmplY3Qua2V5cyhydWxlKTtcblxuICBmb3IgKGkgPSAwLCBsZW4gPSBwcm9wcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHByb3AgPSBwcm9wc1tpXTtcblxuICAgIGlmICh0eXBlb2YgcnVsZVtwcm9wXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3V0cHV0LmZucy5wdXNoKFtwcm9wLCBydWxlW3Byb3BdXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0eWxlQ2FjaGUuc2V0KHJ1bGUsIG91dHB1dCwgbGV2ZWwpO1xufTtcbnZhciBzdHlsZUNhY2hlID0gbmV3IChcbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gX2NsYXNzKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfY2xhc3MpO1xuXG4gICAgdGhpcy5rZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLnZhbHVlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoX2NsYXNzLCBbe1xuICAgIGtleTogXCJnZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KGtleSwgbGV2ZWwpIHtcbiAgICAgIHZhciBpbmRleDtcblxuICAgICAgaWYgKHRoaXMua2V5c1tsZXZlbF0pIHtcbiAgICAgICAgaW5kZXggPSB0aGlzLmtleXNbbGV2ZWxdLmluZGV4T2Yoa2V5KTtcblxuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzW2xldmVsXVtpbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlLCBsZXZlbCkge1xuICAgICAgaWYgKCF0aGlzLmtleXNbbGV2ZWxdKSB7XG4gICAgICAgIHRoaXMua2V5c1tsZXZlbF0gPSBbXTtcbiAgICAgICAgdGhpcy52YWx1ZXNbbGV2ZWxdID0gW107XG4gICAgICB9XG5cbiAgICAgIHRoaXMua2V5c1tsZXZlbF0ucHVzaChrZXkpO1xuICAgICAgdGhpcy52YWx1ZXNbbGV2ZWxdLnB1c2godmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBfY2xhc3M7XG59KCkpKCk7dmFyIFJFR0VYX1dISVRFU1BBQ0U7XG5SRUdFWF9XSElURVNQQUNFID0gL1xccysvO1xudmFyIG9uXyA9IGZ1bmN0aW9uIG9uXyhldmVudE5hbWVzLCBjYWxsYmFjaywgdXNlQ2FwdHVyZSwgaXNQcml2YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIGNhbGxiYWNrUmVmLCBzcGxpdDtcblxuICBpZiAodGhpcy5fZXZlbnRDYWxsYmFja3MgPT0gbnVsbCkge1xuICAgIHRoaXMuX2V2ZW50Q2FsbGJhY2tzID0ge1xuICAgICAgX19yZWZzOiB7fVxuICAgIH07XG4gIH1cblxuICBpZiAoSVMkMS5zdHJpbmcoZXZlbnROYW1lcykgJiYgSVMkMS5mdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICBzcGxpdCA9IGV2ZW50TmFtZXMuc3BsaXQoJy4nKTtcbiAgICBjYWxsYmFja1JlZiA9IHNwbGl0WzFdO1xuICAgIGV2ZW50TmFtZXMgPSBzcGxpdFswXTtcblxuICAgIGlmIChldmVudE5hbWVzID09PSAnaW5zZXJ0ZWQnICYmIHRoaXMuX2luc2VydGVkKSB7XG4gICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIHRoaXMuX3BhcmVudCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBldmVudE5hbWVzLnNwbGl0KFJFR0VYX1dISVRFU1BBQ0UpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgdmFyIGJhc2U7XG5cbiAgICAgIGlmICghX3RoaXMuX2V2ZW50Q2FsbGJhY2tzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgX3RoaXMuX2V2ZW50Q2FsbGJhY2tzW2V2ZW50TmFtZV0gPSBbXTtcblxuICAgICAgICBpZiAoIWlzUHJpdmF0ZSkge1xuICAgICAgICAgIF90aGlzLl9saXN0ZW5UbyhldmVudE5hbWUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9pbnZva2VIYW5kbGVycyhldmVudE5hbWUsIGV2ZW50KTtcbiAgICAgICAgICB9LCB1c2VDYXB0dXJlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY2FsbGJhY2tSZWYpIHtcbiAgICAgICAgaWYgKChiYXNlID0gX3RoaXMuX2V2ZW50Q2FsbGJhY2tzLl9fcmVmcylbZXZlbnROYW1lXSA9PSBudWxsKSB7XG4gICAgICAgICAgYmFzZVtldmVudE5hbWVdID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5fZXZlbnRDYWxsYmFja3MuX19yZWZzW2V2ZW50TmFtZV1bY2FsbGJhY2tSZWZdID0gY2FsbGJhY2s7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfdGhpcy5fZXZlbnRDYWxsYmFja3NbZXZlbnROYW1lXS5wdXNoKGNhbGxiYWNrKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcbnZhciBvbmNlID0gZnVuY3Rpb24gb25jZShldmVudE5hbWVzLCBjYWxsYmFjaykge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICB2YXIgX29uY2VDYWxsYmFjaztcblxuICBpZiAoSVMkMS5zdHJpbmcoZXZlbnROYW1lcykgJiYgSVMkMS5mdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICB0aGlzLm9uKGV2ZW50TmFtZXMsIF9vbmNlQ2FsbGJhY2sgPSBmdW5jdGlvbiBvbmNlQ2FsbGJhY2soZXZlbnQpIHtcbiAgICAgIF90aGlzMi5vZmYoZXZlbnROYW1lcywgX29uY2VDYWxsYmFjayk7XG5cbiAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKF90aGlzMiwgZXZlbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xudmFyIG9mZl8gPSBmdW5jdGlvbiBvZmZfKGV2ZW50TmFtZXMsIGNhbGxiYWNrKSB7XG4gIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gIHZhciBjYWxsYmFja1JlZiwgZXZlbnROYW1lLCBzcGxpdDtcblxuICBpZiAodGhpcy5fZXZlbnRDYWxsYmFja3MgPT0gbnVsbCkge1xuICAgIHRoaXMuX2V2ZW50Q2FsbGJhY2tzID0ge1xuICAgICAgX19yZWZzOiB7fVxuICAgIH07XG4gIH1cblxuICBpZiAoIUlTJDEuc3RyaW5nKGV2ZW50TmFtZXMpKSB7XG4gICAgZm9yIChldmVudE5hbWUgaW4gdGhpcy5fZXZlbnRDYWxsYmFja3MpIHtcbiAgICAgIHRoaXMub2ZmKGV2ZW50TmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHNwbGl0ID0gZXZlbnROYW1lcy5zcGxpdCgnLicpO1xuICAgIGNhbGxiYWNrUmVmID0gc3BsaXRbMV07XG4gICAgZXZlbnROYW1lcyA9IHNwbGl0WzBdO1xuICAgIGV2ZW50TmFtZXMuc3BsaXQoUkVHRVhfV0hJVEVTUEFDRSkuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICB2YXIgcmVmO1xuXG4gICAgICBpZiAoX3RoaXMzLl9ldmVudENhbGxiYWNrc1tldmVudE5hbWVdKSB7XG4gICAgICAgIGlmIChjYWxsYmFjayA9PSBudWxsKSB7XG4gICAgICAgICAgY2FsbGJhY2sgPSAocmVmID0gX3RoaXMzLl9ldmVudENhbGxiYWNrcy5fX3JlZnNbZXZlbnROYW1lXSkgIT0gbnVsbCA/IHJlZltjYWxsYmFja1JlZl0gOiB2b2lkIDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoSVMkMS5mdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgICAgICByZXR1cm4gcmVtb3ZlSXRlbShfdGhpczMuX2V2ZW50Q2FsbGJhY2tzW2V2ZW50TmFtZV0sIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIGlmICghY2FsbGJhY2tSZWYpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMzLl9ldmVudENhbGxiYWNrc1tldmVudE5hbWVdLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcbnZhciBlbWl0ID0gZnVuY3Rpb24gZW1pdChldmVudE5hbWUpIHtcbiAgdmFyIGJ1YmJsZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gIHZhciBjYW5jZWxhYmxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB0cnVlO1xuICB2YXIgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkO1xuICB2YXIgZXZlbnQ7XG5cbiAgaWYgKGV2ZW50TmFtZSAmJiBJUyQxLnN0cmluZyhldmVudE5hbWUpKSB7XG4gICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldmVudC5pbml0RXZlbnQoZXZlbnROYW1lLCBidWJibGVzLCBjYW5jZWxhYmxlKTtcblxuICAgIGlmIChkYXRhICYmIF90eXBlb2YoZGF0YSkgPT09ICdvYmplY3QnKSB7XG4gICAgICBleHRlbmQoZXZlbnQsIGRhdGEpO1xuICAgIH1cblxuICAgIHRoaXMuZWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG52YXIgZW1pdFByaXZhdGUgPSBmdW5jdGlvbiBlbWl0UHJpdmF0ZShldmVudE5hbWUsIGFyZykge1xuICB2YXIgcmVmO1xuXG4gIGlmIChldmVudE5hbWUgJiYgSVMkMS5zdHJpbmcoZXZlbnROYW1lKSAmJiAoKHJlZiA9IHRoaXMuX2V2ZW50Q2FsbGJhY2tzKSAhPSBudWxsID8gcmVmW2V2ZW50TmFtZV0gOiB2b2lkIDApKSB7XG4gICAgdGhpcy5faW52b2tlSGFuZGxlcnMoZXZlbnROYW1lLCBhcmcpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xudmFyIF9pbnZva2VIYW5kbGVycyA9IGZ1bmN0aW9uIF9pbnZva2VIYW5kbGVycyhldmVudE5hbWUsIGFyZykge1xuICB2YXIgY2FsbGJhY2tzLCBjYiwgaSwgbGVuO1xuICBjYWxsYmFja3MgPSB0aGlzLl9ldmVudENhbGxiYWNrc1tldmVudE5hbWVdLnNsaWNlKCk7XG5cbiAgZm9yIChpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY2IgPSBjYWxsYmFja3NbaV07XG4gICAgY2IuY2FsbCh0aGlzLCBhcmcpO1xuICB9XG59O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxudmFyIF9saXN0ZW5UbyA9IGZ1bmN0aW9uIF9saXN0ZW5UbyhldmVudE5hbWUsIGNhbGxiYWNrLCB1c2VDYXB0dXJlKSB7XG4gIHZhciBldmVudE5hbWVUb0xpc3RlbkZvciwgbGlzdGVuTWV0aG9kO1xuICBsaXN0ZW5NZXRob2QgPSB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAnYXR0YWNoRXZlbnQnO1xuICBldmVudE5hbWVUb0xpc3RlbkZvciA9IHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lciA/IGV2ZW50TmFtZSA6IFwib25cIi5jb25jYXQoZXZlbnROYW1lKTtcbiAgdGhpcy5lbFtsaXN0ZW5NZXRob2RdKGV2ZW50TmFtZVRvTGlzdGVuRm9yLCBjYWxsYmFjaywgdXNlQ2FwdHVyZSk7XG4gIHJldHVybiB0aGlzO1xufTtcbmZ1bmN0aW9uIGV2ZW50cyAoUXVpY2tFbGVtZW50KSB7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUub24gPSBvbl87XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUub25jZSA9IG9uY2U7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUub2ZmID0gb2ZmXztcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5lbWl0ID0gZW1pdDtcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5lbWl0UHJpdmF0ZSA9IGVtaXRQcml2YXRlO1xuICBRdWlja0VsZW1lbnQucHJvdG90eXBlLl9pbnZva2VIYW5kbGVycyA9IF9pbnZva2VIYW5kbGVycztcbiAgcmV0dXJuIFF1aWNrRWxlbWVudC5wcm90b3R5cGUuX2xpc3RlblRvID0gX2xpc3RlblRvO1xufS8qKlxuICogU2V0cy9nZXRzIHRoZSB2YWx1ZSBvZiBhIHN0eWxlIHByb3BlcnR5LiBJbiBnZXR0ZXIgbW9kZSB0aGUgY29tcHV0ZWQgcHJvcGVydHkgb2ZcbiAqIHRoZSBzdHlsZSB3aWxsIGJlIHJldHVybmVkIHVubGVzcyB0aGUgZWxlbWVudCBpcyBub3QgaW5zZXJ0ZWQgaW50byB0aGUgRE9NLiBJblxuICogd2Via2l0IGJyb3dzZXJzIGFsbCBjb21wdXRlZCBwcm9wZXJ0aWVzIG9mIGEgZGV0YWNoZWQgbm9kZSBhcmUgYWx3YXlzIGFuIGVtcHR5XG4gKiBzdHJpbmcgYnV0IGluIGdlY2tvIHRoZXkgcmVmbGVjdCBvbiB0aGUgYWN0dWFsIGNvbXB1dGVkIHZhbHVlLCBoZW5jZSB3ZSBuZWVkXG4gKiB0byBcIm5vcm1hbGl6ZVwiIHRoaXMgYmVoYXZpb3IgYW5kIG1ha2Ugc3VyZSB0aGF0IGV2ZW4gb24gZ2Vja28gYW4gZW1wdHkgc3RyaW5nXG4gKiBpcyByZXR1cm5lZFxuICogQHJldHVybiB7W3R5cGVdfSBbZGVzY3JpcHRpb25dXG4gKi9cblxudmFyIHN0eWxlID0gZnVuY3Rpb24gc3R5bGUocHJvcGVydHkpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgYXJncywgaSwga2V5LCBrZXlzLCByZXN1bHQsIHZhbHVlO1xuXG4gIGlmICh0aGlzLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgaWYgKElTJDEuc3RyaW5nKHByb3BlcnR5KSkge1xuICAgIHZhbHVlID0gdHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicgPyBhcmdzWzFdLmNhbGwodGhpcywgdGhpcy5yZWxhdGVkKSA6IGFyZ3NbMV07XG5cbiAgICBpZiAoYXJnc1sxXSA9PT0gbnVsbCAmJiBJUyQxLmRlZmluZWQodGhpcy5jdXJyZW50U3RhdGVTdHlsZShwcm9wZXJ0eSkpICYmICFJUyQxLmZ1bmN0aW9uKHRoaXMuY3VycmVudFN0YXRlU3R5bGUocHJvcGVydHkpKSkge1xuICAgICAgdmFsdWUgPSBDU1MuVU5TRVQ7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWx1ZS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gQ1NTKF90aGlzLmVsLCBwcm9wZXJ0eSwgdmFsdWUsIF90aGlzLm9wdGlvbnMuZm9yY2VTdHlsZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gQ1NTKHRoaXMuZWwsIHByb3BlcnR5LCB2YWx1ZSwgdGhpcy5vcHRpb25zLmZvcmNlU3R5bGUpO1xuICAgIH1cblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGlmICh0aGlzLl9pbnNlcnRlZCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSBlbHNlIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKElTJDEub2JqZWN0KHByb3BlcnR5KSkge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0eSk7XG4gICAgaSA9IC0xO1xuXG4gICAgd2hpbGUgKGtleSA9IGtleXNbKytpXSkge1xuICAgICAgdGhpcy5zdHlsZShrZXksIHByb3BlcnR5W2tleV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcbi8qKlxuKiBBdHRlbXB0cyB0byByZXNvbHZlIHRoZSB2YWx1ZSBmb3IgYSBnaXZlbiBwcm9wZXJ0eSBpbiB0aGUgZm9sbG93aW5nIG9yZGVyIGlmIGVhY2ggb25lIGlzbid0IGEgdmFsaWQgdmFsdWU6XG4qIDEuIGZyb20gY29tcHV0ZWQgc3R5bGUgKGZvciBkb20taW5zZXJ0ZWQgZWxzKVxuKiAyLiBmcm9tIERPTUVsZW1lbnQuc3R5bGUgb2JqZWN0IChmb3Igbm9uLWluc2VydGVkIGVsczsgaWYgb3B0aW9ucy5zdHlsZUFmdGVySW5zZXJ0LCB3aWxsIG9ubHkgaGF2ZSBzdGF0ZSBzdHlsZXMpXG4qIDMuIGZyb20gcHJvdmlkZWQgc3R5bGUgb3B0aW9uc1xuKiAoZm9yIG5vbi1pbnNlcnRlZCBlbHM7IGNoZWNraW5nIG9ubHkgJGJhc2Ugc2luY2Ugc3RhdGUgc3R5bGVzIHdpbGwgYWx3YXlzIGJlIGFwcGxpZWQgdG8gdGhlIHN0eWxlIG9iamVjdCBldmVuIGZvciBub24taW5zZXJ0ZWQpXG4gKi9cblxudmFyIHN0eWxlU2FmZSA9IGZ1bmN0aW9uIHN0eWxlU2FmZShwcm9wZXJ0eSwgc2tpcENvbXB1dGVkKSB7XG4gIHZhciBjb21wdXRlZCwgcmVzdWx0LCBzYW1wbGU7XG5cbiAgaWYgKHRoaXMudHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc2FtcGxlID0gdGhpcy5lbC5zdHlsZVtwcm9wZXJ0eV07XG5cbiAgaWYgKElTJDEuc3RyaW5nKHNhbXBsZSkgfHwgSVMkMS5udW1iZXIoc2FtcGxlKSkge1xuICAgIGNvbXB1dGVkID0gc2tpcENvbXB1dGVkID8gMCA6IHRoaXMuc3R5bGUocHJvcGVydHkpO1xuICAgIHJlc3VsdCA9IGNvbXB1dGVkIHx8IHRoaXMuZWwuc3R5bGVbcHJvcGVydHldIHx8IHRoaXMuY3VycmVudFN0YXRlU3R5bGUocHJvcGVydHkpIHx8ICcnO1xuXG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiByZXN1bHQuY2FsbCh0aGlzLCB0aGlzLnJlbGF0ZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcbnZhciBzdHlsZVBhcnNlZCA9IGZ1bmN0aW9uIHN0eWxlUGFyc2VkKHByb3BlcnR5LCBza2lwQ29tcHV0ZWQpIHtcbiAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5zdHlsZVNhZmUocHJvcGVydHksIHNraXBDb21wdXRlZCkpO1xufTtcbnZhciByZWNhbGNTdHlsZSA9IGZ1bmN0aW9uIHJlY2FsY1N0eWxlKHJlY2FsY0NoaWxkcmVuKSB7XG4gIHZhciBjaGlsZCwgaiwgbGVuLCByZWYsIHRhcmdldFN0eWxlcztcbiAgdGFyZ2V0U3R5bGVzID0gdGhpcy5fcmVzb2x2ZUZuU3R5bGVzKHRoaXMuX2dldEFjdGl2ZVN0YXRlcygpLCB0cnVlKTtcbiAgdGhpcy5zdHlsZSh0YXJnZXRTdHlsZXMpO1xuXG4gIGlmIChyZWNhbGNDaGlsZHJlbikge1xuICAgIHJlZiA9IHRoaXMuX2NoaWxkcmVuO1xuXG4gICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICBjaGlsZCA9IHJlZltqXTtcbiAgICAgIGNoaWxkLnJlY2FsY1N0eWxlKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xudmFyIGN1cnJlbnRTdGF0ZVN0eWxlID0gZnVuY3Rpb24gY3VycmVudFN0YXRlU3R5bGUocHJvcGVydHkpIHtcbiAgdmFyIGksIHN0YXRlLCBzdGF0ZXM7XG5cbiAgaWYgKHByb3BlcnR5KSB7XG4gICAgaWYgKHRoaXMuX3N0YXRlLmxlbmd0aCkge1xuICAgICAgc3RhdGVzID0gdGhpcy5fc3RhdGUuc2xpY2UoKTtcblxuICAgICAgaWYgKHRoaXMuX3N0YXRlU2hhcmVkICYmIHRoaXMuX3N0YXRlU2hhcmVkLmxlbmd0aCkge1xuICAgICAgICB2YXIgX3N0YXRlcztcblxuICAgICAgICAoX3N0YXRlcyA9IHN0YXRlcykucHVzaC5hcHBseShfc3RhdGVzLCBfdG9Db25zdW1hYmxlQXJyYXkodGhpcy5fc3RhdGVTaGFyZWQpKTtcbiAgICAgIH1cblxuICAgICAgaSA9IHN0YXRlcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChzdGF0ZSA9IHN0YXRlc1stLWldKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdHlsZXNbc3RhdGVdICYmIElTJDEuZGVmaW5lZCh0aGlzLl9zdHlsZXNbc3RhdGVdLnJ1bGVbcHJvcGVydHldKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9zdHlsZXNbc3RhdGVdLnJ1bGVbcHJvcGVydHldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3N0eWxlcy5iYXNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3R5bGVzLmJhc2UucnVsZVtwcm9wZXJ0eV07XG4gICAgfVxuICB9XG59O1xudmFyIGhpZGUgPSBmdW5jdGlvbiBoaWRlKCkge1xuICByZXR1cm4gdGhpcy5zdHlsZSgnZGlzcGxheScsICdub25lJyk7XG59O1xudmFyIHNob3cgPSBmdW5jdGlvbiBzaG93KGRpc3BsYXkpIHtcbiAgdmFyIHJlZjtcblxuICBpZiAoIWRpc3BsYXkpIHtcbiAgICBkaXNwbGF5ID0gdGhpcy5jdXJyZW50U3RhdGVTdHlsZSgnZGlzcGxheScpO1xuXG4gICAgaWYgKGRpc3BsYXkgPT09ICdub25lJyB8fCAhZGlzcGxheSkge1xuICAgICAgZGlzcGxheSA9ICdibG9jayc7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpc3BsYXkgPT0gbnVsbCkge1xuICAgIGRpc3BsYXkgPSAoKHJlZiA9IHRoaXMuX3N0eWxlcy5iYXNlKSAhPSBudWxsID8gcmVmLmRpc3BsYXkgOiB2b2lkIDApIHx8ICdibG9jayc7XG4gIH1cblxuICByZXR1cm4gdGhpcy5zdHlsZSgnZGlzcGxheScsIGRpc3BsYXkpO1xufTtcbnZhciBvcmllbnRhdGlvbkdldHRlciA9IHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgaWYgKHRoaXMud2lkdGggPiB0aGlzLmhlaWdodCkge1xuICAgICAgcmV0dXJuICdsYW5kc2NhcGUnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ3BvcnRyYWl0JztcbiAgICB9XG4gIH1cbn07XG52YXIgYXNwZWN0UmF0aW9HZXR0ZXIgPSB7XG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLndpZHRoIC8gdGhpcy5oZWlnaHQ7XG4gIH1cbn07XG5mdW5jdGlvbiBzdHlsZSQxIChRdWlja0VsZW1lbnQpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUXVpY2tFbGVtZW50LnByb3RvdHlwZSwge1xuICAgICdvcmllbnRhdGlvbic6IG9yaWVudGF0aW9uR2V0dGVyLFxuICAgICdhc3BlY3RSYXRpbyc6IGFzcGVjdFJhdGlvR2V0dGVyLFxuICAgICdyZWN0Jzoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3dpZHRoJzoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHRoaXMuc3R5bGUoJ3dpZHRoJykpO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0eWxlKCd3aWR0aCcsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICdoZWlnaHQnOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5zdHlsZSgnaGVpZ2h0JykpO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0eWxlKCdoZWlnaHQnLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5zdHlsZSA9IHN0eWxlO1xuICBRdWlja0VsZW1lbnQucHJvdG90eXBlLnN0eWxlU2FmZSA9IHN0eWxlU2FmZTtcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5zdHlsZVBhcnNlZCA9IHN0eWxlUGFyc2VkO1xuICBRdWlja0VsZW1lbnQucHJvdG90eXBlLnJlY2FsY1N0eWxlID0gcmVjYWxjU3R5bGU7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUuY3VycmVudFN0YXRlU3R5bGUgPSBjdXJyZW50U3RhdGVTdHlsZTtcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5oaWRlID0gaGlkZTtcbiAgcmV0dXJuIFF1aWNrRWxlbWVudC5wcm90b3R5cGUuc2hvdyA9IHNob3c7XG59dmFyIFF1aWNrV2luZG93JDE7XG52YXIgUXVpY2tXaW5kb3ckMiA9IFF1aWNrV2luZG93JDEgPSB7XG4gIHR5cGU6ICd3aW5kb3cnLFxuICBlbDogd2luZG93LFxuICByYXc6IHdpbmRvdyxcbiAgX2V2ZW50Q2FsbGJhY2tzOiB7XG4gICAgX19yZWZzOiB7fVxuICB9XG59O1xuUXVpY2tXaW5kb3ckMS5vbiA9IG9uXztcblF1aWNrV2luZG93JDEub2ZmID0gb2ZmXztcblF1aWNrV2luZG93JDEuZW1pdCA9IGVtaXQ7XG5RdWlja1dpbmRvdyQxLmVtaXRQcml2YXRlID0gZW1pdFByaXZhdGU7XG5RdWlja1dpbmRvdyQxLl9saXN0ZW5UbyA9IF9saXN0ZW5UbztcblF1aWNrV2luZG93JDEuX2ludm9rZUhhbmRsZXJzID0gX2ludm9rZUhhbmRsZXJzO1xuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUXVpY2tXaW5kb3ckMSwge1xuICAnd2lkdGgnOiB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gd2luZG93LmlubmVyV2lkdGg7XG4gICAgfVxuICB9LFxuICAnaGVpZ2h0Jzoge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICB9XG4gIH0sXG4gICdvcmllbnRhdGlvbic6IG9yaWVudGF0aW9uR2V0dGVyLFxuICAnYXNwZWN0UmF0aW8nOiBhc3BlY3RSYXRpb0dldHRlclxufSk7dmFyIE1lZGlhUXVlcnksIFJVTEVfREVJTElNSVRFUjtcblJVTEVfREVJTElNSVRFUiA9IC8sXFxzKi87XG52YXIgTWVkaWFRdWVyeSQxID0gTWVkaWFRdWVyeSA9IG5ldyBmdW5jdGlvbiAoKSB7XG4gIHZhciBjYWxsYmFja3MsIHRlc3RSdWxlO1xuICBjYWxsYmFja3MgPSBbXTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY2FsbGJhY2ssIGksIGxlbjtcblxuICAgIGZvciAoaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FsbGJhY2sgPSBjYWxsYmFja3NbaV07XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cbiAgfSk7XG5cbiAgdGhpcy5wYXJzZVF1ZXJ5ID0gZnVuY3Rpb24gKHRhcmdldCwgcXVlcnlTdHJpbmcpIHtcbiAgICB2YXIgcXVlcnlTcGxpdCwgcnVsZXMsIHNvdXJjZTtcbiAgICBxdWVyeVNwbGl0ID0gcXVlcnlTdHJpbmcuc3BsaXQoJygnKTtcbiAgICBzb3VyY2UgPSBxdWVyeVNwbGl0WzBdO1xuXG4gICAgc291cmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgc3dpdGNoIChzb3VyY2UpIHtcbiAgICAgICAgY2FzZSAnd2luZG93JzpcbiAgICAgICAgICByZXR1cm4gUXVpY2tXaW5kb3ckMjtcblxuICAgICAgICBjYXNlICdwYXJlbnQnOlxuICAgICAgICAgIHJldHVybiB0YXJnZXQucGFyZW50O1xuXG4gICAgICAgIGNhc2UgJ3NlbGYnOlxuICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0LnBhcmVudE1hdGNoaW5nKGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnQucmVmID09PSBzb3VyY2Uuc2xpY2UoMSk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSgpO1xuXG4gICAgcnVsZXMgPSBxdWVyeVNwbGl0WzFdLnNsaWNlKDAsIC0xKS5zcGxpdChSVUxFX0RFSUxJTUlURVIpLm1hcChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgdmFyIGdldHRlciwga2V5LCBrZXlQcmVmaXgsIG1heCwgbWluLCBzcGxpdCwgdmFsdWU7XG4gICAgICBzcGxpdCA9IHJ1bGUuc3BsaXQoJzonKTtcbiAgICAgIHZhbHVlID0gcGFyc2VGbG9hdChzcGxpdFsxXSk7XG5cbiAgICAgIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSBzcGxpdFsxXTtcbiAgICAgIH1cblxuICAgICAga2V5ID0gc3BsaXRbMF07XG4gICAgICBrZXlQcmVmaXggPSBrZXkuc2xpY2UoMCwgNCk7XG4gICAgICBtYXggPSBrZXlQcmVmaXggPT09ICdtYXgtJztcbiAgICAgIG1pbiA9ICFtYXggJiYga2V5UHJlZml4ID09PSAnbWluLSc7XG5cbiAgICAgIGlmIChtYXggfHwgbWluKSB7XG4gICAgICAgIGtleSA9IGtleS5zbGljZSg0KTtcbiAgICAgIH1cblxuICAgICAgZ2V0dGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgIGNhc2UgJ29yaWVudGF0aW9uJzpcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzb3VyY2Uub3JpZW50YXRpb247XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgY2FzZSAnYXNwZWN0LXJhdGlvJzpcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzb3VyY2UuYXNwZWN0UmF0aW87XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgY2FzZSAnd2lkdGgnOlxuICAgICAgICAgIGNhc2UgJ2hlaWdodCc6XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gc291cmNlW2tleV07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciBwYXJzZWRWYWx1ZSwgc3RyaW5nVmFsdWU7XG4gICAgICAgICAgICAgIHN0cmluZ1ZhbHVlID0gc291cmNlLnN0eWxlKGtleSk7XG4gICAgICAgICAgICAgIHBhcnNlZFZhbHVlID0gcGFyc2VGbG9hdChzdHJpbmdWYWx1ZSk7XG5cbiAgICAgICAgICAgICAgaWYgKGlzTmFOKHBhcnNlZFZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdWYWx1ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VkVmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0oKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2V5OiBrZXksXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgbWluOiBtaW4sXG4gICAgICAgIG1heDogbWF4LFxuICAgICAgICBnZXR0ZXI6IGdldHRlclxuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICBydWxlczogcnVsZXNcbiAgICB9O1xuICB9O1xuXG4gIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbiAodGFyZ2V0LCBxdWVyeVN0cmluZykge1xuICAgIHZhciBjYWxsYmFjaywgcXVlcnk7XG4gICAgcXVlcnkgPSB0aGlzLnBhcnNlUXVlcnkodGFyZ2V0LCBxdWVyeVN0cmluZyk7XG5cbiAgICBpZiAocXVlcnkuc291cmNlKSB7XG4gICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKCkge1xuICAgICAgICByZXR1cm4gdGVzdFJ1bGUodGFyZ2V0LCBxdWVyeSwgcXVlcnlTdHJpbmcpO1xuICAgICAgfSk7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHJldHVybiBxdWVyeTtcbiAgfTtcblxuICB0ZXN0UnVsZSA9IGZ1bmN0aW9uIHRlc3RSdWxlKHRhcmdldCwgcXVlcnksIHF1ZXJ5U3RyaW5nKSB7XG4gICAgdmFyIGN1cnJlbnRWYWx1ZSwgaSwgbGVuLCBwYXNzZWQsIHJlZiwgcnVsZTtcbiAgICBwYXNzZWQgPSB0cnVlO1xuICAgIHJlZiA9IHF1ZXJ5LnJ1bGVzO1xuXG4gICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBydWxlID0gcmVmW2ldO1xuICAgICAgY3VycmVudFZhbHVlID0gcnVsZS5nZXR0ZXIoKTtcblxuICAgICAgcGFzc2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzd2l0Y2ggKGZhbHNlKSB7XG4gICAgICAgICAgY2FzZSAhcnVsZS5taW46XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFZhbHVlID49IHJ1bGUudmFsdWU7XG5cbiAgICAgICAgICBjYXNlICFydWxlLm1heDpcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50VmFsdWUgPD0gcnVsZS52YWx1ZTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFZhbHVlID09PSBydWxlLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KCk7XG5cbiAgICAgIGlmICghcGFzc2VkKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQuc3RhdGUocXVlcnlTdHJpbmcsIHBhc3NlZCk7XG4gIH07XG5cbiAgcmV0dXJuIHRoaXM7XG59KCk7dmFyIFN0YXRlQ2hhaW47XG52YXIgU3RhdGVDaGFpbiQxID0gU3RhdGVDaGFpbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0YXRlQ2hhaW4oc3RhdGVzKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YXRlQ2hhaW4pO1xuXG4gICAgdGhpcy5zdHJpbmcgPSBzdGF0ZXMuam9pbignKycpO1xuICAgIHRoaXMuYXJyYXkgPSBzdGF0ZXMuc2xpY2UoKTtcbiAgICB0aGlzLmxlbmd0aCA9IHN0YXRlcy5sZW5ndGg7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoU3RhdGVDaGFpbiwgW3tcbiAgICBrZXk6IFwiaW5jbHVkZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5jbHVkZXModGFyZ2V0KSB7XG4gICAgICB2YXIgaSwgbGVuLCByZWYsIHN0YXRlO1xuICAgICAgcmVmID0gdGhpcy5hcnJheTtcblxuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHN0YXRlID0gcmVmW2ldO1xuXG4gICAgICAgIGlmIChzdGF0ZSA9PT0gdGFyZ2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3aXRob3V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdpdGhvdXQodGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGhpcy5hcnJheS5maWx0ZXIoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZSAhPT0gdGFyZ2V0O1xuICAgICAgfSkuam9pbignKycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc0FwcGxpY2FibGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNBcHBsaWNhYmxlKHRhcmdldCwgb3RoZXJBY3RpdmUpIHtcbiAgICAgIHZhciBhY3RpdmU7XG4gICAgICBhY3RpdmUgPSB0aGlzLmFycmF5LmZpbHRlcihmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlID09PSB0YXJnZXQgfHwgb3RoZXJBY3RpdmUuaW5kZXhPZihzdGF0ZSkgIT09IC0xO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWN0aXZlLmxlbmd0aCA9PT0gdGhpcy5hcnJheS5sZW5ndGg7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN0YXRlQ2hhaW47XG59KCk7dmFyIEJBU0VfU1RBVEVfVFJJR0dFUlMsIENBQ0hFRF9GTl9JTlNFUlRFRDtcbkJBU0VfU1RBVEVfVFJJR0dFUlMgPSB7XG4gICdob3Zlcic6IHtcbiAgICBvbjogJ21vdXNlZW50ZXInLFxuICAgIG9mZjogJ21vdXNlbGVhdmUnLFxuICAgIGJ1YmJsZXM6IHRydWVcbiAgfSxcbiAgJ2ZvY3VzJzoge1xuICAgIG9uOiAnZm9jdXMnLFxuICAgIG9mZjogJ2JsdXInLFxuICAgIGJ1YmJsZXM6IHRydWVcbiAgfVxufTtcbnZhciBfbm9ybWFsaXplT3B0aW9ucyA9IGZ1bmN0aW9uIF9ub3JtYWxpemVPcHRpb25zKCkge1xuICB2YXIgYmFzZTEsIGJhc2UyLCBiYXNlMywgYmFzZTQsIGJhc2U1O1xuXG4gIGlmICh0aGlzLm9wdGlvbnMucmVsYXRlZEluc3RhbmNlKSB7XG4gICAgKGJhc2UxID0gdGhpcy5vcHRpb25zKS5yZWxhdGVkIHx8IChiYXNlMS5yZWxhdGVkID0gdGhpcy5vcHRpb25zLnJlbGF0ZWRJbnN0YW5jZSk7XG4gICAgdGhpcy5vcHRpb25zLnJlbGF0ZWRJbnN0YW5jZSA9IG51bGw7XG4gIH1cblxuICB0aGlzLnJlbGF0ZWQgPSAoYmFzZTIgPSB0aGlzLm9wdGlvbnMpLnJlbGF0ZWQgIT0gbnVsbCA/IGJhc2UyLnJlbGF0ZWQgOiBiYXNlMi5yZWxhdGVkID0gdGhpcztcblxuICBpZiAodGhpcy5vcHRpb25zLmNsYXNzKSB7XG4gICAgdGhpcy5vcHRpb25zLmNsYXNzTmFtZSA9IHRoaXMub3B0aW9ucy5jbGFzcztcbiAgfVxuXG4gIGlmICh0aGlzLm9wdGlvbnMudXJsKSB7XG4gICAgdGhpcy5vcHRpb25zLmhyZWYgPSB0aGlzLm9wdGlvbnMudXJsO1xuICB9XG5cbiAgaWYgKChiYXNlMyA9IHRoaXMub3B0aW9ucykudW5wYXNzYWJsZVN0YXRlcyA9PSBudWxsKSB7XG4gICAgYmFzZTMudW5wYXNzYWJsZVN0YXRlcyA9IFtdO1xuICB9XG5cbiAgaWYgKChiYXNlNCA9IHRoaXMub3B0aW9ucykucGFzc1N0YXRlVG9DaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgYmFzZTQucGFzc1N0YXRlVG9DaGlsZHJlbiA9IHRydWU7XG4gIH1cblxuICBpZiAoKGJhc2U1ID0gdGhpcy5vcHRpb25zKS5wYXNzRGF0YVRvQ2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIGJhc2U1LnBhc3NEYXRhVG9DaGlsZHJlbiA9IHRydWU7XG4gIH1cblxuICB0aGlzLm9wdGlvbnMuc3RhdGVUcmlnZ2VycyA9IHRoaXMub3B0aW9ucy5zdGF0ZVRyaWdnZXJzID8gZXh0ZW5kLmNsb25lLmRlZXAoQkFTRV9TVEFURV9UUklHR0VSUywgdGhpcy5vcHRpb25zLnN0YXRlVHJpZ2dlcnMpIDogQkFTRV9TVEFURV9UUklHR0VSUztcblxuICBpZiAodGhpcy50eXBlID09PSAndGV4dCcpIHtcbiAgICBleHRlbmQodGhpcywgdGhpcy5fcGFyc2VUZXh0cyh0aGlzLm9wdGlvbnMudGV4dCwgdGhpcy5fdGV4dHMpKTtcbiAgfSBlbHNlIHtcbiAgICBleHRlbmQodGhpcywgdGhpcy5fcGFyc2VTdHlsZXModGhpcy5vcHRpb25zLnN0eWxlLCB0aGlzLl9zdHlsZXMpKTtcbiAgfVxufTtcbnZhciBfcGFyc2VTdHlsZXMgPSBmdW5jdGlvbiBfcGFyc2VTdHlsZXMoc3R5bGVzLCBzdG9yZSkge1xuICB2YXIgX21lZGlhU3RhdGVzLCBfcHJvdmlkZWRTdGF0ZXMsIF9wcm92aWRlZFN0YXRlc1NoYXJlZCwgX3N0YXRlU2hhcmVkLCBfc3R5bGVzLCBiYXNlLCBfZmxhdHRlbk5lc3RlZFN0YXRlcywgZm9yY2VTdHlsZSwgaSwga2V5cywgbGVuLCBzcGVjaWFsU3RhdGVzLCBzdGF0ZSwgc3RhdGVTdHlsZXMsIHN0YXRlXywgc3RhdGVzO1xuXG4gIGlmICghSVMkMS5vYmplY3RQbGFpbihzdHlsZXMpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAga2V5cyA9IE9iamVjdC5rZXlzKHN0eWxlcyk7XG4gIHN0YXRlcyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaXNTdGF0ZVN0eWxlKGtleSk7XG4gIH0pO1xuICBzcGVjaWFsU3RhdGVzID0gcmVtb3ZlSXRlbShzdGF0ZXMuc2xpY2UoKSwgJyRiYXNlJyk7XG4gIF9tZWRpYVN0YXRlcyA9IHN0YXRlcy5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBrZXlbMF0gPT09ICdAJztcbiAgfSkubWFwKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHJldHVybiBzdGF0ZS5zbGljZSgxKTtcbiAgfSk7XG4gIF9wcm92aWRlZFN0YXRlcyA9IHN0YXRlcy5tYXAoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgcmV0dXJuIHN0YXRlLnNsaWNlKDEpOyAvLyBSZW1vdmUgJyQnIHByZWZpeFxuICB9KTtcbiAgX3N0eWxlcyA9IHN0b3JlIHx8IHt9O1xuICBfc3RhdGVTaGFyZWQgPSBfcHJvdmlkZWRTdGF0ZXNTaGFyZWQgPSB2b2lkIDA7XG4gIGJhc2UgPSAhaW5jbHVkZXMoc3RhdGVzLCAnJGJhc2UnKSA/IHN0eWxlcyA6IHN0eWxlcy4kYmFzZTtcbiAgX3N0eWxlcy5iYXNlID0gcmVnaXN0ZXJTdHlsZShiYXNlLCAwLCBmb3JjZVN0eWxlID0gdGhpcy5vcHRpb25zLmZvcmNlU3R5bGUpO1xuXG4gIGlmIChzcGVjaWFsU3RhdGVzLmxlbmd0aCkge1xuICAgIF9mbGF0dGVuTmVzdGVkU3RhdGVzID0gZnVuY3Rpb24gZmxhdHRlbk5lc3RlZFN0YXRlcyhzdHlsZU9iamVjdCwgY2hhaW4sIGxldmVsKSB7XG4gICAgICB2YXIgaGFzTm9uU3RhdGVQcm9wcywgaSwgbGVuLCBvdXRwdXQsIHN0YXRlLCBzdGF0ZUNoYWluLCBzdGF0ZV8sIHN0eWxlS2V5cztcbiAgICAgIHN0eWxlS2V5cyA9IE9iamVjdC5rZXlzKHN0eWxlT2JqZWN0KTtcbiAgICAgIG91dHB1dCA9IHt9O1xuICAgICAgaGFzTm9uU3RhdGVQcm9wcyA9IGZhbHNlO1xuXG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSBzdHlsZUtleXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgc3RhdGUgPSBzdHlsZUtleXNbaV07XG5cbiAgICAgICAgaWYgKCFpc1N0YXRlU3R5bGUoc3RhdGUpKSB7XG4gICAgICAgICAgaGFzTm9uU3RhdGVQcm9wcyA9IHRydWU7XG4gICAgICAgICAgb3V0cHV0W3N0YXRlXSA9IHN0eWxlT2JqZWN0W3N0YXRlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFpbi5wdXNoKHN0YXRlXyA9IHN0YXRlLnNsaWNlKDEpKTtcbiAgICAgICAgICBzdGF0ZUNoYWluID0gbmV3IFN0YXRlQ2hhaW4kMShjaGFpbik7XG5cbiAgICAgICAgICBpZiAoX3N0YXRlU2hhcmVkID09IG51bGwpIHtcbiAgICAgICAgICAgIF9zdGF0ZVNoYXJlZCA9IFtdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChfcHJvdmlkZWRTdGF0ZXNTaGFyZWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgX3Byb3ZpZGVkU3RhdGVzU2hhcmVkID0gW107XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3Byb3ZpZGVkU3RhdGVzU2hhcmVkLnB1c2goc3RhdGVDaGFpbik7XG5cbiAgICAgICAgICBpZiAoc3RhdGVbMF0gPT09ICdAJykge1xuICAgICAgICAgICAgX21lZGlhU3RhdGVzLnB1c2goc3RhdGVfKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfc3R5bGVzW3N0YXRlQ2hhaW4uc3RyaW5nXSA9IHJlZ2lzdGVyU3R5bGUoX2ZsYXR0ZW5OZXN0ZWRTdGF0ZXMoc3R5bGVPYmplY3Rbc3RhdGVdLCBjaGFpbiwgbGV2ZWwgKyAxKSwgbGV2ZWwgKyAxLCBmb3JjZVN0eWxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaGFzTm9uU3RhdGVQcm9wcykge1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBzcGVjaWFsU3RhdGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBzdGF0ZSA9IHNwZWNpYWxTdGF0ZXNbaV07XG4gICAgICBzdGF0ZV8gPSBzdGF0ZS5zbGljZSgxKTtcbiAgICAgIHN0YXRlU3R5bGVzID0gX2ZsYXR0ZW5OZXN0ZWRTdGF0ZXMoc3R5bGVzW3N0YXRlXSwgW3N0YXRlX10sIDEpO1xuXG4gICAgICBpZiAoc3RhdGVTdHlsZXMpIHtcbiAgICAgICAgX3N0eWxlc1tzdGF0ZV9dID0gcmVnaXN0ZXJTdHlsZShzdGF0ZVN0eWxlcywgMSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBfc3R5bGVzOiBfc3R5bGVzLFxuICAgIF9tZWRpYVN0YXRlczogX21lZGlhU3RhdGVzLFxuICAgIF9zdGF0ZVNoYXJlZDogX3N0YXRlU2hhcmVkLFxuICAgIF9wcm92aWRlZFN0YXRlczogX3Byb3ZpZGVkU3RhdGVzLFxuICAgIF9wcm92aWRlZFN0YXRlc1NoYXJlZDogX3Byb3ZpZGVkU3RhdGVzU2hhcmVkXG4gIH07XG59O1xudmFyIF9wYXJzZVRleHRzID0gZnVuY3Rpb24gX3BhcnNlVGV4dHModGV4dHMsIHN0b3JlKSB7XG4gIHZhciBfcHJvdmlkZWRTdGF0ZXMsIF90ZXh0cywgaSwgbGVuLCBzdGF0ZSwgc3RhdGVzO1xuXG4gIGlmICghSVMkMS5vYmplY3RQbGFpbih0ZXh0cykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdGF0ZXMgPSBPYmplY3Qua2V5cyh0ZXh0cykubWFwKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHJldHVybiBzdGF0ZS5zbGljZSgxKTtcbiAgfSk7XG4gIF9wcm92aWRlZFN0YXRlcyA9IHN0YXRlcy5maWx0ZXIoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgcmV0dXJuIHN0YXRlICE9PSAnYmFzZSc7XG4gIH0pO1xuICBfdGV4dHMgPSBzdG9yZSB8fCB7fTtcbiAgX3RleHRzID0ge1xuICAgIGJhc2U6ICcnXG4gIH07XG5cbiAgZm9yIChpID0gMCwgbGVuID0gc3RhdGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgc3RhdGUgPSBzdGF0ZXNbaV07XG4gICAgX3RleHRzW3N0YXRlXSA9IHRleHRzWyckJyArIHN0YXRlXTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgX3RleHRzOiBfdGV4dHMsXG4gICAgX3Byb3ZpZGVkU3RhdGVzOiBfcHJvdmlkZWRTdGF0ZXNcbiAgfTtcbn07XG52YXIgX2FwcGx5T3B0aW9ucyA9IGZ1bmN0aW9uIF9hcHBseU9wdGlvbnMoKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIGV2ZW50LCBoYW5kbGVyLCBtZXRob2QsIHJlZiwgcmVmMSwgcmVmMiwgdmFsdWU7XG5cbiAgaWYgKHJlZiA9IHRoaXMub3B0aW9ucy5pZCB8fCB0aGlzLm9wdGlvbnMucmVmKSB7XG4gICAgdGhpcy5hdHRyKCdkYXRhLXJlZicsIHRoaXMucmVmID0gcmVmKTtcbiAgfVxuXG4gIGlmICh0aGlzLm9wdGlvbnMuaWQpIHtcbiAgICB0aGlzLmVsLmlkID0gdGhpcy5vcHRpb25zLmlkO1xuICB9XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5jbGFzc05hbWUpIHtcbiAgICB0aGlzLmVsLmNsYXNzTmFtZSA9IHRoaXMub3B0aW9ucy5jbGFzc05hbWU7XG4gIH1cblxuICBpZiAodGhpcy5vcHRpb25zLnNyYykge1xuICAgIHRoaXMuZWwuc3JjID0gdGhpcy5vcHRpb25zLnNyYztcbiAgfVxuXG4gIGlmICh0aGlzLm9wdGlvbnMuaHJlZikge1xuICAgIHRoaXMuZWwuaHJlZiA9IHRoaXMub3B0aW9ucy5ocmVmO1xuICB9XG5cbiAgaWYgKHRoaXMub3B0aW9ucy50eXBlKSB7XG4gICAgdGhpcy5lbC50eXBlID0gdGhpcy5vcHRpb25zLnR5cGU7XG4gIH1cblxuICBpZiAodGhpcy5vcHRpb25zLm5hbWUpIHtcbiAgICB0aGlzLmVsLm5hbWUgPSB0aGlzLm9wdGlvbnMubmFtZTtcbiAgfVxuXG4gIGlmICh0aGlzLm9wdGlvbnMudmFsdWUpIHtcbiAgICB0aGlzLmVsLnZhbHVlID0gdGhpcy5vcHRpb25zLnZhbHVlO1xuICB9XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5zZWxlY3RlZCkge1xuICAgIHRoaXMuZWwuc2VsZWN0ZWQgPSB0aGlzLm9wdGlvbnMuc2VsZWN0ZWQ7XG4gIH1cblxuICBpZiAodGhpcy5vcHRpb25zLmNoZWNrZWQpIHtcbiAgICB0aGlzLmVsLmNoZWNrZWQgPSB0aGlzLm9wdGlvbnMuY2hlY2tlZDtcbiAgfVxuXG4gIGlmICh0aGlzLm9wdGlvbnMucHJvcHMpIHtcbiAgICB0aGlzLnByb3AodGhpcy5vcHRpb25zLnByb3BzKTtcbiAgfVxuXG4gIGlmICh0aGlzLm9wdGlvbnMuYXR0cnMpIHtcbiAgICB0aGlzLmF0dHIodGhpcy5vcHRpb25zLmF0dHJzKTtcbiAgfVxuXG4gIHRoaXMuX2FwcGx5UmVnaXN0ZXJlZFN0eWxlKHRoaXMuX3N0eWxlcy5iYXNlLCBudWxsLCBudWxsLCB0aGlzLm9wdGlvbnMuc3R5bGVBZnRlckluc2VydCk7XG5cbiAgaWYgKHRoaXMuX3RleHRzKSB7XG4gICAgdGhpcy50ZXh0ID0gdGhpcy5fdGV4dHMuYmFzZTtcbiAgfVxuXG4gIHRoaXMub24oJ2luc2VydGVkJywgQ0FDSEVEX0ZOX0lOU0VSVEVELCBmYWxzZSwgdHJ1ZSk7XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5pbnZva2VDb21wdXRlcnNPbmNlKSB7XG4gICAgdGhpcy5faW52b2tlZENvbXB1dGVycyA9IHt9O1xuICB9XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5yZWNhbGNPblJlc2l6ZSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMucmVjYWxjU3R5bGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICh0aGlzLm9wdGlvbnMuZXZlbnRzKSB7XG4gICAgcmVmMSA9IHRoaXMub3B0aW9ucy5ldmVudHM7XG5cbiAgICBmb3IgKGV2ZW50IGluIHJlZjEpIHtcbiAgICAgIGhhbmRsZXIgPSByZWYxW2V2ZW50XTtcbiAgICAgIHRoaXMub24oZXZlbnQsIGhhbmRsZXIpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLm9wdGlvbnMubWV0aG9kcykge1xuICAgIHJlZjIgPSB0aGlzLm9wdGlvbnMubWV0aG9kcztcblxuICAgIGZvciAobWV0aG9kIGluIHJlZjIpIHtcbiAgICAgIHZhbHVlID0gcmVmMlttZXRob2RdO1xuXG4gICAgICBpZiAoIXRoaXNbbWV0aG9kXSkge1xuICAgICAgICBpZiAoSVMkMS5mdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgICB0aGlzW21ldGhvZF0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChJUyQxLm9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbWV0aG9kLCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6IHZhbHVlLmdldCxcbiAgICAgICAgICAgIHNldDogdmFsdWUuc2V0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy50eXBlICE9PSAndGV4dCcgJiYgSVMkMS5vYmplY3QodGhpcy5vcHRpb25zLnRleHQpKSB7XG4gICAgdGhpcy5hcHBlbmQoX3F1aWNrZG9tKCd0ZXh0Jywge1xuICAgICAgdGV4dDogdGhpcy5vcHRpb25zLnRleHRcbiAgICB9KSk7XG4gIH1cbn07XG52YXIgX3Bvc3RDcmVhdGlvbiA9IGZ1bmN0aW9uIF9wb3N0Q3JlYXRpb24oZGF0YSkge1xuICBpZiAodGhpcy5vcHRpb25zLmNvbXB1dGVycykge1xuICAgIGlmIChkYXRhICYmIHRoaXMub3B0aW9ucy5kYXRhKSB7XG4gICAgICBkYXRhID0gZXh0ZW5kLmNsb25lKHRoaXMub3B0aW9ucy5kYXRhLCBkYXRhKTtcbiAgICB9XG5cbiAgICBkYXRhIHx8IChkYXRhID0gdGhpcy5vcHRpb25zLmRhdGEpO1xuICAgIHRoaXMuYXBwbHlEYXRhKGRhdGEsIGZhbHNlKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcHV0ZXJzLl9pbml0KSB7XG4gICAgICB0aGlzLl9ydW5Db21wdXRlcignX2luaXQnLCBkYXRhKTtcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5vcHRpb25zLnN0YXRlKSB7XG4gICAgdGhpcy5zdGF0ZSh0aGlzLm9wdGlvbnMuc3RhdGUpO1xuICB9XG59O1xudmFyIF9hdHRhY2hTdGF0ZUV2ZW50cyA9IGZ1bmN0aW9uIF9hdHRhY2hTdGF0ZUV2ZW50cyhmb3JjZSkge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICB2YXIgc3RhdGVzO1xuICBzdGF0ZXMgPSBPYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMuc3RhdGVUcmlnZ2Vycyk7XG4gIHN0YXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgIHZhciBkaXNhYmxlciwgZW5hYmxlciwgdHJpZ2dlcjtcbiAgICB0cmlnZ2VyID0gX3RoaXMyLm9wdGlvbnMuc3RhdGVUcmlnZ2Vyc1tzdGF0ZV07XG5cbiAgICBpZiAoIWluY2x1ZGVzKF90aGlzMi5fcHJvdmlkZWRTdGF0ZXMsIHN0YXRlKSAmJiAhZm9yY2UgJiYgIXRyaWdnZXIuZm9yY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlbmFibGVyID0gSVMkMS5zdHJpbmcodHJpZ2dlcikgPyB0cmlnZ2VyIDogdHJpZ2dlci5vbjtcblxuICAgIGlmIChJUyQxLm9iamVjdCh0cmlnZ2VyKSkge1xuICAgICAgZGlzYWJsZXIgPSB0cmlnZ2VyLm9mZjtcbiAgICB9XG5cbiAgICBfdGhpczIuX2xpc3RlblRvKGVuYWJsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpczIuc3RhdGUoc3RhdGUsIHRydWUsIHRyaWdnZXIuYnViYmxlcyk7XG4gICAgfSk7XG5cbiAgICBpZiAoZGlzYWJsZXIpIHtcbiAgICAgIHJldHVybiBfdGhpczIuX2xpc3RlblRvKGRpc2FibGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuc3RhdGUoc3RhdGUsIGZhbHNlLCB0cmlnZ2VyLmJ1YmJsZXMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgX3Byb3h5UGFyZW50ID0gZnVuY3Rpb24gX3Byb3h5UGFyZW50KCkge1xuICB2YXIgcGFyZW50O1xuICBwYXJlbnQgPSB2b2lkIDA7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ19wYXJlbnQnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3UGFyZW50KSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIGxhc3RQYXJlbnQ7XG5cbiAgICAgIGlmIChwYXJlbnQgPSBuZXdQYXJlbnQpIHtcbiAgICAgICAgbGFzdFBhcmVudCA9IHRoaXMucGFyZW50cy5zbGljZSgtMSlbMF07XG5cbiAgICAgICAgaWYgKGxhc3RQYXJlbnQucmF3ID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLl91bnByb3h5UGFyZW50KG5ld1BhcmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyZW50Lm9uKCdpbnNlcnRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChwYXJlbnQgPT09IG5ld1BhcmVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMzLl91bnByb3h5UGFyZW50KG5ld1BhcmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcbnZhciBfdW5wcm94eVBhcmVudCA9IGZ1bmN0aW9uIF91bnByb3h5UGFyZW50KG5ld1BhcmVudCkge1xuICBkZWxldGUgdGhpcy5fcGFyZW50O1xuICB0aGlzLl9wYXJlbnQgPSBuZXdQYXJlbnQ7XG4gIHRoaXMuZW1pdFByaXZhdGUoJ2luc2VydGVkJywgbmV3UGFyZW50KTtcbn07XG5cbkNBQ0hFRF9GTl9JTlNFUlRFRCA9IGZ1bmN0aW9uIENBQ0hFRF9GTl9JTlNFUlRFRCgpIHtcbiAgdmFyIGksIGxlbiwgbWVkaWFTdGF0ZXMsIHF1ZXJ5U3RyaW5nLCByZXN1bHRzO1xuICB0aGlzLl9pbnNlcnRlZCA9IHRoaXM7XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5zdHlsZUFmdGVySW5zZXJ0KSB7XG4gICAgdGhpcy5yZWNhbGNTdHlsZSgpO1xuICB9XG5cbiAgaWYgKChtZWRpYVN0YXRlcyA9IHRoaXMuX21lZGlhU3RhdGVzKSAmJiB0aGlzLl9tZWRpYVN0YXRlcy5sZW5ndGgpIHtcbiAgICB0aGlzLl9tZWRpYVN0YXRlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgcmVzdWx0cyA9IFtdO1xuXG4gICAgZm9yIChpID0gMCwgbGVuID0gbWVkaWFTdGF0ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHF1ZXJ5U3RyaW5nID0gbWVkaWFTdGF0ZXNbaV07XG4gICAgICByZXN1bHRzLnB1c2godGhpcy5fbWVkaWFTdGF0ZXNbcXVlcnlTdHJpbmddID0gTWVkaWFRdWVyeSQxLnJlZ2lzdGVyKHRoaXMsIHF1ZXJ5U3RyaW5nKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGluaXQkMSAoUXVpY2tFbGVtZW50KSB7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUuX25vcm1hbGl6ZU9wdGlvbnMgPSBfbm9ybWFsaXplT3B0aW9ucztcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5fcGFyc2VTdHlsZXMgPSBfcGFyc2VTdHlsZXM7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUuX3BhcnNlVGV4dHMgPSBfcGFyc2VUZXh0cztcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5fYXBwbHlPcHRpb25zID0gX2FwcGx5T3B0aW9ucztcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5fcG9zdENyZWF0aW9uID0gX3Bvc3RDcmVhdGlvbjtcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5fYXR0YWNoU3RhdGVFdmVudHMgPSBfYXR0YWNoU3RhdGVFdmVudHM7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUuX3Byb3h5UGFyZW50ID0gX3Byb3h5UGFyZW50O1xuICByZXR1cm4gUXVpY2tFbGVtZW50LnByb3RvdHlwZS5fdW5wcm94eVBhcmVudCA9IF91bnByb3h5UGFyZW50O1xufWZ1bmN0aW9uIGFsaWFzZXMgKFF1aWNrRWxlbWVudCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUXVpY2tFbGVtZW50LnByb3RvdHlwZSwge1xuICAgICdyYXcnOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWw7XG4gICAgICB9XG4gICAgfSxcbiAgICAnMCc6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbDtcbiAgICAgIH1cbiAgICB9LFxuICAgICdjc3MnOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3R5bGU7XG4gICAgICB9XG4gICAgfSxcbiAgICAncmVwbGFjZVdpdGgnOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGFjZTtcbiAgICAgIH1cbiAgICB9LFxuICAgICdyZW1vdmVMaXN0ZW5lcic6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vZmY7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn12YXIgcGFyZW50c1VudGlsID0gZnVuY3Rpb24gcGFyZW50c1VudGlsKGZpbHRlcikge1xuICByZXR1cm4gX2dldFBhcmVudHModGhpcywgZmlsdGVyKTtcbn07XG52YXIgcGFyZW50TWF0Y2hpbmcgPSBmdW5jdGlvbiBwYXJlbnRNYXRjaGluZyhmaWx0ZXIpIHtcbiAgdmFyIGlzUmVmLCBuZXh0UGFyZW50O1xuXG4gIGlmIChJUyQxLmZ1bmN0aW9uKGZpbHRlcikgfHwgKGlzUmVmID0gSVMkMS5zdHJpbmcoZmlsdGVyKSkpIHtcbiAgICBuZXh0UGFyZW50ID0gdGhpcy5wYXJlbnQ7XG5cbiAgICB3aGlsZSAobmV4dFBhcmVudCkge1xuICAgICAgaWYgKGlzUmVmKSB7XG4gICAgICAgIGlmIChuZXh0UGFyZW50LnJlZiA9PT0gZmlsdGVyKSB7XG4gICAgICAgICAgcmV0dXJuIG5leHRQYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmaWx0ZXIobmV4dFBhcmVudCkpIHtcbiAgICAgICAgICByZXR1cm4gbmV4dFBhcmVudDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXh0UGFyZW50ID0gbmV4dFBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICB9XG59O1xudmFyIHF1ZXJ5ID0gZnVuY3Rpb24gcXVlcnkoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIF9xdWlja2RvbSh0aGlzLnJhdy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSk7XG59O1xudmFyIHF1ZXJ5QWxsID0gZnVuY3Rpb24gcXVlcnlBbGwoc2VsZWN0b3IpIHtcbiAgdmFyIGksIGl0ZW0sIGxlbiwgb3V0cHV0LCByZXN1bHQ7XG4gIHJlc3VsdCA9IHRoaXMucmF3LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICBvdXRwdXQgPSBbXTtcblxuICBmb3IgKGkgPSAwLCBsZW4gPSByZXN1bHQubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpdGVtID0gcmVzdWx0W2ldO1xuICAgIG91dHB1dC5wdXNoKGl0ZW0pO1xuICB9XG5cbiAgcmV0dXJuIF9xdWlja2RvbS5iYXRjaChvdXRwdXQpO1xufTtcbnZhciBfZ2V0UGFyZW50cyA9IGZ1bmN0aW9uIF9nZXRQYXJlbnRzKHRhcmdldEVsLCBmaWx0ZXIpIHtcbiAgdmFyIGlzUmVmLCBuZXh0UGFyZW50LCBwYXJlbnRzO1xuXG4gIGlmICghSVMkMS5mdW5jdGlvbihmaWx0ZXIpICYmICEoaXNSZWYgPSBJUyQxLnN0cmluZyhmaWx0ZXIpKSkge1xuICAgIGZpbHRlciA9IHZvaWQgMDtcbiAgfVxuXG4gIHBhcmVudHMgPSBbXTtcbiAgbmV4dFBhcmVudCA9IHRhcmdldEVsLnBhcmVudDtcblxuICB3aGlsZSAobmV4dFBhcmVudCkge1xuICAgIHBhcmVudHMucHVzaChuZXh0UGFyZW50KTtcbiAgICBuZXh0UGFyZW50ID0gbmV4dFBhcmVudC5wYXJlbnQ7XG5cbiAgICBpZiAoaXNSZWYpIHtcbiAgICAgIGlmIChuZXh0UGFyZW50ICYmIG5leHRQYXJlbnQucmVmID09PSBmaWx0ZXIpIHtcbiAgICAgICAgbmV4dFBhcmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmaWx0ZXIpIHtcbiAgICAgIGlmIChmaWx0ZXIobmV4dFBhcmVudCkpIHtcbiAgICAgICAgbmV4dFBhcmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhcmVudHM7XG59O1xudmFyIF9nZXRDaGlsZFJlZnMgPSBmdW5jdGlvbiBfZ2V0Q2hpbGRSZWZzKHRhcmdldCwgZnJlc2hDb3B5KSB7XG4gIHZhciBjaGlsZCwgY2hpbGRSZWZzLCBjaGlsZHJlbiwgZWwsIGksIGxlbiwgcmVmLCByZWZzO1xuXG4gIGlmIChmcmVzaENvcHkgfHwgIXRhcmdldC5fY2hpbGRSZWZzKSB7XG4gICAgdGFyZ2V0Ll9jaGlsZFJlZnMgPSB7fTtcbiAgfVxuXG4gIHJlZnMgPSB0YXJnZXQuX2NoaWxkUmVmcztcblxuICBpZiAodGFyZ2V0LnJlZikge1xuICAgIHJlZnNbdGFyZ2V0LnJlZl0gPSB0YXJnZXQ7XG4gIH1cblxuICBjaGlsZHJlbiA9IHRhcmdldC5jaGlsZHJlbjtcblxuICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgZm9yIChpID0gMCwgbGVuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBjaGlsZFJlZnMgPSBfZ2V0Q2hpbGRSZWZzKGNoaWxkLCBmcmVzaENvcHkpO1xuXG4gICAgICBmb3IgKHJlZiBpbiBjaGlsZFJlZnMpIHtcbiAgICAgICAgZWwgPSBjaGlsZFJlZnNbcmVmXTtcbiAgICAgICAgcmVmc1tyZWZdIHx8IChyZWZzW3JlZl0gPSBlbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlZnM7XG59O1xudmFyIF9nZXRJbmRleEJ5UHJvcCA9IGZ1bmN0aW9uIF9nZXRJbmRleEJ5UHJvcChtYWluLCBwcm9wKSB7XG4gIHZhciBwYXJlbnQ7XG5cbiAgaWYgKCEocGFyZW50ID0gbWFpbi5wYXJlbnQpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhcmVudC5jaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gY2hpbGRbcHJvcF0gPT09IG1haW5bcHJvcF07XG4gICAgfSkuaW5kZXhPZihtYWluKTtcbiAgfVxufTtcbnZhciBfZmlsdGVyRWxlbWVudHMgPSBmdW5jdGlvbiBfZmlsdGVyRWxlbWVudHMoYXJyYXkpIHtcbiAgdmFyIGksIGl0ZW0sIGxlbiwgb3V0cHV0O1xuXG4gIGlmICghYXJyYXkubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IFtdO1xuXG4gICAgZm9yIChpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGl0ZW0gPSBhcnJheVtpXTtcblxuICAgICAgaWYgKGl0ZW0udHlwZSAhPT0gJ3RleHQnKSB7XG4gICAgICAgIG91dHB1dC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH1cbn07XG5mdW5jdGlvbiB0cmF2ZXJzaW5nIChRdWlja0VsZW1lbnQpIHtcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5wYXJlbnRzVW50aWwgPSBwYXJlbnRzVW50aWw7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUucGFyZW50TWF0Y2hpbmcgPSBwYXJlbnRNYXRjaGluZztcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5xdWVyeSA9IHF1ZXJ5O1xuICBRdWlja0VsZW1lbnQucHJvdG90eXBlLnF1ZXJ5QWxsID0gcXVlcnlBbGw7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhRdWlja0VsZW1lbnQucHJvdG90eXBlLCB7XG4gICAgJ2NoaWxkcmVuJzoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBjaGlsZCwgaSwgbGVuLCByZWYxO1xuXG4gICAgICAgIGlmICh0aGlzLmVsLmNoaWxkTm9kZXMubGVuZ3RoICE9PSB0aGlzLl9jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBSZS1jb2xsZWN0IGNoaWxkcmVuXHRcbiAgICAgICAgICB0aGlzLl9jaGlsZHJlbi5sZW5ndGggPSAwOyAvLyBFbXB0eSBvdXQgY2hpbGRyZW4gYXJyYXlcblxuICAgICAgICAgIHJlZjEgPSB0aGlzLmVsLmNoaWxkTm9kZXM7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYxLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjaGlsZCA9IHJlZjFbaV07XG5cbiAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA8IDQpIHtcbiAgICAgICAgICAgICAgdGhpcy5fY2hpbGRyZW4ucHVzaChfcXVpY2tkb20oY2hpbGQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW47XG4gICAgICB9XG4gICAgfSxcbiAgICAnZWxlbWVudENoaWxkcmVuJzoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfZmlsdGVyRWxlbWVudHModGhpcy5jaGlsZHJlbik7XG4gICAgICB9XG4gICAgfSxcbiAgICAncGFyZW50Jzoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIGlmICgoIXRoaXMuX3BhcmVudCB8fCB0aGlzLl9wYXJlbnQuZWwgIT09IHRoaXMuZWwucGFyZW50Tm9kZSkgJiYgIUlTJDEuZG9tRG9jKHRoaXMuZWwucGFyZW50Tm9kZSkpIHtcbiAgICAgICAgICB0aGlzLl9wYXJlbnQgPSBfcXVpY2tkb20odGhpcy5lbC5wYXJlbnROb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQ7XG4gICAgICB9XG4gICAgfSxcbiAgICAncGFyZW50cyc6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX2dldFBhcmVudHModGhpcyk7XG4gICAgICB9XG4gICAgfSxcbiAgICAnbmV4dCc6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX3F1aWNrZG9tKHRoaXMuZWwubmV4dFNpYmxpbmcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ25leHRFbCc6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX3F1aWNrZG9tKHRoaXMuZWwubmV4dEVsZW1lbnRTaWJsaW5nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICduZXh0RWxBbGwnOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9maWx0ZXJFbGVtZW50cyh0aGlzLm5leHRBbGwpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ25leHRBbGwnOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIG5leHRTaWJsaW5nLCBzaWJsaW5ncztcbiAgICAgICAgc2libGluZ3MgPSBbXTtcbiAgICAgICAgbmV4dFNpYmxpbmcgPSBfcXVpY2tkb20odGhpcy5lbC5uZXh0U2libGluZyk7XG5cbiAgICAgICAgd2hpbGUgKG5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgc2libGluZ3MucHVzaChuZXh0U2libGluZyk7XG4gICAgICAgICAgbmV4dFNpYmxpbmcgPSBuZXh0U2libGluZy5uZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNpYmxpbmdzO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3ByZXYnOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9xdWlja2RvbSh0aGlzLmVsLnByZXZpb3VzU2libGluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICAncHJldkVsJzoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfcXVpY2tkb20odGhpcy5lbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICdwcmV2RWxBbGwnOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9maWx0ZXJFbGVtZW50cyh0aGlzLnByZXZBbGwpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3ByZXZBbGwnOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIHByZXZTaWJsaW5nLCBzaWJsaW5ncztcbiAgICAgICAgc2libGluZ3MgPSBbXTtcbiAgICAgICAgcHJldlNpYmxpbmcgPSBfcXVpY2tkb20odGhpcy5lbC5wcmV2aW91c1NpYmxpbmcpO1xuXG4gICAgICAgIHdoaWxlIChwcmV2U2libGluZykge1xuICAgICAgICAgIHNpYmxpbmdzLnB1c2gocHJldlNpYmxpbmcpO1xuICAgICAgICAgIHByZXZTaWJsaW5nID0gcHJldlNpYmxpbmcucHJldjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzaWJsaW5ncztcbiAgICAgIH1cbiAgICB9LFxuICAgICdzaWJsaW5ncyc6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmV2QWxsLnJldmVyc2UoKS5jb25jYXQodGhpcy5uZXh0QWxsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICdlbGVtZW50U2libGluZ3MnOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9maWx0ZXJFbGVtZW50cyh0aGlzLnNpYmxpbmdzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgICdjaGlsZCc6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGRSZWZzIHx8IF9nZXRDaGlsZFJlZnModGhpcyk7XG4gICAgICB9XG4gICAgfSxcbiAgICAnY2hpbGRmJzoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfZ2V0Q2hpbGRSZWZzKHRoaXMsIHRydWUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2ZpcnN0Q2hpbGQnOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bMF07XG4gICAgICB9XG4gICAgfSxcbiAgICAnbGFzdENoaWxkJzoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbjtcbiAgICAgICAgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgICByZXR1cm4gY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gICAgICB9XG4gICAgfSxcbiAgICAnaW5kZXgnOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgdmFyIHBhcmVudDtcblxuICAgICAgICBpZiAoIShwYXJlbnQgPSB0aGlzLnBhcmVudCkpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50LmNoaWxkcmVuLmluZGV4T2YodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgICdpbmRleFR5cGUnOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRJbmRleEJ5UHJvcCh0aGlzLCAndHlwZScpO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2luZGV4UmVmJzoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfZ2V0SW5kZXhCeVByb3AodGhpcywgJ3JlZicpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbl9xdWlja2RvbS5xdWVyeSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgcmV0dXJuIF9xdWlja2RvbShkb2N1bWVudCkucXVlcnkodGFyZ2V0KTtcbn07XG5cbl9xdWlja2RvbS5xdWVyeUFsbCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgcmV0dXJuIF9xdWlja2RvbShkb2N1bWVudCkucXVlcnlBbGwodGFyZ2V0KTtcbn07dmFyIERVTU1ZX0FSUkFZO1xuRFVNTVlfQVJSQVkgPSBbXTtcbnZhciBzdGF0ZSA9IGZ1bmN0aW9uIHN0YXRlKHRhcmdldFN0YXRlLCB2YWx1ZSwgYnViYmxlcywgc291cmNlKSB7XG4gIHZhciBhY3RpdmVTdGF0ZXMsIGNoaWxkLCBkZXNpcmVkVmFsdWUsIGksIGosIGtleSwga2V5cywgbGVuLCBwcm9wLCByZWYsIHRvZ2dsZTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZS5zbGljZSgpO1xuICB9XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICBpZiAoSVMkMS5zdHJpbmcodGFyZ2V0U3RhdGUpKSB7XG4gICAgICByZXR1cm4gaW5jbHVkZXModGhpcy5fc3RhdGUsIHRhcmdldFN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKElTJDEub2JqZWN0KHRhcmdldFN0YXRlKSkge1xuICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHRhcmdldFN0YXRlKTtcbiAgICAgIGkgPSAtMTtcblxuICAgICAgd2hpbGUgKGtleSA9IGtleXNbKytpXSkge1xuICAgICAgICB0aGlzLnN0YXRlKGtleSwgdGFyZ2V0U3RhdGVba2V5XSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZVBpcGVUYXJnZXQgJiYgc291cmNlICE9PSB0aGlzKSB7XG4gICAgdGhpcy5fc3RhdGVQaXBlVGFyZ2V0LnN0YXRlKHRhcmdldFN0YXRlLCB2YWx1ZSwgYnViYmxlcywgdGhpcyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSBlbHNlIGlmIChJUyQxLnN0cmluZyh0YXJnZXRTdGF0ZSkpIHtcbiAgICBpZiAodGFyZ2V0U3RhdGVbMF0gPT09ICckJykge1xuICAgICAgdGFyZ2V0U3RhdGUgPSB0YXJnZXRTdGF0ZS5zbGljZSgxKTtcbiAgICB9XG5cbiAgICBpZiAodGFyZ2V0U3RhdGUgPT09ICdiYXNlJykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZGVzaXJlZFZhbHVlID0gISF2YWx1ZTsgLy8gQ29udmVydCB0aGUgdmFsdWUgdG8gYSBib29sZWFuXG5cbiAgICBhY3RpdmVTdGF0ZXMgPSB0aGlzLl9nZXRBY3RpdmVTdGF0ZXModGFyZ2V0U3RhdGUsIGZhbHNlKTsgLy8gPT09PSBUb2dnbGUgc3R5bGVzIGZvciB0aGlzIHN0YXRlID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgaWYgKHRoaXMuc3RhdGUodGFyZ2V0U3RhdGUpICE9PSBkZXNpcmVkVmFsdWUpIHtcbiAgICAgIHByb3AgPSB0aGlzLnR5cGUgPT09ICd0ZXh0JyA/ICdUZXh0JyA6ICdTdHlsZSc7XG5cbiAgICAgIGlmIChkZXNpcmVkVmFsdWUpIHtcbiAgICAgICAgLy9pcyBvblxuICAgICAgICB0aGlzLl9zdGF0ZS5wdXNoKHRhcmdldFN0YXRlKTtcblxuICAgICAgICB0b2dnbGUgPSAnT04nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVtb3ZlSXRlbSh0aGlzLl9zdGF0ZSwgdGFyZ2V0U3RhdGUpO1xuICAgICAgICB0b2dnbGUgPSAnT0ZGJztcbiAgICAgIH1cblxuICAgICAgdGhpc1snX3R1cm4nICsgcHJvcCArIHRvZ2dsZV0odGFyZ2V0U3RhdGUsIGFjdGl2ZVN0YXRlcyk7XG4gICAgICB0aGlzLmVtaXRQcml2YXRlKFwic3RhdGVDaGFuZ2U6XCIuY29uY2F0KHRhcmdldFN0YXRlKSwgZGVzaXJlZFZhbHVlKTtcbiAgICB9IC8vID09PT0gUGFzcyBzdGF0ZSB0byBwYXJlbnQvY2hpbGRyZW4gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblxuICAgIGlmICghaW5jbHVkZXModGhpcy5vcHRpb25zLnVucGFzc2FibGVTdGF0ZXMsIHRhcmdldFN0YXRlKSkge1xuICAgICAgaWYgKGJ1YmJsZXMpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgdGhpcy5fcGFyZW50LnN0YXRlKHRhcmdldFN0YXRlLCB2YWx1ZSwgdHJ1ZSwgc291cmNlIHx8IHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5wYXNzU3RhdGVUb0NoaWxkcmVuKSB7XG4gICAgICAgIHJlZiA9IHRoaXMuX2NoaWxkcmVuO1xuXG4gICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIGNoaWxkID0gcmVmW2pdO1xuICAgICAgICAgIGNoaWxkLnN0YXRlKHRhcmdldFN0YXRlLCB2YWx1ZSwgZmFsc2UsIHNvdXJjZSB8fCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59O1xudmFyIHRvZ2dsZVN0YXRlID0gZnVuY3Rpb24gdG9nZ2xlU3RhdGUodGFyZ2V0U3RhdGUpIHtcbiAgcmV0dXJuIHRoaXMuc3RhdGUodGFyZ2V0U3RhdGUsICF0aGlzLnN0YXRlKHRhcmdldFN0YXRlKSk7XG59O1xudmFyIHJlc2V0U3RhdGUgPSBmdW5jdGlvbiByZXNldFN0YXRlKCkge1xuICB2YXIgYWN0aXZlU3RhdGUsIGosIGxlbiwgcmVmO1xuICByZWYgPSB0aGlzLl9zdGF0ZS5zbGljZSgpO1xuXG4gIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgIGFjdGl2ZVN0YXRlID0gcmVmW2pdO1xuICAgIHRoaXMuc3RhdGUoYWN0aXZlU3RhdGUsIGZhbHNlKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcbnZhciBwaXBlU3RhdGUgPSBmdW5jdGlvbiBwaXBlU3RhdGUodGFyZ2V0RWwpIHtcbiAgdmFyIGFjdGl2ZVN0YXRlLCBqLCBsZW4sIHJlZjtcblxuICBpZiAodGFyZ2V0RWwpIHtcbiAgICB0YXJnZXRFbCA9IG5vcm1hbGl6ZUVsZW1lbnRBcmcodGFyZ2V0RWwpO1xuXG4gICAgaWYgKElTJDEucXVpY2tEb21FbCh0YXJnZXRFbCkgJiYgdGFyZ2V0RWwgIT09IHRoaXMpIHtcbiAgICAgIHRoaXMuX3N0YXRlUGlwZVRhcmdldCA9IHRhcmdldEVsO1xuICAgICAgcmVmID0gdGhpcy5fc3RhdGU7XG5cbiAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICBhY3RpdmVTdGF0ZSA9IHJlZltqXTtcbiAgICAgICAgdGFyZ2V0RWwuc3RhdGUoYWN0aXZlU3RhdGUsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICh0YXJnZXRFbCA9PT0gZmFsc2UpIHtcbiAgICBkZWxldGUgdGhpcy5fc3RhdGVQaXBlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xudmFyIF9hcHBseVJlZ2lzdGVyZWRTdHlsZSA9IGZ1bmN0aW9uIF9hcHBseVJlZ2lzdGVyZWRTdHlsZSh0YXJnZXRTdHlsZSwgc3VwZXJpb3JTdGF0ZXMsIGluY2x1ZGVCYXNlLCBza2lwRm5zKSB7XG4gIHZhciBjbGFzc05hbWUsIGVudHJ5LCBqLCBrLCBsZW4sIGxlbjEsIHJlZiwgcmVmMSwgc3VwZXJpb3JTdHlsZXM7XG5cbiAgaWYgKHRhcmdldFN0eWxlKSB7XG4gICAgcmVmID0gdGFyZ2V0U3R5bGUuY2xhc3NOYW1lO1xuXG4gICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICBjbGFzc05hbWUgPSByZWZbal07XG4gICAgICB0aGlzLmFkZENsYXNzKGNsYXNzTmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKHRhcmdldFN0eWxlLmZucy5sZW5ndGggJiYgIXNraXBGbnMpIHtcbiAgICAgIGlmIChzdXBlcmlvclN0YXRlcykge1xuICAgICAgICBzdXBlcmlvclN0eWxlcyA9IHRoaXMuX3Jlc29sdmVGblN0eWxlcyhzdXBlcmlvclN0YXRlcywgaW5jbHVkZUJhc2UpO1xuICAgICAgfVxuXG4gICAgICByZWYxID0gdGFyZ2V0U3R5bGUuZm5zO1xuXG4gICAgICBmb3IgKGsgPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcbiAgICAgICAgZW50cnkgPSByZWYxW2tdO1xuXG4gICAgICAgIGlmICghKHN1cGVyaW9yU3R5bGVzICYmIHN1cGVyaW9yU3R5bGVzW2VudHJ5WzBdXSkpIHtcbiAgICAgICAgICB0aGlzLnN0eWxlKGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG52YXIgX3JlbW92ZVJlZ2lzdGVyZWRTdHlsZSA9IGZ1bmN0aW9uIF9yZW1vdmVSZWdpc3RlcmVkU3R5bGUodGFyZ2V0U3R5bGUsIHN1cGVyaW9yU3RhdGVzLCBpbmNsdWRlQmFzZSkge1xuICB2YXIgY2xhc3NOYW1lLCBlbnRyeSwgaiwgaywgbGVuLCBsZW4xLCByZWYsIHJlZjEsIHJlc2V0VmFsdWUsIHN1cGVyaW9yU3R5bGVzO1xuICByZWYgPSB0YXJnZXRTdHlsZS5jbGFzc05hbWU7XG5cbiAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgY2xhc3NOYW1lID0gcmVmW2pdO1xuICAgIHRoaXMucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKTtcbiAgfVxuXG4gIGlmICh0YXJnZXRTdHlsZS5mbnMubGVuZ3RoKSB7XG4gICAgaWYgKHN1cGVyaW9yU3RhdGVzKSB7XG4gICAgICBzdXBlcmlvclN0eWxlcyA9IHRoaXMuX3Jlc29sdmVGblN0eWxlcyhzdXBlcmlvclN0YXRlcywgaW5jbHVkZUJhc2UpO1xuICAgIH1cblxuICAgIHJlZjEgPSB0YXJnZXRTdHlsZS5mbnM7XG5cbiAgICBmb3IgKGsgPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcbiAgICAgIGVudHJ5ID0gcmVmMVtrXTtcbiAgICAgIHJlc2V0VmFsdWUgPSBzdXBlcmlvclN0eWxlcyAmJiBzdXBlcmlvclN0eWxlc1tlbnRyeVswXV0gfHwgbnVsbDtcbiAgICAgIHRoaXMuc3R5bGUoZW50cnlbMF0sIHJlc2V0VmFsdWUpO1xuICAgIH1cbiAgfVxufTtcbnZhciBfdHVyblN0eWxlT04gPSBmdW5jdGlvbiBfdHVyblN0eWxlT04odGFyZ2V0U3RhdGUsIGFjdGl2ZVN0YXRlcykge1xuICB2YXIgaiwgbGVuLCBzaGFyZWRTdGF0ZXMsIHNraXBGbnMsIHN0YXRlQ2hhaW47XG4gIHNraXBGbnMgPSB0aGlzLm9wdGlvbnMuc3R5bGVBZnRlckluc2VydCAmJiAhdGhpcy5faW5zZXJ0ZWQ7XG5cbiAgaWYgKHRoaXMuX3N0eWxlc1t0YXJnZXRTdGF0ZV0pIHtcbiAgICB0aGlzLl9hcHBseVJlZ2lzdGVyZWRTdHlsZSh0aGlzLl9zdHlsZXNbdGFyZ2V0U3RhdGVdLCB0aGlzLl9nZXRTdXBlcmlvclN0YXRlcyh0YXJnZXRTdGF0ZSwgYWN0aXZlU3RhdGVzKSwgZmFsc2UsIHNraXBGbnMpO1xuICB9XG5cbiAgaWYgKHRoaXMuX3Byb3ZpZGVkU3RhdGVzU2hhcmVkKSB7XG4gICAgc2hhcmVkU3RhdGVzID0gdGhpcy5fZ2V0U2hhcmVkU3RhdGVzKHRhcmdldFN0YXRlKTtcblxuICAgIGZvciAoaiA9IDAsIGxlbiA9IHNoYXJlZFN0YXRlcy5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgc3RhdGVDaGFpbiA9IHNoYXJlZFN0YXRlc1tqXTtcblxuICAgICAgaWYgKCFpbmNsdWRlcyh0aGlzLl9zdGF0ZVNoYXJlZCwgc3RhdGVDaGFpbi5zdHJpbmcpKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlU2hhcmVkLnB1c2goc3RhdGVDaGFpbi5zdHJpbmcpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9hcHBseVJlZ2lzdGVyZWRTdHlsZSh0aGlzLl9zdHlsZXNbc3RhdGVDaGFpbi5zdHJpbmddLCBudWxsLCBudWxsLCBza2lwRm5zKTtcbiAgICB9XG4gIH1cbn07XG52YXIgX3R1cm5TdHlsZU9GRiA9IGZ1bmN0aW9uIF90dXJuU3R5bGVPRkYodGFyZ2V0U3RhdGUsIGFjdGl2ZVN0YXRlcykge1xuICB2YXIgYWN0aXZlU2hhcmVkU3RhdGVzLCBqLCBsZW4sIHNoYXJlZFN0YXRlcywgc3RhdGVDaGFpbiwgdGFyZ2V0U3R5bGU7XG5cbiAgaWYgKHRoaXMuX3N0eWxlc1t0YXJnZXRTdGF0ZV0pIHtcbiAgICB0aGlzLl9yZW1vdmVSZWdpc3RlcmVkU3R5bGUodGhpcy5fc3R5bGVzW3RhcmdldFN0YXRlXSwgYWN0aXZlU3RhdGVzLCB0cnVlKTtcbiAgfVxuXG4gIGlmICh0aGlzLl9wcm92aWRlZFN0YXRlc1NoYXJlZCkge1xuICAgIHNoYXJlZFN0YXRlcyA9IHRoaXMuX2dldFNoYXJlZFN0YXRlcyh0YXJnZXRTdGF0ZSk7XG5cbiAgICBpZiAoc2hhcmVkU3RhdGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoaiA9IDAsIGxlbiA9IHNoYXJlZFN0YXRlcy5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgc3RhdGVDaGFpbiA9IHNoYXJlZFN0YXRlc1tqXTtcbiAgICAgIHJlbW92ZUl0ZW0odGhpcy5fc3RhdGVTaGFyZWQsIHN0YXRlQ2hhaW4uc3RyaW5nKTtcbiAgICAgIHRhcmdldFN0eWxlID0gdGhpcy5fc3R5bGVzW3N0YXRlQ2hhaW4uc3RyaW5nXTtcblxuICAgICAgaWYgKHRhcmdldFN0eWxlLmZucy5sZW5ndGggJiYgdGhpcy5fc3RhdGVTaGFyZWQubGVuZ3RoICYmICFhY3RpdmVTaGFyZWRTdGF0ZXMpIHtcbiAgICAgICAgYWN0aXZlU2hhcmVkU3RhdGVzID0gdGhpcy5fc3RhdGVTaGFyZWQuZmlsdGVyKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgIHJldHVybiAhaW5jbHVkZXMoc3RhdGUsIHRhcmdldFN0YXRlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGFjdGl2ZVN0YXRlcyA9IGFjdGl2ZVN0YXRlcy5jb25jYXQoYWN0aXZlU2hhcmVkU3RhdGVzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVtb3ZlUmVnaXN0ZXJlZFN0eWxlKHRhcmdldFN0eWxlLCBhY3RpdmVTdGF0ZXMsIHRydWUpO1xuICAgIH1cbiAgfVxufTtcbnZhciBfdHVyblRleHRPTiA9IGZ1bmN0aW9uIF90dXJuVGV4dE9OKHRhcmdldFN0YXRlLCBhY3RpdmVTdGF0ZXMpIHtcbiAgdmFyIHN1cGVyaW9yU3RhdGVzLCB0YXJnZXRUZXh0O1xuXG4gIGlmICh0aGlzLl90ZXh0cyAmJiBJUyQxLnN0cmluZyh0YXJnZXRUZXh0ID0gdGhpcy5fdGV4dHNbdGFyZ2V0U3RhdGVdKSkge1xuICAgIHN1cGVyaW9yU3RhdGVzID0gdGhpcy5fZ2V0U3VwZXJpb3JTdGF0ZXModGFyZ2V0U3RhdGUsIGFjdGl2ZVN0YXRlcyk7XG5cbiAgICBpZiAoIXN1cGVyaW9yU3RhdGVzLmxlbmd0aCkge1xuICAgICAgdGhpcy50ZXh0ID0gdGFyZ2V0VGV4dDtcbiAgICB9XG4gIH1cbn07XG52YXIgX3R1cm5UZXh0T0ZGID0gZnVuY3Rpb24gX3R1cm5UZXh0T0ZGKHRhcmdldFN0YXRlLCBhY3RpdmVTdGF0ZXMpIHtcbiAgdmFyIHRhcmdldFRleHQ7XG5cbiAgaWYgKHRoaXMuX3RleHRzICYmIElTJDEuc3RyaW5nKHRhcmdldFRleHQgPSB0aGlzLl90ZXh0c1t0YXJnZXRTdGF0ZV0pKSB7XG4gICAgYWN0aXZlU3RhdGVzID0gYWN0aXZlU3RhdGVzLmZpbHRlcihmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgIHJldHVybiBzdGF0ZSAhPT0gdGFyZ2V0U3RhdGU7XG4gICAgfSk7XG4gICAgdGFyZ2V0VGV4dCA9IHRoaXMuX3RleHRzW2FjdGl2ZVN0YXRlc1thY3RpdmVTdGF0ZXMubGVuZ3RoIC0gMV1dO1xuXG4gICAgaWYgKHRhcmdldFRleHQgPT0gbnVsbCkge1xuICAgICAgdGFyZ2V0VGV4dCA9IHRoaXMuX3RleHRzLmJhc2U7XG4gICAgfVxuXG4gICAgdGhpcy50ZXh0ID0gdGFyZ2V0VGV4dDtcbiAgfVxufTtcbnZhciBfZ2V0QWN0aXZlU3RhdGVzID0gZnVuY3Rpb24gX2dldEFjdGl2ZVN0YXRlcyhzdGF0ZVRvRXhjbHVkZSkge1xuICB2YXIgaW5jbHVkZVNoYXJlZFN0YXRlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcbiAgdmFyIGFjdGl2ZVN0YXRlcywgaiwgbGVuLCBwbGFpblN0YXRlcztcblxuICBpZiAoIXRoaXMuX3Byb3ZpZGVkU3RhdGVzKSB7XG4gICAgcmV0dXJuIERVTU1ZX0FSUkFZO1xuICB9XG5cbiAgYWN0aXZlU3RhdGVzID0gcGxhaW5TdGF0ZXMgPSB0aGlzLl9zdGF0ZTtcblxuICBpZiAoc3RhdGVUb0V4Y2x1ZGUpIHtcbiAgICBwbGFpblN0YXRlcyA9IFtdO1xuXG4gICAgZm9yIChqID0gMCwgbGVuID0gYWN0aXZlU3RhdGVzLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICBzdGF0ZSA9IGFjdGl2ZVN0YXRlc1tqXTtcblxuICAgICAgaWYgKHN0YXRlICE9PSBzdGF0ZVRvRXhjbHVkZSkge1xuICAgICAgICBwbGFpblN0YXRlcy5wdXNoKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIWluY2x1ZGVTaGFyZWRTdGF0ZXMgfHwgIXRoaXMuX3Byb3ZpZGVkU3RhdGVzU2hhcmVkKSB7XG4gICAgcmV0dXJuIHBsYWluU3RhdGVzO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwbGFpblN0YXRlcy5jb25jYXQodGhpcy5fc3RhdGVTaGFyZWQpO1xuICB9XG59O1xudmFyIF9nZXRTdXBlcmlvclN0YXRlcyA9IGZ1bmN0aW9uIF9nZXRTdXBlcmlvclN0YXRlcyh0YXJnZXRTdGF0ZSwgYWN0aXZlU3RhdGVzKSB7XG4gIHZhciBjYW5kaWRhdGUsIGosIGxlbiwgc3VwZXJpb3IsIHRhcmdldFN0YXRlSW5kZXg7XG4gIHRhcmdldFN0YXRlSW5kZXggPSB0aGlzLl9wcm92aWRlZFN0YXRlcy5pbmRleE9mKHRhcmdldFN0YXRlKTtcblxuICBpZiAodGFyZ2V0U3RhdGVJbmRleCA9PT0gdGhpcy5fcHJvdmlkZWRTdGF0ZXMubGVuZ3RoIC0gMSkge1xuICAgIHJldHVybiBEVU1NWV9BUlJBWTtcbiAgfVxuXG4gIHN1cGVyaW9yID0gW107XG5cbiAgZm9yIChqID0gMCwgbGVuID0gYWN0aXZlU3RhdGVzLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgY2FuZGlkYXRlID0gYWN0aXZlU3RhdGVzW2pdO1xuXG4gICAgaWYgKHRoaXMuX3Byb3ZpZGVkU3RhdGVzLmluZGV4T2YoY2FuZGlkYXRlKSA+IHRhcmdldFN0YXRlSW5kZXgpIHtcbiAgICAgIHN1cGVyaW9yLnB1c2goY2FuZGlkYXRlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3VwZXJpb3I7XG59O1xudmFyIF9nZXRTaGFyZWRTdGF0ZXMgPSBmdW5jdGlvbiBfZ2V0U2hhcmVkU3RhdGVzKHRhcmdldFN0YXRlKSB7XG4gIHZhciBhY3RpdmVTdGF0ZXMsIGosIGxlbiwgcmVmLCBzaGFyZWRTdGF0ZXMsIHN0YXRlQ2hhaW47XG4gIGFjdGl2ZVN0YXRlcyA9IHRoaXMuX3N0YXRlO1xuICBzaGFyZWRTdGF0ZXMgPSBbXTtcbiAgcmVmID0gdGhpcy5fcHJvdmlkZWRTdGF0ZXNTaGFyZWQ7XG5cbiAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgc3RhdGVDaGFpbiA9IHJlZltqXTtcblxuICAgIGlmIChzdGF0ZUNoYWluLmluY2x1ZGVzKHRhcmdldFN0YXRlKSAmJiBzdGF0ZUNoYWluLmlzQXBwbGljYWJsZSh0YXJnZXRTdGF0ZSwgYWN0aXZlU3RhdGVzKSkge1xuICAgICAgc2hhcmVkU3RhdGVzLnB1c2goc3RhdGVDaGFpbik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNoYXJlZFN0YXRlcztcbn07XG52YXIgX3Jlc29sdmVGblN0eWxlcyA9IGZ1bmN0aW9uIF9yZXNvbHZlRm5TdHlsZXMoc3RhdGVzLCBpbmNsdWRlQmFzZSkge1xuICB2YXIgZW50cnksIGosIGssIGxlbiwgbGVuMSwgb3V0cHV0LCByZWY7XG5cbiAgaWYgKGluY2x1ZGVCYXNlKSB7XG4gICAgc3RhdGVzID0gWydiYXNlJ10uY29uY2F0KHN0YXRlcyk7XG4gIH1cblxuICBvdXRwdXQgPSB7fTtcblxuICBmb3IgKGogPSAwLCBsZW4gPSBzdGF0ZXMubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICBzdGF0ZSA9IHN0YXRlc1tqXTtcblxuICAgIGlmICh0aGlzLl9zdHlsZXNbc3RhdGVdICYmIHRoaXMuX3N0eWxlc1tzdGF0ZV0uZm5zLmxlbmd0aCkge1xuICAgICAgcmVmID0gdGhpcy5fc3R5bGVzW3N0YXRlXS5mbnM7XG5cbiAgICAgIGZvciAoayA9IDAsIGxlbjEgPSByZWYubGVuZ3RoOyBrIDwgbGVuMTsgaysrKSB7XG4gICAgICAgIGVudHJ5ID0gcmVmW2tdO1xuICAgICAgICBvdXRwdXRbZW50cnlbMF1dID0gZW50cnlbMV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn07XG5mdW5jdGlvbiBzdGF0ZSQxIChRdWlja0VsZW1lbnQpIHtcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5zdGF0ZSA9IHN0YXRlO1xuICBRdWlja0VsZW1lbnQucHJvdG90eXBlLnRvZ2dsZVN0YXRlID0gdG9nZ2xlU3RhdGU7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUucmVzZXRTdGF0ZSA9IHJlc2V0U3RhdGU7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUucGlwZVN0YXRlID0gcGlwZVN0YXRlO1xuICBRdWlja0VsZW1lbnQucHJvdG90eXBlLl9hcHBseVJlZ2lzdGVyZWRTdHlsZSA9IF9hcHBseVJlZ2lzdGVyZWRTdHlsZTtcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5fcmVtb3ZlUmVnaXN0ZXJlZFN0eWxlID0gX3JlbW92ZVJlZ2lzdGVyZWRTdHlsZTtcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5fdHVyblN0eWxlT04gPSBfdHVyblN0eWxlT047XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUuX3R1cm5TdHlsZU9GRiA9IF90dXJuU3R5bGVPRkY7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUuX3R1cm5UZXh0T04gPSBfdHVyblRleHRPTjtcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5fdHVyblRleHRPRkYgPSBfdHVyblRleHRPRkY7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUuX2dldEFjdGl2ZVN0YXRlcyA9IF9nZXRBY3RpdmVTdGF0ZXM7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUuX2dldFN1cGVyaW9yU3RhdGVzID0gX2dldFN1cGVyaW9yU3RhdGVzO1xuICBRdWlja0VsZW1lbnQucHJvdG90eXBlLl9nZXRTaGFyZWRTdGF0ZXMgPSBfZ2V0U2hhcmVkU3RhdGVzO1xuICByZXR1cm4gUXVpY2tFbGVtZW50LnByb3RvdHlwZS5fcmVzb2x2ZUZuU3R5bGVzID0gX3Jlc29sdmVGblN0eWxlcztcbn12YXIgdG9UZW1wbGF0ZSA9IGZ1bmN0aW9uIHRvVGVtcGxhdGUoKSB7XG4gIHJldHVybiBfcXVpY2tkb20udGVtcGxhdGUodGhpcyk7XG59O1xudmFyIGNsb25lID0gZnVuY3Rpb24gY2xvbmUoKSB7XG4gIHZhciBhY3RpdmVTdGF0ZSwgY2FsbGJhY2ssIGNhbGxiYWNrcywgY2hpbGQsIGVsQ2xvbmUsIGV2ZW50TmFtZSwgaSwgaiwgaywgbGVuLCBsZW4xLCBsZW4yLCBuZXdFbCwgb3B0aW9ucywgcmVmLCByZWYxLCByZWYyO1xuICBlbENsb25lID0gdGhpcy5lbC5jbG9uZU5vZGUoZmFsc2UpO1xuICBvcHRpb25zID0gZXh0ZW5kLmNsb25lKHRoaXMub3B0aW9ucywge1xuICAgIGV4aXN0aW5nOiBlbENsb25lXG4gIH0pO1xuICBuZXdFbCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMudHlwZSwgb3B0aW9ucyk7XG4gIHJlZiA9IHRoaXMuX3N0YXRlO1xuXG4gIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGFjdGl2ZVN0YXRlID0gcmVmW2ldO1xuICAgIG5ld0VsLnN0YXRlKGFjdGl2ZVN0YXRlLCB0cnVlKTtcbiAgfVxuXG4gIHJlZjEgPSB0aGlzLmNoaWxkcmVuO1xuXG4gIGZvciAoaiA9IDAsIGxlbjEgPSByZWYxLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgIGNoaWxkID0gcmVmMVtqXTtcbiAgICBuZXdFbC5hcHBlbmQoY2hpbGQuY2xvbmUoKSk7XG4gIH1cblxuICByZWYyID0gdGhpcy5fZXZlbnRDYWxsYmFja3M7XG5cbiAgZm9yIChldmVudE5hbWUgaW4gcmVmMikge1xuICAgIGNhbGxiYWNrcyA9IHJlZjJbZXZlbnROYW1lXTtcblxuICAgIGZvciAoayA9IDAsIGxlbjIgPSBjYWxsYmFja3MubGVuZ3RoOyBrIDwgbGVuMjsgaysrKSB7XG4gICAgICBjYWxsYmFjayA9IGNhbGxiYWNrc1trXTtcbiAgICAgIG5ld0VsLm9uKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdFbDtcbn07XG52YXIgYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKHRhcmdldEVsKSB7XG4gIHZhciBwcmV2UGFyZW50O1xuXG4gIGlmICh0YXJnZXRFbCkge1xuICAgIHRhcmdldEVsID0gbm9ybWFsaXplRWxlbWVudEFyZyh0YXJnZXRFbCk7XG5cbiAgICBpZiAoSVMkMS5xdWlja0RvbUVsKHRhcmdldEVsKSkge1xuICAgICAgcHJldlBhcmVudCA9IHRhcmdldEVsLnBhcmVudDtcblxuICAgICAgaWYgKHByZXZQYXJlbnQpIHtcbiAgICAgICAgcHJldlBhcmVudC5fcmVtb3ZlQ2hpbGQodGFyZ2V0RWwpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jaGlsZHJlbi5wdXNoKHRhcmdldEVsKTtcblxuICAgICAgdGhpcy5lbC5hcHBlbmRDaGlsZCh0YXJnZXRFbC5lbCk7XG5cbiAgICAgIHRhcmdldEVsLl9yZWZyZXNoUGFyZW50KCk7IC8vIEZvcmNlIHJlLWZyZXNoIHRhcmdldEVsLl9wYXJlbnQgdmFsdWUgdG8gdHJpZ2dlciBpbnNlcnRlZCBjYWxsYmFja1xuXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xudmFyIGFwcGVuZFRvID0gZnVuY3Rpb24gYXBwZW5kVG8odGFyZ2V0RWwpIHtcbiAgaWYgKHRhcmdldEVsKSB7XG4gICAgdGFyZ2V0RWwgPSBub3JtYWxpemVFbGVtZW50QXJnKHRhcmdldEVsKTtcblxuICAgIGlmIChJUyQxLnF1aWNrRG9tRWwodGFyZ2V0RWwpKSB7XG4gICAgICB0YXJnZXRFbC5hcHBlbmQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xudmFyIHByZXBlbmQgPSBmdW5jdGlvbiBwcmVwZW5kKHRhcmdldEVsKSB7XG4gIHZhciBwcmV2UGFyZW50O1xuXG4gIGlmICh0YXJnZXRFbCkge1xuICAgIHRhcmdldEVsID0gbm9ybWFsaXplRWxlbWVudEFyZyh0YXJnZXRFbCk7XG5cbiAgICBpZiAoSVMkMS5xdWlja0RvbUVsKHRhcmdldEVsKSkge1xuICAgICAgcHJldlBhcmVudCA9IHRhcmdldEVsLnBhcmVudDtcblxuICAgICAgaWYgKHByZXZQYXJlbnQpIHtcbiAgICAgICAgcHJldlBhcmVudC5fcmVtb3ZlQ2hpbGQodGFyZ2V0RWwpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jaGlsZHJlbi51bnNoaWZ0KHRhcmdldEVsKTtcblxuICAgICAgdGhpcy5lbC5pbnNlcnRCZWZvcmUodGFyZ2V0RWwuZWwsIHRoaXMuZWwuZmlyc3RDaGlsZCk7XG5cbiAgICAgIHRhcmdldEVsLl9yZWZyZXNoUGFyZW50KCk7IC8vIEZvcmNlIHJlLWZyZXNoIHRhcmdldEVsLl9wYXJlbnQgdmFsdWUgdG8gdHJpZ2dlciBpbnNlcnRlZCBjYWxsYmFja1xuXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xudmFyIHByZXBlbmRUbyA9IGZ1bmN0aW9uIHByZXBlbmRUbyh0YXJnZXRFbCkge1xuICBpZiAodGFyZ2V0RWwpIHtcbiAgICB0YXJnZXRFbCA9IG5vcm1hbGl6ZUVsZW1lbnRBcmcodGFyZ2V0RWwpO1xuXG4gICAgaWYgKElTJDEucXVpY2tEb21FbCh0YXJnZXRFbCkpIHtcbiAgICAgIHRhcmdldEVsLnByZXBlbmQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xudmFyIGFmdGVyID0gZnVuY3Rpb24gYWZ0ZXIodGFyZ2V0RWwpIHtcbiAgdmFyIG15SW5kZXg7XG5cbiAgaWYgKHRhcmdldEVsICYmIHRoaXMucGFyZW50KSB7XG4gICAgdGFyZ2V0RWwgPSBub3JtYWxpemVFbGVtZW50QXJnKHRhcmdldEVsKTtcblxuICAgIGlmIChJUyQxLnF1aWNrRG9tRWwodGFyZ2V0RWwpKSB7XG4gICAgICBteUluZGV4ID0gdGhpcy5wYXJlbnQuX2NoaWxkcmVuLmluZGV4T2YodGhpcyk7XG5cbiAgICAgIHRoaXMucGFyZW50Ll9jaGlsZHJlbi5zcGxpY2UobXlJbmRleCArIDEsIDAsIHRhcmdldEVsKTtcblxuICAgICAgdGhpcy5lbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0YXJnZXRFbC5lbCwgdGhpcy5lbC5uZXh0U2libGluZyk7XG5cbiAgICAgIHRhcmdldEVsLl9yZWZyZXNoUGFyZW50KCk7IC8vIEZvcmNlIHJlLWZyZXNoIHRhcmdldEVsLl9wYXJlbnQgdmFsdWUgdG8gdHJpZ2dlciBpbnNlcnRlZCBjYWxsYmFja1xuXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xudmFyIGluc2VydEFmdGVyID0gZnVuY3Rpb24gaW5zZXJ0QWZ0ZXIodGFyZ2V0RWwpIHtcbiAgaWYgKHRhcmdldEVsKSB7XG4gICAgdGFyZ2V0RWwgPSBub3JtYWxpemVFbGVtZW50QXJnKHRhcmdldEVsKTtcblxuICAgIGlmIChJUyQxLnF1aWNrRG9tRWwodGFyZ2V0RWwpKSB7XG4gICAgICB0YXJnZXRFbC5hZnRlcih0aGlzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG52YXIgYmVmb3JlID0gZnVuY3Rpb24gYmVmb3JlKHRhcmdldEVsKSB7XG4gIHZhciBteUluZGV4O1xuXG4gIGlmICh0YXJnZXRFbCAmJiB0aGlzLnBhcmVudCkge1xuICAgIHRhcmdldEVsID0gbm9ybWFsaXplRWxlbWVudEFyZyh0YXJnZXRFbCk7XG5cbiAgICBpZiAoSVMkMS5xdWlja0RvbUVsKHRhcmdldEVsKSkge1xuICAgICAgbXlJbmRleCA9IHRoaXMucGFyZW50Ll9jaGlsZHJlbi5pbmRleE9mKHRoaXMpO1xuXG4gICAgICB0aGlzLnBhcmVudC5fY2hpbGRyZW4uc3BsaWNlKG15SW5kZXgsIDAsIHRhcmdldEVsKTtcblxuICAgICAgdGhpcy5lbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0YXJnZXRFbC5lbCwgdGhpcy5lbCk7XG5cbiAgICAgIHRhcmdldEVsLl9yZWZyZXNoUGFyZW50KCk7IC8vIEZvcmNlIHJlLWZyZXNoIHRhcmdldEVsLl9wYXJlbnQgdmFsdWUgdG8gdHJpZ2dlciBpbnNlcnRlZCBjYWxsYmFja1xuXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xudmFyIGluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIGluc2VydEJlZm9yZSh0YXJnZXRFbCkge1xuICBpZiAodGFyZ2V0RWwpIHtcbiAgICB0YXJnZXRFbCA9IG5vcm1hbGl6ZUVsZW1lbnRBcmcodGFyZ2V0RWwpO1xuXG4gICAgaWYgKElTJDEucXVpY2tEb21FbCh0YXJnZXRFbCkpIHtcbiAgICAgIHRhcmdldEVsLmJlZm9yZSh0aGlzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG52YXIgZGV0YWNoID0gZnVuY3Rpb24gZGV0YWNoKCkge1xuICB2YXIgcmVmO1xuXG4gIGlmICgocmVmID0gdGhpcy5wYXJlbnQpICE9IG51bGwpIHtcbiAgICByZWYuX3JlbW92ZUNoaWxkKHRoaXMpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xudmFyIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgdmFyIGV2ZW50TmFtZTtcbiAgdGhpcy5kZXRhY2goKTtcbiAgdGhpcy5yZXNldFN0YXRlKCk7XG5cbiAgaWYgKHRoaXMuX2V2ZW50Q2FsbGJhY2tzKSB7XG4gICAgZm9yIChldmVudE5hbWUgaW4gdGhpcy5fZXZlbnRDYWxsYmFja3MpIHtcbiAgICAgIHRoaXMuX2V2ZW50Q2FsbGJhY2tzW2V2ZW50TmFtZV0ubGVuZ3RoID0gMDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG52YXIgZW1wdHkgPSBmdW5jdGlvbiBlbXB0eSgpIHtcbiAgdmFyIGNoaWxkLCBpLCBsZW4sIHJlZjtcbiAgcmVmID0gdGhpcy5jaGlsZHJlbi5zbGljZSgpO1xuXG4gIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGNoaWxkID0gcmVmW2ldO1xuXG4gICAgdGhpcy5fcmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xudmFyIHdyYXAgPSBmdW5jdGlvbiB3cmFwKHRhcmdldEVsKSB7XG4gIHZhciBjdXJyZW50UGFyZW50O1xuXG4gIGlmICh0YXJnZXRFbCkge1xuICAgIHRhcmdldEVsID0gbm9ybWFsaXplRWxlbWVudEFyZyh0YXJnZXRFbCk7XG4gICAgY3VycmVudFBhcmVudCA9IHRoaXMucGFyZW50O1xuXG4gICAgaWYgKElTJDEucXVpY2tEb21FbCh0YXJnZXRFbCkgJiYgdGFyZ2V0RWwgIT09IHRoaXMgJiYgdGFyZ2V0RWwgIT09IHRoaXMucGFyZW50KSB7XG4gICAgICBpZiAoY3VycmVudFBhcmVudCkge1xuICAgICAgICBjdXJyZW50UGFyZW50Ll9yZW1vdmVDaGlsZCh0aGlzLCAhdGFyZ2V0RWwucGFyZW50ID8gdGFyZ2V0RWwgOiB2b2lkIDApO1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRFbC5hcHBlbmQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xudmFyIHVud3JhcCA9IGZ1bmN0aW9uIHVud3JhcCgpIHtcbiAgdmFyIGdyYW5kUGFyZW50LCBwYXJlbnQsIHBhcmVudENoaWxkcmVuLCBwYXJlbnRTaWJsaW5nO1xuICBwYXJlbnQgPSB0aGlzLnBhcmVudDtcblxuICBpZiAocGFyZW50KSB7XG4gICAgcGFyZW50Q2hpbGRyZW4gPSBfcXVpY2tkb20uYmF0Y2gocGFyZW50LmNoaWxkcmVuKTtcbiAgICBwYXJlbnRTaWJsaW5nID0gcGFyZW50Lm5leHQ7XG4gICAgZ3JhbmRQYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuXG4gICAgaWYgKGdyYW5kUGFyZW50KSB7XG4gICAgICBwYXJlbnQuZGV0YWNoKCk7XG5cbiAgICAgIGlmIChwYXJlbnRTaWJsaW5nKSB7XG4gICAgICAgIHBhcmVudENoaWxkcmVuLmluc2VydEJlZm9yZShwYXJlbnRTaWJsaW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudENoaWxkcmVuLmFwcGVuZFRvKGdyYW5kUGFyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG52YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UodGFyZ2V0RWwpIHtcbiAgdmFyIHJlZjtcblxuICBpZiAodGFyZ2V0RWwpIHtcbiAgICB0YXJnZXRFbCA9IG5vcm1hbGl6ZUVsZW1lbnRBcmcodGFyZ2V0RWwpO1xuXG4gICAgaWYgKElTJDEucXVpY2tEb21FbCh0YXJnZXRFbCkgJiYgdGFyZ2V0RWwgIT09IHRoaXMpIHtcbiAgICAgIHRhcmdldEVsLmRldGFjaCgpO1xuXG4gICAgICBpZiAoKHJlZiA9IHRoaXMucGFyZW50KSAhPSBudWxsKSB7XG4gICAgICAgIHJlZi5fcmVtb3ZlQ2hpbGQodGhpcywgdGFyZ2V0RWwpO1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRFbC5fcmVmcmVzaFBhcmVudCgpOyAvLyBGb3JjZSByZS1mcmVzaCB0YXJnZXRFbC5fcGFyZW50IHZhbHVlIHRvIHRyaWdnZXIgaW5zZXJ0ZWQgY2FsbGJhY2tcblxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcbnZhciBoYXNDbGFzcyA9IGZ1bmN0aW9uIGhhc0NsYXNzKHRhcmdldCkge1xuICByZXR1cm4gaW5jbHVkZXModGhpcy5jbGFzc0xpc3QsIHRhcmdldCk7XG59O1xudmFyIGFkZENsYXNzID0gZnVuY3Rpb24gYWRkQ2xhc3ModGFyZ2V0KSB7XG4gIHZhciBjbGFzc0xpc3QsIHRhcmdldEluZGV4O1xuICBjbGFzc0xpc3QgPSB0aGlzLmNsYXNzTGlzdDtcbiAgdGFyZ2V0SW5kZXggPSBjbGFzc0xpc3QuaW5kZXhPZih0YXJnZXQpO1xuXG4gIGlmICh0YXJnZXRJbmRleCA9PT0gLTEpIHtcbiAgICBjbGFzc0xpc3QucHVzaCh0YXJnZXQpO1xuICAgIHRoaXMuY2xhc3NOYW1lID0gY2xhc3NMaXN0Lmxlbmd0aCA+IDEgPyBjbGFzc0xpc3Quam9pbignICcpIDogY2xhc3NMaXN0WzBdO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xudmFyIHJlbW92ZUNsYXNzID0gZnVuY3Rpb24gcmVtb3ZlQ2xhc3ModGFyZ2V0KSB7XG4gIHZhciBjbGFzc0xpc3QsIHRhcmdldEluZGV4O1xuICBjbGFzc0xpc3QgPSB0aGlzLmNsYXNzTGlzdDtcbiAgdGFyZ2V0SW5kZXggPSBjbGFzc0xpc3QuaW5kZXhPZih0YXJnZXQpO1xuXG4gIGlmICh0YXJnZXRJbmRleCAhPT0gLTEpIHtcbiAgICBjbGFzc0xpc3Quc3BsaWNlKHRhcmdldEluZGV4LCAxKTtcbiAgICB0aGlzLmNsYXNzTmFtZSA9IGNsYXNzTGlzdC5sZW5ndGggPyBjbGFzc0xpc3Quam9pbignICcpIDogJyc7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG52YXIgdG9nZ2xlQ2xhc3MgPSBmdW5jdGlvbiB0b2dnbGVDbGFzcyh0YXJnZXQpIHtcbiAgaWYgKHRoaXMuaGFzQ2xhc3ModGFyZ2V0KSkge1xuICAgIHRoaXMucmVtb3ZlQ2xhc3ModGFyZ2V0KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmFkZENsYXNzKHRhcmdldCk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG52YXIgc2V0UmVmID0gZnVuY3Rpb24gc2V0UmVmKHRhcmdldCkge1xuICB0aGlzLnJlZiA9IHRoaXMub3B0aW9ucy5yZWYgPSB0YXJnZXQ7XG4gIHRoaXMuYXR0cignZGF0YS1yZWYnLCB0YXJnZXQpO1xuICByZXR1cm4gdGhpcztcbn07XG52YXIgX3JlZnJlc2hQYXJlbnQgPSBmdW5jdGlvbiBfcmVmcmVzaFBhcmVudCgpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50O1xufTtcbnZhciBfcmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiBfcmVtb3ZlQ2hpbGQodGFyZ2V0Q2hpbGQsIHJlcGxhY2VtZW50Q2hpbGQpIHtcbiAgdmFyIGluZGV4T2ZDaGlsZDtcbiAgaW5kZXhPZkNoaWxkID0gdGhpcy5jaGlsZHJlbi5pbmRleE9mKHRhcmdldENoaWxkKTtcblxuICBpZiAoaW5kZXhPZkNoaWxkICE9PSAtMSkge1xuICAgIGlmIChyZXBsYWNlbWVudENoaWxkKSB7XG4gICAgICB0aGlzLmVsLnJlcGxhY2VDaGlsZChyZXBsYWNlbWVudENoaWxkLmVsLCB0YXJnZXRDaGlsZC5lbCk7XG5cbiAgICAgIHRoaXMuX2NoaWxkcmVuLnNwbGljZShpbmRleE9mQ2hpbGQsIDEsIHJlcGxhY2VtZW50Q2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVsLnJlbW92ZUNoaWxkKHRhcmdldENoaWxkLmVsKTtcblxuICAgICAgdGhpcy5fY2hpbGRyZW4uc3BsaWNlKGluZGV4T2ZDaGlsZCwgMSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uIChRdWlja0VsZW1lbnQpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUXVpY2tFbGVtZW50LnByb3RvdHlwZSwge1xuICAgICdodG1sJzoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLmlubmVySFRNTDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5pbm5lckhUTUwgPSBuZXdWYWx1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgICd0ZXh0Jzoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnRleHRDb250ZW50O1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnRleHRDb250ZW50ID0gbmV3VmFsdWU7XG4gICAgICB9XG4gICAgfSxcbiAgICAnY2xhc3NOYW1lJzoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLnN2Zykge1xuICAgICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2NsYXNzJykgfHwgJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmF3LmNsYXNzTmFtZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnN2Zykge1xuICAgICAgICAgIHJldHVybiB0aGlzLmF0dHIoJ2NsYXNzJywgbmV3VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJhdy5jbGFzc05hbWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgJ2NsYXNzTGlzdCc6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICB2YXIgbGlzdDtcbiAgICAgICAgbGlzdCA9IHRoaXMuY2xhc3NOYW1lLnNwbGl0KC9cXHMrLyk7XG5cbiAgICAgICAgaWYgKGxpc3RbbGlzdC5sZW5ndGggLSAxXSA9PT0gJycpIHtcbiAgICAgICAgICBsaXN0LnBvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3RbMF0gPT09ICcnKSB7XG4gICAgICAgICAgbGlzdC5zaGlmdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS50b1RlbXBsYXRlID0gdG9UZW1wbGF0ZTtcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5jbG9uZSA9IGNsb25lO1xuICBRdWlja0VsZW1lbnQucHJvdG90eXBlLmFwcGVuZCA9IGFwcGVuZDtcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5hcHBlbmRUbyA9IGFwcGVuZFRvO1xuICBRdWlja0VsZW1lbnQucHJvdG90eXBlLnByZXBlbmQgPSBwcmVwZW5kO1xuICBRdWlja0VsZW1lbnQucHJvdG90eXBlLnByZXBlbmRUbyA9IHByZXBlbmRUbztcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5hZnRlciA9IGFmdGVyO1xuICBRdWlja0VsZW1lbnQucHJvdG90eXBlLmluc2VydEFmdGVyID0gaW5zZXJ0QWZ0ZXI7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUuYmVmb3JlID0gYmVmb3JlO1xuICBRdWlja0VsZW1lbnQucHJvdG90eXBlLmluc2VydEJlZm9yZSA9IGluc2VydEJlZm9yZTtcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5kZXRhY2ggPSBkZXRhY2g7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlID0gcmVtb3ZlO1xuICBRdWlja0VsZW1lbnQucHJvdG90eXBlLmVtcHR5ID0gZW1wdHk7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUud3JhcCA9IHdyYXA7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUudW53cmFwID0gdW53cmFwO1xuICBRdWlja0VsZW1lbnQucHJvdG90eXBlLnJlcGxhY2UgPSByZXBsYWNlO1xuICBRdWlja0VsZW1lbnQucHJvdG90eXBlLmhhc0NsYXNzID0gaGFzQ2xhc3M7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUuYWRkQ2xhc3MgPSBhZGRDbGFzcztcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVDbGFzcyA9IHJlbW92ZUNsYXNzO1xuICBRdWlja0VsZW1lbnQucHJvdG90eXBlLnRvZ2dsZUNsYXNzID0gdG9nZ2xlQ2xhc3M7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUuc2V0UmVmID0gc2V0UmVmO1xuICBRdWlja0VsZW1lbnQucHJvdG90eXBlLl9yZWZyZXNoUGFyZW50ID0gX3JlZnJlc2hQYXJlbnQ7XG4gIHJldHVybiBRdWlja0VsZW1lbnQucHJvdG90eXBlLl9yZW1vdmVDaGlsZCA9IF9yZW1vdmVDaGlsZDtcbn12YXIgdXBkYXRlT3B0aW9ucyA9IGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMob3B0aW9ucykge1xuICBpZiAoSVMkMS5vYmplY3Qob3B0aW9ucykpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgdGhpcy5fbm9ybWFsaXplT3B0aW9ucygpO1xuXG4gICAgdGhpcy5fYXBwbHlPcHRpb25zKHRoaXMub3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG52YXIgdXBkYXRlU3RhdGVTdHlsZXMgPSBmdW5jdGlvbiB1cGRhdGVTdGF0ZVN0eWxlcyhzdHlsZXMpIHtcbiAgdmFyIGksIGxlbiwgcGFyc2VkLCBzdGF0ZSwgdXBkYXRlZFN0YXRlcztcblxuICBpZiAoSVMkMS5vYmplY3RQbGFpbihzdHlsZXMpKSB7XG4gICAgZXh0ZW5kLmRlZXAuY29uY2F0KHRoaXMsIHBhcnNlZCA9IHRoaXMuX3BhcnNlU3R5bGVzKHN0eWxlcykpO1xuXG4gICAgaWYgKHBhcnNlZC5fc3R5bGVzKSB7XG4gICAgICB1cGRhdGVkU3RhdGVzID0gT2JqZWN0LmtleXMocGFyc2VkLl9zdHlsZXMpO1xuXG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSB1cGRhdGVkU3RhdGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHN0YXRlID0gdXBkYXRlZFN0YXRlc1tpXTtcblxuICAgICAgICBpZiAodGhpcy5zdGF0ZShzdGF0ZSkgfHwgc3RhdGUgPT09ICdiYXNlJykge1xuICAgICAgICAgIHRoaXMuX2FwcGx5UmVnaXN0ZXJlZFN0eWxlKHRoaXMuX3N0eWxlc1tzdGF0ZV0sIHRoaXMuX2dldEFjdGl2ZVN0YXRlcyhzdGF0ZSksIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcbnZhciB1cGRhdGVTdGF0ZVRleHRzID0gZnVuY3Rpb24gdXBkYXRlU3RhdGVUZXh0cyh0ZXh0cykge1xuICB2YXIgcGFyc2VkO1xuXG4gIGlmIChJUyQxLm9iamVjdFBsYWluKHRleHRzKSkge1xuICAgIGV4dGVuZC5kZWVwLmNvbmNhdCh0aGlzLCBwYXJzZWQgPSB0aGlzLl9wYXJzZVRleHRzKHRleHRzKSk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG52YXIgYXBwbHlEYXRhID0gZnVuY3Rpb24gYXBwbHlEYXRhKGRhdGEsIHBhc3NUaHJvdWdoKSB7XG4gIHZhciBjaGlsZCwgY29tcHV0ZXJzLCBkZWZhdWx0cywgaSwgaiwga2V5LCBrZXlzLCBsZW4sIGxlbjEsIHJlZjtcblxuICBpZiAodGhpcy5vcHRpb25zLnBhc3NEYXRhVG9DaGlsZHJlbiAmJiB0aGlzLl9jaGlsZHJlbi5sZW5ndGggJiYgKHBhc3NUaHJvdWdoICE9IG51bGwgPyBwYXNzVGhyb3VnaCA6IHBhc3NUaHJvdWdoID0gdHJ1ZSkpIHtcbiAgICByZWYgPSB0aGlzLl9jaGlsZHJlbjtcblxuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2hpbGQgPSByZWZbaV07XG4gICAgICBjaGlsZC5hcHBseURhdGEoZGF0YSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNvbXB1dGVycyA9IHRoaXMub3B0aW9ucy5jb21wdXRlcnMpIHtcbiAgICBkZWZhdWx0cyA9IHRoaXMub3B0aW9ucy5kZWZhdWx0cztcbiAgICBrZXlzID0gT2JqZWN0LmtleXMoY29tcHV0ZXJzKTtcblxuICAgIGZvciAoaiA9IDAsIGxlbjEgPSBrZXlzLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAga2V5ID0ga2V5c1tqXTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5pbnZva2VDb21wdXRlcnNPbmNlKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbnZva2VkQ29tcHV0ZXJzW2tleV0pIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2ludm9rZWRDb21wdXRlcnNba2V5XSA9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhICYmIGRhdGEuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICB0aGlzLl9ydW5Db21wdXRlcihrZXksIGRhdGFba2V5XSwgZGF0YSk7XG4gICAgICB9IGVsc2UgaWYgKGRlZmF1bHRzICYmIGRlZmF1bHRzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgdGhpcy5fcnVuQ29tcHV0ZXIoa2V5LCBkZWZhdWx0c1trZXldLCBkYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG52YXIgX3J1bkNvbXB1dGVyID0gZnVuY3Rpb24gX3J1bkNvbXB1dGVyKGNvbXB1dGVyLCBhcmcsIGRhdGEpIHtcbiAgcmV0dXJuIHRoaXMub3B0aW9ucy5jb21wdXRlcnNbY29tcHV0ZXJdLmNhbGwodGhpcywgYXJnLCBkYXRhKTtcbn07XG5mdW5jdGlvbiBhcHBsaWNhdGlvbiAoUXVpY2tFbGVtZW50KSB7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUudXBkYXRlT3B0aW9ucyA9IHVwZGF0ZU9wdGlvbnM7XG4gIFF1aWNrRWxlbWVudC5wcm90b3R5cGUudXBkYXRlU3RhdGVTdHlsZXMgPSB1cGRhdGVTdGF0ZVN0eWxlcztcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS51cGRhdGVTdGF0ZVRleHRzID0gdXBkYXRlU3RhdGVUZXh0cztcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5hcHBseURhdGEgPSBhcHBseURhdGE7XG4gIHJldHVybiBRdWlja0VsZW1lbnQucHJvdG90eXBlLl9ydW5Db21wdXRlciA9IF9ydW5Db21wdXRlcjtcbn12YXIgYXR0ciA9IGZ1bmN0aW9uIGF0dHIodGFyZ2V0LCBuZXdWYWx1ZSkge1xuICB2YXIgaSwga2V5LCBrZXlzO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbC5nZXRBdHRyaWJ1dGUodGFyZ2V0KTtcbiAgICB9XG5cbiAgICBpZiAoSVMkMS5vYmplY3QodGFyZ2V0KSkge1xuICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHRhcmdldCk7XG4gICAgICBpID0gLTE7XG5cbiAgICAgIHdoaWxlIChrZXkgPSBrZXlzWysraV0pIHtcbiAgICAgICAgdGhpcy5hdHRyKGtleSwgdGFyZ2V0W2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChuZXdWYWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0aGlzLmVsLnJlbW92ZUF0dHJpYnV0ZSh0YXJnZXQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZWwuc2V0QXR0cmlidXRlKHRhcmdldCwgbmV3VmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xudmFyIHByb3AgPSBmdW5jdGlvbiBwcm9wKHRhcmdldCwgbmV3VmFsdWUpIHtcbiAgdmFyIGksIGtleSwga2V5cztcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHRoaXMuZWxbdGFyZ2V0XTtcbiAgICB9XG5cbiAgICBpZiAoSVMkMS5vYmplY3QodGFyZ2V0KSkge1xuICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHRhcmdldCk7XG4gICAgICBpID0gLTE7XG5cbiAgICAgIHdoaWxlIChrZXkgPSBrZXlzWysraV0pIHtcbiAgICAgICAgdGhpcy5wcm9wKGtleSwgdGFyZ2V0W2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLmVsW3RhcmdldF0gPSBuZXdWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcbmZ1bmN0aW9uIGF0dHJpYnV0ZXNBbmRQcm9wZXJ0aWVzIChRdWlja0VsZW1lbnQpIHtcbiAgUXVpY2tFbGVtZW50LnByb3RvdHlwZS5hdHRyID0gYXR0cjtcbiAgcmV0dXJuIFF1aWNrRWxlbWVudC5wcm90b3R5cGUucHJvcCA9IHByb3A7XG59dmFyIFF1aWNrRWxlbWVudCQxLCBzdmdOYW1lc3BhY2U7XG5zdmdOYW1lc3BhY2UgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xudmFyIFF1aWNrRWxlbWVudCQyID0gUXVpY2tFbGVtZW50JDEgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBRdWlja0VsZW1lbnQgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBRdWlja0VsZW1lbnQodHlwZSwgb3B0aW9ucykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFF1aWNrRWxlbWVudCk7XG5cbiAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgUXVpY2tFbGVtZW50LmNvdW50Kys7XG5cbiAgICAgIGlmICh0aGlzLnR5cGVbMF0gPT09ICcqJykge1xuICAgICAgICB0aGlzLnN2ZyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZWwgPSB0aGlzLm9wdGlvbnMuZXhpc3RpbmcgfHwgKHRoaXMudHlwZSA9PT0gJ3RleHQnID8gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodHlwZW9mIHRoaXMub3B0aW9ucy50ZXh0ID09PSAnc3RyaW5nJyA/IHRoaXMub3B0aW9ucy50ZXh0IDogJycpIDogdGhpcy5zdmcgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTmFtZXNwYWNlLCB0aGlzLnR5cGUuc2xpY2UoMSkpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLnR5cGUpKTtcblxuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kID0gdGhpcy5wcmVwZW5kID0gdGhpcy5hdHRyID0gZnVuY3Rpb24gKCkge307XG4gICAgICB9IC8vIEBfdGV4dHMgPSB7fSAjIGRlZmluZWQgY29uZGl0aW9uYWxseVxuXG5cbiAgICAgIHRoaXMuX3BhcmVudCA9IG51bGw7XG4gICAgICB0aGlzLl9zdHlsZXMgPSB7fTtcbiAgICAgIHRoaXMuX3N0YXRlID0gW107XG4gICAgICB0aGlzLl9jaGlsZHJlbiA9IFtdOyAvLyBAX3Byb3ZpZGVkU3RhdGVzID0gW11cdFx0XHRcdCMgZGVmaW5lZCBjb25kaXRpb25hbGx5XG4gICAgICAvLyBAX3Byb3ZpZGVkU3RhdGVzU2hhcmVkID0gW11cdFx0IyBkZWZpbmVkIGNvbmRpdGlvbmFsbHlcbiAgICAgIC8vIEBfZXZlbnRDYWxsYmFja3MgPSB7X19yZWZzOnt9fVx0IyBkZWZpbmVkIGNvbmRpdGlvbmFsbHlcblxuICAgICAgdGhpcy5fbm9ybWFsaXplT3B0aW9ucygpO1xuXG4gICAgICB0aGlzLl9hcHBseU9wdGlvbnMoKTtcblxuICAgICAgdGhpcy5fYXR0YWNoU3RhdGVFdmVudHMoKTtcblxuICAgICAgdGhpcy5fcHJveHlQYXJlbnQoKTtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5leGlzdGluZykge1xuICAgICAgICB0aGlzLl9yZWZyZXNoUGFyZW50KCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZWwuX3F1aWNrRWxlbWVudCA9IHRoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFF1aWNrRWxlbWVudCwgW3tcbiAgICAgIGtleTogXCJ0b0pTT05cIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgIHZhciBjaGlsZCwgY2hpbGRyZW4sIGksIGxlbiwgb3V0cHV0O1xuICAgICAgICBvdXRwdXQgPSBbdGhpcy50eXBlLCBleHRlbmQuY2xvbmUua2V5cyhlbGVtZW50KSh0aGlzLm9wdGlvbnMpXTtcbiAgICAgICAgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICBvdXRwdXQucHVzaChjaGlsZC50b0pTT04oKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBRdWlja0VsZW1lbnQ7XG4gIH0oKTtcbiAgUXVpY2tFbGVtZW50LmNvdW50ID0gMDtcbiAgcmV0dXJuIFF1aWNrRWxlbWVudDtcbn0uY2FsbCh1bmRlZmluZWQpO1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuaWYgKFF1aWNrRWxlbWVudCQxLm5hbWUgPT0gbnVsbCkge1xuICBRdWlja0VsZW1lbnQkMS5uYW1lID0gJ1F1aWNrRWxlbWVudCc7XG59XG5pbml0JDEoUXVpY2tFbGVtZW50JDEpO1xuYWxpYXNlcyhRdWlja0VsZW1lbnQkMSk7XG50cmF2ZXJzaW5nKFF1aWNrRWxlbWVudCQxKTtcbmV2ZW50cyhRdWlja0VsZW1lbnQkMSk7XG5zdGF0ZSQxKFF1aWNrRWxlbWVudCQxKTtcbnN0eWxlJDEoUXVpY2tFbGVtZW50JDEpO1xubWFuaXB1bGF0aW9uKFF1aWNrRWxlbWVudCQxKTtcbmFwcGxpY2F0aW9uKFF1aWNrRWxlbWVudCQxKTtcbmF0dHJpYnV0ZXNBbmRQcm9wZXJ0aWVzKFF1aWNrRWxlbWVudCQxKTt2YXIgc2NoZW1hID0ge1xuICB0eXBlOiAnZGl2JyxcbiAgcmVmOiB2b2lkIDAsXG4gIG9wdGlvbnM6IHt9LFxuICBjaGlsZHJlbjogW11cbn07XG52YXIgbWF0Y2hlc1NjaGVtYSA9IGZ1bmN0aW9uIG1hdGNoZXNTY2hlbWEob2JqZWN0KSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqZWN0LnR5cGUgIT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBvYmplY3QucmVmICE9PSAndW5kZWZpbmVkJyB8fCB0eXBlb2Ygb2JqZWN0Lm9wdGlvbnMgIT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBvYmplY3QuY2hpbGRyZW4gIT09ICd1bmRlZmluZWQnO1xufTt2YXIgUEFSU0VfRVJST1JfUFJFRklYLCBwYXJzZVRyZWU7XG5QQVJTRV9FUlJPUl9QUkVGSVggPSAnVGVtcGxhdGUgUGFyc2UgRXJyb3I6IGV4cGVjdGVkJztcbnZhciBwYXJzZVRyZWUkMSA9IHBhcnNlVHJlZSA9IGZ1bmN0aW9uIHBhcnNlVHJlZSh0cmVlLCBwYXJzZUNoaWxkcmVuKSB7XG4gIHZhciBvdXRwdXQ7XG5cbiAgc3dpdGNoIChmYWxzZSkge1xuICAgIGNhc2UgIUlTJDEuYXJyYXkodHJlZSk6XG4gICAgICBvdXRwdXQgPSB7fTtcblxuICAgICAgaWYgKCFJUyQxLnN0cmluZyh0cmVlWzBdKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIi5jb25jYXQoUEFSU0VfRVJST1JfUFJFRklYLCBcIiBzdHJpbmcgZm9yICd0eXBlJywgZ290ICdcIikuY29uY2F0KFN0cmluZyh0cmVlWzBdKSwgXCInXCIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dC50eXBlID0gdHJlZVswXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMSAmJiAhSVMkMS5vYmplY3QodHJlZVsxXSkgJiYgdHJlZVsxXSAhPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcIi5jb25jYXQoUEFSU0VfRVJST1JfUFJFRklYLCBcIiBvYmplY3QgZm9yICdvcHRpb25zJywgZ290ICdcIikuY29uY2F0KFN0cmluZyh0cmVlWzFdKSwgXCInXCIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dC5vcHRpb25zID0gdHJlZVsxXSA/IGV4dGVuZC5kZWVwLmNsb25lKHRyZWVbMV0pIDogc2NoZW1hLm9wdGlvbnM7XG5cbiAgICAgICAgaWYgKHRyZWVbMV0pIHtcbiAgICAgICAgICBvdXRwdXQucmVmID0gdHJlZVsxXS5pZCB8fCB0cmVlWzFdLnJlZjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvdXRwdXQuY2hpbGRyZW4gPSB0cmVlLnNsaWNlKDIpO1xuXG4gICAgICBpZiAocGFyc2VDaGlsZHJlbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID09PSAzICYmIElTJDEub2JqZWN0UGxhaW4odHJlZVsyXSkgJiYgIUlTJDEudGVtcGxhdGUodHJlZVsyXSkpIHtcbiAgICAgICAgICBvdXRwdXQuY2hpbGRyZW4gPSB0cmVlWzJdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXQuY2hpbGRyZW4gPSBvdXRwdXQuY2hpbGRyZW4ubWFwKHF1aWNrZG9tLnRlbXBsYXRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dHB1dDtcblxuICAgIGNhc2UgIShJUyQxLnN0cmluZyh0cmVlKSB8fCBJUyQxLmRvbVRleHQodHJlZSkpOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgdGV4dDogdHJlZS50ZXh0Q29udGVudCB8fCB0cmVlXG4gICAgICAgIH0sXG4gICAgICAgIGNoaWxkcmVuOiBzY2hlbWEuY2hpbGRyZW5cbiAgICAgIH07XG5cbiAgICBjYXNlICFJUyQxLmRvbUVsKHRyZWUpOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogdHJlZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICByZWY6IHRyZWUuaWQsXG4gICAgICAgIG9wdGlvbnM6IGV4dGVuZC5jbG9uZS5rZXlzKHRlbXBsYXRlKSh0cmVlKSxcbiAgICAgICAgY2hpbGRyZW46IHNjaGVtYS5jaGlsZHJlbi5tYXAuY2FsbCh0cmVlLmNoaWxkTm9kZXMsIHF1aWNrZG9tLnRlbXBsYXRlKVxuICAgICAgfTtcblxuICAgIGNhc2UgIUlTJDEucXVpY2tEb21FbCh0cmVlKTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHRyZWUudHlwZSxcbiAgICAgICAgcmVmOiB0cmVlLnJlZixcbiAgICAgICAgb3B0aW9uczogZXh0ZW5kLmNsb25lLmRlZXAubm90S2V5cyhbJ3JlbGF0ZWRJbnN0YW5jZScsICdyZWxhdGVkJ10pKHRyZWUub3B0aW9ucyksXG4gICAgICAgIGNoaWxkcmVuOiB0cmVlLmNoaWxkcmVuLm1hcChxdWlja2RvbS50ZW1wbGF0ZSlcbiAgICAgIH07XG5cbiAgICBjYXNlICFJUyQxLnRlbXBsYXRlKHRyZWUpOlxuICAgICAgcmV0dXJuIHRyZWU7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiXCIuY29uY2F0KFBBUlNFX0VSUk9SX1BSRUZJWCwgXCIgKGFycmF5IHx8IHN0cmluZyB8fCBkb21FbCB8fCBxdWlja0RvbUVsIHx8IHRlbXBsYXRlKSwgZ290IFwiKS5jb25jYXQoU3RyaW5nKHRyZWUpKSk7XG4gIH1cbn07dmFyIE5PVF9ERUVQX0tFWVMsIE5PVF9LRVlTLCBfZXh0ZW5kQnlSZWYsIGV4dGVuZFRlbXBsYXRlO1xuTk9UX0RFRVBfS0VZUyA9IFsncmVsYXRlZEluc3RhbmNlJywgJ3JlbGF0ZWQnLCAnZGF0YSddO1xuTk9UX0tFWVMgPSBbJ2NoaWxkcmVuJywgJ19jaGlsZFJlZnMnXTtcbnZhciBleHRlbmRUZW1wbGF0ZSQxID0gZXh0ZW5kVGVtcGxhdGUgPSBmdW5jdGlvbiBleHRlbmRUZW1wbGF0ZShjdXJyZW50T3B0cywgbmV3T3B0cywgZ2xvYmFsT3B0cykge1xuICB2YXIgY3VycmVudENoaWxkLCBjdXJyZW50Q2hpbGRyZW4sIGdsb2JhbE9wdHNUcmFuc2Zvcm0sIGluZGV4LCBtYXhMZW5ndGgsIG5lZWRzVGVtcGxhdGVXcmFwLCBuZXdDaGlsZCwgbmV3Q2hpbGRQcm9jZXNzZWQsIG5ld0NoaWxkcmVuLCBub0NoYW5nZXMsIG91dHB1dCwgcmVmLCByZW1haW5pbmdOZXdDaGlsZHJlbjtcblxuICBpZiAoZ2xvYmFsT3B0cykge1xuICAgIGdsb2JhbE9wdHNUcmFuc2Zvcm0gPSB7XG4gICAgICBvcHRpb25zOiBmdW5jdGlvbiBvcHRpb25zKG9wdHMpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuZChvcHRzLCBnbG9iYWxPcHRzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgaWYgKElTJDEuYXJyYXkobmV3T3B0cykpIHtcbiAgICBuZXdPcHRzID0gcGFyc2VUcmVlJDEobmV3T3B0cywgZmFsc2UpO1xuICB9IGVsc2UgaWYgKG5ld09wdHMgJiYgIW1hdGNoZXNTY2hlbWEobmV3T3B0cykpIHtcbiAgICBuZXdPcHRzID0ge1xuICAgICAgb3B0aW9uczogbmV3T3B0c1xuICAgIH07XG4gIH1cblxuICBvdXRwdXQgPSBleHRlbmQuZGVlcC5udWxsRGVsZXRlcy5ub3RLZXlzKE5PVF9LRVlTKS5ub3REZWVwKE5PVF9ERUVQX0tFWVMpLnRyYW5zZm9ybShnbG9iYWxPcHRzVHJhbnNmb3JtKS5jbG9uZShjdXJyZW50T3B0cywgbmV3T3B0cyk7XG4gIGN1cnJlbnRDaGlsZHJlbiA9IGN1cnJlbnRPcHRzLmNoaWxkcmVuO1xuICBuZXdDaGlsZHJlbiA9IChuZXdPcHRzICE9IG51bGwgPyBuZXdPcHRzLmNoaWxkcmVuIDogdm9pZCAwKSB8fCBbXTtcbiAgb3V0cHV0LmNoaWxkcmVuID0gW107XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cbiAgaWYgKElTJDEuYXJyYXkobmV3Q2hpbGRyZW4pKSB7XG4gICAgbWF4TGVuZ3RoID0gTWF0aC5tYXgoY3VycmVudENoaWxkcmVuLmxlbmd0aCwgbmV3Q2hpbGRyZW4ubGVuZ3RoKTtcbiAgICBpbmRleCA9IC0xO1xuXG4gICAgd2hpbGUgKCsraW5kZXggIT09IG1heExlbmd0aCkge1xuICAgICAgbmVlZHNUZW1wbGF0ZVdyYXAgPSBub0NoYW5nZXMgPSBmYWxzZTtcbiAgICAgIGN1cnJlbnRDaGlsZCA9IGN1cnJlbnRDaGlsZHJlbltpbmRleF07XG4gICAgICBuZXdDaGlsZCA9IG5ld0NoaWxkcmVuW2luZGV4XTtcblxuICAgICAgbmV3Q2hpbGRQcm9jZXNzZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN3aXRjaCAoZmFsc2UpIHtcbiAgICAgICAgICBjYXNlICFJUyQxLnRlbXBsYXRlKG5ld0NoaWxkKTpcbiAgICAgICAgICAgIHJldHVybiBuZXdDaGlsZDtcblxuICAgICAgICAgIGNhc2UgIUlTJDEuYXJyYXkobmV3Q2hpbGQpOlxuICAgICAgICAgICAgcmV0dXJuIG5lZWRzVGVtcGxhdGVXcmFwID0gcGFyc2VUcmVlJDEobmV3Q2hpbGQpO1xuXG4gICAgICAgICAgY2FzZSAhSVMkMS5zdHJpbmcobmV3Q2hpbGQpOlxuICAgICAgICAgICAgcmV0dXJuIG5lZWRzVGVtcGxhdGVXcmFwID0ge1xuICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBuZXdDaGlsZFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgY2FzZSAhKCFuZXdDaGlsZCAmJiAhZ2xvYmFsT3B0cyk6XG4gICAgICAgICAgICByZXR1cm4gbm9DaGFuZ2VzID0gdHJ1ZTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbmVlZHNUZW1wbGF0ZVdyYXAgPSBuZXdDaGlsZCB8fCB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KCk7XG5cbiAgICAgIGlmIChub0NoYW5nZXMpIHtcbiAgICAgICAgbmV3Q2hpbGRQcm9jZXNzZWQgPSBjdXJyZW50Q2hpbGQ7XG4gICAgICB9IGVsc2UgaWYgKG5lZWRzVGVtcGxhdGVXcmFwKSB7XG4gICAgICAgIG5ld0NoaWxkUHJvY2Vzc2VkID0gY3VycmVudENoaWxkID8gY3VycmVudENoaWxkLmV4dGVuZChuZXdDaGlsZFByb2Nlc3NlZCwgZ2xvYmFsT3B0cykgOiBuZXcgUXVpY2tUZW1wbGF0ZSQxKGV4dGVuZC5jbG9uZShzY2hlbWEsIG5ld0NoaWxkUHJvY2Vzc2VkKSk7XG4gICAgICB9XG5cbiAgICAgIG91dHB1dC5jaGlsZHJlbi5wdXNoKG5ld0NoaWxkUHJvY2Vzc2VkKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoSVMkMS5vYmplY3QobmV3Q2hpbGRyZW4pKSB7XG4gICAgbmV3Q2hpbGRyZW4gPSBleHRlbmQuYWxsb3dOdWxsLmNsb25lKG5ld0NoaWxkcmVuKTtcbiAgICBvdXRwdXQuY2hpbGRyZW4gPSBfZXh0ZW5kQnlSZWYobmV3Q2hpbGRyZW4sIGN1cnJlbnRDaGlsZHJlbiwgZ2xvYmFsT3B0cyk7XG4gICAgcmVtYWluaW5nTmV3Q2hpbGRyZW4gPSBuZXdDaGlsZHJlbjtcblxuICAgIGZvciAocmVmIGluIHJlbWFpbmluZ05ld0NoaWxkcmVuKSB7XG4gICAgICBuZXdDaGlsZCA9IHJlbWFpbmluZ05ld0NoaWxkcmVuW3JlZl07XG4gICAgICBuZXdDaGlsZFByb2Nlc3NlZCA9IElTJDEub2JqZWN0UGxhaW4obmV3Q2hpbGQpICYmICFJUyQxLnRlbXBsYXRlKG5ld0NoaWxkKSA/IG5ld0NoaWxkIDogcGFyc2VUcmVlJDEobmV3Q2hpbGQpO1xuICAgICAgb3V0cHV0LmNoaWxkcmVuLnB1c2gobmV3IFF1aWNrVGVtcGxhdGUkMShuZXdDaGlsZFByb2Nlc3NlZCkpO1xuICAgICAgZGVsZXRlIHJlbWFpbmluZ05ld0NoaWxkcmVuW3JlZl07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cbl9leHRlbmRCeVJlZiA9IGZ1bmN0aW9uIGV4dGVuZEJ5UmVmKG5ld0NoaWxkcmVuUmVmcywgY3VycmVudENoaWxkcmVuLCBnbG9iYWxPcHRzKSB7XG4gIHZhciBjdXJyZW50Q2hpbGQsIGksIGxlbiwgbmV3Q2hpbGQsIG5ld0NoaWxkUHJvY2Vzc2VkLCBvdXRwdXQ7XG5cbiAgaWYgKCFjdXJyZW50Q2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGN1cnJlbnRDaGlsZHJlbjtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBbXTtcblxuICAgIGZvciAoaSA9IDAsIGxlbiA9IGN1cnJlbnRDaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY3VycmVudENoaWxkID0gY3VycmVudENoaWxkcmVuW2ldO1xuICAgICAgbmV3Q2hpbGQgPSBuZXdDaGlsZHJlblJlZnNbY3VycmVudENoaWxkLnJlZl07XG5cbiAgICAgIGlmIChuZXdDaGlsZCkge1xuICAgICAgICBuZXdDaGlsZFByb2Nlc3NlZCA9IGN1cnJlbnRDaGlsZC5leHRlbmQobmV3Q2hpbGQsIGdsb2JhbE9wdHMpO1xuICAgICAgICBkZWxldGUgbmV3Q2hpbGRyZW5SZWZzW2N1cnJlbnRDaGlsZC5yZWZdO1xuICAgICAgfSBlbHNlIGlmIChuZXdDaGlsZCA9PT0gbnVsbCkge1xuICAgICAgICBkZWxldGUgbmV3Q2hpbGRyZW5SZWZzW2N1cnJlbnRDaGlsZC5yZWZdO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0NoaWxkUHJvY2Vzc2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN3aXRjaCAoZmFsc2UpIHtcbiAgICAgICAgICAgIGNhc2UgIWdsb2JhbE9wdHM6XG4gICAgICAgICAgICAgIHJldHVybiBjdXJyZW50Q2hpbGQuZXh0ZW5kKG51bGwsIGdsb2JhbE9wdHMpO1xuXG4gICAgICAgICAgICBjYXNlICFPYmplY3Qua2V5cyhuZXdDaGlsZHJlblJlZnMpLmxlbmd0aDpcbiAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRDaGlsZC5leHRlbmQoKTtcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRDaGlsZDtcbiAgICAgICAgICB9XG4gICAgICAgIH0oKTtcbiAgICAgIH1cblxuICAgICAgbmV3Q2hpbGRQcm9jZXNzZWQuY2hpbGRyZW4gPSBfZXh0ZW5kQnlSZWYobmV3Q2hpbGRyZW5SZWZzLCBuZXdDaGlsZFByb2Nlc3NlZC5jaGlsZHJlbik7XG4gICAgICBvdXRwdXQucHVzaChuZXdDaGlsZFByb2Nlc3NlZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfVxufTt2YXIgUXVpY2tUZW1wbGF0ZTtcbnZhciBRdWlja1RlbXBsYXRlJDEgPSBRdWlja1RlbXBsYXRlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUXVpY2tUZW1wbGF0ZShjb25maWcsIGlzVHJlZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBRdWlja1RlbXBsYXRlKTtcblxuICAgIGlmIChJUyQxLnRlbXBsYXRlKGNvbmZpZykpIHtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgY29uZmlnID0gaXNUcmVlID8gcGFyc2VUcmVlJDEoY29uZmlnKSA6IGNvbmZpZztcbiAgICBleHRlbmQodGhpcywgY29uZmlnKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhRdWlja1RlbXBsYXRlLCBbe1xuICAgIGtleTogXCJleHRlbmRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXh0ZW5kJCQxKG5ld1ZhbHVlcywgZ2xvYmFsT3B0cykge1xuICAgICAgcmV0dXJuIG5ldyBRdWlja1RlbXBsYXRlKGV4dGVuZFRlbXBsYXRlJDEodGhpcywgbmV3VmFsdWVzLCBnbG9iYWxPcHRzKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNwYXduXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNwYXduKG5ld1ZhbHVlcywgZ2xvYmFsT3B0cywgZGF0YSkge1xuICAgICAgdmFyIGNoaWxkLCBjaGlsZERhdGEsIGNoaWxkcmVuLCBlbGVtZW50LCBpLCBsZW4sIG9wdGlvbnMsIHR5cGU7XG5cbiAgICAgIGlmIChuZXdWYWx1ZXMgJiYgbmV3VmFsdWVzLmRhdGEpIHtcbiAgICAgICAgZGF0YSA9IG5ld1ZhbHVlcy5kYXRhO1xuXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhuZXdWYWx1ZXMpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIG5ld1ZhbHVlcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG5ld1ZhbHVlcyB8fCBnbG9iYWxPcHRzKSB7XG4gICAgICAgIHZhciBfZXh0ZW5kVGVtcGxhdGUgPSBleHRlbmRUZW1wbGF0ZSQxKHRoaXMsIG5ld1ZhbHVlcywgZ2xvYmFsT3B0cyk7XG5cbiAgICAgICAgb3B0aW9ucyA9IF9leHRlbmRUZW1wbGF0ZS5vcHRpb25zO1xuICAgICAgICBjaGlsZHJlbiA9IF9leHRlbmRUZW1wbGF0ZS5jaGlsZHJlbjtcbiAgICAgICAgdHlwZSA9IF9leHRlbmRUZW1wbGF0ZS50eXBlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgICB0eXBlID0gdGhpcy50eXBlO1xuICAgICAgICBvcHRpb25zID0gZXh0ZW5kLmNsb25lKG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50ID0gX3F1aWNrZG9tLmNyZWF0ZShbdHlwZSwgb3B0aW9uc10pO1xuXG4gICAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgY2hpbGREYXRhID0gb3B0aW9ucy5wYXNzRGF0YVRvQ2hpbGRyZW4gPyBkYXRhIHx8IG9wdGlvbnMuZGF0YSA6IHZvaWQgMDtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgZWxlbWVudC5hcHBlbmQoY2hpbGQuc3Bhd24obnVsbCwgbnVsbCwgY2hpbGREYXRhKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5fcG9zdENyZWF0aW9uKGRhdGEpO1xuXG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUXVpY2tUZW1wbGF0ZTtcbn0oKTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cbmlmIChRdWlja1RlbXBsYXRlLm5hbWUgPT0gbnVsbCkge1xuICBRdWlja1RlbXBsYXRlLm5hbWUgPSAnUXVpY2tUZW1wbGF0ZSc7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShRdWlja1RlbXBsYXRlLnByb3RvdHlwZSwgJ2NoaWxkJywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2hpbGRSZWZzIHx8IF9nZXRDaGlsZFJlZnModGhpcyk7XG4gIH1cbn0pO1xuXG5fcXVpY2tkb20udGVtcGxhdGUgPSBmdW5jdGlvbiAodHJlZSkge1xuICByZXR1cm4gbmV3IFF1aWNrVGVtcGxhdGUodHJlZSwgdHJ1ZSk7XG59O1xuXG5fcXVpY2tkb20uaXNUZW1wbGF0ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgcmV0dXJuIElTJDEudGVtcGxhdGUodGFyZ2V0KTtcbn07dmFyIFF1aWNrQmF0Y2g7XG52YXIgUXVpY2tCYXRjaCQxID0gUXVpY2tCYXRjaCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFF1aWNrQmF0Y2goZWxlbWVudHMsIHJldHVyblJlc3VsdHMxKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFF1aWNrQmF0Y2gpO1xuXG4gICAgdGhpcy5yZXR1cm5SZXN1bHRzID0gcmV0dXJuUmVzdWx0czE7XG4gICAgdGhpcy5lbGVtZW50cyA9IGVsZW1lbnRzLm1hcChmdW5jdGlvbiAoZWwpIHtcbiAgICAgIHJldHVybiBfcXVpY2tkb20oZWwpO1xuICAgIH0pO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFF1aWNrQmF0Y2gsIFt7XG4gICAga2V5OiBcInJldmVyc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHRoaXMuZWxlbWVudHMgPSB0aGlzLmVsZW1lbnRzLnJldmVyc2UoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZXR1cm5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JldHVybihyZXR1cm5OZXh0KSB7XG4gICAgICBpZiAocmV0dXJuTmV4dCkge1xuICAgICAgICB0aGlzLnJldHVyblJlc3VsdHMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxhc3RSZXN1bHRzO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBRdWlja0JhdGNoO1xufSgpO1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuaWYgKFF1aWNrQmF0Y2gubmFtZSA9PSBudWxsKSB7XG4gIFF1aWNrQmF0Y2gubmFtZSA9ICdRdWlja0JhdGNoJztcbn1cblxuT2JqZWN0LmtleXMoUXVpY2tFbGVtZW50JDIucHJvdG90eXBlKS5jb25jYXQoJ2NzcycsICdyZXBsYWNlV2l0aCcsICdodG1sJywgJ3RleHQnKS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgcmV0dXJuIFF1aWNrQmF0Y2gucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICB2YXIgZWxlbWVudCwgcmVzdWx0cztcblxuICAgIHJlc3VsdHMgPSB0aGlzLmxhc3RSZXN1bHRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGksIGxlbiwgcmVmLCByZXN1bHRzMTtcbiAgICAgIHJlZiA9IHRoaXMuZWxlbWVudHM7XG4gICAgICByZXN1bHRzMSA9IFtdO1xuXG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZWxlbWVudCA9IHJlZltpXTtcblxuICAgICAgICBpZiAobWV0aG9kID09PSAnaHRtbCcgfHwgbWV0aG9kID09PSAndGV4dCcpIHtcbiAgICAgICAgICBpZiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHJlc3VsdHMxLnB1c2goZWxlbWVudFttZXRob2RdID0gbmV3VmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRzMS5wdXNoKGVsZW1lbnRbbWV0aG9kXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBfZWxlbWVudDtcblxuICAgICAgICAgIHJlc3VsdHMxLnB1c2goKF9lbGVtZW50ID0gZWxlbWVudClbbWV0aG9kXS5hcHBseShfZWxlbWVudCwgYXJndW1lbnRzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdHMxO1xuICAgIH0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIGlmICh0aGlzLnJldHVyblJlc3VsdHMpIHtcbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG59KTtcblxuX3F1aWNrZG9tLmJhdGNoID0gZnVuY3Rpb24gKGVsZW1lbnRzLCByZXR1cm5SZXN1bHRzKSB7XG4gIGlmICghSVMkMS5pdGVyYWJsZShlbGVtZW50cykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYXRjaDogZXhwZWN0ZWQgYW4gaXRlcmFibGUsIGdvdCBcIi5jb25jYXQoU3RyaW5nKGVsZW1lbnRzKSkpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBRdWlja0JhdGNoKGVsZW1lbnRzLCByZXR1cm5SZXN1bHRzKTtcbn07dmFyIHZlcnNpb24gPSBcIjEuMC45M1wiO3ZhciBTSE9SVENVVFMsIGksIGxlbiwgc2hvcnRjdXQ7XG5TSE9SVENVVFMgPSBbJ2xpbms6YScsICdhbmNob3I6YScsICdhJywgJ3RleHQnLCAnZGl2JywgJ3NwYW4nLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZGVyJywgJ2Zvb3RlcicsICdzZWN0aW9uJywgJ2J1dHRvbicsICdicicsICd1bCcsICdvbCcsICdsaScsICdmaWVsZHNldCcsICdpbnB1dCcsICd0ZXh0YXJlYScsICdzZWxlY3QnLCAnb3B0aW9uJywgJ2Zvcm0nLCAnZnJhbWUnLCAnaHInLCAnaWZyYW1lJywgJ2ltZycsICdwaWN0dXJlJywgJ21haW4nLCAnbmF2JywgJ21ldGEnLCAnb2JqZWN0JywgJ3ByZScsICdzdHlsZScsICd0YWJsZScsICd0Ym9keScsICd0aCcsICd0cicsICd0ZCcsICd0Zm9vdCcsIC8vICd0ZW1wbGF0ZSdcbid2aWRlbyddO1xuXG5mb3IgKGkgPSAwLCBsZW4gPSBTSE9SVENVVFMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgc2hvcnRjdXQgPSBTSE9SVENVVFNbaV07XG5cbiAgKGZ1bmN0aW9uIChzaG9ydGN1dCkge1xuICAgIHZhciBwcm9wLCBzcGxpdCwgdHlwZTtcbiAgICBwcm9wID0gdHlwZSA9IHNob3J0Y3V0O1xuXG4gICAgaWYgKGluY2x1ZGVzKHNob3J0Y3V0LCAnOicpKSB7XG4gICAgICBzcGxpdCA9IHNob3J0Y3V0LnNwbGl0KCc6Jyk7XG4gICAgICBwcm9wID0gc3BsaXRbMF07XG4gICAgICB0eXBlID0gc3BsaXRbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9xdWlja2RvbVtwcm9wXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfcXVpY2tkb20uYXBwbHkodm9pZCAwLCBbdHlwZV0uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICB9O1xuICB9KShzaG9ydGN1dCk7XG59aW5pdChRdWlja0VsZW1lbnQkMiwgUXVpY2tXaW5kb3ckMik7XG5fcXVpY2tkb20uUXVpY2tFbGVtZW50ID0gUXVpY2tFbGVtZW50JDI7XG5fcXVpY2tkb20uUXVpY2tUZW1wbGF0ZSA9IFF1aWNrVGVtcGxhdGUkMTtcbl9xdWlja2RvbS5RdWlja1dpbmRvdyA9IFF1aWNrV2luZG93JDI7XG5fcXVpY2tkb20uUXVpY2tCYXRjaCA9IFF1aWNrQmF0Y2gkMTtcbl9xdWlja2RvbS52ZXJzaW9uID0gdmVyc2lvbjtcbl9xdWlja2RvbS5DU1MgPSBDU1M7XG52YXIgcXVpY2tkb20gPSBfcXVpY2tkb207IC8vIGV4cG9ydCB7cXVpY2tkb20gYXMgZGVmYXVsdCwgUXVpY2tFbGVtZW50LCBRdWlja1RlbXBsYXRlLCBRdWlja1dpbmRvdywgUXVpY2tCYXRjaH1cbmV4cG9ydCBkZWZhdWx0IHF1aWNrZG9tOyIsImltcG9ydCBET00gZnJvbSAncXVpY2tkb20nXG5cbmV4cG9ydCBkZWZhdWx0IHJlc3RhcnRTYW5kYm94ID0gKCktPlxuXHRpZiB3aW5kb3cuc2FuZGJveFxuXHRcdGRlbGV0ZSBxdWlja2ZpZWxkLmluc3RhbmNlc1tpZF0gZm9yIGlkLGZpZWxkIG9mIHF1aWNrZmllbGQuaW5zdGFuY2VzXG5cdFx0d2luZG93LnNhbmRib3gucmVtb3ZlKClcblx0XG5cdHdpbmRvdy5zYW5kYm94ID0gRE9NLmRpdihpZDonc2FuZGJveCcsIHN0eWxlOntib3JkZXI6JzFweCBzb2xpZCcsIHBhZGRpbmc6JzIwcHgnLCBib3hTaXppbmc6J2JvcmRlci1ib3gnfSkuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSlcbiIsImltcG9ydCBET00gZnJvbSAncXVpY2tkb20nXG5cbmV4cG9ydCBkZWZhdWx0ICh0aXRsZSwgbWFyZ2luPTIwKS0+XG5cdERPTS5kaXYoXG5cdFx0cmVmOiAndGVzdFRpdGxlJ1xuXHRcdHN0eWxlOnttYXJnaW5Ub3A6bWFyZ2luLCBtYXJnaW5Cb3R0b206bWFyZ2luLCBmb250U2l6ZToxNiwgZm9udFdlaWdodDo2MDAsIGZvbnRGYW1pbHk6J3N5c3RlbS11aSwgc2Fucy1zZXJpZid9XG5cdCx0aXRsZSkuYXBwZW5kVG8oc2FuZGJveClcbiIsImltcG9ydCBET00gZnJvbSAncXVpY2tkb20nXG5cbmV4cG9ydCBkZWZhdWx0ICgpLT5cblx0bWFyZ2luID0gYXJndW1lbnRzWzBdXG5cdG1hcmdpbiA9IDIwIGlmIGlzTmFOKG1hcmdpbilcblx0RE9NLmRpdihcblx0XHRyZWY6ICd0ZXN0VGl0bGUnXG5cdFx0c3R5bGU6IHttYXJnaW5Ub3A6bWFyZ2luLCBtYXJnaW5Cb3R0b206bWFyZ2lufVxuXHQpLmFwcGVuZFRvKHNhbmRib3gpXG4iLCJleHBvcnQgZGVmYXVsdCAoZWwpLT5cblx0dG9wOiBlbC5zdHlsZSgnYm9yZGVyVG9wV2lkdGgnKVxuXHRib3R0b206IGVsLnN0eWxlKCdib3JkZXJCb3R0b21XaWR0aCcpXG5cdGxlZnQ6IGVsLnN0eWxlKCdib3JkZXJMZWZ0V2lkdGgnKVxuXHRyaWdodDogZWwuc3R5bGUoJ2JvcmRlclJpZ2h0V2lkdGgnKSIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gKHByb21pc2UsIG9uRmluYWxseSkgPT4ge1xuXHRvbkZpbmFsbHkgPSBvbkZpbmFsbHkgfHwgKCgpID0+IHt9KTtcblxuXHRyZXR1cm4gcHJvbWlzZS50aGVuKFxuXHRcdHZhbCA9PiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcblx0XHRcdHJlc29sdmUob25GaW5hbGx5KCkpO1xuXHRcdH0pLnRoZW4oKCkgPT4gdmFsKSxcblx0XHRlcnIgPT4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG5cdFx0XHRyZXNvbHZlKG9uRmluYWxseSgpKTtcblx0XHR9KS50aGVuKCgpID0+IHtcblx0XHRcdHRocm93IGVycjtcblx0XHR9KVxuXHQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbmNvbnN0IHBGaW5hbGx5ID0gcmVxdWlyZSgncC1maW5hbGx5Jyk7XG5cbmNsYXNzIFRpbWVvdXRFcnJvciBleHRlbmRzIEVycm9yIHtcblx0Y29uc3RydWN0b3IobWVzc2FnZSkge1xuXHRcdHN1cGVyKG1lc3NhZ2UpO1xuXHRcdHRoaXMubmFtZSA9ICdUaW1lb3V0RXJyb3InO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gKHByb21pc2UsIG1zLCBmYWxsYmFjaykgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRpZiAodHlwZW9mIG1zICE9PSAnbnVtYmVyJyAmJiBtcyA+PSAwKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYG1zYCB0byBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuXHR9XG5cblx0Y29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRpZiAodHlwZW9mIGZhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRyZXNvbHZlKGZhbGxiYWNrKCkpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IG1lc3NhZ2UgPSB0eXBlb2YgZmFsbGJhY2sgPT09ICdzdHJpbmcnID8gZmFsbGJhY2sgOiBgUHJvbWlzZSB0aW1lZCBvdXQgYWZ0ZXIgJHttc30gbWlsbGlzZWNvbmRzYDtcblx0XHRjb25zdCBlcnIgPSBmYWxsYmFjayBpbnN0YW5jZW9mIEVycm9yID8gZmFsbGJhY2sgOiBuZXcgVGltZW91dEVycm9yKG1lc3NhZ2UpO1xuXG5cdFx0cmVqZWN0KGVycik7XG5cdH0sIG1zKTtcblxuXHRwRmluYWxseShcblx0XHRwcm9taXNlLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KSxcblx0XHQoKSA9PiB7XG5cdFx0XHRjbGVhclRpbWVvdXQodGltZXIpO1xuXHRcdH1cblx0KTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSBUaW1lb3V0RXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCBwVGltZW91dCA9IHJlcXVpcmUoJ3AtdGltZW91dCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChlbWl0dGVyLCBldmVudCwgb3B0cykgPT4ge1xuXHRsZXQgY2FuY2VsO1xuXG5cdGNvbnN0IHJldCA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdG9wdHMgPSB7ZmlsdGVyOiBvcHRzfTtcblx0XHR9XG5cblx0XHRvcHRzID0gT2JqZWN0LmFzc2lnbih7XG5cdFx0XHRyZWplY3Rpb25FdmVudHM6IFsnZXJyb3InXSxcblx0XHRcdG11bHRpQXJnczogZmFsc2Vcblx0XHR9LCBvcHRzKTtcblxuXHRcdGxldCBhZGRMaXN0ZW5lciA9IGVtaXR0ZXIub24gfHwgZW1pdHRlci5hZGRMaXN0ZW5lciB8fCBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXI7XG5cdFx0bGV0IHJlbW92ZUxpc3RlbmVyID0gZW1pdHRlci5vZmYgfHwgZW1pdHRlci5yZW1vdmVMaXN0ZW5lciB8fCBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXI7XG5cblx0XHRpZiAoIWFkZExpc3RlbmVyIHx8ICFyZW1vdmVMaXN0ZW5lcikge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRW1pdHRlciBpcyBub3QgY29tcGF0aWJsZScpO1xuXHRcdH1cblxuXHRcdGFkZExpc3RlbmVyID0gYWRkTGlzdGVuZXIuYmluZChlbWl0dGVyKTtcblx0XHRyZW1vdmVMaXN0ZW5lciA9IHJlbW92ZUxpc3RlbmVyLmJpbmQoZW1pdHRlcik7XG5cblx0XHRjb25zdCByZXNvbHZlSGFuZGxlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0aWYgKG9wdHMubXVsdGlBcmdzKSB7XG5cdFx0XHRcdHZhbHVlID0gW10uc2xpY2UuYXBwbHkoYXJndW1lbnRzKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG9wdHMuZmlsdGVyICYmICFvcHRzLmZpbHRlcih2YWx1ZSkpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjYW5jZWwoKTtcblx0XHRcdHJlc29sdmUodmFsdWUpO1xuXHRcdH07XG5cblx0XHRjb25zdCByZWplY3RIYW5kbGVyID0gZnVuY3Rpb24gKHJlYXNvbikge1xuXHRcdFx0Y2FuY2VsKCk7XG5cblx0XHRcdGlmIChvcHRzLm11bHRpQXJncykge1xuXHRcdFx0XHRyZWplY3QoW10uc2xpY2UuYXBwbHkoYXJndW1lbnRzKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZWplY3QocmVhc29uKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Y2FuY2VsID0gKCkgPT4ge1xuXHRcdFx0cmVtb3ZlTGlzdGVuZXIoZXZlbnQsIHJlc29sdmVIYW5kbGVyKTtcblxuXHRcdFx0Zm9yIChjb25zdCByZWplY3Rpb25FdmVudCBvZiBvcHRzLnJlamVjdGlvbkV2ZW50cykge1xuXHRcdFx0XHRyZW1vdmVMaXN0ZW5lcihyZWplY3Rpb25FdmVudCwgcmVqZWN0SGFuZGxlcik7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGFkZExpc3RlbmVyKGV2ZW50LCByZXNvbHZlSGFuZGxlcik7XG5cblx0XHRmb3IgKGNvbnN0IHJlamVjdGlvbkV2ZW50IG9mIG9wdHMucmVqZWN0aW9uRXZlbnRzKSB7XG5cdFx0XHRhZGRMaXN0ZW5lcihyZWplY3Rpb25FdmVudCwgcmVqZWN0SGFuZGxlcik7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXQuY2FuY2VsID0gY2FuY2VsO1xuXG5cdGlmICh0eXBlb2Ygb3B0cy50aW1lb3V0ID09PSAnbnVtYmVyJykge1xuXHRcdHJldHVybiBwVGltZW91dChyZXQsIG9wdHMudGltZW91dCk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcbiIsImV4cG9ydCBkZWZhdWx0XG5cdHJlZDogJyNjYzQ4MjAnXG5cdGdyZWVuOiAnIzcyYzMyMidcblx0b3JhbmdlOiAnI2ZmOWMwMCdcblx0YmxhY2s6ICcjMTgxODE4J1xuXHRncmV5X2Rhcms6ICcjNWU1ZTVlJ1xuXHRncmV5OiAnIzkwOTA5MCdcblx0Z3JleV9zZW1pX2xpZ2h0OiAnI2JlYmViZSdcblx0Z3JleV9saWdodDogJyNkM2QzZDMnXG5cdGdyZXlfbGlnaHQyOiAnI2RkZGRkZCdcblx0Z3JleV9saWdodDM6ICcjZjJmNWY3J1xuXHRncmV5X2xpZ2h0NDogJyNlNWU1ZTUnXG4iLCIvKiFcbiAqIGFzc2VydGlvbi1lcnJvclxuICogQ29weXJpZ2h0KGMpIDIwMTMgSmFrZSBMdWVyIDxqYWtlQHF1YWxpYW5jeS5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKiFcbiAqIFJldHVybiBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogb25lIG9iamVjdCB0byBhbm90aGVyIGV4Y2x1ZGluZyBhbnkgb3JpZ2luYWxseVxuICogbGlzdGVkLiBSZXR1cm5lZCBmdW5jdGlvbiB3aWxsIGNyZWF0ZSBhIG5ldyBge31gLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBleGNsdWRlZCBwcm9wZXJ0aWVzIC4uLlxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cblxuZnVuY3Rpb24gZXhjbHVkZSAoKSB7XG4gIHZhciBleGNsdWRlcyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblxuICBmdW5jdGlvbiBleGNsdWRlUHJvcHMgKHJlcywgb2JqKSB7XG4gICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICghfmV4Y2x1ZGVzLmluZGV4T2Yoa2V5KSkgcmVzW2tleV0gPSBvYmpba2V5XTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBleHRlbmRFeGNsdWRlICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxuICAgICAgLCBpID0gMFxuICAgICAgLCByZXMgPSB7fTtcblxuICAgIGZvciAoOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgZXhjbHVkZVByb3BzKHJlcywgYXJnc1tpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcbn07XG5cbi8qIVxuICogUHJpbWFyeSBFeHBvcnRzXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBBc3NlcnRpb25FcnJvcjtcblxuLyoqXG4gKiAjIyMgQXNzZXJ0aW9uRXJyb3JcbiAqXG4gKiBBbiBleHRlbnNpb24gb2YgdGhlIEphdmFTY3JpcHQgYEVycm9yYCBjb25zdHJ1Y3RvciBmb3JcbiAqIGFzc2VydGlvbiBhbmQgdmFsaWRhdGlvbiBzY2VuYXJpb3MuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzIHRvIGluY2x1ZGUgKG9wdGlvbmFsKVxuICogQHBhcmFtIHtjYWxsZWV9IHN0YXJ0IHN0YWNrIGZ1bmN0aW9uIChvcHRpb25hbClcbiAqL1xuXG5mdW5jdGlvbiBBc3NlcnRpb25FcnJvciAobWVzc2FnZSwgX3Byb3BzLCBzc2YpIHtcbiAgdmFyIGV4dGVuZCA9IGV4Y2x1ZGUoJ25hbWUnLCAnbWVzc2FnZScsICdzdGFjaycsICdjb25zdHJ1Y3RvcicsICd0b0pTT04nKVxuICAgICwgcHJvcHMgPSBleHRlbmQoX3Byb3BzIHx8IHt9KTtcblxuICAvLyBkZWZhdWx0IHZhbHVlc1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlIHx8ICdVbnNwZWNpZmllZCBBc3NlcnRpb25FcnJvcic7XG4gIHRoaXMuc2hvd0RpZmYgPSBmYWxzZTtcblxuICAvLyBjb3B5IGZyb20gcHJvcGVydGllc1xuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICB0aGlzW2tleV0gPSBwcm9wc1trZXldO1xuICB9XG5cbiAgLy8gY2FwdHVyZSBzdGFjayB0cmFjZVxuICBzc2YgPSBzc2YgfHwgYXJndW1lbnRzLmNhbGxlZTtcbiAgaWYgKHNzZiAmJiBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHNzZik7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH0gY2F0Y2goZSkge1xuICAgICAgdGhpcy5zdGFjayA9IGUuc3RhY2s7XG4gICAgfVxuICB9XG59XG5cbi8qIVxuICogSW5oZXJpdCBmcm9tIEVycm9yLnByb3RvdHlwZVxuICovXG5cbkFzc2VydGlvbkVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcblxuLyohXG4gKiBTdGF0aWNhbGx5IHNldCBuYW1lXG4gKi9cblxuQXNzZXJ0aW9uRXJyb3IucHJvdG90eXBlLm5hbWUgPSAnQXNzZXJ0aW9uRXJyb3InO1xuXG4vKiFcbiAqIEVuc3VyZSBjb3JyZWN0IGNvbnN0cnVjdG9yXG4gKi9cblxuQXNzZXJ0aW9uRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQXNzZXJ0aW9uRXJyb3I7XG5cbi8qKlxuICogQWxsb3cgZXJyb3JzIHRvIGJlIGNvbnZlcnRlZCB0byBKU09OIGZvciBzdGF0aWMgdHJhbnNmZXIuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBpbmNsdWRlIHN0YWNrIChkZWZhdWx0OiBgdHJ1ZWApXG4gKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCB0aGF0IGNhbiBiZSBgSlNPTi5zdHJpbmdpZnlgXG4gKi9cblxuQXNzZXJ0aW9uRXJyb3IucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIChzdGFjaykge1xuICB2YXIgZXh0ZW5kID0gZXhjbHVkZSgnY29uc3RydWN0b3InLCAndG9KU09OJywgJ3N0YWNrJylcbiAgICAsIHByb3BzID0gZXh0ZW5kKHsgbmFtZTogdGhpcy5uYW1lIH0sIHRoaXMpO1xuXG4gIC8vIGluY2x1ZGUgc3RhY2sgaWYgZXhpc3RzIGFuZCBub3QgdHVybmVkIG9mZlxuICBpZiAoZmFsc2UgIT09IHN0YWNrICYmIHRoaXMuc3RhY2spIHtcbiAgICBwcm9wcy5zdGFjayA9IHRoaXMuc3RhY2s7XG4gIH1cblxuICByZXR1cm4gcHJvcHM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiAhXG4gKiBDaGFpIC0gcGF0aHZhbCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbG9naWNhbHBhcmFkb3gvZmlsdHJcbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5oYXNQcm9wZXJ0eShvYmplY3QsIG5hbWUpXG4gKlxuICogVGhpcyBhbGxvd3MgY2hlY2tpbmcgd2hldGhlciBhbiBvYmplY3QgaGFzIG93blxuICogb3IgaW5oZXJpdGVkIGZyb20gcHJvdG90eXBlIGNoYWluIG5hbWVkIHByb3BlcnR5LlxuICpcbiAqIEJhc2ljYWxseSBkb2VzIHRoZSBzYW1lIHRoaW5nIGFzIHRoZSBgaW5gXG4gKiBvcGVyYXRvciBidXQgd29ya3MgcHJvcGVybHkgd2l0aCBudWxsL3VuZGVmaW5lZCB2YWx1ZXNcbiAqIGFuZCBvdGhlciBwcmltaXRpdmVzLlxuICpcbiAqICAgICB2YXIgb2JqID0ge1xuICogICAgICAgICBhcnI6IFsnYScsICdiJywgJ2MnXVxuICogICAgICAgLCBzdHI6ICdIZWxsbydcbiAqICAgICB9XG4gKlxuICogVGhlIGZvbGxvd2luZyB3b3VsZCBiZSB0aGUgcmVzdWx0cy5cbiAqXG4gKiAgICAgaGFzUHJvcGVydHkob2JqLCAnc3RyJyk7ICAvLyB0cnVlXG4gKiAgICAgaGFzUHJvcGVydHkob2JqLCAnY29uc3RydWN0b3InKTsgIC8vIHRydWVcbiAqICAgICBoYXNQcm9wZXJ0eShvYmosICdiYXInKTsgIC8vIGZhbHNlXG4gKlxuICogICAgIGhhc1Byb3BlcnR5KG9iai5zdHIsICdsZW5ndGgnKTsgLy8gdHJ1ZVxuICogICAgIGhhc1Byb3BlcnR5KG9iai5zdHIsIDEpOyAgLy8gdHJ1ZVxuICogICAgIGhhc1Byb3BlcnR5KG9iai5zdHIsIDUpOyAgLy8gZmFsc2VcbiAqXG4gKiAgICAgaGFzUHJvcGVydHkob2JqLmFyciwgJ2xlbmd0aCcpOyAgLy8gdHJ1ZVxuICogICAgIGhhc1Byb3BlcnR5KG9iai5hcnIsIDIpOyAgLy8gdHJ1ZVxuICogICAgIGhhc1Byb3BlcnR5KG9iai5hcnIsIDMpOyAgLy8gZmFsc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ3xTeW1ib2x9IG5hbWVcbiAqIEByZXR1cm5zIHtCb29sZWFufSB3aGV0aGVyIGl0IGV4aXN0c1xuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgaGFzUHJvcGVydHlcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gaGFzUHJvcGVydHkob2JqLCBuYW1lKSB7XG4gIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJyB8fCBvYmogPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUaGUgYGluYCBvcGVyYXRvciBkb2VzIG5vdCB3b3JrIHdpdGggcHJpbWl0aXZlcy5cbiAgcmV0dXJuIG5hbWUgaW4gT2JqZWN0KG9iaik7XG59XG5cbi8qICFcbiAqICMjIHBhcnNlUGF0aChwYXRoKVxuICpcbiAqIEhlbHBlciBmdW5jdGlvbiB1c2VkIHRvIHBhcnNlIHN0cmluZyBvYmplY3RcbiAqIHBhdGhzLiBVc2UgaW4gY29uanVuY3Rpb24gd2l0aCBgaW50ZXJuYWxHZXRQYXRoVmFsdWVgLlxuICpcbiAqICAgICAgdmFyIHBhcnNlZCA9IHBhcnNlUGF0aCgnbXlvYmplY3QucHJvcGVydHkuc3VicHJvcCcpO1xuICpcbiAqICMjIyBQYXRoczpcbiAqXG4gKiAqIENhbiBiZSBpbmZpbml0ZWx5IGRlZXAgYW5kIG5lc3RlZC5cbiAqICogQXJyYXlzIGFyZSBhbHNvIHZhbGlkIHVzaW5nIHRoZSBmb3JtYWwgYG15b2JqZWN0LmRvY3VtZW50WzNdLnByb3BlcnR5YC5cbiAqICogTGl0ZXJhbCBkb3RzIGFuZCBicmFja2V0cyAobm90IGRlbGltaXRlcikgbXVzdCBiZSBiYWNrc2xhc2gtZXNjYXBlZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHJldHVybnMge09iamVjdH0gcGFyc2VkXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgc3RyID0gcGF0aC5yZXBsYWNlKC8oW15cXFxcXSlcXFsvZywgJyQxLlsnKTtcbiAgdmFyIHBhcnRzID0gc3RyLm1hdGNoKC8oXFxcXFxcLnxbXi5dKz8pKy9nKTtcbiAgcmV0dXJuIHBhcnRzLm1hcChmdW5jdGlvbiBtYXBNYXRjaGVzKHZhbHVlKSB7XG4gICAgdmFyIHJlZ2V4cCA9IC9eXFxbKFxcZCspXFxdJC87XG4gICAgdmFyIG1BcnIgPSByZWdleHAuZXhlYyh2YWx1ZSk7XG4gICAgdmFyIHBhcnNlZCA9IG51bGw7XG4gICAgaWYgKG1BcnIpIHtcbiAgICAgIHBhcnNlZCA9IHsgaTogcGFyc2VGbG9hdChtQXJyWzFdKSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZWQgPSB7IHA6IHZhbHVlLnJlcGxhY2UoL1xcXFwoWy5cXFtcXF1dKS9nLCAnJDEnKSB9O1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZWQ7XG4gIH0pO1xufVxuXG4vKiAhXG4gKiAjIyBpbnRlcm5hbEdldFBhdGhWYWx1ZShvYmosIHBhcnNlZFssIHBhdGhEZXB0aF0pXG4gKlxuICogSGVscGVyIGNvbXBhbmlvbiBmdW5jdGlvbiBmb3IgYC5wYXJzZVBhdGhgIHRoYXQgcmV0dXJuc1xuICogdGhlIHZhbHVlIGxvY2F0ZWQgYXQgdGhlIHBhcnNlZCBhZGRyZXNzLlxuICpcbiAqICAgICAgdmFyIHZhbHVlID0gZ2V0UGF0aFZhbHVlKG9iaiwgcGFyc2VkKTtcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IHRvIHNlYXJjaCBhZ2FpbnN0XG4gKiBAcGFyYW0ge09iamVjdH0gcGFyc2VkIGRlZmluaXRpb24gZnJvbSBgcGFyc2VQYXRoYC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkZXB0aCAobmVzdGluZyBsZXZlbCkgb2YgdGhlIHByb3BlcnR5IHdlIHdhbnQgdG8gcmV0cmlldmVcbiAqIEByZXR1cm5zIHtPYmplY3R8VW5kZWZpbmVkfSB2YWx1ZVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaW50ZXJuYWxHZXRQYXRoVmFsdWUob2JqLCBwYXJzZWQsIHBhdGhEZXB0aCkge1xuICB2YXIgdGVtcG9yYXJ5VmFsdWUgPSBvYmo7XG4gIHZhciByZXMgPSBudWxsO1xuICBwYXRoRGVwdGggPSAodHlwZW9mIHBhdGhEZXB0aCA9PT0gJ3VuZGVmaW5lZCcgPyBwYXJzZWQubGVuZ3RoIDogcGF0aERlcHRoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhEZXB0aDsgaSsrKSB7XG4gICAgdmFyIHBhcnQgPSBwYXJzZWRbaV07XG4gICAgaWYgKHRlbXBvcmFyeVZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHBhcnQucCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGVtcG9yYXJ5VmFsdWUgPSB0ZW1wb3JhcnlWYWx1ZVtwYXJ0LmldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGVtcG9yYXJ5VmFsdWUgPSB0ZW1wb3JhcnlWYWx1ZVtwYXJ0LnBdO1xuICAgICAgfVxuXG4gICAgICBpZiAoaSA9PT0gKHBhdGhEZXB0aCAtIDEpKSB7XG4gICAgICAgIHJlcyA9IHRlbXBvcmFyeVZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59XG5cbi8qICFcbiAqICMjIGludGVybmFsU2V0UGF0aFZhbHVlKG9iaiwgdmFsdWUsIHBhcnNlZClcbiAqXG4gKiBDb21wYW5pb24gZnVuY3Rpb24gZm9yIGBwYXJzZVBhdGhgIHRoYXQgc2V0c1xuICogdGhlIHZhbHVlIGxvY2F0ZWQgYXQgYSBwYXJzZWQgYWRkcmVzcy5cbiAqXG4gKiAgaW50ZXJuYWxTZXRQYXRoVmFsdWUob2JqLCAndmFsdWUnLCBwYXJzZWQpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgdG8gc2VhcmNoIGFuZCBkZWZpbmUgb25cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgdG8gdXNlIHVwb24gc2V0XG4gKiBAcGFyYW0ge09iamVjdH0gcGFyc2VkIGRlZmluaXRpb24gZnJvbSBgcGFyc2VQYXRoYFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gaW50ZXJuYWxTZXRQYXRoVmFsdWUob2JqLCB2YWwsIHBhcnNlZCkge1xuICB2YXIgdGVtcE9iaiA9IG9iajtcbiAgdmFyIHBhdGhEZXB0aCA9IHBhcnNlZC5sZW5ndGg7XG4gIHZhciBwYXJ0ID0gbnVsbDtcbiAgLy8gSGVyZSB3ZSBpdGVyYXRlIHRocm91Z2ggZXZlcnkgcGFydCBvZiB0aGUgcGF0aFxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhEZXB0aDsgaSsrKSB7XG4gICAgdmFyIHByb3BOYW1lID0gbnVsbDtcbiAgICB2YXIgcHJvcFZhbCA9IG51bGw7XG4gICAgcGFydCA9IHBhcnNlZFtpXTtcblxuICAgIC8vIElmIGl0J3MgdGhlIGxhc3QgcGFydCBvZiB0aGUgcGF0aCwgd2Ugc2V0IHRoZSAncHJvcE5hbWUnIHZhbHVlIHdpdGggdGhlIHByb3BlcnR5IG5hbWVcbiAgICBpZiAoaSA9PT0gKHBhdGhEZXB0aCAtIDEpKSB7XG4gICAgICBwcm9wTmFtZSA9IHR5cGVvZiBwYXJ0LnAgPT09ICd1bmRlZmluZWQnID8gcGFydC5pIDogcGFydC5wO1xuICAgICAgLy8gTm93IHdlIHNldCB0aGUgcHJvcGVydHkgd2l0aCB0aGUgbmFtZSBoZWxkIGJ5ICdwcm9wTmFtZScgb24gb2JqZWN0IHdpdGggdGhlIGRlc2lyZWQgdmFsXG4gICAgICB0ZW1wT2JqW3Byb3BOYW1lXSA9IHZhbDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYXJ0LnAgIT09ICd1bmRlZmluZWQnICYmIHRlbXBPYmpbcGFydC5wXSkge1xuICAgICAgdGVtcE9iaiA9IHRlbXBPYmpbcGFydC5wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYXJ0LmkgIT09ICd1bmRlZmluZWQnICYmIHRlbXBPYmpbcGFydC5pXSkge1xuICAgICAgdGVtcE9iaiA9IHRlbXBPYmpbcGFydC5pXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgdGhlIG9iaiBkb2Vzbid0IGhhdmUgdGhlIHByb3BlcnR5IHdlIGNyZWF0ZSBvbmUgd2l0aCB0aGF0IG5hbWUgdG8gZGVmaW5lIGl0XG4gICAgICB2YXIgbmV4dCA9IHBhcnNlZFtpICsgMV07XG4gICAgICAvLyBIZXJlIHdlIHNldCB0aGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgd2hpY2ggd2lsbCBiZSBkZWZpbmVkXG4gICAgICBwcm9wTmFtZSA9IHR5cGVvZiBwYXJ0LnAgPT09ICd1bmRlZmluZWQnID8gcGFydC5pIDogcGFydC5wO1xuICAgICAgLy8gSGVyZSB3ZSBkZWNpZGUgaWYgdGhpcyBwcm9wZXJ0eSB3aWxsIGJlIGFuIGFycmF5IG9yIGEgbmV3IG9iamVjdFxuICAgICAgcHJvcFZhbCA9IHR5cGVvZiBuZXh0LnAgPT09ICd1bmRlZmluZWQnID8gW10gOiB7fTtcbiAgICAgIHRlbXBPYmpbcHJvcE5hbWVdID0gcHJvcFZhbDtcbiAgICAgIHRlbXBPYmogPSB0ZW1wT2JqW3Byb3BOYW1lXTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiAjIyMgLmdldFBhdGhJbmZvKG9iamVjdCwgcGF0aClcbiAqXG4gKiBUaGlzIGFsbG93cyB0aGUgcmV0cmlldmFsIG9mIHByb3BlcnR5IGluZm8gaW4gYW5cbiAqIG9iamVjdCBnaXZlbiBhIHN0cmluZyBwYXRoLlxuICpcbiAqIFRoZSBwYXRoIGluZm8gY29uc2lzdHMgb2YgYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAqIHBhcmVudCAtIFRoZSBwYXJlbnQgb2JqZWN0IG9mIHRoZSBwcm9wZXJ0eSByZWZlcmVuY2VkIGJ5IGBwYXRoYFxuICogKiBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGZpbmFsIHByb3BlcnR5LCBhIG51bWJlciBpZiBpdCB3YXMgYW4gYXJyYXkgaW5kZXhlclxuICogKiB2YWx1ZSAtIFRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHksIGlmIGl0IGV4aXN0cywgb3RoZXJ3aXNlIGB1bmRlZmluZWRgXG4gKiAqIGV4aXN0cyAtIFdoZXRoZXIgdGhlIHByb3BlcnR5IGV4aXN0cyBvciBub3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHJldHVybnMge09iamVjdH0gaW5mb1xuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgZ2V0UGF0aEluZm9cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZ2V0UGF0aEluZm8ob2JqLCBwYXRoKSB7XG4gIHZhciBwYXJzZWQgPSBwYXJzZVBhdGgocGF0aCk7XG4gIHZhciBsYXN0ID0gcGFyc2VkW3BhcnNlZC5sZW5ndGggLSAxXTtcbiAgdmFyIGluZm8gPSB7XG4gICAgcGFyZW50OiBwYXJzZWQubGVuZ3RoID4gMSA/IGludGVybmFsR2V0UGF0aFZhbHVlKG9iaiwgcGFyc2VkLCBwYXJzZWQubGVuZ3RoIC0gMSkgOiBvYmosXG4gICAgbmFtZTogbGFzdC5wIHx8IGxhc3QuaSxcbiAgICB2YWx1ZTogaW50ZXJuYWxHZXRQYXRoVmFsdWUob2JqLCBwYXJzZWQpLFxuICB9O1xuICBpbmZvLmV4aXN0cyA9IGhhc1Byb3BlcnR5KGluZm8ucGFyZW50LCBpbmZvLm5hbWUpO1xuXG4gIHJldHVybiBpbmZvO1xufVxuXG4vKipcbiAqICMjIyAuZ2V0UGF0aFZhbHVlKG9iamVjdCwgcGF0aClcbiAqXG4gKiBUaGlzIGFsbG93cyB0aGUgcmV0cmlldmFsIG9mIHZhbHVlcyBpbiBhblxuICogb2JqZWN0IGdpdmVuIGEgc3RyaW5nIHBhdGguXG4gKlxuICogICAgIHZhciBvYmogPSB7XG4gKiAgICAgICAgIHByb3AxOiB7XG4gKiAgICAgICAgICAgICBhcnI6IFsnYScsICdiJywgJ2MnXVxuICogICAgICAgICAgICwgc3RyOiAnSGVsbG8nXG4gKiAgICAgICAgIH1cbiAqICAgICAgICwgcHJvcDI6IHtcbiAqICAgICAgICAgICAgIGFycjogWyB7IG5lc3RlZDogJ1VuaXZlcnNlJyB9IF1cbiAqICAgICAgICAgICAsIHN0cjogJ0hlbGxvIGFnYWluISdcbiAqICAgICAgICAgfVxuICogICAgIH1cbiAqXG4gKiBUaGUgZm9sbG93aW5nIHdvdWxkIGJlIHRoZSByZXN1bHRzLlxuICpcbiAqICAgICBnZXRQYXRoVmFsdWUob2JqLCAncHJvcDEuc3RyJyk7IC8vIEhlbGxvXG4gKiAgICAgZ2V0UGF0aFZhbHVlKG9iaiwgJ3Byb3AxLmF0dFsyXScpOyAvLyBiXG4gKiAgICAgZ2V0UGF0aFZhbHVlKG9iaiwgJ3Byb3AyLmFyclswXS5uZXN0ZWQnKTsgLy8gVW5pdmVyc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHJldHVybnMge09iamVjdH0gdmFsdWUgb3IgYHVuZGVmaW5lZGBcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGdldFBhdGhWYWx1ZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBnZXRQYXRoVmFsdWUob2JqLCBwYXRoKSB7XG4gIHZhciBpbmZvID0gZ2V0UGF0aEluZm8ob2JqLCBwYXRoKTtcbiAgcmV0dXJuIGluZm8udmFsdWU7XG59XG5cbi8qKlxuICogIyMjIC5zZXRQYXRoVmFsdWUob2JqZWN0LCBwYXRoLCB2YWx1ZSlcbiAqXG4gKiBEZWZpbmUgdGhlIHZhbHVlIGluIGFuIG9iamVjdCBhdCBhIGdpdmVuIHN0cmluZyBwYXRoLlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgb2JqID0ge1xuICogICAgIHByb3AxOiB7XG4gKiAgICAgICAgIGFycjogWydhJywgJ2InLCAnYyddXG4gKiAgICAgICAsIHN0cjogJ0hlbGxvJ1xuICogICAgIH1cbiAqICAgLCBwcm9wMjoge1xuICogICAgICAgICBhcnI6IFsgeyBuZXN0ZWQ6ICdVbml2ZXJzZScgfSBdXG4gKiAgICAgICAsIHN0cjogJ0hlbGxvIGFnYWluISdcbiAqICAgICB9XG4gKiB9O1xuICogYGBgXG4gKlxuICogVGhlIGZvbGxvd2luZyB3b3VsZCBiZSBhY2NlcHRhYmxlLlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcHJvcGVydGllcyA9IHJlcXVpcmUoJ3RlYS1wcm9wZXJ0aWVzJyk7XG4gKiBwcm9wZXJ0aWVzLnNldChvYmosICdwcm9wMS5zdHInLCAnSGVsbG8gVW5pdmVyc2UhJyk7XG4gKiBwcm9wZXJ0aWVzLnNldChvYmosICdwcm9wMS5hcnJbMl0nLCAnQicpO1xuICogcHJvcGVydGllcy5zZXQob2JqLCAncHJvcDIuYXJyWzBdLm5lc3RlZC52YWx1ZScsIHsgaGVsbG86ICd1bml2ZXJzZScgfSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNldFBhdGhWYWx1ZShvYmosIHBhdGgsIHZhbCkge1xuICB2YXIgcGFyc2VkID0gcGFyc2VQYXRoKHBhdGgpO1xuICBpbnRlcm5hbFNldFBhdGhWYWx1ZShvYmosIHZhbCwgcGFyc2VkKTtcbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGhhc1Byb3BlcnR5OiBoYXNQcm9wZXJ0eSxcbiAgZ2V0UGF0aEluZm86IGdldFBhdGhJbmZvLFxuICBnZXRQYXRoVmFsdWU6IGdldFBhdGhWYWx1ZSxcbiAgc2V0UGF0aFZhbHVlOiBzZXRQYXRoVmFsdWUsXG59O1xuIiwiLyohXG4gKiBDaGFpIC0gZmxhZyB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmZsYWcob2JqZWN0LCBrZXksIFt2YWx1ZV0pXG4gKlxuICogR2V0IG9yIHNldCBhIGZsYWcgdmFsdWUgb24gYW4gb2JqZWN0LiBJZiBhXG4gKiB2YWx1ZSBpcyBwcm92aWRlZCBpdCB3aWxsIGJlIHNldCwgZWxzZSBpdCB3aWxsXG4gKiByZXR1cm4gdGhlIGN1cnJlbnRseSBzZXQgdmFsdWUgb3IgYHVuZGVmaW5lZGAgaWZcbiAqIHRoZSB2YWx1ZSBpcyBub3Qgc2V0LlxuICpcbiAqICAgICB1dGlscy5mbGFnKHRoaXMsICdmb28nLCAnYmFyJyk7IC8vIHNldHRlclxuICogICAgIHV0aWxzLmZsYWcodGhpcywgJ2ZvbycpOyAvLyBnZXR0ZXIsIHJldHVybnMgYGJhcmBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IGNvbnN0cnVjdGVkIEFzc2VydGlvblxuICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICogQHBhcmFtIHtNaXhlZH0gdmFsdWUgKG9wdGlvbmFsKVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgZmxhZ1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmbGFnKG9iaiwga2V5LCB2YWx1ZSkge1xuICB2YXIgZmxhZ3MgPSBvYmouX19mbGFncyB8fCAob2JqLl9fZmxhZ3MgPSBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICBmbGFnc1trZXldID0gdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZsYWdzW2tleV07XG4gIH1cbn07XG4iLCIvKiFcbiAqIENoYWkgLSB0ZXN0IHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKiFcbiAqIE1vZHVsZSBkZXBlbmRhbmNpZXNcbiAqL1xuXG52YXIgZmxhZyA9IHJlcXVpcmUoJy4vZmxhZycpO1xuXG4vKipcbiAqICMjIyAudGVzdChvYmplY3QsIGV4cHJlc3Npb24pXG4gKlxuICogVGVzdCBhbmQgb2JqZWN0IGZvciBleHByZXNzaW9uLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgKGNvbnN0cnVjdGVkIEFzc2VydGlvbilcbiAqIEBwYXJhbSB7QXJndW1lbnRzfSBjaGFpLkFzc2VydGlvbi5wcm90b3R5cGUuYXNzZXJ0IGFyZ3VtZW50c1xuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgdGVzdFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdGVzdChvYmosIGFyZ3MpIHtcbiAgdmFyIG5lZ2F0ZSA9IGZsYWcob2JqLCAnbmVnYXRlJylcbiAgICAsIGV4cHIgPSBhcmdzWzBdO1xuICByZXR1cm4gbmVnYXRlID8gIWV4cHIgOiBleHByO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogIVxuICogdHlwZS1kZXRlY3RcbiAqIENvcHlyaWdodChjKSAyMDEzIGpha2UgbHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cbnZhciBwcm9taXNlRXhpc3RzID0gdHlwZW9mIFByb21pc2UgPT09ICdmdW5jdGlvbic7XG52YXIgZ2xvYmFsT2JqZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHNlbGY7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbnZhciBpc0RvbSA9ICdsb2NhdGlvbicgaW4gZ2xvYmFsT2JqZWN0ICYmICdkb2N1bWVudCcgaW4gZ2xvYmFsT2JqZWN0O1xudmFyIHN5bWJvbEV4aXN0cyA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnO1xudmFyIG1hcEV4aXN0cyA9IHR5cGVvZiBNYXAgIT09ICd1bmRlZmluZWQnO1xudmFyIHNldEV4aXN0cyA9IHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnO1xudmFyIHdlYWtNYXBFeGlzdHMgPSB0eXBlb2YgV2Vha01hcCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgd2Vha1NldEV4aXN0cyA9IHR5cGVvZiBXZWFrU2V0ICE9PSAndW5kZWZpbmVkJztcbnZhciBkYXRhVmlld0V4aXN0cyA9IHR5cGVvZiBEYXRhVmlldyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgc3ltYm9sSXRlcmF0b3JFeGlzdHMgPSBzeW1ib2xFeGlzdHMgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgc3ltYm9sVG9TdHJpbmdUYWdFeGlzdHMgPSBzeW1ib2xFeGlzdHMgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgc2V0RW50cmllc0V4aXN0cyA9IHNldEV4aXN0cyAmJiB0eXBlb2YgU2V0LnByb3RvdHlwZS5lbnRyaWVzID09PSAnZnVuY3Rpb24nO1xudmFyIG1hcEVudHJpZXNFeGlzdHMgPSBtYXBFeGlzdHMgJiYgdHlwZW9mIE1hcC5wcm90b3R5cGUuZW50cmllcyA9PT0gJ2Z1bmN0aW9uJztcbnZhciBzZXRJdGVyYXRvclByb3RvdHlwZSA9IHNldEVudHJpZXNFeGlzdHMgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBTZXQoKS5lbnRyaWVzKCkpO1xudmFyIG1hcEl0ZXJhdG9yUHJvdG90eXBlID0gbWFwRW50cmllc0V4aXN0cyAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IE1hcCgpLmVudHJpZXMoKSk7XG52YXIgYXJyYXlJdGVyYXRvckV4aXN0cyA9IHN5bWJvbEl0ZXJhdG9yRXhpc3RzICYmIHR5cGVvZiBBcnJheS5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9PT0gJ2Z1bmN0aW9uJztcbnZhciBhcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gYXJyYXlJdGVyYXRvckV4aXN0cyAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoW11bU3ltYm9sLml0ZXJhdG9yXSgpKTtcbnZhciBzdHJpbmdJdGVyYXRvckV4aXN0cyA9IHN5bWJvbEl0ZXJhdG9yRXhpc3RzICYmIHR5cGVvZiBTdHJpbmcucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG52YXIgc3RyaW5nSXRlcmF0b3JQcm90b3R5cGUgPSBzdHJpbmdJdGVyYXRvckV4aXN0cyAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoJydbU3ltYm9sLml0ZXJhdG9yXSgpKTtcbnZhciB0b1N0cmluZ0xlZnRTbGljZUxlbmd0aCA9IDg7XG52YXIgdG9TdHJpbmdSaWdodFNsaWNlTGVuZ3RoID0gLTE7XG4vKipcbiAqICMjIyB0eXBlT2YgKG9iailcbiAqXG4gKiBVc2VzIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCB0byBkZXRlcm1pbmUgdGhlIHR5cGUgb2YgYW4gb2JqZWN0LFxuICogbm9ybWFsaXNpbmcgYmVoYXZpb3VyIGFjcm9zcyBlbmdpbmUgdmVyc2lvbnMgJiB3ZWxsIG9wdGltaXNlZC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAqIEByZXR1cm4ge1N0cmluZ30gb2JqZWN0IHR5cGVcbiAqIEBhcGkgcHVibGljXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHlwZURldGVjdChvYmopIHtcbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgICogUHJlOlxuICAgKiAgIHN0cmluZyBsaXRlcmFsICAgICB4IDMsMDM5LDAzNSBvcHMvc2VjIMKxMS42MiUgKDc4IHJ1bnMgc2FtcGxlZClcbiAgICogICBib29sZWFuIGxpdGVyYWwgICAgeCAxLDQyNCwxMzggb3BzL3NlYyDCsTQuNTQlICg3NSBydW5zIHNhbXBsZWQpXG4gICAqICAgbnVtYmVyIGxpdGVyYWwgICAgIHggMSw2NTMsMTUzIG9wcy9zZWMgwrExLjkxJSAoODIgcnVucyBzYW1wbGVkKVxuICAgKiAgIHVuZGVmaW5lZCAgICAgICAgICB4IDksOTc4LDY2MCBvcHMvc2VjIMKxMS45MiUgKDc1IHJ1bnMgc2FtcGxlZClcbiAgICogICBmdW5jdGlvbiAgICAgICAgICAgeCAyLDU1Niw3Njkgb3BzL3NlYyDCsTEuNzMlICg3NyBydW5zIHNhbXBsZWQpXG4gICAqIFBvc3Q6XG4gICAqICAgc3RyaW5nIGxpdGVyYWwgICAgIHggMzgsNTY0LDc5NiBvcHMvc2VjIMKxMS4xNSUgKDc5IHJ1bnMgc2FtcGxlZClcbiAgICogICBib29sZWFuIGxpdGVyYWwgICAgeCAzMSwxNDgsOTQwIG9wcy9zZWMgwrExLjEwJSAoNzkgcnVucyBzYW1wbGVkKVxuICAgKiAgIG51bWJlciBsaXRlcmFsICAgICB4IDMyLDY3OSwzMzAgb3BzL3NlYyDCsTEuOTAlICg3OCBydW5zIHNhbXBsZWQpXG4gICAqICAgdW5kZWZpbmVkICAgICAgICAgIHggMzIsMzYzLDM2OCBvcHMvc2VjIMKxMS4wNyUgKDgyIHJ1bnMgc2FtcGxlZClcbiAgICogICBmdW5jdGlvbiAgICAgICAgICAgeCAzMSwyOTYsODcwIG9wcy9zZWMgwrEwLjk2JSAoODMgcnVucyBzYW1wbGVkKVxuICAgKi9cbiAgdmFyIHR5cGVvZk9iaiA9IHR5cGVvZiBvYmo7XG4gIGlmICh0eXBlb2ZPYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHR5cGVvZk9iajtcbiAgfVxuXG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICAqIFByZTpcbiAgICogICBudWxsICAgICAgICAgICAgICAgeCAyOCw2NDUsNzY1IG9wcy9zZWMgwrExLjE3JSAoODIgcnVucyBzYW1wbGVkKVxuICAgKiBQb3N0OlxuICAgKiAgIG51bGwgICAgICAgICAgICAgICB4IDM2LDQyOCw5NjIgb3BzL3NlYyDCsTEuMzclICg4NCBydW5zIHNhbXBsZWQpXG4gICAqL1xuICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgcmV0dXJuICdudWxsJztcbiAgfVxuXG4gIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdpbmRvdylgYFxuICAgKiAgLSBOb2RlID09PSBcIltvYmplY3QgZ2xvYmFsXVwiXG4gICAqICAtIENocm9tZSA9PT0gXCJbb2JqZWN0IGdsb2JhbF1cIlxuICAgKiAgLSBGaXJlZm94ID09PSBcIltvYmplY3QgV2luZG93XVwiXG4gICAqICAtIFBoYW50b21KUyA9PT0gXCJbb2JqZWN0IFdpbmRvd11cIlxuICAgKiAgLSBTYWZhcmkgPT09IFwiW29iamVjdCBXaW5kb3ddXCJcbiAgICogIC0gSUUgMTEgPT09IFwiW29iamVjdCBXaW5kb3ddXCJcbiAgICogIC0gSUUgRWRnZSA9PT0gXCJbb2JqZWN0IFdpbmRvd11cIlxuICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMpYGBcbiAgICogIC0gQ2hyb21lIFdvcmtlciA9PT0gXCJbb2JqZWN0IGdsb2JhbF1cIlxuICAgKiAgLSBGaXJlZm94IFdvcmtlciA9PT0gXCJbb2JqZWN0IERlZGljYXRlZFdvcmtlckdsb2JhbFNjb3BlXVwiXG4gICAqICAtIFNhZmFyaSBXb3JrZXIgPT09IFwiW29iamVjdCBEZWRpY2F0ZWRXb3JrZXJHbG9iYWxTY29wZV1cIlxuICAgKiAgLSBJRSAxMSBXb3JrZXIgPT09IFwiW29iamVjdCBXb3JrZXJHbG9iYWxTY29wZV1cIlxuICAgKiAgLSBJRSBFZGdlIFdvcmtlciA9PT0gXCJbb2JqZWN0IFdvcmtlckdsb2JhbFNjb3BlXVwiXG4gICAqL1xuICBpZiAob2JqID09PSBnbG9iYWxPYmplY3QpIHtcbiAgICByZXR1cm4gJ2dsb2JhbCc7XG4gIH1cblxuICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAgKiBQcmU6XG4gICAqICAgYXJyYXkgbGl0ZXJhbCAgICAgIHggMiw4ODgsMzUyIG9wcy9zZWMgwrEwLjY3JSAoODIgcnVucyBzYW1wbGVkKVxuICAgKiBQb3N0OlxuICAgKiAgIGFycmF5IGxpdGVyYWwgICAgICB4IDIyLDQ3OSw2NTAgb3BzL3NlYyDCsTAuOTYlICg4MSBydW5zIHNhbXBsZWQpXG4gICAqL1xuICBpZiAoXG4gICAgQXJyYXkuaXNBcnJheShvYmopICYmXG4gICAgKHN5bWJvbFRvU3RyaW5nVGFnRXhpc3RzID09PSBmYWxzZSB8fCAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiBvYmopKVxuICApIHtcbiAgICByZXR1cm4gJ0FycmF5JztcbiAgfVxuXG4gIGlmIChpc0RvbSkge1xuICAgIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgICAqIChodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9icm93c2Vycy5odG1sI2xvY2F0aW9uKVxuICAgICAqIFdoYXRXRyBIVE1MJDcuNy4zIC0gVGhlIGBMb2NhdGlvbmAgaW50ZXJmYWNlXG4gICAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3aW5kb3cubG9jYXRpb24pYGBcbiAgICAgKiAgLSBJRSA8PTExID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAgICogIC0gSUUgRWRnZSA8PTEzID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAgICovXG4gICAgaWYgKG9iaiA9PT0gZ2xvYmFsT2JqZWN0LmxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gJ0xvY2F0aW9uJztcbiAgICB9XG5cbiAgICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICAgKiAoaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jZG9jdW1lbnQpXG4gICAgICogV2hhdFdHIEhUTUwkMy4xLjEgLSBUaGUgYERvY3VtZW50YCBvYmplY3RcbiAgICAgKiBOb3RlOiBNb3N0IGJyb3dzZXJzIGN1cnJlbnRseSBhZGhlciB0byB0aGUgVzNDIERPTSBMZXZlbCAyIHNwZWNcbiAgICAgKiAgICAgICAoaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0yLUhUTUwvaHRtbC5odG1sI0lELTI2ODA5MjY4KVxuICAgICAqICAgICAgIHdoaWNoIHN1Z2dlc3RzIHRoYXQgYnJvd3NlcnMgc2hvdWxkIHVzZSBIVE1MVGFibGVDZWxsRWxlbWVudCBmb3JcbiAgICAgKiAgICAgICBib3RoIFREIGFuZCBUSCBlbGVtZW50cy4gV2hhdFdHIHNlcGFyYXRlcyB0aGVzZS5cbiAgICAgKiAgICAgICBXaGF0V0cgSFRNTCBzdGF0ZXM6XG4gICAgICogICAgICAgICA+IEZvciBoaXN0b3JpY2FsIHJlYXNvbnMsIFdpbmRvdyBvYmplY3RzIG11c3QgYWxzbyBoYXZlIGFcbiAgICAgKiAgICAgICAgID4gd3JpdGFibGUsIGNvbmZpZ3VyYWJsZSwgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgbmFtZWRcbiAgICAgKiAgICAgICAgID4gSFRNTERvY3VtZW50IHdob3NlIHZhbHVlIGlzIHRoZSBEb2N1bWVudCBpbnRlcmZhY2Ugb2JqZWN0LlxuICAgICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZG9jdW1lbnQpYGBcbiAgICAgKiAgLSBDaHJvbWUgPT09IFwiW29iamVjdCBIVE1MRG9jdW1lbnRdXCJcbiAgICAgKiAgLSBGaXJlZm94ID09PSBcIltvYmplY3QgSFRNTERvY3VtZW50XVwiXG4gICAgICogIC0gU2FmYXJpID09PSBcIltvYmplY3QgSFRNTERvY3VtZW50XVwiXG4gICAgICogIC0gSUUgPD0xMCA9PT0gXCJbb2JqZWN0IERvY3VtZW50XVwiXG4gICAgICogIC0gSUUgMTEgPT09IFwiW29iamVjdCBIVE1MRG9jdW1lbnRdXCJcbiAgICAgKiAgLSBJRSBFZGdlIDw9MTMgPT09IFwiW29iamVjdCBIVE1MRG9jdW1lbnRdXCJcbiAgICAgKi9cbiAgICBpZiAob2JqID09PSBnbG9iYWxPYmplY3QuZG9jdW1lbnQpIHtcbiAgICAgIHJldHVybiAnRG9jdW1lbnQnO1xuICAgIH1cblxuICAgIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgICAqIChodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS93ZWJhcHBhcGlzLmh0bWwjbWltZXR5cGVhcnJheSlcbiAgICAgKiBXaGF0V0cgSFRNTCQ4LjYuMS41IC0gUGx1Z2lucyAtIEludGVyZmFjZSBNaW1lVHlwZUFycmF5XG4gICAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuYXZpZ2F0b3IubWltZVR5cGVzKWBgXG4gICAgICogIC0gSUUgPD0xMCA9PT0gXCJbb2JqZWN0IE1TTWltZVR5cGVzQ29sbGVjdGlvbl1cIlxuICAgICAqL1xuICAgIGlmIChvYmogPT09IChnbG9iYWxPYmplY3QubmF2aWdhdG9yIHx8IHt9KS5taW1lVHlwZXMpIHtcbiAgICAgIHJldHVybiAnTWltZVR5cGVBcnJheSc7XG4gICAgfVxuXG4gICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICogKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3dlYmFwcGFwaXMuaHRtbCNwbHVnaW5hcnJheSlcbiAgICAgKiBXaGF0V0cgSFRNTCQ4LjYuMS41IC0gUGx1Z2lucyAtIEludGVyZmFjZSBQbHVnaW5BcnJheVxuICAgICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmF2aWdhdG9yLnBsdWdpbnMpYGBcbiAgICAgKiAgLSBJRSA8PTEwID09PSBcIltvYmplY3QgTVNQbHVnaW5zQ29sbGVjdGlvbl1cIlxuICAgICAqL1xuICAgIGlmIChvYmogPT09IChnbG9iYWxPYmplY3QubmF2aWdhdG9yIHx8IHt9KS5wbHVnaW5zKSB7XG4gICAgICByZXR1cm4gJ1BsdWdpbkFycmF5JztcbiAgICB9XG5cbiAgICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICAgKiAoaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2ViYXBwYXBpcy5odG1sI3BsdWdpbmFycmF5KVxuICAgICAqIFdoYXRXRyBIVE1MJDQuNC40IC0gVGhlIGBibG9ja3F1b3RlYCBlbGVtZW50IC0gSW50ZXJmYWNlIGBIVE1MUXVvdGVFbGVtZW50YFxuICAgICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYmxvY2txdW90ZScpKWBgXG4gICAgICogIC0gSUUgPD0xMCA9PT0gXCJbb2JqZWN0IEhUTUxCbG9ja0VsZW1lbnRdXCJcbiAgICAgKi9cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgb2JqLnRhZ05hbWUgPT09ICdCTE9DS1FVT1RFJykge1xuICAgICAgcmV0dXJuICdIVE1MUXVvdGVFbGVtZW50JztcbiAgICB9XG5cbiAgICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICAgKiAoaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jaHRtbHRhYmxlZGF0YWNlbGxlbGVtZW50KVxuICAgICAqIFdoYXRXRyBIVE1MJDQuOS45IC0gVGhlIGB0ZGAgZWxlbWVudCAtIEludGVyZmFjZSBgSFRNTFRhYmxlRGF0YUNlbGxFbGVtZW50YFxuICAgICAqIE5vdGU6IE1vc3QgYnJvd3NlcnMgY3VycmVudGx5IGFkaGVyIHRvIHRoZSBXM0MgRE9NIExldmVsIDIgc3BlY1xuICAgICAqICAgICAgIChodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItSFRNTC9odG1sLmh0bWwjSUQtODI5MTUwNzUpXG4gICAgICogICAgICAgd2hpY2ggc3VnZ2VzdHMgdGhhdCBicm93c2VycyBzaG91bGQgdXNlIEhUTUxUYWJsZUNlbGxFbGVtZW50IGZvclxuICAgICAqICAgICAgIGJvdGggVEQgYW5kIFRIIGVsZW1lbnRzLiBXaGF0V0cgc2VwYXJhdGVzIHRoZXNlLlxuICAgICAqIFRlc3Q6IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpKVxuICAgICAqICAtIENocm9tZSA9PT0gXCJbb2JqZWN0IEhUTUxUYWJsZUNlbGxFbGVtZW50XVwiXG4gICAgICogIC0gRmlyZWZveCA9PT0gXCJbb2JqZWN0IEhUTUxUYWJsZUNlbGxFbGVtZW50XVwiXG4gICAgICogIC0gU2FmYXJpID09PSBcIltvYmplY3QgSFRNTFRhYmxlQ2VsbEVsZW1lbnRdXCJcbiAgICAgKi9cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgb2JqLnRhZ05hbWUgPT09ICdURCcpIHtcbiAgICAgIHJldHVybiAnSFRNTFRhYmxlRGF0YUNlbGxFbGVtZW50JztcbiAgICB9XG5cbiAgICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICAgKiAoaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jaHRtbHRhYmxlaGVhZGVyY2VsbGVsZW1lbnQpXG4gICAgICogV2hhdFdHIEhUTUwkNC45LjkgLSBUaGUgYHRkYCBlbGVtZW50IC0gSW50ZXJmYWNlIGBIVE1MVGFibGVIZWFkZXJDZWxsRWxlbWVudGBcbiAgICAgKiBOb3RlOiBNb3N0IGJyb3dzZXJzIGN1cnJlbnRseSBhZGhlciB0byB0aGUgVzNDIERPTSBMZXZlbCAyIHNwZWNcbiAgICAgKiAgICAgICAoaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0yLUhUTUwvaHRtbC5odG1sI0lELTgyOTE1MDc1KVxuICAgICAqICAgICAgIHdoaWNoIHN1Z2dlc3RzIHRoYXQgYnJvd3NlcnMgc2hvdWxkIHVzZSBIVE1MVGFibGVDZWxsRWxlbWVudCBmb3JcbiAgICAgKiAgICAgICBib3RoIFREIGFuZCBUSCBlbGVtZW50cy4gV2hhdFdHIHNlcGFyYXRlcyB0aGVzZS5cbiAgICAgKiBUZXN0OiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKSlcbiAgICAgKiAgLSBDaHJvbWUgPT09IFwiW29iamVjdCBIVE1MVGFibGVDZWxsRWxlbWVudF1cIlxuICAgICAqICAtIEZpcmVmb3ggPT09IFwiW29iamVjdCBIVE1MVGFibGVDZWxsRWxlbWVudF1cIlxuICAgICAqICAtIFNhZmFyaSA9PT0gXCJbb2JqZWN0IEhUTUxUYWJsZUNlbGxFbGVtZW50XVwiXG4gICAgICovXG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmIG9iai50YWdOYW1lID09PSAnVEgnKSB7XG4gICAgICByZXR1cm4gJ0hUTUxUYWJsZUhlYWRlckNlbGxFbGVtZW50JztcbiAgICB9XG4gIH1cblxuICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAqIFByZTpcbiAgKiAgIEZsb2F0NjRBcnJheSAgICAgICB4IDYyNSw2NDQgb3BzL3NlYyDCsTEuNTglICg4MCBydW5zIHNhbXBsZWQpXG4gICogICBGbG9hdDMyQXJyYXkgICAgICAgeCAxLDI3OSw4NTIgb3BzL3NlYyDCsTIuOTElICg3NyBydW5zIHNhbXBsZWQpXG4gICogICBVaW50MzJBcnJheSAgICAgICAgeCAxLDE3OCwxODUgb3BzL3NlYyDCsTEuOTUlICg4MyBydW5zIHNhbXBsZWQpXG4gICogICBVaW50MTZBcnJheSAgICAgICAgeCAxLDAwOCwzODAgb3BzL3NlYyDCsTIuMjUlICg4MCBydW5zIHNhbXBsZWQpXG4gICogICBVaW50OEFycmF5ICAgICAgICAgeCAxLDEyOCwwNDAgb3BzL3NlYyDCsTIuMTElICg4MSBydW5zIHNhbXBsZWQpXG4gICogICBJbnQzMkFycmF5ICAgICAgICAgeCAxLDE3MCwxMTkgb3BzL3NlYyDCsTIuODglICg4MCBydW5zIHNhbXBsZWQpXG4gICogICBJbnQxNkFycmF5ICAgICAgICAgeCAxLDE3NiwzNDggb3BzL3NlYyDCsTUuNzklICg4NiBydW5zIHNhbXBsZWQpXG4gICogICBJbnQ4QXJyYXkgICAgICAgICAgeCAxLDA1OCw3MDcgb3BzL3NlYyDCsTQuOTQlICg3NyBydW5zIHNhbXBsZWQpXG4gICogICBVaW50OENsYW1wZWRBcnJheSAgeCAxLDExMCw2MzMgb3BzL3NlYyDCsTQuMjAlICg4MCBydW5zIHNhbXBsZWQpXG4gICogUG9zdDpcbiAgKiAgIEZsb2F0NjRBcnJheSAgICAgICB4IDcsMTA1LDY3MSBvcHMvc2VjIMKxMTMuNDclICg2NCBydW5zIHNhbXBsZWQpXG4gICogICBGbG9hdDMyQXJyYXkgICAgICAgeCA1LDg4Nyw5MTIgb3BzL3NlYyDCsTEuNDYlICg4MiBydW5zIHNhbXBsZWQpXG4gICogICBVaW50MzJBcnJheSAgICAgICAgeCA2LDQ5MSw2NjEgb3BzL3NlYyDCsTEuNzYlICg3OSBydW5zIHNhbXBsZWQpXG4gICogICBVaW50MTZBcnJheSAgICAgICAgeCA2LDU1OSw3OTUgb3BzL3NlYyDCsTEuNjclICg4MiBydW5zIHNhbXBsZWQpXG4gICogICBVaW50OEFycmF5ICAgICAgICAgeCA2LDQ2Myw5NjYgb3BzL3NlYyDCsTEuNDMlICg4NSBydW5zIHNhbXBsZWQpXG4gICogICBJbnQzMkFycmF5ICAgICAgICAgeCA1LDY0MSw4NDEgb3BzL3NlYyDCsTMuNDklICg4MSBydW5zIHNhbXBsZWQpXG4gICogICBJbnQxNkFycmF5ICAgICAgICAgeCA2LDU4Myw1MTEgb3BzL3NlYyDCsTEuOTglICg4MCBydW5zIHNhbXBsZWQpXG4gICogICBJbnQ4QXJyYXkgICAgICAgICAgeCA2LDYwNiwwNzggb3BzL3NlYyDCsTEuNzQlICg4MSBydW5zIHNhbXBsZWQpXG4gICogICBVaW50OENsYW1wZWRBcnJheSAgeCA2LDYwMiwyMjQgb3BzL3NlYyDCsTEuNzclICg4MyBydW5zIHNhbXBsZWQpXG4gICovXG4gIHZhciBzdHJpbmdUYWcgPSAoc3ltYm9sVG9TdHJpbmdUYWdFeGlzdHMgJiYgb2JqW1N5bWJvbC50b1N0cmluZ1RhZ10pO1xuICBpZiAodHlwZW9mIHN0cmluZ1RhZyA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gc3RyaW5nVGFnO1xuICB9XG5cbiAgdmFyIG9ialByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopO1xuICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAqIFByZTpcbiAgKiAgIHJlZ2V4IGxpdGVyYWwgICAgICB4IDEsNzcyLDM4NSBvcHMvc2VjIMKxMS44NSUgKDc3IHJ1bnMgc2FtcGxlZClcbiAgKiAgIHJlZ2V4IGNvbnN0cnVjdG9yICB4IDIsMTQzLDYzNCBvcHMvc2VjIMKxMi40NiUgKDc4IHJ1bnMgc2FtcGxlZClcbiAgKiBQb3N0OlxuICAqICAgcmVnZXggbGl0ZXJhbCAgICAgIHggMyw5MjgsMDA5IG9wcy9zZWMgwrEwLjY1JSAoNzggcnVucyBzYW1wbGVkKVxuICAqICAgcmVnZXggY29uc3RydWN0b3IgIHggMyw5MzEsMTA4IG9wcy9zZWMgwrEwLjU4JSAoODQgcnVucyBzYW1wbGVkKVxuICAqL1xuICBpZiAob2JqUHJvdG90eXBlID09PSBSZWdFeHAucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuICdSZWdFeHAnO1xuICB9XG5cbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgKiBQcmU6XG4gICogICBkYXRlICAgICAgICAgICAgICAgeCAyLDEzMCwwNzQgb3BzL3NlYyDCsTQuNDIlICg2OCBydW5zIHNhbXBsZWQpXG4gICogUG9zdDpcbiAgKiAgIGRhdGUgICAgICAgICAgICAgICB4IDMsOTUzLDc3OSBvcHMvc2VjIMKxMS4zNSUgKDc3IHJ1bnMgc2FtcGxlZClcbiAgKi9cbiAgaWYgKG9ialByb3RvdHlwZSA9PT0gRGF0ZS5wcm90b3R5cGUpIHtcbiAgICByZXR1cm4gJ0RhdGUnO1xuICB9XG5cbiAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAqIChodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wL2luZGV4Lmh0bWwjc2VjLXByb21pc2UucHJvdG90eXBlLUBAdG9zdHJpbmd0YWcpXG4gICAqIEVTNiQyNS40LjUuNCAtIFByb21pc2UucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddIHNob3VsZCBiZSBcIlByb21pc2VcIjpcbiAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChQcm9taXNlLnJlc29sdmUoKSlgYFxuICAgKiAgLSBDaHJvbWUgPD00NyA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIlxuICAgKiAgLSBFZGdlIDw9MjAgPT09IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICogIC0gRmlyZWZveCAyOS1MYXRlc3QgPT09IFwiW29iamVjdCBQcm9taXNlXVwiXG4gICAqICAtIFNhZmFyaSA3LjEtTGF0ZXN0ID09PSBcIltvYmplY3QgUHJvbWlzZV1cIlxuICAgKi9cbiAgaWYgKHByb21pc2VFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBQcm9taXNlLnByb3RvdHlwZSkge1xuICAgIHJldHVybiAnUHJvbWlzZSc7XG4gIH1cblxuICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAqIFByZTpcbiAgKiAgIHNldCAgICAgICAgICAgICAgICB4IDIsMjIyLDE4NiBvcHMvc2VjIMKxMS4zMSUgKDgyIHJ1bnMgc2FtcGxlZClcbiAgKiBQb3N0OlxuICAqICAgc2V0ICAgICAgICAgICAgICAgIHggNCw1NDUsODc5IG9wcy9zZWMgwrExLjEzJSAoODMgcnVucyBzYW1wbGVkKVxuICAqL1xuICBpZiAoc2V0RXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gU2V0LnByb3RvdHlwZSkge1xuICAgIHJldHVybiAnU2V0JztcbiAgfVxuXG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICogUHJlOlxuICAqICAgbWFwICAgICAgICAgICAgICAgIHggMiwzOTYsODQyIG9wcy9zZWMgwrExLjU5JSAoODEgcnVucyBzYW1wbGVkKVxuICAqIFBvc3Q6XG4gICogICBtYXAgICAgICAgICAgICAgICAgeCA0LDE4Myw5NDUgb3BzL3NlYyDCsTYuNTklICg4MiBydW5zIHNhbXBsZWQpXG4gICovXG4gIGlmIChtYXBFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBNYXAucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuICdNYXAnO1xuICB9XG5cbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgKiBQcmU6XG4gICogICB3ZWFrc2V0ICAgICAgICAgICAgeCAxLDMyMywyMjAgb3BzL3NlYyDCsTIuMTclICg3NiBydW5zIHNhbXBsZWQpXG4gICogUG9zdDpcbiAgKiAgIHdlYWtzZXQgICAgICAgICAgICB4IDQsMjM3LDUxMCBvcHMvc2VjIMKxMi4wMSUgKDc3IHJ1bnMgc2FtcGxlZClcbiAgKi9cbiAgaWYgKHdlYWtTZXRFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBXZWFrU2V0LnByb3RvdHlwZSkge1xuICAgIHJldHVybiAnV2Vha1NldCc7XG4gIH1cblxuICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAqIFByZTpcbiAgKiAgIHdlYWttYXAgICAgICAgICAgICB4IDEsNTAwLDI2MCBvcHMvc2VjIMKxMi4wMiUgKDc4IHJ1bnMgc2FtcGxlZClcbiAgKiBQb3N0OlxuICAqICAgd2Vha21hcCAgICAgICAgICAgIHggMyw4ODEsMzg0IG9wcy9zZWMgwrExLjQ1JSAoODIgcnVucyBzYW1wbGVkKVxuICAqL1xuICBpZiAod2Vha01hcEV4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IFdlYWtNYXAucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuICdXZWFrTWFwJztcbiAgfVxuXG4gIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgKiAoaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC9pbmRleC5odG1sI3NlYy1kYXRhdmlldy5wcm90b3R5cGUtQEB0b3N0cmluZ3RhZylcbiAgICogRVM2JDI0LjIuNC4yMSAtIERhdGFWaWV3LnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXSBzaG91bGQgYmUgXCJEYXRhVmlld1wiOlxuICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKWBgXG4gICAqICAtIEVkZ2UgPD0xMyA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIlxuICAgKi9cbiAgaWYgKGRhdGFWaWV3RXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gRGF0YVZpZXcucHJvdG90eXBlKSB7XG4gICAgcmV0dXJuICdEYXRhVmlldyc7XG4gIH1cblxuICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICogKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvaW5kZXguaHRtbCNzZWMtJW1hcGl0ZXJhdG9ycHJvdG90eXBlJS1AQHRvc3RyaW5ndGFnKVxuICAgKiBFUzYkMjMuMS41LjIuMiAtICVNYXBJdGVyYXRvclByb3RvdHlwZSVbQEB0b1N0cmluZ1RhZ10gc2hvdWxkIGJlIFwiTWFwIEl0ZXJhdG9yXCI6XG4gICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3IE1hcCgpLmVudHJpZXMoKSlgYFxuICAgKiAgLSBFZGdlIDw9MTMgPT09IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICovXG4gIGlmIChtYXBFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBtYXBJdGVyYXRvclByb3RvdHlwZSkge1xuICAgIHJldHVybiAnTWFwIEl0ZXJhdG9yJztcbiAgfVxuXG4gIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgKiAoaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC9pbmRleC5odG1sI3NlYy0lc2V0aXRlcmF0b3Jwcm90b3R5cGUlLUBAdG9zdHJpbmd0YWcpXG4gICAqIEVTNiQyMy4yLjUuMi4yIC0gJVNldEl0ZXJhdG9yUHJvdG90eXBlJVtAQHRvU3RyaW5nVGFnXSBzaG91bGQgYmUgXCJTZXQgSXRlcmF0b3JcIjpcbiAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXcgU2V0KCkuZW50cmllcygpKWBgXG4gICAqICAtIEVkZ2UgPD0xMyA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIlxuICAgKi9cbiAgaWYgKHNldEV4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IHNldEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgcmV0dXJuICdTZXQgSXRlcmF0b3InO1xuICB9XG5cbiAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAqIChodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wL2luZGV4Lmh0bWwjc2VjLSVhcnJheWl0ZXJhdG9ycHJvdG90eXBlJS1AQHRvc3RyaW5ndGFnKVxuICAgKiBFUzYkMjIuMS41LjIuMiAtICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJVtAQHRvU3RyaW5nVGFnXSBzaG91bGQgYmUgXCJBcnJheSBJdGVyYXRvclwiOlxuICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSlgYFxuICAgKiAgLSBFZGdlIDw9MTMgPT09IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICovXG4gIGlmIChhcnJheUl0ZXJhdG9yRXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gYXJyYXlJdGVyYXRvclByb3RvdHlwZSkge1xuICAgIHJldHVybiAnQXJyYXkgSXRlcmF0b3InO1xuICB9XG5cbiAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAqIChodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wL2luZGV4Lmh0bWwjc2VjLSVzdHJpbmdpdGVyYXRvcnByb3RvdHlwZSUtQEB0b3N0cmluZ3RhZylcbiAgICogRVM2JDIxLjEuNS4yLjIgLSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlW0BAdG9TdHJpbmdUYWddIHNob3VsZCBiZSBcIlN0cmluZyBJdGVyYXRvclwiOlxuICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCcnW1N5bWJvbC5pdGVyYXRvcl0oKSlgYFxuICAgKiAgLSBFZGdlIDw9MTMgPT09IFwiW29iamVjdCBPYmplY3RdXCJcbiAgICovXG4gIGlmIChzdHJpbmdJdGVyYXRvckV4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IHN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgcmV0dXJuICdTdHJpbmcgSXRlcmF0b3InO1xuICB9XG5cbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgKiBQcmU6XG4gICogICBvYmplY3QgZnJvbSBudWxsICAgeCAyLDQyNCwzMjAgb3BzL3NlYyDCsTEuNjclICg3NiBydW5zIHNhbXBsZWQpXG4gICogUG9zdDpcbiAgKiAgIG9iamVjdCBmcm9tIG51bGwgICB4IDUsODM4LDAwMCBvcHMvc2VjIMKxMC45OSUgKDg0IHJ1bnMgc2FtcGxlZClcbiAgKi9cbiAgaWYgKG9ialByb3RvdHlwZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiAnT2JqZWN0JztcbiAgfVxuXG4gIHJldHVybiBPYmplY3RcbiAgICAucHJvdG90eXBlXG4gICAgLnRvU3RyaW5nXG4gICAgLmNhbGwob2JqKVxuICAgIC5zbGljZSh0b1N0cmluZ0xlZnRTbGljZUxlbmd0aCwgdG9TdHJpbmdSaWdodFNsaWNlTGVuZ3RoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLnR5cGVEZXRlY3QgPSBtb2R1bGUuZXhwb3J0cztcbiIsIi8qIVxuICogQ2hhaSAtIGV4cGVjdFR5cGVzIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuZXhwZWN0VHlwZXMob2JqLCB0eXBlcylcbiAqXG4gKiBFbnN1cmVzIHRoYXQgdGhlIG9iamVjdCBiZWluZyB0ZXN0ZWQgYWdhaW5zdCBpcyBvZiBhIHZhbGlkIHR5cGUuXG4gKlxuICogICAgIHV0aWxzLmV4cGVjdFR5cGVzKHRoaXMsIFsnYXJyYXknLCAnb2JqZWN0JywgJ3N0cmluZyddKTtcbiAqXG4gKiBAcGFyYW0ge01peGVkfSBvYmogY29uc3RydWN0ZWQgQXNzZXJ0aW9uXG4gKiBAcGFyYW0ge0FycmF5fSB0eXBlIEEgbGlzdCBvZiBhbGxvd2VkIHR5cGVzIGZvciB0aGlzIGFzc2VydGlvblxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgZXhwZWN0VHlwZXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxudmFyIEFzc2VydGlvbkVycm9yID0gcmVxdWlyZSgnYXNzZXJ0aW9uLWVycm9yJyk7XG52YXIgZmxhZyA9IHJlcXVpcmUoJy4vZmxhZycpO1xudmFyIHR5cGUgPSByZXF1aXJlKCd0eXBlLWRldGVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGV4cGVjdFR5cGVzKG9iaiwgdHlwZXMpIHtcbiAgdmFyIGZsYWdNc2cgPSBmbGFnKG9iaiwgJ21lc3NhZ2UnKTtcbiAgdmFyIHNzZmkgPSBmbGFnKG9iaiwgJ3NzZmknKTtcblxuICBmbGFnTXNnID0gZmxhZ01zZyA/IGZsYWdNc2cgKyAnOiAnIDogJyc7XG5cbiAgb2JqID0gZmxhZyhvYmosICdvYmplY3QnKTtcbiAgdHlwZXMgPSB0eXBlcy5tYXAoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQudG9Mb3dlckNhc2UoKTsgfSk7XG4gIHR5cGVzLnNvcnQoKTtcblxuICAvLyBUcmFuc2Zvcm1zIFsnbG9yZW0nLCAnaXBzdW0nXSBpbnRvICdhIGxvcmVtLCBvciBhbiBpcHN1bSdcbiAgdmFyIHN0ciA9IHR5cGVzLm1hcChmdW5jdGlvbiAodCwgaW5kZXgpIHtcbiAgICB2YXIgYXJ0ID0gflsgJ2EnLCAnZScsICdpJywgJ28nLCAndScgXS5pbmRleE9mKHQuY2hhckF0KDApKSA/ICdhbicgOiAnYSc7XG4gICAgdmFyIG9yID0gdHlwZXMubGVuZ3RoID4gMSAmJiBpbmRleCA9PT0gdHlwZXMubGVuZ3RoIC0gMSA/ICdvciAnIDogJyc7XG4gICAgcmV0dXJuIG9yICsgYXJ0ICsgJyAnICsgdDtcbiAgfSkuam9pbignLCAnKTtcblxuICB2YXIgb2JqVHlwZSA9IHR5cGUob2JqKS50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmICghdHlwZXMuc29tZShmdW5jdGlvbiAoZXhwZWN0ZWQpIHsgcmV0dXJuIG9ialR5cGUgPT09IGV4cGVjdGVkOyB9KSkge1xuICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgIGZsYWdNc2cgKyAnb2JqZWN0IHRlc3RlZCBtdXN0IGJlICcgKyBzdHIgKyAnLCBidXQgJyArIG9ialR5cGUgKyAnIGdpdmVuJyxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIHNzZmlcbiAgICApO1xuICB9XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gZ2V0QWN0dWFsIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuZ2V0QWN0dWFsKG9iamVjdCwgW2FjdHVhbF0pXG4gKlxuICogUmV0dXJucyB0aGUgYGFjdHVhbGAgdmFsdWUgZm9yIGFuIEFzc2VydGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IChjb25zdHJ1Y3RlZCBBc3NlcnRpb24pXG4gKiBAcGFyYW0ge0FyZ3VtZW50c30gY2hhaS5Bc3NlcnRpb24ucHJvdG90eXBlLmFzc2VydCBhcmd1bWVudHNcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGdldEFjdHVhbFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0QWN0dWFsKG9iaiwgYXJncykge1xuICByZXR1cm4gYXJncy5sZW5ndGggPiA0ID8gYXJnc1s0XSA6IG9iai5fb2JqO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogIVxuICogQ2hhaSAtIGdldEZ1bmNOYW1lIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTYgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuZ2V0RnVuY05hbWUoY29uc3RydWN0b3JGbilcbiAqXG4gKiBSZXR1cm5zIHRoZSBuYW1lIG9mIGEgZnVuY3Rpb24uXG4gKiBXaGVuIGEgbm9uLWZ1bmN0aW9uIGluc3RhbmNlIGlzIHBhc3NlZCwgcmV0dXJucyBgbnVsbGAuXG4gKiBUaGlzIGFsc28gaW5jbHVkZXMgYSBwb2x5ZmlsbCBmdW5jdGlvbiBpZiBgYUZ1bmMubmFtZWAgaXMgbm90IGRlZmluZWQuXG4gKlxuICogQG5hbWUgZ2V0RnVuY05hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmN0XG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnZhciB0b1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmdW5jdGlvbk5hbWVNYXRjaCA9IC9cXHMqZnVuY3Rpb24oPzpcXHN8XFxzKlxcL1xcKlteKD86KlxcLyldK1xcKlxcL1xccyopKihbXlxcc1xcKFxcL10rKS87XG5mdW5jdGlvbiBnZXRGdW5jTmFtZShhRnVuYykge1xuICBpZiAodHlwZW9mIGFGdW5jICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgbmFtZSA9ICcnO1xuICBpZiAodHlwZW9mIEZ1bmN0aW9uLnByb3RvdHlwZS5uYW1lID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgYUZ1bmMubmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBIZXJlIHdlIHJ1biBhIHBvbHlmaWxsIGlmIEZ1bmN0aW9uIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBuYW1lYCBwcm9wZXJ0eSBhbmQgaWYgYUZ1bmMubmFtZSBpcyBub3QgZGVmaW5lZFxuICAgIHZhciBtYXRjaCA9IHRvU3RyaW5nLmNhbGwoYUZ1bmMpLm1hdGNoKGZ1bmN0aW9uTmFtZU1hdGNoKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIG5hbWUgPSBtYXRjaFsxXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgd2UndmUgZ290IGEgYG5hbWVgIHByb3BlcnR5IHdlIGp1c3QgdXNlIGl0XG4gICAgbmFtZSA9IGFGdW5jLm5hbWU7XG4gIH1cblxuICByZXR1cm4gbmFtZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRGdW5jTmFtZTtcbiIsIi8qIVxuICogQ2hhaSAtIGdldFByb3BlcnRpZXMgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5nZXRQcm9wZXJ0aWVzKG9iamVjdClcbiAqXG4gKiBUaGlzIGFsbG93cyB0aGUgcmV0cmlldmFsIG9mIHByb3BlcnR5IG5hbWVzIG9mIGFuIG9iamVjdCwgZW51bWVyYWJsZSBvciBub3QsXG4gKiBpbmhlcml0ZWQgb3Igbm90LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGdldFByb3BlcnRpZXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQcm9wZXJ0aWVzKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqZWN0KTtcblxuICBmdW5jdGlvbiBhZGRQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICAgIGlmIChyZXN1bHQuaW5kZXhPZihwcm9wZXJ0eSkgPT09IC0xKSB7XG4gICAgICByZXN1bHQucHVzaChwcm9wZXJ0eSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7XG4gIHdoaWxlIChwcm90byAhPT0gbnVsbCkge1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3RvKS5mb3JFYWNoKGFkZFByb3BlcnR5KTtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIGdldEVudW1lcmFibGVQcm9wZXJ0aWVzIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuZ2V0RW51bWVyYWJsZVByb3BlcnRpZXMob2JqZWN0KVxuICpcbiAqIFRoaXMgYWxsb3dzIHRoZSByZXRyaWV2YWwgb2YgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBhbiBvYmplY3QsXG4gKiBpbmhlcml0ZWQgb3Igbm90LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGdldEVudW1lcmFibGVQcm9wZXJ0aWVzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0RW51bWVyYWJsZVByb3BlcnRpZXMob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIgbmFtZSBpbiBvYmplY3QpIHtcbiAgICByZXN1bHQucHVzaChuYW1lKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIC8qKlxuICAgKiAjIyMgY29uZmlnLmluY2x1ZGVTdGFja1xuICAgKlxuICAgKiBVc2VyIGNvbmZpZ3VyYWJsZSBwcm9wZXJ0eSwgaW5mbHVlbmNlcyB3aGV0aGVyIHN0YWNrIHRyYWNlXG4gICAqIGlzIGluY2x1ZGVkIGluIEFzc2VydGlvbiBlcnJvciBtZXNzYWdlLiBEZWZhdWx0IG9mIGZhbHNlXG4gICAqIHN1cHByZXNzZXMgc3RhY2sgdHJhY2UgaW4gdGhlIGVycm9yIG1lc3NhZ2UuXG4gICAqXG4gICAqICAgICBjaGFpLmNvbmZpZy5pbmNsdWRlU3RhY2sgPSB0cnVlOyAgLy8gZW5hYmxlIHN0YWNrIG9uIGVycm9yXG4gICAqXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn1cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgaW5jbHVkZVN0YWNrOiBmYWxzZSxcblxuICAvKipcbiAgICogIyMjIGNvbmZpZy5zaG93RGlmZlxuICAgKlxuICAgKiBVc2VyIGNvbmZpZ3VyYWJsZSBwcm9wZXJ0eSwgaW5mbHVlbmNlcyB3aGV0aGVyIG9yIG5vdFxuICAgKiB0aGUgYHNob3dEaWZmYCBmbGFnIHNob3VsZCBiZSBpbmNsdWRlZCBpbiB0aGUgdGhyb3duXG4gICAqIEFzc2VydGlvbkVycm9ycy4gYGZhbHNlYCB3aWxsIGFsd2F5cyBiZSBgZmFsc2VgOyBgdHJ1ZWBcbiAgICogd2lsbCBiZSB0cnVlIHdoZW4gdGhlIGFzc2VydGlvbiBoYXMgcmVxdWVzdGVkIGEgZGlmZlxuICAgKiBiZSBzaG93bi5cbiAgICpcbiAgICogQHBhcmFtIHtCb29sZWFufVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBzaG93RGlmZjogdHJ1ZSxcblxuICAvKipcbiAgICogIyMjIGNvbmZpZy50cnVuY2F0ZVRocmVzaG9sZFxuICAgKlxuICAgKiBVc2VyIGNvbmZpZ3VyYWJsZSBwcm9wZXJ0eSwgc2V0cyBsZW5ndGggdGhyZXNob2xkIGZvciBhY3R1YWwgYW5kXG4gICAqIGV4cGVjdGVkIHZhbHVlcyBpbiBhc3NlcnRpb24gZXJyb3JzLiBJZiB0aGlzIHRocmVzaG9sZCBpcyBleGNlZWRlZCwgZm9yXG4gICAqIGV4YW1wbGUgZm9yIGxhcmdlIGRhdGEgc3RydWN0dXJlcywgdGhlIHZhbHVlIGlzIHJlcGxhY2VkIHdpdGggc29tZXRoaW5nXG4gICAqIGxpa2UgYFsgQXJyYXkoMykgXWAgb3IgYHsgT2JqZWN0IChwcm9wMSwgcHJvcDIpIH1gLlxuICAgKlxuICAgKiBTZXQgaXQgdG8gemVybyBpZiB5b3Ugd2FudCB0byBkaXNhYmxlIHRydW5jYXRpbmcgYWx0b2dldGhlci5cbiAgICpcbiAgICogVGhpcyBpcyBlc3BlY2lhbGx5IHVzZXJmdWwgd2hlbiBkb2luZyBhc3NlcnRpb25zIG9uIGFycmF5czogaGF2aW5nIHRoaXNcbiAgICogc2V0IHRvIGEgcmVhc29uYWJsZSBsYXJnZSB2YWx1ZSBtYWtlcyB0aGUgZmFpbHVyZSBtZXNzYWdlcyByZWFkaWx5XG4gICAqIGluc3BlY3RhYmxlLlxuICAgKlxuICAgKiAgICAgY2hhaS5jb25maWcudHJ1bmNhdGVUaHJlc2hvbGQgPSAwOyAgLy8gZGlzYWJsZSB0cnVuY2F0aW5nXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICB0cnVuY2F0ZVRocmVzaG9sZDogNDAsXG5cbiAgLyoqXG4gICAqICMjIyBjb25maWcudXNlUHJveHlcbiAgICpcbiAgICogVXNlciBjb25maWd1cmFibGUgcHJvcGVydHksIGRlZmluZXMgaWYgY2hhaSB3aWxsIHVzZSBhIFByb3h5IHRvIHRocm93XG4gICAqIGFuIGVycm9yIHdoZW4gYSBub24tZXhpc3RlbnQgcHJvcGVydHkgaXMgcmVhZCwgd2hpY2ggcHJvdGVjdHMgdXNlcnNcbiAgICogZnJvbSB0eXBvcyB3aGVuIHVzaW5nIHByb3BlcnR5LWJhc2VkIGFzc2VydGlvbnMuXG4gICAqXG4gICAqIFNldCBpdCB0byBmYWxzZSBpZiB5b3Ugd2FudCB0byBkaXNhYmxlIHRoaXMgZmVhdHVyZS5cbiAgICpcbiAgICogICAgIGNoYWkuY29uZmlnLnVzZVByb3h5ID0gZmFsc2U7ICAvLyBkaXNhYmxlIHVzZSBvZiBQcm94eVxuICAgKlxuICAgKiBUaGlzIGZlYXR1cmUgaXMgYXV0b21hdGljYWxseSBkaXNhYmxlZCByZWdhcmRsZXNzIG9mIHRoaXMgY29uZmlnIHZhbHVlXG4gICAqIGluIGVudmlyb25tZW50cyB0aGF0IGRvbid0IHN1cHBvcnQgcHJveGllcy5cbiAgICpcbiAgICogQHBhcmFtIHtCb29sZWFufVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICB1c2VQcm94eTogdHJ1ZSxcblxuICAvKipcbiAgICogIyMjIGNvbmZpZy5wcm94eUV4Y2x1ZGVkS2V5c1xuICAgKlxuICAgKiBVc2VyIGNvbmZpZ3VyYWJsZSBwcm9wZXJ0eSwgZGVmaW5lcyB3aGljaCBwcm9wZXJ0aWVzIHNob3VsZCBiZSBpZ25vcmVkXG4gICAqIGluc3RlYWQgb2YgdGhyb3dpbmcgYW4gZXJyb3IgaWYgdGhleSBkbyBub3QgZXhpc3Qgb24gdGhlIGFzc2VydGlvbi5cbiAgICogVGhpcyBpcyBvbmx5IGFwcGxpZWQgaWYgdGhlIGVudmlyb25tZW50IENoYWkgaXMgcnVubmluZyBpbiBzdXBwb3J0cyBwcm94aWVzIGFuZFxuICAgKiBpZiB0aGUgYHVzZVByb3h5YCBjb25maWd1cmF0aW9uIHNldHRpbmcgaXMgZW5hYmxlZC5cbiAgICogQnkgZGVmYXVsdCwgYHRoZW5gIGFuZCBgaW5zcGVjdGAgd2lsbCBub3QgdGhyb3cgYW4gZXJyb3IgaWYgdGhleSBkbyBub3QgZXhpc3Qgb24gdGhlXG4gICAqIGFzc2VydGlvbiBvYmplY3QgYmVjYXVzZSB0aGUgYC5pbnNwZWN0YCBwcm9wZXJ0eSBpcyByZWFkIGJ5IGB1dGlsLmluc3BlY3RgIChmb3IgZXhhbXBsZSwgd2hlblxuICAgKiB1c2luZyBgY29uc29sZS5sb2dgIG9uIHRoZSBhc3NlcnRpb24gb2JqZWN0KSBhbmQgYC50aGVuYCBpcyBuZWNlc3NhcnkgZm9yIHByb21pc2UgdHlwZS1jaGVja2luZy5cbiAgICpcbiAgICogICAgIC8vIEJ5IGRlZmF1bHQgdGhlc2Uga2V5cyB3aWxsIG5vdCB0aHJvdyBhbiBlcnJvciBpZiB0aGV5IGRvIG5vdCBleGlzdCBvbiB0aGUgYXNzZXJ0aW9uIG9iamVjdFxuICAgKiAgICAgY2hhaS5jb25maWcucHJveHlFeGNsdWRlZEtleXMgPSBbJ3RoZW4nLCAnaW5zcGVjdCddO1xuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBwcm94eUV4Y2x1ZGVkS2V5czogWyd0aGVuJywgJ2luc3BlY3QnLCAndG9KU09OJ11cbn07XG4iLCIvLyBUaGlzIGlzIChhbG1vc3QpIGRpcmVjdGx5IGZyb20gTm9kZS5qcyB1dGlsc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2Jsb2IvZjhjMzM1ZDBjYWY0N2YxNmQzMTQxM2Y4OWFhMjhlZGEzODc4ZTNhYS9saWIvdXRpbC5qc1xuXG52YXIgZ2V0TmFtZSA9IHJlcXVpcmUoJ2dldC1mdW5jLW5hbWUnKTtcbnZhciBnZXRQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi9nZXRQcm9wZXJ0aWVzJyk7XG52YXIgZ2V0RW51bWVyYWJsZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuL2dldEVudW1lcmFibGVQcm9wZXJ0aWVzJyk7XG52YXIgY29uZmlnID0gcmVxdWlyZSgnLi4vY29uZmlnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zcGVjdDtcblxuLyoqXG4gKiAjIyMgLmluc3BlY3Qob2JqLCBbc2hvd0hpZGRlbl0sIFtkZXB0aF0sIFtjb2xvcnNdKVxuICpcbiAqIEVjaG9lcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJpZXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gc2hvd0hpZGRlbiBGbGFnIHRoYXQgc2hvd3MgaGlkZGVuIChub3QgZW51bWVyYWJsZSlcbiAqICAgIHByb3BlcnRpZXMgb2Ygb2JqZWN0cy4gRGVmYXVsdCBpcyBmYWxzZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkZXB0aCBEZXB0aCBpbiB3aGljaCB0byBkZXNjZW5kIGluIG9iamVjdC4gRGVmYXVsdCBpcyAyLlxuICogQHBhcmFtIHtCb29sZWFufSBjb2xvcnMgRmxhZyB0byB0dXJuIG9uIEFOU0kgZXNjYXBlIGNvZGVzIHRvIGNvbG9yIHRoZVxuICogICAgb3V0cHV0LiBEZWZhdWx0IGlzIGZhbHNlIChubyBjb2xvcmluZykuXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBpbnNwZWN0XG4gKi9cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKSB7XG4gIHZhciBjdHggPSB7XG4gICAgc2hvd0hpZGRlbjogc2hvd0hpZGRlbixcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHI7IH1cbiAgfTtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCAodHlwZW9mIGRlcHRoID09PSAndW5kZWZpbmVkJyA/IDIgOiBkZXB0aCkpO1xufVxuXG4vLyBSZXR1cm5zIHRydWUgaWYgb2JqZWN0IGlzIGEgRE9NIGVsZW1lbnQuXG52YXIgaXNET01FbGVtZW50ID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICBpZiAodHlwZW9mIEhUTUxFbGVtZW50ID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2JqZWN0ICYmXG4gICAgICB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgICAgJ25vZGVUeXBlJyBpbiBvYmplY3QgJiZcbiAgICAgIG9iamVjdC5ub2RlVHlwZSA9PT0gMSAmJlxuICAgICAgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZyc7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlLmluc3BlY3QgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0cy5pbnNwZWN0ICYmXG4gICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgaWYgKHR5cGVvZiByZXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gSWYgdGhpcyBpcyBhIERPTSBlbGVtZW50LCB0cnkgdG8gZ2V0IHRoZSBvdXRlciBIVE1MLlxuICBpZiAoaXNET01FbGVtZW50KHZhbHVlKSkge1xuICAgIGlmICgnb3V0ZXJIVE1MJyBpbiB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlLm91dGVySFRNTDtcbiAgICAgIC8vIFRoaXMgdmFsdWUgZG9lcyBub3QgaGF2ZSBhbiBvdXRlckhUTUwgYXR0cmlidXRlLFxuICAgICAgLy8gICBpdCBjb3VsZCBzdGlsbCBiZSBhbiBYTUwgZWxlbWVudFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBdHRlbXB0IHRvIHNlcmlhbGl6ZSBpdFxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGRvY3VtZW50LnhtbFZlcnNpb24pIHtcbiAgICAgICAgICB2YXIgeG1sU2VyaWFsaXplciA9IG5ldyBYTUxTZXJpYWxpemVyKCk7XG4gICAgICAgICAgcmV0dXJuIHhtbFNlcmlhbGl6ZXIuc2VyaWFsaXplVG9TdHJpbmcodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEZpcmVmb3ggMTEtIGRvIG5vdCBzdXBwb3J0IG91dGVySFRNTFxuICAgICAgICAgIC8vICAgSXQgZG9lcywgaG93ZXZlciwgc3VwcG9ydCBpbm5lckhUTUxcbiAgICAgICAgICAvLyAgIFVzZSB0aGUgZm9sbG93aW5nIHRvIHJlbmRlciB0aGUgZWxlbWVudFxuICAgICAgICAgIHZhciBucyA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuICAgICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobnMsICdfJyk7XG5cbiAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodmFsdWUuY2xvbmVOb2RlKGZhbHNlKSk7XG4gICAgICAgICAgdmFyIGh0bWwgPSBjb250YWluZXIuaW5uZXJIVE1MXG4gICAgICAgICAgICAucmVwbGFjZSgnPjwnLCAnPicgKyB2YWx1ZS5pbm5lckhUTUwgKyAnPCcpO1xuICAgICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICByZXR1cm4gaHRtbDtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIFRoaXMgY291bGQgYmUgYSBub24tbmF0aXZlIERPTSBpbXBsZW1lbnRhdGlvbixcbiAgICAgICAgLy8gICBjb250aW51ZSB3aXRoIHRoZSBub3JtYWwgZmxvdzpcbiAgICAgICAgLy8gICBwcmludGluZyB0aGUgZWxlbWVudCBhcyBpZiBpdCBpcyBhbiBvYmplY3QuXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIgdmlzaWJsZUtleXMgPSBnZXRFbnVtZXJhYmxlUHJvcGVydGllcyh2YWx1ZSk7XG4gIHZhciBrZXlzID0gY3R4LnNob3dIaWRkZW4gPyBnZXRQcm9wZXJ0aWVzKHZhbHVlKSA6IHZpc2libGVLZXlzO1xuXG4gIHZhciBuYW1lLCBuYW1lU3VmZml4O1xuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgLy8gSW4gSUUsIGVycm9ycyBoYXZlIGEgc2luZ2xlIGBzdGFja2AgcHJvcGVydHksIG9yIGlmIHRoZXkgYXJlIHZhbmlsbGEgYEVycm9yYCxcbiAgLy8gYSBgc3RhY2tgIHBsdXMgYGRlc2NyaXB0aW9uYCBwcm9wZXJ0eTsgaWdub3JlIHRob3NlIGZvciBjb25zaXN0ZW5jeS5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwIHx8IChpc0Vycm9yKHZhbHVlKSAmJiAoXG4gICAgICAoa2V5cy5sZW5ndGggPT09IDEgJiYga2V5c1swXSA9PT0gJ3N0YWNrJykgfHxcbiAgICAgIChrZXlzLmxlbmd0aCA9PT0gMiAmJiBrZXlzWzBdID09PSAnZGVzY3JpcHRpb24nICYmIGtleXNbMV0gPT09ICdzdGFjaycpXG4gICAgICkpKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbmFtZSA9IGdldE5hbWUodmFsdWUpO1xuICAgICAgbmFtZVN1ZmZpeCA9IG5hbWUgPyAnOiAnICsgbmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZVN1ZmZpeCArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJydcbiAgICAsIGFycmF5ID0gZmFsc2VcbiAgICAsIHR5cGVkQXJyYXkgPSBmYWxzZVxuICAgICwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICBpZiAoaXNUeXBlZEFycmF5KHZhbHVlKSkge1xuICAgIHR5cGVkQXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBuYW1lID0gZ2V0TmFtZSh2YWx1ZSk7XG4gICAgbmFtZVN1ZmZpeCA9IG5hbWUgPyAnOiAnICsgbmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuYW1lU3VmZml4ICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2UgaWYgKHR5cGVkQXJyYXkpIHtcbiAgICByZXR1cm4gZm9ybWF0VHlwZWRBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuXG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBpZiAodmFsdWUgPT09IDAgJiYgKDEvdmFsdWUpID09PSAtSW5maW5pdHkpIHtcbiAgICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCctMCcsICdudW1iZXInKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuXG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSh2YWx1ZS50b1N0cmluZygpLCAnc3ltYm9sJyk7XG4gIH1cbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgfVxuICB9XG5cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHZhciBzdHIgPSAnWyAnO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoc3RyLmxlbmd0aCA+PSBjb25maWcudHJ1bmNhdGVUaHJlc2hvbGQgLSA3KSB7XG4gICAgICBzdHIgKz0gJy4uLic7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc3RyICs9IHZhbHVlW2ldICsgJywgJztcbiAgfVxuICBzdHIgKz0gJyBdJztcblxuICAvLyBSZW1vdmluZyB0cmFpbGluZyBgLCBgIGlmIHRoZSBhcnJheSB3YXMgbm90IHRydW5jYXRlZFxuICBpZiAoc3RyLmluZGV4T2YoJywgIF0nKSAhPT0gLTEpIHtcbiAgICBzdHIgPSBzdHIucmVwbGFjZSgnLCAgXScsICcgXScpO1xuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZTtcbiAgdmFyIHByb3BEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KTtcbiAgdmFyIHN0cjtcblxuICBpZiAocHJvcERlc2NyaXB0b3IpIHtcbiAgICBpZiAocHJvcERlc2NyaXB0b3IuZ2V0KSB7XG4gICAgICBpZiAocHJvcERlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BEZXNjcmlwdG9yLnNldCkge1xuICAgICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAodmlzaWJsZUtleXMuaW5kZXhPZihrZXkpIDwgMCkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZih2YWx1ZVtrZXldKSA8IDApIHtcbiAgICAgIGlmIChyZWN1cnNlVGltZXMgPT09IG51bGwpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZVtrZXldLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgdmFsdWVba2V5XSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnN1YnN0cigyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG5hbWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zdWJzdHIoMSwgbmFtZS5sZW5ndGggLSAyKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBudW1MaW5lc0VzdCA9IDA7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIG51bUxpbmVzRXN0Kys7XG4gICAgaWYgKGN1ci5pbmRleE9mKCdcXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrO1xuICAgIHJldHVybiBwcmV2ICsgY3VyLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuZnVuY3Rpb24gaXNUeXBlZEFycmF5KGFyKSB7XG4gIC8vIFVuZm9ydHVuYXRlbHkgdGhlcmUncyBubyB3YXkgdG8gY2hlY2sgaWYgYW4gb2JqZWN0IGlzIGEgVHlwZWRBcnJheVxuICAvLyBXZSBoYXZlIHRvIGNoZWNrIGlmIGl0J3Mgb25lIG9mIHRoZXNlIHR5cGVzXG4gIHJldHVybiAodHlwZW9mIGFyID09PSAnb2JqZWN0JyAmJiAvXFx3K0FycmF5XSQvLnRlc3Qob2JqZWN0VG9TdHJpbmcoYXIpKSk7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpIHx8XG4gICAgICAgICAodHlwZW9mIGFyID09PSAnb2JqZWN0JyAmJiBvYmplY3RUb1N0cmluZyhhcikgPT09ICdbb2JqZWN0IEFycmF5XScpO1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gdHlwZW9mIHJlID09PSAnb2JqZWN0JyAmJiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gdHlwZW9mIGQgPT09ICdvYmplY3QnICYmIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gdHlwZW9mIGUgPT09ICdvYmplY3QnICYmIG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nO1xufVxuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG4iLCIvKiFcbiAqIENoYWkgLSBmbGFnIHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKiFcbiAqIE1vZHVsZSBkZXBlbmRhbmNpZXNcbiAqL1xuXG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJy4vaW5zcGVjdCcpO1xudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4uL2NvbmZpZycpO1xuXG4vKipcbiAqICMjIyAub2JqRGlzcGxheShvYmplY3QpXG4gKlxuICogRGV0ZXJtaW5lcyBpZiBhbiBvYmplY3Qgb3IgYW4gYXJyYXkgbWF0Y2hlc1xuICogY3JpdGVyaWEgdG8gYmUgaW5zcGVjdGVkIGluLWxpbmUgZm9yIGVycm9yXG4gKiBtZXNzYWdlcyBvciBzaG91bGQgYmUgdHJ1bmNhdGVkLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGphdmFzY3JpcHQgb2JqZWN0IHRvIGluc3BlY3RcbiAqIEBuYW1lIG9iakRpc3BsYXlcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBvYmpEaXNwbGF5KG9iaikge1xuICB2YXIgc3RyID0gaW5zcGVjdChvYmopXG4gICAgLCB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaik7XG5cbiAgaWYgKGNvbmZpZy50cnVuY2F0ZVRocmVzaG9sZCAmJiBzdHIubGVuZ3RoID49IGNvbmZpZy50cnVuY2F0ZVRocmVzaG9sZCkge1xuICAgIGlmICh0eXBlID09PSAnW29iamVjdCBGdW5jdGlvbl0nKSB7XG4gICAgICByZXR1cm4gIW9iai5uYW1lIHx8IG9iai5uYW1lID09PSAnJ1xuICAgICAgICA/ICdbRnVuY3Rpb25dJ1xuICAgICAgICA6ICdbRnVuY3Rpb246ICcgKyBvYmoubmFtZSArICddJztcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybiAnWyBBcnJheSgnICsgb2JqLmxlbmd0aCArICcpIF0nO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKVxuICAgICAgICAsIGtzdHIgPSBrZXlzLmxlbmd0aCA+IDJcbiAgICAgICAgICA/IGtleXMuc3BsaWNlKDAsIDIpLmpvaW4oJywgJykgKyAnLCAuLi4nXG4gICAgICAgICAgOiBrZXlzLmpvaW4oJywgJyk7XG4gICAgICByZXR1cm4gJ3sgT2JqZWN0ICgnICsga3N0ciArICcpIH0nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gbWVzc2FnZSBjb21wb3NpdGlvbiB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyohXG4gKiBNb2R1bGUgZGVwZW5kYW5jaWVzXG4gKi9cblxudmFyIGZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKVxuICAsIGdldEFjdHVhbCA9IHJlcXVpcmUoJy4vZ2V0QWN0dWFsJylcbiAgLCBpbnNwZWN0ID0gcmVxdWlyZSgnLi9pbnNwZWN0JylcbiAgLCBvYmpEaXNwbGF5ID0gcmVxdWlyZSgnLi9vYmpEaXNwbGF5Jyk7XG5cbi8qKlxuICogIyMjIC5nZXRNZXNzYWdlKG9iamVjdCwgbWVzc2FnZSwgbmVnYXRlTWVzc2FnZSlcbiAqXG4gKiBDb25zdHJ1Y3QgdGhlIGVycm9yIG1lc3NhZ2UgYmFzZWQgb24gZmxhZ3NcbiAqIGFuZCB0ZW1wbGF0ZSB0YWdzLiBUZW1wbGF0ZSB0YWdzIHdpbGwgcmV0dXJuXG4gKiBhIHN0cmluZ2lmaWVkIGluc3BlY3Rpb24gb2YgdGhlIG9iamVjdCByZWZlcmVuY2VkLlxuICpcbiAqIE1lc3NhZ2UgdGVtcGxhdGUgdGFnczpcbiAqIC0gYCN7dGhpc31gIGN1cnJlbnQgYXNzZXJ0ZWQgb2JqZWN0XG4gKiAtIGAje2FjdH1gIGFjdHVhbCB2YWx1ZVxuICogLSBgI3tleHB9YCBleHBlY3RlZCB2YWx1ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgKGNvbnN0cnVjdGVkIEFzc2VydGlvbilcbiAqIEBwYXJhbSB7QXJndW1lbnRzfSBjaGFpLkFzc2VydGlvbi5wcm90b3R5cGUuYXNzZXJ0IGFyZ3VtZW50c1xuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgZ2V0TWVzc2FnZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE1lc3NhZ2Uob2JqLCBhcmdzKSB7XG4gIHZhciBuZWdhdGUgPSBmbGFnKG9iaiwgJ25lZ2F0ZScpXG4gICAgLCB2YWwgPSBmbGFnKG9iaiwgJ29iamVjdCcpXG4gICAgLCBleHBlY3RlZCA9IGFyZ3NbM11cbiAgICAsIGFjdHVhbCA9IGdldEFjdHVhbChvYmosIGFyZ3MpXG4gICAgLCBtc2cgPSBuZWdhdGUgPyBhcmdzWzJdIDogYXJnc1sxXVxuICAgICwgZmxhZ01zZyA9IGZsYWcob2JqLCAnbWVzc2FnZScpO1xuXG4gIGlmKHR5cGVvZiBtc2cgPT09IFwiZnVuY3Rpb25cIikgbXNnID0gbXNnKCk7XG4gIG1zZyA9IG1zZyB8fCAnJztcbiAgbXNnID0gbXNnXG4gICAgLnJlcGxhY2UoLyNcXHt0aGlzXFx9L2csIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9iakRpc3BsYXkodmFsKTsgfSlcbiAgICAucmVwbGFjZSgvI1xce2FjdFxcfS9nLCBmdW5jdGlvbiAoKSB7IHJldHVybiBvYmpEaXNwbGF5KGFjdHVhbCk7IH0pXG4gICAgLnJlcGxhY2UoLyNcXHtleHBcXH0vZywgZnVuY3Rpb24gKCkgeyByZXR1cm4gb2JqRGlzcGxheShleHBlY3RlZCk7IH0pO1xuXG4gIHJldHVybiBmbGFnTXNnID8gZmxhZ01zZyArICc6ICcgKyBtc2cgOiBtc2c7XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gdHJhbnNmZXJGbGFncyB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLnRyYW5zZmVyRmxhZ3MoYXNzZXJ0aW9uLCBvYmplY3QsIGluY2x1ZGVBbGwgPSB0cnVlKVxuICpcbiAqIFRyYW5zZmVyIGFsbCB0aGUgZmxhZ3MgZm9yIGBhc3NlcnRpb25gIHRvIGBvYmplY3RgLiBJZlxuICogYGluY2x1ZGVBbGxgIGlzIHNldCB0byBgZmFsc2VgLCB0aGVuIHRoZSBiYXNlIENoYWlcbiAqIGFzc2VydGlvbiBmbGFncyAobmFtZWx5IGBvYmplY3RgLCBgc3NmaWAsIGBsb2NrU3NmaWAsXG4gKiBhbmQgYG1lc3NhZ2VgKSB3aWxsIG5vdCBiZSB0cmFuc2ZlcnJlZC5cbiAqXG4gKlxuICogICAgIHZhciBuZXdBc3NlcnRpb24gPSBuZXcgQXNzZXJ0aW9uKCk7XG4gKiAgICAgdXRpbHMudHJhbnNmZXJGbGFncyhhc3NlcnRpb24sIG5ld0Fzc2VydGlvbik7XG4gKlxuICogICAgIHZhciBhbm90aGVyQXNzZXJpdG9uID0gbmV3IEFzc2VydGlvbihteU9iaik7XG4gKiAgICAgdXRpbHMudHJhbnNmZXJGbGFncyhhc3NlcnRpb24sIGFub3RoZXJBc3NlcnRpb24sIGZhbHNlKTtcbiAqXG4gKiBAcGFyYW0ge0Fzc2VydGlvbn0gYXNzZXJ0aW9uIHRoZSBhc3NlcnRpb24gdG8gdHJhbnNmZXIgdGhlIGZsYWdzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgdGhlIG9iamVjdCB0byB0cmFuc2ZlciB0aGUgZmxhZ3MgdG87IHVzdWFsbHkgYSBuZXcgYXNzZXJ0aW9uXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGluY2x1ZGVBbGxcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIHRyYW5zZmVyRmxhZ3NcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmZXJGbGFncyhhc3NlcnRpb24sIG9iamVjdCwgaW5jbHVkZUFsbCkge1xuICB2YXIgZmxhZ3MgPSBhc3NlcnRpb24uX19mbGFncyB8fCAoYXNzZXJ0aW9uLl9fZmxhZ3MgPSBPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuICBpZiAoIW9iamVjdC5fX2ZsYWdzKSB7XG4gICAgb2JqZWN0Ll9fZmxhZ3MgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG5cbiAgaW5jbHVkZUFsbCA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDMgPyBpbmNsdWRlQWxsIDogdHJ1ZTtcblxuICBmb3IgKHZhciBmbGFnIGluIGZsYWdzKSB7XG4gICAgaWYgKGluY2x1ZGVBbGwgfHxcbiAgICAgICAgKGZsYWcgIT09ICdvYmplY3QnICYmIGZsYWcgIT09ICdzc2ZpJyAmJiBmbGFnICE9PSAnbG9ja1NzZmknICYmIGZsYWcgIT0gJ21lc3NhZ2UnKSkge1xuICAgICAgb2JqZWN0Ll9fZmxhZ3NbZmxhZ10gPSBmbGFnc1tmbGFnXTtcbiAgICB9XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBnbG9iYWxzIFN5bWJvbDogZmFsc2UsIFVpbnQ4QXJyYXk6IGZhbHNlLCBXZWFrTWFwOiBmYWxzZSAqL1xuLyohXG4gKiBkZWVwLWVxbFxuICogQ29weXJpZ2h0KGMpIDIwMTMgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG52YXIgdHlwZSA9IHJlcXVpcmUoJ3R5cGUtZGV0ZWN0Jyk7XG5mdW5jdGlvbiBGYWtlTWFwKCkge1xuICB0aGlzLl9rZXkgPSAnY2hhaS9kZWVwLWVxbF9fJyArIE1hdGgucmFuZG9tKCkgKyBEYXRlLm5vdygpO1xufVxuXG5GYWtlTWFwLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXRNYXAoa2V5KSB7XG4gICAgcmV0dXJuIGtleVt0aGlzLl9rZXldO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIHNldE1hcChrZXksIHZhbHVlKSB7XG4gICAgaWYgKE9iamVjdC5pc0V4dGVuc2libGUoa2V5KSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGtleSwgdGhpcy5fa2V5LCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfVxuICB9LFxufTtcblxudmFyIE1lbW9pemVNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyA/IFdlYWtNYXAgOiBGYWtlTWFwO1xuLyohXG4gKiBDaGVjayB0byBzZWUgaWYgdGhlIE1lbW9pemVNYXAgaGFzIHJlY29yZGVkIGEgcmVzdWx0IG9mIHRoZSB0d28gb3BlcmFuZHNcbiAqXG4gKiBAcGFyYW0ge01peGVkfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWl4ZWR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWVtb2l6ZU1hcH0gbWVtb2l6ZU1hcFxuICogQHJldHVybnMge0Jvb2xlYW58bnVsbH0gcmVzdWx0XG4qL1xuZnVuY3Rpb24gbWVtb2l6ZUNvbXBhcmUobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBtZW1vaXplTWFwKSB7XG4gIC8vIFRlY2huaWNhbGx5LCBXZWFrTWFwIGtleXMgY2FuICpvbmx5KiBiZSBvYmplY3RzLCBub3QgcHJpbWl0aXZlcy5cbiAgaWYgKCFtZW1vaXplTWFwIHx8IGlzUHJpbWl0aXZlKGxlZnRIYW5kT3BlcmFuZCkgfHwgaXNQcmltaXRpdmUocmlnaHRIYW5kT3BlcmFuZCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgbGVmdEhhbmRNYXAgPSBtZW1vaXplTWFwLmdldChsZWZ0SGFuZE9wZXJhbmQpO1xuICBpZiAobGVmdEhhbmRNYXApIHtcbiAgICB2YXIgcmVzdWx0ID0gbGVmdEhhbmRNYXAuZ2V0KHJpZ2h0SGFuZE9wZXJhbmQpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKiFcbiAqIFNldCB0aGUgcmVzdWx0IG9mIHRoZSBlcXVhbGl0eSBpbnRvIHRoZSBNZW1vaXplTWFwXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gbGVmdEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge01peGVkfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge01lbW9pemVNYXB9IG1lbW9pemVNYXBcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVzdWx0XG4qL1xuZnVuY3Rpb24gbWVtb2l6ZVNldChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG1lbW9pemVNYXAsIHJlc3VsdCkge1xuICAvLyBUZWNobmljYWxseSwgV2Vha01hcCBrZXlzIGNhbiAqb25seSogYmUgb2JqZWN0cywgbm90IHByaW1pdGl2ZXMuXG4gIGlmICghbWVtb2l6ZU1hcCB8fCBpc1ByaW1pdGl2ZShsZWZ0SGFuZE9wZXJhbmQpIHx8IGlzUHJpbWl0aXZlKHJpZ2h0SGFuZE9wZXJhbmQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBsZWZ0SGFuZE1hcCA9IG1lbW9pemVNYXAuZ2V0KGxlZnRIYW5kT3BlcmFuZCk7XG4gIGlmIChsZWZ0SGFuZE1hcCkge1xuICAgIGxlZnRIYW5kTWFwLnNldChyaWdodEhhbmRPcGVyYW5kLCByZXN1bHQpO1xuICB9IGVsc2Uge1xuICAgIGxlZnRIYW5kTWFwID0gbmV3IE1lbW9pemVNYXAoKTtcbiAgICBsZWZ0SGFuZE1hcC5zZXQocmlnaHRIYW5kT3BlcmFuZCwgcmVzdWx0KTtcbiAgICBtZW1vaXplTWFwLnNldChsZWZ0SGFuZE9wZXJhbmQsIGxlZnRIYW5kTWFwKTtcbiAgfVxufVxuXG4vKiFcbiAqIFByaW1hcnkgRXhwb3J0XG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZWVwRXF1YWw7XG5tb2R1bGUuZXhwb3J0cy5NZW1vaXplTWFwID0gTWVtb2l6ZU1hcDtcblxuLyoqXG4gKiBBc3NlcnQgZGVlcGx5IG5lc3RlZCBzYW1lVmFsdWUgZXF1YWxpdHkgYmV0d2VlbiB0d28gb2JqZWN0cyBvZiBhbnkgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWl4ZWR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gKG9wdGlvbmFsKSBBZGRpdGlvbmFsIG9wdGlvbnNcbiAqIEBwYXJhbSB7QXJyYXl9IFtvcHRpb25zLmNvbXBhcmF0b3JdIChvcHRpb25hbCkgT3ZlcnJpZGUgZGVmYXVsdCBhbGdvcml0aG0sIGRldGVybWluaW5nIGN1c3RvbSBlcXVhbGl0eS5cbiAqIEBwYXJhbSB7QXJyYXl9IFtvcHRpb25zLm1lbW9pemVdIChvcHRpb25hbCkgUHJvdmlkZSBhIGN1c3RvbSBtZW1vaXphdGlvbiBvYmplY3Qgd2hpY2ggd2lsbCBjYWNoZSB0aGUgcmVzdWx0cyBvZlxuICAgIGNvbXBsZXggb2JqZWN0cyBmb3IgYSBzcGVlZCBib29zdC4gQnkgcGFzc2luZyBgZmFsc2VgIHlvdSBjYW4gZGlzYWJsZSBtZW1vaXphdGlvbiwgYnV0IHRoaXMgd2lsbCBjYXVzZSBjaXJjdWxhclxuICAgIHJlZmVyZW5jZXMgdG8gYmxvdyB0aGUgc3RhY2suXG4gKiBAcmV0dXJuIHtCb29sZWFufSBlcXVhbCBtYXRjaFxuICovXG5mdW5jdGlvbiBkZWVwRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKSB7XG4gIC8vIElmIHdlIGhhdmUgYSBjb21wYXJhdG9yLCB3ZSBjYW4ndCBhc3N1bWUgYW55dGhpbmc7IHNvIGJhaWwgdG8gaXRzIGNoZWNrIGZpcnN0LlxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmNvbXBhcmF0b3IpIHtcbiAgICByZXR1cm4gZXh0ZW5zaXZlRGVlcEVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucyk7XG4gIH1cblxuICB2YXIgc2ltcGxlUmVzdWx0ID0gc2ltcGxlRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kKTtcbiAgaWYgKHNpbXBsZVJlc3VsdCAhPT0gbnVsbCkge1xuICAgIHJldHVybiBzaW1wbGVSZXN1bHQ7XG4gIH1cblxuICAvLyBEZWVwZXIgY29tcGFyaXNvbnMgYXJlIHB1c2hlZCB0aHJvdWdoIHRvIGEgbGFyZ2VyIGZ1bmN0aW9uXG4gIHJldHVybiBleHRlbnNpdmVEZWVwRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBNYW55IGNvbXBhcmlzb25zIGNhbiBiZSBjYW5jZWxlZCBvdXQgZWFybHkgdmlhIHNpbXBsZSBlcXVhbGl0eSBvciBwcmltaXRpdmUgY2hlY2tzLlxuICogQHBhcmFtIHtNaXhlZH0gbGVmdEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge01peGVkfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcmV0dXJuIHtCb29sZWFufG51bGx9IGVxdWFsIG1hdGNoXG4gKi9cbmZ1bmN0aW9uIHNpbXBsZUVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCkge1xuICAvLyBFcXVhbCByZWZlcmVuY2VzIChleGNlcHQgZm9yIE51bWJlcnMpIGNhbiBiZSByZXR1cm5lZCBlYXJseVxuICBpZiAobGVmdEhhbmRPcGVyYW5kID09PSByaWdodEhhbmRPcGVyYW5kKSB7XG4gICAgLy8gSGFuZGxlICstMCBjYXNlc1xuICAgIHJldHVybiBsZWZ0SGFuZE9wZXJhbmQgIT09IDAgfHwgMSAvIGxlZnRIYW5kT3BlcmFuZCA9PT0gMSAvIHJpZ2h0SGFuZE9wZXJhbmQ7XG4gIH1cblxuICAvLyBoYW5kbGUgTmFOIGNhc2VzXG4gIGlmIChcbiAgICBsZWZ0SGFuZE9wZXJhbmQgIT09IGxlZnRIYW5kT3BlcmFuZCAmJiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJpZ2h0SGFuZE9wZXJhbmQgIT09IHJpZ2h0SGFuZE9wZXJhbmQgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBBbnl0aGluZyB0aGF0IGlzIG5vdCBhbiAnb2JqZWN0JywgaS5lLiBzeW1ib2xzLCBmdW5jdGlvbnMsIGJvb2xlYW5zLCBudW1iZXJzLFxuICAvLyBzdHJpbmdzLCBhbmQgdW5kZWZpbmVkLCBjYW4gYmUgY29tcGFyZWQgYnkgcmVmZXJlbmNlLlxuICBpZiAoaXNQcmltaXRpdmUobGVmdEhhbmRPcGVyYW5kKSB8fCBpc1ByaW1pdGl2ZShyaWdodEhhbmRPcGVyYW5kKSkge1xuICAgIC8vIEVhc3kgb3V0IGIvYyBpdCB3b3VsZCBoYXZlIHBhc3NlZCB0aGUgZmlyc3QgZXF1YWxpdHkgY2hlY2tcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qIVxuICogVGhlIG1haW4gbG9naWMgb2YgdGhlIGBkZWVwRXF1YWxgIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtNaXhlZH0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAob3B0aW9uYWwpIEFkZGl0aW9uYWwgb3B0aW9uc1xuICogQHBhcmFtIHtBcnJheX0gW29wdGlvbnMuY29tcGFyYXRvcl0gKG9wdGlvbmFsKSBPdmVycmlkZSBkZWZhdWx0IGFsZ29yaXRobSwgZGV0ZXJtaW5pbmcgY3VzdG9tIGVxdWFsaXR5LlxuICogQHBhcmFtIHtBcnJheX0gW29wdGlvbnMubWVtb2l6ZV0gKG9wdGlvbmFsKSBQcm92aWRlIGEgY3VzdG9tIG1lbW9pemF0aW9uIG9iamVjdCB3aGljaCB3aWxsIGNhY2hlIHRoZSByZXN1bHRzIG9mXG4gICAgY29tcGxleCBvYmplY3RzIGZvciBhIHNwZWVkIGJvb3N0LiBCeSBwYXNzaW5nIGBmYWxzZWAgeW91IGNhbiBkaXNhYmxlIG1lbW9pemF0aW9uLCBidXQgdGhpcyB3aWxsIGNhdXNlIGNpcmN1bGFyXG4gICAgcmVmZXJlbmNlcyB0byBibG93IHRoZSBzdGFjay5cbiAqIEByZXR1cm4ge0Jvb2xlYW59IGVxdWFsIG1hdGNoXG4qL1xuZnVuY3Rpb24gZXh0ZW5zaXZlRGVlcEVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5tZW1vaXplID0gb3B0aW9ucy5tZW1vaXplID09PSBmYWxzZSA/IGZhbHNlIDogb3B0aW9ucy5tZW1vaXplIHx8IG5ldyBNZW1vaXplTWFwKCk7XG4gIHZhciBjb21wYXJhdG9yID0gb3B0aW9ucyAmJiBvcHRpb25zLmNvbXBhcmF0b3I7XG5cbiAgLy8gQ2hlY2sgaWYgYSBtZW1vaXplZCByZXN1bHQgZXhpc3RzLlxuICB2YXIgbWVtb2l6ZVJlc3VsdExlZnQgPSBtZW1vaXplQ29tcGFyZShsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMubWVtb2l6ZSk7XG4gIGlmIChtZW1vaXplUmVzdWx0TGVmdCAhPT0gbnVsbCkge1xuICAgIHJldHVybiBtZW1vaXplUmVzdWx0TGVmdDtcbiAgfVxuICB2YXIgbWVtb2l6ZVJlc3VsdFJpZ2h0ID0gbWVtb2l6ZUNvbXBhcmUocmlnaHRIYW5kT3BlcmFuZCwgbGVmdEhhbmRPcGVyYW5kLCBvcHRpb25zLm1lbW9pemUpO1xuICBpZiAobWVtb2l6ZVJlc3VsdFJpZ2h0ICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIG1lbW9pemVSZXN1bHRSaWdodDtcbiAgfVxuXG4gIC8vIElmIGEgY29tcGFyYXRvciBpcyBwcmVzZW50LCB1c2UgaXQuXG4gIGlmIChjb21wYXJhdG9yKSB7XG4gICAgdmFyIGNvbXBhcmF0b3JSZXN1bHQgPSBjb21wYXJhdG9yKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCk7XG4gICAgLy8gQ29tcGFyYXRvcnMgbWF5IHJldHVybiBudWxsLCBpbiB3aGljaCBjYXNlIHdlIHdhbnQgdG8gZ28gYmFjayB0byBkZWZhdWx0IGJlaGF2aW9yLlxuICAgIGlmIChjb21wYXJhdG9yUmVzdWx0ID09PSBmYWxzZSB8fCBjb21wYXJhdG9yUmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICBtZW1vaXplU2V0KGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucy5tZW1vaXplLCBjb21wYXJhdG9yUmVzdWx0KTtcbiAgICAgIHJldHVybiBjb21wYXJhdG9yUmVzdWx0O1xuICAgIH1cbiAgICAvLyBUbyBhbGxvdyBjb21wYXJhdG9ycyB0byBvdmVycmlkZSAqYW55KiBiZWhhdmlvciwgd2UgcmFuIHRoZW0gZmlyc3QuIFNpbmNlIGl0IGRpZG4ndCBkZWNpZGVcbiAgICAvLyB3aGF0IHRvIGRvLCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0byByZXR1cm4gdGhlIGJhc2ljIHRlc3RzIGZpcnN0IGJlZm9yZSB3ZSBtb3ZlIG9uLlxuICAgIHZhciBzaW1wbGVSZXN1bHQgPSBzaW1wbGVFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQpO1xuICAgIGlmIChzaW1wbGVSZXN1bHQgIT09IG51bGwpIHtcbiAgICAgIC8vIERvbid0IG1lbW9pemUgdGhpcywgaXQgdGFrZXMgbG9uZ2VyIHRvIHNldC9yZXRyaWV2ZSB0aGFuIHRvIGp1c3QgY29tcGFyZS5cbiAgICAgIHJldHVybiBzaW1wbGVSZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxlZnRIYW5kVHlwZSA9IHR5cGUobGVmdEhhbmRPcGVyYW5kKTtcbiAgaWYgKGxlZnRIYW5kVHlwZSAhPT0gdHlwZShyaWdodEhhbmRPcGVyYW5kKSkge1xuICAgIG1lbW9pemVTZXQobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zLm1lbW9pemUsIGZhbHNlKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZW1wb3JhcmlseSBzZXQgdGhlIG9wZXJhbmRzIGluIHRoZSBtZW1vaXplIG9iamVjdCB0byBwcmV2ZW50IGJsb3dpbmcgdGhlIHN0YWNrXG4gIG1lbW9pemVTZXQobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zLm1lbW9pemUsIHRydWUpO1xuXG4gIHZhciByZXN1bHQgPSBleHRlbnNpdmVEZWVwRXF1YWxCeVR5cGUobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBsZWZ0SGFuZFR5cGUsIG9wdGlvbnMpO1xuICBtZW1vaXplU2V0KGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucy5tZW1vaXplLCByZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBleHRlbnNpdmVEZWVwRXF1YWxCeVR5cGUobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBsZWZ0SGFuZFR5cGUsIG9wdGlvbnMpIHtcbiAgc3dpdGNoIChsZWZ0SGFuZFR5cGUpIHtcbiAgICBjYXNlICdTdHJpbmcnOlxuICAgIGNhc2UgJ051bWJlcic6XG4gICAgY2FzZSAnQm9vbGVhbic6XG4gICAgY2FzZSAnRGF0ZSc6XG4gICAgICAvLyBJZiB0aGVzZSB0eXBlcyBhcmUgdGhlaXIgaW5zdGFuY2UgdHlwZXMgKGUuZy4gYG5ldyBOdW1iZXJgKSB0aGVuIHJlLWRlZXBFcXVhbCBhZ2FpbnN0IHRoZWlyIHZhbHVlc1xuICAgICAgcmV0dXJuIGRlZXBFcXVhbChsZWZ0SGFuZE9wZXJhbmQudmFsdWVPZigpLCByaWdodEhhbmRPcGVyYW5kLnZhbHVlT2YoKSk7XG4gICAgY2FzZSAnUHJvbWlzZSc6XG4gICAgY2FzZSAnU3ltYm9sJzpcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgY2FzZSAnV2Vha01hcCc6XG4gICAgY2FzZSAnV2Vha1NldCc6XG4gICAgY2FzZSAnRXJyb3InOlxuICAgICAgcmV0dXJuIGxlZnRIYW5kT3BlcmFuZCA9PT0gcmlnaHRIYW5kT3BlcmFuZDtcbiAgICBjYXNlICdBcmd1bWVudHMnOlxuICAgIGNhc2UgJ0ludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhDbGFtcGVkQXJyYXknOlxuICAgIGNhc2UgJ0ludDE2QXJyYXknOlxuICAgIGNhc2UgJ1VpbnQxNkFycmF5JzpcbiAgICBjYXNlICdJbnQzMkFycmF5JzpcbiAgICBjYXNlICdVaW50MzJBcnJheSc6XG4gICAgY2FzZSAnRmxvYXQzMkFycmF5JzpcbiAgICBjYXNlICdGbG9hdDY0QXJyYXknOlxuICAgIGNhc2UgJ0FycmF5JzpcbiAgICAgIHJldHVybiBpdGVyYWJsZUVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucyk7XG4gICAgY2FzZSAnUmVnRXhwJzpcbiAgICAgIHJldHVybiByZWdleHBFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQpO1xuICAgIGNhc2UgJ0dlbmVyYXRvcic6XG4gICAgICByZXR1cm4gZ2VuZXJhdG9yRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbiAgICBjYXNlICdEYXRhVmlldyc6XG4gICAgICByZXR1cm4gaXRlcmFibGVFcXVhbChuZXcgVWludDhBcnJheShsZWZ0SGFuZE9wZXJhbmQuYnVmZmVyKSwgbmV3IFVpbnQ4QXJyYXkocmlnaHRIYW5kT3BlcmFuZC5idWZmZXIpLCBvcHRpb25zKTtcbiAgICBjYXNlICdBcnJheUJ1ZmZlcic6XG4gICAgICByZXR1cm4gaXRlcmFibGVFcXVhbChuZXcgVWludDhBcnJheShsZWZ0SGFuZE9wZXJhbmQpLCBuZXcgVWludDhBcnJheShyaWdodEhhbmRPcGVyYW5kKSwgb3B0aW9ucyk7XG4gICAgY2FzZSAnU2V0JzpcbiAgICAgIHJldHVybiBlbnRyaWVzRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbiAgICBjYXNlICdNYXAnOlxuICAgICAgcmV0dXJuIGVudHJpZXNFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gb2JqZWN0RXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbiAgfVxufVxuXG4vKiFcbiAqIENvbXBhcmUgdHdvIFJlZ3VsYXIgRXhwcmVzc2lvbnMgZm9yIGVxdWFsaXR5LlxuICpcbiAqIEBwYXJhbSB7UmVnRXhwfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7UmVnRXhwfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcmV0dXJuIHtCb29sZWFufSByZXN1bHRcbiAqL1xuXG5mdW5jdGlvbiByZWdleHBFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQpIHtcbiAgcmV0dXJuIGxlZnRIYW5kT3BlcmFuZC50b1N0cmluZygpID09PSByaWdodEhhbmRPcGVyYW5kLnRvU3RyaW5nKCk7XG59XG5cbi8qIVxuICogQ29tcGFyZSB0d28gU2V0cy9NYXBzIGZvciBlcXVhbGl0eS4gRmFzdGVyIHRoYW4gb3RoZXIgZXF1YWxpdHkgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7U2V0fSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7U2V0fSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIChPcHRpb25hbClcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICovXG5cbmZ1bmN0aW9uIGVudHJpZXNFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpIHtcbiAgLy8gSUUxMSBkb2Vzbid0IHN1cHBvcnQgU2V0I2VudHJpZXMgb3IgU2V0I0BAaXRlcmF0b3IsIHNvIHdlIG5lZWQgbWFudWFsbHkgcG9wdWxhdGUgdXNpbmcgU2V0I2ZvckVhY2hcbiAgaWYgKGxlZnRIYW5kT3BlcmFuZC5zaXplICE9PSByaWdodEhhbmRPcGVyYW5kLnNpemUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGxlZnRIYW5kT3BlcmFuZC5zaXplID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGxlZnRIYW5kSXRlbXMgPSBbXTtcbiAgdmFyIHJpZ2h0SGFuZEl0ZW1zID0gW107XG4gIGxlZnRIYW5kT3BlcmFuZC5mb3JFYWNoKGZ1bmN0aW9uIGdhdGhlckVudHJpZXMoa2V5LCB2YWx1ZSkge1xuICAgIGxlZnRIYW5kSXRlbXMucHVzaChbIGtleSwgdmFsdWUgXSk7XG4gIH0pO1xuICByaWdodEhhbmRPcGVyYW5kLmZvckVhY2goZnVuY3Rpb24gZ2F0aGVyRW50cmllcyhrZXksIHZhbHVlKSB7XG4gICAgcmlnaHRIYW5kSXRlbXMucHVzaChbIGtleSwgdmFsdWUgXSk7XG4gIH0pO1xuICByZXR1cm4gaXRlcmFibGVFcXVhbChsZWZ0SGFuZEl0ZW1zLnNvcnQoKSwgcmlnaHRIYW5kSXRlbXMuc29ydCgpLCBvcHRpb25zKTtcbn1cblxuLyohXG4gKiBTaW1wbGUgZXF1YWxpdHkgZm9yIGZsYXQgaXRlcmFibGUgb2JqZWN0cyBzdWNoIGFzIEFycmF5cywgVHlwZWRBcnJheXMgb3IgTm9kZS5qcyBidWZmZXJzLlxuICpcbiAqIEBwYXJhbSB7SXRlcmFibGV9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtJdGVyYWJsZX0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAoT3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtCb29sZWFufSByZXN1bHRcbiAqL1xuXG5mdW5jdGlvbiBpdGVyYWJsZUVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucykge1xuICB2YXIgbGVuZ3RoID0gbGVmdEhhbmRPcGVyYW5kLmxlbmd0aDtcbiAgaWYgKGxlbmd0aCAhPT0gcmlnaHRIYW5kT3BlcmFuZC5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpbmRleCA9IC0xO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChkZWVwRXF1YWwobGVmdEhhbmRPcGVyYW5kW2luZGV4XSwgcmlnaHRIYW5kT3BlcmFuZFtpbmRleF0sIG9wdGlvbnMpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyohXG4gKiBTaW1wbGUgZXF1YWxpdHkgZm9yIGdlbmVyYXRvciBvYmplY3RzIHN1Y2ggYXMgdGhvc2UgcmV0dXJuZWQgYnkgZ2VuZXJhdG9yIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge0l0ZXJhYmxlfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7SXRlcmFibGV9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gKE9wdGlvbmFsKVxuICogQHJldHVybiB7Qm9vbGVhbn0gcmVzdWx0XG4gKi9cblxuZnVuY3Rpb24gZ2VuZXJhdG9yRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKSB7XG4gIHJldHVybiBpdGVyYWJsZUVxdWFsKGdldEdlbmVyYXRvckVudHJpZXMobGVmdEhhbmRPcGVyYW5kKSwgZ2V0R2VuZXJhdG9yRW50cmllcyhyaWdodEhhbmRPcGVyYW5kKSwgb3B0aW9ucyk7XG59XG5cbi8qIVxuICogRGV0ZXJtaW5lIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGFuIEBAaXRlcmF0b3IgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBvYmplY3QgaGFzIGFuIEBAaXRlcmF0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGhhc0l0ZXJhdG9yRnVuY3Rpb24odGFyZ2V0KSB7XG4gIHJldHVybiB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiB0YXJnZXQgPT09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgdGFyZ2V0W1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG59XG5cbi8qIVxuICogR2V0cyBhbGwgaXRlcmF0b3IgZW50cmllcyBmcm9tIHRoZSBnaXZlbiBPYmplY3QuIElmIHRoZSBPYmplY3QgaGFzIG5vIEBAaXRlcmF0b3IgZnVuY3Rpb24sIHJldHVybnMgYW4gZW1wdHkgYXJyYXkuXG4gKiBUaGlzIHdpbGwgY29uc3VtZSB0aGUgaXRlcmF0b3IgLSB3aGljaCBjb3VsZCBoYXZlIHNpZGUgZWZmZWN0cyBkZXBlbmRpbmcgb24gdGhlIEBAaXRlcmF0b3IgaW1wbGVtZW50YXRpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICogQHJldHVybnMge0FycmF5fSBhbiBhcnJheSBvZiBlbnRyaWVzIGZyb20gdGhlIEBAaXRlcmF0b3IgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JFbnRyaWVzKHRhcmdldCkge1xuICBpZiAoaGFzSXRlcmF0b3JGdW5jdGlvbih0YXJnZXQpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBnZXRHZW5lcmF0b3JFbnRyaWVzKHRhcmdldFtTeW1ib2wuaXRlcmF0b3JdKCkpO1xuICAgIH0gY2F0Y2ggKGl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtdO1xufVxuXG4vKiFcbiAqIEdldHMgYWxsIGVudHJpZXMgZnJvbSBhIEdlbmVyYXRvci4gVGhpcyB3aWxsIGNvbnN1bWUgdGhlIGdlbmVyYXRvciAtIHdoaWNoIGNvdWxkIGhhdmUgc2lkZSBlZmZlY3RzLlxuICpcbiAqIEBwYXJhbSB7R2VuZXJhdG9yfSB0YXJnZXRcbiAqIEByZXR1cm5zIHtBcnJheX0gYW4gYXJyYXkgb2YgZW50cmllcyBmcm9tIHRoZSBHZW5lcmF0b3IuXG4gKi9cbmZ1bmN0aW9uIGdldEdlbmVyYXRvckVudHJpZXMoZ2VuZXJhdG9yKSB7XG4gIHZhciBnZW5lcmF0b3JSZXN1bHQgPSBnZW5lcmF0b3IubmV4dCgpO1xuICB2YXIgYWNjdW11bGF0b3IgPSBbIGdlbmVyYXRvclJlc3VsdC52YWx1ZSBdO1xuICB3aGlsZSAoZ2VuZXJhdG9yUmVzdWx0LmRvbmUgPT09IGZhbHNlKSB7XG4gICAgZ2VuZXJhdG9yUmVzdWx0ID0gZ2VuZXJhdG9yLm5leHQoKTtcbiAgICBhY2N1bXVsYXRvci5wdXNoKGdlbmVyYXRvclJlc3VsdC52YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGFjY3VtdWxhdG9yO1xufVxuXG4vKiFcbiAqIEdldHMgYWxsIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUga2V5cyBmcm9tIGEgdGFyZ2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcbiAqIEByZXR1cm5zIHtBcnJheX0gYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBrZXlzIGZyb20gdGhlIHRhcmdldC5cbiAqL1xuZnVuY3Rpb24gZ2V0RW51bWVyYWJsZUtleXModGFyZ2V0KSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiB0YXJnZXQpIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cblxuLyohXG4gKiBEZXRlcm1pbmVzIGlmIHR3byBvYmplY3RzIGhhdmUgbWF0Y2hpbmcgdmFsdWVzLCBnaXZlbiBhIHNldCBvZiBrZXlzLiBEZWZlcnMgdG8gZGVlcEVxdWFsIGZvciB0aGUgZXF1YWxpdHkgY2hlY2sgb2ZcbiAqIGVhY2gga2V5LiBJZiBhbnkgdmFsdWUgb2YgdGhlIGdpdmVuIGtleSBpcyBub3QgZXF1YWwsIHRoZSBmdW5jdGlvbiB3aWxsIHJldHVybiBmYWxzZSAoZWFybHkpLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtNaXhlZH0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtBcnJheX0ga2V5cyBBbiBhcnJheSBvZiBrZXlzIHRvIGNvbXBhcmUgdGhlIHZhbHVlcyBvZiBsZWZ0SGFuZE9wZXJhbmQgYW5kIHJpZ2h0SGFuZE9wZXJhbmQgYWdhaW5zdFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAoT3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtCb29sZWFufSByZXN1bHRcbiAqL1xuZnVuY3Rpb24ga2V5c0VxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIGlmIChsZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGRlZXBFcXVhbChsZWZ0SGFuZE9wZXJhbmRba2V5c1tpXV0sIHJpZ2h0SGFuZE9wZXJhbmRba2V5c1tpXV0sIG9wdGlvbnMpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyohXG4gKiBSZWN1cnNpdmVseSBjaGVjayB0aGUgZXF1YWxpdHkgb2YgdHdvIE9iamVjdHMuIE9uY2UgYmFzaWMgc2FtZW5lc3MgaGFzIGJlZW4gZXN0YWJsaXNoZWQgaXQgd2lsbCBkZWZlciB0byBgZGVlcEVxdWFsYFxuICogZm9yIGVhY2ggZW51bWVyYWJsZSBrZXkgaW4gdGhlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWl4ZWR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gKE9wdGlvbmFsKVxuICogQHJldHVybiB7Qm9vbGVhbn0gcmVzdWx0XG4gKi9cblxuZnVuY3Rpb24gb2JqZWN0RXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKSB7XG4gIHZhciBsZWZ0SGFuZEtleXMgPSBnZXRFbnVtZXJhYmxlS2V5cyhsZWZ0SGFuZE9wZXJhbmQpO1xuICB2YXIgcmlnaHRIYW5kS2V5cyA9IGdldEVudW1lcmFibGVLZXlzKHJpZ2h0SGFuZE9wZXJhbmQpO1xuICBpZiAobGVmdEhhbmRLZXlzLmxlbmd0aCAmJiBsZWZ0SGFuZEtleXMubGVuZ3RoID09PSByaWdodEhhbmRLZXlzLmxlbmd0aCkge1xuICAgIGxlZnRIYW5kS2V5cy5zb3J0KCk7XG4gICAgcmlnaHRIYW5kS2V5cy5zb3J0KCk7XG4gICAgaWYgKGl0ZXJhYmxlRXF1YWwobGVmdEhhbmRLZXlzLCByaWdodEhhbmRLZXlzKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGtleXNFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIGxlZnRIYW5kS2V5cywgb3B0aW9ucyk7XG4gIH1cblxuICB2YXIgbGVmdEhhbmRFbnRyaWVzID0gZ2V0SXRlcmF0b3JFbnRyaWVzKGxlZnRIYW5kT3BlcmFuZCk7XG4gIHZhciByaWdodEhhbmRFbnRyaWVzID0gZ2V0SXRlcmF0b3JFbnRyaWVzKHJpZ2h0SGFuZE9wZXJhbmQpO1xuICBpZiAobGVmdEhhbmRFbnRyaWVzLmxlbmd0aCAmJiBsZWZ0SGFuZEVudHJpZXMubGVuZ3RoID09PSByaWdodEhhbmRFbnRyaWVzLmxlbmd0aCkge1xuICAgIGxlZnRIYW5kRW50cmllcy5zb3J0KCk7XG4gICAgcmlnaHRIYW5kRW50cmllcy5zb3J0KCk7XG4gICAgcmV0dXJuIGl0ZXJhYmxlRXF1YWwobGVmdEhhbmRFbnRyaWVzLCByaWdodEhhbmRFbnRyaWVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIGlmIChsZWZ0SGFuZEtleXMubGVuZ3RoID09PSAwICYmXG4gICAgICBsZWZ0SGFuZEVudHJpZXMubGVuZ3RoID09PSAwICYmXG4gICAgICByaWdodEhhbmRLZXlzLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgcmlnaHRIYW5kRW50cmllcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyohXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGFyZ3VtZW50IGlzIGEgcHJpbWl0aXZlLlxuICpcbiAqIFRoaXMgaW50ZW50aW9uYWxseSByZXR1cm5zIHRydWUgZm9yIGFsbCBvYmplY3RzIHRoYXQgY2FuIGJlIGNvbXBhcmVkIGJ5IHJlZmVyZW5jZSxcbiAqIGluY2x1ZGluZyBmdW5jdGlvbnMgYW5kIHN5bWJvbHMuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jztcbn1cbiIsInZhciBjb25maWcgPSByZXF1aXJlKCcuLi9jb25maWcnKTtcblxuLyohXG4gKiBDaGFpIC0gaXNQcm94eUVuYWJsZWQgaGVscGVyXG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmlzUHJveHlFbmFibGVkKClcbiAqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gY2hlY2sgaWYgQ2hhaSdzIHByb3h5IHByb3RlY3Rpb24gZmVhdHVyZSBpcyBlbmFibGVkLiBJZlxuICogcHJveGllcyBhcmUgdW5zdXBwb3J0ZWQgb3IgZGlzYWJsZWQgdmlhIHRoZSB1c2VyJ3MgQ2hhaSBjb25maWcsIHRoZW4gcmV0dXJuXG4gKiBmYWxzZS4gT3RoZXJ3aXNlLCByZXR1cm4gdHJ1ZS5cbiAqXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBpc1Byb3h5RW5hYmxlZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNQcm94eUVuYWJsZWQoKSB7XG4gIHJldHVybiBjb25maWcudXNlUHJveHkgJiYgXG4gICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJztcbn07XG4iLCIvKiFcbiAqIENoYWkgLSBhZGRQcm9wZXJ0eSB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxudmFyIGNoYWkgPSByZXF1aXJlKCcuLi8uLi9jaGFpJyk7XG52YXIgZmxhZyA9IHJlcXVpcmUoJy4vZmxhZycpO1xudmFyIGlzUHJveHlFbmFibGVkID0gcmVxdWlyZSgnLi9pc1Byb3h5RW5hYmxlZCcpO1xudmFyIHRyYW5zZmVyRmxhZ3MgPSByZXF1aXJlKCcuL3RyYW5zZmVyRmxhZ3MnKTtcblxuLyoqXG4gKiAjIyMgLmFkZFByb3BlcnR5KGN0eCwgbmFtZSwgZ2V0dGVyKVxuICpcbiAqIEFkZHMgYSBwcm9wZXJ0eSB0byB0aGUgcHJvdG90eXBlIG9mIGFuIG9iamVjdC5cbiAqXG4gKiAgICAgdXRpbHMuYWRkUHJvcGVydHkoY2hhaS5Bc3NlcnRpb24ucHJvdG90eXBlLCAnZm9vJywgZnVuY3Rpb24gKCkge1xuICogICAgICAgdmFyIG9iaiA9IHV0aWxzLmZsYWcodGhpcywgJ29iamVjdCcpO1xuICogICAgICAgbmV3IGNoYWkuQXNzZXJ0aW9uKG9iaikudG8uYmUuaW5zdGFuY2VvZihGb28pO1xuICogICAgIH0pO1xuICpcbiAqIENhbiBhbHNvIGJlIGFjY2Vzc2VkIGRpcmVjdGx5IGZyb20gYGNoYWkuQXNzZXJ0aW9uYC5cbiAqXG4gKiAgICAgY2hhaS5Bc3NlcnRpb24uYWRkUHJvcGVydHkoJ2ZvbycsIGZuKTtcbiAqXG4gKiBUaGVuIGNhbiBiZSB1c2VkIGFzIGFueSBvdGhlciBhc3NlcnRpb24uXG4gKlxuICogICAgIGV4cGVjdChteUZvbykudG8uYmUuZm9vO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjdHggb2JqZWN0IHRvIHdoaWNoIHRoZSBwcm9wZXJ0eSBpcyBhZGRlZFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgcHJvcGVydHkgdG8gYWRkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXR0ZXIgZnVuY3Rpb24gdG8gYmUgdXNlZCBmb3IgbmFtZVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgYWRkUHJvcGVydHlcbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhZGRQcm9wZXJ0eShjdHgsIG5hbWUsIGdldHRlcikge1xuICBnZXR0ZXIgPSBnZXR0ZXIgPT09IHVuZGVmaW5lZCA/IGZ1bmN0aW9uICgpIHt9IDogZ2V0dGVyO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIG5hbWUsXG4gICAgeyBnZXQ6IGZ1bmN0aW9uIHByb3BlcnR5R2V0dGVyKCkge1xuICAgICAgICAvLyBTZXR0aW5nIHRoZSBgc3NmaWAgZmxhZyB0byBgcHJvcGVydHlHZXR0ZXJgIGNhdXNlcyB0aGlzIGZ1bmN0aW9uIHRvXG4gICAgICAgIC8vIGJlIHRoZSBzdGFydGluZyBwb2ludCBmb3IgcmVtb3ZpbmcgaW1wbGVtZW50YXRpb24gZnJhbWVzIGZyb20gdGhlXG4gICAgICAgIC8vIHN0YWNrIHRyYWNlIG9mIGEgZmFpbGVkIGFzc2VydGlvbi5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gSG93ZXZlciwgd2Ugb25seSB3YW50IHRvIHVzZSB0aGlzIGZ1bmN0aW9uIGFzIHRoZSBzdGFydGluZyBwb2ludCBpZlxuICAgICAgICAvLyB0aGUgYGxvY2tTc2ZpYCBmbGFnIGlzbid0IHNldCBhbmQgcHJveHkgcHJvdGVjdGlvbiBpcyBkaXNhYmxlZC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gSWYgdGhlIGBsb2NrU3NmaWAgZmxhZyBpcyBzZXQsIHRoZW4gZWl0aGVyIHRoaXMgYXNzZXJ0aW9uIGhhcyBiZWVuXG4gICAgICAgIC8vIG92ZXJ3cml0dGVuIGJ5IGFub3RoZXIgYXNzZXJ0aW9uLCBvciB0aGlzIGFzc2VydGlvbiBpcyBiZWluZyBpbnZva2VkXG4gICAgICAgIC8vIGZyb20gaW5zaWRlIG9mIGFub3RoZXIgYXNzZXJ0aW9uLiBJbiB0aGUgZmlyc3QgY2FzZSwgdGhlIGBzc2ZpYCBmbGFnXG4gICAgICAgIC8vIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IHRoZSBvdmVyd3JpdGluZyBhc3NlcnRpb24uIEluIHRoZSBzZWNvbmRcbiAgICAgICAgLy8gY2FzZSwgdGhlIGBzc2ZpYCBmbGFnIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IHRoZSBvdXRlciBhc3NlcnRpb24uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIElmIHByb3h5IHByb3RlY3Rpb24gaXMgZW5hYmxlZCwgdGhlbiB0aGUgYHNzZmlgIGZsYWcgaGFzIGFscmVhZHkgYmVlblxuICAgICAgICAvLyBzZXQgYnkgdGhlIHByb3h5IGdldHRlci5cbiAgICAgICAgaWYgKCFpc1Byb3h5RW5hYmxlZCgpICYmICFmbGFnKHRoaXMsICdsb2NrU3NmaScpKSB7XG4gICAgICAgICAgZmxhZyh0aGlzLCAnc3NmaScsIHByb3BlcnR5R2V0dGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZXN1bHQgPSBnZXR0ZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgdmFyIG5ld0Fzc2VydGlvbiA9IG5ldyBjaGFpLkFzc2VydGlvbigpO1xuICAgICAgICB0cmFuc2ZlckZsYWdzKHRoaXMsIG5ld0Fzc2VydGlvbik7XG4gICAgICAgIHJldHVybiBuZXdBc3NlcnRpb247XG4gICAgICB9XG4gICAgLCBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59O1xuIiwidmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4uL2NvbmZpZycpO1xuXG52YXIgZm5MZW5ndGhEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihmdW5jdGlvbiAoKSB7fSwgJ2xlbmd0aCcpO1xuXG4vKiFcbiAqIENoYWkgLSBhZGRMZW5ndGhHdWFyZCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmFkZExlbmd0aEd1YXJkKGZuLCBhc3NlcnRpb25OYW1lLCBpc0NoYWluYWJsZSlcbiAqXG4gKiBEZWZpbmUgYGxlbmd0aGAgYXMgYSBnZXR0ZXIgb24gdGhlIGdpdmVuIHVuaW52b2tlZCBtZXRob2QgYXNzZXJ0aW9uLiBUaGVcbiAqIGdldHRlciBhY3RzIGFzIGEgZ3VhcmQgYWdhaW5zdCBjaGFpbmluZyBgbGVuZ3RoYCBkaXJlY3RseSBvZmYgb2YgYW4gdW5pbnZva2VkXG4gKiBtZXRob2QgYXNzZXJ0aW9uLCB3aGljaCBpcyBhIHByb2JsZW0gYmVjYXVzZSBpdCByZWZlcmVuY2VzIGBmdW5jdGlvbmAnc1xuICogYnVpbHQtaW4gYGxlbmd0aGAgcHJvcGVydHkgaW5zdGVhZCBvZiBDaGFpJ3MgYGxlbmd0aGAgYXNzZXJ0aW9uLiBXaGVuIHRoZVxuICogZ2V0dGVyIGNhdGNoZXMgdGhlIHVzZXIgbWFraW5nIHRoaXMgbWlzdGFrZSwgaXQgdGhyb3dzIGFuIGVycm9yIHdpdGggYVxuICogaGVscGZ1bCBtZXNzYWdlLlxuICpcbiAqIFRoZXJlIGFyZSB0d28gd2F5cyBpbiB3aGljaCB0aGlzIG1pc3Rha2UgY2FuIGJlIG1hZGUuIFRoZSBmaXJzdCB3YXkgaXMgYnlcbiAqIGNoYWluaW5nIHRoZSBgbGVuZ3RoYCBhc3NlcnRpb24gZGlyZWN0bHkgb2ZmIG9mIGFuIHVuaW52b2tlZCBjaGFpbmFibGVcbiAqIG1ldGhvZC4gSW4gdGhpcyBjYXNlLCBDaGFpIHN1Z2dlc3RzIHRoYXQgdGhlIHVzZXIgdXNlIGBsZW5ndGhPZmAgaW5zdGVhZC4gVGhlXG4gKiBzZWNvbmQgd2F5IGlzIGJ5IGNoYWluaW5nIHRoZSBgbGVuZ3RoYCBhc3NlcnRpb24gZGlyZWN0bHkgb2ZmIG9mIGFuIHVuaW52b2tlZFxuICogbm9uLWNoYWluYWJsZSBtZXRob2QuIE5vbi1jaGFpbmFibGUgbWV0aG9kcyBtdXN0IGJlIGludm9rZWQgcHJpb3IgdG9cbiAqIGNoYWluaW5nLiBJbiB0aGlzIGNhc2UsIENoYWkgc3VnZ2VzdHMgdGhhdCB0aGUgdXNlciBjb25zdWx0IHRoZSBkb2NzIGZvciB0aGVcbiAqIGdpdmVuIGFzc2VydGlvbi5cbiAqXG4gKiBJZiB0aGUgYGxlbmd0aGAgcHJvcGVydHkgb2YgZnVuY3Rpb25zIGlzIHVuY29uZmlndXJhYmxlLCB0aGVuIHJldHVybiBgZm5gXG4gKiB3aXRob3V0IG1vZGlmaWNhdGlvbi5cbiAqXG4gKiBOb3RlIHRoYXQgaW4gRVM2LCB0aGUgZnVuY3Rpb24ncyBgbGVuZ3RoYCBwcm9wZXJ0eSBpcyBjb25maWd1cmFibGUsIHNvIG9uY2VcbiAqIHN1cHBvcnQgZm9yIGxlZ2FjeSBlbnZpcm9ubWVudHMgaXMgZHJvcHBlZCwgQ2hhaSdzIGBsZW5ndGhgIHByb3BlcnR5IGNhblxuICogcmVwbGFjZSB0aGUgYnVpbHQtaW4gZnVuY3Rpb24ncyBgbGVuZ3RoYCBwcm9wZXJ0eSwgYW5kIHRoaXMgbGVuZ3RoIGd1YXJkIHdpbGxcbiAqIG5vIGxvbmdlciBiZSBuZWNlc3NhcnkuIEluIHRoZSBtZWFuIHRpbWUsIG1haW50YWluaW5nIGNvbnNpc3RlbmN5IGFjcm9zcyBhbGxcbiAqIGVudmlyb25tZW50cyBpcyB0aGUgcHJpb3JpdHkuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7U3RyaW5nfSBhc3NlcnRpb25OYW1lXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzQ2hhaW5hYmxlXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAbmFtZSBhZGRMZW5ndGhHdWFyZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYWRkTGVuZ3RoR3VhcmQgKGZuLCBhc3NlcnRpb25OYW1lLCBpc0NoYWluYWJsZSkge1xuICBpZiAoIWZuTGVuZ3RoRGVzYy5jb25maWd1cmFibGUpIHJldHVybiBmbjtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdsZW5ndGgnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNDaGFpbmFibGUpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgQ2hhaSBwcm9wZXJ0eTogJyArIGFzc2VydGlvbk5hbWUgKyAnLmxlbmd0aC4gRHVlJyArXG4gICAgICAgICAgJyB0byBhIGNvbXBhdGliaWxpdHkgaXNzdWUsIFwibGVuZ3RoXCIgY2Fubm90IGRpcmVjdGx5IGZvbGxvdyBcIicgK1xuICAgICAgICAgIGFzc2VydGlvbk5hbWUgKyAnXCIuIFVzZSBcIicgKyBhc3NlcnRpb25OYW1lICsgJy5sZW5ndGhPZlwiIGluc3RlYWQuJyk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIENoYWkgcHJvcGVydHk6ICcgKyBhc3NlcnRpb25OYW1lICsgJy5sZW5ndGguIFNlZScgK1xuICAgICAgICAnIGRvY3MgZm9yIHByb3BlciB1c2FnZSBvZiBcIicgKyBhc3NlcnRpb25OYW1lICsgJ1wiLicpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGZuO1xufTtcbiIsInZhciBjb25maWcgPSByZXF1aXJlKCcuLi9jb25maWcnKTtcbnZhciBmbGFnID0gcmVxdWlyZSgnLi9mbGFnJyk7XG52YXIgZ2V0UHJvcGVydGllcyA9IHJlcXVpcmUoJy4vZ2V0UHJvcGVydGllcycpO1xudmFyIGlzUHJveHlFbmFibGVkID0gcmVxdWlyZSgnLi9pc1Byb3h5RW5hYmxlZCcpO1xuXG4vKiFcbiAqIENoYWkgLSBwcm94aWZ5IHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAucHJveGlmeShvYmplY3QpXG4gKlxuICogUmV0dXJuIGEgcHJveHkgb2YgZ2l2ZW4gb2JqZWN0IHRoYXQgdGhyb3dzIGFuIGVycm9yIHdoZW4gYSBub24tZXhpc3RlbnRcbiAqIHByb3BlcnR5IGlzIHJlYWQuIEJ5IGRlZmF1bHQsIHRoZSByb290IGNhdXNlIGlzIGFzc3VtZWQgdG8gYmUgYSBtaXNzcGVsbGVkXG4gKiBwcm9wZXJ0eSwgYW5kIHRodXMgYW4gYXR0ZW1wdCBpcyBtYWRlIHRvIG9mZmVyIGEgcmVhc29uYWJsZSBzdWdnZXN0aW9uIGZyb21cbiAqIHRoZSBsaXN0IG9mIGV4aXN0aW5nIHByb3BlcnRpZXMuIEhvd2V2ZXIsIGlmIGEgbm9uQ2hhaW5hYmxlTWV0aG9kTmFtZSBpc1xuICogcHJvdmlkZWQsIHRoZW4gdGhlIHJvb3QgY2F1c2UgaXMgaW5zdGVhZCBhIGZhaWx1cmUgdG8gaW52b2tlIGEgbm9uLWNoYWluYWJsZVxuICogbWV0aG9kIHByaW9yIHRvIHJlYWRpbmcgdGhlIG5vbi1leGlzdGVudCBwcm9wZXJ0eS5cbiAqIFxuICogSWYgcHJveGllcyBhcmUgdW5zdXBwb3J0ZWQgb3IgZGlzYWJsZWQgdmlhIHRoZSB1c2VyJ3MgQ2hhaSBjb25maWcsIHRoZW5cbiAqIHJldHVybiBvYmplY3Qgd2l0aG91dCBtb2RpZmljYXRpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtTdHJpbmd9IG5vbkNoYWluYWJsZU1ldGhvZE5hbWVcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIHByb3hpZnlcbiAqL1xuXG52YXIgYnVpbHRpbnMgPSBbJ19fZmxhZ3MnLCAnX19tZXRob2RzJywgJ19vYmonLCAnYXNzZXJ0J107XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHJveGlmeShvYmosIG5vbkNoYWluYWJsZU1ldGhvZE5hbWUpIHtcbiAgaWYgKCFpc1Byb3h5RW5hYmxlZCgpKSByZXR1cm4gb2JqO1xuXG4gIHJldHVybiBuZXcgUHJveHkob2JqLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBwcm94eUdldHRlcih0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgICAvLyBUaGlzIGNoZWNrIGlzIGhlcmUgYmVjYXVzZSB3ZSBzaG91bGQgbm90IHRocm93IGVycm9ycyBvbiBTeW1ib2wgcHJvcGVydGllc1xuICAgICAgLy8gc3VjaCBhcyBgU3ltYm9sLnRvU3RyaW5nVGFnYC5cbiAgICAgIC8vIFRoZSB2YWx1ZXMgZm9yIHdoaWNoIGFuIGVycm9yIHNob3VsZCBiZSB0aHJvd24gY2FuIGJlIGNvbmZpZ3VyZWQgdXNpbmdcbiAgICAgIC8vIHRoZSBgY29uZmlnLnByb3h5RXhjbHVkZWRLZXlzYCBzZXR0aW5nLlxuICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgICBjb25maWcucHJveHlFeGNsdWRlZEtleXMuaW5kZXhPZihwcm9wZXJ0eSkgPT09IC0xICYmXG4gICAgICAgICAgIVJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHkpKSB7XG4gICAgICAgIC8vIFNwZWNpYWwgbWVzc2FnZSBmb3IgaW52YWxpZCBwcm9wZXJ0eSBhY2Nlc3Mgb2Ygbm9uLWNoYWluYWJsZSBtZXRob2RzLlxuICAgICAgICBpZiAobm9uQ2hhaW5hYmxlTWV0aG9kTmFtZSkge1xuICAgICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIENoYWkgcHJvcGVydHk6ICcgKyBub25DaGFpbmFibGVNZXRob2ROYW1lICsgJy4nICtcbiAgICAgICAgICAgIHByb3BlcnR5ICsgJy4gU2VlIGRvY3MgZm9yIHByb3BlciB1c2FnZSBvZiBcIicgK1xuICAgICAgICAgICAgbm9uQ2hhaW5hYmxlTWV0aG9kTmFtZSArICdcIi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcmRlcmVkUHJvcGVydGllcyA9IGdldFByb3BlcnRpZXModGFyZ2V0KS5maWx0ZXIoZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICAgICAgICByZXR1cm4gIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmXG4gICAgICAgICAgICBidWlsdGlucy5pbmRleE9mKHByb3BlcnR5KSA9PT0gLTE7XG4gICAgICAgIH0pLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgIHJldHVybiBzdHJpbmdEaXN0YW5jZShwcm9wZXJ0eSwgYSkgLSBzdHJpbmdEaXN0YW5jZShwcm9wZXJ0eSwgYik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChvcmRlcmVkUHJvcGVydGllcy5sZW5ndGggJiZcbiAgICAgICAgICAgIHN0cmluZ0Rpc3RhbmNlKG9yZGVyZWRQcm9wZXJ0aWVzWzBdLCBwcm9wZXJ0eSkgPCA0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIHByb3BlcnR5IGlzIHJlYXNvbmFibHkgY2xvc2UgdG8gYW4gZXhpc3RpbmcgQ2hhaSBwcm9wZXJ0eSxcbiAgICAgICAgICAvLyBzdWdnZXN0IHRoYXQgcHJvcGVydHkgdG8gdGhlIHVzZXIuXG4gICAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgQ2hhaSBwcm9wZXJ0eTogJyArIHByb3BlcnR5ICtcbiAgICAgICAgICAgICcuIERpZCB5b3UgbWVhbiBcIicgKyBvcmRlcmVkUHJvcGVydGllc1swXSArICdcIj8nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBDaGFpIHByb3BlcnR5OiAnICsgcHJvcGVydHkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFVzZSB0aGlzIHByb3h5IGdldHRlciBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIGltcGxlbWVudGF0aW9uXG4gICAgICAvLyBmcmFtZXMgZnJvbSB0aGUgc3RhY2sgdHJhY2Ugb2YgYSBmYWlsZWQgYXNzZXJ0aW9uLiBGb3IgcHJvcGVydHlcbiAgICAgIC8vIGFzc2VydGlvbnMsIHRoaXMgcHJldmVudHMgdGhlIHByb3h5IGdldHRlciBmcm9tIHNob3dpbmcgdXAgaW4gdGhlIHN0YWNrXG4gICAgICAvLyB0cmFjZSBzaW5jZSBpdCdzIGludm9rZWQgYmVmb3JlIHRoZSBwcm9wZXJ0eSBnZXR0ZXIuIEZvciBtZXRob2QgYW5kXG4gICAgICAvLyBjaGFpbmFibGUgbWV0aG9kIGFzc2VydGlvbnMsIHRoaXMgZmxhZyB3aWxsIGVuZCB1cCBnZXR0aW5nIGNoYW5nZWQgdG9cbiAgICAgIC8vIHRoZSBtZXRob2Qgd3JhcHBlciwgd2hpY2ggaXMgZ29vZCBzaW5jZSB0aGlzIGZyYW1lIHdpbGwgbm8gbG9uZ2VyIGJlIGluXG4gICAgICAvLyB0aGUgc3RhY2sgb25jZSB0aGUgbWV0aG9kIGlzIGludm9rZWQuIE5vdGUgdGhhdCBDaGFpIGJ1aWx0aW4gYXNzZXJ0aW9uXG4gICAgICAvLyBwcm9wZXJ0aWVzIHN1Y2ggYXMgYF9fZmxhZ3NgIGFyZSBza2lwcGVkIHNpbmNlIHRoaXMgaXMgb25seSBtZWFudCB0b1xuICAgICAgLy8gY2FwdHVyZSB0aGUgc3RhcnRpbmcgcG9pbnQgb2YgYW4gYXNzZXJ0aW9uLiBUaGlzIHN0ZXAgaXMgYWxzbyBza2lwcGVkXG4gICAgICAvLyBpZiB0aGUgYGxvY2tTc2ZpYCBmbGFnIGlzIHNldCwgdGh1cyBpbmRpY2F0aW5nIHRoYXQgdGhpcyBhc3NlcnRpb24gaXNcbiAgICAgIC8vIGJlaW5nIGNhbGxlZCBmcm9tIHdpdGhpbiBhbm90aGVyIGFzc2VydGlvbi4gSW4gdGhhdCBjYXNlLCB0aGUgYHNzZmlgXG4gICAgICAvLyBmbGFnIGlzIGFscmVhZHkgc2V0IHRvIHRoZSBvdXRlciBhc3NlcnRpb24ncyBzdGFydGluZyBwb2ludC5cbiAgICAgIGlmIChidWlsdGlucy5pbmRleE9mKHByb3BlcnR5KSA9PT0gLTEgJiYgIWZsYWcodGFyZ2V0LCAnbG9ja1NzZmknKSkge1xuICAgICAgICBmbGFnKHRhcmdldCwgJ3NzZmknLCBwcm94eUdldHRlcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5KTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiAjIHN0cmluZ0Rpc3RhbmNlKHN0ckEsIHN0ckIpXG4gKiBSZXR1cm4gdGhlIExldmVuc2h0ZWluIGRpc3RhbmNlIGJldHdlZW4gdHdvIHN0cmluZ3MuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyQVxuICogQHBhcmFtIHtzdHJpbmd9IHN0ckJcbiAqIEByZXR1cm4ge251bWJlcn0gdGhlIHN0cmluZyBkaXN0YW5jZSBiZXR3ZWVuIHN0ckEgYW5kIHN0ckJcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHN0cmluZ0Rpc3RhbmNlKHN0ckEsIHN0ckIsIG1lbW8pIHtcbiAgaWYgKCFtZW1vKSB7XG4gICAgLy8gYG1lbW9gIGlzIGEgdHdvLWRpbWVuc2lvbmFsIGFycmF5IGNvbnRhaW5pbmcgYSBjYWNoZSBvZiBkaXN0YW5jZXNcbiAgICAvLyBtZW1vW2ldW2pdIGlzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHN0ckEuc2xpY2UoMCwgaSkgYW5kXG4gICAgLy8gc3RyQi5zbGljZSgwLCBqKS5cbiAgICBtZW1vID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gc3RyQS5sZW5ndGg7IGkrKykge1xuICAgICAgbWVtb1tpXSA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbWVtb1tzdHJBLmxlbmd0aF0gfHwgIW1lbW9bc3RyQS5sZW5ndGhdW3N0ckIubGVuZ3RoXSkge1xuICAgIGlmIChzdHJBLmxlbmd0aCA9PT0gMCB8fCBzdHJCLmxlbmd0aCA9PT0gMCkge1xuICAgICAgbWVtb1tzdHJBLmxlbmd0aF1bc3RyQi5sZW5ndGhdID0gTWF0aC5tYXgoc3RyQS5sZW5ndGgsIHN0ckIubGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVtb1tzdHJBLmxlbmd0aF1bc3RyQi5sZW5ndGhdID0gTWF0aC5taW4oXG4gICAgICAgIHN0cmluZ0Rpc3RhbmNlKHN0ckEuc2xpY2UoMCwgLTEpLCBzdHJCLCBtZW1vKSArIDEsXG4gICAgICAgIHN0cmluZ0Rpc3RhbmNlKHN0ckEsIHN0ckIuc2xpY2UoMCwgLTEpLCBtZW1vKSArIDEsXG4gICAgICAgIHN0cmluZ0Rpc3RhbmNlKHN0ckEuc2xpY2UoMCwgLTEpLCBzdHJCLnNsaWNlKDAsIC0xKSwgbWVtbykgK1xuICAgICAgICAgIChzdHJBLnNsaWNlKC0xKSA9PT0gc3RyQi5zbGljZSgtMSkgPyAwIDogMSlcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1lbW9bc3RyQS5sZW5ndGhdW3N0ckIubGVuZ3RoXTtcbn1cbiIsIi8qIVxuICogQ2hhaSAtIGFkZE1ldGhvZCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxudmFyIGFkZExlbmd0aEd1YXJkID0gcmVxdWlyZSgnLi9hZGRMZW5ndGhHdWFyZCcpO1xudmFyIGNoYWkgPSByZXF1aXJlKCcuLi8uLi9jaGFpJyk7XG52YXIgZmxhZyA9IHJlcXVpcmUoJy4vZmxhZycpO1xudmFyIHByb3hpZnkgPSByZXF1aXJlKCcuL3Byb3hpZnknKTtcbnZhciB0cmFuc2ZlckZsYWdzID0gcmVxdWlyZSgnLi90cmFuc2ZlckZsYWdzJyk7XG5cbi8qKlxuICogIyMjIC5hZGRNZXRob2QoY3R4LCBuYW1lLCBtZXRob2QpXG4gKlxuICogQWRkcyBhIG1ldGhvZCB0byB0aGUgcHJvdG90eXBlIG9mIGFuIG9iamVjdC5cbiAqXG4gKiAgICAgdXRpbHMuYWRkTWV0aG9kKGNoYWkuQXNzZXJ0aW9uLnByb3RvdHlwZSwgJ2ZvbycsIGZ1bmN0aW9uIChzdHIpIHtcbiAqICAgICAgIHZhciBvYmogPSB1dGlscy5mbGFnKHRoaXMsICdvYmplY3QnKTtcbiAqICAgICAgIG5ldyBjaGFpLkFzc2VydGlvbihvYmopLnRvLmJlLmVxdWFsKHN0cik7XG4gKiAgICAgfSk7XG4gKlxuICogQ2FuIGFsc28gYmUgYWNjZXNzZWQgZGlyZWN0bHkgZnJvbSBgY2hhaS5Bc3NlcnRpb25gLlxuICpcbiAqICAgICBjaGFpLkFzc2VydGlvbi5hZGRNZXRob2QoJ2ZvbycsIGZuKTtcbiAqXG4gKiBUaGVuIGNhbiBiZSB1c2VkIGFzIGFueSBvdGhlciBhc3NlcnRpb24uXG4gKlxuICogICAgIGV4cGVjdChmb29TdHIpLnRvLmJlLmZvbygnYmFyJyk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGN0eCBvYmplY3QgdG8gd2hpY2ggdGhlIG1ldGhvZCBpcyBhZGRlZFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgbWV0aG9kIHRvIGFkZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIG5hbWVcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGFkZE1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFkZE1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCkge1xuICB2YXIgbWV0aG9kV3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTZXR0aW5nIHRoZSBgc3NmaWAgZmxhZyB0byBgbWV0aG9kV3JhcHBlcmAgY2F1c2VzIHRoaXMgZnVuY3Rpb24gdG8gYmUgdGhlXG4gICAgLy8gc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIGltcGxlbWVudGF0aW9uIGZyYW1lcyBmcm9tIHRoZSBzdGFjayB0cmFjZSBvZlxuICAgIC8vIGEgZmFpbGVkIGFzc2VydGlvbi5cbiAgICAvL1xuICAgIC8vIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byB1c2UgdGhpcyBmdW5jdGlvbiBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgaWYgdGhlXG4gICAgLy8gYGxvY2tTc2ZpYCBmbGFnIGlzbid0IHNldC5cbiAgICAvL1xuICAgIC8vIElmIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXMgc2V0LCB0aGVuIGVpdGhlciB0aGlzIGFzc2VydGlvbiBoYXMgYmVlblxuICAgIC8vIG92ZXJ3cml0dGVuIGJ5IGFub3RoZXIgYXNzZXJ0aW9uLCBvciB0aGlzIGFzc2VydGlvbiBpcyBiZWluZyBpbnZva2VkIGZyb21cbiAgICAvLyBpbnNpZGUgb2YgYW5vdGhlciBhc3NlcnRpb24uIEluIHRoZSBmaXJzdCBjYXNlLCB0aGUgYHNzZmlgIGZsYWcgaGFzXG4gICAgLy8gYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3ZlcndyaXRpbmcgYXNzZXJ0aW9uLiBJbiB0aGUgc2Vjb25kIGNhc2UsIHRoZVxuICAgIC8vIGBzc2ZpYCBmbGFnIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IHRoZSBvdXRlciBhc3NlcnRpb24uXG4gICAgaWYgKCFmbGFnKHRoaXMsICdsb2NrU3NmaScpKSB7XG4gICAgICBmbGFnKHRoaXMsICdzc2ZpJywgbWV0aG9kV3JhcHBlcik7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IG1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZClcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICB2YXIgbmV3QXNzZXJ0aW9uID0gbmV3IGNoYWkuQXNzZXJ0aW9uKCk7XG4gICAgdHJhbnNmZXJGbGFncyh0aGlzLCBuZXdBc3NlcnRpb24pO1xuICAgIHJldHVybiBuZXdBc3NlcnRpb247XG4gIH07XG5cbiAgYWRkTGVuZ3RoR3VhcmQobWV0aG9kV3JhcHBlciwgbmFtZSwgZmFsc2UpO1xuICBjdHhbbmFtZV0gPSBwcm94aWZ5KG1ldGhvZFdyYXBwZXIsIG5hbWUpO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIG92ZXJ3cml0ZVByb3BlcnR5IHV0aWxpdHlcbiAqIENvcHlyaWdodChjKSAyMDEyLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG52YXIgY2hhaSA9IHJlcXVpcmUoJy4uLy4uL2NoYWknKTtcbnZhciBmbGFnID0gcmVxdWlyZSgnLi9mbGFnJyk7XG52YXIgaXNQcm94eUVuYWJsZWQgPSByZXF1aXJlKCcuL2lzUHJveHlFbmFibGVkJyk7XG52YXIgdHJhbnNmZXJGbGFncyA9IHJlcXVpcmUoJy4vdHJhbnNmZXJGbGFncycpO1xuXG4vKipcbiAqICMjIyAub3ZlcndyaXRlUHJvcGVydHkoY3R4LCBuYW1lLCBmbilcbiAqXG4gKiBPdmVyd2l0ZXMgYW4gYWxyZWFkeSBleGlzdGluZyBwcm9wZXJ0eSBnZXR0ZXIgYW5kIHByb3ZpZGVzXG4gKiBhY2Nlc3MgdG8gcHJldmlvdXMgdmFsdWUuIE11c3QgcmV0dXJuIGZ1bmN0aW9uIHRvIHVzZSBhcyBnZXR0ZXIuXG4gKlxuICogICAgIHV0aWxzLm92ZXJ3cml0ZVByb3BlcnR5KGNoYWkuQXNzZXJ0aW9uLnByb3RvdHlwZSwgJ29rJywgZnVuY3Rpb24gKF9zdXBlcikge1xuICogICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAqICAgICAgICAgdmFyIG9iaiA9IHV0aWxzLmZsYWcodGhpcywgJ29iamVjdCcpO1xuICogICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgRm9vKSB7XG4gKiAgICAgICAgICAgbmV3IGNoYWkuQXNzZXJ0aW9uKG9iai5uYW1lKS50by5lcXVhbCgnYmFyJyk7XG4gKiAgICAgICAgIH0gZWxzZSB7XG4gKiAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH1cbiAqICAgICB9KTtcbiAqXG4gKlxuICogQ2FuIGFsc28gYmUgYWNjZXNzZWQgZGlyZWN0bHkgZnJvbSBgY2hhaS5Bc3NlcnRpb25gLlxuICpcbiAqICAgICBjaGFpLkFzc2VydGlvbi5vdmVyd3JpdGVQcm9wZXJ0eSgnZm9vJywgZm4pO1xuICpcbiAqIFRoZW4gY2FuIGJlIHVzZWQgYXMgYW55IG90aGVyIGFzc2VydGlvbi5cbiAqXG4gKiAgICAgZXhwZWN0KG15Rm9vKS50by5iZS5vaztcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY3R4IG9iamVjdCB3aG9zZSBwcm9wZXJ0eSBpcyB0byBiZSBvdmVyd3JpdHRlblxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgcHJvcGVydHkgdG8gb3ZlcndyaXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBnZXR0ZXIgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZ2V0dGVyIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIG5hbWVcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIG92ZXJ3cml0ZVByb3BlcnR5XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gb3ZlcndyaXRlUHJvcGVydHkoY3R4LCBuYW1lLCBnZXR0ZXIpIHtcbiAgdmFyIF9nZXQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGN0eCwgbmFtZSlcbiAgICAsIF9zdXBlciA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIGlmIChfZ2V0ICYmICdmdW5jdGlvbicgPT09IHR5cGVvZiBfZ2V0LmdldClcbiAgICBfc3VwZXIgPSBfZ2V0LmdldFxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIG5hbWUsXG4gICAgeyBnZXQ6IGZ1bmN0aW9uIG92ZXJ3cml0aW5nUHJvcGVydHlHZXR0ZXIoKSB7XG4gICAgICAgIC8vIFNldHRpbmcgdGhlIGBzc2ZpYCBmbGFnIHRvIGBvdmVyd3JpdGluZ1Byb3BlcnR5R2V0dGVyYCBjYXVzZXMgdGhpc1xuICAgICAgICAvLyBmdW5jdGlvbiB0byBiZSB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIGltcGxlbWVudGF0aW9uIGZyYW1lc1xuICAgICAgICAvLyBmcm9tIHRoZSBzdGFjayB0cmFjZSBvZiBhIGZhaWxlZCBhc3NlcnRpb24uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byB1c2UgdGhpcyBmdW5jdGlvbiBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgaWZcbiAgICAgICAgLy8gdGhlIGBsb2NrU3NmaWAgZmxhZyBpc24ndCBzZXQgYW5kIHByb3h5IHByb3RlY3Rpb24gaXMgZGlzYWJsZWQuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIElmIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXMgc2V0LCB0aGVuIGVpdGhlciB0aGlzIGFzc2VydGlvbiBoYXMgYmVlblxuICAgICAgICAvLyBvdmVyd3JpdHRlbiBieSBhbm90aGVyIGFzc2VydGlvbiwgb3IgdGhpcyBhc3NlcnRpb24gaXMgYmVpbmcgaW52b2tlZFxuICAgICAgICAvLyBmcm9tIGluc2lkZSBvZiBhbm90aGVyIGFzc2VydGlvbi4gSW4gdGhlIGZpcnN0IGNhc2UsIHRoZSBgc3NmaWAgZmxhZ1xuICAgICAgICAvLyBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3ZlcndyaXRpbmcgYXNzZXJ0aW9uLiBJbiB0aGUgc2Vjb25kXG4gICAgICAgIC8vIGNhc2UsIHRoZSBgc3NmaWAgZmxhZyBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3V0ZXIgYXNzZXJ0aW9uLlxuICAgICAgICAvL1xuICAgICAgICAvLyBJZiBwcm94eSBwcm90ZWN0aW9uIGlzIGVuYWJsZWQsIHRoZW4gdGhlIGBzc2ZpYCBmbGFnIGhhcyBhbHJlYWR5IGJlZW5cbiAgICAgICAgLy8gc2V0IGJ5IHRoZSBwcm94eSBnZXR0ZXIuXG4gICAgICAgIGlmICghaXNQcm94eUVuYWJsZWQoKSAmJiAhZmxhZyh0aGlzLCAnbG9ja1NzZmknKSkge1xuICAgICAgICAgIGZsYWcodGhpcywgJ3NzZmknLCBvdmVyd3JpdGluZ1Byb3BlcnR5R2V0dGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHRpbmcgdGhlIGBsb2NrU3NmaWAgZmxhZyB0byBgdHJ1ZWAgcHJldmVudHMgdGhlIG92ZXJ3cml0dGVuXG4gICAgICAgIC8vIGFzc2VydGlvbiBmcm9tIGNoYW5naW5nIHRoZSBgc3NmaWAgZmxhZy4gQnkgdGhpcyBwb2ludCwgdGhlIGBzc2ZpYFxuICAgICAgICAvLyBmbGFnIGlzIGFscmVhZHkgc2V0IHRvIHRoZSBjb3JyZWN0IHN0YXJ0aW5nIHBvaW50IGZvciB0aGlzIGFzc2VydGlvbi5cbiAgICAgICAgdmFyIG9yaWdMb2NrU3NmaSA9IGZsYWcodGhpcywgJ2xvY2tTc2ZpJyk7XG4gICAgICAgIGZsYWcodGhpcywgJ2xvY2tTc2ZpJywgdHJ1ZSk7XG4gICAgICAgIHZhciByZXN1bHQgPSBnZXR0ZXIoX3N1cGVyKS5jYWxsKHRoaXMpO1xuICAgICAgICBmbGFnKHRoaXMsICdsb2NrU3NmaScsIG9yaWdMb2NrU3NmaSk7XG5cbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuZXdBc3NlcnRpb24gPSBuZXcgY2hhaS5Bc3NlcnRpb24oKTtcbiAgICAgICAgdHJhbnNmZXJGbGFncyh0aGlzLCBuZXdBc3NlcnRpb24pO1xuICAgICAgICByZXR1cm4gbmV3QXNzZXJ0aW9uO1xuICAgICAgfVxuICAgICwgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufTtcbiIsIi8qIVxuICogQ2hhaSAtIG92ZXJ3cml0ZU1ldGhvZCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxudmFyIGFkZExlbmd0aEd1YXJkID0gcmVxdWlyZSgnLi9hZGRMZW5ndGhHdWFyZCcpO1xudmFyIGNoYWkgPSByZXF1aXJlKCcuLi8uLi9jaGFpJyk7XG52YXIgZmxhZyA9IHJlcXVpcmUoJy4vZmxhZycpO1xudmFyIHByb3hpZnkgPSByZXF1aXJlKCcuL3Byb3hpZnknKTtcbnZhciB0cmFuc2ZlckZsYWdzID0gcmVxdWlyZSgnLi90cmFuc2ZlckZsYWdzJyk7XG5cbi8qKlxuICogIyMjIC5vdmVyd3JpdGVNZXRob2QoY3R4LCBuYW1lLCBmbilcbiAqXG4gKiBPdmVyd2l0ZXMgYW4gYWxyZWFkeSBleGlzdGluZyBtZXRob2QgYW5kIHByb3ZpZGVzXG4gKiBhY2Nlc3MgdG8gcHJldmlvdXMgZnVuY3Rpb24uIE11c3QgcmV0dXJuIGZ1bmN0aW9uXG4gKiB0byBiZSB1c2VkIGZvciBuYW1lLlxuICpcbiAqICAgICB1dGlscy5vdmVyd3JpdGVNZXRob2QoY2hhaS5Bc3NlcnRpb24ucHJvdG90eXBlLCAnZXF1YWwnLCBmdW5jdGlvbiAoX3N1cGVyKSB7XG4gKiAgICAgICByZXR1cm4gZnVuY3Rpb24gKHN0cikge1xuICogICAgICAgICB2YXIgb2JqID0gdXRpbHMuZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gKiAgICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBGb28pIHtcbiAqICAgICAgICAgICBuZXcgY2hhaS5Bc3NlcnRpb24ob2JqLnZhbHVlKS50by5lcXVhbChzdHIpO1xuICogICAgICAgICB9IGVsc2Uge1xuICogICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICogICAgICAgICB9XG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICogQ2FuIGFsc28gYmUgYWNjZXNzZWQgZGlyZWN0bHkgZnJvbSBgY2hhaS5Bc3NlcnRpb25gLlxuICpcbiAqICAgICBjaGFpLkFzc2VydGlvbi5vdmVyd3JpdGVNZXRob2QoJ2ZvbycsIGZuKTtcbiAqXG4gKiBUaGVuIGNhbiBiZSB1c2VkIGFzIGFueSBvdGhlciBhc3NlcnRpb24uXG4gKlxuICogICAgIGV4cGVjdChteUZvbykudG8uZXF1YWwoJ2JhcicpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjdHggb2JqZWN0IHdob3NlIG1ldGhvZCBpcyB0byBiZSBvdmVyd3JpdHRlblxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgbWV0aG9kIHRvIG92ZXJ3cml0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIG5hbWVcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIG92ZXJ3cml0ZU1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG92ZXJ3cml0ZU1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCkge1xuICB2YXIgX21ldGhvZCA9IGN0eFtuYW1lXVxuICAgICwgX3N1cGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG5hbWUgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgfTtcblxuICBpZiAoX21ldGhvZCAmJiAnZnVuY3Rpb24nID09PSB0eXBlb2YgX21ldGhvZClcbiAgICBfc3VwZXIgPSBfbWV0aG9kO1xuXG4gIHZhciBvdmVyd3JpdGluZ01ldGhvZFdyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gU2V0dGluZyB0aGUgYHNzZmlgIGZsYWcgdG8gYG92ZXJ3cml0aW5nTWV0aG9kV3JhcHBlcmAgY2F1c2VzIHRoaXNcbiAgICAvLyBmdW5jdGlvbiB0byBiZSB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIGltcGxlbWVudGF0aW9uIGZyYW1lcyBmcm9tXG4gICAgLy8gdGhlIHN0YWNrIHRyYWNlIG9mIGEgZmFpbGVkIGFzc2VydGlvbi5cbiAgICAvL1xuICAgIC8vIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byB1c2UgdGhpcyBmdW5jdGlvbiBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgaWYgdGhlXG4gICAgLy8gYGxvY2tTc2ZpYCBmbGFnIGlzbid0IHNldC5cbiAgICAvL1xuICAgIC8vIElmIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXMgc2V0LCB0aGVuIGVpdGhlciB0aGlzIGFzc2VydGlvbiBoYXMgYmVlblxuICAgIC8vIG92ZXJ3cml0dGVuIGJ5IGFub3RoZXIgYXNzZXJ0aW9uLCBvciB0aGlzIGFzc2VydGlvbiBpcyBiZWluZyBpbnZva2VkIGZyb21cbiAgICAvLyBpbnNpZGUgb2YgYW5vdGhlciBhc3NlcnRpb24uIEluIHRoZSBmaXJzdCBjYXNlLCB0aGUgYHNzZmlgIGZsYWcgaGFzXG4gICAgLy8gYWxyZWFkeSBiZWVuIHNldCBieSB0aGUgb3ZlcndyaXRpbmcgYXNzZXJ0aW9uLiBJbiB0aGUgc2Vjb25kIGNhc2UsIHRoZVxuICAgIC8vIGBzc2ZpYCBmbGFnIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IHRoZSBvdXRlciBhc3NlcnRpb24uXG4gICAgaWYgKCFmbGFnKHRoaXMsICdsb2NrU3NmaScpKSB7XG4gICAgICBmbGFnKHRoaXMsICdzc2ZpJywgb3ZlcndyaXRpbmdNZXRob2RXcmFwcGVyKTtcbiAgICB9XG5cbiAgICAvLyBTZXR0aW5nIHRoZSBgbG9ja1NzZmlgIGZsYWcgdG8gYHRydWVgIHByZXZlbnRzIHRoZSBvdmVyd3JpdHRlbiBhc3NlcnRpb25cbiAgICAvLyBmcm9tIGNoYW5naW5nIHRoZSBgc3NmaWAgZmxhZy4gQnkgdGhpcyBwb2ludCwgdGhlIGBzc2ZpYCBmbGFnIGlzIGFscmVhZHlcbiAgICAvLyBzZXQgdG8gdGhlIGNvcnJlY3Qgc3RhcnRpbmcgcG9pbnQgZm9yIHRoaXMgYXNzZXJ0aW9uLlxuICAgIHZhciBvcmlnTG9ja1NzZmkgPSBmbGFnKHRoaXMsICdsb2NrU3NmaScpO1xuICAgIGZsYWcodGhpcywgJ2xvY2tTc2ZpJywgdHJ1ZSk7XG4gICAgdmFyIHJlc3VsdCA9IG1ldGhvZChfc3VwZXIpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgZmxhZyh0aGlzLCAnbG9ja1NzZmknLCBvcmlnTG9ja1NzZmkpO1xuXG4gICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhciBuZXdBc3NlcnRpb24gPSBuZXcgY2hhaS5Bc3NlcnRpb24oKTtcbiAgICB0cmFuc2ZlckZsYWdzKHRoaXMsIG5ld0Fzc2VydGlvbik7XG4gICAgcmV0dXJuIG5ld0Fzc2VydGlvbjtcbiAgfVxuXG4gIGFkZExlbmd0aEd1YXJkKG92ZXJ3cml0aW5nTWV0aG9kV3JhcHBlciwgbmFtZSwgZmFsc2UpO1xuICBjdHhbbmFtZV0gPSBwcm94aWZ5KG92ZXJ3cml0aW5nTWV0aG9kV3JhcHBlciwgbmFtZSk7XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gYWRkQ2hhaW5pbmdNZXRob2QgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGVuY2llc1xuICovXG5cbnZhciBhZGRMZW5ndGhHdWFyZCA9IHJlcXVpcmUoJy4vYWRkTGVuZ3RoR3VhcmQnKTtcbnZhciBjaGFpID0gcmVxdWlyZSgnLi4vLi4vY2hhaScpO1xudmFyIGZsYWcgPSByZXF1aXJlKCcuL2ZsYWcnKTtcbnZhciBwcm94aWZ5ID0gcmVxdWlyZSgnLi9wcm94aWZ5Jyk7XG52YXIgdHJhbnNmZXJGbGFncyA9IHJlcXVpcmUoJy4vdHJhbnNmZXJGbGFncycpO1xuXG4vKiFcbiAqIE1vZHVsZSB2YXJpYWJsZXNcbiAqL1xuXG4vLyBDaGVjayB3aGV0aGVyIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIGlzIHN1cHBvcnRlZFxudmFyIGNhblNldFByb3RvdHlwZSA9IHR5cGVvZiBPYmplY3Quc2V0UHJvdG90eXBlT2YgPT09ICdmdW5jdGlvbic7XG5cbi8vIFdpdGhvdXQgYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgc3VwcG9ydCwgdGhpcyBtb2R1bGUgd2lsbCBuZWVkIHRvIGFkZCBwcm9wZXJ0aWVzIHRvIGEgZnVuY3Rpb24uXG4vLyBIb3dldmVyLCBzb21lIG9mIGZ1bmN0aW9ucycgb3duIHByb3BzIGFyZSBub3QgY29uZmlndXJhYmxlIGFuZCBzaG91bGQgYmUgc2tpcHBlZC5cbnZhciB0ZXN0Rm4gPSBmdW5jdGlvbigpIHt9O1xudmFyIGV4Y2x1ZGVOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3RGbikuZmlsdGVyKGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0ZXN0Rm4sIG5hbWUpO1xuXG4gIC8vIE5vdGU6IFBoYW50b21KUyAxLnggaW5jbHVkZXMgYGNhbGxlZWAgYXMgb25lIG9mIGB0ZXN0Rm5gJ3Mgb3duIHByb3BlcnRpZXMsXG4gIC8vIGJ1dCB0aGVuIHJldHVybnMgYHVuZGVmaW5lZGAgYXMgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgZm9yIGBjYWxsZWVgLiBBcyBhXG4gIC8vIHdvcmthcm91bmQsIHdlIHBlcmZvcm0gYW4gb3RoZXJ3aXNlIHVubmVjZXNzYXJ5IHR5cGUtY2hlY2sgZm9yIGBwcm9wRGVzY2AsXG4gIC8vIGFuZCB0aGVuIGZpbHRlciBpdCBvdXQgaWYgaXQncyBub3QgYW4gb2JqZWN0IGFzIGl0IHNob3VsZCBiZS5cbiAgaWYgKHR5cGVvZiBwcm9wRGVzYyAhPT0gJ29iamVjdCcpXG4gICAgcmV0dXJuIHRydWU7XG5cbiAgcmV0dXJuICFwcm9wRGVzYy5jb25maWd1cmFibGU7XG59KTtcblxuLy8gQ2FjaGUgYEZ1bmN0aW9uYCBwcm9wZXJ0aWVzXG52YXIgY2FsbCAgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCxcbiAgICBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLyoqXG4gKiAjIyMgLmFkZENoYWluYWJsZU1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCwgY2hhaW5pbmdCZWhhdmlvcilcbiAqXG4gKiBBZGRzIGEgbWV0aG9kIHRvIGFuIG9iamVjdCwgc3VjaCB0aGF0IHRoZSBtZXRob2QgY2FuIGFsc28gYmUgY2hhaW5lZC5cbiAqXG4gKiAgICAgdXRpbHMuYWRkQ2hhaW5hYmxlTWV0aG9kKGNoYWkuQXNzZXJ0aW9uLnByb3RvdHlwZSwgJ2ZvbycsIGZ1bmN0aW9uIChzdHIpIHtcbiAqICAgICAgIHZhciBvYmogPSB1dGlscy5mbGFnKHRoaXMsICdvYmplY3QnKTtcbiAqICAgICAgIG5ldyBjaGFpLkFzc2VydGlvbihvYmopLnRvLmJlLmVxdWFsKHN0cik7XG4gKiAgICAgfSk7XG4gKlxuICogQ2FuIGFsc28gYmUgYWNjZXNzZWQgZGlyZWN0bHkgZnJvbSBgY2hhaS5Bc3NlcnRpb25gLlxuICpcbiAqICAgICBjaGFpLkFzc2VydGlvbi5hZGRDaGFpbmFibGVNZXRob2QoJ2ZvbycsIGZuLCBjaGFpbmluZ0JlaGF2aW9yKTtcbiAqXG4gKiBUaGUgcmVzdWx0IGNhbiB0aGVuIGJlIHVzZWQgYXMgYm90aCBhIG1ldGhvZCBhc3NlcnRpb24sIGV4ZWN1dGluZyBib3RoIGBtZXRob2RgIGFuZFxuICogYGNoYWluaW5nQmVoYXZpb3JgLCBvciBhcyBhIGxhbmd1YWdlIGNoYWluLCB3aGljaCBvbmx5IGV4ZWN1dGVzIGBjaGFpbmluZ0JlaGF2aW9yYC5cbiAqXG4gKiAgICAgZXhwZWN0KGZvb1N0cikudG8uYmUuZm9vKCdiYXInKTtcbiAqICAgICBleHBlY3QoZm9vU3RyKS50by5iZS5mb28uZXF1YWwoJ2ZvbycpO1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjdHggb2JqZWN0IHRvIHdoaWNoIHRoZSBtZXRob2QgaXMgYWRkZWRcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9mIG1ldGhvZCB0byBhZGRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1ldGhvZCBmdW5jdGlvbiB0byBiZSB1c2VkIGZvciBgbmFtZWAsIHdoZW4gY2FsbGVkXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjaGFpbmluZ0JlaGF2aW9yIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCBldmVyeSB0aW1lIHRoZSBwcm9wZXJ0eSBpcyBhY2Nlc3NlZFxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgYWRkQ2hhaW5hYmxlTWV0aG9kXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYWRkQ2hhaW5hYmxlTWV0aG9kKGN0eCwgbmFtZSwgbWV0aG9kLCBjaGFpbmluZ0JlaGF2aW9yKSB7XG4gIGlmICh0eXBlb2YgY2hhaW5pbmdCZWhhdmlvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGNoYWluaW5nQmVoYXZpb3IgPSBmdW5jdGlvbiAoKSB7IH07XG4gIH1cblxuICB2YXIgY2hhaW5hYmxlQmVoYXZpb3IgPSB7XG4gICAgICBtZXRob2Q6IG1ldGhvZFxuICAgICwgY2hhaW5pbmdCZWhhdmlvcjogY2hhaW5pbmdCZWhhdmlvclxuICB9O1xuXG4gIC8vIHNhdmUgdGhlIG1ldGhvZHMgc28gd2UgY2FuIG92ZXJ3cml0ZSB0aGVtIGxhdGVyLCBpZiB3ZSBuZWVkIHRvLlxuICBpZiAoIWN0eC5fX21ldGhvZHMpIHtcbiAgICBjdHguX19tZXRob2RzID0ge307XG4gIH1cbiAgY3R4Ll9fbWV0aG9kc1tuYW1lXSA9IGNoYWluYWJsZUJlaGF2aW9yO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIG5hbWUsXG4gICAgeyBnZXQ6IGZ1bmN0aW9uIGNoYWluYWJsZU1ldGhvZEdldHRlcigpIHtcbiAgICAgICAgY2hhaW5hYmxlQmVoYXZpb3IuY2hhaW5pbmdCZWhhdmlvci5jYWxsKHRoaXMpO1xuXG4gICAgICAgIHZhciBjaGFpbmFibGVNZXRob2RXcmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIFNldHRpbmcgdGhlIGBzc2ZpYCBmbGFnIHRvIGBjaGFpbmFibGVNZXRob2RXcmFwcGVyYCBjYXVzZXMgdGhpc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uIHRvIGJlIHRoZSBzdGFydGluZyBwb2ludCBmb3IgcmVtb3ZpbmcgaW1wbGVtZW50YXRpb25cbiAgICAgICAgICAvLyBmcmFtZXMgZnJvbSB0aGUgc3RhY2sgdHJhY2Ugb2YgYSBmYWlsZWQgYXNzZXJ0aW9uLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gSG93ZXZlciwgd2Ugb25seSB3YW50IHRvIHVzZSB0aGlzIGZ1bmN0aW9uIGFzIHRoZSBzdGFydGluZyBwb2ludCBpZlxuICAgICAgICAgIC8vIHRoZSBgbG9ja1NzZmlgIGZsYWcgaXNuJ3Qgc2V0LlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gSWYgdGhlIGBsb2NrU3NmaWAgZmxhZyBpcyBzZXQsIHRoZW4gdGhpcyBhc3NlcnRpb24gaXMgYmVpbmdcbiAgICAgICAgICAvLyBpbnZva2VkIGZyb20gaW5zaWRlIG9mIGFub3RoZXIgYXNzZXJ0aW9uLiBJbiB0aGlzIGNhc2UsIHRoZSBgc3NmaWBcbiAgICAgICAgICAvLyBmbGFnIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IHRoZSBvdXRlciBhc3NlcnRpb24uXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBOb3RlIHRoYXQgb3ZlcndyaXRpbmcgYSBjaGFpbmFibGUgbWV0aG9kIG1lcmVseSByZXBsYWNlcyB0aGUgc2F2ZWRcbiAgICAgICAgICAvLyBtZXRob2RzIGluIGBjdHguX19tZXRob2RzYCBpbnN0ZWFkIG9mIGNvbXBsZXRlbHkgcmVwbGFjaW5nIHRoZVxuICAgICAgICAgIC8vIG92ZXJ3cml0dGVuIGFzc2VydGlvbi4gVGhlcmVmb3JlLCBhbiBvdmVyd3JpdGluZyBhc3NlcnRpb24gd29uJ3RcbiAgICAgICAgICAvLyBzZXQgdGhlIGBzc2ZpYCBvciBgbG9ja1NzZmlgIGZsYWdzLlxuICAgICAgICAgIGlmICghZmxhZyh0aGlzLCAnbG9ja1NzZmknKSkge1xuICAgICAgICAgICAgZmxhZyh0aGlzLCAnc3NmaScsIGNoYWluYWJsZU1ldGhvZFdyYXBwZXIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciByZXN1bHQgPSBjaGFpbmFibGVCZWhhdmlvci5tZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG5ld0Fzc2VydGlvbiA9IG5ldyBjaGFpLkFzc2VydGlvbigpO1xuICAgICAgICAgIHRyYW5zZmVyRmxhZ3ModGhpcywgbmV3QXNzZXJ0aW9uKTtcbiAgICAgICAgICByZXR1cm4gbmV3QXNzZXJ0aW9uO1xuICAgICAgICB9O1xuXG4gICAgICAgIGFkZExlbmd0aEd1YXJkKGNoYWluYWJsZU1ldGhvZFdyYXBwZXIsIG5hbWUsIHRydWUpO1xuXG4gICAgICAgIC8vIFVzZSBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBpZiBhdmFpbGFibGVcbiAgICAgICAgaWYgKGNhblNldFByb3RvdHlwZSkge1xuICAgICAgICAgIC8vIEluaGVyaXQgYWxsIHByb3BlcnRpZXMgZnJvbSB0aGUgb2JqZWN0IGJ5IHJlcGxhY2luZyB0aGUgYEZ1bmN0aW9uYCBwcm90b3R5cGVcbiAgICAgICAgICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSh0aGlzKTtcbiAgICAgICAgICAvLyBSZXN0b3JlIHRoZSBgY2FsbGAgYW5kIGBhcHBseWAgbWV0aG9kcyBmcm9tIGBGdW5jdGlvbmBcbiAgICAgICAgICBwcm90b3R5cGUuY2FsbCA9IGNhbGw7XG4gICAgICAgICAgcHJvdG90eXBlLmFwcGx5ID0gYXBwbHk7XG4gICAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGNoYWluYWJsZU1ldGhvZFdyYXBwZXIsIHByb3RvdHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCByZWRlZmluZSBhbGwgcHJvcGVydGllcyAoc2xvdyEpXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBhc3NlcnRlck5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3R4KTtcbiAgICAgICAgICBhc3NlcnRlck5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGFzc2VydGVyTmFtZSkge1xuICAgICAgICAgICAgaWYgKGV4Y2x1ZGVOYW1lcy5pbmRleE9mKGFzc2VydGVyTmFtZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBkID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjdHgsIGFzc2VydGVyTmFtZSk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2hhaW5hYmxlTWV0aG9kV3JhcHBlciwgYXNzZXJ0ZXJOYW1lLCBwZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0cmFuc2ZlckZsYWdzKHRoaXMsIGNoYWluYWJsZU1ldGhvZFdyYXBwZXIpO1xuICAgICAgICByZXR1cm4gcHJveGlmeShjaGFpbmFibGVNZXRob2RXcmFwcGVyKTtcbiAgICAgIH1cbiAgICAsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn07XG4iLCIvKiFcbiAqIENoYWkgLSBvdmVyd3JpdGVDaGFpbmFibGVNZXRob2QgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbnZhciBjaGFpID0gcmVxdWlyZSgnLi4vLi4vY2hhaScpO1xudmFyIHRyYW5zZmVyRmxhZ3MgPSByZXF1aXJlKCcuL3RyYW5zZmVyRmxhZ3MnKTtcblxuLyoqXG4gKiAjIyMgLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCwgY2hhaW5pbmdCZWhhdmlvcilcbiAqXG4gKiBPdmVyd2l0ZXMgYW4gYWxyZWFkeSBleGlzdGluZyBjaGFpbmFibGUgbWV0aG9kXG4gKiBhbmQgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBwcmV2aW91cyBmdW5jdGlvbiBvclxuICogcHJvcGVydHkuICBNdXN0IHJldHVybiBmdW5jdGlvbnMgdG8gYmUgdXNlZCBmb3JcbiAqIG5hbWUuXG4gKlxuICogICAgIHV0aWxzLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZChjaGFpLkFzc2VydGlvbi5wcm90b3R5cGUsICdsZW5ndGhPZicsXG4gKiAgICAgICBmdW5jdGlvbiAoX3N1cGVyKSB7XG4gKiAgICAgICB9XG4gKiAgICAgLCBmdW5jdGlvbiAoX3N1cGVyKSB7XG4gKiAgICAgICB9XG4gKiAgICAgKTtcbiAqXG4gKiBDYW4gYWxzbyBiZSBhY2Nlc3NlZCBkaXJlY3RseSBmcm9tIGBjaGFpLkFzc2VydGlvbmAuXG4gKlxuICogICAgIGNoYWkuQXNzZXJ0aW9uLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZCgnZm9vJywgZm4sIGZuKTtcbiAqXG4gKiBUaGVuIGNhbiBiZSB1c2VkIGFzIGFueSBvdGhlciBhc3NlcnRpb24uXG4gKlxuICogICAgIGV4cGVjdChteUZvbykudG8uaGF2ZS5sZW5ndGhPZigzKTtcbiAqICAgICBleHBlY3QobXlGb28pLnRvLmhhdmUubGVuZ3RoT2YuYWJvdmUoMyk7XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGN0eCBvYmplY3Qgd2hvc2UgbWV0aG9kIC8gcHJvcGVydHkgaXMgdG8gYmUgb3ZlcndyaXR0ZW5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9mIG1ldGhvZCAvIHByb3BlcnR5IHRvIG92ZXJ3cml0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWV0aG9kIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yIG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNoYWluaW5nQmVoYXZpb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgZnVuY3Rpb24gdG8gYmUgdXNlZCBmb3IgcHJvcGVydHlcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIG92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZChjdHgsIG5hbWUsIG1ldGhvZCwgY2hhaW5pbmdCZWhhdmlvcikge1xuICB2YXIgY2hhaW5hYmxlQmVoYXZpb3IgPSBjdHguX19tZXRob2RzW25hbWVdO1xuXG4gIHZhciBfY2hhaW5pbmdCZWhhdmlvciA9IGNoYWluYWJsZUJlaGF2aW9yLmNoYWluaW5nQmVoYXZpb3I7XG4gIGNoYWluYWJsZUJlaGF2aW9yLmNoYWluaW5nQmVoYXZpb3IgPSBmdW5jdGlvbiBvdmVyd3JpdGluZ0NoYWluYWJsZU1ldGhvZEdldHRlcigpIHtcbiAgICB2YXIgcmVzdWx0ID0gY2hhaW5pbmdCZWhhdmlvcihfY2hhaW5pbmdCZWhhdmlvcikuY2FsbCh0aGlzKTtcbiAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIG5ld0Fzc2VydGlvbiA9IG5ldyBjaGFpLkFzc2VydGlvbigpO1xuICAgIHRyYW5zZmVyRmxhZ3ModGhpcywgbmV3QXNzZXJ0aW9uKTtcbiAgICByZXR1cm4gbmV3QXNzZXJ0aW9uO1xuICB9O1xuXG4gIHZhciBfbWV0aG9kID0gY2hhaW5hYmxlQmVoYXZpb3IubWV0aG9kO1xuICBjaGFpbmFibGVCZWhhdmlvci5tZXRob2QgPSBmdW5jdGlvbiBvdmVyd3JpdGluZ0NoYWluYWJsZU1ldGhvZFdyYXBwZXIoKSB7XG4gICAgdmFyIHJlc3VsdCA9IG1ldGhvZChfbWV0aG9kKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgbmV3QXNzZXJ0aW9uID0gbmV3IGNoYWkuQXNzZXJ0aW9uKCk7XG4gICAgdHJhbnNmZXJGbGFncyh0aGlzLCBuZXdBc3NlcnRpb24pO1xuICAgIHJldHVybiBuZXdBc3NlcnRpb247XG4gIH07XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gY29tcGFyZUJ5SW5zcGVjdCB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE2IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyohXG4gKiBNb2R1bGUgZGVwZW5kYW5jaWVzXG4gKi9cblxudmFyIGluc3BlY3QgPSByZXF1aXJlKCcuL2luc3BlY3QnKTtcblxuLyoqXG4gKiAjIyMgLmNvbXBhcmVCeUluc3BlY3QobWl4ZWQsIG1peGVkKVxuICpcbiAqIFRvIGJlIHVzZWQgYXMgYSBjb21wYXJlRnVuY3Rpb24gd2l0aCBBcnJheS5wcm90b3R5cGUuc29ydC4gQ29tcGFyZXMgZWxlbWVudHNcbiAqIHVzaW5nIGluc3BlY3QgaW5zdGVhZCBvZiBkZWZhdWx0IGJlaGF2aW9yIG9mIHVzaW5nIHRvU3RyaW5nIHNvIHRoYXQgU3ltYm9sc1xuICogYW5kIG9iamVjdHMgd2l0aCBpcnJlZ3VsYXIvbWlzc2luZyB0b1N0cmluZyBjYW4gc3RpbGwgYmUgc29ydGVkIHdpdGhvdXQgYVxuICogVHlwZUVycm9yLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGZpcnN0IGVsZW1lbnQgdG8gY29tcGFyZVxuICogQHBhcmFtIHtNaXhlZH0gc2Vjb25kIGVsZW1lbnQgdG8gY29tcGFyZVxuICogQHJldHVybnMge051bWJlcn0gLTEgaWYgJ2EnIHNob3VsZCBjb21lIGJlZm9yZSAnYic7IG90aGVyd2lzZSAxIFxuICogQG5hbWUgY29tcGFyZUJ5SW5zcGVjdFxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbXBhcmVCeUluc3BlY3QoYSwgYikge1xuICByZXR1cm4gaW5zcGVjdChhKSA8IGluc3BlY3QoYikgPyAtMSA6IDE7XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9scyB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE2IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiAjIyMgLmdldE93bkVudW1lcmFibGVQcm9wZXJ0eVN5bWJvbHMob2JqZWN0KVxuICpcbiAqIFRoaXMgYWxsb3dzIHRoZSByZXRyaWV2YWwgb2YgZGlyZWN0bHktb3duZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBzeW1ib2xzIG9mIGFuXG4gKiBvYmplY3QuIFRoaXMgZnVuY3Rpb24gaXMgbmVjZXNzYXJ5IGJlY2F1c2UgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc1xuICogcmV0dXJucyBib3RoIGVudW1lcmFibGUgYW5kIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IHN5bWJvbHMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICogQHJldHVybnMge0FycmF5fVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQG5hbWUgZ2V0T3duRW51bWVyYWJsZVByb3BlcnR5U3ltYm9sc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE93bkVudW1lcmFibGVQcm9wZXJ0eVN5bWJvbHMob2JqKSB7XG4gIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIFtdO1xuXG4gIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaikuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSkuZW51bWVyYWJsZTtcbiAgfSk7XG59O1xuIiwiLyohXG4gKiBDaGFpIC0gZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNiBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGFuY2llc1xuICovXG5cbnZhciBnZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzID0gcmVxdWlyZSgnLi9nZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzJyk7XG5cbi8qKlxuICogIyMjIC5nZXRPd25FbnVtZXJhYmxlUHJvcGVydGllcyhvYmplY3QpXG4gKlxuICogVGhpcyBhbGxvd3MgdGhlIHJldHJpZXZhbCBvZiBkaXJlY3RseS1vd25lZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBhbiBvYmplY3QuIFRoaXMgZnVuY3Rpb24gaXMgbmVjZXNzYXJ5IGJlY2F1c2UgT2JqZWN0LmtleXMgb25seVxuICogcmV0dXJucyBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzLCBub3QgZW51bWVyYWJsZSBwcm9wZXJ0eSBzeW1ib2xzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBuYW1lIGdldE93bkVudW1lcmFibGVQcm9wZXJ0aWVzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0T3duRW51bWVyYWJsZVByb3BlcnRpZXMob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmNvbmNhdChnZXRPd25FbnVtZXJhYmxlUHJvcGVydHlTeW1ib2xzKG9iaikpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogIVxuICogQ2hhaSAtIGNoZWNrRXJyb3IgdXRpbGl0eVxuICogQ29weXJpZ2h0KGMpIDIwMTItMjAxNiBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qKlxuICogIyMjIC5jaGVja0Vycm9yXG4gKlxuICogQ2hlY2tzIHRoYXQgYW4gZXJyb3IgY29uZm9ybXMgdG8gYSBnaXZlbiBzZXQgb2YgY3JpdGVyaWEgYW5kL29yIHJldHJpZXZlcyBpbmZvcm1hdGlvbiBhYm91dCBpdC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbi8qKlxuICogIyMjIC5jb21wYXRpYmxlSW5zdGFuY2UodGhyb3duLCBlcnJvckxpa2UpXG4gKlxuICogQ2hlY2tzIGlmIHR3byBpbnN0YW5jZXMgYXJlIGNvbXBhdGlibGUgKHN0cmljdCBlcXVhbCkuXG4gKiBSZXR1cm5zIGZhbHNlIGlmIGVycm9yTGlrZSBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgRXJyb3IsIGJlY2F1c2UgaW5zdGFuY2VzXG4gKiBjYW4gb25seSBiZSBjb21wYXRpYmxlIGlmIHRoZXkncmUgYm90aCBlcnJvciBpbnN0YW5jZXMuXG4gKlxuICogQG5hbWUgY29tcGF0aWJsZUluc3RhbmNlXG4gKiBAcGFyYW0ge0Vycm9yfSB0aHJvd24gZXJyb3JcbiAqIEBwYXJhbSB7RXJyb3J8RXJyb3JDb25zdHJ1Y3Rvcn0gZXJyb3JMaWtlIG9iamVjdCB0byBjb21wYXJlIGFnYWluc3RcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY29tcGF0aWJsZUluc3RhbmNlKHRocm93biwgZXJyb3JMaWtlKSB7XG4gIHJldHVybiBlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvciAmJiB0aHJvd24gPT09IGVycm9yTGlrZTtcbn1cblxuLyoqXG4gKiAjIyMgLmNvbXBhdGlibGVDb25zdHJ1Y3Rvcih0aHJvd24sIGVycm9yTGlrZSlcbiAqXG4gKiBDaGVja3MgaWYgdHdvIGNvbnN0cnVjdG9ycyBhcmUgY29tcGF0aWJsZS5cbiAqIFRoaXMgZnVuY3Rpb24gY2FuIHJlY2VpdmUgZWl0aGVyIGFuIGVycm9yIGNvbnN0cnVjdG9yIG9yXG4gKiBhbiBlcnJvciBpbnN0YW5jZSBhcyB0aGUgYGVycm9yTGlrZWAgYXJndW1lbnQuXG4gKiBDb25zdHJ1Y3RvcnMgYXJlIGNvbXBhdGlibGUgaWYgdGhleSdyZSB0aGUgc2FtZSBvciBpZiBvbmUgaXNcbiAqIGFuIGluc3RhbmNlIG9mIGFub3RoZXIuXG4gKlxuICogQG5hbWUgY29tcGF0aWJsZUNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0Vycm9yfSB0aHJvd24gZXJyb3JcbiAqIEBwYXJhbSB7RXJyb3J8RXJyb3JDb25zdHJ1Y3Rvcn0gZXJyb3JMaWtlIG9iamVjdCB0byBjb21wYXJlIGFnYWluc3RcbiAqIEBuYW1lc3BhY2UgVXRpbHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY29tcGF0aWJsZUNvbnN0cnVjdG9yKHRocm93biwgZXJyb3JMaWtlKSB7XG4gIGlmIChlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIC8vIElmIGBlcnJvckxpa2VgIGlzIGFuIGluc3RhbmNlIG9mIGFueSBlcnJvciB3ZSBjb21wYXJlIHRoZWlyIGNvbnN0cnVjdG9yc1xuICAgIHJldHVybiB0aHJvd24uY29uc3RydWN0b3IgPT09IGVycm9yTGlrZS5jb25zdHJ1Y3RvciB8fCB0aHJvd24gaW5zdGFuY2VvZiBlcnJvckxpa2UuY29uc3RydWN0b3I7XG4gIH0gZWxzZSBpZiAoZXJyb3JMaWtlLnByb3RvdHlwZSBpbnN0YW5jZW9mIEVycm9yIHx8IGVycm9yTGlrZSA9PT0gRXJyb3IpIHtcbiAgICAvLyBJZiBgZXJyb3JMaWtlYCBpcyBhIGNvbnN0cnVjdG9yIHRoYXQgaW5oZXJpdHMgZnJvbSBFcnJvciwgd2UgY29tcGFyZSBgdGhyb3duYCB0byBgZXJyb3JMaWtlYCBkaXJlY3RseVxuICAgIHJldHVybiB0aHJvd24uY29uc3RydWN0b3IgPT09IGVycm9yTGlrZSB8fCB0aHJvd24gaW5zdGFuY2VvZiBlcnJvckxpa2U7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogIyMjIC5jb21wYXRpYmxlTWVzc2FnZSh0aHJvd24sIGVyck1hdGNoZXIpXG4gKlxuICogQ2hlY2tzIGlmIGFuIGVycm9yJ3MgbWVzc2FnZSBpcyBjb21wYXRpYmxlIHdpdGggYSBtYXRjaGVyIChTdHJpbmcgb3IgUmVnRXhwKS5cbiAqIElmIHRoZSBtZXNzYWdlIGNvbnRhaW5zIHRoZSBTdHJpbmcgb3IgcGFzc2VzIHRoZSBSZWdFeHAgdGVzdCxcbiAqIGl0IGlzIGNvbnNpZGVyZWQgY29tcGF0aWJsZS5cbiAqXG4gKiBAbmFtZSBjb21wYXRpYmxlTWVzc2FnZVxuICogQHBhcmFtIHtFcnJvcn0gdGhyb3duIGVycm9yXG4gKiBAcGFyYW0ge1N0cmluZ3xSZWdFeHB9IGVyck1hdGNoZXIgdG8gbG9vayBmb3IgaW50byB0aGUgbWVzc2FnZVxuICogQG5hbWVzcGFjZSBVdGlsc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjb21wYXRpYmxlTWVzc2FnZSh0aHJvd24sIGVyck1hdGNoZXIpIHtcbiAgdmFyIGNvbXBhcmlzb25TdHJpbmcgPSB0eXBlb2YgdGhyb3duID09PSAnc3RyaW5nJyA/IHRocm93biA6IHRocm93bi5tZXNzYWdlO1xuICBpZiAoZXJyTWF0Y2hlciBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiBlcnJNYXRjaGVyLnRlc3QoY29tcGFyaXNvblN0cmluZyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVyck1hdGNoZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGNvbXBhcmlzb25TdHJpbmcuaW5kZXhPZihlcnJNYXRjaGVyKSAhPT0gLTE7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbWFnaWMtbnVtYmVyc1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqICMjIyAuZ2V0RnVuY3Rpb25OYW1lKGNvbnN0cnVjdG9yRm4pXG4gKlxuICogUmV0dXJucyB0aGUgbmFtZSBvZiBhIGZ1bmN0aW9uLlxuICogVGhpcyBhbHNvIGluY2x1ZGVzIGEgcG9seWZpbGwgZnVuY3Rpb24gaWYgYGNvbnN0cnVjdG9yRm4ubmFtZWAgaXMgbm90IGRlZmluZWQuXG4gKlxuICogQG5hbWUgZ2V0RnVuY3Rpb25OYW1lXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvckZuXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG52YXIgZnVuY3Rpb25OYW1lTWF0Y2ggPSAvXFxzKmZ1bmN0aW9uKD86XFxzfFxccypcXC9cXCpbXig/OipcXC8pXStcXCpcXC9cXHMqKSooW15cXChcXC9dKykvO1xuZnVuY3Rpb24gZ2V0RnVuY3Rpb25OYW1lKGNvbnN0cnVjdG9yRm4pIHtcbiAgdmFyIG5hbWUgPSAnJztcbiAgaWYgKHR5cGVvZiBjb25zdHJ1Y3RvckZuLm5hbWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gSGVyZSB3ZSBydW4gYSBwb2x5ZmlsbCBpZiBjb25zdHJ1Y3RvckZuLm5hbWUgaXMgbm90IGRlZmluZWRcbiAgICB2YXIgbWF0Y2ggPSBTdHJpbmcoY29uc3RydWN0b3JGbikubWF0Y2goZnVuY3Rpb25OYW1lTWF0Y2gpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgbmFtZSA9IG1hdGNoWzFdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBuYW1lID0gY29uc3RydWN0b3JGbi5uYW1lO1xuICB9XG5cbiAgcmV0dXJuIG5hbWU7XG59XG5cbi8qKlxuICogIyMjIC5nZXRDb25zdHJ1Y3Rvck5hbWUoZXJyb3JMaWtlKVxuICpcbiAqIEdldHMgdGhlIGNvbnN0cnVjdG9yIG5hbWUgZm9yIGFuIEVycm9yIGluc3RhbmNlIG9yIGNvbnN0cnVjdG9yIGl0c2VsZi5cbiAqXG4gKiBAbmFtZSBnZXRDb25zdHJ1Y3Rvck5hbWVcbiAqIEBwYXJhbSB7RXJyb3J8RXJyb3JDb25zdHJ1Y3Rvcn0gZXJyb3JMaWtlXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGdldENvbnN0cnVjdG9yTmFtZShlcnJvckxpa2UpIHtcbiAgdmFyIGNvbnN0cnVjdG9yTmFtZSA9IGVycm9yTGlrZTtcbiAgaWYgKGVycm9yTGlrZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgY29uc3RydWN0b3JOYW1lID0gZ2V0RnVuY3Rpb25OYW1lKGVycm9yTGlrZS5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVycm9yTGlrZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIElmIGBlcnJgIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBFcnJvciBpdCBpcyBhbiBlcnJvciBjb25zdHJ1Y3RvciBpdHNlbGYgb3IgYW5vdGhlciBmdW5jdGlvbi5cbiAgICAvLyBJZiB3ZSd2ZSBnb3QgYSBjb21tb24gZnVuY3Rpb24gd2UgZ2V0IGl0cyBuYW1lLCBvdGhlcndpc2Ugd2UgbWF5IG5lZWQgdG8gY3JlYXRlIGEgbmV3IGluc3RhbmNlXG4gICAgLy8gb2YgdGhlIGVycm9yIGp1c3QgaW4gY2FzZSBpdCdzIGEgcG9vcmx5LWNvbnN0cnVjdGVkIGVycm9yLiBQbGVhc2Ugc2VlIGNoYWlqcy9jaGFpL2lzc3Vlcy80NSB0byBrbm93IG1vcmUuXG4gICAgY29uc3RydWN0b3JOYW1lID0gZ2V0RnVuY3Rpb25OYW1lKGVycm9yTGlrZSkudHJpbSgpIHx8XG4gICAgICAgIGdldEZ1bmN0aW9uTmFtZShuZXcgZXJyb3JMaWtlKCkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbiAgfVxuXG4gIHJldHVybiBjb25zdHJ1Y3Rvck5hbWU7XG59XG5cbi8qKlxuICogIyMjIC5nZXRNZXNzYWdlKGVycm9yTGlrZSlcbiAqXG4gKiBHZXRzIHRoZSBlcnJvciBtZXNzYWdlIGZyb20gYW4gZXJyb3IuXG4gKiBJZiBgZXJyYCBpcyBhIFN0cmluZyBpdHNlbGYsIHdlIHJldHVybiBpdC5cbiAqIElmIHRoZSBlcnJvciBoYXMgbm8gbWVzc2FnZSwgd2UgcmV0dXJuIGFuIGVtcHR5IHN0cmluZy5cbiAqXG4gKiBAbmFtZSBnZXRNZXNzYWdlXG4gKiBAcGFyYW0ge0Vycm9yfFN0cmluZ30gZXJyb3JMaWtlXG4gKiBAbmFtZXNwYWNlIFV0aWxzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGdldE1lc3NhZ2UoZXJyb3JMaWtlKSB7XG4gIHZhciBtc2cgPSAnJztcbiAgaWYgKGVycm9yTGlrZSAmJiBlcnJvckxpa2UubWVzc2FnZSkge1xuICAgIG1zZyA9IGVycm9yTGlrZS5tZXNzYWdlO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlcnJvckxpa2UgPT09ICdzdHJpbmcnKSB7XG4gICAgbXNnID0gZXJyb3JMaWtlO1xuICB9XG5cbiAgcmV0dXJuIG1zZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbXBhdGlibGVJbnN0YW5jZTogY29tcGF0aWJsZUluc3RhbmNlLFxuICBjb21wYXRpYmxlQ29uc3RydWN0b3I6IGNvbXBhdGlibGVDb25zdHJ1Y3RvcixcbiAgY29tcGF0aWJsZU1lc3NhZ2U6IGNvbXBhdGlibGVNZXNzYWdlLFxuICBnZXRNZXNzYWdlOiBnZXRNZXNzYWdlLFxuICBnZXRDb25zdHJ1Y3Rvck5hbWU6IGdldENvbnN0cnVjdG9yTmFtZSxcbn07XG4iLCIvKiFcbiAqIENoYWkgLSBpc05hTiB1dGlsaXR5XG4gKiBDb3B5cmlnaHQoYykgMjAxMi0yMDE1IFNha3RoaXByaXlhbiBWYWlyYW1hbmkgPHRoZWNoYXJnaW5ndm9sY2Fub0BnbWFpbC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqICMjIyAuaXNOYU4odmFsdWUpXG4gKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBOYU4gb3Igbm90LlxuICpcbiAqICAgICB1dGlscy5pc05hTihOYU4pOyAvLyB0cnVlXG4gKlxuICogQHBhcmFtIHtWYWx1ZX0gVGhlIHZhbHVlIHdoaWNoIGhhcyB0byBiZSBjaGVja2VkIGlmIGl0IGlzIE5hTlxuICogQG5hbWUgaXNOYU5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gIC8vIFJlZmVyIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pc25hbi1udW1iZXJcbiAgLy8gc2VjdGlvbidzIE5PVEUuXG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbi8vIElmIEVDTUFTY3JpcHQgNidzIE51bWJlci5pc05hTiBpcyBwcmVzZW50LCBwcmVmZXIgdGhhdC5cbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzTmFOIHx8IGlzTmFOO1xuIiwiLyohXG4gKiBjaGFpXG4gKiBDb3B5cmlnaHQoYykgMjAxMSBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qIVxuICogRGVwZW5kZW5jaWVzIHRoYXQgYXJlIHVzZWQgZm9yIG11bHRpcGxlIGV4cG9ydHMgYXJlIHJlcXVpcmVkIGhlcmUgb25seSBvbmNlXG4gKi9cblxudmFyIHBhdGh2YWwgPSByZXF1aXJlKCdwYXRodmFsJyk7XG5cbi8qIVxuICogdGVzdCB1dGlsaXR5XG4gKi9cblxuZXhwb3J0cy50ZXN0ID0gcmVxdWlyZSgnLi90ZXN0Jyk7XG5cbi8qIVxuICogdHlwZSB1dGlsaXR5XG4gKi9cblxuZXhwb3J0cy50eXBlID0gcmVxdWlyZSgndHlwZS1kZXRlY3QnKTtcblxuLyohXG4gKiBleHBlY3RUeXBlcyB1dGlsaXR5XG4gKi9cbmV4cG9ydHMuZXhwZWN0VHlwZXMgPSByZXF1aXJlKCcuL2V4cGVjdFR5cGVzJyk7XG5cbi8qIVxuICogbWVzc2FnZSB1dGlsaXR5XG4gKi9cblxuZXhwb3J0cy5nZXRNZXNzYWdlID0gcmVxdWlyZSgnLi9nZXRNZXNzYWdlJyk7XG5cbi8qIVxuICogYWN0dWFsIHV0aWxpdHlcbiAqL1xuXG5leHBvcnRzLmdldEFjdHVhbCA9IHJlcXVpcmUoJy4vZ2V0QWN0dWFsJyk7XG5cbi8qIVxuICogSW5zcGVjdCB1dGlsXG4gKi9cblxuZXhwb3J0cy5pbnNwZWN0ID0gcmVxdWlyZSgnLi9pbnNwZWN0Jyk7XG5cbi8qIVxuICogT2JqZWN0IERpc3BsYXkgdXRpbFxuICovXG5cbmV4cG9ydHMub2JqRGlzcGxheSA9IHJlcXVpcmUoJy4vb2JqRGlzcGxheScpO1xuXG4vKiFcbiAqIEZsYWcgdXRpbGl0eVxuICovXG5cbmV4cG9ydHMuZmxhZyA9IHJlcXVpcmUoJy4vZmxhZycpO1xuXG4vKiFcbiAqIEZsYWcgdHJhbnNmZXJyaW5nIHV0aWxpdHlcbiAqL1xuXG5leHBvcnRzLnRyYW5zZmVyRmxhZ3MgPSByZXF1aXJlKCcuL3RyYW5zZmVyRmxhZ3MnKTtcblxuLyohXG4gKiBEZWVwIGVxdWFsIHV0aWxpdHlcbiAqL1xuXG5leHBvcnRzLmVxbCA9IHJlcXVpcmUoJ2RlZXAtZXFsJyk7XG5cbi8qIVxuICogRGVlcCBwYXRoIGluZm9cbiAqL1xuXG5leHBvcnRzLmdldFBhdGhJbmZvID0gcGF0aHZhbC5nZXRQYXRoSW5mbztcblxuLyohXG4gKiBDaGVjayBpZiBhIHByb3BlcnR5IGV4aXN0c1xuICovXG5cbmV4cG9ydHMuaGFzUHJvcGVydHkgPSBwYXRodmFsLmhhc1Byb3BlcnR5O1xuXG4vKiFcbiAqIEZ1bmN0aW9uIG5hbWVcbiAqL1xuXG5leHBvcnRzLmdldE5hbWUgPSByZXF1aXJlKCdnZXQtZnVuYy1uYW1lJyk7XG5cbi8qIVxuICogYWRkIFByb3BlcnR5XG4gKi9cblxuZXhwb3J0cy5hZGRQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vYWRkUHJvcGVydHknKTtcblxuLyohXG4gKiBhZGQgTWV0aG9kXG4gKi9cblxuZXhwb3J0cy5hZGRNZXRob2QgPSByZXF1aXJlKCcuL2FkZE1ldGhvZCcpO1xuXG4vKiFcbiAqIG92ZXJ3cml0ZSBQcm9wZXJ0eVxuICovXG5cbmV4cG9ydHMub3ZlcndyaXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL292ZXJ3cml0ZVByb3BlcnR5Jyk7XG5cbi8qIVxuICogb3ZlcndyaXRlIE1ldGhvZFxuICovXG5cbmV4cG9ydHMub3ZlcndyaXRlTWV0aG9kID0gcmVxdWlyZSgnLi9vdmVyd3JpdGVNZXRob2QnKTtcblxuLyohXG4gKiBBZGQgYSBjaGFpbmFibGUgbWV0aG9kXG4gKi9cblxuZXhwb3J0cy5hZGRDaGFpbmFibGVNZXRob2QgPSByZXF1aXJlKCcuL2FkZENoYWluYWJsZU1ldGhvZCcpO1xuXG4vKiFcbiAqIE92ZXJ3cml0ZSBjaGFpbmFibGUgbWV0aG9kXG4gKi9cblxuZXhwb3J0cy5vdmVyd3JpdGVDaGFpbmFibGVNZXRob2QgPSByZXF1aXJlKCcuL292ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZCcpO1xuXG4vKiFcbiAqIENvbXBhcmUgYnkgaW5zcGVjdCBtZXRob2RcbiAqL1xuXG5leHBvcnRzLmNvbXBhcmVCeUluc3BlY3QgPSByZXF1aXJlKCcuL2NvbXBhcmVCeUluc3BlY3QnKTtcblxuLyohXG4gKiBHZXQgb3duIGVudW1lcmFibGUgcHJvcGVydHkgc3ltYm9scyBtZXRob2RcbiAqL1xuXG5leHBvcnRzLmdldE93bkVudW1lcmFibGVQcm9wZXJ0eVN5bWJvbHMgPSByZXF1aXJlKCcuL2dldE93bkVudW1lcmFibGVQcm9wZXJ0eVN5bWJvbHMnKTtcblxuLyohXG4gKiBHZXQgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBtZXRob2RcbiAqL1xuXG5leHBvcnRzLmdldE93bkVudW1lcmFibGVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi9nZXRPd25FbnVtZXJhYmxlUHJvcGVydGllcycpO1xuXG4vKiFcbiAqIENoZWNrcyBlcnJvciBhZ2FpbnN0IGEgZ2l2ZW4gc2V0IG9mIGNyaXRlcmlhXG4gKi9cblxuZXhwb3J0cy5jaGVja0Vycm9yID0gcmVxdWlyZSgnY2hlY2stZXJyb3InKTtcblxuLyohXG4gKiBQcm94aWZ5IHV0aWxcbiAqL1xuXG5leHBvcnRzLnByb3hpZnkgPSByZXF1aXJlKCcuL3Byb3hpZnknKTtcblxuLyohXG4gKiBhZGRMZW5ndGhHdWFyZCB1dGlsXG4gKi9cblxuZXhwb3J0cy5hZGRMZW5ndGhHdWFyZCA9IHJlcXVpcmUoJy4vYWRkTGVuZ3RoR3VhcmQnKTtcblxuLyohXG4gKiBpc1Byb3h5RW5hYmxlZCBoZWxwZXJcbiAqL1xuXG5leHBvcnRzLmlzUHJveHlFbmFibGVkID0gcmVxdWlyZSgnLi9pc1Byb3h5RW5hYmxlZCcpO1xuXG4vKiFcbiAqIGlzTmFOIG1ldGhvZFxuICovXG5cbmV4cG9ydHMuaXNOYU4gPSByZXF1aXJlKCcuL2lzTmFOJyk7XG4iLCIvKiFcbiAqIGNoYWlcbiAqIGh0dHA6Ly9jaGFpanMuY29tXG4gKiBDb3B5cmlnaHQoYykgMjAxMS0yMDE0IEpha2UgTHVlciA8amFrZUBhbG9naWNhbHBhcmFkb3guY29tPlxuICogTUlUIExpY2Vuc2VkXG4gKi9cblxudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4vY29uZmlnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF9jaGFpLCB1dGlsKSB7XG4gIC8qIVxuICAgKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICAgKi9cblxuICB2YXIgQXNzZXJ0aW9uRXJyb3IgPSBfY2hhaS5Bc3NlcnRpb25FcnJvclxuICAgICwgZmxhZyA9IHV0aWwuZmxhZztcblxuICAvKiFcbiAgICogTW9kdWxlIGV4cG9ydC5cbiAgICovXG5cbiAgX2NoYWkuQXNzZXJ0aW9uID0gQXNzZXJ0aW9uO1xuXG4gIC8qIVxuICAgKiBBc3NlcnRpb24gQ29uc3RydWN0b3JcbiAgICpcbiAgICogQ3JlYXRlcyBvYmplY3QgZm9yIGNoYWluaW5nLlxuICAgKlxuICAgKiBgQXNzZXJ0aW9uYCBvYmplY3RzIGNvbnRhaW4gbWV0YWRhdGEgaW4gdGhlIGZvcm0gb2YgZmxhZ3MuIFRocmVlIGZsYWdzIGNhblxuICAgKiBiZSBhc3NpZ25lZCBkdXJpbmcgaW5zdGFudGlhdGlvbiBieSBwYXNzaW5nIGFyZ3VtZW50cyB0byB0aGlzIGNvbnN0cnVjdG9yOlxuICAgKlxuICAgKiAtIGBvYmplY3RgOiBUaGlzIGZsYWcgY29udGFpbnMgdGhlIHRhcmdldCBvZiB0aGUgYXNzZXJ0aW9uLiBGb3IgZXhhbXBsZSwgaW5cbiAgICogICB0aGUgYXNzZXJ0aW9uIGBleHBlY3QobnVtS2l0dGVucykudG8uZXF1YWwoNyk7YCwgdGhlIGBvYmplY3RgIGZsYWcgd2lsbFxuICAgKiAgIGNvbnRhaW4gYG51bUtpdHRlbnNgIHNvIHRoYXQgdGhlIGBlcXVhbGAgYXNzZXJ0aW9uIGNhbiByZWZlcmVuY2UgaXQgd2hlblxuICAgKiAgIG5lZWRlZC5cbiAgICpcbiAgICogLSBgbWVzc2FnZWA6IFRoaXMgZmxhZyBjb250YWlucyBhbiBvcHRpb25hbCBjdXN0b20gZXJyb3IgbWVzc2FnZSB0byBiZVxuICAgKiAgIHByZXBlbmRlZCB0byB0aGUgZXJyb3IgbWVzc2FnZSB0aGF0J3MgZ2VuZXJhdGVkIGJ5IHRoZSBhc3NlcnRpb24gd2hlbiBpdFxuICAgKiAgIGZhaWxzLlxuICAgKlxuICAgKiAtIGBzc2ZpYDogVGhpcyBmbGFnIHN0YW5kcyBmb3IgXCJzdGFydCBzdGFjayBmdW5jdGlvbiBpbmRpY2F0b3JcIi4gSXRcbiAgICogICBjb250YWlucyBhIGZ1bmN0aW9uIHJlZmVyZW5jZSB0aGF0IHNlcnZlcyBhcyB0aGUgc3RhcnRpbmcgcG9pbnQgZm9yXG4gICAqICAgcmVtb3ZpbmcgZnJhbWVzIGZyb20gdGhlIHN0YWNrIHRyYWNlIG9mIHRoZSBlcnJvciB0aGF0J3MgY3JlYXRlZCBieSB0aGVcbiAgICogICBhc3NlcnRpb24gd2hlbiBpdCBmYWlscy4gVGhlIGdvYWwgaXMgdG8gcHJvdmlkZSBhIGNsZWFuZXIgc3RhY2sgdHJhY2UgdG9cbiAgICogICBlbmQgdXNlcnMgYnkgcmVtb3ZpbmcgQ2hhaSdzIGludGVybmFsIGZ1bmN0aW9ucy4gTm90ZSB0aGF0IGl0IG9ubHkgd29ya3NcbiAgICogICBpbiBlbnZpcm9ubWVudHMgdGhhdCBzdXBwb3J0IGBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZWAsIGFuZCBvbmx5IHdoZW5cbiAgICogICBgQ2hhaS5jb25maWcuaW5jbHVkZVN0YWNrYCBoYXNuJ3QgYmVlbiBzZXQgdG8gYGZhbHNlYC5cbiAgICpcbiAgICogLSBgbG9ja1NzZmlgOiBUaGlzIGZsYWcgY29udHJvbHMgd2hldGhlciBvciBub3QgdGhlIGdpdmVuIGBzc2ZpYCBmbGFnXG4gICAqICAgc2hvdWxkIHJldGFpbiBpdHMgY3VycmVudCB2YWx1ZSwgZXZlbiBhcyBhc3NlcnRpb25zIGFyZSBjaGFpbmVkIG9mZiBvZlxuICAgKiAgIHRoaXMgb2JqZWN0LiBUaGlzIGlzIHVzdWFsbHkgc2V0IHRvIGB0cnVlYCB3aGVuIGNyZWF0aW5nIGEgbmV3IGFzc2VydGlvblxuICAgKiAgIGZyb20gd2l0aGluIGFub3RoZXIgYXNzZXJ0aW9uLiBJdCdzIGFsc28gdGVtcG9yYXJpbHkgc2V0IHRvIGB0cnVlYCBiZWZvcmVcbiAgICogICBhbiBvdmVyd3JpdHRlbiBhc3NlcnRpb24gZ2V0cyBjYWxsZWQgYnkgdGhlIG92ZXJ3cml0aW5nIGFzc2VydGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqIHRhcmdldCBvZiB0aGUgYXNzZXJ0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgKG9wdGlvbmFsKSBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzc2ZpIChvcHRpb25hbCkgc3RhcnRpbmcgcG9pbnQgZm9yIHJlbW92aW5nIHN0YWNrIGZyYW1lc1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGxvY2tTc2ZpIChvcHRpb25hbCkgd2hldGhlciBvciBub3QgdGhlIHNzZmkgZmxhZyBpcyBsb2NrZWRcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuXG4gIGZ1bmN0aW9uIEFzc2VydGlvbiAob2JqLCBtc2csIHNzZmksIGxvY2tTc2ZpKSB7XG4gICAgZmxhZyh0aGlzLCAnc3NmaScsIHNzZmkgfHwgQXNzZXJ0aW9uKTtcbiAgICBmbGFnKHRoaXMsICdsb2NrU3NmaScsIGxvY2tTc2ZpKTtcbiAgICBmbGFnKHRoaXMsICdvYmplY3QnLCBvYmopO1xuICAgIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuXG4gICAgcmV0dXJuIHV0aWwucHJveGlmeSh0aGlzKTtcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBc3NlcnRpb24sICdpbmNsdWRlU3RhY2snLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUud2FybignQXNzZXJ0aW9uLmluY2x1ZGVTdGFjayBpcyBkZXByZWNhdGVkLCB1c2UgY2hhaS5jb25maWcuaW5jbHVkZVN0YWNrIGluc3RlYWQuJyk7XG4gICAgICByZXR1cm4gY29uZmlnLmluY2x1ZGVTdGFjaztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGNvbnNvbGUud2FybignQXNzZXJ0aW9uLmluY2x1ZGVTdGFjayBpcyBkZXByZWNhdGVkLCB1c2UgY2hhaS5jb25maWcuaW5jbHVkZVN0YWNrIGluc3RlYWQuJyk7XG4gICAgICBjb25maWcuaW5jbHVkZVN0YWNrID0gdmFsdWU7XG4gICAgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXNzZXJ0aW9uLCAnc2hvd0RpZmYnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUud2FybignQXNzZXJ0aW9uLnNob3dEaWZmIGlzIGRlcHJlY2F0ZWQsIHVzZSBjaGFpLmNvbmZpZy5zaG93RGlmZiBpbnN0ZWFkLicpO1xuICAgICAgcmV0dXJuIGNvbmZpZy5zaG93RGlmZjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGNvbnNvbGUud2FybignQXNzZXJ0aW9uLnNob3dEaWZmIGlzIGRlcHJlY2F0ZWQsIHVzZSBjaGFpLmNvbmZpZy5zaG93RGlmZiBpbnN0ZWFkLicpO1xuICAgICAgY29uZmlnLnNob3dEaWZmID0gdmFsdWU7XG4gICAgfVxuICB9KTtcblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkgPSBmdW5jdGlvbiAobmFtZSwgZm4pIHtcbiAgICB1dGlsLmFkZFByb3BlcnR5KHRoaXMucHJvdG90eXBlLCBuYW1lLCBmbik7XG4gIH07XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCA9IGZ1bmN0aW9uIChuYW1lLCBmbikge1xuICAgIHV0aWwuYWRkTWV0aG9kKHRoaXMucHJvdG90eXBlLCBuYW1lLCBmbik7XG4gIH07XG5cbiAgQXNzZXJ0aW9uLmFkZENoYWluYWJsZU1ldGhvZCA9IGZ1bmN0aW9uIChuYW1lLCBmbiwgY2hhaW5pbmdCZWhhdmlvcikge1xuICAgIHV0aWwuYWRkQ2hhaW5hYmxlTWV0aG9kKHRoaXMucHJvdG90eXBlLCBuYW1lLCBmbiwgY2hhaW5pbmdCZWhhdmlvcik7XG4gIH07XG5cbiAgQXNzZXJ0aW9uLm92ZXJ3cml0ZVByb3BlcnR5ID0gZnVuY3Rpb24gKG5hbWUsIGZuKSB7XG4gICAgdXRpbC5vdmVyd3JpdGVQcm9wZXJ0eSh0aGlzLnByb3RvdHlwZSwgbmFtZSwgZm4pO1xuICB9O1xuXG4gIEFzc2VydGlvbi5vdmVyd3JpdGVNZXRob2QgPSBmdW5jdGlvbiAobmFtZSwgZm4pIHtcbiAgICB1dGlsLm92ZXJ3cml0ZU1ldGhvZCh0aGlzLnByb3RvdHlwZSwgbmFtZSwgZm4pO1xuICB9O1xuXG4gIEFzc2VydGlvbi5vdmVyd3JpdGVDaGFpbmFibGVNZXRob2QgPSBmdW5jdGlvbiAobmFtZSwgZm4sIGNoYWluaW5nQmVoYXZpb3IpIHtcbiAgICB1dGlsLm92ZXJ3cml0ZUNoYWluYWJsZU1ldGhvZCh0aGlzLnByb3RvdHlwZSwgbmFtZSwgZm4sIGNoYWluaW5nQmVoYXZpb3IpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmFzc2VydChleHByZXNzaW9uLCBtZXNzYWdlLCBuZWdhdGVNZXNzYWdlLCBleHBlY3RlZCwgYWN0dWFsLCBzaG93RGlmZilcbiAgICpcbiAgICogRXhlY3V0ZXMgYW4gZXhwcmVzc2lvbiBhbmQgY2hlY2sgZXhwZWN0YXRpb25zLiBUaHJvd3MgQXNzZXJ0aW9uRXJyb3IgZm9yIHJlcG9ydGluZyBpZiB0ZXN0IGRvZXNuJ3QgcGFzcy5cbiAgICpcbiAgICogQG5hbWUgYXNzZXJ0XG4gICAqIEBwYXJhbSB7UGhpbG9zb3BoaWNhbH0gZXhwcmVzc2lvbiB0byBiZSB0ZXN0ZWRcbiAgICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IG1lc3NhZ2Ugb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIG1lc3NhZ2UgdG8gZGlzcGxheSBpZiBleHByZXNzaW9uIGZhaWxzXG4gICAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBuZWdhdGVkTWVzc2FnZSBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgbmVnYXRlZE1lc3NhZ2UgdG8gZGlzcGxheSBpZiBuZWdhdGVkIGV4cHJlc3Npb24gZmFpbHNcbiAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWQgdmFsdWUgKHJlbWVtYmVyIHRvIGNoZWNrIGZvciBuZWdhdGlvbilcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsIChvcHRpb25hbCkgd2lsbCBkZWZhdWx0IHRvIGB0aGlzLm9iamBcbiAgICogQHBhcmFtIHtCb29sZWFufSBzaG93RGlmZiAob3B0aW9uYWwpIHdoZW4gc2V0IHRvIGB0cnVlYCwgYXNzZXJ0IHdpbGwgZGlzcGxheSBhIGRpZmYgaW4gYWRkaXRpb24gdG8gdGhlIG1lc3NhZ2UgaWYgZXhwcmVzc2lvbiBmYWlsc1xuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG5cbiAgQXNzZXJ0aW9uLnByb3RvdHlwZS5hc3NlcnQgPSBmdW5jdGlvbiAoZXhwciwgbXNnLCBuZWdhdGVNc2csIGV4cGVjdGVkLCBfYWN0dWFsLCBzaG93RGlmZikge1xuICAgIHZhciBvayA9IHV0aWwudGVzdCh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChmYWxzZSAhPT0gc2hvd0RpZmYpIHNob3dEaWZmID0gdHJ1ZTtcbiAgICBpZiAodW5kZWZpbmVkID09PSBleHBlY3RlZCAmJiB1bmRlZmluZWQgPT09IF9hY3R1YWwpIHNob3dEaWZmID0gZmFsc2U7XG4gICAgaWYgKHRydWUgIT09IGNvbmZpZy5zaG93RGlmZikgc2hvd0RpZmYgPSBmYWxzZTtcblxuICAgIGlmICghb2spIHtcbiAgICAgIG1zZyA9IHV0aWwuZ2V0TWVzc2FnZSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgdmFyIGFjdHVhbCA9IHV0aWwuZ2V0QWN0dWFsKHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IobXNnLCB7XG4gICAgICAgICAgYWN0dWFsOiBhY3R1YWxcbiAgICAgICAgLCBleHBlY3RlZDogZXhwZWN0ZWRcbiAgICAgICAgLCBzaG93RGlmZjogc2hvd0RpZmZcbiAgICAgIH0sIChjb25maWcuaW5jbHVkZVN0YWNrKSA/IHRoaXMuYXNzZXJ0IDogZmxhZyh0aGlzLCAnc3NmaScpKTtcbiAgICB9XG4gIH07XG5cbiAgLyohXG4gICAqICMjIyAuX29ialxuICAgKlxuICAgKiBRdWljayByZWZlcmVuY2UgdG8gc3RvcmVkIGBhY3R1YWxgIHZhbHVlIGZvciBwbHVnaW4gZGV2ZWxvcGVycy5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBc3NlcnRpb24ucHJvdG90eXBlLCAnX29iaicsXG4gICAgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZsYWcodGhpcywgJ29iamVjdCcpO1xuICAgICAgfVxuICAgICwgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIGZsYWcodGhpcywgJ29iamVjdCcsIHZhbCk7XG4gICAgICB9XG4gIH0pO1xufTtcbiIsIi8qIVxuICogY2hhaVxuICogaHR0cDovL2NoYWlqcy5jb21cbiAqIENvcHlyaWdodChjKSAyMDExLTIwMTQgSmFrZSBMdWVyIDxqYWtlQGFsb2dpY2FscGFyYWRveC5jb20+XG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjaGFpLCBfKSB7XG4gIHZhciBBc3NlcnRpb24gPSBjaGFpLkFzc2VydGlvblxuICAgICwgQXNzZXJ0aW9uRXJyb3IgPSBjaGFpLkFzc2VydGlvbkVycm9yXG4gICAgLCBmbGFnID0gXy5mbGFnO1xuXG4gIC8qKlxuICAgKiAjIyMgTGFuZ3VhZ2UgQ2hhaW5zXG4gICAqXG4gICAqIFRoZSBmb2xsb3dpbmcgYXJlIHByb3ZpZGVkIGFzIGNoYWluYWJsZSBnZXR0ZXJzIHRvIGltcHJvdmUgdGhlIHJlYWRhYmlsaXR5XG4gICAqIG9mIHlvdXIgYXNzZXJ0aW9ucy5cbiAgICpcbiAgICogKipDaGFpbnMqKlxuICAgKlxuICAgKiAtIHRvXG4gICAqIC0gYmVcbiAgICogLSBiZWVuXG4gICAqIC0gaXNcbiAgICogLSB0aGF0XG4gICAqIC0gd2hpY2hcbiAgICogLSBhbmRcbiAgICogLSBoYXNcbiAgICogLSBoYXZlXG4gICAqIC0gd2l0aFxuICAgKiAtIGF0XG4gICAqIC0gb2ZcbiAgICogLSBzYW1lXG4gICAqIC0gYnV0XG4gICAqIC0gZG9lc1xuICAgKlxuICAgKiBAbmFtZSBsYW5ndWFnZSBjaGFpbnNcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgWyAndG8nLCAnYmUnLCAnYmVlbidcbiAgLCAnaXMnLCAnYW5kJywgJ2hhcycsICdoYXZlJ1xuICAsICd3aXRoJywgJ3RoYXQnLCAnd2hpY2gnLCAnYXQnXG4gICwgJ29mJywgJ3NhbWUnLCAnYnV0JywgJ2RvZXMnIF0uZm9yRWFjaChmdW5jdGlvbiAoY2hhaW4pIHtcbiAgICBBc3NlcnRpb24uYWRkUHJvcGVydHkoY2hhaW4pO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5ub3RcbiAgICpcbiAgICogTmVnYXRlcyBhbGwgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4uXG4gICAqXG4gICAqICAgICBleHBlY3QoZnVuY3Rpb24gKCkge30pLnRvLm5vdC50aHJvdygpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8ubm90LmhhdmUucHJvcGVydHkoJ2InKTtcbiAgICogICAgIGV4cGVjdChbMSwgMl0pLnRvLmJlLmFuKCdhcnJheScpLnRoYXQuZG9lcy5ub3QuaW5jbHVkZSgzKTtcbiAgICpcbiAgICogSnVzdCBiZWNhdXNlIHlvdSBjYW4gbmVnYXRlIGFueSBhc3NlcnRpb24gd2l0aCBgLm5vdGAgZG9lc24ndCBtZWFuIHlvdVxuICAgKiBzaG91bGQuIFdpdGggZ3JlYXQgcG93ZXIgY29tZXMgZ3JlYXQgcmVzcG9uc2liaWxpdHkuIEl0J3Mgb2Z0ZW4gYmVzdCB0b1xuICAgKiBhc3NlcnQgdGhhdCB0aGUgb25lIGV4cGVjdGVkIG91dHB1dCB3YXMgcHJvZHVjZWQsIHJhdGhlciB0aGFuIGFzc2VydGluZ1xuICAgKiB0aGF0IG9uZSBvZiBjb3VudGxlc3MgdW5leHBlY3RlZCBvdXRwdXRzIHdhc24ndCBwcm9kdWNlZC4gU2VlIGluZGl2aWR1YWxcbiAgICogYXNzZXJ0aW9ucyBmb3Igc3BlY2lmaWMgZ3VpZGFuY2UuXG4gICAqXG4gICAqICAgICBleHBlY3QoMikudG8uZXF1YWwoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMikudG8ubm90LmVxdWFsKDEpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQG5hbWUgbm90XG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnbm90JywgZnVuY3Rpb24gKCkge1xuICAgIGZsYWcodGhpcywgJ25lZ2F0ZScsIHRydWUpO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwXG4gICAqXG4gICAqIENhdXNlcyBhbGwgYC5lcXVhbGAsIGAuaW5jbHVkZWAsIGAubWVtYmVyc2AsIGAua2V5c2AsIGFuZCBgLnByb3BlcnR5YFxuICAgKiBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbiB0byB1c2UgZGVlcCBlcXVhbGl0eSBpbnN0ZWFkIG9mIHN0cmljdFxuICAgKiAoYD09PWApIGVxdWFsaXR5LiBTZWUgdGhlIGBkZWVwLWVxbGAgcHJvamVjdCBwYWdlIGZvciBpbmZvIG9uIHRoZSBkZWVwXG4gICAqIGVxdWFsaXR5IGFsZ29yaXRobTogaHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy9kZWVwLWVxbC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBvYmplY3QgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBlcXVhbHMgYHthOiAxfWBcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmRlZXAuZXF1YWwoe2E6IDF9KTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5lcXVhbCh7YTogMX0pO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IGFycmF5IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgaW5jbHVkZXMgYHthOiAxfWBcbiAgICogICAgIGV4cGVjdChbe2E6IDF9XSkudG8uZGVlcC5pbmNsdWRlKHthOiAxfSk7XG4gICAqICAgICBleHBlY3QoW3thOiAxfV0pLnRvLm5vdC5pbmNsdWRlKHthOiAxfSk7XG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgb2JqZWN0IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgaW5jbHVkZXMgYHg6IHthOiAxfWBcbiAgICogICAgIGV4cGVjdCh7eDoge2E6IDF9fSkudG8uZGVlcC5pbmNsdWRlKHt4OiB7YTogMX19KTtcbiAgICogICAgIGV4cGVjdCh7eDoge2E6IDF9fSkudG8ubm90LmluY2x1ZGUoe3g6IHthOiAxfX0pO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IGFycmF5IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgaGFzIG1lbWJlciBge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KFt7YTogMX1dKS50by5oYXZlLmRlZXAubWVtYmVycyhbe2E6IDF9XSk7XG4gICAqICAgICBleHBlY3QoW3thOiAxfV0pLnRvLm5vdC5oYXZlLm1lbWJlcnMoW3thOiAxfV0pO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IHNldCBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGhhcyBrZXkgYHthOiAxfWBcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KFt7YTogMX1dKSkudG8uaGF2ZS5kZWVwLmtleXMoW3thOiAxfV0pO1xuICAgKiAgICAgZXhwZWN0KG5ldyBTZXQoW3thOiAxfV0pKS50by5ub3QuaGF2ZS5rZXlzKFt7YTogMX1dKTtcbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBvYmplY3QgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBoYXMgcHJvcGVydHkgYHg6IHthOiAxfWBcbiAgICogICAgIGV4cGVjdCh7eDoge2E6IDF9fSkudG8uaGF2ZS5kZWVwLnByb3BlcnR5KCd4Jywge2E6IDF9KTtcbiAgICogICAgIGV4cGVjdCh7eDoge2E6IDF9fSkudG8ubm90LmhhdmUucHJvcGVydHkoJ3gnLCB7YTogMX0pO1xuICAgKlxuICAgKiBAbmFtZSBkZWVwXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnZGVlcCcsIGZ1bmN0aW9uICgpIHtcbiAgICBmbGFnKHRoaXMsICdkZWVwJywgdHJ1ZSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLm5lc3RlZFxuICAgKlxuICAgKiBFbmFibGVzIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gaW4gYWxsIGAucHJvcGVydHlgIGFuZCBgLmluY2x1ZGVgXG4gICAqIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiB7YjogWyd4JywgJ3knXX19KS50by5oYXZlLm5lc3RlZC5wcm9wZXJ0eSgnYS5iWzFdJyk7XG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiBbJ3gnLCAneSddfX0pLnRvLm5lc3RlZC5pbmNsdWRlKHsnYS5iWzFdJzogJ3knfSk7XG4gICAqXG4gICAqIElmIGAuYCBvciBgW11gIGFyZSBwYXJ0IG9mIGFuIGFjdHVhbCBwcm9wZXJ0eSBuYW1lLCB0aGV5IGNhbiBiZSBlc2NhcGVkIGJ5XG4gICAqIGFkZGluZyB0d28gYmFja3NsYXNoZXMgYmVmb3JlIHRoZW0uXG4gICAqXG4gICAqICAgICBleHBlY3QoeycuYSc6IHsnW2JdJzogJ3gnfX0pLnRvLmhhdmUubmVzdGVkLnByb3BlcnR5KCdcXFxcLmEuXFxcXFtiXFxcXF0nKTtcbiAgICogICAgIGV4cGVjdCh7Jy5hJzogeydbYl0nOiAneCd9fSkudG8ubmVzdGVkLmluY2x1ZGUoeydcXFxcLmEuXFxcXFtiXFxcXF0nOiAneCd9KTtcbiAgICpcbiAgICogYC5uZXN0ZWRgIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIGAub3duYC5cbiAgICpcbiAgICogQG5hbWUgbmVzdGVkXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnbmVzdGVkJywgZnVuY3Rpb24gKCkge1xuICAgIGZsYWcodGhpcywgJ25lc3RlZCcsIHRydWUpO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5vd25cbiAgICpcbiAgICogQ2F1c2VzIGFsbCBgLnByb3BlcnR5YCBhbmQgYC5pbmNsdWRlYCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpblxuICAgKiB0byBpZ25vcmUgaW5oZXJpdGVkIHByb3BlcnRpZXMuXG4gICAqXG4gICAqICAgICBPYmplY3QucHJvdG90eXBlLmIgPSAyO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5vd24ucHJvcGVydHkoJ2EnKTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUucHJvcGVydHkoJ2InKS5idXQubm90Lm93bi5wcm9wZXJ0eSgnYicpOyBcbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm93bi5pbmNsdWRlKHthOiAxfSk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5pbmNsdWRlKHtiOiAyfSkuYnV0Lm5vdC5vd24uaW5jbHVkZSh7YjogMn0pO1xuICAgKlxuICAgKiBgLm93bmAgY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggYC5uZXN0ZWRgLlxuICAgKlxuICAgKiBAbmFtZSBvd25cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdvd24nLCBmdW5jdGlvbiAoKSB7XG4gICAgZmxhZyh0aGlzLCAnb3duJywgdHJ1ZSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLm9yZGVyZWRcbiAgICpcbiAgICogQ2F1c2VzIGFsbCBgLm1lbWJlcnNgIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvIHJlcXVpcmUgdGhhdFxuICAgKiBtZW1iZXJzIGJlIGluIHRoZSBzYW1lIG9yZGVyLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyXSkudG8uaGF2ZS5vcmRlcmVkLm1lbWJlcnMoWzEsIDJdKVxuICAgKiAgICAgICAuYnV0Lm5vdC5oYXZlLm9yZGVyZWQubWVtYmVycyhbMiwgMV0pO1xuICAgKlxuICAgKiBXaGVuIGAuaW5jbHVkZWAgYW5kIGAub3JkZXJlZGAgYXJlIGNvbWJpbmVkLCB0aGUgb3JkZXJpbmcgYmVnaW5zIGF0IHRoZVxuICAgKiBzdGFydCBvZiBib3RoIGFycmF5cy5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmluY2x1ZGUub3JkZXJlZC5tZW1iZXJzKFsxLCAyXSlcbiAgICogICAgICAgLmJ1dC5ub3QuaW5jbHVkZS5vcmRlcmVkLm1lbWJlcnMoWzIsIDNdKTtcbiAgICpcbiAgICogQG5hbWUgb3JkZXJlZFxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ29yZGVyZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZmxhZyh0aGlzLCAnb3JkZXJlZCcsIHRydWUpO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5hbnlcbiAgICpcbiAgICogQ2F1c2VzIGFsbCBgLmtleXNgIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvIG9ubHkgcmVxdWlyZSB0aGF0XG4gICAqIHRoZSB0YXJnZXQgaGF2ZSBhdCBsZWFzdCBvbmUgb2YgdGhlIGdpdmVuIGtleXMuIFRoaXMgaXMgdGhlIG9wcG9zaXRlIG9mXG4gICAqIGAuYWxsYCwgd2hpY2ggcmVxdWlyZXMgdGhhdCB0aGUgdGFyZ2V0IGhhdmUgYWxsIG9mIHRoZSBnaXZlbiBrZXlzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyfSkudG8ubm90LmhhdmUuYW55LmtleXMoJ2MnLCAnZCcpO1xuICAgKlxuICAgKiBTZWUgdGhlIGAua2V5c2AgZG9jIGZvciBndWlkYW5jZSBvbiB3aGVuIHRvIHVzZSBgLmFueWAgb3IgYC5hbGxgLlxuICAgKlxuICAgKiBAbmFtZSBhbnlcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdhbnknLCBmdW5jdGlvbiAoKSB7XG4gICAgZmxhZyh0aGlzLCAnYW55JywgdHJ1ZSk7XG4gICAgZmxhZyh0aGlzLCAnYWxsJywgZmFsc2UpO1xuICB9KTtcblxuXG4gIC8qKlxuICAgKiAjIyMgLmFsbFxuICAgKlxuICAgKiBDYXVzZXMgYWxsIGAua2V5c2AgYXNzZXJ0aW9ucyB0aGF0IGZvbGxvdyBpbiB0aGUgY2hhaW4gdG8gcmVxdWlyZSB0aGF0IHRoZVxuICAgKiB0YXJnZXQgaGF2ZSBhbGwgb2YgdGhlIGdpdmVuIGtleXMuIFRoaXMgaXMgdGhlIG9wcG9zaXRlIG9mIGAuYW55YCwgd2hpY2hcbiAgICogb25seSByZXF1aXJlcyB0aGF0IHRoZSB0YXJnZXQgaGF2ZSBhdCBsZWFzdCBvbmUgb2YgdGhlIGdpdmVuIGtleXMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogTm90ZSB0aGF0IGAuYWxsYCBpcyB1c2VkIGJ5IGRlZmF1bHQgd2hlbiBuZWl0aGVyIGAuYWxsYCBub3IgYC5hbnlgIGFyZVxuICAgKiBhZGRlZCBlYXJsaWVyIGluIHRoZSBjaGFpbi4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0IHRvIGFkZCBgLmFsbGAgYW55d2F5XG4gICAqIGJlY2F1c2UgaXQgaW1wcm92ZXMgcmVhZGFiaWxpdHkuXG4gICAqXG4gICAqIFNlZSB0aGUgYC5rZXlzYCBkb2MgZm9yIGd1aWRhbmNlIG9uIHdoZW4gdG8gdXNlIGAuYW55YCBvciBgLmFsbGAuXG4gICAqXG4gICAqIEBuYW1lIGFsbFxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2FsbCcsIGZ1bmN0aW9uICgpIHtcbiAgICBmbGFnKHRoaXMsICdhbGwnLCB0cnVlKTtcbiAgICBmbGFnKHRoaXMsICdhbnknLCBmYWxzZSk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmEodHlwZVssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0J3MgdHlwZSBpcyBlcXVhbCB0byB0aGUgZ2l2ZW4gc3RyaW5nIGB0eXBlYC4gVHlwZXNcbiAgICogYXJlIGNhc2UgaW5zZW5zaXRpdmUuIFNlZSB0aGUgYHR5cGUtZGV0ZWN0YCBwcm9qZWN0IHBhZ2UgZm9yIGluZm8gb24gdGhlXG4gICAqIHR5cGUgZGV0ZWN0aW9uIGFsZ29yaXRobTogaHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy90eXBlLWRldGVjdC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uYmUuYSgnc3RyaW5nJyk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5iZS5hbignb2JqZWN0Jyk7XG4gICAqICAgICBleHBlY3QobnVsbCkudG8uYmUuYSgnbnVsbCcpO1xuICAgKiAgICAgZXhwZWN0KHVuZGVmaW5lZCkudG8uYmUuYW4oJ3VuZGVmaW5lZCcpO1xuICAgKiAgICAgZXhwZWN0KG5ldyBFcnJvcikudG8uYmUuYW4oJ2Vycm9yJyk7XG4gICAqICAgICBleHBlY3QoUHJvbWlzZS5yZXNvbHZlKCkpLnRvLmJlLmEoJ3Byb21pc2UnKTtcbiAgICogICAgIGV4cGVjdChuZXcgRmxvYXQzMkFycmF5KS50by5iZS5hKCdmbG9hdDMyYXJyYXknKTtcbiAgICogICAgIGV4cGVjdChTeW1ib2woKSkudG8uYmUuYSgnc3ltYm9sJyk7XG4gICAqXG4gICAqIGAuYWAgc3VwcG9ydHMgb2JqZWN0cyB0aGF0IGhhdmUgYSBjdXN0b20gdHlwZSBzZXQgdmlhIGBTeW1ib2wudG9TdHJpbmdUYWdgLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge1xuICAgKiAgICAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ215Q3VzdG9tVHlwZSdcbiAgICogICAgIH07XG4gICAqXG4gICAqICAgICBleHBlY3QobXlPYmopLnRvLmJlLmEoJ215Q3VzdG9tVHlwZScpLmJ1dC5ub3QuYW4oJ29iamVjdCcpO1xuICAgKlxuICAgKiBJdCdzIG9mdGVuIGJlc3QgdG8gdXNlIGAuYWAgdG8gY2hlY2sgYSB0YXJnZXQncyB0eXBlIGJlZm9yZSBtYWtpbmcgbW9yZVxuICAgKiBhc3NlcnRpb25zIG9uIHRoZSBzYW1lIHRhcmdldC4gVGhhdCB3YXksIHlvdSBhdm9pZCB1bmV4cGVjdGVkIGJlaGF2aW9yIGZyb21cbiAgICogYW55IGFzc2VydGlvbiB0aGF0IGRvZXMgZGlmZmVyZW50IHRoaW5ncyBiYXNlZCBvbiB0aGUgdGFyZ2V0J3MgdHlwZS5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmJlLmFuKCdhcnJheScpLnRoYXQuaW5jbHVkZXMoMik7XG4gICAqICAgICBleHBlY3QoW10pLnRvLmJlLmFuKCdhcnJheScpLnRoYXQuaXMuZW1wdHk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuYWAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0b1xuICAgKiBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIHRoZSBleHBlY3RlZCB0eXBlLCByYXRoZXIgdGhhbiBhc3NlcnRpbmcgdGhhdCBpdFxuICAgKiBpc24ndCBvbmUgb2YgbWFueSB1bmV4cGVjdGVkIHR5cGVzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5iZS5hKCdzdHJpbmcnKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8ubm90LmJlLmFuKCdhcnJheScpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5hYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgdG9cbiAgICogc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmRcbiAgICogYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUuYSgnc3RyaW5nJywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KDEsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5hKCdzdHJpbmcnKTtcbiAgICpcbiAgICogYC5hYCBjYW4gYWxzbyBiZSB1c2VkIGFzIGEgbGFuZ3VhZ2UgY2hhaW4gdG8gaW1wcm92ZSB0aGUgcmVhZGFiaWxpdHkgb2ZcbiAgICogeW91ciBhc3NlcnRpb25zLiBcbiAgICpcbiAgICogICAgIGV4cGVjdCh7YjogMn0pLnRvLmhhdmUuYS5wcm9wZXJ0eSgnYicpO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5hbmAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5hYC5cbiAgICpcbiAgICogQG5hbWUgYVxuICAgKiBAYWxpYXMgYW5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFuICh0eXBlLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBhcnRpY2xlID0gflsgJ2EnLCAnZScsICdpJywgJ28nLCAndScgXS5pbmRleE9mKHR5cGUuY2hhckF0KDApKSA/ICdhbiAnIDogJ2EgJztcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICB0eXBlID09PSBfLnR5cGUob2JqKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlICcgKyBhcnRpY2xlICsgdHlwZVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSBub3QgdG8gYmUgJyArIGFydGljbGUgKyB0eXBlXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRDaGFpbmFibGVNZXRob2QoJ2FuJywgYW4pO1xuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdhJywgYW4pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmluY2x1ZGUodmFsWywgbXNnXSlcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGEgc3RyaW5nLCBgLmluY2x1ZGVgIGFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gc3RyaW5nIGB2YWxgXG4gICAqIGlzIGEgc3Vic3RyaW5nIG9mIHRoZSB0YXJnZXQuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2Zvb2JhcicpLnRvLmluY2x1ZGUoJ2ZvbycpO1xuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYW4gYXJyYXksIGAuaW5jbHVkZWAgYXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiBgdmFsYCBpcyBhXG4gICAqIG1lbWJlciBvZiB0aGUgdGFyZ2V0LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaW5jbHVkZSgyKTtcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGFuIG9iamVjdCwgYC5pbmNsdWRlYCBhc3NlcnRzIHRoYXQgdGhlIGdpdmVuIG9iamVjdFxuICAgKiBgdmFsYCdzIHByb3BlcnRpZXMgYXJlIGEgc3Vic2V0IG9mIHRoZSB0YXJnZXQncyBwcm9wZXJ0aWVzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyLCBjOiAzfSkudG8uaW5jbHVkZSh7YTogMSwgYjogMn0pO1xuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYSBTZXQgb3IgV2Vha1NldCwgYC5pbmNsdWRlYCBhc3NlcnRzIHRoYXQgdGhlIGdpdmVuIGB2YWxgIGlzIGFcbiAgICogbWVtYmVyIG9mIHRoZSB0YXJnZXQuIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtIGlzIHVzZWQuXG4gICAqXG4gICAqICAgICBleHBlY3QobmV3IFNldChbMSwgMl0pKS50by5pbmNsdWRlKDIpO1xuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYSBNYXAsIGAuaW5jbHVkZWAgYXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiBgdmFsYCBpcyBvbmUgb2ZcbiAgICogdGhlIHZhbHVlcyBvZiB0aGUgdGFyZ2V0LiBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobSBpcyB1c2VkLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KG5ldyBNYXAoW1snYScsIDFdLCBbJ2InLCAyXV0pKS50by5pbmNsdWRlKDIpO1xuICAgKlxuICAgKiBCZWNhdXNlIGAuaW5jbHVkZWAgZG9lcyBkaWZmZXJlbnQgdGhpbmdzIGJhc2VkIG9uIHRoZSB0YXJnZXQncyB0eXBlLCBpdCdzXG4gICAqIGltcG9ydGFudCB0byBjaGVjayB0aGUgdGFyZ2V0J3MgdHlwZSBiZWZvcmUgdXNpbmcgYC5pbmNsdWRlYC4gU2VlIHRoZSBgLmFgXG4gICAqIGRvYyBmb3IgaW5mbyBvbiB0ZXN0aW5nIGEgdGFyZ2V0J3MgdHlwZS5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmJlLmFuKCdhcnJheScpLnRoYXQuaW5jbHVkZXMoMik7XG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIHN0cmljdCAoYD09PWApIGVxdWFsaXR5IGlzIHVzZWQgdG8gY29tcGFyZSBhcnJheSBtZW1iZXJzIGFuZFxuICAgKiBvYmplY3QgcHJvcGVydGllcy4gQWRkIGAuZGVlcGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gdXNlIGRlZXAgZXF1YWxpdHlcbiAgICogaW5zdGVhZCAoV2Vha1NldCB0YXJnZXRzIGFyZSBub3Qgc3VwcG9ydGVkKS4gU2VlIHRoZSBgZGVlcC1lcWxgIHByb2plY3RcbiAgICogcGFnZSBmb3IgaW5mbyBvbiB0aGUgZGVlcCBlcXVhbGl0eSBhbGdvcml0aG06IGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFpanMvZGVlcC1lcWwuXG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgYXJyYXkgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBpbmNsdWRlcyBge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KFt7YTogMX1dKS50by5kZWVwLmluY2x1ZGUoe2E6IDF9KTtcbiAgICogICAgIGV4cGVjdChbe2E6IDF9XSkudG8ubm90LmluY2x1ZGUoe2E6IDF9KTtcbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBvYmplY3QgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBpbmNsdWRlcyBgeDoge2E6IDF9YFxuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5kZWVwLmluY2x1ZGUoe3g6IHthOiAxfX0pO1xuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5ub3QuaW5jbHVkZSh7eDoge2E6IDF9fSk7XG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGFsbCBvZiB0aGUgdGFyZ2V0J3MgcHJvcGVydGllcyBhcmUgc2VhcmNoZWQgd2hlbiB3b3JraW5nIHdpdGhcbiAgICogb2JqZWN0cy4gVGhpcyBpbmNsdWRlcyBwcm9wZXJ0aWVzIHRoYXQgYXJlIGluaGVyaXRlZCBhbmQvb3Igbm9uLWVudW1lcmFibGUuXG4gICAqIEFkZCBgLm93bmAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gZXhjbHVkZSB0aGUgdGFyZ2V0J3MgaW5oZXJpdGVkXG4gICAqIHByb3BlcnRpZXMgZnJvbSB0aGUgc2VhcmNoLlxuICAgKlxuICAgKiAgICAgT2JqZWN0LnByb3RvdHlwZS5iID0gMjtcbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm93bi5pbmNsdWRlKHthOiAxfSk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5pbmNsdWRlKHtiOiAyfSkuYnV0Lm5vdC5vd24uaW5jbHVkZSh7YjogMn0pO1xuICAgKlxuICAgKiBOb3RlIHRoYXQgYSB0YXJnZXQgb2JqZWN0IGlzIGFsd2F5cyBvbmx5IHNlYXJjaGVkIGZvciBgdmFsYCdzIG93blxuICAgKiBlbnVtZXJhYmxlIHByb3BlcnRpZXMuXG4gICAqXG4gICAqIGAuZGVlcGAgYW5kIGAub3duYCBjYW4gYmUgY29tYmluZWQuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiAyfX0pLnRvLmRlZXAub3duLmluY2x1ZGUoe2E6IHtiOiAyfX0pO1xuICAgKlxuICAgKiBBZGQgYC5uZXN0ZWRgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIGVuYWJsZSBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIHdoZW5cbiAgICogcmVmZXJlbmNpbmcgbmVzdGVkIHByb3BlcnRpZXMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiBbJ3gnLCAneSddfX0pLnRvLm5lc3RlZC5pbmNsdWRlKHsnYS5iWzFdJzogJ3knfSk7XG4gICAqXG4gICAqIElmIGAuYCBvciBgW11gIGFyZSBwYXJ0IG9mIGFuIGFjdHVhbCBwcm9wZXJ0eSBuYW1lLCB0aGV5IGNhbiBiZSBlc2NhcGVkIGJ5XG4gICAqIGFkZGluZyB0d28gYmFja3NsYXNoZXMgYmVmb3JlIHRoZW0uXG4gICAqXG4gICAqICAgICBleHBlY3QoeycuYSc6IHsnW2JdJzogMn19KS50by5uZXN0ZWQuaW5jbHVkZSh7J1xcXFwuYS5cXFxcW2JcXFxcXSc6IDJ9KTtcbiAgICpcbiAgICogYC5kZWVwYCBhbmQgYC5uZXN0ZWRgIGNhbiBiZSBjb21iaW5lZC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YToge2I6IFt7YzogM31dfX0pLnRvLmRlZXAubmVzdGVkLmluY2x1ZGUoeydhLmJbMF0nOiB7YzogM319KTtcbiAgICpcbiAgICogYC5vd25gIGFuZCBgLm5lc3RlZGAgY2Fubm90IGJlIGNvbWJpbmVkLlxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmluY2x1ZGVgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb29iYXInKS50by5ub3QuaW5jbHVkZSgndGFjbycpO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8ubm90LmluY2x1ZGUoNCk7XG4gICAqIFxuICAgKiBIb3dldmVyLCBpdCdzIGRhbmdlcm91cyB0byBuZWdhdGUgYC5pbmNsdWRlYCB3aGVuIHRoZSB0YXJnZXQgaXMgYW4gb2JqZWN0LlxuICAgKiBUaGUgcHJvYmxlbSBpcyB0aGF0IGl0IGNyZWF0ZXMgdW5jZXJ0YWluIGV4cGVjdGF0aW9ucyBieSBhc3NlcnRpbmcgdGhhdCB0aGVcbiAgICogdGFyZ2V0IG9iamVjdCBkb2Vzbid0IGhhdmUgYWxsIG9mIGB2YWxgJ3Mga2V5L3ZhbHVlIHBhaXJzIGJ1dCBtYXkgb3IgbWF5XG4gICAqIG5vdCBoYXZlIHNvbWUgb2YgdGhlbS4gSXQncyBvZnRlbiBiZXN0IHRvIGlkZW50aWZ5IHRoZSBleGFjdCBvdXRwdXQgdGhhdCdzXG4gICAqIGV4cGVjdGVkLCBhbmQgdGhlbiB3cml0ZSBhbiBhc3NlcnRpb24gdGhhdCBvbmx5IGFjY2VwdHMgdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBvYmplY3QgaXNuJ3QgZXZlbiBleHBlY3RlZCB0byBoYXZlIGB2YWxgJ3Mga2V5cywgaXQnc1xuICAgKiBvZnRlbiBiZXN0IHRvIGFzc2VydCBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2M6IDN9KS50by5ub3QuaGF2ZS5hbnkua2V5cygnYScsICdiJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2M6IDN9KS50by5ub3QuaW5jbHVkZSh7YTogMSwgYjogMn0pOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IG9iamVjdCBpcyBleHBlY3RlZCB0byBoYXZlIGB2YWxgJ3Mga2V5cywgaXQncyBvZnRlbiBiZXN0IHRvXG4gICAqIGFzc2VydCB0aGF0IGVhY2ggb2YgdGhlIHByb3BlcnRpZXMgaGFzIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyIHRoYW5cbiAgICogYXNzZXJ0aW5nIHRoYXQgZWFjaCBwcm9wZXJ0eSBkb2Vzbid0IGhhdmUgb25lIG9mIG1hbnkgdW5leHBlY3RlZCB2YWx1ZXMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDMsIGI6IDR9KS50by5pbmNsdWRlKHthOiAzLCBiOiA0fSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDMsIGI6IDR9KS50by5ub3QuaW5jbHVkZSh7YTogMSwgYjogMn0pOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5pbmNsdWRlYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5pbmNsdWRlKDQsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10sICdub29vIHdoeSBmYWlsPz8nKS50by5pbmNsdWRlKDQpO1xuICAgKlxuICAgKiBgLmluY2x1ZGVgIGNhbiBhbHNvIGJlIHVzZWQgYXMgYSBsYW5ndWFnZSBjaGFpbiwgY2F1c2luZyBhbGwgYC5tZW1iZXJzYCBhbmRcbiAgICogYC5rZXlzYCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbiB0byByZXF1aXJlIHRoZSB0YXJnZXQgdG8gYmUgYVxuICAgKiBzdXBlcnNldCBvZiB0aGUgZXhwZWN0ZWQgc2V0LCByYXRoZXIgdGhhbiBhbiBpZGVudGljYWwgc2V0LiBOb3RlIHRoYXRcbiAgICogYC5tZW1iZXJzYCBpZ25vcmVzIGR1cGxpY2F0ZXMgaW4gdGhlIHN1YnNldCB3aGVuIGAuaW5jbHVkZWAgaXMgYWRkZWQuXG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgb2JqZWN0J3Mga2V5cyBhcmUgYSBzdXBlcnNldCBvZiBbJ2EnLCAnYiddIGJ1dCBub3QgaWRlbnRpY2FsXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDIsIGM6IDN9KS50by5pbmNsdWRlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMiwgYzogM30pLnRvLm5vdC5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBhcnJheSBpcyBhIHN1cGVyc2V0IG9mIFsxLCAyXSBidXQgbm90IGlkZW50aWNhbFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaW5jbHVkZS5tZW1iZXJzKFsxLCAyXSk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5ub3QuaGF2ZS5tZW1iZXJzKFsxLCAyXSk7XG4gICAqXG4gICAqICAgICAvLyBEdXBsaWNhdGVzIGluIHRoZSBzdWJzZXQgYXJlIGlnbm9yZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmluY2x1ZGUubWVtYmVycyhbMSwgMiwgMiwgMl0pO1xuICAgKlxuICAgKiBOb3RlIHRoYXQgYWRkaW5nIGAuYW55YCBlYXJsaWVyIGluIHRoZSBjaGFpbiBjYXVzZXMgdGhlIGAua2V5c2AgYXNzZXJ0aW9uXG4gICAqIHRvIGlnbm9yZSBgLmluY2x1ZGVgLlxuICAgKlxuICAgKiAgICAgLy8gQm90aCBhc3NlcnRpb25zIGFyZSBpZGVudGljYWxcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmluY2x1ZGUuYW55LmtleXMoJ2EnLCAnYicpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5hbnkua2V5cygnYScsICdiJyk7XG4gICAqXG4gICAqIFRoZSBhbGlhc2VzIGAuaW5jbHVkZXNgLCBgLmNvbnRhaW5gLCBhbmQgYC5jb250YWluc2AgY2FuIGJlIHVzZWRcbiAgICogaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5pbmNsdWRlYC5cbiAgICpcbiAgICogQG5hbWUgaW5jbHVkZVxuICAgKiBAYWxpYXMgY29udGFpblxuICAgKiBAYWxpYXMgaW5jbHVkZXNcbiAgICogQGFsaWFzIGNvbnRhaW5zXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gU2FtZVZhbHVlWmVybyhhLCBiKSB7XG4gICAgcmV0dXJuIChfLmlzTmFOKGEpICYmIF8uaXNOYU4oYikpIHx8IGEgPT09IGI7XG4gIH1cblxuICBmdW5jdGlvbiBpbmNsdWRlQ2hhaW5pbmdCZWhhdmlvciAoKSB7XG4gICAgZmxhZyh0aGlzLCAnY29udGFpbnMnLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluY2x1ZGUgKHZhbCwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgXG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIG9ialR5cGUgPSBfLnR5cGUob2JqKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgbmVnYXRlID0gZmxhZyh0aGlzLCAnbmVnYXRlJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBpc0RlZXAgPSBmbGFnKHRoaXMsICdkZWVwJylcbiAgICAgICwgZGVzY3JpcHRvciA9IGlzRGVlcCA/ICdkZWVwICcgOiAnJztcblxuICAgIGZsYWdNc2cgPSBmbGFnTXNnID8gZmxhZ01zZyArICc6ICcgOiAnJztcblxuICAgIHZhciBpbmNsdWRlZCA9IGZhbHNlO1xuXG4gICAgc3dpdGNoIChvYmpUeXBlKSB7XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICBpbmNsdWRlZCA9IG9iai5pbmRleE9mKHZhbCkgIT09IC0xO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnd2Vha3NldCc6XG4gICAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgICAgICBmbGFnTXNnICsgJ3VuYWJsZSB0byB1c2UgLmRlZXAuaW5jbHVkZSB3aXRoIFdlYWtTZXQnLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgc3NmaVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpbmNsdWRlZCA9IG9iai5oYXModmFsKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ21hcCc6XG4gICAgICAgIHZhciBpc0VxbCA9IGlzRGVlcCA/IF8uZXFsIDogU2FtZVZhbHVlWmVybztcbiAgICAgICAgb2JqLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICBpbmNsdWRlZCA9IGluY2x1ZGVkIHx8IGlzRXFsKGl0ZW0sIHZhbCk7XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc2V0JzpcbiAgICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICAgIG9iai5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICBpbmNsdWRlZCA9IGluY2x1ZGVkIHx8IF8uZXFsKGl0ZW0sIHZhbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5jbHVkZWQgPSBvYmouaGFzKHZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICAgIGluY2x1ZGVkID0gb2JqLnNvbWUoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBfLmVxbChpdGVtLCB2YWwpO1xuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5jbHVkZWQgPSBvYmouaW5kZXhPZih2YWwpICE9PSAtMTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gVGhpcyBibG9jayBpcyBmb3IgYXNzZXJ0aW5nIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW4gb2JqZWN0LlxuICAgICAgICAvLyBgXy5leHBlY3RUeXBlc2AgaXNuJ3QgdXNlZCBoZXJlIGJlY2F1c2UgYC5pbmNsdWRlYCBzaG91bGQgd29yayB3aXRoXG4gICAgICAgIC8vIG9iamVjdHMgd2l0aCBhIGN1c3RvbSBgQEB0b1N0cmluZ1RhZ2AuXG4gICAgICAgIGlmICh2YWwgIT09IE9iamVjdCh2YWwpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKFxuICAgICAgICAgICAgZmxhZ01zZyArICdvYmplY3QgdGVzdGVkIG11c3QgYmUgYW4gYXJyYXksIGEgbWFwLCBhbiBvYmplY3QsJ1xuICAgICAgICAgICAgICArICcgYSBzZXQsIGEgc3RyaW5nLCBvciBhIHdlYWtzZXQsIGJ1dCAnICsgb2JqVHlwZSArICcgZ2l2ZW4nLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgc3NmaVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcHJvcHMgPSBPYmplY3Qua2V5cyh2YWwpXG4gICAgICAgICAgLCBmaXJzdEVyciA9IG51bGxcbiAgICAgICAgICAsIG51bUVycnMgPSAwO1xuICBcbiAgICAgICAgcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgIHZhciBwcm9wQXNzZXJ0aW9uID0gbmV3IEFzc2VydGlvbihvYmopO1xuICAgICAgICAgIF8udHJhbnNmZXJGbGFncyh0aGlzLCBwcm9wQXNzZXJ0aW9uLCB0cnVlKTtcbiAgICAgICAgICBmbGFnKHByb3BBc3NlcnRpb24sICdsb2NrU3NmaScsIHRydWUpO1xuICBcbiAgICAgICAgICBpZiAoIW5lZ2F0ZSB8fCBwcm9wcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHByb3BBc3NlcnRpb24ucHJvcGVydHkocHJvcCwgdmFsW3Byb3BdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gIFxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcm9wQXNzZXJ0aW9uLnByb3BlcnR5KHByb3AsIHZhbFtwcm9wXSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoIV8uY2hlY2tFcnJvci5jb21wYXRpYmxlQ29uc3RydWN0b3IoZXJyLCBBc3NlcnRpb25FcnJvcikpIHtcbiAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpcnN0RXJyID09PSBudWxsKSBmaXJzdEVyciA9IGVycjtcbiAgICAgICAgICAgIG51bUVycnMrKztcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMpO1xuICBcbiAgICAgICAgLy8gV2hlbiB2YWxpZGF0aW5nIC5ub3QuaW5jbHVkZSB3aXRoIG11bHRpcGxlIHByb3BlcnRpZXMsIHdlIG9ubHkgd2FudFxuICAgICAgICAvLyB0byB0aHJvdyBhbiBhc3NlcnRpb24gZXJyb3IgaWYgYWxsIG9mIHRoZSBwcm9wZXJ0aWVzIGFyZSBpbmNsdWRlZCxcbiAgICAgICAgLy8gaW4gd2hpY2ggY2FzZSB3ZSB0aHJvdyB0aGUgZmlyc3QgcHJvcGVydHkgYXNzZXJ0aW9uIGVycm9yIHRoYXQgd2VcbiAgICAgICAgLy8gZW5jb3VudGVyZWQuXG4gICAgICAgIGlmIChuZWdhdGUgJiYgcHJvcHMubGVuZ3RoID4gMSAmJiBudW1FcnJzID09PSBwcm9wcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aHJvdyBmaXJzdEVycjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQXNzZXJ0IGluY2x1c2lvbiBpbiBjb2xsZWN0aW9uIG9yIHN1YnN0cmluZyBpbiBhIHN0cmluZy5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgIGluY2x1ZGVkXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvICcgKyBkZXNjcmlwdG9yICsgJ2luY2x1ZGUgJyArIF8uaW5zcGVjdCh2YWwpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCAnICsgZGVzY3JpcHRvciArICdpbmNsdWRlICcgKyBfLmluc3BlY3QodmFsKSk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdpbmNsdWRlJywgaW5jbHVkZSwgaW5jbHVkZUNoYWluaW5nQmVoYXZpb3IpO1xuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdjb250YWluJywgaW5jbHVkZSwgaW5jbHVkZUNoYWluaW5nQmVoYXZpb3IpO1xuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdjb250YWlucycsIGluY2x1ZGUsIGluY2x1ZGVDaGFpbmluZ0JlaGF2aW9yKTtcbiAgQXNzZXJ0aW9uLmFkZENoYWluYWJsZU1ldGhvZCgnaW5jbHVkZXMnLCBpbmNsdWRlLCBpbmNsdWRlQ2hhaW5pbmdCZWhhdmlvcik7XG5cbiAgLyoqXG4gICAqICMjIyAub2tcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgbG9vc2VseSAoYD09YCkgZXF1YWwgdG8gYHRydWVgLiBIb3dldmVyLCBpdCdzXG4gICAqIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBzdHJpY3RseSAoYD09PWApIG9yIGRlZXBseSBlcXVhbCB0b1xuICAgKiBpdHMgZXhwZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUub2s7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KHRydWUpLnRvLmJlLnRydWU7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QodHJ1ZSkudG8uYmUub2s7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLm9rYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgwKS50by5lcXVhbCgwKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgwKS50by5ub3QuYmUub2s7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KGZhbHNlKS50by5iZS5mYWxzZTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChmYWxzZSkudG8ubm90LmJlLm9rOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdChudWxsKS50by5iZS5udWxsOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KG51bGwpLnRvLm5vdC5iZS5vazsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QodW5kZWZpbmVkKS50by5iZS51bmRlZmluZWQ7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QodW5kZWZpbmVkKS50by5ub3QuYmUub2s7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KGZhbHNlLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUub2s7XG4gICAqXG4gICAqIEBuYW1lIG9rXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnb2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIHRydXRoeSdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgZmFsc3knKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAudHJ1ZVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBzdHJpY3RseSAoYD09PWApIGVxdWFsIHRvIGB0cnVlYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh0cnVlKS50by5iZS50cnVlO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLnRydWVgLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3RcbiAgICogdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUsIHJhdGhlciB0aGFuIG5vdFxuICAgKiBlcXVhbCB0byBgdHJ1ZWAuXG4gICAqXG4gICAqICAgICBleHBlY3QoZmFsc2UpLnRvLmJlLmZhbHNlOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KGZhbHNlKS50by5ub3QuYmUudHJ1ZTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmJlLnRydWU7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KGZhbHNlLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUudHJ1ZTtcbiAgICpcbiAgICogQG5hbWUgdHJ1ZVxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ3RydWUnLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIHRydWUgPT09IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIHRydWUnXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGZhbHNlJ1xuICAgICAgLCBmbGFnKHRoaXMsICduZWdhdGUnKSA/IGZhbHNlIDogdHJ1ZVxuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmZhbHNlXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIHN0cmljdGx5IChgPT09YCkgZXF1YWwgdG8gYGZhbHNlYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChmYWxzZSkudG8uYmUuZmFsc2U7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZmFsc2VgLiBIb3dldmVyLCBpdCdzIG9mdGVuXG4gICAqIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUsIHJhdGhlciB0aGFuXG4gICAqIG5vdCBlcXVhbCB0byBgZmFsc2VgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHRydWUpLnRvLmJlLnRydWU7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QodHJ1ZSkudG8ubm90LmJlLmZhbHNlOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5ub3QuYmUuZmFsc2U7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHRydWUsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5mYWxzZTtcbiAgICpcbiAgICogQG5hbWUgZmFsc2VcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdmYWxzZScsIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgZmFsc2UgPT09IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGZhbHNlJ1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSB0cnVlJ1xuICAgICAgLCBmbGFnKHRoaXMsICduZWdhdGUnKSA/IHRydWUgOiBmYWxzZVxuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLm51bGxcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgc3RyaWN0bHkgKGA9PT1gKSBlcXVhbCB0byBgbnVsbGAuXG4gICAqXG4gICAqICAgICBleHBlY3QobnVsbCkudG8uYmUubnVsbDtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5udWxsYC4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0XG4gICAqIHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgdG8gaXRzIGV4cGVjdGVkIHZhbHVlLCByYXRoZXIgdGhhbiBub3RcbiAgICogZXF1YWwgdG8gYG51bGxgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5iZS5udWxsOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCg0MiwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLm51bGw7XG4gICAqXG4gICAqIEBuYW1lIG51bGxcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdudWxsJywgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBudWxsID09PSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBudWxsJ1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSBub3QgdG8gYmUgbnVsbCdcbiAgICApO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC51bmRlZmluZWRcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgc3RyaWN0bHkgKGA9PT1gKSBlcXVhbCB0byBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh1bmRlZmluZWQpLnRvLmJlLnVuZGVmaW5lZDtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC51bmRlZmluZWRgLiBIb3dldmVyLCBpdCdzIG9mdGVuXG4gICAqIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUsIHJhdGhlciB0aGFuXG4gICAqIG5vdCBlcXVhbCB0byBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5ub3QuYmUudW5kZWZpbmVkOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCg0MiwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLnVuZGVmaW5lZDtcbiAgICpcbiAgICogQG5hbWUgdW5kZWZpbmVkXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgndW5kZWZpbmVkJywgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICB1bmRlZmluZWQgPT09IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIHVuZGVmaW5lZCdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gbm90IHRvIGJlIHVuZGVmaW5lZCdcbiAgICApO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5OYU5cbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgZXhhY3RseSBgTmFOYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChOYU4pLnRvLmJlLk5hTjtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5OYU5gLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3RcbiAgICogdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUsIHJhdGhlciB0aGFuIG5vdFxuICAgKiBlcXVhbCB0byBgTmFOYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uZXF1YWwoJ2ZvbycpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5ub3QuYmUuTmFOOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCg0MiwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLk5hTjtcbiAgICpcbiAgICogQG5hbWUgTmFOXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnTmFOJywgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBfLmlzTmFOKGZsYWcodGhpcywgJ29iamVjdCcpKVxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIE5hTidcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSBub3QgdG8gYmUgTmFOJ1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmV4aXN0XG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIG5vdCBzdHJpY3RseSAoYD09PWApIGVxdWFsIHRvIGVpdGhlciBgbnVsbGAgb3JcbiAgICogYHVuZGVmaW5lZGAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvXG4gICAqIGl0cyBleHBlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5leGlzdDsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoMCkudG8uZXF1YWwoMCk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMCkudG8uZXhpc3Q7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmV4aXN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdChudWxsKS50by5iZS5udWxsOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KG51bGwpLnRvLm5vdC5leGlzdDsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QodW5kZWZpbmVkKS50by5iZS51bmRlZmluZWQ7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QodW5kZWZpbmVkKS50by5ub3QuZXhpc3Q7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KG51bGwsICdub29vIHdoeSBmYWlsPz8nKS50by5leGlzdDtcbiAgICpcbiAgICogQG5hbWUgZXhpc3RcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdleGlzdCcsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsID0gZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIHZhbCAhPT0gbnVsbCAmJiB2YWwgIT09IHVuZGVmaW5lZFxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBleGlzdCdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGV4aXN0J1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmVtcHR5XG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIHN0cmluZyBvciBhcnJheSwgYC5lbXB0eWAgYXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQnc1xuICAgKiBgbGVuZ3RoYCBwcm9wZXJ0eSBpcyBzdHJpY3RseSAoYD09PWApIGVxdWFsIHRvIGAwYC5cbiAgICpcbiAgICogICAgIGV4cGVjdChbXSkudG8uYmUuZW1wdHk7XG4gICAqICAgICBleHBlY3QoJycpLnRvLmJlLmVtcHR5O1xuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYSBtYXAgb3Igc2V0LCBgLmVtcHR5YCBhc3NlcnRzIHRoYXQgdGhlIHRhcmdldCdzIGBzaXplYFxuICAgKiBwcm9wZXJ0eSBpcyBzdHJpY3RseSBlcXVhbCB0byBgMGAuXG4gICAqXG4gICAqICAgICBleHBlY3QobmV3IFNldCgpKS50by5iZS5lbXB0eTtcbiAgICogICAgIGV4cGVjdChuZXcgTWFwKCkpLnRvLmJlLmVtcHR5O1xuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYSBub24tZnVuY3Rpb24gb2JqZWN0LCBgLmVtcHR5YCBhc3NlcnRzIHRoYXQgdGhlIHRhcmdldFxuICAgKiBkb2Vzbid0IGhhdmUgYW55IG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIFByb3BlcnRpZXMgd2l0aCBTeW1ib2wtYmFzZWRcbiAgICoga2V5cyBhcmUgZXhjbHVkZWQgZnJvbSB0aGUgY291bnQuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe30pLnRvLmJlLmVtcHR5O1xuICAgKlxuICAgKiBCZWNhdXNlIGAuZW1wdHlgIGRvZXMgZGlmZmVyZW50IHRoaW5ncyBiYXNlZCBvbiB0aGUgdGFyZ2V0J3MgdHlwZSwgaXQnc1xuICAgKiBpbXBvcnRhbnQgdG8gY2hlY2sgdGhlIHRhcmdldCdzIHR5cGUgYmVmb3JlIHVzaW5nIGAuZW1wdHlgLiBTZWUgdGhlIGAuYWBcbiAgICogZG9jIGZvciBpbmZvIG9uIHRlc3RpbmcgYSB0YXJnZXQncyB0eXBlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFtdKS50by5iZS5hbignYXJyYXknKS50aGF0LmlzLmVtcHR5O1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmVtcHR5YC4gSG93ZXZlciwgaXQncyBvZnRlblxuICAgKiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgY29udGFpbnMgaXRzIGV4cGVjdGVkIG51bWJlciBvZiB2YWx1ZXMsXG4gICAqIHJhdGhlciB0aGFuIGFzc2VydGluZyB0aGF0IGl0J3Mgbm90IGVtcHR5LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZigzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLm5vdC5iZS5lbXB0eTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QobmV3IFNldChbMSwgMiwgM10pKS50by5oYXZlLnByb3BlcnR5KCdzaXplJywgMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QobmV3IFNldChbMSwgMiwgM10pKS50by5ub3QuYmUuZW1wdHk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KE9iamVjdC5rZXlzKHthOiAxfSkpLnRvLmhhdmUubGVuZ3RoT2YoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5ub3QuYmUuZW1wdHk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmVtcHR5O1xuICAgKlxuICAgKiBAbmFtZSBlbXB0eVxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2VtcHR5JywgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWwgPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgaXRlbXNDb3VudDtcblxuICAgIGZsYWdNc2cgPSBmbGFnTXNnID8gZmxhZ01zZyArICc6ICcgOiAnJztcblxuICAgIHN3aXRjaCAoXy50eXBlKHZhbCkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgY2FzZSAnYXJyYXknOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgaXRlbXNDb3VudCA9IHZhbC5sZW5ndGg7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbWFwJzpcbiAgICAgIGNhc2UgJ3NldCc6XG4gICAgICAgIGl0ZW1zQ291bnQgPSB2YWwuc2l6ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd3ZWFrbWFwJzpcbiAgICAgIGNhc2UgJ3dlYWtzZXQnOlxuICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgICAgZmxhZ01zZyArICcuZW1wdHkgd2FzIHBhc3NlZCBhIHdlYWsgY29sbGVjdGlvbicsXG4gICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgIHNzZmlcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgdmFyIG1zZyA9IGZsYWdNc2cgKyAnLmVtcHR5IHdhcyBwYXNzZWQgYSBmdW5jdGlvbiAnICsgXy5nZXROYW1lKHZhbCk7XG4gICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihtc2cudHJpbSgpLCB1bmRlZmluZWQsIHNzZmkpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHZhbCAhPT0gT2JqZWN0KHZhbCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgICAgICBmbGFnTXNnICsgJy5lbXB0eSB3YXMgcGFzc2VkIG5vbi1zdHJpbmcgcHJpbWl0aXZlICcgKyBfLmluc3BlY3QodmFsKSxcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHNzZmlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGl0ZW1zQ291bnQgPSBPYmplY3Qua2V5cyh2YWwpLmxlbmd0aDtcbiAgICB9XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgMCA9PT0gaXRlbXNDb3VudFxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBlbXB0eSdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gbm90IHRvIGJlIGVtcHR5J1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmFyZ3VtZW50c1xuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gICAqXG4gICAqICAgICBmdW5jdGlvbiB0ZXN0ICgpIHtcbiAgICogICAgICAgZXhwZWN0KGFyZ3VtZW50cykudG8uYmUuYXJndW1lbnRzO1xuICAgKiAgICAgfVxuICAgKlxuICAgKiAgICAgdGVzdCgpO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmFyZ3VtZW50c2AuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBhc3NlcnQgd2hpY2ggdHlwZSB0aGUgdGFyZ2V0IGlzIGV4cGVjdGVkIHRvIGJlLCByYXRoZXIgdGhhblxuICAgKiBhc3NlcnRpbmcgdGhhdCBpdHMgbm90IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uYmUuYSgnc3RyaW5nJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLm5vdC5iZS5hcmd1bWVudHM7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHt9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuYXJndW1lbnRzO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5Bcmd1bWVudHNgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAuYXJndW1lbnRzYC5cbiAgICpcbiAgICogQG5hbWUgYXJndW1lbnRzXG4gICAqIEBhbGlhcyBBcmd1bWVudHNcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gY2hlY2tBcmd1bWVudHMgKCkge1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCB0eXBlID0gXy50eXBlKG9iaik7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICdBcmd1bWVudHMnID09PSB0eXBlXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGFyZ3VtZW50cyBidXQgZ290ICcgKyB0eXBlXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSBhcmd1bWVudHMnXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnYXJndW1lbnRzJywgY2hlY2tBcmd1bWVudHMpO1xuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ0FyZ3VtZW50cycsIGNoZWNrQXJndW1lbnRzKTtcblxuICAvKipcbiAgICogIyMjIC5lcXVhbCh2YWxbLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBzdHJpY3RseSAoYD09PWApIGVxdWFsIHRvIHRoZSBnaXZlbiBgdmFsYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTtcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uZXF1YWwoJ2ZvbycpO1xuICAgKiBcbiAgICogQWRkIGAuZGVlcGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gdXNlIGRlZXAgZXF1YWxpdHkgaW5zdGVhZC4gU2VlIHRoZVxuICAgKiBgZGVlcC1lcWxgIHByb2plY3QgcGFnZSBmb3IgaW5mbyBvbiB0aGUgZGVlcCBlcXVhbGl0eSBhbGdvcml0aG06XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFpanMvZGVlcC1lcWwuXG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgb2JqZWN0IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgZXF1YWxzIGB7YTogMX1gXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5kZWVwLmVxdWFsKHthOiAxfSk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5ub3QuZXF1YWwoe2E6IDF9KTtcbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBhcnJheSBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGVxdWFscyBgWzEsIDJdYFxuICAgKiAgICAgZXhwZWN0KFsxLCAyXSkudG8uZGVlcC5lcXVhbChbMSwgMl0pO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyXSkudG8ubm90LmVxdWFsKFsxLCAyXSk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZXF1YWxgLiBIb3dldmVyLCBpdCdzIG9mdGVuXG4gICAqIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUsIHJhdGhlciB0aGFuXG4gICAqIG5vdCBlcXVhbCB0byBvbmUgb2YgY291bnRsZXNzIHVuZXhwZWN0ZWQgdmFsdWVzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5lcXVhbCgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAuZXF1YWxgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICAgKiB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlXG4gICAqIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgyLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmVxdWFsKDIpO1xuICAgKlxuICAgKiBUaGUgYWxpYXNlcyBgLmVxdWFsc2AgYW5kIGBlcWAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5lcXVhbGAuXG4gICAqXG4gICAqIEBuYW1lIGVxdWFsXG4gICAqIEBhbGlhcyBlcXVhbHNcbiAgICogQGFsaWFzIGVxXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0RXF1YWwgKHZhbCwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpO1xuICAgIGlmIChmbGFnKHRoaXMsICdkZWVwJykpIHtcbiAgICAgIHJldHVybiB0aGlzLmVxbCh2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICB2YWwgPT09IG9ialxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGVxdWFsICN7ZXhwfSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgZXF1YWwgI3tleHB9J1xuICAgICAgICAsIHZhbFxuICAgICAgICAsIHRoaXMuX29ialxuICAgICAgICAsIHRydWVcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZXF1YWwnLCBhc3NlcnRFcXVhbCk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2VxdWFscycsIGFzc2VydEVxdWFsKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZXEnLCBhc3NlcnRFcXVhbCk7XG5cbiAgLyoqXG4gICAqICMjIyAuZXFsKG9ialssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGRlZXBseSBlcXVhbCB0byB0aGUgZ2l2ZW4gYG9iamAuIFNlZSB0aGVcbiAgICogYGRlZXAtZXFsYCBwcm9qZWN0IHBhZ2UgZm9yIGluZm8gb24gdGhlIGRlZXAgZXF1YWxpdHkgYWxnb3JpdGhtOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2RlZXAtZXFsLlxuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IG9iamVjdCBpcyBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGVxdWFsIHRvIHthOiAxfVxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uZXFsKHthOiAxfSkuYnV0Lm5vdC5lcXVhbCh7YTogMX0pO1xuICAgKlxuICAgKiAgICAgLy8gVGFyZ2V0IGFycmF5IGlzIGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgZXF1YWwgdG8gWzEsIDJdXG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5lcWwoWzEsIDJdKS5idXQubm90LmVxdWFsKFsxLCAyXSk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZXFsYC4gSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0XG4gICAqIHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZGVlcGx5IGVxdWFsIHRvIGl0cyBleHBlY3RlZCB2YWx1ZSwgcmF0aGVyXG4gICAqIHRoYW4gbm90IGRlZXBseSBlcXVhbCB0byBvbmUgb2YgY291bnRsZXNzIHVuZXhwZWN0ZWQgdmFsdWVzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uZXFsKHthOiAxfSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5ub3QuZXFsKHtiOiAyfSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmVxbGAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uZXFsKHtiOiAyfSwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmVxbCh7YjogMn0pO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5lcWxzYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLmVxbGAuXG4gICAqXG4gICAqIFRoZSBgLmRlZXAuZXF1YWxgIGFzc2VydGlvbiBpcyBhbG1vc3QgaWRlbnRpY2FsIHRvIGAuZXFsYCBidXQgd2l0aCBvbmVcbiAgICogZGlmZmVyZW5jZTogYC5kZWVwLmVxdWFsYCBjYXVzZXMgZGVlcCBlcXVhbGl0eSBjb21wYXJpc29ucyB0byBhbHNvIGJlIHVzZWRcbiAgICogZm9yIGFueSBvdGhlciBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbi5cbiAgICpcbiAgICogQG5hbWUgZXFsXG4gICAqIEBhbGlhcyBlcWxzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9ialxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0RXFsKG9iaiwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIF8uZXFsKG9iaiwgZmxhZyh0aGlzLCAnb2JqZWN0JykpXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGRlZXBseSBlcXVhbCAje2V4cH0nXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBkZWVwbHkgZXF1YWwgI3tleHB9J1xuICAgICAgLCBvYmpcbiAgICAgICwgdGhpcy5fb2JqXG4gICAgICAsIHRydWVcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZXFsJywgYXNzZXJ0RXFsKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZXFscycsIGFzc2VydEVxbCk7XG5cbiAgLyoqXG4gICAqICMjIyAuYWJvdmUoblssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyIG9yIGEgZGF0ZSBncmVhdGVyIHRoYW4gdGhlIGdpdmVuIG51bWJlciBvciBkYXRlIGBuYCByZXNwZWN0aXZlbHkuXG4gICAqIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0cyBleHBlY3RlZFxuICAgKiB2YWx1ZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5lcXVhbCgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgyKS50by5iZS5hYm92ZSgxKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLmxlbmd0aE9mYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBhc3NlcnQgdGhhdCB0aGUgdmFsdWUgb2YgdGhlXG4gICAqIHRhcmdldCdzIGBsZW5ndGhgIHByb3BlcnR5IGlzIGdyZWF0ZXIgdGhhbiB0aGUgZ2l2ZW4gbnVtYmVyIGBuYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uaGF2ZS5sZW5ndGhPZigzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uaGF2ZS5sZW5ndGhPZi5hYm92ZSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi5hYm92ZSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuYWJvdmVgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmVxdWFsKDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5iZS5hYm92ZSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAuYWJvdmVgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICAgKiB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlXG4gICAqIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5hYm92ZSgyLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoMSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmFib3ZlKDIpO1xuICAgKlxuICAgKiBUaGUgYWxpYXNlcyBgLmd0YCBhbmQgYC5ncmVhdGVyVGhhbmAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGhcbiAgICogYC5hYm92ZWAuXG4gICAqXG4gICAqIEBuYW1lIGFib3ZlXG4gICAqIEBhbGlhcyBndFxuICAgKiBAYWxpYXMgZ3JlYXRlclRoYW5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydEFib3ZlIChuLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZG9MZW5ndGggPSBmbGFnKHRoaXMsICdkb0xlbmd0aCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgbXNnUHJlZml4ID0gKChmbGFnTXNnKSA/IGZsYWdNc2cgKyAnOiAnIDogJycpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJylcbiAgICAgICwgb2JqVHlwZSA9IF8udHlwZShvYmopLnRvTG93ZXJDYXNlKClcbiAgICAgICwgblR5cGUgPSBfLnR5cGUobikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBzaG91bGRUaHJvdyA9IHRydWU7XG5cbiAgICBpZiAoZG9MZW5ndGgpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KCdsZW5ndGgnKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKCFkb0xlbmd0aCAmJiAob2JqVHlwZSA9PT0gJ2RhdGUnICYmIG5UeXBlICE9PSAnZGF0ZScpKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAndGhlIGFyZ3VtZW50IHRvIGFib3ZlIG11c3QgYmUgYSBkYXRlJztcbiAgICB9IGVsc2UgaWYgKG5UeXBlICE9PSAnbnVtYmVyJyAmJiAoZG9MZW5ndGggfHwgb2JqVHlwZSA9PT0gJ251bWJlcicpKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAndGhlIGFyZ3VtZW50IHRvIGFib3ZlIG11c3QgYmUgYSBudW1iZXInO1xuICAgIH0gZWxzZSBpZiAoIWRvTGVuZ3RoICYmIChvYmpUeXBlICE9PSAnZGF0ZScgJiYgb2JqVHlwZSAhPT0gJ251bWJlcicpKSB7XG4gICAgICB2YXIgcHJpbnRPYmogPSAob2JqVHlwZSA9PT0gJ3N0cmluZycpID8gXCInXCIgKyBvYmogKyBcIidcIiA6IG9iajtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICdleHBlY3RlZCAnICsgcHJpbnRPYmogKyAnIHRvIGJlIGEgbnVtYmVyIG9yIGEgZGF0ZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3VsZFRocm93ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFRocm93KSB7XG4gICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoZXJyb3JNZXNzYWdlLCB1bmRlZmluZWQsIHNzZmkpO1xuICAgIH1cblxuICAgIGlmIChkb0xlbmd0aCkge1xuICAgICAgdmFyIGxlbiA9IG9iai5sZW5ndGg7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBsZW4gPiBuXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSBhIGxlbmd0aCBhYm92ZSAje2V4cH0gYnV0IGdvdCAje2FjdH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGhhdmUgYSBsZW5ndGggYWJvdmUgI3tleHB9J1xuICAgICAgICAsIG5cbiAgICAgICAgLCBsZW5cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIG9iaiA+IG5cbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBhYm92ZSAje2V4cH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgYXQgbW9zdCAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdhYm92ZScsIGFzc2VydEFib3ZlKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZ3QnLCBhc3NlcnRBYm92ZSk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2dyZWF0ZXJUaGFuJywgYXNzZXJ0QWJvdmUpO1xuXG4gIC8qKlxuICAgKiAjIyMgLmxlYXN0KG5bLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBhIG51bWJlciBvciBhIGRhdGUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlblxuICAgKiBudW1iZXIgb3IgZGF0ZSBgbmAgcmVzcGVjdGl2ZWx5LiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0b1xuICAgKiBpdHMgZXhwZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqICAgICBleHBlY3QoMikudG8uZXF1YWwoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMikudG8uYmUuYXQubGVhc3QoMSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmJlLmF0LmxlYXN0KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubGVuZ3RoT2ZgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIGFzc2VydCB0aGF0IHRoZSB2YWx1ZSBvZiB0aGVcbiAgICogdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlbiBudW1iZXJcbiAgICogYG5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mLmF0LmxlYXN0KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mLmF0LmxlYXN0KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5sZWFzdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LmJlLmF0LmxlYXN0KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5sZWFzdGAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLmF0LmxlYXN0KDIsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgxLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuYXQubGVhc3QoMik7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLmd0ZWAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5sZWFzdGAuXG4gICAqXG4gICAqIEBuYW1lIGxlYXN0XG4gICAqIEBhbGlhcyBndGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydExlYXN0IChuLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZG9MZW5ndGggPSBmbGFnKHRoaXMsICdkb0xlbmd0aCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgbXNnUHJlZml4ID0gKChmbGFnTXNnKSA/IGZsYWdNc2cgKyAnOiAnIDogJycpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJylcbiAgICAgICwgb2JqVHlwZSA9IF8udHlwZShvYmopLnRvTG93ZXJDYXNlKClcbiAgICAgICwgblR5cGUgPSBfLnR5cGUobikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBzaG91bGRUaHJvdyA9IHRydWU7XG5cbiAgICBpZiAoZG9MZW5ndGgpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KCdsZW5ndGgnKTtcbiAgICB9XG5cbiAgICBpZiAoIWRvTGVuZ3RoICYmIChvYmpUeXBlID09PSAnZGF0ZScgJiYgblR5cGUgIT09ICdkYXRlJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gbGVhc3QgbXVzdCBiZSBhIGRhdGUnO1xuICAgIH0gZWxzZSBpZiAoblR5cGUgIT09ICdudW1iZXInICYmIChkb0xlbmd0aCB8fCBvYmpUeXBlID09PSAnbnVtYmVyJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gbGVhc3QgbXVzdCBiZSBhIG51bWJlcic7XG4gICAgfSBlbHNlIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgIT09ICdkYXRlJyAmJiBvYmpUeXBlICE9PSAnbnVtYmVyJykpIHtcbiAgICAgIHZhciBwcmludE9iaiA9IChvYmpUeXBlID09PSAnc3RyaW5nJykgPyBcIidcIiArIG9iaiArIFwiJ1wiIDogb2JqO1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ2V4cGVjdGVkICcgKyBwcmludE9iaiArICcgdG8gYmUgYSBudW1iZXIgb3IgYSBkYXRlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkVGhyb3cgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVGhyb3cpIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihlcnJvck1lc3NhZ2UsIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgfVxuXG4gICAgaWYgKGRvTGVuZ3RoKSB7XG4gICAgICB2YXIgbGVuID0gb2JqLmxlbmd0aDtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIGxlbiA+PSBuXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSBhIGxlbmd0aCBhdCBsZWFzdCAje2V4cH0gYnV0IGdvdCAje2FjdH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSBhIGxlbmd0aCBiZWxvdyAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgICAsIGxlblxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgb2JqID49IG5cbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBhdCBsZWFzdCAje2V4cH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgYmVsb3cgI3tleHB9J1xuICAgICAgICAsIG5cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnbGVhc3QnLCBhc3NlcnRMZWFzdCk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2d0ZScsIGFzc2VydExlYXN0KTtcblxuICAvKipcbiAgICogIyMjIC5iZWxvdyhuWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgYSBudW1iZXIgb3IgYSBkYXRlIGxlc3MgdGhhbiB0aGUgZ2l2ZW4gbnVtYmVyIG9yIGRhdGUgYG5gIHJlc3BlY3RpdmVseS5cbiAgICogSG93ZXZlciwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgdG8gaXRzIGV4cGVjdGVkXG4gICAqIHZhbHVlLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLmJlbG93KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubGVuZ3RoT2ZgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIGFzc2VydCB0aGF0IHRoZSB2YWx1ZSBvZiB0aGVcbiAgICogdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgaXMgbGVzcyB0aGFuIHRoZSBnaXZlbiBudW1iZXIgYG5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mLmJlbG93KDQpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi5iZWxvdyg0KTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuYmVsb3dgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmVxdWFsKDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDIpLnRvLm5vdC5iZS5iZWxvdygxKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAuYmVsb3dgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICAgKiB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlXG4gICAqIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5iZS5iZWxvdygxLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoMiwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLmJlbG93KDEpO1xuICAgKlxuICAgKiBUaGUgYWxpYXNlcyBgLmx0YCBhbmQgYC5sZXNzVGhhbmAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGhcbiAgICogYC5iZWxvd2AuXG4gICAqXG4gICAqIEBuYW1lIGJlbG93XG4gICAqIEBhbGlhcyBsdFxuICAgKiBAYWxpYXMgbGVzc1RoYW5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydEJlbG93IChuLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZG9MZW5ndGggPSBmbGFnKHRoaXMsICdkb0xlbmd0aCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgbXNnUHJlZml4ID0gKChmbGFnTXNnKSA/IGZsYWdNc2cgKyAnOiAnIDogJycpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJylcbiAgICAgICwgb2JqVHlwZSA9IF8udHlwZShvYmopLnRvTG93ZXJDYXNlKClcbiAgICAgICwgblR5cGUgPSBfLnR5cGUobikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBzaG91bGRUaHJvdyA9IHRydWU7XG5cbiAgICBpZiAoZG9MZW5ndGgpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KCdsZW5ndGgnKTtcbiAgICB9XG5cbiAgICBpZiAoIWRvTGVuZ3RoICYmIChvYmpUeXBlID09PSAnZGF0ZScgJiYgblR5cGUgIT09ICdkYXRlJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gYmVsb3cgbXVzdCBiZSBhIGRhdGUnO1xuICAgIH0gZWxzZSBpZiAoblR5cGUgIT09ICdudW1iZXInICYmIChkb0xlbmd0aCB8fCBvYmpUeXBlID09PSAnbnVtYmVyJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gYmVsb3cgbXVzdCBiZSBhIG51bWJlcic7XG4gICAgfSBlbHNlIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgIT09ICdkYXRlJyAmJiBvYmpUeXBlICE9PSAnbnVtYmVyJykpIHtcbiAgICAgIHZhciBwcmludE9iaiA9IChvYmpUeXBlID09PSAnc3RyaW5nJykgPyBcIidcIiArIG9iaiArIFwiJ1wiIDogb2JqO1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ2V4cGVjdGVkICcgKyBwcmludE9iaiArICcgdG8gYmUgYSBudW1iZXIgb3IgYSBkYXRlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkVGhyb3cgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVGhyb3cpIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihlcnJvck1lc3NhZ2UsIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgfVxuXG4gICAgaWYgKGRvTGVuZ3RoKSB7XG4gICAgICB2YXIgbGVuID0gb2JqLmxlbmd0aDtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIGxlbiA8IG5cbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIGEgbGVuZ3RoIGJlbG93ICN7ZXhwfSBidXQgZ290ICN7YWN0fSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgaGF2ZSBhIGxlbmd0aCBiZWxvdyAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgICAsIGxlblxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgb2JqIDwgblxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIGJlbG93ICN7ZXhwfSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBhdCBsZWFzdCAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdiZWxvdycsIGFzc2VydEJlbG93KTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnbHQnLCBhc3NlcnRCZWxvdyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2xlc3NUaGFuJywgYXNzZXJ0QmVsb3cpO1xuXG4gIC8qKlxuICAgKiAjIyMgLm1vc3QoblssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyIG9yIGEgZGF0ZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuIG51bWJlclxuICAgKiBvciBkYXRlIGBuYCByZXNwZWN0aXZlbHkuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0IGlzIGVxdWFsIHRvIGl0c1xuICAgKiBleHBlY3RlZCB2YWx1ZS5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxKS50by5lcXVhbCgxKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5hdC5tb3N0KDIpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5hdC5tb3N0KDEpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubGVuZ3RoT2ZgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIGFzc2VydCB0aGF0IHRoZSB2YWx1ZSBvZiB0aGVcbiAgICogdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBnaXZlbiBudW1iZXIgYG5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mKDMpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KCdmb28nKS50by5oYXZlLmxlbmd0aE9mLmF0Lm1vc3QoNCk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZigzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YuYXQubW9zdCg0KTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAubW9zdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMikudG8uZXF1YWwoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMikudG8ubm90LmJlLmF0Lm1vc3QoMSk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLm1vc3RgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICAgKiB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlXG4gICAqIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgyKS50by5iZS5hdC5tb3N0KDEsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgyLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuYXQubW9zdCgxKTtcbiAgICpcbiAgICogVGhlIGFsaWFzIGAubHRlYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLm1vc3RgLlxuICAgKlxuICAgKiBAbmFtZSBtb3N0XG4gICAqIEBhbGlhcyBsdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydE1vc3QgKG4sIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBkb0xlbmd0aCA9IGZsYWcodGhpcywgJ2RvTGVuZ3RoJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBtc2dQcmVmaXggPSAoKGZsYWdNc2cpID8gZmxhZ01zZyArICc6ICcgOiAnJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBvYmpUeXBlID0gXy50eXBlKG9iaikudG9Mb3dlckNhc2UoKVxuICAgICAgLCBuVHlwZSA9IF8udHlwZShuKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIHNob3VsZFRocm93ID0gdHJ1ZTtcblxuICAgIGlmIChkb0xlbmd0aCkge1xuICAgICAgbmV3IEFzc2VydGlvbihvYmosIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkoJ2xlbmd0aCcpO1xuICAgIH1cbiAgICBcbiAgICBpZiAoIWRvTGVuZ3RoICYmIChvYmpUeXBlID09PSAnZGF0ZScgJiYgblR5cGUgIT09ICdkYXRlJykpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICd0aGUgYXJndW1lbnQgdG8gbW9zdCBtdXN0IGJlIGEgZGF0ZSc7XG4gICAgfSBlbHNlIGlmIChuVHlwZSAhPT0gJ251bWJlcicgJiYgKGRvTGVuZ3RoIHx8IG9ialR5cGUgPT09ICdudW1iZXInKSkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ3RoZSBhcmd1bWVudCB0byBtb3N0IG11c3QgYmUgYSBudW1iZXInO1xuICAgIH0gZWxzZSBpZiAoIWRvTGVuZ3RoICYmIChvYmpUeXBlICE9PSAnZGF0ZScgJiYgb2JqVHlwZSAhPT0gJ251bWJlcicpKSB7XG4gICAgICB2YXIgcHJpbnRPYmogPSAob2JqVHlwZSA9PT0gJ3N0cmluZycpID8gXCInXCIgKyBvYmogKyBcIidcIiA6IG9iajtcbiAgICAgIGVycm9yTWVzc2FnZSA9IG1zZ1ByZWZpeCArICdleHBlY3RlZCAnICsgcHJpbnRPYmogKyAnIHRvIGJlIGEgbnVtYmVyIG9yIGEgZGF0ZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3VsZFRocm93ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFRocm93KSB7XG4gICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoZXJyb3JNZXNzYWdlLCB1bmRlZmluZWQsIHNzZmkpO1xuICAgIH1cblxuICAgIGlmIChkb0xlbmd0aCkge1xuICAgICAgdmFyIGxlbiA9IG9iai5sZW5ndGg7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBsZW4gPD0gblxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGhhdmUgYSBsZW5ndGggYXQgbW9zdCAje2V4cH0gYnV0IGdvdCAje2FjdH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSBhIGxlbmd0aCBhYm92ZSAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgICAsIGxlblxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgb2JqIDw9IG5cbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBhdCBtb3N0ICN7ZXhwfSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBhYm92ZSAje2V4cH0nXG4gICAgICAgICwgblxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdtb3N0JywgYXNzZXJ0TW9zdCk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2x0ZScsIGFzc2VydE1vc3QpO1xuXG4gIC8qKlxuICAgKiAjIyMgLndpdGhpbihzdGFydCwgZmluaXNoWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgYSBudW1iZXIgb3IgYSBkYXRlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgZ2l2ZW5cbiAgICogbnVtYmVyIG9yIGRhdGUgYHN0YXJ0YCwgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgZ2l2ZW4gbnVtYmVyIG9yIGRhdGUgYGZpbmlzaGAgcmVzcGVjdGl2ZWx5LlxuICAgKiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWRcbiAgICogdmFsdWUuXG4gICAqXG4gICAqICAgICBleHBlY3QoMikudG8uZXF1YWwoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMikudG8uYmUud2l0aGluKDEsIDMpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgyKS50by5iZS53aXRoaW4oMiwgMyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDIpLnRvLmJlLndpdGhpbigxLCAyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLmxlbmd0aE9mYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBhc3NlcnQgdGhhdCB0aGUgdmFsdWUgb2YgdGhlXG4gICAqIHRhcmdldCdzIGBsZW5ndGhgIHByb3BlcnR5IGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAqIGBzdGFydGAsIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGdpdmVuIG51bWJlciBgZmluaXNoYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uaGF2ZS5sZW5ndGhPZigzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uaGF2ZS5sZW5ndGhPZi53aXRoaW4oMiwgNCk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZigzKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2Yud2l0aGluKDIsIDQpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC53aXRoaW5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5iZS53aXRoaW4oMiwgNCk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLndpdGhpbmAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDQpLnRvLmJlLndpdGhpbigxLCAzLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoNCwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmJlLndpdGhpbigxLCAzKTtcbiAgICpcbiAgICogQG5hbWUgd2l0aGluXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydCBsb3dlciBib3VuZCBpbmNsdXNpdmVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGZpbmlzaCB1cHBlciBib3VuZCBpbmNsdXNpdmVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ3dpdGhpbicsIGZ1bmN0aW9uIChzdGFydCwgZmluaXNoLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZG9MZW5ndGggPSBmbGFnKHRoaXMsICdkb0xlbmd0aCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgbXNnUHJlZml4ID0gKChmbGFnTXNnKSA/IGZsYWdNc2cgKyAnOiAnIDogJycpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJylcbiAgICAgICwgb2JqVHlwZSA9IF8udHlwZShvYmopLnRvTG93ZXJDYXNlKClcbiAgICAgICwgc3RhcnRUeXBlID0gXy50eXBlKHN0YXJ0KS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIGZpbmlzaFR5cGUgPSBfLnR5cGUoZmluaXNoKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIHNob3VsZFRocm93ID0gdHJ1ZVxuICAgICAgLCByYW5nZSA9IChzdGFydFR5cGUgPT09ICdkYXRlJyAmJiBmaW5pc2hUeXBlID09PSAnZGF0ZScpXG4gICAgICAgICAgPyBzdGFydC50b1VUQ1N0cmluZygpICsgJy4uJyArIGZpbmlzaC50b1VUQ1N0cmluZygpXG4gICAgICAgICAgOiBzdGFydCArICcuLicgKyBmaW5pc2g7XG5cbiAgICBpZiAoZG9MZW5ndGgpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KCdsZW5ndGgnKTtcbiAgICB9XG5cbiAgICBpZiAoIWRvTGVuZ3RoICYmIChvYmpUeXBlID09PSAnZGF0ZScgJiYgKHN0YXJ0VHlwZSAhPT0gJ2RhdGUnIHx8IGZpbmlzaFR5cGUgIT09ICdkYXRlJykpKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBtc2dQcmVmaXggKyAndGhlIGFyZ3VtZW50cyB0byB3aXRoaW4gbXVzdCBiZSBkYXRlcyc7XG4gICAgfSBlbHNlIGlmICgoc3RhcnRUeXBlICE9PSAnbnVtYmVyJyB8fCBmaW5pc2hUeXBlICE9PSAnbnVtYmVyJykgJiYgKGRvTGVuZ3RoIHx8IG9ialR5cGUgPT09ICdudW1iZXInKSkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ3RoZSBhcmd1bWVudHMgdG8gd2l0aGluIG11c3QgYmUgbnVtYmVycyc7XG4gICAgfSBlbHNlIGlmICghZG9MZW5ndGggJiYgKG9ialR5cGUgIT09ICdkYXRlJyAmJiBvYmpUeXBlICE9PSAnbnVtYmVyJykpIHtcbiAgICAgIHZhciBwcmludE9iaiA9IChvYmpUeXBlID09PSAnc3RyaW5nJykgPyBcIidcIiArIG9iaiArIFwiJ1wiIDogb2JqO1xuICAgICAgZXJyb3JNZXNzYWdlID0gbXNnUHJlZml4ICsgJ2V4cGVjdGVkICcgKyBwcmludE9iaiArICcgdG8gYmUgYSBudW1iZXIgb3IgYSBkYXRlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkVGhyb3cgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVGhyb3cpIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihlcnJvck1lc3NhZ2UsIHVuZGVmaW5lZCwgc3NmaSk7XG4gICAgfVxuXG4gICAgaWYgKGRvTGVuZ3RoKSB7XG4gICAgICB2YXIgbGVuID0gb2JqLmxlbmd0aDtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIGxlbiA+PSBzdGFydCAmJiBsZW4gPD0gZmluaXNoXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSBhIGxlbmd0aCB3aXRoaW4gJyArIHJhbmdlXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGhhdmUgYSBsZW5ndGggd2l0aGluICcgKyByYW5nZVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgb2JqID49IHN0YXJ0ICYmIG9iaiA8PSBmaW5pc2hcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSB3aXRoaW4gJyArIHJhbmdlXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGJlIHdpdGhpbiAnICsgcmFuZ2VcbiAgICAgICk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5pbnN0YW5jZW9mKGNvbnN0cnVjdG9yWywgbXNnXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgYW4gaW5zdGFuY2Ugb2YgdGhlIGdpdmVuIGBjb25zdHJ1Y3RvcmAuXG4gICAqXG4gICAqICAgICBmdW5jdGlvbiBDYXQgKCkgeyB9XG4gICAqXG4gICAqICAgICBleHBlY3QobmV3IENhdCgpKS50by5iZS5hbi5pbnN0YW5jZW9mKENhdCk7XG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5iZS5hbi5pbnN0YW5jZW9mKEFycmF5KTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5pbnN0YW5jZW9mYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5iZS5hbi5pbnN0YW5jZW9mKEFycmF5KTtcbiAgICpcbiAgICogYC5pbnN0YW5jZW9mYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUuYW4uaW5zdGFuY2VvZihBcnJheSwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KDEsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5hbi5pbnN0YW5jZW9mKEFycmF5KTtcbiAgICpcbiAgICogRHVlIHRvIGxpbWl0YXRpb25zIGluIEVTNSwgYC5pbnN0YW5jZW9mYCBtYXkgbm90IGFsd2F5cyB3b3JrIGFzIGV4cGVjdGVkXG4gICAqIHdoZW4gdXNpbmcgYSB0cmFuc3BpbGVyIHN1Y2ggYXMgQmFiZWwgb3IgVHlwZVNjcmlwdC4gSW4gcGFydGljdWxhciwgaXQgbWF5XG4gICAqIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzIHdoZW4gc3ViY2xhc3NpbmcgYnVpbHQtaW4gb2JqZWN0IHN1Y2ggYXNcbiAgICogYEFycmF5YCwgYEVycm9yYCwgYW5kIGBNYXBgLiBTZWUgeW91ciB0cmFuc3BpbGVyJ3MgZG9jcyBmb3IgZGV0YWlsczpcbiAgICpcbiAgICogLSAoW0JhYmVsXShodHRwczovL2JhYmVsanMuaW8vZG9jcy91c2FnZS9jYXZlYXRzLyNjbGFzc2VzKSlcbiAgICogLSAoW1R5cGVTY3JpcHRdKGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC93aWtpL0JyZWFraW5nLUNoYW5nZXMjZXh0ZW5kaW5nLWJ1aWx0LWlucy1saWtlLWVycm9yLWFycmF5LWFuZC1tYXAtbWF5LW5vLWxvbmdlci13b3JrKSlcbiAgICpcbiAgICogVGhlIGFsaWFzIGAuaW5zdGFuY2VPZmAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5pbnN0YW5jZW9mYC5cbiAgICpcbiAgICogQG5hbWUgaW5zdGFuY2VvZlxuICAgKiBAcGFyYW0ge0NvbnN0cnVjdG9yfSBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQGFsaWFzIGluc3RhbmNlT2ZcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0SW5zdGFuY2VPZiAoY29uc3RydWN0b3IsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuXG4gICAgdmFyIHRhcmdldCA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgdmFyIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJyk7XG4gICAgdmFyIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJyk7XG5cbiAgICB0cnkge1xuICAgICAgdmFyIGlzSW5zdGFuY2VPZiA9IHRhcmdldCBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIFR5cGVFcnJvcikge1xuICAgICAgICBmbGFnTXNnID0gZmxhZ01zZyA/IGZsYWdNc2cgKyAnOiAnIDogJyc7XG4gICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihcbiAgICAgICAgICBmbGFnTXNnICsgJ1RoZSBpbnN0YW5jZW9mIGFzc2VydGlvbiBuZWVkcyBhIGNvbnN0cnVjdG9yIGJ1dCAnXG4gICAgICAgICAgICArIF8udHlwZShjb25zdHJ1Y3RvcikgKyAnIHdhcyBnaXZlbi4nLFxuICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICBzc2ZpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBfLmdldE5hbWUoY29uc3RydWN0b3IpO1xuICAgIGlmIChuYW1lID09PSBudWxsKSB7XG4gICAgICBuYW1lID0gJ2FuIHVubmFtZWQgY29uc3RydWN0b3InO1xuICAgIH1cblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBpc0luc3RhbmNlT2ZcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgYW4gaW5zdGFuY2Ugb2YgJyArIG5hbWVcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGJlIGFuIGluc3RhbmNlIG9mICcgKyBuYW1lXG4gICAgKTtcbiAgfTtcblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdpbnN0YW5jZW9mJywgYXNzZXJ0SW5zdGFuY2VPZik7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2luc3RhbmNlT2YnLCBhc3NlcnRJbnN0YW5jZU9mKTtcblxuICAvKipcbiAgICogIyMjIC5wcm9wZXJ0eShuYW1lWywgdmFsWywgbXNnXV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGhhcyBhIHByb3BlcnR5IHdpdGggdGhlIGdpdmVuIGtleSBgbmFtZWAuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLnByb3BlcnR5KCdhJyk7XG4gICAqXG4gICAqIFdoZW4gYHZhbGAgaXMgcHJvdmlkZWQsIGAucHJvcGVydHlgIGFsc28gYXNzZXJ0cyB0aGF0IHRoZSBwcm9wZXJ0eSdzIHZhbHVlXG4gICAqIGlzIGVxdWFsIHRvIHRoZSBnaXZlbiBgdmFsYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUucHJvcGVydHkoJ2EnLCAxKTtcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgc3RyaWN0IChgPT09YCkgZXF1YWxpdHkgaXMgdXNlZC4gQWRkIGAuZGVlcGAgZWFybGllciBpbiB0aGVcbiAgICogY2hhaW4gdG8gdXNlIGRlZXAgZXF1YWxpdHkgaW5zdGVhZC4gU2VlIHRoZSBgZGVlcC1lcWxgIHByb2plY3QgcGFnZSBmb3JcbiAgICogaW5mbyBvbiB0aGUgZGVlcCBlcXVhbGl0eSBhbGdvcml0aG06IGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFpanMvZGVlcC1lcWwuXG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgb2JqZWN0IGRlZXBseSAoYnV0IG5vdCBzdHJpY3RseSkgaGFzIHByb3BlcnR5IGB4OiB7YTogMX1gXG4gICAqICAgICBleHBlY3Qoe3g6IHthOiAxfX0pLnRvLmhhdmUuZGVlcC5wcm9wZXJ0eSgneCcsIHthOiAxfSk7XG4gICAqICAgICBleHBlY3Qoe3g6IHthOiAxfX0pLnRvLm5vdC5oYXZlLnByb3BlcnR5KCd4Jywge2E6IDF9KTtcbiAgICpcbiAgICogVGhlIHRhcmdldCdzIGVudW1lcmFibGUgYW5kIG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgYXJlIGFsd2F5cyBpbmNsdWRlZFxuICAgKiBpbiB0aGUgc2VhcmNoLiBCeSBkZWZhdWx0LCBib3RoIG93biBhbmQgaW5oZXJpdGVkIHByb3BlcnRpZXMgYXJlIGluY2x1ZGVkLlxuICAgKiBBZGQgYC5vd25gIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIGV4Y2x1ZGUgaW5oZXJpdGVkIHByb3BlcnRpZXMgZnJvbSB0aGVcbiAgICogc2VhcmNoLlxuICAgKlxuICAgKiAgICAgT2JqZWN0LnByb3RvdHlwZS5iID0gMjtcbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUub3duLnByb3BlcnR5KCdhJyk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLm93bi5wcm9wZXJ0eSgnYScsIDEpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5wcm9wZXJ0eSgnYicpLmJ1dC5ub3Qub3duLnByb3BlcnR5KCdiJyk7IFxuICAgKlxuICAgKiBgLmRlZXBgIGFuZCBgLm93bmAgY2FuIGJlIGNvbWJpbmVkLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHt4OiB7YTogMX19KS50by5oYXZlLmRlZXAub3duLnByb3BlcnR5KCd4Jywge2E6IDF9KTtcbiAgICpcbiAgICogQWRkIGAubmVzdGVkYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBlbmFibGUgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiB3aGVuXG4gICAqIHJlZmVyZW5jaW5nIG5lc3RlZCBwcm9wZXJ0aWVzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiB7YjogWyd4JywgJ3knXX19KS50by5oYXZlLm5lc3RlZC5wcm9wZXJ0eSgnYS5iWzFdJyk7XG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiBbJ3gnLCAneSddfX0pLnRvLmhhdmUubmVzdGVkLnByb3BlcnR5KCdhLmJbMV0nLCAneScpO1xuICAgKlxuICAgKiBJZiBgLmAgb3IgYFtdYCBhcmUgcGFydCBvZiBhbiBhY3R1YWwgcHJvcGVydHkgbmFtZSwgdGhleSBjYW4gYmUgZXNjYXBlZCBieVxuICAgKiBhZGRpbmcgdHdvIGJhY2tzbGFzaGVzIGJlZm9yZSB0aGVtLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHsnLmEnOiB7J1tiXSc6ICd4J319KS50by5oYXZlLm5lc3RlZC5wcm9wZXJ0eSgnXFxcXC5hLlxcXFxbYlxcXFxdJyk7XG4gICAqXG4gICAqIGAuZGVlcGAgYW5kIGAubmVzdGVkYCBjYW4gYmUgY29tYmluZWQuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IHtiOiBbe2M6IDN9XX19KVxuICAgKiAgICAgICAudG8uaGF2ZS5kZWVwLm5lc3RlZC5wcm9wZXJ0eSgnYS5iWzBdJywge2M6IDN9KTtcbiAgICpcbiAgICogYC5vd25gIGFuZCBgLm5lc3RlZGAgY2Fubm90IGJlIGNvbWJpbmVkLlxuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLnByb3BlcnR5YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5oYXZlLnByb3BlcnR5KCdiJyk7XG4gICAqIFxuICAgKiBIb3dldmVyLCBpdCdzIGRhbmdlcm91cyB0byBuZWdhdGUgYC5wcm9wZXJ0eWAgd2hlbiBwcm92aWRpbmcgYHZhbGAuIFRoZVxuICAgKiBwcm9ibGVtIGlzIHRoYXQgaXQgY3JlYXRlcyB1bmNlcnRhaW4gZXhwZWN0YXRpb25zIGJ5IGFzc2VydGluZyB0aGF0IHRoZVxuICAgKiB0YXJnZXQgZWl0aGVyIGRvZXNuJ3QgaGF2ZSBhIHByb3BlcnR5IHdpdGggdGhlIGdpdmVuIGtleSBgbmFtZWAsIG9yIHRoYXQgaXRcbiAgICogZG9lcyBoYXZlIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4ga2V5IGBuYW1lYCBidXQgaXRzIHZhbHVlIGlzbid0IGVxdWFsIHRvXG4gICAqIHRoZSBnaXZlbiBgdmFsYC4gSXQncyBvZnRlbiBiZXN0IHRvIGlkZW50aWZ5IHRoZSBleGFjdCBvdXRwdXQgdGhhdCdzXG4gICAqIGV4cGVjdGVkLCBhbmQgdGhlbiB3cml0ZSBhbiBhc3NlcnRpb24gdGhhdCBvbmx5IGFjY2VwdHMgdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpc24ndCBleHBlY3RlZCB0byBoYXZlIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4ga2V5XG4gICAqIGBuYW1lYCwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2I6IDJ9KS50by5ub3QuaGF2ZS5wcm9wZXJ0eSgnYScpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHtiOiAyfSkudG8ubm90LmhhdmUucHJvcGVydHkoJ2EnLCAxKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBleHBlY3RlZCB0byBoYXZlIGEgcHJvcGVydHkgd2l0aCB0aGUgZ2l2ZW4ga2V5IGBuYW1lYCxcbiAgICogaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSBwcm9wZXJ0eSBoYXMgaXRzIGV4cGVjdGVkIHZhbHVlLCByYXRoZXJcbiAgICogdGhhbiBhc3NlcnRpbmcgdGhhdCBpdCBkb2Vzbid0IGhhdmUgb25lIG9mIG1hbnkgdW5leHBlY3RlZCB2YWx1ZXMuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDN9KS50by5oYXZlLnByb3BlcnR5KCdhJywgMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDN9KS50by5ub3QuaGF2ZS5wcm9wZXJ0eSgnYScsIDEpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5wcm9wZXJ0eWAgY2hhbmdlcyB0aGUgdGFyZ2V0IG9mIGFueSBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpblxuICAgKiB0byBiZSB0aGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5IGZyb20gdGhlIG9yaWdpbmFsIHRhcmdldCBvYmplY3QuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLnByb3BlcnR5KCdhJykudGhhdC5pcy5hKCdudW1iZXInKTtcbiAgICpcbiAgICogYC5wcm9wZXJ0eWAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLiBXaGVuIG5vdCBwcm92aWRpbmcgYHZhbGAsIG9ubHkgdXNlIHRoZVxuICAgKiBzZWNvbmQgZm9ybS5cbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLnByb3BlcnR5KCdhJywgMiwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KHthOiAxfSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmhhdmUucHJvcGVydHkoJ2EnLCAyKTtcbiAgICogICAgIGV4cGVjdCh7YTogMX0sICdub29vIHdoeSBmYWlsPz8nKS50by5oYXZlLnByb3BlcnR5KCdiJyk7XG4gICAqXG4gICAqICAgICAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUucHJvcGVydHkoJ2InLCB1bmRlZmluZWQsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogXG4gICAqIFRoZSBhYm92ZSBhc3NlcnRpb24gaXNuJ3QgdGhlIHNhbWUgdGhpbmcgYXMgbm90IHByb3ZpZGluZyBgdmFsYC4gSW5zdGVhZCxcbiAgICogaXQncyBhc3NlcnRpbmcgdGhhdCB0aGUgdGFyZ2V0IG9iamVjdCBoYXMgYSBgYmAgcHJvcGVydHkgdGhhdCdzIGVxdWFsIHRvXG4gICAqIGB1bmRlZmluZWRgLlxuICAgKlxuICAgKiBUaGUgYXNzZXJ0aW9ucyBgLm93blByb3BlcnR5YCBhbmQgYC5oYXZlT3duUHJvcGVydHlgIGNhbiBiZSB1c2VkXG4gICAqIGludGVyY2hhbmdlYWJseSB3aXRoIGAub3duLnByb3BlcnR5YC5cbiAgICpcbiAgICogQG5hbWUgcHJvcGVydHlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsIChvcHRpb25hbClcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEByZXR1cm5zIHZhbHVlIG9mIHByb3BlcnR5IGZvciBjaGFpbmluZ1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRQcm9wZXJ0eSAobmFtZSwgdmFsLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcblxuICAgIHZhciBpc05lc3RlZCA9IGZsYWcodGhpcywgJ25lc3RlZCcpXG4gICAgICAsIGlzT3duID0gZmxhZyh0aGlzLCAnb3duJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuXG4gICAgaWYgKGlzTmVzdGVkICYmIGlzT3duKSB7XG4gICAgICBmbGFnTXNnID0gZmxhZ01zZyA/IGZsYWdNc2cgKyAnOiAnIDogJyc7XG4gICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgIGZsYWdNc2cgKyAnVGhlIFwibmVzdGVkXCIgYW5kIFwib3duXCIgZmxhZ3MgY2Fubm90IGJlIGNvbWJpbmVkLicsXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgc3NmaVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmbGFnTXNnID0gZmxhZ01zZyA/IGZsYWdNc2cgKyAnOiAnIDogJyc7XG4gICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgIGZsYWdNc2cgKyAnVGFyZ2V0IGNhbm5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4nLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHNzZmlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIGlzRGVlcCA9IGZsYWcodGhpcywgJ2RlZXAnKVxuICAgICAgLCBuZWdhdGUgPSBmbGFnKHRoaXMsICduZWdhdGUnKVxuICAgICAgLCBwYXRoSW5mbyA9IGlzTmVzdGVkID8gXy5nZXRQYXRoSW5mbyhvYmosIG5hbWUpIDogbnVsbFxuICAgICAgLCB2YWx1ZSA9IGlzTmVzdGVkID8gcGF0aEluZm8udmFsdWUgOiBvYmpbbmFtZV07XG5cbiAgICB2YXIgZGVzY3JpcHRvciA9ICcnO1xuICAgIGlmIChpc0RlZXApIGRlc2NyaXB0b3IgKz0gJ2RlZXAgJztcbiAgICBpZiAoaXNPd24pIGRlc2NyaXB0b3IgKz0gJ293biAnO1xuICAgIGlmIChpc05lc3RlZCkgZGVzY3JpcHRvciArPSAnbmVzdGVkICc7XG4gICAgZGVzY3JpcHRvciArPSAncHJvcGVydHkgJztcblxuICAgIHZhciBoYXNQcm9wZXJ0eTtcbiAgICBpZiAoaXNPd24pIGhhc1Byb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgbmFtZSk7XG4gICAgZWxzZSBpZiAoaXNOZXN0ZWQpIGhhc1Byb3BlcnR5ID0gcGF0aEluZm8uZXhpc3RzO1xuICAgIGVsc2UgaGFzUHJvcGVydHkgPSBfLmhhc1Byb3BlcnR5KG9iaiwgbmFtZSk7XG5cbiAgICAvLyBXaGVuIHBlcmZvcm1pbmcgYSBuZWdhdGVkIGFzc2VydGlvbiBmb3IgYm90aCBuYW1lIGFuZCB2YWwsIG1lcmVseSBoYXZpbmdcbiAgICAvLyBhIHByb3BlcnR5IHdpdGggdGhlIGdpdmVuIG5hbWUgaXNuJ3QgZW5vdWdoIHRvIGNhdXNlIHRoZSBhc3NlcnRpb24gdG9cbiAgICAvLyBmYWlsLiBJdCBtdXN0IGJvdGggaGF2ZSBhIHByb3BlcnR5IHdpdGggdGhlIGdpdmVuIG5hbWUsIGFuZCB0aGUgdmFsdWUgb2ZcbiAgICAvLyB0aGF0IHByb3BlcnR5IG11c3QgZXF1YWwgdGhlIGdpdmVuIHZhbC4gVGhlcmVmb3JlLCBza2lwIHRoaXMgYXNzZXJ0aW9uIGluXG4gICAgLy8gZmF2b3Igb2YgdGhlIG5leHQuXG4gICAgaWYgKCFuZWdhdGUgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgaGFzUHJvcGVydHlcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlICcgKyBkZXNjcmlwdG9yICsgXy5pbnNwZWN0KG5hbWUpXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGhhdmUgJyArIGRlc2NyaXB0b3IgKyBfLmluc3BlY3QobmFtZSkpO1xuICAgIH1cblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgaGFzUHJvcGVydHkgJiYgKGlzRGVlcCA/IF8uZXFsKHZhbCwgdmFsdWUpIDogdmFsID09PSB2YWx1ZSlcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlICcgKyBkZXNjcmlwdG9yICsgXy5pbnNwZWN0KG5hbWUpICsgJyBvZiAje2V4cH0sIGJ1dCBnb3QgI3thY3R9J1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBoYXZlICcgKyBkZXNjcmlwdG9yICsgXy5pbnNwZWN0KG5hbWUpICsgJyBvZiAje2FjdH0nXG4gICAgICAgICwgdmFsXG4gICAgICAgICwgdmFsdWVcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZmxhZyh0aGlzLCAnb2JqZWN0JywgdmFsdWUpO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgncHJvcGVydHknLCBhc3NlcnRQcm9wZXJ0eSk7XG5cbiAgZnVuY3Rpb24gYXNzZXJ0T3duUHJvcGVydHkgKG5hbWUsIHZhbHVlLCBtc2cpIHtcbiAgICBmbGFnKHRoaXMsICdvd24nLCB0cnVlKTtcbiAgICBhc3NlcnRQcm9wZXJ0eS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnb3duUHJvcGVydHknLCBhc3NlcnRPd25Qcm9wZXJ0eSk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2hhdmVPd25Qcm9wZXJ0eScsIGFzc2VydE93blByb3BlcnR5KTtcblxuICAvKipcbiAgICogIyMjIC5vd25Qcm9wZXJ0eURlc2NyaXB0b3IobmFtZVssIGRlc2NyaXB0b3JbLCBtc2ddXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaGFzIGl0cyBvd24gcHJvcGVydHkgZGVzY3JpcHRvciB3aXRoIHRoZSBnaXZlbiBrZXlcbiAgICogYG5hbWVgLiBFbnVtZXJhYmxlIGFuZCBub24tZW51bWVyYWJsZSBwcm9wZXJ0aWVzIGFyZSBpbmNsdWRlZCBpbiB0aGVcbiAgICogc2VhcmNoLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2EnKTtcbiAgICpcbiAgICogV2hlbiBgZGVzY3JpcHRvcmAgaXMgcHJvdmlkZWQsIGAub3duUHJvcGVydHlEZXNjcmlwdG9yYCBhbHNvIGFzc2VydHMgdGhhdFxuICAgKiB0aGUgcHJvcGVydHkncyBkZXNjcmlwdG9yIGlzIGRlZXBseSBlcXVhbCB0byB0aGUgZ2l2ZW4gYGRlc2NyaXB0b3JgLiBTZWVcbiAgICogdGhlIGBkZWVwLWVxbGAgcHJvamVjdCBwYWdlIGZvciBpbmZvIG9uIHRoZSBkZWVwIGVxdWFsaXR5IGFsZ29yaXRobTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy9kZWVwLWVxbC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdhJywge1xuICAgKiAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAqICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAqICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgKiAgICAgICB2YWx1ZTogMSxcbiAgICogICAgIH0pO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLm93blByb3BlcnR5RGVzY3JpcHRvcmAuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5ub3QuaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2InKTtcbiAgICogXG4gICAqIEhvd2V2ZXIsIGl0J3MgZGFuZ2Vyb3VzIHRvIG5lZ2F0ZSBgLm93blByb3BlcnR5RGVzY3JpcHRvcmAgd2hlbiBwcm92aWRpbmdcbiAgICogYSBgZGVzY3JpcHRvcmAuIFRoZSBwcm9ibGVtIGlzIHRoYXQgaXQgY3JlYXRlcyB1bmNlcnRhaW4gZXhwZWN0YXRpb25zIGJ5XG4gICAqIGFzc2VydGluZyB0aGF0IHRoZSB0YXJnZXQgZWl0aGVyIGRvZXNuJ3QgaGF2ZSBhIHByb3BlcnR5IGRlc2NyaXB0b3Igd2l0aFxuICAgKiB0aGUgZ2l2ZW4ga2V5IGBuYW1lYCwgb3IgdGhhdCBpdCBkb2VzIGhhdmUgYSBwcm9wZXJ0eSBkZXNjcmlwdG9yIHdpdGggdGhlXG4gICAqIGdpdmVuIGtleSBgbmFtZWAgYnV0IGl0cyBub3QgZGVlcGx5IGVxdWFsIHRvIHRoZSBnaXZlbiBgZGVzY3JpcHRvcmAuIEl0J3NcbiAgICogb2Z0ZW4gYmVzdCB0byBpZGVudGlmeSB0aGUgZXhhY3Qgb3V0cHV0IHRoYXQncyBleHBlY3RlZCwgYW5kIHRoZW4gd3JpdGUgYW5cbiAgICogYXNzZXJ0aW9uIHRoYXQgb25seSBhY2NlcHRzIHRoYXQgZXhhY3Qgb3V0cHV0LlxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXNuJ3QgZXhwZWN0ZWQgdG8gaGF2ZSBhIHByb3BlcnR5IGRlc2NyaXB0b3Igd2l0aCB0aGUgZ2l2ZW5cbiAgICoga2V5IGBuYW1lYCwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHtiOiAyfSkudG8ubm90LmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdhJyk7XG4gICAqXG4gICAqICAgICAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YjogMn0pLnRvLm5vdC5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYScsIHtcbiAgICogICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgKiAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgKiAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICogICAgICAgdmFsdWU6IDEsXG4gICAqICAgICB9KTtcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGV4cGVjdGVkIHRvIGhhdmUgYSBwcm9wZXJ0eSBkZXNjcmlwdG9yIHdpdGggdGhlIGdpdmVuXG4gICAqIGtleSBgbmFtZWAsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgcHJvcGVydHkgaGFzIGl0cyBleHBlY3RlZFxuICAgKiBkZXNjcmlwdG9yLCByYXRoZXIgdGhhbiBhc3NlcnRpbmcgdGhhdCBpdCBkb2Vzbid0IGhhdmUgb25lIG9mIG1hbnlcbiAgICogdW5leHBlY3RlZCBkZXNjcmlwdG9ycy5cbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDN9KS50by5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYScsIHtcbiAgICogICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgKiAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgKiAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICogICAgICAgdmFsdWU6IDMsXG4gICAqICAgICB9KTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHthOiAzfSkudG8ubm90LmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdhJywge1xuICAgKiAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAqICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAqICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgKiAgICAgICB2YWx1ZTogMSxcbiAgICogICAgIH0pO1xuICAgKlxuICAgKiBgLm93blByb3BlcnR5RGVzY3JpcHRvcmAgY2hhbmdlcyB0aGUgdGFyZ2V0IG9mIGFueSBhc3NlcnRpb25zIHRoYXQgZm9sbG93XG4gICAqIGluIHRoZSBjaGFpbiB0byBiZSB0aGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgZnJvbSB0aGUgb3JpZ2luYWxcbiAgICogdGFyZ2V0IG9iamVjdC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdhJylcbiAgICogICAgICAgLnRoYXQuaGFzLnByb3BlcnR5KCdlbnVtZXJhYmxlJywgdHJ1ZSk7XG4gICAqXG4gICAqIGAub3duUHJvcGVydHlEZXNjcmlwdG9yYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGFcbiAgICogY3VzdG9tIGVycm9yIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvXG4gICAqIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuIFdoZW4gbm90IHByb3ZpZGluZ1xuICAgKiBgZGVzY3JpcHRvcmAsIG9ubHkgdXNlIHRoZSBzZWNvbmQgZm9ybS5cbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5oYXZlLm93blByb3BlcnR5RGVzY3JpcHRvcignYScsIHtcbiAgICogICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgKiAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgKiAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICogICAgICAgdmFsdWU6IDIsXG4gICAqICAgICB9LCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdhJywge1xuICAgKiAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAqICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAqICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgKiAgICAgICB2YWx1ZTogMixcbiAgICogICAgIH0pO1xuICAgKiBcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoe2E6IDF9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaGF2ZS5vd25Qcm9wZXJ0eURlc2NyaXB0b3IoJ2InKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSlcbiAgICogICAgICAgLnRvLmhhdmUub3duUHJvcGVydHlEZXNjcmlwdG9yKCdiJywgdW5kZWZpbmVkLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqXG4gICAqIFRoZSBhYm92ZSBhc3NlcnRpb24gaXNuJ3QgdGhlIHNhbWUgdGhpbmcgYXMgbm90IHByb3ZpZGluZyBgZGVzY3JpcHRvcmAuXG4gICAqIEluc3RlYWQsIGl0J3MgYXNzZXJ0aW5nIHRoYXQgdGhlIHRhcmdldCBvYmplY3QgaGFzIGEgYGJgIHByb3BlcnR5XG4gICAqIGRlc2NyaXB0b3IgdGhhdCdzIGRlZXBseSBlcXVhbCB0byBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogVGhlIGFsaWFzIGAuaGF2ZU93blByb3BlcnR5RGVzY3JpcHRvcmAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGhcbiAgICogYC5vd25Qcm9wZXJ0eURlc2NyaXB0b3JgLlxuICAgKlxuICAgKiBAbmFtZSBvd25Qcm9wZXJ0eURlc2NyaXB0b3JcbiAgICogQGFsaWFzIGhhdmVPd25Qcm9wZXJ0eURlc2NyaXB0b3JcbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtPYmplY3R9IGRlc2NyaXB0b3IgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0T3duUHJvcGVydHlEZXNjcmlwdG9yIChuYW1lLCBkZXNjcmlwdG9yLCBtc2cpIHtcbiAgICBpZiAodHlwZW9mIGRlc2NyaXB0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICBtc2cgPSBkZXNjcmlwdG9yO1xuICAgICAgZGVzY3JpcHRvciA9IG51bGw7XG4gICAgfVxuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcbiAgICB2YXIgYWN0dWFsRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0KG9iaiksIG5hbWUpO1xuICAgIGlmIChhY3R1YWxEZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IpIHtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIF8uZXFsKGRlc2NyaXB0b3IsIGFjdHVhbERlc2NyaXB0b3IpXG4gICAgICAgICwgJ2V4cGVjdGVkIHRoZSBvd24gcHJvcGVydHkgZGVzY3JpcHRvciBmb3IgJyArIF8uaW5zcGVjdChuYW1lKSArICcgb24gI3t0aGlzfSB0byBtYXRjaCAnICsgXy5pbnNwZWN0KGRlc2NyaXB0b3IpICsgJywgZ290ICcgKyBfLmluc3BlY3QoYWN0dWFsRGVzY3JpcHRvcilcbiAgICAgICAgLCAnZXhwZWN0ZWQgdGhlIG93biBwcm9wZXJ0eSBkZXNjcmlwdG9yIGZvciAnICsgXy5pbnNwZWN0KG5hbWUpICsgJyBvbiAje3RoaXN9IHRvIG5vdCBtYXRjaCAnICsgXy5pbnNwZWN0KGRlc2NyaXB0b3IpXG4gICAgICAgICwgZGVzY3JpcHRvclxuICAgICAgICAsIGFjdHVhbERlc2NyaXB0b3JcbiAgICAgICAgLCB0cnVlXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBhY3R1YWxEZXNjcmlwdG9yXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSBhbiBvd24gcHJvcGVydHkgZGVzY3JpcHRvciBmb3IgJyArIF8uaW5zcGVjdChuYW1lKVxuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBoYXZlIGFuIG93biBwcm9wZXJ0eSBkZXNjcmlwdG9yIGZvciAnICsgXy5pbnNwZWN0KG5hbWUpXG4gICAgICApO1xuICAgIH1cbiAgICBmbGFnKHRoaXMsICdvYmplY3QnLCBhY3R1YWxEZXNjcmlwdG9yKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ293blByb3BlcnR5RGVzY3JpcHRvcicsIGFzc2VydE93blByb3BlcnR5RGVzY3JpcHRvcik7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2hhdmVPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBhc3NlcnRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpO1xuXG4gIC8qKlxuICAgKiAjIyMgLmxlbmd0aE9mKG5bLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCdzIGBsZW5ndGhgIHByb3BlcnR5IGlzIGVxdWFsIHRvIHRoZSBnaXZlbiBudW1iZXJcbiAgICogYG5gLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZigzKTtcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uaGF2ZS5sZW5ndGhPZigzKTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5sZW5ndGhPZmAuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgaXMgZXF1YWwgdG8gaXRzIGV4cGVjdGVkXG4gICAqIHZhbHVlLCByYXRoZXIgdGhhbiBub3QgZXF1YWwgdG8gb25lIG9mIG1hbnkgdW5leHBlY3RlZCB2YWx1ZXMuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLmhhdmUubGVuZ3RoT2YoMyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLm5vdC5oYXZlLmxlbmd0aE9mKDQpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5sZW5ndGhPZmAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZigyLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaGF2ZS5sZW5ndGhPZigyKTtcbiAgICpcbiAgICogYC5sZW5ndGhPZmAgY2FuIGFsc28gYmUgdXNlZCBhcyBhIGxhbmd1YWdlIGNoYWluLCBjYXVzaW5nIGFsbCBgLmFib3ZlYCxcbiAgICogYC5iZWxvd2AsIGAubGVhc3RgLCBgLm1vc3RgLCBhbmQgYC53aXRoaW5gIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlXG4gICAqIGNoYWluIHRvIHVzZSB0aGUgdGFyZ2V0J3MgYGxlbmd0aGAgcHJvcGVydHkgYXMgdGhlIHRhcmdldC4gSG93ZXZlciwgaXQnc1xuICAgKiBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQncyBgbGVuZ3RoYCBwcm9wZXJ0eSBpcyBlcXVhbCB0byBpdHNcbiAgICogZXhwZWN0ZWQgbGVuZ3RoLCByYXRoZXIgdGhhbiBhc3NlcnRpbmcgdGhhdCBpdHMgYGxlbmd0aGAgcHJvcGVydHkgZmFsbHNcbiAgICogd2l0aGluIHNvbWUgcmFuZ2Ugb2YgdmFsdWVzLlxuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YoMyk7XG4gICAqXG4gICAqICAgICAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YuYWJvdmUoMik7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmxlbmd0aE9mLmJlbG93KDQpO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5sZW5ndGhPZi5hdC5sZWFzdCgzKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2YuYXQubW9zdCgzKTtcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubGVuZ3RoT2Yud2l0aGluKDIsNCk7XG4gICAqXG4gICAqIER1ZSB0byBhIGNvbXBhdGliaWxpdHkgaXNzdWUsIHRoZSBhbGlhcyBgLmxlbmd0aGAgY2FuJ3QgYmUgY2hhaW5lZCBkaXJlY3RseVxuICAgKiBvZmYgb2YgYW4gdW5pbnZva2VkIG1ldGhvZCBzdWNoIGFzIGAuYWAuIFRoZXJlZm9yZSwgYC5sZW5ndGhgIGNhbid0IGJlIHVzZWRcbiAgICogaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5sZW5ndGhPZmAgaW4gZXZlcnkgc2l0dWF0aW9uLiBJdCdzIHJlY29tbWVuZGVkIHRvXG4gICAqIGFsd2F5cyB1c2UgYC5sZW5ndGhPZmAgaW5zdGVhZCBvZiBgLmxlbmd0aGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLmEubGVuZ3RoKDMpOyAvLyBpbmNvbXBhdGlibGU7IHRocm93cyBlcnJvclxuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8uaGF2ZS5hLmxlbmd0aE9mKDMpOyAgLy8gcGFzc2VzIGFzIGV4cGVjdGVkXG4gICAqXG4gICAqIEBuYW1lIGxlbmd0aE9mXG4gICAqIEBhbGlhcyBsZW5ndGhcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGFzc2VydExlbmd0aENoYWluICgpIHtcbiAgICBmbGFnKHRoaXMsICdkb0xlbmd0aCcsIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0TGVuZ3RoIChuLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KCdsZW5ndGgnKTtcbiAgICB2YXIgbGVuID0gb2JqLmxlbmd0aDtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBsZW4gPT0gblxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBoYXZlIGEgbGVuZ3RoIG9mICN7ZXhwfSBidXQgZ290ICN7YWN0fSdcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGhhdmUgYSBsZW5ndGggb2YgI3thY3R9J1xuICAgICAgLCBuXG4gICAgICAsIGxlblxuICAgICk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdsZW5ndGgnLCBhc3NlcnRMZW5ndGgsIGFzc2VydExlbmd0aENoYWluKTtcbiAgQXNzZXJ0aW9uLmFkZENoYWluYWJsZU1ldGhvZCgnbGVuZ3RoT2YnLCBhc3NlcnRMZW5ndGgsIGFzc2VydExlbmd0aENoYWluKTtcblxuICAvKipcbiAgICogIyMjIC5tYXRjaChyZVssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IG1hdGNoZXMgdGhlIGdpdmVuIHJlZ3VsYXIgZXhwcmVzc2lvbiBgcmVgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb29iYXInKS50by5tYXRjaCgvXmZvby8pO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLm1hdGNoYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vYmFyJykudG8ubm90Lm1hdGNoKC90YWNvLyk7XG4gICAqXG4gICAqIGAubWF0Y2hgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZVxuICAgKiB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlXG4gICAqIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vYmFyJykudG8ubWF0Y2goL3RhY28vLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoJ2Zvb2JhcicsICdub29vIHdoeSBmYWlsPz8nKS50by5tYXRjaCgvdGFjby8pO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5tYXRjaGVzYCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aCBgLm1hdGNoYC5cbiAgICpcbiAgICogQG5hbWUgbWF0Y2hcbiAgICogQGFsaWFzIG1hdGNoZXNcbiAgICogQHBhcmFtIHtSZWdFeHB9IHJlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgZnVuY3Rpb24gYXNzZXJ0TWF0Y2gocmUsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgcmUuZXhlYyhvYmopXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG1hdGNoICcgKyByZVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSBub3QgdG8gbWF0Y2ggJyArIHJlXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ21hdGNoJywgYXNzZXJ0TWF0Y2gpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdtYXRjaGVzJywgYXNzZXJ0TWF0Y2gpO1xuXG4gIC8qKlxuICAgKiAjIyMgLnN0cmluZyhzdHJbLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBzdHJpbmcgY29udGFpbnMgdGhlIGdpdmVuIHN1YnN0cmluZyBgc3RyYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vYmFyJykudG8uaGF2ZS5zdHJpbmcoJ2JhcicpO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLnN0cmluZ2AuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2Zvb2JhcicpLnRvLm5vdC5oYXZlLnN0cmluZygndGFjbycpO1xuICAgKlxuICAgKiBgLnN0cmluZ2AgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KCdmb29iYXInKS50by5oYXZlLnN0cmluZygvdGFjby8sICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICogICAgIGV4cGVjdCgnZm9vYmFyJywgJ25vb28gd2h5IGZhaWw/PycpLnRvLmhhdmUuc3RyaW5nKC90YWNvLyk7XG4gICAqXG4gICAqIEBuYW1lIHN0cmluZ1xuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdzdHJpbmcnLCBmdW5jdGlvbiAoc3RyLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdzdHJpbmcnKTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICB+b2JqLmluZGV4T2Yoc3RyKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBjb250YWluICcgKyBfLmluc3BlY3Qoc3RyKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgY29udGFpbiAnICsgXy5pbnNwZWN0KHN0cilcbiAgICApO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5rZXlzKGtleTFbLCBrZXkyWywgLi4uXV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IG9iamVjdCwgYXJyYXksIG1hcCwgb3Igc2V0IGhhcyB0aGUgZ2l2ZW4ga2V5cy4gT25seVxuICAgKiB0aGUgdGFyZ2V0J3Mgb3duIGluaGVyaXRlZCBwcm9wZXJ0aWVzIGFyZSBpbmNsdWRlZCBpbiB0aGUgc2VhcmNoLiBcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGFuIG9iamVjdCBvciBhcnJheSwga2V5cyBjYW4gYmUgcHJvdmlkZWQgYXMgb25lIG9yIG1vcmVcbiAgICogc3RyaW5nIGFyZ3VtZW50cywgYSBzaW5nbGUgYXJyYXkgYXJndW1lbnQsIG9yIGEgc2luZ2xlIG9iamVjdCBhcmd1bWVudC4gSW5cbiAgICogdGhlIGxhdHRlciBjYXNlLCBvbmx5IHRoZSBrZXlzIGluIHRoZSBnaXZlbiBvYmplY3QgbWF0dGVyOyB0aGUgdmFsdWVzIGFyZVxuICAgKiBpZ25vcmVkLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyfSkudG8uaGF2ZS5hbGwua2V5cygnYScsICdiJyk7XG4gICAqICAgICBleHBlY3QoWyd4JywgJ3knXSkudG8uaGF2ZS5hbGwua2V5cygwLCAxKTtcbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmhhdmUuYWxsLmtleXMoWydhJywgJ2InXSk7XG4gICAqICAgICBleHBlY3QoWyd4JywgJ3knXSkudG8uaGF2ZS5hbGwua2V5cyhbMCwgMV0pO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KHthOiAxLCBiOiAyfSkudG8uaGF2ZS5hbGwua2V5cyh7YTogNCwgYjogNX0pOyAvLyBpZ25vcmUgNCBhbmQgNVxuICAgKiAgICAgZXhwZWN0KFsneCcsICd5J10pLnRvLmhhdmUuYWxsLmtleXMoezA6IDQsIDE6IDV9KTsgLy8gaWdub3JlIDQgYW5kIDVcbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzIGEgbWFwIG9yIHNldCwgZWFjaCBrZXkgbXVzdCBiZSBwcm92aWRlZCBhcyBhIHNlcGFyYXRlXG4gICAqIGFyZ3VtZW50LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KG5ldyBNYXAoW1snYScsIDFdLCBbJ2InLCAyXV0pKS50by5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICogICAgIGV4cGVjdChuZXcgU2V0KFsnYScsICdiJ10pKS50by5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogQmVjYXVzZSBgLmtleXNgIGRvZXMgZGlmZmVyZW50IHRoaW5ncyBiYXNlZCBvbiB0aGUgdGFyZ2V0J3MgdHlwZSwgaXQnc1xuICAgKiBpbXBvcnRhbnQgdG8gY2hlY2sgdGhlIHRhcmdldCdzIHR5cGUgYmVmb3JlIHVzaW5nIGAua2V5c2AuIFNlZSB0aGUgYC5hYCBkb2NcbiAgICogZm9yIGluZm8gb24gdGVzdGluZyBhIHRhcmdldCdzIHR5cGUuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5iZS5hbignb2JqZWN0JykudGhhdC5oYXMuYWxsLmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBzdHJpY3QgKGA9PT1gKSBlcXVhbGl0eSBpcyB1c2VkIHRvIGNvbXBhcmUga2V5cyBvZiBtYXBzIGFuZFxuICAgKiBzZXRzLiBBZGQgYC5kZWVwYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byB1c2UgZGVlcCBlcXVhbGl0eSBpbnN0ZWFkLiBTZWVcbiAgICogdGhlIGBkZWVwLWVxbGAgcHJvamVjdCBwYWdlIGZvciBpbmZvIG9uIHRoZSBkZWVwIGVxdWFsaXR5IGFsZ29yaXRobTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy9kZWVwLWVxbC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBzZXQgZGVlcGx5IChidXQgbm90IHN0cmljdGx5KSBoYXMga2V5IGB7YTogMX1gXG4gICAqICAgICBleHBlY3QobmV3IFNldChbe2E6IDF9XSkpLnRvLmhhdmUuYWxsLmRlZXAua2V5cyhbe2E6IDF9XSk7XG4gICAqICAgICBleHBlY3QobmV3IFNldChbe2E6IDF9XSkpLnRvLm5vdC5oYXZlLmFsbC5rZXlzKFt7YTogMX1dKTtcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhlIHRhcmdldCBtdXN0IGhhdmUgYWxsIG9mIHRoZSBnaXZlbiBrZXlzIGFuZCBubyBtb3JlLiBBZGRcbiAgICogYC5hbnlgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG9ubHkgcmVxdWlyZSB0aGF0IHRoZSB0YXJnZXQgaGF2ZSBhdCBsZWFzdFxuICAgKiBvbmUgb2YgdGhlIGdpdmVuIGtleXMuIEFsc28sIGFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlXG4gICAqIGAua2V5c2AuIEl0J3Mgb2Z0ZW4gYmVzdCB0byBhZGQgYC5hbnlgIHdoZW4gbmVnYXRpbmcgYC5rZXlzYCwgYW5kIHRvIHVzZVxuICAgKiBgLmFsbGAgd2hlbiBhc3NlcnRpbmcgYC5rZXlzYCB3aXRob3V0IG5lZ2F0aW9uLlxuICAgKlxuICAgKiBXaGVuIG5lZ2F0aW5nIGAua2V5c2AsIGAuYW55YCBpcyBwcmVmZXJyZWQgYmVjYXVzZSBgLm5vdC5hbnkua2V5c2AgYXNzZXJ0c1xuICAgKiBleGFjdGx5IHdoYXQncyBleHBlY3RlZCBvZiB0aGUgb3V0cHV0LCB3aGVyZWFzIGAubm90LmFsbC5rZXlzYCBjcmVhdGVzXG4gICAqIHVuY2VydGFpbiBleHBlY3RhdGlvbnMuXG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZDsgYXNzZXJ0cyB0aGF0IHRhcmdldCBkb2Vzbid0IGhhdmUgYW55IG9mIHRoZSBnaXZlbiBrZXlzXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5ub3QuaGF2ZS5hbnkua2V5cygnYycsICdkJyk7XG4gICAqXG4gICAqICAgICAvLyBOb3QgcmVjb21tZW5kZWQ7IGFzc2VydHMgdGhhdCB0YXJnZXQgZG9lc24ndCBoYXZlIGFsbCBvZiB0aGUgZ2l2ZW5cbiAgICogICAgIC8vIGtleXMgYnV0IG1heSBvciBtYXkgbm90IGhhdmUgc29tZSBvZiB0aGVtXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5ub3QuaGF2ZS5hbGwua2V5cygnYycsICdkJyk7XG4gICAqXG4gICAqIFdoZW4gYXNzZXJ0aW5nIGAua2V5c2Agd2l0aG91dCBuZWdhdGlvbiwgYC5hbGxgIGlzIHByZWZlcnJlZCBiZWNhdXNlXG4gICAqIGAuYWxsLmtleXNgIGFzc2VydHMgZXhhY3RseSB3aGF0J3MgZXhwZWN0ZWQgb2YgdGhlIG91dHB1dCwgd2hlcmVhc1xuICAgKiBgLmFueS5rZXlzYCBjcmVhdGVzIHVuY2VydGFpbiBleHBlY3RhdGlvbnMuXG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZDsgYXNzZXJ0cyB0aGF0IHRhcmdldCBoYXMgYWxsIHRoZSBnaXZlbiBrZXlzXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZDsgYXNzZXJ0cyB0aGF0IHRhcmdldCBoYXMgYXQgbGVhc3Qgb25lIG9mIHRoZSBnaXZlblxuICAgKiAgICAgLy8ga2V5cyBidXQgbWF5IG9yIG1heSBub3QgaGF2ZSBtb3JlIG9mIHRoZW1cbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmhhdmUuYW55LmtleXMoJ2EnLCAnYicpO1xuICAgKlxuICAgKiBOb3RlIHRoYXQgYC5hbGxgIGlzIHVzZWQgYnkgZGVmYXVsdCB3aGVuIG5laXRoZXIgYC5hbGxgIG5vciBgLmFueWAgYXBwZWFyXG4gICAqIGVhcmxpZXIgaW4gdGhlIGNoYWluLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3QgdG8gYWRkIGAuYWxsYCBhbnl3YXkgYmVjYXVzZVxuICAgKiBpdCBpbXByb3ZlcyByZWFkYWJpbGl0eS5cbiAgICpcbiAgICogICAgIC8vIEJvdGggYXNzZXJ0aW9ucyBhcmUgaWRlbnRpY2FsXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDJ9KS50by5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMn0pLnRvLmhhdmUua2V5cygnYScsICdiJyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBBZGQgYC5pbmNsdWRlYCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byByZXF1aXJlIHRoYXQgdGhlIHRhcmdldCdzIGtleXMgYmUgYVxuICAgKiBzdXBlcnNldCBvZiB0aGUgZXhwZWN0ZWQga2V5cywgcmF0aGVyIHRoYW4gaWRlbnRpY2FsIHNldHMuXG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgb2JqZWN0J3Mga2V5cyBhcmUgYSBzdXBlcnNldCBvZiBbJ2EnLCAnYiddIGJ1dCBub3QgaWRlbnRpY2FsXG4gICAqICAgICBleHBlY3Qoe2E6IDEsIGI6IDIsIGM6IDN9KS50by5pbmNsdWRlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICogICAgIGV4cGVjdCh7YTogMSwgYjogMiwgYzogM30pLnRvLm5vdC5oYXZlLmFsbC5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogSG93ZXZlciwgaWYgYC5hbnlgIGFuZCBgLmluY2x1ZGVgIGFyZSBjb21iaW5lZCwgb25seSB0aGUgYC5hbnlgIHRha2VzXG4gICAqIGVmZmVjdC4gVGhlIGAuaW5jbHVkZWAgaXMgaWdub3JlZCBpbiB0aGlzIGNhc2UuXG4gICAqXG4gICAqICAgICAvLyBCb3RoIGFzc2VydGlvbnMgYXJlIGlkZW50aWNhbFxuICAgKiAgICAgZXhwZWN0KHthOiAxfSkudG8uaGF2ZS5hbnkua2V5cygnYScsICdiJyk7XG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5pbmNsdWRlLmFueS5rZXlzKCdhJywgJ2InKTtcbiAgICpcbiAgICogQSBjdXN0b20gZXJyb3IgbWVzc2FnZSBjYW4gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0sICdub29vIHdoeSBmYWlsPz8nKS50by5oYXZlLmtleSgnYicpO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5rZXlgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAua2V5c2AuXG4gICAqXG4gICAqIEBuYW1lIGtleXNcbiAgICogQGFsaWFzIGtleVxuICAgKiBAcGFyYW0gey4uLlN0cmluZ3xBcnJheXxPYmplY3R9IGtleXNcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0S2V5cyAoa2V5cykge1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBvYmpUeXBlID0gXy50eXBlKG9iailcbiAgICAgICwga2V5c1R5cGUgPSBfLnR5cGUoa2V5cylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKVxuICAgICAgLCBpc0RlZXAgPSBmbGFnKHRoaXMsICdkZWVwJylcbiAgICAgICwgc3RyXG4gICAgICAsIGRlZXBTdHIgPSAnJ1xuICAgICAgLCBvayA9IHRydWVcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKTtcblxuICAgIGZsYWdNc2cgPSBmbGFnTXNnID8gZmxhZ01zZyArICc6ICcgOiAnJztcbiAgICB2YXIgbWl4ZWRBcmdzTXNnID0gZmxhZ01zZyArICd3aGVuIHRlc3Rpbmcga2V5cyBhZ2FpbnN0IGFuIG9iamVjdCBvciBhbiBhcnJheSB5b3UgbXVzdCBnaXZlIGEgc2luZ2xlIEFycmF5fE9iamVjdHxTdHJpbmcgYXJndW1lbnQgb3IgbXVsdGlwbGUgU3RyaW5nIGFyZ3VtZW50cyc7XG5cbiAgICBpZiAob2JqVHlwZSA9PT0gJ01hcCcgfHwgb2JqVHlwZSA9PT0gJ1NldCcpIHtcbiAgICAgIGRlZXBTdHIgPSBpc0RlZXAgPyAnZGVlcGx5ICcgOiAnJztcbiAgICAgIGFjdHVhbCA9IFtdO1xuXG4gICAgICAvLyBNYXAgYW5kIFNldCAnLmtleXMnIGFyZW4ndCBzdXBwb3J0ZWQgaW4gSUUgMTEuIFRoZXJlZm9yZSwgdXNlIC5mb3JFYWNoLlxuICAgICAgb2JqLmZvckVhY2goZnVuY3Rpb24gKHZhbCwga2V5KSB7IGFjdHVhbC5wdXNoKGtleSkgfSk7XG5cbiAgICAgIGlmIChrZXlzVHlwZSAhPT0gJ0FycmF5Jykge1xuICAgICAgICBrZXlzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICBhY3R1YWwgPSBfLmdldE93bkVudW1lcmFibGVQcm9wZXJ0aWVzKG9iaik7XG5cbiAgICAgIHN3aXRjaCAoa2V5c1R5cGUpIHtcbiAgICAgICAgY2FzZSAnQXJyYXknOlxuICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKG1peGVkQXJnc01zZywgdW5kZWZpbmVkLCBzc2ZpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ09iamVjdCc6XG4gICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IobWl4ZWRBcmdzTXNnLCB1bmRlZmluZWQsIHNzZmkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBrZXlzID0gT2JqZWN0LmtleXMoa2V5cyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAga2V5cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIC8vIE9ubHkgc3RyaW5naWZ5IG5vbi1TeW1ib2xzIGJlY2F1c2UgU3ltYm9scyB3b3VsZCBiZWNvbWUgXCJTeW1ib2woKVwiXG4gICAgICBrZXlzID0ga2V5cy5tYXAoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N5bWJvbCcgPyB2YWwgOiBTdHJpbmcodmFsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICgha2V5cy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihmbGFnTXNnICsgJ2tleXMgcmVxdWlyZWQnLCB1bmRlZmluZWQsIHNzZmkpO1xuICAgIH1cblxuICAgIHZhciBsZW4gPSBrZXlzLmxlbmd0aFxuICAgICAgLCBhbnkgPSBmbGFnKHRoaXMsICdhbnknKVxuICAgICAgLCBhbGwgPSBmbGFnKHRoaXMsICdhbGwnKVxuICAgICAgLCBleHBlY3RlZCA9IGtleXNcbiAgICAgICwgYWN0dWFsO1xuXG4gICAgaWYgKCFhbnkgJiYgIWFsbCkge1xuICAgICAgYWxsID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBIYXMgYW55XG4gICAgaWYgKGFueSkge1xuICAgICAgb2sgPSBleHBlY3RlZC5zb21lKGZ1bmN0aW9uKGV4cGVjdGVkS2V5KSB7XG4gICAgICAgIHJldHVybiBhY3R1YWwuc29tZShmdW5jdGlvbihhY3R1YWxLZXkpIHtcbiAgICAgICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgICAgICByZXR1cm4gXy5lcWwoZXhwZWN0ZWRLZXksIGFjdHVhbEtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBleHBlY3RlZEtleSA9PT0gYWN0dWFsS2V5O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBIYXMgYWxsXG4gICAgaWYgKGFsbCkge1xuICAgICAgb2sgPSBleHBlY3RlZC5ldmVyeShmdW5jdGlvbihleHBlY3RlZEtleSkge1xuICAgICAgICByZXR1cm4gYWN0dWFsLnNvbWUoZnVuY3Rpb24oYWN0dWFsS2V5KSB7XG4gICAgICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIF8uZXFsKGV4cGVjdGVkS2V5LCBhY3R1YWxLZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZXhwZWN0ZWRLZXkgPT09IGFjdHVhbEtleTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICghZmxhZyh0aGlzLCAnY29udGFpbnMnKSkge1xuICAgICAgICBvayA9IG9rICYmIGtleXMubGVuZ3RoID09IGFjdHVhbC5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gS2V5IHN0cmluZ1xuICAgIGlmIChsZW4gPiAxKSB7XG4gICAgICBrZXlzID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBfLmluc3BlY3Qoa2V5KTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGxhc3QgPSBrZXlzLnBvcCgpO1xuICAgICAgaWYgKGFsbCkge1xuICAgICAgICBzdHIgPSBrZXlzLmpvaW4oJywgJykgKyAnLCBhbmQgJyArIGxhc3Q7XG4gICAgICB9XG4gICAgICBpZiAoYW55KSB7XG4gICAgICAgIHN0ciA9IGtleXMuam9pbignLCAnKSArICcsIG9yICcgKyBsYXN0O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBfLmluc3BlY3Qoa2V5c1swXSk7XG4gICAgfVxuXG4gICAgLy8gRm9ybVxuICAgIHN0ciA9IChsZW4gPiAxID8gJ2tleXMgJyA6ICdrZXkgJykgKyBzdHI7XG5cbiAgICAvLyBIYXZlIC8gaW5jbHVkZVxuICAgIHN0ciA9IChmbGFnKHRoaXMsICdjb250YWlucycpID8gJ2NvbnRhaW4gJyA6ICdoYXZlICcpICsgc3RyO1xuXG4gICAgLy8gQXNzZXJ0aW9uXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIG9rXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvICcgKyBkZWVwU3RyICsgc3RyXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCAnICsgZGVlcFN0ciArIHN0clxuICAgICAgLCBleHBlY3RlZC5zbGljZSgwKS5zb3J0KF8uY29tcGFyZUJ5SW5zcGVjdClcbiAgICAgICwgYWN0dWFsLnNvcnQoXy5jb21wYXJlQnlJbnNwZWN0KVxuICAgICAgLCB0cnVlXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2tleXMnLCBhc3NlcnRLZXlzKTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgna2V5JywgYXNzZXJ0S2V5cyk7XG5cbiAgLyoqXG4gICAqICMjIyAudGhyb3coW2Vycm9yTGlrZV0sIFtlcnJNc2dNYXRjaGVyXSwgW21zZ10pXG4gICAqXG4gICAqIFdoZW4gbm8gYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgYC50aHJvd2AgaW52b2tlcyB0aGUgdGFyZ2V0IGZ1bmN0aW9uIGFuZFxuICAgKiBhc3NlcnRzIHRoYXQgYW4gZXJyb3IgaXMgdGhyb3duLlxuICAgKiBcbiAgICogICAgIHZhciBiYWRGbiA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignSWxsZWdhbCBzYWxtb24hJyk7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KCk7XG4gICAqXG4gICAqIFdoZW4gb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkLCBhbmQgaXQncyBhbiBlcnJvciBjb25zdHJ1Y3RvciwgYC50aHJvd2BcbiAgICogaW52b2tlcyB0aGUgdGFyZ2V0IGZ1bmN0aW9uIGFuZCBhc3NlcnRzIHRoYXQgYW4gZXJyb3IgaXMgdGhyb3duIHRoYXQncyBhblxuICAgKiBpbnN0YW5jZSBvZiB0aGF0IGVycm9yIGNvbnN0cnVjdG9yLlxuICAgKlxuICAgKiAgICAgdmFyIGJhZEZuID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIHNhbG1vbiEnKTsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coVHlwZUVycm9yKTtcbiAgICpcbiAgICogV2hlbiBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQsIGFuZCBpdCdzIGFuIGVycm9yIGluc3RhbmNlLCBgLnRocm93YCBpbnZva2VzXG4gICAqIHRoZSB0YXJnZXQgZnVuY3Rpb24gYW5kIGFzc2VydHMgdGhhdCBhbiBlcnJvciBpcyB0aHJvd24gdGhhdCdzIHN0cmljdGx5XG4gICAqIChgPT09YCkgZXF1YWwgdG8gdGhhdCBlcnJvciBpbnN0YW5jZS5cbiAgICpcbiAgICogICAgIHZhciBlcnIgPSBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIHNhbG1vbiEnKTtcbiAgICogICAgIHZhciBiYWRGbiA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgZXJyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by50aHJvdyhlcnIpO1xuICAgKlxuICAgKiBXaGVuIG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCwgYW5kIGl0J3MgYSBzdHJpbmcsIGAudGhyb3dgIGludm9rZXMgdGhlXG4gICAqIHRhcmdldCBmdW5jdGlvbiBhbmQgYXNzZXJ0cyB0aGF0IGFuIGVycm9yIGlzIHRocm93biB3aXRoIGEgbWVzc2FnZSB0aGF0XG4gICAqIGNvbnRhaW5zIHRoYXQgc3RyaW5nLlxuICAgKlxuICAgKiAgICAgdmFyIGJhZEZuID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIHNhbG1vbiEnKTsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coJ3NhbG1vbicpO1xuICAgKlxuICAgKiBXaGVuIG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCwgYW5kIGl0J3MgYSByZWd1bGFyIGV4cHJlc3Npb24sIGAudGhyb3dgXG4gICAqIGludm9rZXMgdGhlIHRhcmdldCBmdW5jdGlvbiBhbmQgYXNzZXJ0cyB0aGF0IGFuIGVycm9yIGlzIHRocm93biB3aXRoIGFcbiAgICogbWVzc2FnZSB0aGF0IG1hdGNoZXMgdGhhdCByZWd1bGFyIGV4cHJlc3Npb24uXG4gICAqXG4gICAqICAgICB2YXIgYmFkRm4gPSBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgc2FsbW9uIScpOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by50aHJvdygvc2FsbW9uLyk7XG4gICAqXG4gICAqIFdoZW4gdHdvIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIGFuZCB0aGUgZmlyc3QgaXMgYW4gZXJyb3IgaW5zdGFuY2Ugb3JcbiAgICogY29uc3RydWN0b3IsIGFuZCB0aGUgc2Vjb25kIGlzIGEgc3RyaW5nIG9yIHJlZ3VsYXIgZXhwcmVzc2lvbiwgYC50aHJvd2BcbiAgICogaW52b2tlcyB0aGUgZnVuY3Rpb24gYW5kIGFzc2VydHMgdGhhdCBhbiBlcnJvciBpcyB0aHJvd24gdGhhdCBmdWxmaWxscyBib3RoXG4gICAqIGNvbmRpdGlvbnMgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgKlxuICAgKiAgICAgdmFyIGVyciA9IG5ldyBUeXBlRXJyb3IoJ0lsbGVnYWwgc2FsbW9uIScpO1xuICAgKiAgICAgdmFyIGJhZEZuID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBlcnI7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KFR5cGVFcnJvciwgJ3NhbG1vbicpO1xuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by50aHJvdyhUeXBlRXJyb3IsIC9zYWxtb24vKTtcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coZXJyLCAnc2FsbW9uJyk7XG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KGVyciwgL3NhbG1vbi8pO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLnRocm93YC5cbiAgICogICAgIFxuICAgKiAgICAgdmFyIGdvb2RGbiA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGdvb2RGbikudG8ubm90LnRocm93KCk7XG4gICAqIFxuICAgKiBIb3dldmVyLCBpdCdzIGRhbmdlcm91cyB0byBuZWdhdGUgYC50aHJvd2Agd2hlbiBwcm92aWRpbmcgYW55IGFyZ3VtZW50cy5cbiAgICogVGhlIHByb2JsZW0gaXMgdGhhdCBpdCBjcmVhdGVzIHVuY2VydGFpbiBleHBlY3RhdGlvbnMgYnkgYXNzZXJ0aW5nIHRoYXQgdGhlXG4gICAqIHRhcmdldCBlaXRoZXIgZG9lc24ndCB0aHJvdyBhbiBlcnJvciwgb3IgdGhhdCBpdCB0aHJvd3MgYW4gZXJyb3IgYnV0IG9mIGFcbiAgICogZGlmZmVyZW50IHR5cGUgdGhhbiB0aGUgZ2l2ZW4gdHlwZSwgb3IgdGhhdCBpdCB0aHJvd3MgYW4gZXJyb3Igb2YgdGhlIGdpdmVuXG4gICAqIHR5cGUgYnV0IHdpdGggYSBtZXNzYWdlIHRoYXQgZG9lc24ndCBpbmNsdWRlIHRoZSBnaXZlbiBzdHJpbmcuIEl0J3Mgb2Z0ZW5cbiAgICogYmVzdCB0byBpZGVudGlmeSB0aGUgZXhhY3Qgb3V0cHV0IHRoYXQncyBleHBlY3RlZCwgYW5kIHRoZW4gd3JpdGUgYW5cbiAgICogYXNzZXJ0aW9uIHRoYXQgb25seSBhY2NlcHRzIHRoYXQgZXhhY3Qgb3V0cHV0LlxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXNuJ3QgZXhwZWN0ZWQgdG8gdGhyb3cgYW4gZXJyb3IsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnRcbiAgICogZXhhY3RseSB0aGF0LlxuICAgKlxuICAgKiAgICAgdmFyIGdvb2RGbiA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGdvb2RGbikudG8ubm90LnRocm93KCk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoZ29vZEZuKS50by5ub3QudGhyb3coUmVmZXJlbmNlRXJyb3IsICd4Jyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgZXhwZWN0ZWQgdG8gdGhyb3cgYW4gZXJyb3IsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnRcbiAgICogdGhhdCB0aGUgZXJyb3IgaXMgb2YgaXRzIGV4cGVjdGVkIHR5cGUsIGFuZCBoYXMgYSBtZXNzYWdlIHRoYXQgaW5jbHVkZXMgYW5cbiAgICogZXhwZWN0ZWQgc3RyaW5nLCByYXRoZXIgdGhhbiBhc3NlcnRpbmcgdGhhdCBpdCBkb2Vzbid0IGhhdmUgb25lIG9mIG1hbnlcbiAgICogdW5leHBlY3RlZCB0eXBlcywgYW5kIGRvZXNuJ3QgaGF2ZSBhIG1lc3NhZ2UgdGhhdCBpbmNsdWRlcyBzb21lIHN0cmluZy5cbiAgICpcbiAgICogICAgIHZhciBiYWRGbiA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcignSWxsZWdhbCBzYWxtb24hJyk7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYmFkRm4pLnRvLnRocm93KFR5cGVFcnJvciwgJ3NhbG1vbicpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KGJhZEZuKS50by5ub3QudGhyb3coUmVmZXJlbmNlRXJyb3IsICd4Jyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLnRocm93YCBjaGFuZ2VzIHRoZSB0YXJnZXQgb2YgYW55IGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvXG4gICAqIGJlIHRoZSBlcnJvciBvYmplY3QgdGhhdCdzIHRocm93bi5cbiAgICpcbiAgICogICAgIHZhciBlcnIgPSBuZXcgVHlwZUVycm9yKCdJbGxlZ2FsIHNhbG1vbiEnKTtcbiAgICogICAgIGVyci5jb2RlID0gNDI7XG4gICAqICAgICB2YXIgYmFkRm4gPSBmdW5jdGlvbiAoKSB7IHRocm93IGVycjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChiYWRGbikudG8udGhyb3coVHlwZUVycm9yKS53aXRoLnByb3BlcnR5KCdjb2RlJywgNDIpO1xuICAgKlxuICAgKiBgLnRocm93YCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yIG1lc3NhZ2VcbiAgICogdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzIHRoZVxuICAgKiBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuIFdoZW4gbm90IHByb3ZpZGluZyB0d28gYXJndW1lbnRzLCBhbHdheXMgdXNlXG4gICAqIHRoZSBzZWNvbmQgZm9ybS5cbiAgICpcbiAgICogICAgIHZhciBnb29kRm4gPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChnb29kRm4pLnRvLnRocm93KFR5cGVFcnJvciwgJ3gnLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoZ29vZEZuLCAnbm9vbyB3aHkgZmFpbD8/JykudG8udGhyb3coKTtcbiAgICpcbiAgICogRHVlIHRvIGxpbWl0YXRpb25zIGluIEVTNSwgYC50aHJvd2AgbWF5IG5vdCBhbHdheXMgd29yayBhcyBleHBlY3RlZCB3aGVuXG4gICAqIHVzaW5nIGEgdHJhbnNwaWxlciBzdWNoIGFzIEJhYmVsIG9yIFR5cGVTY3JpcHQuIEluIHBhcnRpY3VsYXIsIGl0IG1heVxuICAgKiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cyB3aGVuIHN1YmNsYXNzaW5nIHRoZSBidWlsdC1pbiBgRXJyb3JgIG9iamVjdCBhbmRcbiAgICogdGhlbiBwYXNzaW5nIHRoZSBzdWJjbGFzc2VkIGNvbnN0cnVjdG9yIHRvIGAudGhyb3dgLiBTZWUgeW91ciB0cmFuc3BpbGVyJ3NcbiAgICogZG9jcyBmb3IgZGV0YWlsczpcbiAgICpcbiAgICogLSAoW0JhYmVsXShodHRwczovL2JhYmVsanMuaW8vZG9jcy91c2FnZS9jYXZlYXRzLyNjbGFzc2VzKSlcbiAgICogLSAoW1R5cGVTY3JpcHRdKGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC93aWtpL0JyZWFraW5nLUNoYW5nZXMjZXh0ZW5kaW5nLWJ1aWx0LWlucy1saWtlLWVycm9yLWFycmF5LWFuZC1tYXAtbWF5LW5vLWxvbmdlci13b3JrKSlcbiAgICpcbiAgICogQmV3YXJlIG9mIHNvbWUgY29tbW9uIG1pc3Rha2VzIHdoZW4gdXNpbmcgdGhlIGB0aHJvd2AgYXNzZXJ0aW9uLiBPbmUgY29tbW9uXG4gICAqIG1pc3Rha2UgaXMgdG8gYWNjaWRlbnRhbGx5IGludm9rZSB0aGUgZnVuY3Rpb24geW91cnNlbGYgaW5zdGVhZCBvZiBsZXR0aW5nXG4gICAqIHRoZSBgdGhyb3dgIGFzc2VydGlvbiBpbnZva2UgdGhlIGZ1bmN0aW9uIGZvciB5b3UuIEZvciBleGFtcGxlLCB3aGVuXG4gICAqIHRlc3RpbmcgaWYgYSBmdW5jdGlvbiBuYW1lZCBgZm5gIHRocm93cywgcHJvdmlkZSBgZm5gIGluc3RlYWQgb2YgYGZuKClgIGFzXG4gICAqIHRoZSB0YXJnZXQgZm9yIHRoZSBhc3NlcnRpb24uXG4gICAqXG4gICAqICAgICBleHBlY3QoZm4pLnRvLnRocm93KCk7ICAgICAvLyBHb29kISBUZXN0cyBgZm5gIGFzIGRlc2lyZWRcbiAgICogICAgIGV4cGVjdChmbigpKS50by50aHJvdygpOyAgIC8vIEJhZCEgVGVzdHMgcmVzdWx0IG9mIGBmbigpYCwgbm90IGBmbmBcbiAgICpcbiAgICogSWYgeW91IG5lZWQgdG8gYXNzZXJ0IHRoYXQgeW91ciBmdW5jdGlvbiBgZm5gIHRocm93cyB3aGVuIHBhc3NlZCBjZXJ0YWluXG4gICAqIGFyZ3VtZW50cywgdGhlbiB3cmFwIGEgY2FsbCB0byBgZm5gIGluc2lkZSBvZiBhbm90aGVyIGZ1bmN0aW9uLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KGZ1bmN0aW9uICgpIHsgZm4oNDIpOyB9KS50by50aHJvdygpOyAgLy8gRnVuY3Rpb24gZXhwcmVzc2lvblxuICAgKiAgICAgZXhwZWN0KCgpID0+IGZuKDQyKSkudG8udGhyb3coKTsgICAgICAgICAgICAgLy8gRVM2IGFycm93IGZ1bmN0aW9uXG4gICAqXG4gICAqIEFub3RoZXIgY29tbW9uIG1pc3Rha2UgaXMgdG8gcHJvdmlkZSBhbiBvYmplY3QgbWV0aG9kIChvciBhbnkgc3RhbmQtYWxvbmVcbiAgICogZnVuY3Rpb24gdGhhdCByZWxpZXMgb24gYHRoaXNgKSBhcyB0aGUgdGFyZ2V0IG9mIHRoZSBhc3NlcnRpb24uIERvaW5nIHNvIGlzXG4gICAqIHByb2JsZW1hdGljIGJlY2F1c2UgdGhlIGB0aGlzYCBjb250ZXh0IHdpbGwgYmUgbG9zdCB3aGVuIHRoZSBmdW5jdGlvbiBpc1xuICAgKiBpbnZva2VkIGJ5IGAudGhyb3dgOyB0aGVyZSdzIG5vIHdheSBmb3IgaXQgdG8ga25vdyB3aGF0IGB0aGlzYCBpcyBzdXBwb3NlZFxuICAgKiB0byBiZS4gVGhlcmUgYXJlIHR3byB3YXlzIGFyb3VuZCB0aGlzIHByb2JsZW0uIE9uZSBzb2x1dGlvbiBpcyB0byB3cmFwIHRoZVxuICAgKiBtZXRob2Qgb3IgZnVuY3Rpb24gY2FsbCBpbnNpZGUgb2YgYW5vdGhlciBmdW5jdGlvbi4gQW5vdGhlciBzb2x1dGlvbiBpcyB0b1xuICAgKiB1c2UgYGJpbmRgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KGZ1bmN0aW9uICgpIHsgY2F0Lm1lb3coKTsgfSkudG8udGhyb3coKTsgIC8vIEZ1bmN0aW9uIGV4cHJlc3Npb25cbiAgICogICAgIGV4cGVjdCgoKSA9PiBjYXQubWVvdygpKS50by50aHJvdygpOyAgICAgICAgICAgICAvLyBFUzYgYXJyb3cgZnVuY3Rpb25cbiAgICogICAgIGV4cGVjdChjYXQubWVvdy5iaW5kKGNhdCkpLnRvLnRocm93KCk7ICAgICAgICAgICAvLyBCaW5kXG4gICAqXG4gICAqIEZpbmFsbHksIGl0J3Mgd29ydGggbWVudGlvbmluZyB0aGF0IGl0J3MgYSBiZXN0IHByYWN0aWNlIGluIEphdmFTY3JpcHQgdG9cbiAgICogb25seSB0aHJvdyBgRXJyb3JgIGFuZCBkZXJpdmF0aXZlcyBvZiBgRXJyb3JgIHN1Y2ggYXMgYFJlZmVyZW5jZUVycm9yYCxcbiAgICogYFR5cGVFcnJvcmAsIGFuZCB1c2VyLWRlZmluZWQgb2JqZWN0cyB0aGF0IGV4dGVuZCBgRXJyb3JgLiBObyBvdGhlciB0eXBlIG9mXG4gICAqIHZhbHVlIHdpbGwgZ2VuZXJhdGUgYSBzdGFjayB0cmFjZSB3aGVuIGluaXRpYWxpemVkLiBXaXRoIHRoYXQgc2FpZCwgdGhlXG4gICAqIGB0aHJvd2AgYXNzZXJ0aW9uIGRvZXMgdGVjaG5pY2FsbHkgc3VwcG9ydCBhbnkgdHlwZSBvZiB2YWx1ZSBiZWluZyB0aHJvd24sXG4gICAqIG5vdCBqdXN0IGBFcnJvcmAgYW5kIGl0cyBkZXJpdmF0aXZlcy5cbiAgICpcbiAgICogVGhlIGFsaWFzZXMgYC50aHJvd3NgIGFuZCBgLlRocm93YCBjYW4gYmUgdXNlZCBpbnRlcmNoYW5nZWFibHkgd2l0aFxuICAgKiBgLnRocm93YC5cbiAgICpcbiAgICogQG5hbWUgdGhyb3dcbiAgICogQGFsaWFzIHRocm93c1xuICAgKiBAYWxpYXMgVGhyb3dcbiAgICogQHBhcmFtIHtFcnJvcnxFcnJvckNvbnN0cnVjdG9yfSBlcnJvckxpa2VcbiAgICogQHBhcmFtIHtTdHJpbmd8UmVnRXhwfSBlcnJNc2dNYXRjaGVyIGVycm9yIG1lc3NhZ2VcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3IjRXJyb3JfdHlwZXNcbiAgICogQHJldHVybnMgZXJyb3IgZm9yIGNoYWluaW5nIChudWxsIGlmIG5vIGVycm9yKVxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRUaHJvd3MgKGVycm9yTGlrZSwgZXJyTXNnTWF0Y2hlciwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBuZWdhdGUgPSBmbGFnKHRoaXMsICduZWdhdGUnKSB8fCBmYWxzZTtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkuaXMuYSgnZnVuY3Rpb24nKTtcblxuICAgIGlmIChlcnJvckxpa2UgaW5zdGFuY2VvZiBSZWdFeHAgfHwgdHlwZW9mIGVycm9yTGlrZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVyck1zZ01hdGNoZXIgPSBlcnJvckxpa2U7XG4gICAgICBlcnJvckxpa2UgPSBudWxsO1xuICAgIH1cblxuICAgIHZhciBjYXVnaHRFcnI7XG4gICAgdHJ5IHtcbiAgICAgIG9iaigpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY2F1Z2h0RXJyID0gZXJyO1xuICAgIH1cblxuICAgIC8vIElmIHdlIGhhdmUgdGhlIG5lZ2F0ZSBmbGFnIGVuYWJsZWQgYW5kIGF0IGxlYXN0IG9uZSB2YWxpZCBhcmd1bWVudCBpdCBtZWFucyB3ZSBkbyBleHBlY3QgYW4gZXJyb3JcbiAgICAvLyBidXQgd2Ugd2FudCBpdCB0byBtYXRjaCBhIGdpdmVuIHNldCBvZiBjcml0ZXJpYVxuICAgIHZhciBldmVyeUFyZ0lzVW5kZWZpbmVkID0gZXJyb3JMaWtlID09PSB1bmRlZmluZWQgJiYgZXJyTXNnTWF0Y2hlciA9PT0gdW5kZWZpbmVkO1xuXG4gICAgLy8gSWYgd2UndmUgZ290IHRoZSBuZWdhdGUgZmxhZyBlbmFibGVkIGFuZCBib3RoIGFyZ3MsIHdlIHNob3VsZCBvbmx5IGZhaWwgaWYgYm90aCBhcmVuJ3QgY29tcGF0aWJsZVxuICAgIC8vIFNlZSBJc3N1ZSAjNTUxIGFuZCBQUiAjNjgzQEdpdEh1YlxuICAgIHZhciBldmVyeUFyZ0lzRGVmaW5lZCA9IEJvb2xlYW4oZXJyb3JMaWtlICYmIGVyck1zZ01hdGNoZXIpO1xuICAgIHZhciBlcnJvckxpa2VGYWlsID0gZmFsc2U7XG4gICAgdmFyIGVyck1zZ01hdGNoZXJGYWlsID0gZmFsc2U7XG5cbiAgICAvLyBDaGVja2luZyBpZiBlcnJvciB3YXMgdGhyb3duXG4gICAgaWYgKGV2ZXJ5QXJnSXNVbmRlZmluZWQgfHwgIWV2ZXJ5QXJnSXNVbmRlZmluZWQgJiYgIW5lZ2F0ZSkge1xuICAgICAgLy8gV2UgbmVlZCB0aGlzIHRvIGRpc3BsYXkgcmVzdWx0cyBjb3JyZWN0bHkgYWNjb3JkaW5nIHRvIHRoZWlyIHR5cGVzXG4gICAgICB2YXIgZXJyb3JMaWtlU3RyaW5nID0gJ2FuIGVycm9yJztcbiAgICAgIGlmIChlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBlcnJvckxpa2VTdHJpbmcgPSAnI3tleHB9JztcbiAgICAgIH0gZWxzZSBpZiAoZXJyb3JMaWtlKSB7XG4gICAgICAgIGVycm9yTGlrZVN0cmluZyA9IF8uY2hlY2tFcnJvci5nZXRDb25zdHJ1Y3Rvck5hbWUoZXJyb3JMaWtlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgY2F1Z2h0RXJyXG4gICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gdGhyb3cgJyArIGVycm9yTGlrZVN0cmluZ1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCB0aHJvdyBhbiBlcnJvciBidXQgI3thY3R9IHdhcyB0aHJvd24nXG4gICAgICAgICwgZXJyb3JMaWtlICYmIGVycm9yTGlrZS50b1N0cmluZygpXG4gICAgICAgICwgKGNhdWdodEVyciBpbnN0YW5jZW9mIEVycm9yID9cbiAgICAgICAgICAgIGNhdWdodEVyci50b1N0cmluZygpIDogKHR5cGVvZiBjYXVnaHRFcnIgPT09ICdzdHJpbmcnID8gY2F1Z2h0RXJyIDogY2F1Z2h0RXJyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmNoZWNrRXJyb3IuZ2V0Q29uc3RydWN0b3JOYW1lKGNhdWdodEVycikpKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3JMaWtlICYmIGNhdWdodEVycikge1xuICAgICAgLy8gV2Ugc2hvdWxkIGNvbXBhcmUgaW5zdGFuY2VzIG9ubHkgaWYgYGVycm9yTGlrZWAgaXMgYW4gaW5zdGFuY2Ugb2YgYEVycm9yYFxuICAgICAgaWYgKGVycm9yTGlrZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHZhciBpc0NvbXBhdGlibGVJbnN0YW5jZSA9IF8uY2hlY2tFcnJvci5jb21wYXRpYmxlSW5zdGFuY2UoY2F1Z2h0RXJyLCBlcnJvckxpa2UpO1xuXG4gICAgICAgIGlmIChpc0NvbXBhdGlibGVJbnN0YW5jZSA9PT0gbmVnYXRlKSB7XG4gICAgICAgICAgLy8gVGhlc2UgY2hlY2tzIHdlcmUgY3JlYXRlZCB0byBlbnN1cmUgd2Ugd29uJ3QgZmFpbCB0b28gc29vbiB3aGVuIHdlJ3ZlIGdvdCBib3RoIGFyZ3MgYW5kIGEgbmVnYXRlXG4gICAgICAgICAgLy8gU2VlIElzc3VlICM1NTEgYW5kIFBSICM2ODNAR2l0SHViXG4gICAgICAgICAgaWYgKGV2ZXJ5QXJnSXNEZWZpbmVkICYmIG5lZ2F0ZSkge1xuICAgICAgICAgICAgZXJyb3JMaWtlRmFpbCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgICAgICAgIG5lZ2F0ZVxuICAgICAgICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIHRocm93ICN7ZXhwfSBidXQgI3thY3R9IHdhcyB0aHJvd24nXG4gICAgICAgICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IHRocm93ICN7ZXhwfScgKyAoY2F1Z2h0RXJyICYmICFuZWdhdGUgPyAnIGJ1dCAje2FjdH0gd2FzIHRocm93bicgOiAnJylcbiAgICAgICAgICAgICAgLCBlcnJvckxpa2UudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAsIGNhdWdodEVyci50b1N0cmluZygpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaXNDb21wYXRpYmxlQ29uc3RydWN0b3IgPSBfLmNoZWNrRXJyb3IuY29tcGF0aWJsZUNvbnN0cnVjdG9yKGNhdWdodEVyciwgZXJyb3JMaWtlKTtcbiAgICAgIGlmIChpc0NvbXBhdGlibGVDb25zdHJ1Y3RvciA9PT0gbmVnYXRlKSB7XG4gICAgICAgIGlmIChldmVyeUFyZ0lzRGVmaW5lZCAmJiBuZWdhdGUpIHtcbiAgICAgICAgICAgIGVycm9yTGlrZUZhaWwgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgICAgICBuZWdhdGVcbiAgICAgICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gdGhyb3cgI3tleHB9IGJ1dCAje2FjdH0gd2FzIHRocm93bidcbiAgICAgICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IHRocm93ICN7ZXhwfScgKyAoY2F1Z2h0RXJyID8gJyBidXQgI3thY3R9IHdhcyB0aHJvd24nIDogJycpXG4gICAgICAgICAgICAsIChlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yTGlrZS50b1N0cmluZygpIDogZXJyb3JMaWtlICYmIF8uY2hlY2tFcnJvci5nZXRDb25zdHJ1Y3Rvck5hbWUoZXJyb3JMaWtlKSlcbiAgICAgICAgICAgICwgKGNhdWdodEVyciBpbnN0YW5jZW9mIEVycm9yID8gY2F1Z2h0RXJyLnRvU3RyaW5nKCkgOiBjYXVnaHRFcnIgJiYgXy5jaGVja0Vycm9yLmdldENvbnN0cnVjdG9yTmFtZShjYXVnaHRFcnIpKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2F1Z2h0RXJyICYmIGVyck1zZ01hdGNoZXIgIT09IHVuZGVmaW5lZCAmJiBlcnJNc2dNYXRjaGVyICE9PSBudWxsKSB7XG4gICAgICAvLyBIZXJlIHdlIGNoZWNrIGNvbXBhdGlibGUgbWVzc2FnZXNcbiAgICAgIHZhciBwbGFjZWhvbGRlciA9ICdpbmNsdWRpbmcnO1xuICAgICAgaWYgKGVyck1zZ01hdGNoZXIgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgcGxhY2Vob2xkZXIgPSAnbWF0Y2hpbmcnXG4gICAgICB9XG5cbiAgICAgIHZhciBpc0NvbXBhdGlibGVNZXNzYWdlID0gXy5jaGVja0Vycm9yLmNvbXBhdGlibGVNZXNzYWdlKGNhdWdodEVyciwgZXJyTXNnTWF0Y2hlcik7XG4gICAgICBpZiAoaXNDb21wYXRpYmxlTWVzc2FnZSA9PT0gbmVnYXRlKSB7XG4gICAgICAgIGlmIChldmVyeUFyZ0lzRGVmaW5lZCAmJiBuZWdhdGUpIHtcbiAgICAgICAgICAgIGVyck1zZ01hdGNoZXJGYWlsID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICAgIG5lZ2F0ZVxuICAgICAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byB0aHJvdyBlcnJvciAnICsgcGxhY2Vob2xkZXIgKyAnICN7ZXhwfSBidXQgZ290ICN7YWN0fSdcbiAgICAgICAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gdGhyb3cgZXJyb3Igbm90ICcgKyBwbGFjZWhvbGRlciArICcgI3tleHB9J1xuICAgICAgICAgICAgLCAgZXJyTXNnTWF0Y2hlclxuICAgICAgICAgICAgLCAgXy5jaGVja0Vycm9yLmdldE1lc3NhZ2UoY2F1Z2h0RXJyKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBib3RoIGFzc2VydGlvbnMgZmFpbGVkIGFuZCBib3RoIHNob3VsZCd2ZSBtYXRjaGVkIHdlIHRocm93IGFuIGVycm9yXG4gICAgaWYgKGVycm9yTGlrZUZhaWwgJiYgZXJyTXNnTWF0Y2hlckZhaWwpIHtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBuZWdhdGVcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byB0aHJvdyAje2V4cH0gYnV0ICN7YWN0fSB3YXMgdGhyb3duJ1xuICAgICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCB0aHJvdyAje2V4cH0nICsgKGNhdWdodEVyciA/ICcgYnV0ICN7YWN0fSB3YXMgdGhyb3duJyA6ICcnKVxuICAgICAgICAsIChlcnJvckxpa2UgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yTGlrZS50b1N0cmluZygpIDogZXJyb3JMaWtlICYmIF8uY2hlY2tFcnJvci5nZXRDb25zdHJ1Y3Rvck5hbWUoZXJyb3JMaWtlKSlcbiAgICAgICAgLCAoY2F1Z2h0RXJyIGluc3RhbmNlb2YgRXJyb3IgPyBjYXVnaHRFcnIudG9TdHJpbmcoKSA6IGNhdWdodEVyciAmJiBfLmNoZWNrRXJyb3IuZ2V0Q29uc3RydWN0b3JOYW1lKGNhdWdodEVycikpXG4gICAgICApO1xuICAgIH1cblxuICAgIGZsYWcodGhpcywgJ29iamVjdCcsIGNhdWdodEVycik7XG4gIH07XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgndGhyb3cnLCBhc3NlcnRUaHJvd3MpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCd0aHJvd3MnLCBhc3NlcnRUaHJvd3MpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdUaHJvdycsIGFzc2VydFRocm93cyk7XG5cbiAgLyoqXG4gICAqICMjIyAucmVzcG9uZFRvKG1ldGhvZFssIG1zZ10pXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBhIG5vbi1mdW5jdGlvbiBvYmplY3QsIGAucmVzcG9uZFRvYCBhc3NlcnRzIHRoYXQgdGhlXG4gICAqIHRhcmdldCBoYXMgYSBtZXRob2Qgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBgbWV0aG9kYC4gVGhlIG1ldGhvZCBjYW4gYmUgb3duIG9yXG4gICAqIGluaGVyaXRlZCwgYW5kIGl0IGNhbiBiZSBlbnVtZXJhYmxlIG9yIG5vbi1lbnVtZXJhYmxlLlxuICAgKlxuICAgKiAgICAgZnVuY3Rpb24gQ2F0ICgpIHt9XG4gICAqICAgICBDYXQucHJvdG90eXBlLm1lb3cgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgQ2F0KCkpLnRvLnJlc3BvbmRUbygnbWVvdycpO1xuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgYSBmdW5jdGlvbiwgYC5yZXNwb25kVG9gIGFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0J3NcbiAgICogYHByb3RvdHlwZWAgcHJvcGVydHkgaGFzIGEgbWV0aG9kIHdpdGggdGhlIGdpdmVuIG5hbWUgYG1ldGhvZGAuIEFnYWluLCB0aGVcbiAgICogbWV0aG9kIGNhbiBiZSBvd24gb3IgaW5oZXJpdGVkLCBhbmQgaXQgY2FuIGJlIGVudW1lcmFibGUgb3Igbm9uLWVudW1lcmFibGUuXG4gICAqXG4gICAqICAgICBmdW5jdGlvbiBDYXQgKCkge31cbiAgICogICAgIENhdC5wcm90b3R5cGUubWVvdyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KENhdCkudG8ucmVzcG9uZFRvKCdtZW93Jyk7XG4gICAqXG4gICAqIEFkZCBgLml0c2VsZmAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gZm9yY2UgYC5yZXNwb25kVG9gIHRvIHRyZWF0IHRoZVxuICAgKiB0YXJnZXQgYXMgYSBub24tZnVuY3Rpb24gb2JqZWN0LCBldmVuIGlmIGl0J3MgYSBmdW5jdGlvbi4gVGh1cywgaXQgYXNzZXJ0c1xuICAgKiB0aGF0IHRoZSB0YXJnZXQgaGFzIGEgbWV0aG9kIHdpdGggdGhlIGdpdmVuIG5hbWUgYG1ldGhvZGAsIHJhdGhlciB0aGFuXG4gICAqIGFzc2VydGluZyB0aGF0IHRoZSB0YXJnZXQncyBgcHJvdG90eXBlYCBwcm9wZXJ0eSBoYXMgYSBtZXRob2Qgd2l0aCB0aGVcbiAgICogZ2l2ZW4gbmFtZSBgbWV0aG9kYC5cbiAgICpcbiAgICogICAgIGZ1bmN0aW9uIENhdCAoKSB7fVxuICAgKiAgICAgQ2F0LnByb3RvdHlwZS5tZW93ID0gZnVuY3Rpb24gKCkge307XG4gICAqICAgICBDYXQuaGlzcyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KENhdCkuaXRzZWxmLnRvLnJlc3BvbmRUbygnaGlzcycpLmJ1dC5ub3QucmVzcG9uZFRvKCdtZW93Jyk7XG4gICAqXG4gICAqIFdoZW4gbm90IGFkZGluZyBgLml0c2VsZmAsIGl0J3MgaW1wb3J0YW50IHRvIGNoZWNrIHRoZSB0YXJnZXQncyB0eXBlIGJlZm9yZVxuICAgKiB1c2luZyBgLnJlc3BvbmRUb2AuIFNlZSB0aGUgYC5hYCBkb2MgZm9yIGluZm8gb24gY2hlY2tpbmcgYSB0YXJnZXQncyB0eXBlLlxuICAgKlxuICAgKiAgICAgZnVuY3Rpb24gQ2F0ICgpIHt9XG4gICAqICAgICBDYXQucHJvdG90eXBlLm1lb3cgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgQ2F0KCkpLnRvLmJlLmFuKCdvYmplY3QnKS50aGF0LnJlc3BvbmRzVG8oJ21lb3cnKTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5yZXNwb25kVG9gLlxuICAgKlxuICAgKiAgICAgZnVuY3Rpb24gRG9nICgpIHt9XG4gICAqICAgICBEb2cucHJvdG90eXBlLmJhcmsgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChuZXcgRG9nKCkpLnRvLm5vdC5yZXNwb25kVG8oJ21lb3cnKTtcbiAgICpcbiAgICogYC5yZXNwb25kVG9gIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3JcbiAgICogbWVzc2FnZSB0byBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXNcbiAgICogdGhlIHNlY29uZCBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7fSkudG8ucmVzcG9uZFRvKCdtZW93JywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KHt9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8ucmVzcG9uZFRvKCdtZW93Jyk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLnJlc3BvbmRzVG9gIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAucmVzcG9uZFRvYC5cbiAgICpcbiAgICogQG5hbWUgcmVzcG9uZFRvXG4gICAqIEBhbGlhcyByZXNwb25kc1RvXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1zZyBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHJlc3BvbmRUbyAobWV0aG9kLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgaXRzZWxmID0gZmxhZyh0aGlzLCAnaXRzZWxmJylcbiAgICAgICwgY29udGV4dCA9ICgnZnVuY3Rpb24nID09PSB0eXBlb2Ygb2JqICYmICFpdHNlbGYpXG4gICAgICAgID8gb2JqLnByb3RvdHlwZVttZXRob2RdXG4gICAgICAgIDogb2JqW21ldGhvZF07XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGNvbnRleHRcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gcmVzcG9uZCB0byAnICsgXy5pbnNwZWN0KG1ldGhvZClcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IHJlc3BvbmQgdG8gJyArIF8uaW5zcGVjdChtZXRob2QpXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ3Jlc3BvbmRUbycsIHJlc3BvbmRUbyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ3Jlc3BvbmRzVG8nLCByZXNwb25kVG8pO1xuXG4gIC8qKlxuICAgKiAjIyMgLml0c2VsZlxuICAgKlxuICAgKiBGb3JjZXMgYWxsIGAucmVzcG9uZFRvYCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbiB0byBiZWhhdmUgYXMgaWZcbiAgICogdGhlIHRhcmdldCBpcyBhIG5vbi1mdW5jdGlvbiBvYmplY3QsIGV2ZW4gaWYgaXQncyBhIGZ1bmN0aW9uLiBUaHVzLCBpdFxuICAgKiBjYXVzZXMgYC5yZXNwb25kVG9gIHRvIGFzc2VydCB0aGF0IHRoZSB0YXJnZXQgaGFzIGEgbWV0aG9kIHdpdGggdGhlIGdpdmVuXG4gICAqIG5hbWUsIHJhdGhlciB0aGFuIGFzc2VydGluZyB0aGF0IHRoZSB0YXJnZXQncyBgcHJvdG90eXBlYCBwcm9wZXJ0eSBoYXMgYVxuICAgKiBtZXRob2Qgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAgICpcbiAgICogICAgIGZ1bmN0aW9uIENhdCAoKSB7fVxuICAgKiAgICAgQ2F0LnByb3RvdHlwZS5tZW93ID0gZnVuY3Rpb24gKCkge307XG4gICAqICAgICBDYXQuaGlzcyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KENhdCkuaXRzZWxmLnRvLnJlc3BvbmRUbygnaGlzcycpLmJ1dC5ub3QucmVzcG9uZFRvKCdtZW93Jyk7XG4gICAqXG4gICAqIEBuYW1lIGl0c2VsZlxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2l0c2VsZicsIGZ1bmN0aW9uICgpIHtcbiAgICBmbGFnKHRoaXMsICdpdHNlbGYnLCB0cnVlKTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqICMjIyAuc2F0aXNmeShtYXRjaGVyWywgbXNnXSlcbiAgICpcbiAgICogSW52b2tlcyB0aGUgZ2l2ZW4gYG1hdGNoZXJgIGZ1bmN0aW9uIHdpdGggdGhlIHRhcmdldCBiZWluZyBwYXNzZWQgYXMgdGhlXG4gICAqIGZpcnN0IGFyZ3VtZW50LCBhbmQgYXNzZXJ0cyB0aGF0IHRoZSB2YWx1ZSByZXR1cm5lZCBpcyB0cnV0aHkuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uc2F0aXNmeShmdW5jdGlvbihudW0pIHtcbiAgICogICAgICAgcmV0dXJuIG51bSA+IDA7IFxuICAgKiAgICAgfSk7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuc2F0aXNmeWAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8ubm90LnNhdGlzZnkoZnVuY3Rpb24obnVtKSB7XG4gICAqICAgICAgIHJldHVybiBudW0gPiAyO1xuICAgKiAgICAgfSk7XG4gICAqXG4gICAqIGAuc2F0aXNmeWAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLnNhdGlzZnkoZnVuY3Rpb24obnVtKSB7XG4gICAqICAgICAgIHJldHVybiBudW0gPiAyO1xuICAgKiAgICAgfSwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKlxuICAgKiAgICAgZXhwZWN0KDEsICdub29vIHdoeSBmYWlsPz8nKS50by5zYXRpc2Z5KGZ1bmN0aW9uKG51bSkge1xuICAgKiAgICAgICByZXR1cm4gbnVtID4gMjtcbiAgICogICAgIH0pO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5zYXRpc2ZpZXNgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAuc2F0aXNmeWAuXG4gICAqXG4gICAqIEBuYW1lIHNhdGlzZnlcbiAgICogQGFsaWFzIHNhdGlzZmllc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtYXRjaGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBzYXRpc2Z5IChtYXRjaGVyLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG4gICAgdmFyIHJlc3VsdCA9IG1hdGNoZXIob2JqKTtcbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgcmVzdWx0XG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIHNhdGlzZnkgJyArIF8ub2JqRGlzcGxheShtYXRjaGVyKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3Qgc2F0aXNmeScgKyBfLm9iakRpc3BsYXkobWF0Y2hlcilcbiAgICAgICwgZmxhZyh0aGlzLCAnbmVnYXRlJykgPyBmYWxzZSA6IHRydWVcbiAgICAgICwgcmVzdWx0XG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ3NhdGlzZnknLCBzYXRpc2Z5KTtcbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnc2F0aXNmaWVzJywgc2F0aXNmeSk7XG5cbiAgLyoqXG4gICAqICMjIyAuY2xvc2VUbyhleHBlY3RlZCwgZGVsdGFbLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBhIG51bWJlciB0aGF0J3Mgd2l0aGluIGEgZ2l2ZW4gKy8tIGBkZWx0YWAgcmFuZ2VcbiAgICogb2YgdGhlIGdpdmVuIG51bWJlciBgZXhwZWN0ZWRgLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlXG4gICAqIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqICAgICAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEuNSkudG8uZXF1YWwoMS41KTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEuNSkudG8uYmUuY2xvc2VUbygxLCAwLjUpO1xuICAgKiAgICAgZXhwZWN0KDEuNSkudG8uYmUuY2xvc2VUbygyLCAwLjUpO1xuICAgKiAgICAgZXhwZWN0KDEuNSkudG8uYmUuY2xvc2VUbygxLCAxKTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5jbG9zZVRvYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCgxLjUpLnRvLmVxdWFsKDEuNSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMS41KS50by5ub3QuYmUuY2xvc2VUbygzLCAxKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIGAuY2xvc2VUb2AgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEuNSkudG8uYmUuY2xvc2VUbygzLCAxLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoMS41LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuY2xvc2VUbygzLCAxKTtcbiAgICpcbiAgICogVGhlIGFsaWFzIGAuYXBwcm94aW1hdGVseWAgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5jbG9zZVRvYC5cbiAgICpcbiAgICogQG5hbWUgY2xvc2VUb1xuICAgKiBAYWxpYXMgYXBwcm94aW1hdGVseVxuICAgKiBAcGFyYW0ge051bWJlcn0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBjbG9zZVRvKGV4cGVjdGVkLCBkZWx0YSwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKTtcblxuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdudW1iZXInKTtcbiAgICBpZiAodHlwZW9mIGV4cGVjdGVkICE9PSAnbnVtYmVyJyB8fCB0eXBlb2YgZGVsdGEgIT09ICdudW1iZXInKSB7XG4gICAgICBmbGFnTXNnID0gZmxhZ01zZyA/IGZsYWdNc2cgKyAnOiAnIDogJyc7XG4gICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgICAgZmxhZ01zZyArICd0aGUgYXJndW1lbnRzIHRvIGNsb3NlVG8gb3IgYXBwcm94aW1hdGVseSBtdXN0IGJlIG51bWJlcnMnLFxuICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICBzc2ZpXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBNYXRoLmFicyhvYmogLSBleHBlY3RlZCkgPD0gZGVsdGFcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgY2xvc2UgdG8gJyArIGV4cGVjdGVkICsgJyArLy0gJyArIGRlbHRhXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IG5vdCB0byBiZSBjbG9zZSB0byAnICsgZXhwZWN0ZWQgKyAnICsvLSAnICsgZGVsdGFcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnY2xvc2VUbycsIGNsb3NlVG8pO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdhcHByb3hpbWF0ZWx5JywgY2xvc2VUbyk7XG5cbiAgLy8gTm90ZTogRHVwbGljYXRlcyBhcmUgaWdub3JlZCBpZiB0ZXN0aW5nIGZvciBpbmNsdXNpb24gaW5zdGVhZCBvZiBzYW1lbmVzcy5cbiAgZnVuY3Rpb24gaXNTdWJzZXRPZihzdWJzZXQsIHN1cGVyc2V0LCBjbXAsIGNvbnRhaW5zLCBvcmRlcmVkKSB7XG4gICAgaWYgKCFjb250YWlucykge1xuICAgICAgaWYgKHN1YnNldC5sZW5ndGggIT09IHN1cGVyc2V0Lmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgc3VwZXJzZXQgPSBzdXBlcnNldC5zbGljZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzZXQuZXZlcnkoZnVuY3Rpb24oZWxlbSwgaWR4KSB7XG4gICAgICBpZiAob3JkZXJlZCkgcmV0dXJuIGNtcCA/IGNtcChlbGVtLCBzdXBlcnNldFtpZHhdKSA6IGVsZW0gPT09IHN1cGVyc2V0W2lkeF07XG5cbiAgICAgIGlmICghY21wKSB7XG4gICAgICAgIHZhciBtYXRjaElkeCA9IHN1cGVyc2V0LmluZGV4T2YoZWxlbSk7XG4gICAgICAgIGlmIChtYXRjaElkeCA9PT0gLTEpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAvLyBSZW1vdmUgbWF0Y2ggZnJvbSBzdXBlcnNldCBzbyBub3QgY291bnRlZCB0d2ljZSBpZiBkdXBsaWNhdGUgaW4gc3Vic2V0LlxuICAgICAgICBpZiAoIWNvbnRhaW5zKSBzdXBlcnNldC5zcGxpY2UobWF0Y2hJZHgsIDEpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1cGVyc2V0LnNvbWUoZnVuY3Rpb24oZWxlbTIsIG1hdGNoSWR4KSB7XG4gICAgICAgIGlmICghY21wKGVsZW0sIGVsZW0yKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIC8vIFJlbW92ZSBtYXRjaCBmcm9tIHN1cGVyc2V0IHNvIG5vdCBjb3VudGVkIHR3aWNlIGlmIGR1cGxpY2F0ZSBpbiBzdWJzZXQuXG4gICAgICAgIGlmICghY29udGFpbnMpIHN1cGVyc2V0LnNwbGljZShtYXRjaElkeCwgMSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5tZW1iZXJzKHNldFssIG1zZ10pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGFycmF5IGhhcyB0aGUgc2FtZSBtZW1iZXJzIGFzIHRoZSBnaXZlbiBhcnJheVxuICAgKiBgc2V0YC5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUubWVtYmVycyhbMiwgMSwgM10pO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAyXSkudG8uaGF2ZS5tZW1iZXJzKFsyLCAxLCAyXSk7XG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIG1lbWJlcnMgYXJlIGNvbXBhcmVkIHVzaW5nIHN0cmljdCAoYD09PWApIGVxdWFsaXR5LiBBZGQgYC5kZWVwYFxuICAgKiBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byB1c2UgZGVlcCBlcXVhbGl0eSBpbnN0ZWFkLiBTZWUgdGhlIGBkZWVwLWVxbGBcbiAgICogcHJvamVjdCBwYWdlIGZvciBpbmZvIG9uIHRoZSBkZWVwIGVxdWFsaXR5IGFsZ29yaXRobTpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2NoYWlqcy9kZWVwLWVxbC5cbiAgICpcbiAgICogICAgIC8vIFRhcmdldCBhcnJheSBkZWVwbHkgKGJ1dCBub3Qgc3RyaWN0bHkpIGhhcyBtZW1iZXIgYHthOiAxfWBcbiAgICogICAgIGV4cGVjdChbe2E6IDF9XSkudG8uaGF2ZS5kZWVwLm1lbWJlcnMoW3thOiAxfV0pO1xuICAgKiAgICAgZXhwZWN0KFt7YTogMX1dKS50by5ub3QuaGF2ZS5tZW1iZXJzKFt7YTogMX1dKTtcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgb3JkZXIgZG9lc24ndCBtYXR0ZXIuIEFkZCBgLm9yZGVyZWRgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvXG4gICAqIHJlcXVpcmUgdGhhdCBtZW1iZXJzIGFwcGVhciBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICpcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmhhdmUub3JkZXJlZC5tZW1iZXJzKFsxLCAyLCAzXSk7XG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5oYXZlLm1lbWJlcnMoWzIsIDEsIDNdKVxuICAgKiAgICAgICAuYnV0Lm5vdC5vcmRlcmVkLm1lbWJlcnMoWzIsIDEsIDNdKTtcbiAgICpcbiAgICogQnkgZGVmYXVsdCwgYm90aCBhcnJheXMgbXVzdCBiZSB0aGUgc2FtZSBzaXplLiBBZGQgYC5pbmNsdWRlYCBlYXJsaWVyIGluXG4gICAqIHRoZSBjaGFpbiB0byByZXF1aXJlIHRoYXQgdGhlIHRhcmdldCdzIG1lbWJlcnMgYmUgYSBzdXBlcnNldCBvZiB0aGVcbiAgICogZXhwZWN0ZWQgbWVtYmVycy4gTm90ZSB0aGF0IGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgaW4gdGhlIHN1YnNldCB3aGVuXG4gICAqIGAuaW5jbHVkZWAgaXMgYWRkZWQuXG4gICAqXG4gICAqICAgICAvLyBUYXJnZXQgYXJyYXkgaXMgYSBzdXBlcnNldCBvZiBbMSwgMl0gYnV0IG5vdCBpZGVudGljYWxcbiAgICogICAgIGV4cGVjdChbMSwgMiwgM10pLnRvLmluY2x1ZGUubWVtYmVycyhbMSwgMl0pO1xuICAgKiAgICAgZXhwZWN0KFsxLCAyLCAzXSkudG8ubm90LmhhdmUubWVtYmVycyhbMSwgMl0pO1xuICAgKlxuICAgKiAgICAgLy8gRHVwbGljYXRlcyBpbiB0aGUgc3Vic2V0IGFyZSBpZ25vcmVkXG4gICAqICAgICBleHBlY3QoWzEsIDIsIDNdKS50by5pbmNsdWRlLm1lbWJlcnMoWzEsIDIsIDIsIDJdKTtcbiAgICpcbiAgICogYC5kZWVwYCwgYC5vcmRlcmVkYCwgYW5kIGAuaW5jbHVkZWAgY2FuIGFsbCBiZSBjb21iaW5lZC4gSG93ZXZlciwgaWZcbiAgICogYC5pbmNsdWRlYCBhbmQgYC5vcmRlcmVkYCBhcmUgY29tYmluZWQsIHRoZSBvcmRlcmluZyBiZWdpbnMgYXQgdGhlIHN0YXJ0IG9mXG4gICAqIGJvdGggYXJyYXlzLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFt7YTogMX0sIHtiOiAyfSwge2M6IDN9XSlcbiAgICogICAgICAgLnRvLmluY2x1ZGUuZGVlcC5vcmRlcmVkLm1lbWJlcnMoW3thOiAxfSwge2I6IDJ9XSlcbiAgICogICAgICAgLmJ1dC5ub3QuaW5jbHVkZS5kZWVwLm9yZGVyZWQubWVtYmVycyhbe2I6IDJ9LCB7YzogM31dKTtcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5tZW1iZXJzYC4gSG93ZXZlciwgaXQnc1xuICAgKiBkYW5nZXJvdXMgdG8gZG8gc28uIFRoZSBwcm9ibGVtIGlzIHRoYXQgaXQgY3JlYXRlcyB1bmNlcnRhaW4gZXhwZWN0YXRpb25zXG4gICAqIGJ5IGFzc2VydGluZyB0aGF0IHRoZSB0YXJnZXQgYXJyYXkgZG9lc24ndCBoYXZlIGFsbCBvZiB0aGUgc2FtZSBtZW1iZXJzIGFzXG4gICAqIHRoZSBnaXZlbiBhcnJheSBgc2V0YCBidXQgbWF5IG9yIG1heSBub3QgaGF2ZSBzb21lIG9mIHRoZW0uIEl0J3Mgb2Z0ZW4gYmVzdFxuICAgKiB0byBpZGVudGlmeSB0aGUgZXhhY3Qgb3V0cHV0IHRoYXQncyBleHBlY3RlZCwgYW5kIHRoZW4gd3JpdGUgYW4gYXNzZXJ0aW9uXG4gICAqIHRoYXQgb25seSBhY2NlcHRzIHRoYXQgZXhhY3Qgb3V0cHV0LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KFsxLCAyXSkudG8ubm90LmluY2x1ZGUoMykuYW5kLm5vdC5pbmNsdWRlKDQpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KFsxLCAyXSkudG8ubm90LmhhdmUubWVtYmVycyhbMywgNF0pOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5tZW1iZXJzYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoWzEsIDJdKS50by5oYXZlLm1lbWJlcnMoWzEsIDIsIDNdLCAnbm9vbyB3aHkgZmFpbD8/Jyk7XG4gICAqICAgICBleHBlY3QoWzEsIDJdLCAnbm9vbyB3aHkgZmFpbD8/JykudG8uaGF2ZS5tZW1iZXJzKFsxLCAyLCAzXSk7XG4gICAqXG4gICAqIEBuYW1lIG1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdtZW1iZXJzJywgZnVuY3Rpb24gKHN1YnNldCwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKTtcblxuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5iZS5hbignYXJyYXknKTtcbiAgICBuZXcgQXNzZXJ0aW9uKHN1YnNldCwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkudG8uYmUuYW4oJ2FycmF5Jyk7XG5cbiAgICB2YXIgY29udGFpbnMgPSBmbGFnKHRoaXMsICdjb250YWlucycpO1xuICAgIHZhciBvcmRlcmVkID0gZmxhZyh0aGlzLCAnb3JkZXJlZCcpO1xuXG4gICAgdmFyIHN1YmplY3QsIGZhaWxNc2csIGZhaWxOZWdhdGVNc2csIGxlbmd0aENoZWNrO1xuXG4gICAgaWYgKGNvbnRhaW5zKSB7XG4gICAgICBzdWJqZWN0ID0gb3JkZXJlZCA/ICdhbiBvcmRlcmVkIHN1cGVyc2V0JyA6ICdhIHN1cGVyc2V0JztcbiAgICAgIGZhaWxNc2cgPSAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSAnICsgc3ViamVjdCArICcgb2YgI3tleHB9JztcbiAgICAgIGZhaWxOZWdhdGVNc2cgPSAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgJyArIHN1YmplY3QgKyAnIG9mICN7ZXhwfSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1YmplY3QgPSBvcmRlcmVkID8gJ29yZGVyZWQgbWVtYmVycycgOiAnbWVtYmVycyc7XG4gICAgICBmYWlsTXNnID0gJ2V4cGVjdGVkICN7dGhpc30gdG8gaGF2ZSB0aGUgc2FtZSAnICsgc3ViamVjdCArICcgYXMgI3tleHB9JztcbiAgICAgIGZhaWxOZWdhdGVNc2cgPSAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgaGF2ZSB0aGUgc2FtZSAnICsgc3ViamVjdCArICcgYXMgI3tleHB9JztcbiAgICB9XG5cbiAgICB2YXIgY21wID0gZmxhZyh0aGlzLCAnZGVlcCcpID8gXy5lcWwgOiB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgaXNTdWJzZXRPZihzdWJzZXQsIG9iaiwgY21wLCBjb250YWlucywgb3JkZXJlZClcbiAgICAgICwgZmFpbE1zZ1xuICAgICAgLCBmYWlsTmVnYXRlTXNnXG4gICAgICAsIHN1YnNldFxuICAgICAgLCBvYmpcbiAgICAgICwgdHJ1ZVxuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLm9uZU9mKGxpc3RbLCBtc2ddKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBhIG1lbWJlciBvZiB0aGUgZ2l2ZW4gYXJyYXkgYGxpc3RgLiBIb3dldmVyLFxuICAgKiBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0IHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCB0byBpdHMgZXhwZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uZXF1YWwoMSk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUub25lT2YoWzEsIDIsIDNdKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIENvbXBhcmlzb25zIGFyZSBwZXJmb3JtZWQgdXNpbmcgc3RyaWN0IChgPT09YCkgZXF1YWxpdHkuXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAub25lT2ZgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmVxdWFsKDEpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5iZS5vbmVPZihbMiwgMywgNF0pOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5vbmVPZmAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvciBtZXNzYWdlXG4gICAqIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhcyB0aGVcbiAgICogc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEpLnRvLmJlLm9uZU9mKFsyLCAzLCA0XSwgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KDEsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5vbmVPZihbMiwgMywgNF0pO1xuICAgKlxuICAgKiBAbmFtZSBvbmVPZlxuICAgKiBAcGFyYW0ge0FycmF5PCo+fSBsaXN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBvbmVPZiAobGlzdCwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIGV4cGVjdGVkID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuICAgIG5ldyBBc3NlcnRpb24obGlzdCwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkudG8uYmUuYW4oJ2FycmF5Jyk7XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgICAgbGlzdC5pbmRleE9mKGV4cGVjdGVkKSA+IC0xXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIGJlIG9uZSBvZiAje2V4cH0nXG4gICAgICAsICdleHBlY3RlZCAje3RoaXN9IHRvIG5vdCBiZSBvbmUgb2YgI3tleHB9J1xuICAgICAgLCBsaXN0XG4gICAgICAsIGV4cGVjdGVkXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ29uZU9mJywgb25lT2YpO1xuXG5cbiAgLyoqXG4gICAqICMjIyAuY2hhbmdlKHN1YmplY3RbLCBwcm9wWywgbXNnXV0pXG4gICAqXG4gICAqIFdoZW4gb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkLCBgLmNoYW5nZWAgYXNzZXJ0cyB0aGF0IHRoZSBnaXZlbiBmdW5jdGlvblxuICAgKiBgc3ViamVjdGAgcmV0dXJucyBhIGRpZmZlcmVudCB2YWx1ZSB3aGVuIGl0J3MgaW52b2tlZCBiZWZvcmUgdGhlIHRhcmdldFxuICAgKiBmdW5jdGlvbiBjb21wYXJlZCB0byB3aGVuIGl0J3MgaW52b2tlZCBhZnRlcndhcmQuIEhvd2V2ZXIsIGl0J3Mgb2Z0ZW4gYmVzdFxuICAgKiB0byBhc3NlcnQgdGhhdCBgc3ViamVjdGAgaXMgZXF1YWwgdG8gaXRzIGV4cGVjdGVkIHZhbHVlLlxuICAgKlxuICAgKiAgICAgdmFyIGRvdHMgPSAnJ1xuICAgKiAgICAgICAsIGFkZERvdCA9IGZ1bmN0aW9uICgpIHsgZG90cyArPSAnLic7IH1cbiAgICogICAgICAgLCBnZXREb3RzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZG90czsgfTtcbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoZ2V0RG90cygpKS50by5lcXVhbCgnJyk7XG4gICAqICAgICBhZGREb3QoKTtcbiAgICogICAgIGV4cGVjdChnZXREb3RzKCkpLnRvLmVxdWFsKCcuJyk7XG4gICAqXG4gICAqICAgICAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChhZGREb3QpLnRvLmNoYW5nZShnZXREb3RzKTtcbiAgICpcbiAgICogV2hlbiB0d28gYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgYC5jaGFuZ2VgIGFzc2VydHMgdGhhdCB0aGUgdmFsdWUgb2YgdGhlXG4gICAqIGdpdmVuIG9iamVjdCBgc3ViamVjdGAncyBgcHJvcGAgcHJvcGVydHkgaXMgZGlmZmVyZW50IGJlZm9yZSBpbnZva2luZyB0aGVcbiAgICogdGFyZ2V0IGZ1bmN0aW9uIGNvbXBhcmVkIHRvIGFmdGVyd2FyZC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHtkb3RzOiAnJ31cbiAgICogICAgICAgLCBhZGREb3QgPSBmdW5jdGlvbiAoKSB7IG15T2JqLmRvdHMgKz0gJy4nOyB9O1xuICAgKlxuICAgKiAgICAgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChteU9iaikudG8uaGF2ZS5wcm9wZXJ0eSgnZG90cycsICcnKTtcbiAgICogICAgIGFkZERvdCgpO1xuICAgKiAgICAgZXhwZWN0KG15T2JqKS50by5oYXZlLnByb3BlcnR5KCdkb3RzJywgJy4nKTtcbiAgICpcbiAgICogICAgIC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KGFkZERvdCkudG8uY2hhbmdlKG15T2JqLCAnZG90cycpO1xuICAgKlxuICAgKiBTdHJpY3QgKGA9PT1gKSBlcXVhbGl0eSBpcyB1c2VkIHRvIGNvbXBhcmUgYmVmb3JlIGFuZCBhZnRlciB2YWx1ZXMuXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuY2hhbmdlYC5cbiAgICpcbiAgICogICAgIHZhciBkb3RzID0gJydcbiAgICogICAgICAgLCBub29wID0gZnVuY3Rpb24gKCkge31cbiAgICogICAgICAgLCBnZXREb3RzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZG90czsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChub29wKS50by5ub3QuY2hhbmdlKGdldERvdHMpO1xuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge2RvdHM6ICcnfVxuICAgKiAgICAgICAsIG5vb3AgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChub29wKS50by5ub3QuY2hhbmdlKG15T2JqLCAnZG90cycpO1xuICAgKlxuICAgKiBgLmNoYW5nZWAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLiBXaGVuIG5vdCBwcm92aWRpbmcgdHdvIGFyZ3VtZW50cywgYWx3YXlzXG4gICAqIHVzZSB0aGUgc2Vjb25kIGZvcm0uXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7ZG90czogJyd9XG4gICAqICAgICAgICwgYWRkRG90ID0gZnVuY3Rpb24gKCkgeyBteU9iai5kb3RzICs9ICcuJzsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGREb3QpLnRvLm5vdC5jaGFuZ2UobXlPYmosICdkb3RzJywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKlxuICAgKiAgICAgdmFyIGRvdHMgPSAnJ1xuICAgKiAgICAgICAsIGFkZERvdCA9IGZ1bmN0aW9uICgpIHsgZG90cyArPSAnLic7IH1cbiAgICogICAgICAgLCBnZXREb3RzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZG90czsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGREb3QsICdub29vIHdoeSBmYWlsPz8nKS50by5ub3QuY2hhbmdlKGdldERvdHMpO1xuICAgKlxuICAgKiBgLmNoYW5nZWAgYWxzbyBjYXVzZXMgYWxsIGAuYnlgIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvXG4gICAqIGFzc2VydCBob3cgbXVjaCBhIG51bWVyaWMgc3ViamVjdCB3YXMgaW5jcmVhc2VkIG9yIGRlY3JlYXNlZCBieS4gSG93ZXZlcixcbiAgICogaXQncyBkYW5nZXJvdXMgdG8gdXNlIGAuY2hhbmdlLmJ5YC4gVGhlIHByb2JsZW0gaXMgdGhhdCBpdCBjcmVhdGVzXG4gICAqIHVuY2VydGFpbiBleHBlY3RhdGlvbnMgYnkgYXNzZXJ0aW5nIHRoYXQgdGhlIHN1YmplY3QgZWl0aGVyIGluY3JlYXNlcyBieVxuICAgKiB0aGUgZ2l2ZW4gZGVsdGEsIG9yIHRoYXQgaXQgZGVjcmVhc2VzIGJ5IHRoZSBnaXZlbiBkZWx0YS4gSXQncyBvZnRlbiBiZXN0XG4gICAqIHRvIGlkZW50aWZ5IHRoZSBleGFjdCBvdXRwdXQgdGhhdCdzIGV4cGVjdGVkLCBhbmQgdGhlbiB3cml0ZSBhbiBhc3NlcnRpb25cbiAgICogdGhhdCBvbmx5IGFjY2VwdHMgdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIGFkZFR3byA9IGZ1bmN0aW9uICgpIHsgbXlPYmoudmFsICs9IDI7IH1cbiAgICogICAgICAgLCBzdWJ0cmFjdFR3byA9IGZ1bmN0aW9uICgpIHsgbXlPYmoudmFsIC09IDI7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5pbmNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KGFkZFR3bykudG8uY2hhbmdlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5kZWNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5jaGFuZ2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLmNoYW5nZXNgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAuY2hhbmdlYC5cbiAgICpcbiAgICogQG5hbWUgY2hhbmdlXG4gICAqIEBhbGlhcyBjaGFuZ2VzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdWJqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wIG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0Q2hhbmdlcyAoc3ViamVjdCwgcHJvcCwgbXNnKSB7XG4gICAgaWYgKG1zZykgZmxhZyh0aGlzLCAnbWVzc2FnZScsIG1zZyk7XG4gICAgdmFyIGZuID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICwgZmxhZ01zZyA9IGZsYWcodGhpcywgJ21lc3NhZ2UnKVxuICAgICAgLCBzc2ZpID0gZmxhZyh0aGlzLCAnc3NmaScpO1xuICAgIG5ldyBBc3NlcnRpb24oZm4sIGZsYWdNc2csIHNzZmksIHRydWUpLmlzLmEoJ2Z1bmN0aW9uJyk7XG5cbiAgICB2YXIgaW5pdGlhbDtcbiAgICBpZiAoIXByb3ApIHtcbiAgICAgIG5ldyBBc3NlcnRpb24oc3ViamVjdCwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkuaXMuYSgnZnVuY3Rpb24nKTtcbiAgICAgIGluaXRpYWwgPSBzdWJqZWN0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ldyBBc3NlcnRpb24oc3ViamVjdCwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkudG8uaGF2ZS5wcm9wZXJ0eShwcm9wKTtcbiAgICAgIGluaXRpYWwgPSBzdWJqZWN0W3Byb3BdO1xuICAgIH1cblxuICAgIGZuKCk7XG5cbiAgICB2YXIgZmluYWwgPSBwcm9wID09PSB1bmRlZmluZWQgfHwgcHJvcCA9PT0gbnVsbCA/IHN1YmplY3QoKSA6IHN1YmplY3RbcHJvcF07XG4gICAgdmFyIG1zZ09iaiA9IHByb3AgPT09IHVuZGVmaW5lZCB8fCBwcm9wID09PSBudWxsID8gaW5pdGlhbCA6ICcuJyArIHByb3A7XG5cbiAgICAvLyBUaGlzIGdldHMgZmxhZ2dlZCBiZWNhdXNlIG9mIHRoZSAuYnkoZGVsdGEpIGFzc2VydGlvblxuICAgIGZsYWcodGhpcywgJ2RlbHRhTXNnT2JqJywgbXNnT2JqKTtcbiAgICBmbGFnKHRoaXMsICdpbml0aWFsRGVsdGFWYWx1ZScsIGluaXRpYWwpO1xuICAgIGZsYWcodGhpcywgJ2ZpbmFsRGVsdGFWYWx1ZScsIGZpbmFsKTtcbiAgICBmbGFnKHRoaXMsICdkZWx0YUJlaGF2aW9yJywgJ2NoYW5nZScpO1xuICAgIGZsYWcodGhpcywgJ3JlYWxEZWx0YScsIGZpbmFsICE9PSBpbml0aWFsKTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgaW5pdGlhbCAhPT0gZmluYWxcbiAgICAgICwgJ2V4cGVjdGVkICcgKyBtc2dPYmogKyAnIHRvIGNoYW5nZSdcbiAgICAgICwgJ2V4cGVjdGVkICcgKyBtc2dPYmogKyAnIHRvIG5vdCBjaGFuZ2UnXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2NoYW5nZScsIGFzc2VydENoYW5nZXMpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdjaGFuZ2VzJywgYXNzZXJ0Q2hhbmdlcyk7XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jcmVhc2Uoc3ViamVjdFssIHByb3BbLCBtc2ddXSlcbiAgICpcbiAgICogV2hlbiBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQsIGAuaW5jcmVhc2VgIGFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gZnVuY3Rpb25cbiAgICogYHN1YmplY3RgIHJldHVybnMgYSBncmVhdGVyIG51bWJlciB3aGVuIGl0J3MgaW52b2tlZCBhZnRlciBpbnZva2luZyB0aGVcbiAgICogdGFyZ2V0IGZ1bmN0aW9uIGNvbXBhcmVkIHRvIHdoZW4gaXQncyBpbnZva2VkIGJlZm9yZWhhbmQuIGAuaW5jcmVhc2VgIGFsc29cbiAgICogY2F1c2VzIGFsbCBgLmJ5YCBhc3NlcnRpb25zIHRoYXQgZm9sbG93IGluIHRoZSBjaGFpbiB0byBhc3NlcnQgaG93IG11Y2hcbiAgICogZ3JlYXRlciBvZiBhIG51bWJlciBpcyByZXR1cm5lZC4gSXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IHRoZSByZXR1cm5cbiAgICogdmFsdWUgaW5jcmVhc2VkIGJ5IHRoZSBleHBlY3RlZCBhbW91bnQsIHJhdGhlciB0aGFuIGFzc2VydGluZyBpdCBpbmNyZWFzZWRcbiAgICogYnkgYW55IGFtb3VudC5cbiAgICpcbiAgICogICAgIHZhciB2YWwgPSAxXG4gICAqICAgICAgICwgYWRkVHdvID0gZnVuY3Rpb24gKCkgeyB2YWwgKz0gMjsgfVxuICAgKiAgICAgICAsIGdldFZhbCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbDsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKGdldFZhbCkuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5pbmNyZWFzZShnZXRWYWwpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogV2hlbiB0d28gYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgYC5pbmNyZWFzZWAgYXNzZXJ0cyB0aGF0IHRoZSB2YWx1ZSBvZiB0aGVcbiAgICogZ2l2ZW4gb2JqZWN0IGBzdWJqZWN0YCdzIGBwcm9wYCBwcm9wZXJ0eSBpcyBncmVhdGVyIGFmdGVyIGludm9raW5nIHRoZVxuICAgKiB0YXJnZXQgZnVuY3Rpb24gY29tcGFyZWQgdG8gYmVmb3JlaGFuZC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgYWRkVHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgKz0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5pbmNyZWFzZShteU9iaiwgJ3ZhbCcpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogQWRkIGAubm90YCBlYXJsaWVyIGluIHRoZSBjaGFpbiB0byBuZWdhdGUgYC5pbmNyZWFzZWAuIEhvd2V2ZXIsIGl0J3NcbiAgICogZGFuZ2Vyb3VzIHRvIGRvIHNvLiBUaGUgcHJvYmxlbSBpcyB0aGF0IGl0IGNyZWF0ZXMgdW5jZXJ0YWluIGV4cGVjdGF0aW9uc1xuICAgKiBieSBhc3NlcnRpbmcgdGhhdCB0aGUgc3ViamVjdCBlaXRoZXIgZGVjcmVhc2VzLCBvciB0aGF0IGl0IHN0YXlzIHRoZSBzYW1lLlxuICAgKiBJdCdzIG9mdGVuIGJlc3QgdG8gaWRlbnRpZnkgdGhlIGV4YWN0IG91dHB1dCB0aGF0J3MgZXhwZWN0ZWQsIGFuZCB0aGVuXG4gICAqIHdyaXRlIGFuIGFzc2VydGlvbiB0aGF0IG9ubHkgYWNjZXB0cyB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogV2hlbiB0aGUgc3ViamVjdCBpcyBleHBlY3RlZCB0byBkZWNyZWFzZSwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydCB0aGF0IGl0XG4gICAqIGRlY3JlYXNlZCBieSB0aGUgZXhwZWN0ZWQgYW1vdW50LlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBzdWJ0cmFjdFR3byA9IGZ1bmN0aW9uICgpIHsgbXlPYmoudmFsIC09IDI7IH07XG4gICAqXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLmRlY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qoc3VidHJhY3RUd28pLnRvLm5vdC5pbmNyZWFzZShteU9iaiwgJ3ZhbCcpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICogXG4gICAqIFdoZW4gdGhlIHN1YmplY3QgaXMgZXhwZWN0ZWQgdG8gc3RheSB0aGUgc2FtZSwgaXQncyBvZnRlbiBiZXN0IHRvIGFzc2VydFxuICAgKiBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIG5vb3AgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChub29wKS50by5ub3QuY2hhbmdlKG15T2JqLCAndmFsJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3Qobm9vcCkudG8ubm90LmluY3JlYXNlKG15T2JqLCAndmFsJyk7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBgLmluY3JlYXNlYCBhY2NlcHRzIGFuIG9wdGlvbmFsIGBtc2dgIGFyZ3VtZW50IHdoaWNoIGlzIGEgY3VzdG9tIGVycm9yXG4gICAqIG1lc3NhZ2UgdG8gc2hvdyB3aGVuIHRoZSBhc3NlcnRpb24gZmFpbHMuIFRoZSBtZXNzYWdlIGNhbiBhbHNvIGJlIGdpdmVuIGFzXG4gICAqIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuIFdoZW4gbm90IHByb3ZpZGluZyB0d28gYXJndW1lbnRzLCBhbHdheXNcbiAgICogdXNlIHRoZSBzZWNvbmQgZm9ybS5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5vb3ApLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKlxuICAgKiAgICAgdmFyIHZhbCA9IDFcbiAgICogICAgICAgLCBub29wID0gZnVuY3Rpb24gKCkge31cbiAgICogICAgICAgLCBnZXRWYWwgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWw7IH07XG4gICAqXG4gICAqICAgICBleHBlY3Qobm9vcCwgJ25vb28gd2h5IGZhaWw/PycpLnRvLmluY3JlYXNlKGdldFZhbCk7XG4gICAqXG4gICAqIFRoZSBhbGlhcyBgLmluY3JlYXNlc2AgY2FuIGJlIHVzZWQgaW50ZXJjaGFuZ2VhYmx5IHdpdGggYC5pbmNyZWFzZWAuXG4gICAqXG4gICAqIEBuYW1lIGluY3JlYXNlXG4gICAqIEBhbGlhcyBpbmNyZWFzZXNcbiAgICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHN1YmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3AgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtc2cgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBmdW5jdGlvbiBhc3NlcnRJbmNyZWFzZXMgKHN1YmplY3QsIHByb3AsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuICAgIHZhciBmbiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAsIGZsYWdNc2cgPSBmbGFnKHRoaXMsICdtZXNzYWdlJylcbiAgICAgICwgc3NmaSA9IGZsYWcodGhpcywgJ3NzZmknKTtcbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdmdW5jdGlvbicpO1xuXG4gICAgdmFyIGluaXRpYWw7XG4gICAgaWYgKCFwcm9wKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKHN1YmplY3QsIGZsYWdNc2csIHNzZmksIHRydWUpLmlzLmEoJ2Z1bmN0aW9uJyk7XG4gICAgICBpbml0aWFsID0gc3ViamVjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKHN1YmplY3QsIGZsYWdNc2csIHNzZmksIHRydWUpLnRvLmhhdmUucHJvcGVydHkocHJvcCk7XG4gICAgICBpbml0aWFsID0gc3ViamVjdFtwcm9wXTtcbiAgICB9XG5cbiAgICAvLyBNYWtlIHN1cmUgdGhhdCB0aGUgdGFyZ2V0IGlzIGEgbnVtYmVyXG4gICAgbmV3IEFzc2VydGlvbihpbml0aWFsLCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdudW1iZXInKTtcblxuICAgIGZuKCk7XG5cbiAgICB2YXIgZmluYWwgPSBwcm9wID09PSB1bmRlZmluZWQgfHwgcHJvcCA9PT0gbnVsbCA/IHN1YmplY3QoKSA6IHN1YmplY3RbcHJvcF07XG4gICAgdmFyIG1zZ09iaiA9IHByb3AgPT09IHVuZGVmaW5lZCB8fCBwcm9wID09PSBudWxsID8gaW5pdGlhbCA6ICcuJyArIHByb3A7XG5cbiAgICBmbGFnKHRoaXMsICdkZWx0YU1zZ09iaicsIG1zZ09iaik7XG4gICAgZmxhZyh0aGlzLCAnaW5pdGlhbERlbHRhVmFsdWUnLCBpbml0aWFsKTtcbiAgICBmbGFnKHRoaXMsICdmaW5hbERlbHRhVmFsdWUnLCBmaW5hbCk7XG4gICAgZmxhZyh0aGlzLCAnZGVsdGFCZWhhdmlvcicsICdpbmNyZWFzZScpO1xuICAgIGZsYWcodGhpcywgJ3JlYWxEZWx0YScsIGZpbmFsIC0gaW5pdGlhbCk7XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgIGZpbmFsIC0gaW5pdGlhbCA+IDBcbiAgICAgICwgJ2V4cGVjdGVkICcgKyBtc2dPYmogKyAnIHRvIGluY3JlYXNlJ1xuICAgICAgLCAnZXhwZWN0ZWQgJyArIG1zZ09iaiArICcgdG8gbm90IGluY3JlYXNlJ1xuICAgICk7XG4gIH1cblxuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdpbmNyZWFzZScsIGFzc2VydEluY3JlYXNlcyk7XG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2luY3JlYXNlcycsIGFzc2VydEluY3JlYXNlcyk7XG5cbiAgLyoqXG4gICAqICMjIyAuZGVjcmVhc2Uoc3ViamVjdFssIHByb3BbLCBtc2ddXSlcbiAgICpcbiAgICogV2hlbiBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQsIGAuZGVjcmVhc2VgIGFzc2VydHMgdGhhdCB0aGUgZ2l2ZW4gZnVuY3Rpb25cbiAgICogYHN1YmplY3RgIHJldHVybnMgYSBsZXNzZXIgbnVtYmVyIHdoZW4gaXQncyBpbnZva2VkIGFmdGVyIGludm9raW5nIHRoZVxuICAgKiB0YXJnZXQgZnVuY3Rpb24gY29tcGFyZWQgdG8gd2hlbiBpdCdzIGludm9rZWQgYmVmb3JlaGFuZC4gYC5kZWNyZWFzZWAgYWxzb1xuICAgKiBjYXVzZXMgYWxsIGAuYnlgIGFzc2VydGlvbnMgdGhhdCBmb2xsb3cgaW4gdGhlIGNoYWluIHRvIGFzc2VydCBob3cgbXVjaFxuICAgKiBsZXNzZXIgb2YgYSBudW1iZXIgaXMgcmV0dXJuZWQuIEl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCB0aGUgcmV0dXJuXG4gICAqIHZhbHVlIGRlY3JlYXNlZCBieSB0aGUgZXhwZWN0ZWQgYW1vdW50LCByYXRoZXIgdGhhbiBhc3NlcnRpbmcgaXQgZGVjcmVhc2VkXG4gICAqIGJ5IGFueSBhbW91bnQuXG4gICAqXG4gICAqICAgICB2YXIgdmFsID0gMVxuICAgKiAgICAgICAsIHN1YnRyYWN0VHdvID0gZnVuY3Rpb24gKCkgeyB2YWwgLT0gMjsgfVxuICAgKiAgICAgICAsIGdldFZhbCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbDsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8uZGVjcmVhc2UoZ2V0VmFsKS5ieSgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8uZGVjcmVhc2UoZ2V0VmFsKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIFdoZW4gdHdvIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIGAuZGVjcmVhc2VgIGFzc2VydHMgdGhhdCB0aGUgdmFsdWUgb2YgdGhlXG4gICAqIGdpdmVuIG9iamVjdCBgc3ViamVjdGAncyBgcHJvcGAgcHJvcGVydHkgaXMgbGVzc2VyIGFmdGVyIGludm9raW5nIHRoZVxuICAgKiB0YXJnZXQgZnVuY3Rpb24gY29tcGFyZWQgdG8gYmVmb3JlaGFuZC4gXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIHN1YnRyYWN0VHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgLT0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8uZGVjcmVhc2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8uZGVjcmVhc2UobXlPYmosICd2YWwnKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZGVjcmVhc2VgLiBIb3dldmVyLCBpdCdzXG4gICAqIGRhbmdlcm91cyB0byBkbyBzby4gVGhlIHByb2JsZW0gaXMgdGhhdCBpdCBjcmVhdGVzIHVuY2VydGFpbiBleHBlY3RhdGlvbnNcbiAgICogYnkgYXNzZXJ0aW5nIHRoYXQgdGhlIHN1YmplY3QgZWl0aGVyIGluY3JlYXNlcywgb3IgdGhhdCBpdCBzdGF5cyB0aGUgc2FtZS5cbiAgICogSXQncyBvZnRlbiBiZXN0IHRvIGlkZW50aWZ5IHRoZSBleGFjdCBvdXRwdXQgdGhhdCdzIGV4cGVjdGVkLCBhbmQgdGhlblxuICAgKiB3cml0ZSBhbiBhc3NlcnRpb24gdGhhdCBvbmx5IGFjY2VwdHMgdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqIFdoZW4gdGhlIHN1YmplY3QgaXMgZXhwZWN0ZWQgdG8gaW5jcmVhc2UsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgdGhhdCBpdFxuICAgKiBpbmNyZWFzZWQgYnkgdGhlIGV4cGVjdGVkIGFtb3VudC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgYWRkVHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgKz0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5ub3QuZGVjcmVhc2UobXlPYmosICd2YWwnKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqIFxuICAgKiBXaGVuIHRoZSBzdWJqZWN0IGlzIGV4cGVjdGVkIHRvIHN0YXkgdGhlIHNhbWUsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnRcbiAgICogZXhhY3RseSB0aGF0LlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBub29wID0gZnVuY3Rpb24gKCkge307XG4gICAqXG4gICAqICAgICBleHBlY3Qobm9vcCkudG8ubm90LmNoYW5nZShteU9iaiwgJ3ZhbCcpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KG5vb3ApLnRvLm5vdC5kZWNyZWFzZShteU9iaiwgJ3ZhbCcpOyAvLyBOb3QgcmVjb21tZW5kZWRcbiAgICpcbiAgICogYC5kZWNyZWFzZWAgYWNjZXB0cyBhbiBvcHRpb25hbCBgbXNnYCBhcmd1bWVudCB3aGljaCBpcyBhIGN1c3RvbSBlcnJvclxuICAgKiBtZXNzYWdlIHRvIHNob3cgd2hlbiB0aGUgYXNzZXJ0aW9uIGZhaWxzLiBUaGUgbWVzc2FnZSBjYW4gYWxzbyBiZSBnaXZlbiBhc1xuICAgKiB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLiBXaGVuIG5vdCBwcm92aWRpbmcgdHdvIGFyZ3VtZW50cywgYWx3YXlzXG4gICAqIHVzZSB0aGUgc2Vjb25kIGZvcm0uXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIG5vb3AgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICpcbiAgICogICAgIGV4cGVjdChub29wKS50by5kZWNyZWFzZShteU9iaiwgJ3ZhbCcsICdub29vIHdoeSBmYWlsPz8nKTtcbiAgICpcbiAgICogICAgIHZhciB2YWwgPSAxXG4gICAqICAgICAgICwgbm9vcCA9IGZ1bmN0aW9uICgpIHt9XG4gICAqICAgICAgICwgZ2V0VmFsID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KG5vb3AsICdub29vIHdoeSBmYWlsPz8nKS50by5kZWNyZWFzZShnZXRWYWwpO1xuICAgKlxuICAgKiBUaGUgYWxpYXMgYC5kZWNyZWFzZXNgIGNhbiBiZSB1c2VkIGludGVyY2hhbmdlYWJseSB3aXRoIGAuZGVjcmVhc2VgLlxuICAgKlxuICAgKiBAbmFtZSBkZWNyZWFzZVxuICAgKiBAYWxpYXMgZGVjcmVhc2VzXG4gICAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzdWJqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wIG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0RGVjcmVhc2VzIChzdWJqZWN0LCBwcm9wLCBtc2cpIHtcbiAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKTtcbiAgICB2YXIgZm4gPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgLCBmbGFnTXNnID0gZmxhZyh0aGlzLCAnbWVzc2FnZScpXG4gICAgICAsIHNzZmkgPSBmbGFnKHRoaXMsICdzc2ZpJyk7XG4gICAgbmV3IEFzc2VydGlvbihmbiwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkuaXMuYSgnZnVuY3Rpb24nKTtcblxuICAgIHZhciBpbml0aWFsO1xuICAgIGlmICghcHJvcCkge1xuICAgICAgbmV3IEFzc2VydGlvbihzdWJqZWN0LCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS5pcy5hKCdmdW5jdGlvbicpO1xuICAgICAgaW5pdGlhbCA9IHN1YmplY3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3IEFzc2VydGlvbihzdWJqZWN0LCBmbGFnTXNnLCBzc2ZpLCB0cnVlKS50by5oYXZlLnByb3BlcnR5KHByb3ApO1xuICAgICAgaW5pdGlhbCA9IHN1YmplY3RbcHJvcF07XG4gICAgfVxuXG4gICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIHRhcmdldCBpcyBhIG51bWJlclxuICAgIG5ldyBBc3NlcnRpb24oaW5pdGlhbCwgZmxhZ01zZywgc3NmaSwgdHJ1ZSkuaXMuYSgnbnVtYmVyJyk7XG5cbiAgICBmbigpO1xuXG4gICAgdmFyIGZpbmFsID0gcHJvcCA9PT0gdW5kZWZpbmVkIHx8IHByb3AgPT09IG51bGwgPyBzdWJqZWN0KCkgOiBzdWJqZWN0W3Byb3BdO1xuICAgIHZhciBtc2dPYmogPSBwcm9wID09PSB1bmRlZmluZWQgfHwgcHJvcCA9PT0gbnVsbCA/IGluaXRpYWwgOiAnLicgKyBwcm9wO1xuXG4gICAgZmxhZyh0aGlzLCAnZGVsdGFNc2dPYmonLCBtc2dPYmopO1xuICAgIGZsYWcodGhpcywgJ2luaXRpYWxEZWx0YVZhbHVlJywgaW5pdGlhbCk7XG4gICAgZmxhZyh0aGlzLCAnZmluYWxEZWx0YVZhbHVlJywgZmluYWwpO1xuICAgIGZsYWcodGhpcywgJ2RlbHRhQmVoYXZpb3InLCAnZGVjcmVhc2UnKTtcbiAgICBmbGFnKHRoaXMsICdyZWFsRGVsdGEnLCBpbml0aWFsIC0gZmluYWwpO1xuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICBmaW5hbCAtIGluaXRpYWwgPCAwXG4gICAgICAsICdleHBlY3RlZCAnICsgbXNnT2JqICsgJyB0byBkZWNyZWFzZSdcbiAgICAgICwgJ2V4cGVjdGVkICcgKyBtc2dPYmogKyAnIHRvIG5vdCBkZWNyZWFzZSdcbiAgICApO1xuICB9XG5cbiAgQXNzZXJ0aW9uLmFkZE1ldGhvZCgnZGVjcmVhc2UnLCBhc3NlcnREZWNyZWFzZXMpO1xuICBBc3NlcnRpb24uYWRkTWV0aG9kKCdkZWNyZWFzZXMnLCBhc3NlcnREZWNyZWFzZXMpO1xuXG4gIC8qKlxuICAgKiAjIyMgLmJ5KGRlbHRhWywgbXNnXSlcbiAgICpcbiAgICogV2hlbiBmb2xsb3dpbmcgYW4gYC5pbmNyZWFzZWAgYXNzZXJ0aW9uIGluIHRoZSBjaGFpbiwgYC5ieWAgYXNzZXJ0cyB0aGF0XG4gICAqIHRoZSBzdWJqZWN0IG9mIHRoZSBgLmluY3JlYXNlYCBhc3NlcnRpb24gaW5jcmVhc2VkIGJ5IHRoZSBnaXZlbiBgZGVsdGFgLlxuICAgKlxuICAgKiAgICAgdmFyIG15T2JqID0ge3ZhbDogMX1cbiAgICogICAgICAgLCBhZGRUd28gPSBmdW5jdGlvbiAoKSB7IG15T2JqLnZhbCArPSAyOyB9O1xuICAgKlxuICAgKiAgICAgZXhwZWN0KGFkZFR3bykudG8uaW5jcmVhc2UobXlPYmosICd2YWwnKS5ieSgyKTtcbiAgICpcbiAgICogV2hlbiBmb2xsb3dpbmcgYSBgLmRlY3JlYXNlYCBhc3NlcnRpb24gaW4gdGhlIGNoYWluLCBgLmJ5YCBhc3NlcnRzIHRoYXQgdGhlXG4gICAqIHN1YmplY3Qgb2YgdGhlIGAuZGVjcmVhc2VgIGFzc2VydGlvbiBkZWNyZWFzZWQgYnkgdGhlIGdpdmVuIGBkZWx0YWAuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIHN1YnRyYWN0VHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgLT0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChzdWJ0cmFjdFR3bykudG8uZGVjcmVhc2UobXlPYmosICd2YWwnKS5ieSgyKTtcbiAgICpcbiAgICogV2hlbiBmb2xsb3dpbmcgYSBgLmNoYW5nZWAgYXNzZXJ0aW9uIGluIHRoZSBjaGFpbiwgYC5ieWAgYXNzZXJ0cyB0aGF0IHRoZVxuICAgKiBzdWJqZWN0IG9mIHRoZSBgLmNoYW5nZWAgYXNzZXJ0aW9uIGVpdGhlciBpbmNyZWFzZWQgb3IgZGVjcmVhc2VkIGJ5IHRoZVxuICAgKiBnaXZlbiBgZGVsdGFgLiBIb3dldmVyLCBpdCdzIGRhbmdlcm91cyB0byB1c2UgYC5jaGFuZ2UuYnlgLiBUaGUgcHJvYmxlbSBpc1xuICAgKiB0aGF0IGl0IGNyZWF0ZXMgdW5jZXJ0YWluIGV4cGVjdGF0aW9ucy4gSXQncyBvZnRlbiBiZXN0IHRvIGlkZW50aWZ5IHRoZVxuICAgKiBleGFjdCBvdXRwdXQgdGhhdCdzIGV4cGVjdGVkLCBhbmQgdGhlbiB3cml0ZSBhbiBhc3NlcnRpb24gdGhhdCBvbmx5IGFjY2VwdHNcbiAgICogdGhhdCBleGFjdCBvdXRwdXQuXG4gICAqXG4gICAqICAgICB2YXIgbXlPYmogPSB7dmFsOiAxfVxuICAgKiAgICAgICAsIGFkZFR3byA9IGZ1bmN0aW9uICgpIHsgbXlPYmoudmFsICs9IDI7IH1cbiAgICogICAgICAgLCBzdWJ0cmFjdFR3byA9IGZ1bmN0aW9uICgpIHsgbXlPYmoudmFsIC09IDI7IH07XG4gICAqXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5pbmNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KGFkZFR3bykudG8uY2hhbmdlKG15T2JqLCAndmFsJykuYnkoMik7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5kZWNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KHN1YnRyYWN0VHdvKS50by5jaGFuZ2UobXlPYmosICd2YWwnKS5ieSgyKTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuYnlgLiBIb3dldmVyLCBpdCdzIG9mdGVuIGJlc3RcbiAgICogdG8gYXNzZXJ0IHRoYXQgdGhlIHN1YmplY3QgY2hhbmdlZCBieSBpdHMgZXhwZWN0ZWQgZGVsdGEsIHJhdGhlciB0aGFuXG4gICAqIGFzc2VydGluZyB0aGF0IGl0IGRpZG4ndCBjaGFuZ2UgYnkgb25lIG9mIGNvdW50bGVzcyB1bmV4cGVjdGVkIGRlbHRhcy5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgYWRkVHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgKz0gMjsgfTtcbiAgICpcbiAgICogICAgIC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5pbmNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ5KDIpO1xuICAgKlxuICAgKiAgICAgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoYWRkVHdvKS50by5pbmNyZWFzZShteU9iaiwgJ3ZhbCcpLmJ1dC5ub3QuYnkoMyk7XG4gICAqXG4gICAqIGAuYnlgIGFjY2VwdHMgYW4gb3B0aW9uYWwgYG1zZ2AgYXJndW1lbnQgd2hpY2ggaXMgYSBjdXN0b20gZXJyb3IgbWVzc2FnZSB0b1xuICAgKiBzaG93IHdoZW4gdGhlIGFzc2VydGlvbiBmYWlscy4gVGhlIG1lc3NhZ2UgY2FuIGFsc28gYmUgZ2l2ZW4gYXMgdGhlIHNlY29uZFxuICAgKiBhcmd1bWVudCB0byBgZXhwZWN0YC5cbiAgICpcbiAgICogICAgIHZhciBteU9iaiA9IHt2YWw6IDF9XG4gICAqICAgICAgICwgYWRkVHdvID0gZnVuY3Rpb24gKCkgeyBteU9iai52YWwgKz0gMjsgfTtcbiAgICpcbiAgICogICAgIGV4cGVjdChhZGRUd28pLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMywgJ25vb28gd2h5IGZhaWw/PycpO1xuICAgKiAgICAgZXhwZWN0KGFkZFR3bywgJ25vb28gd2h5IGZhaWw/PycpLnRvLmluY3JlYXNlKG15T2JqLCAndmFsJykuYnkoMyk7XG4gICAqXG4gICAqIEBuYW1lIGJ5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbXNnIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgZnVuY3Rpb24gYXNzZXJ0RGVsdGEoZGVsdGEsIG1zZykge1xuICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpO1xuXG4gICAgdmFyIG1zZ09iaiA9IGZsYWcodGhpcywgJ2RlbHRhTXNnT2JqJyk7XG4gICAgdmFyIGluaXRpYWwgPSBmbGFnKHRoaXMsICdpbml0aWFsRGVsdGFWYWx1ZScpO1xuICAgIHZhciBmaW5hbCA9IGZsYWcodGhpcywgJ2ZpbmFsRGVsdGFWYWx1ZScpO1xuICAgIHZhciBiZWhhdmlvciA9IGZsYWcodGhpcywgJ2RlbHRhQmVoYXZpb3InKTtcbiAgICB2YXIgcmVhbERlbHRhID0gZmxhZyh0aGlzLCAncmVhbERlbHRhJyk7XG5cbiAgICB2YXIgZXhwcmVzc2lvbjtcbiAgICBpZiAoYmVoYXZpb3IgPT09ICdjaGFuZ2UnKSB7XG4gICAgICBleHByZXNzaW9uID0gTWF0aC5hYnMoZmluYWwgLSBpbml0aWFsKSA9PT0gTWF0aC5hYnMoZGVsdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHByZXNzaW9uID0gcmVhbERlbHRhID09PSBNYXRoLmFicyhkZWx0YSk7XG4gICAgfVxuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICBleHByZXNzaW9uXG4gICAgICAsICdleHBlY3RlZCAnICsgbXNnT2JqICsgJyB0byAnICsgYmVoYXZpb3IgKyAnIGJ5ICcgKyBkZWx0YVxuICAgICAgLCAnZXhwZWN0ZWQgJyArIG1zZ09iaiArICcgdG8gbm90ICcgKyBiZWhhdmlvciArICcgYnkgJyArIGRlbHRhXG4gICAgKTtcbiAgfVxuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ2J5JywgYXNzZXJ0RGVsdGEpO1xuXG4gIC8qKlxuICAgKiAjIyMgLmV4dGVuc2libGVcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgZXh0ZW5zaWJsZSwgd2hpY2ggbWVhbnMgdGhhdCBuZXcgcHJvcGVydGllcyBjYW5cbiAgICogYmUgYWRkZWQgdG8gaXQuIFByaW1pdGl2ZXMgYXJlIG5ldmVyIGV4dGVuc2libGUuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9KS50by5iZS5leHRlbnNpYmxlO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmV4dGVuc2libGVgLlxuICAgKlxuICAgKiAgICAgdmFyIG5vbkV4dGVuc2libGVPYmplY3QgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pXG4gICAqICAgICAgICwgc2VhbGVkT2JqZWN0ID0gT2JqZWN0LnNlYWwoe30pXG4gICAqICAgICAgICwgZnJvemVuT2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG4gICAqXG4gICAqICAgICBleHBlY3Qobm9uRXh0ZW5zaWJsZU9iamVjdCkudG8ubm90LmJlLmV4dGVuc2libGU7XG4gICAqICAgICBleHBlY3Qoc2VhbGVkT2JqZWN0KS50by5ub3QuYmUuZXh0ZW5zaWJsZTtcbiAgICogICAgIGV4cGVjdChmcm96ZW5PYmplY3QpLnRvLm5vdC5iZS5leHRlbnNpYmxlO1xuICAgKiAgICAgZXhwZWN0KDEpLnRvLm5vdC5iZS5leHRlbnNpYmxlO1xuICAgKlxuICAgKiBBIGN1c3RvbSBlcnJvciBtZXNzYWdlIGNhbiBiZSBnaXZlbiBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGBleHBlY3RgLlxuICAgKlxuICAgKiAgICAgZXhwZWN0KDEsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5leHRlbnNpYmxlO1xuICAgKlxuICAgKiBAbmFtZSBleHRlbnNpYmxlXG4gICAqIEBuYW1lc3BhY2UgQkREXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eSgnZXh0ZW5zaWJsZScsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcblxuICAgIC8vIEluIEVTNSwgaWYgdGhlIGFyZ3VtZW50IHRvIHRoaXMgbWV0aG9kIGlzIGEgcHJpbWl0aXZlLCB0aGVuIGl0IHdpbGwgY2F1c2UgYSBUeXBlRXJyb3IuXG4gICAgLy8gSW4gRVM2LCBhIG5vbi1vYmplY3QgYXJndW1lbnQgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdhcyBhIG5vbi1leHRlbnNpYmxlIG9yZGluYXJ5IG9iamVjdCwgc2ltcGx5IHJldHVybiBmYWxzZS5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNFeHRlbnNpYmxlXG4gICAgLy8gVGhlIGZvbGxvd2luZyBwcm92aWRlcyBFUzYgYmVoYXZpb3IgZm9yIEVTNSBlbnZpcm9ubWVudHMuXG5cbiAgICB2YXIgaXNFeHRlbnNpYmxlID0gb2JqID09PSBPYmplY3Qob2JqKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKG9iaik7XG5cbiAgICB0aGlzLmFzc2VydChcbiAgICAgIGlzRXh0ZW5zaWJsZVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBiZSBleHRlbnNpYmxlJ1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgZXh0ZW5zaWJsZSdcbiAgICApO1xuICB9KTtcblxuICAvKipcbiAgICogIyMjIC5zZWFsZWRcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgc2VhbGVkLCB3aGljaCBtZWFucyB0aGF0IG5ldyBwcm9wZXJ0aWVzIGNhbid0IGJlXG4gICAqIGFkZGVkIHRvIGl0LCBhbmQgaXRzIGV4aXN0aW5nIHByb3BlcnRpZXMgY2FuJ3QgYmUgcmVjb25maWd1cmVkIG9yIGRlbGV0ZWQuXG4gICAqIEhvd2V2ZXIsIGl0J3MgcG9zc2libGUgdGhhdCBpdHMgZXhpc3RpbmcgcHJvcGVydGllcyBjYW4gc3RpbGwgYmUgcmVhc3NpZ25lZFxuICAgKiB0byBkaWZmZXJlbnQgdmFsdWVzLiBQcmltaXRpdmVzIGFyZSBhbHdheXMgc2VhbGVkLlxuICAgKlxuICAgKiAgICAgdmFyIHNlYWxlZE9iamVjdCA9IE9iamVjdC5zZWFsKHt9KTtcbiAgICogICAgIHZhciBmcm96ZW5PYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcbiAgICpcbiAgICogICAgIGV4cGVjdChzZWFsZWRPYmplY3QpLnRvLmJlLnNlYWxlZDtcbiAgICogICAgIGV4cGVjdChmcm96ZW5PYmplY3QpLnRvLmJlLnNlYWxlZDtcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5zZWFsZWQ7XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuc2VhbGVkYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5iZS5zZWFsZWQ7XG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuc2VhbGVkO1xuICAgKlxuICAgKiBAbmFtZSBzZWFsZWRcbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdzZWFsZWQnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG5cbiAgICAvLyBJbiBFUzUsIGlmIHRoZSBhcmd1bWVudCB0byB0aGlzIG1ldGhvZCBpcyBhIHByaW1pdGl2ZSwgdGhlbiBpdCB3aWxsIGNhdXNlIGEgVHlwZUVycm9yLlxuICAgIC8vIEluIEVTNiwgYSBub24tb2JqZWN0IGFyZ3VtZW50IHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3YXMgYSBzZWFsZWQgb3JkaW5hcnkgb2JqZWN0LCBzaW1wbHkgcmV0dXJuIHRydWUuXG4gICAgLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1NlYWxlZFxuICAgIC8vIFRoZSBmb2xsb3dpbmcgcHJvdmlkZXMgRVM2IGJlaGF2aW9yIGZvciBFUzUgZW52aXJvbm1lbnRzLlxuXG4gICAgdmFyIGlzU2VhbGVkID0gb2JqID09PSBPYmplY3Qob2JqKSA/IE9iamVjdC5pc1NlYWxlZChvYmopIDogdHJ1ZTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgaXNTZWFsZWRcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgc2VhbGVkJ1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgc2VhbGVkJ1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmZyb3plblxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBmcm96ZW4sIHdoaWNoIG1lYW5zIHRoYXQgbmV3IHByb3BlcnRpZXMgY2FuJ3QgYmVcbiAgICogYWRkZWQgdG8gaXQsIGFuZCBpdHMgZXhpc3RpbmcgcHJvcGVydGllcyBjYW4ndCBiZSByZWFzc2lnbmVkIHRvIGRpZmZlcmVudFxuICAgKiB2YWx1ZXMsIHJlY29uZmlndXJlZCwgb3IgZGVsZXRlZC4gUHJpbWl0aXZlcyBhcmUgYWx3YXlzIGZyb3plbi5cbiAgICpcbiAgICogICAgIHZhciBmcm96ZW5PYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcbiAgICpcbiAgICogICAgIGV4cGVjdChmcm96ZW5PYmplY3QpLnRvLmJlLmZyb3plbjtcbiAgICogICAgIGV4cGVjdCgxKS50by5iZS5mcm96ZW47XG4gICAqXG4gICAqIEFkZCBgLm5vdGAgZWFybGllciBpbiB0aGUgY2hhaW4gdG8gbmVnYXRlIGAuZnJvemVuYC5cbiAgICpcbiAgICogICAgIGV4cGVjdCh7YTogMX0pLnRvLm5vdC5iZS5mcm96ZW47XG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3Qoe2E6IDF9LCAnbm9vbyB3aHkgZmFpbD8/JykudG8uYmUuZnJvemVuO1xuICAgKlxuICAgKiBAbmFtZSBmcm96ZW5cbiAgICogQG5hbWVzcGFjZSBCRERcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgQXNzZXJ0aW9uLmFkZFByb3BlcnR5KCdmcm96ZW4nLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0Jyk7XG5cbiAgICAvLyBJbiBFUzUsIGlmIHRoZSBhcmd1bWVudCB0byB0aGlzIG1ldGhvZCBpcyBhIHByaW1pdGl2ZSwgdGhlbiBpdCB3aWxsIGNhdXNlIGEgVHlwZUVycm9yLlxuICAgIC8vIEluIEVTNiwgYSBub24tb2JqZWN0IGFyZ3VtZW50IHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3YXMgYSBmcm96ZW4gb3JkaW5hcnkgb2JqZWN0LCBzaW1wbHkgcmV0dXJuIHRydWUuXG4gICAgLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc0Zyb3plblxuICAgIC8vIFRoZSBmb2xsb3dpbmcgcHJvdmlkZXMgRVM2IGJlaGF2aW9yIGZvciBFUzUgZW52aXJvbm1lbnRzLlxuXG4gICAgdmFyIGlzRnJvemVuID0gb2JqID09PSBPYmplY3Qob2JqKSA/IE9iamVjdC5pc0Zyb3plbihvYmopIDogdHJ1ZTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgaXNGcm96ZW5cbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgZnJvemVuJ1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgZnJvemVuJ1xuICAgICk7XG4gIH0pO1xuXG4gIC8qKlxuICAgKiAjIyMgLmZpbml0ZVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBhIG51bWJlciwgYW5kIGlzbid0IGBOYU5gIG9yIHBvc2l0aXZlL25lZ2F0aXZlXG4gICAqIGBJbmZpbml0eWAuXG4gICAqXG4gICAqICAgICBleHBlY3QoMSkudG8uYmUuZmluaXRlO1xuICAgKlxuICAgKiBBZGQgYC5ub3RgIGVhcmxpZXIgaW4gdGhlIGNoYWluIHRvIG5lZ2F0ZSBgLmZpbml0ZWAuIEhvd2V2ZXIsIGl0J3NcbiAgICogZGFuZ2Vyb3VzIHRvIGRvIHNvLiBUaGUgcHJvYmxlbSBpcyB0aGF0IGl0IGNyZWF0ZXMgdW5jZXJ0YWluIGV4cGVjdGF0aW9uc1xuICAgKiBieSBhc3NlcnRpbmcgdGhhdCB0aGUgc3ViamVjdCBlaXRoZXIgaXNuJ3QgYSBudW1iZXIsIG9yIHRoYXQgaXQncyBgTmFOYCwgb3JcbiAgICogdGhhdCBpdCdzIHBvc2l0aXZlIGBJbmZpbml0eWAsIG9yIHRoYXQgaXQncyBuZWdhdGl2ZSBgSW5maW5pdHlgLiBJdCdzIG9mdGVuXG4gICAqIGJlc3QgdG8gaWRlbnRpZnkgdGhlIGV4YWN0IG91dHB1dCB0aGF0J3MgZXhwZWN0ZWQsIGFuZCB0aGVuIHdyaXRlIGFuXG4gICAqIGFzc2VydGlvbiB0aGF0IG9ubHkgYWNjZXB0cyB0aGF0IGV4YWN0IG91dHB1dC5cbiAgICpcbiAgICogV2hlbiB0aGUgdGFyZ2V0IGlzbid0IGV4cGVjdGVkIHRvIGJlIGEgbnVtYmVyLCBpdCdzIG9mdGVuIGJlc3QgdG8gYXNzZXJ0XG4gICAqIHRoYXQgaXQncyB0aGUgZXhwZWN0ZWQgdHlwZSwgcmF0aGVyIHRoYW4gYXNzZXJ0aW5nIHRoYXQgaXQgaXNuJ3Qgb25lIG9mXG4gICAqIG1hbnkgdW5leHBlY3RlZCB0eXBlcy5cbiAgICpcbiAgICogICAgIGV4cGVjdCgnZm9vJykudG8uYmUuYSgnc3RyaW5nJyk7IC8vIFJlY29tbWVuZGVkXG4gICAqICAgICBleHBlY3QoJ2ZvbycpLnRvLm5vdC5iZS5maW5pdGU7IC8vIE5vdCByZWNvbW1lbmRlZFxuICAgKlxuICAgKiBXaGVuIHRoZSB0YXJnZXQgaXMgZXhwZWN0ZWQgdG8gYmUgYE5hTmAsIGl0J3Mgb2Z0ZW4gYmVzdCB0byBhc3NlcnQgZXhhY3RseVxuICAgKiB0aGF0LlxuICAgKlxuICAgKiAgICAgZXhwZWN0KE5hTikudG8uYmUuTmFOOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KE5hTikudG8ubm90LmJlLmZpbml0ZTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBleHBlY3RlZCB0byBiZSBwb3NpdGl2ZSBpbmZpbml0eSwgaXQncyBvZnRlbiBiZXN0IHRvXG4gICAqIGFzc2VydCBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICBleHBlY3QoSW5maW5pdHkpLnRvLmVxdWFsKEluZmluaXR5KTsgLy8gUmVjb21tZW5kZWRcbiAgICogICAgIGV4cGVjdChJbmZpbml0eSkudG8ubm90LmJlLmZpbml0ZTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIFdoZW4gdGhlIHRhcmdldCBpcyBleHBlY3RlZCB0byBiZSBuZWdhdGl2ZSBpbmZpbml0eSwgaXQncyBvZnRlbiBiZXN0IHRvXG4gICAqIGFzc2VydCBleGFjdGx5IHRoYXQuXG4gICAqXG4gICAqICAgICBleHBlY3QoLUluZmluaXR5KS50by5lcXVhbCgtSW5maW5pdHkpOyAvLyBSZWNvbW1lbmRlZFxuICAgKiAgICAgZXhwZWN0KC1JbmZpbml0eSkudG8ubm90LmJlLmZpbml0ZTsgLy8gTm90IHJlY29tbWVuZGVkXG4gICAqXG4gICAqIEEgY3VzdG9tIGVycm9yIG1lc3NhZ2UgY2FuIGJlIGdpdmVuIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gYGV4cGVjdGAuXG4gICAqXG4gICAqICAgICBleHBlY3QoJ2ZvbycsICdub29vIHdoeSBmYWlsPz8nKS50by5iZS5maW5pdGU7XG4gICAqXG4gICAqIEBuYW1lIGZpbml0ZVxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoJ2Zpbml0ZScsIGZ1bmN0aW9uKG1zZykge1xuICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKTtcblxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICB0eXBlb2Ygb2JqID09PSBcIm51bWJlclwiICYmIGlzRmluaXRlKG9iailcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gYmUgYSBmaW5pdGUgbnVtYmVyJ1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgYSBmaW5pdGUgbnVtYmVyJ1xuICAgICk7XG4gIH0pO1xufTtcbiIsIi8qIVxuICogY2hhaVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNoYWksIHV0aWwpIHtcbiAgY2hhaS5leHBlY3QgPSBmdW5jdGlvbiAodmFsLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBjaGFpLkFzc2VydGlvbih2YWwsIG1lc3NhZ2UpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmZhaWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdLCBbb3BlcmF0b3JdKVxuICAgKlxuICAgKiBUaHJvdyBhIGZhaWx1cmUuXG4gICAqXG4gICAqIEBuYW1lIGZhaWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvcGVyYXRvclxuICAgKiBAbmFtZXNwYWNlIEJERFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBjaGFpLmV4cGVjdC5mYWlsID0gZnVuY3Rpb24gKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsIG9wZXJhdG9yKSB7XG4gICAgbWVzc2FnZSA9IG1lc3NhZ2UgfHwgJ2V4cGVjdC5mYWlsKCknO1xuICAgIHRocm93IG5ldyBjaGFpLkFzc2VydGlvbkVycm9yKG1lc3NhZ2UsIHtcbiAgICAgICAgYWN0dWFsOiBhY3R1YWxcbiAgICAgICwgZXhwZWN0ZWQ6IGV4cGVjdGVkXG4gICAgICAsIG9wZXJhdG9yOiBvcGVyYXRvclxuICAgIH0sIGNoYWkuZXhwZWN0LmZhaWwpO1xuICB9O1xufTtcbiIsIi8qIVxuICogY2hhaVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNoYWksIHV0aWwpIHtcbiAgdmFyIEFzc2VydGlvbiA9IGNoYWkuQXNzZXJ0aW9uO1xuXG4gIGZ1bmN0aW9uIGxvYWRTaG91bGQgKCkge1xuICAgIC8vIGV4cGxpY2l0bHkgZGVmaW5lIHRoaXMgbWV0aG9kIGFzIGZ1bmN0aW9uIGFzIHRvIGhhdmUgaXQncyBuYW1lIHRvIGluY2x1ZGUgYXMgYHNzZmlgXG4gICAgZnVuY3Rpb24gc2hvdWxkR2V0dGVyKCkge1xuICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBTdHJpbmdcbiAgICAgICAgICB8fCB0aGlzIGluc3RhbmNlb2YgTnVtYmVyXG4gICAgICAgICAgfHwgdGhpcyBpbnN0YW5jZW9mIEJvb2xlYW5cbiAgICAgICAgICB8fCB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHRoaXMgaW5zdGFuY2VvZiBTeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBc3NlcnRpb24odGhpcy52YWx1ZU9mKCksIG51bGwsIHNob3VsZEdldHRlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IEFzc2VydGlvbih0aGlzLCBudWxsLCBzaG91bGRHZXR0ZXIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzaG91bGRTZXR0ZXIodmFsdWUpIHtcbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vY2hhaWpzL2NoYWkvaXNzdWVzLzg2OiB0aGlzIG1ha2VzXG4gICAgICAvLyBgd2hhdGV2ZXIuc2hvdWxkID0gc29tZVZhbHVlYCBhY3R1YWxseSBzZXQgYHNvbWVWYWx1ZWAsIHdoaWNoIGlzXG4gICAgICAvLyBlc3BlY2lhbGx5IHVzZWZ1bCBmb3IgYGdsb2JhbC5zaG91bGQgPSByZXF1aXJlKCdjaGFpJykuc2hvdWxkKClgLlxuICAgICAgLy9cbiAgICAgIC8vIE5vdGUgdGhhdCB3ZSBoYXZlIHRvIHVzZSBbW0RlZmluZVByb3BlcnR5XV0gaW5zdGVhZCBvZiBbW1B1dF1dXG4gICAgICAvLyBzaW5jZSBvdGhlcndpc2Ugd2Ugd291bGQgdHJpZ2dlciB0aGlzIHZlcnkgc2V0dGVyIVxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzaG91bGQnLCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIG1vZGlmeSBPYmplY3QucHJvdG90eXBlIHRvIGhhdmUgYHNob3VsZGBcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LnByb3RvdHlwZSwgJ3Nob3VsZCcsIHtcbiAgICAgIHNldDogc2hvdWxkU2V0dGVyXG4gICAgICAsIGdldDogc2hvdWxkR2V0dGVyXG4gICAgICAsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuXG4gICAgdmFyIHNob3VsZCA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogIyMjIC5mYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIFttZXNzYWdlXSwgW29wZXJhdG9yXSlcbiAgICAgKlxuICAgICAqIFRocm93IGEgZmFpbHVyZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIGZhaWxcbiAgICAgKiBAcGFyYW0ge01peGVkfSBhY3R1YWxcbiAgICAgKiBAcGFyYW0ge01peGVkfSBleHBlY3RlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9wZXJhdG9yXG4gICAgICogQG5hbWVzcGFjZSBCRERcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuXG4gICAgc2hvdWxkLmZhaWwgPSBmdW5jdGlvbiAoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgb3BlcmF0b3IpIHtcbiAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlIHx8ICdzaG91bGQuZmFpbCgpJztcbiAgICAgIHRocm93IG5ldyBjaGFpLkFzc2VydGlvbkVycm9yKG1lc3NhZ2UsIHtcbiAgICAgICAgICBhY3R1YWw6IGFjdHVhbFxuICAgICAgICAsIGV4cGVjdGVkOiBleHBlY3RlZFxuICAgICAgICAsIG9wZXJhdG9yOiBvcGVyYXRvclxuICAgICAgfSwgc2hvdWxkLmZhaWwpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiAjIyMgLmVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIFttZXNzYWdlXSlcbiAgICAgKlxuICAgICAqIEFzc2VydHMgbm9uLXN0cmljdCBlcXVhbGl0eSAoYD09YCkgb2YgYGFjdHVhbGAgYW5kIGBleHBlY3RlZGAuXG4gICAgICpcbiAgICAgKiAgICAgc2hvdWxkLmVxdWFsKDMsICczJywgJz09IGNvZXJjZXMgdmFsdWVzIHRvIHN0cmluZ3MnKTtcbiAgICAgKlxuICAgICAqIEBuYW1lIGVxdWFsXG4gICAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgICAqIEBuYW1lc3BhY2UgU2hvdWxkXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cblxuICAgIHNob3VsZC5lcXVhbCA9IGZ1bmN0aW9uICh2YWwxLCB2YWwyLCBtc2cpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24odmFsMSwgbXNnKS50by5lcXVhbCh2YWwyKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogIyMjIC50aHJvdyhmdW5jdGlvbiwgW2NvbnN0cnVjdG9yL3N0cmluZy9yZWdleHBdLCBbc3RyaW5nL3JlZ2V4cF0sIFttZXNzYWdlXSlcbiAgICAgKlxuICAgICAqIEFzc2VydHMgdGhhdCBgZnVuY3Rpb25gIHdpbGwgdGhyb3cgYW4gZXJyb3IgdGhhdCBpcyBhbiBpbnN0YW5jZSBvZlxuICAgICAqIGBjb25zdHJ1Y3RvcmAsIG9yIGFsdGVybmF0ZWx5IHRoYXQgaXQgd2lsbCB0aHJvdyBhbiBlcnJvciB3aXRoIG1lc3NhZ2VcbiAgICAgKiBtYXRjaGluZyBgcmVnZXhwYC5cbiAgICAgKlxuICAgICAqICAgICBzaG91bGQudGhyb3coZm4sICdmdW5jdGlvbiB0aHJvd3MgYSByZWZlcmVuY2UgZXJyb3InKTtcbiAgICAgKiAgICAgc2hvdWxkLnRocm93KGZuLCAvZnVuY3Rpb24gdGhyb3dzIGEgcmVmZXJlbmNlIGVycm9yLyk7XG4gICAgICogICAgIHNob3VsZC50aHJvdyhmbiwgUmVmZXJlbmNlRXJyb3IpO1xuICAgICAqICAgICBzaG91bGQudGhyb3coZm4sIFJlZmVyZW5jZUVycm9yLCAnZnVuY3Rpb24gdGhyb3dzIGEgcmVmZXJlbmNlIGVycm9yJyk7XG4gICAgICogICAgIHNob3VsZC50aHJvdyhmbiwgUmVmZXJlbmNlRXJyb3IsIC9mdW5jdGlvbiB0aHJvd3MgYSByZWZlcmVuY2UgZXJyb3IvKTtcbiAgICAgKlxuICAgICAqIEBuYW1lIHRocm93XG4gICAgICogQGFsaWFzIFRocm93XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Vycm9yQ29uc3RydWN0b3J9IGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IHJlZ2V4cFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvciNFcnJvcl90eXBlc1xuICAgICAqIEBuYW1lc3BhY2UgU2hvdWxkXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cblxuICAgIHNob3VsZC5UaHJvdyA9IGZ1bmN0aW9uIChmbiwgZXJydCwgZXJycywgbXNnKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2cpLnRvLlRocm93KGVycnQsIGVycnMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiAjIyMgLmV4aXN0XG4gICAgICpcbiAgICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBuZWl0aGVyIGBudWxsYCBub3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiAgICAgdmFyIGZvbyA9ICdoaSc7XG4gICAgICpcbiAgICAgKiAgICAgc2hvdWxkLmV4aXN0KGZvbywgJ2ZvbyBleGlzdHMnKTtcbiAgICAgKlxuICAgICAqIEBuYW1lIGV4aXN0XG4gICAgICogQG5hbWVzcGFjZSBTaG91bGRcbiAgICAgKiBAYXBpIHB1YmxpY1xuICAgICAqL1xuXG4gICAgc2hvdWxkLmV4aXN0ID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnKS50by5leGlzdDtcbiAgICB9XG5cbiAgICAvLyBuZWdhdGlvblxuICAgIHNob3VsZC5ub3QgPSB7fVxuXG4gICAgLyoqXG4gICAgICogIyMjIC5ub3QuZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdKVxuICAgICAqXG4gICAgICogQXNzZXJ0cyBub24tc3RyaWN0IGluZXF1YWxpdHkgKGAhPWApIG9mIGBhY3R1YWxgIGFuZCBgZXhwZWN0ZWRgLlxuICAgICAqXG4gICAgICogICAgIHNob3VsZC5ub3QuZXF1YWwoMywgNCwgJ3RoZXNlIG51bWJlcnMgYXJlIG5vdCBlcXVhbCcpO1xuICAgICAqXG4gICAgICogQG5hbWUgbm90LmVxdWFsXG4gICAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAgICogQHBhcmFtIHtNaXhlZH0gZXhwZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgICAqIEBuYW1lc3BhY2UgU2hvdWxkXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cblxuICAgIHNob3VsZC5ub3QuZXF1YWwgPSBmdW5jdGlvbiAodmFsMSwgdmFsMiwgbXNnKSB7XG4gICAgICBuZXcgQXNzZXJ0aW9uKHZhbDEsIG1zZykudG8ubm90LmVxdWFsKHZhbDIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiAjIyMgLnRocm93KGZ1bmN0aW9uLCBbY29uc3RydWN0b3IvcmVnZXhwXSwgW21lc3NhZ2VdKVxuICAgICAqXG4gICAgICogQXNzZXJ0cyB0aGF0IGBmdW5jdGlvbmAgd2lsbCBfbm90XyB0aHJvdyBhbiBlcnJvciB0aGF0IGlzIGFuIGluc3RhbmNlIG9mXG4gICAgICogYGNvbnN0cnVjdG9yYCwgb3IgYWx0ZXJuYXRlbHkgdGhhdCBpdCB3aWxsIG5vdCB0aHJvdyBhbiBlcnJvciB3aXRoIG1lc3NhZ2VcbiAgICAgKiBtYXRjaGluZyBgcmVnZXhwYC5cbiAgICAgKlxuICAgICAqICAgICBzaG91bGQubm90LnRocm93KGZuLCBFcnJvciwgJ2Z1bmN0aW9uIGRvZXMgbm90IHRocm93Jyk7XG4gICAgICpcbiAgICAgKiBAbmFtZSBub3QudGhyb3dcbiAgICAgKiBAYWxpYXMgbm90LlRocm93XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Vycm9yQ29uc3RydWN0b3J9IGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IHJlZ2V4cFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvciNFcnJvcl90eXBlc1xuICAgICAqIEBuYW1lc3BhY2UgU2hvdWxkXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cblxuICAgIHNob3VsZC5ub3QuVGhyb3cgPSBmdW5jdGlvbiAoZm4sIGVycnQsIGVycnMsIG1zZykge1xuICAgICAgbmV3IEFzc2VydGlvbihmbiwgbXNnKS50by5ub3QuVGhyb3coZXJydCwgZXJycyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqICMjIyAubm90LmV4aXN0XG4gICAgICpcbiAgICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBuZWl0aGVyIGBudWxsYCBub3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiAgICAgdmFyIGJhciA9IG51bGw7XG4gICAgICpcbiAgICAgKiAgICAgc2hvdWxkLm5vdC5leGlzdChiYXIsICdiYXIgZG9lcyBub3QgZXhpc3QnKTtcbiAgICAgKlxuICAgICAqIEBuYW1lIG5vdC5leGlzdFxuICAgICAqIEBuYW1lc3BhY2UgU2hvdWxkXG4gICAgICogQGFwaSBwdWJsaWNcbiAgICAgKi9cblxuICAgIHNob3VsZC5ub3QuZXhpc3QgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2cpLnRvLm5vdC5leGlzdDtcbiAgICB9XG5cbiAgICBzaG91bGRbJ3Rocm93J10gPSBzaG91bGRbJ1Rocm93J107XG4gICAgc2hvdWxkLm5vdFsndGhyb3cnXSA9IHNob3VsZC5ub3RbJ1Rocm93J107XG5cbiAgICByZXR1cm4gc2hvdWxkO1xuICB9O1xuXG4gIGNoYWkuc2hvdWxkID0gbG9hZFNob3VsZDtcbiAgY2hhaS5TaG91bGQgPSBsb2FkU2hvdWxkO1xufTtcbiIsIi8qIVxuICogY2hhaVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY2hhaSwgdXRpbCkge1xuXG4gIC8qIVxuICAgKiBDaGFpIGRlcGVuZGVuY2llcy5cbiAgICovXG5cbiAgdmFyIEFzc2VydGlvbiA9IGNoYWkuQXNzZXJ0aW9uXG4gICAgLCBmbGFnID0gdXRpbC5mbGFnO1xuXG4gIC8qIVxuICAgKiBNb2R1bGUgZXhwb3J0LlxuICAgKi9cblxuICAvKipcbiAgICogIyMjIGFzc2VydChleHByZXNzaW9uLCBtZXNzYWdlKVxuICAgKlxuICAgKiBXcml0ZSB5b3VyIG93biB0ZXN0IGV4cHJlc3Npb25zLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0KCdmb28nICE9PSAnYmFyJywgJ2ZvbyBpcyBub3QgYmFyJyk7XG4gICAqICAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShbXSksICdlbXB0eSBhcnJheXMgYXJlIGFycmF5cycpO1xuICAgKlxuICAgKiBAcGFyYW0ge01peGVkfSBleHByZXNzaW9uIHRvIHRlc3QgZm9yIHRydXRoaW5lc3NcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgdG8gZGlzcGxheSBvbiBlcnJvclxuICAgKiBAbmFtZSBhc3NlcnRcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgdmFyIGFzc2VydCA9IGNoYWkuYXNzZXJ0ID0gZnVuY3Rpb24gKGV4cHJlc3MsIGVycm1zZykge1xuICAgIHZhciB0ZXN0ID0gbmV3IEFzc2VydGlvbihudWxsLCBudWxsLCBjaGFpLmFzc2VydCwgdHJ1ZSk7XG4gICAgdGVzdC5hc3NlcnQoXG4gICAgICAgIGV4cHJlc3NcbiAgICAgICwgZXJybXNnXG4gICAgICAsICdbIG5lZ2F0aW9uIG1lc3NhZ2UgdW5hdmFpbGFibGUgXSdcbiAgICApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmZhaWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdLCBbb3BlcmF0b3JdKVxuICAgKlxuICAgKiBUaHJvdyBhIGZhaWx1cmUuIE5vZGUuanMgYGFzc2VydGAgbW9kdWxlLWNvbXBhdGlibGUuXG4gICAqXG4gICAqIEBuYW1lIGZhaWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvcGVyYXRvclxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZmFpbCA9IGZ1bmN0aW9uIChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCBvcGVyYXRvcikge1xuICAgIG1lc3NhZ2UgPSBtZXNzYWdlIHx8ICdhc3NlcnQuZmFpbCgpJztcbiAgICB0aHJvdyBuZXcgY2hhaS5Bc3NlcnRpb25FcnJvcihtZXNzYWdlLCB7XG4gICAgICAgIGFjdHVhbDogYWN0dWFsXG4gICAgICAsIGV4cGVjdGVkOiBleHBlY3RlZFxuICAgICAgLCBvcGVyYXRvcjogb3BlcmF0b3JcbiAgICB9LCBhc3NlcnQuZmFpbCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNPayhvYmplY3QsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGlzIHRydXRoeS5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc09rKCdldmVyeXRoaW5nJywgJ2V2ZXJ5dGhpbmcgaXMgb2snKTtcbiAgICogICAgIGFzc2VydC5pc09rKGZhbHNlLCAndGhpcyB3aWxsIGZhaWwnKTtcbiAgICpcbiAgICogQG5hbWUgaXNPa1xuICAgKiBAYWxpYXMgb2tcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0IHRvIHRlc3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzT2sgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNPaywgdHJ1ZSkuaXMub2s7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOb3RPayhvYmplY3QsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGlzIGZhbHN5LlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzTm90T2soJ2V2ZXJ5dGhpbmcnLCAndGhpcyB3aWxsIGZhaWwnKTtcbiAgICogICAgIGFzc2VydC5pc05vdE9rKGZhbHNlLCAndGhpcyB3aWxsIHBhc3MnKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RPa1xuICAgKiBAYWxpYXMgbm90T2tcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0IHRvIHRlc3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90T2sgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RPaywgdHJ1ZSkuaXMubm90Lm9rO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyBub24tc3RyaWN0IGVxdWFsaXR5IChgPT1gKSBvZiBgYWN0dWFsYCBhbmQgYGV4cGVjdGVkYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5lcXVhbCgzLCAnMycsICc9PSBjb2VyY2VzIHZhbHVlcyB0byBzdHJpbmdzJyk7XG4gICAqXG4gICAqIEBuYW1lIGVxdWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGFjdHVhbFxuICAgKiBAcGFyYW0ge01peGVkfSBleHBlY3RlZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZXF1YWwgPSBmdW5jdGlvbiAoYWN0LCBleHAsIG1zZykge1xuICAgIHZhciB0ZXN0ID0gbmV3IEFzc2VydGlvbihhY3QsIG1zZywgYXNzZXJ0LmVxdWFsLCB0cnVlKTtcblxuICAgIHRlc3QuYXNzZXJ0KFxuICAgICAgICBleHAgPT0gZmxhZyh0ZXN0LCAnb2JqZWN0JylcbiAgICAgICwgJ2V4cGVjdGVkICN7dGhpc30gdG8gZXF1YWwgI3tleHB9J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgZXF1YWwgI3thY3R9J1xuICAgICAgLCBleHBcbiAgICAgICwgYWN0XG4gICAgICAsIHRydWVcbiAgICApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyBub24tc3RyaWN0IGluZXF1YWxpdHkgKGAhPWApIG9mIGBhY3R1YWxgIGFuZCBgZXhwZWN0ZWRgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdEVxdWFsKDMsIDQsICd0aGVzZSBudW1iZXJzIGFyZSBub3QgZXF1YWwnKTtcbiAgICpcbiAgICogQG5hbWUgbm90RXF1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RFcXVhbCA9IGZ1bmN0aW9uIChhY3QsIGV4cCwgbXNnKSB7XG4gICAgdmFyIHRlc3QgPSBuZXcgQXNzZXJ0aW9uKGFjdCwgbXNnLCBhc3NlcnQubm90RXF1YWwsIHRydWUpO1xuXG4gICAgdGVzdC5hc3NlcnQoXG4gICAgICAgIGV4cCAhPSBmbGFnKHRlc3QsICdvYmplY3QnKVxuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgZXF1YWwgI3tleHB9J1xuICAgICAgLCAnZXhwZWN0ZWQgI3t0aGlzfSB0byBlcXVhbCAje2FjdH0nXG4gICAgICAsIGV4cFxuICAgICAgLCBhY3RcbiAgICAgICwgdHJ1ZVxuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHN0cmljdCBlcXVhbGl0eSAoYD09PWApIG9mIGBhY3R1YWxgIGFuZCBgZXhwZWN0ZWRgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LnN0cmljdEVxdWFsKHRydWUsIHRydWUsICd0aGVzZSBib29sZWFucyBhcmUgc3RyaWN0bHkgZXF1YWwnKTtcbiAgICpcbiAgICogQG5hbWUgc3RyaWN0RXF1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5zdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIChhY3QsIGV4cCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihhY3QsIG1zZywgYXNzZXJ0LnN0cmljdEVxdWFsLCB0cnVlKS50by5lcXVhbChleHApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyBzdHJpY3QgaW5lcXVhbGl0eSAoYCE9PWApIG9mIGBhY3R1YWxgIGFuZCBgZXhwZWN0ZWRgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsKDMsICczJywgJ25vIGNvZXJjaW9uIGZvciBzdHJpY3QgZXF1YWxpdHknKTtcbiAgICpcbiAgICogQG5hbWUgbm90U3RyaWN0RXF1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIChhY3QsIGV4cCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihhY3QsIG1zZywgYXNzZXJ0Lm5vdFN0cmljdEVxdWFsLCB0cnVlKS50by5ub3QuZXF1YWwoZXhwKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYGFjdHVhbGAgaXMgZGVlcGx5IGVxdWFsIHRvIGBleHBlY3RlZGAuXG4gICAqXG4gICAqICAgICBhc3NlcnQuZGVlcEVxdWFsKHsgdGVhOiAnZ3JlZW4nIH0sIHsgdGVhOiAnZ3JlZW4nIH0pO1xuICAgKlxuICAgKiBAbmFtZSBkZWVwRXF1YWxcbiAgICogQHBhcmFtIHtNaXhlZH0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGV4cGVjdGVkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhbGlhcyBkZWVwU3RyaWN0RXF1YWxcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRlZXBFcXVhbCA9IGFzc2VydC5kZWVwU3RyaWN0RXF1YWwgPSBmdW5jdGlvbiAoYWN0LCBleHAsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oYWN0LCBtc2csIGFzc2VydC5kZWVwRXF1YWwsIHRydWUpLnRvLmVxbChleHApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydCB0aGF0IGBhY3R1YWxgIGlzIG5vdCBkZWVwbHkgZXF1YWwgdG8gYGV4cGVjdGVkYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3REZWVwRXF1YWwoeyB0ZWE6ICdncmVlbicgfSwgeyB0ZWE6ICdqYXNtaW5lJyB9KTtcbiAgICpcbiAgICogQG5hbWUgbm90RGVlcEVxdWFsXG4gICAqIEBwYXJhbSB7TWl4ZWR9IGFjdHVhbFxuICAgKiBAcGFyYW0ge01peGVkfSBleHBlY3RlZFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90RGVlcEVxdWFsID0gZnVuY3Rpb24gKGFjdCwgZXhwLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGFjdCwgbXNnLCBhc3NlcnQubm90RGVlcEVxdWFsLCB0cnVlKS50by5ub3QuZXFsKGV4cCk7XG4gIH07XG5cbiAgIC8qKlxuICAgKiAjIyMgLmlzQWJvdmUodmFsdWVUb0NoZWNrLCB2YWx1ZVRvQmVBYm92ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIGB2YWx1ZVRvQ2hlY2tgIGlzIHN0cmljdGx5IGdyZWF0ZXIgdGhhbiAoPikgYHZhbHVlVG9CZUFib3ZlYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc0Fib3ZlKDUsIDIsICc1IGlzIHN0cmljdGx5IGdyZWF0ZXIgdGhhbiAyJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzQWJvdmVcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVUb0NoZWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlVG9CZUFib3ZlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0Fib3ZlID0gZnVuY3Rpb24gKHZhbCwgYWJ2LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNBYm92ZSwgdHJ1ZSkudG8uYmUuYWJvdmUoYWJ2KTtcbiAgfTtcblxuICAgLyoqXG4gICAqICMjIyAuaXNBdExlYXN0KHZhbHVlVG9DaGVjaywgdmFsdWVUb0JlQXRMZWFzdCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIGB2YWx1ZVRvQ2hlY2tgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAoPj0pIGB2YWx1ZVRvQmVBdExlYXN0YC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc0F0TGVhc3QoNSwgMiwgJzUgaXMgZ3JlYXRlciBvciBlcXVhbCB0byAyJyk7XG4gICAqICAgICBhc3NlcnQuaXNBdExlYXN0KDMsIDMsICczIGlzIGdyZWF0ZXIgb3IgZXF1YWwgdG8gMycpO1xuICAgKlxuICAgKiBAbmFtZSBpc0F0TGVhc3RcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVUb0NoZWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlVG9CZUF0TGVhc3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzQXRMZWFzdCA9IGZ1bmN0aW9uICh2YWwsIGF0bHN0LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNBdExlYXN0LCB0cnVlKS50by5iZS5sZWFzdChhdGxzdCk7XG4gIH07XG5cbiAgIC8qKlxuICAgKiAjIyMgLmlzQmVsb3codmFsdWVUb0NoZWNrLCB2YWx1ZVRvQmVCZWxvdywgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIGB2YWx1ZVRvQ2hlY2tgIGlzIHN0cmljdGx5IGxlc3MgdGhhbiAoPCkgYHZhbHVlVG9CZUJlbG93YC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc0JlbG93KDMsIDYsICczIGlzIHN0cmljdGx5IGxlc3MgdGhhbiA2Jyk7XG4gICAqXG4gICAqIEBuYW1lIGlzQmVsb3dcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVUb0NoZWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlVG9CZUJlbG93XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0JlbG93ID0gZnVuY3Rpb24gKHZhbCwgYmx3LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNCZWxvdywgdHJ1ZSkudG8uYmUuYmVsb3coYmx3KTtcbiAgfTtcblxuICAgLyoqXG4gICAqICMjIyAuaXNBdE1vc3QodmFsdWVUb0NoZWNrLCB2YWx1ZVRvQmVBdE1vc3QsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyBgdmFsdWVUb0NoZWNrYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gKDw9KSBgdmFsdWVUb0JlQXRNb3N0YC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc0F0TW9zdCgzLCA2LCAnMyBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gNicpO1xuICAgKiAgICAgYXNzZXJ0LmlzQXRNb3N0KDQsIDQsICc0IGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byA0Jyk7XG4gICAqXG4gICAqIEBuYW1lIGlzQXRNb3N0XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlVG9DaGVja1xuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVRvQmVBdE1vc3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzQXRNb3N0ID0gZnVuY3Rpb24gKHZhbCwgYXRtc3QsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0F0TW9zdCwgdHJ1ZSkudG8uYmUubW9zdChhdG1zdCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNUcnVlKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIHRydWUuXG4gICAqXG4gICAqICAgICB2YXIgdGVhU2VydmVkID0gdHJ1ZTtcbiAgICogICAgIGFzc2VydC5pc1RydWUodGVhU2VydmVkLCAndGhlIHRlYSBoYXMgYmVlbiBzZXJ2ZWQnKTtcbiAgICpcbiAgICogQG5hbWUgaXNUcnVlXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc1RydWUgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNUcnVlLCB0cnVlKS5pc1sndHJ1ZSddO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90VHJ1ZSh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBub3QgdHJ1ZS5cbiAgICpcbiAgICogICAgIHZhciB0ZWEgPSAndGFzdHkgY2hhaSc7XG4gICAqICAgICBhc3NlcnQuaXNOb3RUcnVlKHRlYSwgJ2dyZWF0LCB0aW1lIGZvciB0ZWEhJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90VHJ1ZVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RUcnVlID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90VHJ1ZSwgdHJ1ZSkudG8ubm90LmVxdWFsKHRydWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzRmFsc2UodmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgZmFsc2UuXG4gICAqXG4gICAqICAgICB2YXIgdGVhU2VydmVkID0gZmFsc2U7XG4gICAqICAgICBhc3NlcnQuaXNGYWxzZSh0ZWFTZXJ2ZWQsICdubyB0ZWEgeWV0PyBobW0uLi4nKTtcbiAgICpcbiAgICogQG5hbWUgaXNGYWxzZVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNGYWxzZSA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0ZhbHNlLCB0cnVlKS5pc1snZmFsc2UnXTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdEZhbHNlKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIG5vdCBmYWxzZS5cbiAgICpcbiAgICogICAgIHZhciB0ZWEgPSAndGFzdHkgY2hhaSc7XG4gICAqICAgICBhc3NlcnQuaXNOb3RGYWxzZSh0ZWEsICdncmVhdCwgdGltZSBmb3IgdGVhIScpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdEZhbHNlXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEZhbHNlID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90RmFsc2UsIHRydWUpLnRvLm5vdC5lcXVhbChmYWxzZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNOdWxsKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIG51bGwuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNOdWxsKGVyciwgJ3RoZXJlIHdhcyBubyBlcnJvcicpO1xuICAgKlxuICAgKiBAbmFtZSBpc051bGxcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTnVsbCA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc051bGwsIHRydWUpLnRvLmVxdWFsKG51bGwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90TnVsbCh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBub3QgbnVsbC5cbiAgICpcbiAgICogICAgIHZhciB0ZWEgPSAndGFzdHkgY2hhaSc7XG4gICAqICAgICBhc3NlcnQuaXNOb3ROdWxsKHRlYSwgJ2dyZWF0LCB0aW1lIGZvciB0ZWEhJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90TnVsbFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3ROdWxsID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90TnVsbCwgdHJ1ZSkudG8ubm90LmVxdWFsKG51bGwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTmFOXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB2YWx1ZSBpcyBOYU4uXG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNOYU4oTmFOLCAnTmFOIGlzIE5hTicpO1xuICAgKlxuICAgKiBAbmFtZSBpc05hTlxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOYU4gPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOYU4sIHRydWUpLnRvLmJlLk5hTjtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdE5hTlxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdmFsdWUgaXMgbm90IE5hTi5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc05vdE5hTig0LCAnNCBpcyBub3QgTmFOJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90TmFOXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBhc3NlcnQuaXNOb3ROYU4gPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3ROYU4sIHRydWUpLm5vdC50by5iZS5OYU47XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZXhpc3RzXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIG5laXRoZXIgYG51bGxgIG5vciBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogICAgIHZhciBmb28gPSAnaGknO1xuICAgKlxuICAgKiAgICAgYXNzZXJ0LmV4aXN0cyhmb28sICdmb28gaXMgbmVpdGhlciBgbnVsbGAgbm9yIGB1bmRlZmluZWRgJyk7XG4gICAqXG4gICAqIEBuYW1lIGV4aXN0c1xuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZXhpc3RzID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmV4aXN0cywgdHJ1ZSkudG8uZXhpc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90RXhpc3RzXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGlzIGVpdGhlciBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqICAgICB2YXIgYmFyID0gbnVsbFxuICAgKiAgICAgICAsIGJhejtcbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RFeGlzdHMoYmFyKTtcbiAgICogICAgIGFzc2VydC5ub3RFeGlzdHMoYmF6LCAnYmF6IGlzIGVpdGhlciBudWxsIG9yIHVuZGVmaW5lZCcpO1xuICAgKlxuICAgKiBAbmFtZSBub3RFeGlzdHNcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdEV4aXN0cyA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5ub3RFeGlzdHMsIHRydWUpLnRvLm5vdC5leGlzdDtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc1VuZGVmaW5lZCh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYC5cbiAgICpcbiAgICogICAgIHZhciB0ZWE7XG4gICAqICAgICBhc3NlcnQuaXNVbmRlZmluZWQodGVhLCAnbm8gdGVhIGRlZmluZWQnKTtcbiAgICpcbiAgICogQG5hbWUgaXNVbmRlZmluZWRcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzVW5kZWZpbmVkID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzVW5kZWZpbmVkLCB0cnVlKS50by5lcXVhbCh1bmRlZmluZWQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzRGVmaW5lZCh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBub3QgYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqICAgICB2YXIgdGVhID0gJ2N1cCBvZiBjaGFpJztcbiAgICogICAgIGFzc2VydC5pc0RlZmluZWQodGVhLCAndGVhIGhhcyBiZWVuIGRlZmluZWQnKTtcbiAgICpcbiAgICogQG5hbWUgaXNEZWZpbmVkXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0RlZmluZWQgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNEZWZpbmVkLCB0cnVlKS50by5ub3QuZXF1YWwodW5kZWZpbmVkKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc0Z1bmN0aW9uKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIGEgZnVuY3Rpb24uXG4gICAqXG4gICAqICAgICBmdW5jdGlvbiBzZXJ2ZVRlYSgpIHsgcmV0dXJuICdjdXAgb2YgdGVhJzsgfTtcbiAgICogICAgIGFzc2VydC5pc0Z1bmN0aW9uKHNlcnZlVGVhLCAnZ3JlYXQsIHdlIGNhbiBoYXZlIHRlYSBub3cnKTtcbiAgICpcbiAgICogQG5hbWUgaXNGdW5jdGlvblxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0Z1bmN0aW9uLCB0cnVlKS50by5iZS5hKCdmdW5jdGlvbicpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90RnVuY3Rpb24odmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgX25vdF8gYSBmdW5jdGlvbi5cbiAgICpcbiAgICogICAgIHZhciBzZXJ2ZVRlYSA9IFsgJ2hlYXQnLCAncG91cicsICdzaXAnIF07XG4gICAqICAgICBhc3NlcnQuaXNOb3RGdW5jdGlvbihzZXJ2ZVRlYSwgJ2dyZWF0LCB3ZSBoYXZlIGxpc3RlZCB0aGUgc3RlcHMnKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RGdW5jdGlvblxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc05vdEZ1bmN0aW9uLCB0cnVlKS50by5ub3QuYmUuYSgnZnVuY3Rpb24nKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc09iamVjdCh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhbiBvYmplY3Qgb2YgdHlwZSAnT2JqZWN0JyAoYXMgcmV2ZWFsZWQgYnkgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgKS5cbiAgICogX1RoZSBhc3NlcnRpb24gZG9lcyBub3QgbWF0Y2ggc3ViY2xhc3NlZCBvYmplY3RzLl9cbiAgICpcbiAgICogICAgIHZhciBzZWxlY3Rpb24gPSB7IG5hbWU6ICdDaGFpJywgc2VydmU6ICd3aXRoIHNwaWNlcycgfTtcbiAgICogICAgIGFzc2VydC5pc09iamVjdChzZWxlY3Rpb24sICd0ZWEgc2VsZWN0aW9uIGlzIGFuIG9iamVjdCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc09iamVjdFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNPYmplY3QgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNPYmplY3QsIHRydWUpLnRvLmJlLmEoJ29iamVjdCcpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90T2JqZWN0KHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIF9ub3RfIGFuIG9iamVjdCBvZiB0eXBlICdPYmplY3QnIChhcyByZXZlYWxlZCBieSBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2ApLlxuICAgKlxuICAgKiAgICAgdmFyIHNlbGVjdGlvbiA9ICdjaGFpJ1xuICAgKiAgICAgYXNzZXJ0LmlzTm90T2JqZWN0KHNlbGVjdGlvbiwgJ3RlYSBzZWxlY3Rpb24gaXMgbm90IGFuIG9iamVjdCcpO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90T2JqZWN0KG51bGwsICdudWxsIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RPYmplY3RcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTm90T2JqZWN0ID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90T2JqZWN0LCB0cnVlKS50by5ub3QuYmUuYSgnb2JqZWN0Jyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNBcnJheSh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhbiBhcnJheS5cbiAgICpcbiAgICogICAgIHZhciBtZW51ID0gWyAnZ3JlZW4nLCAnY2hhaScsICdvb2xvbmcnIF07XG4gICAqICAgICBhc3NlcnQuaXNBcnJheShtZW51LCAnd2hhdCBraW5kIG9mIHRlYSBkbyB3ZSB3YW50PycpO1xuICAgKlxuICAgKiBAbmFtZSBpc0FycmF5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc0FycmF5ID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzQXJyYXksIHRydWUpLnRvLmJlLmFuKCdhcnJheScpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90QXJyYXkodmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgX25vdF8gYW4gYXJyYXkuXG4gICAqXG4gICAqICAgICB2YXIgbWVudSA9ICdncmVlbnxjaGFpfG9vbG9uZyc7XG4gICAqICAgICBhc3NlcnQuaXNOb3RBcnJheShtZW51LCAnd2hhdCBraW5kIG9mIHRlYSBkbyB3ZSB3YW50PycpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdEFycmF5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEFycmF5ID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90QXJyYXksIHRydWUpLnRvLm5vdC5iZS5hbignYXJyYXknKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc1N0cmluZyh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhIHN0cmluZy5cbiAgICpcbiAgICogICAgIHZhciB0ZWFPcmRlciA9ICdjaGFpJztcbiAgICogICAgIGFzc2VydC5pc1N0cmluZyh0ZWFPcmRlciwgJ29yZGVyIHBsYWNlZCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc1N0cmluZ1xuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNTdHJpbmcgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNTdHJpbmcsIHRydWUpLnRvLmJlLmEoJ3N0cmluZycpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90U3RyaW5nKHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGlzIF9ub3RfIGEgc3RyaW5nLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYU9yZGVyID0gNDtcbiAgICogICAgIGFzc2VydC5pc05vdFN0cmluZyh0ZWFPcmRlciwgJ29yZGVyIHBsYWNlZCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdFN0cmluZ1xuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RTdHJpbmcgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RTdHJpbmcsIHRydWUpLnRvLm5vdC5iZS5hKCdzdHJpbmcnKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc051bWJlcih2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhIG51bWJlci5cbiAgICpcbiAgICogICAgIHZhciBjdXBzID0gMjtcbiAgICogICAgIGFzc2VydC5pc051bWJlcihjdXBzLCAnaG93IG1hbnkgY3VwcycpO1xuICAgKlxuICAgKiBAbmFtZSBpc051bWJlclxuICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzTnVtYmVyID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTnVtYmVyLCB0cnVlKS50by5iZS5hKCdudW1iZXInKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdE51bWJlcih2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBfbm90XyBhIG51bWJlci5cbiAgICpcbiAgICogICAgIHZhciBjdXBzID0gJzIgY3VwcyBwbGVhc2UnO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90TnVtYmVyKGN1cHMsICdob3cgbWFueSBjdXBzJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90TnVtYmVyXG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdE51bWJlciA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc05vdE51bWJlciwgdHJ1ZSkudG8ubm90LmJlLmEoJ251bWJlcicpO1xuICB9O1xuXG4gICAvKipcbiAgICogIyMjIC5pc0Zpbml0ZSh2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIuIFVubGlrZSBgLmlzTnVtYmVyYCwgdGhpcyB3aWxsIGZhaWwgZm9yIGBOYU5gIGFuZCBgSW5maW5pdHlgLlxuICAgKlxuICAgKiAgICAgdmFyIGN1cHMgPSAyO1xuICAgKiAgICAgYXNzZXJ0LmlzRmluaXRlKGN1cHMsICdob3cgbWFueSBjdXBzJyk7XG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNGaW5pdGUoTmFOKTsgLy8gdGhyb3dzXG4gICAqXG4gICAqIEBuYW1lIGlzRmluaXRlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNGaW5pdGUgPSBmdW5jdGlvbiAodmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNGaW5pdGUsIHRydWUpLnRvLmJlLmZpbml0ZTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc0Jvb2xlYW4odmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgYSBib29sZWFuLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYVJlYWR5ID0gdHJ1ZVxuICAgKiAgICAgICAsIHRlYVNlcnZlZCA9IGZhbHNlO1xuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzQm9vbGVhbih0ZWFSZWFkeSwgJ2lzIHRoZSB0ZWEgcmVhZHknKTtcbiAgICogICAgIGFzc2VydC5pc0Jvb2xlYW4odGVhU2VydmVkLCAnaGFzIHRlYSBiZWVuIHNlcnZlZCcpO1xuICAgKlxuICAgKiBAbmFtZSBpc0Jvb2xlYW5cbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmlzQm9vbGVhbiA9IGZ1bmN0aW9uICh2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5pc0Jvb2xlYW4sIHRydWUpLnRvLmJlLmEoJ2Jvb2xlYW4nKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdEJvb2xlYW4odmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgaXMgX25vdF8gYSBib29sZWFuLlxuICAgKlxuICAgKiAgICAgdmFyIHRlYVJlYWR5ID0gJ3llcCdcbiAgICogICAgICAgLCB0ZWFTZXJ2ZWQgPSAnbm9wZSc7XG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNOb3RCb29sZWFuKHRlYVJlYWR5LCAnaXMgdGhlIHRlYSByZWFkeScpO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90Qm9vbGVhbih0ZWFTZXJ2ZWQsICdoYXMgdGVhIGJlZW4gc2VydmVkJyk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90Qm9vbGVhblxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RCb29sZWFuID0gZnVuY3Rpb24gKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzTm90Qm9vbGVhbiwgdHJ1ZSkudG8ubm90LmJlLmEoJ2Jvb2xlYW4nKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC50eXBlT2YodmFsdWUsIG5hbWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAncyB0eXBlIGlzIGBuYW1lYCwgYXMgZGV0ZXJtaW5lZCBieVxuICAgKiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAqXG4gICAqICAgICBhc3NlcnQudHlwZU9mKHsgdGVhOiAnY2hhaScgfSwgJ29iamVjdCcsICd3ZSBoYXZlIGFuIG9iamVjdCcpO1xuICAgKiAgICAgYXNzZXJ0LnR5cGVPZihbJ2NoYWknLCAnamFzbWluZSddLCAnYXJyYXknLCAnd2UgaGF2ZSBhbiBhcnJheScpO1xuICAgKiAgICAgYXNzZXJ0LnR5cGVPZigndGVhJywgJ3N0cmluZycsICd3ZSBoYXZlIGEgc3RyaW5nJyk7XG4gICAqICAgICBhc3NlcnQudHlwZU9mKC90ZWEvLCAncmVnZXhwJywgJ3dlIGhhdmUgYSByZWd1bGFyIGV4cHJlc3Npb24nKTtcbiAgICogICAgIGFzc2VydC50eXBlT2YobnVsbCwgJ251bGwnLCAnd2UgaGF2ZSBhIG51bGwnKTtcbiAgICogICAgIGFzc2VydC50eXBlT2YodW5kZWZpbmVkLCAndW5kZWZpbmVkJywgJ3dlIGhhdmUgYW4gdW5kZWZpbmVkJyk7XG4gICAqXG4gICAqIEBuYW1lIHR5cGVPZlxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQudHlwZU9mID0gZnVuY3Rpb24gKHZhbCwgdHlwZSwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LnR5cGVPZiwgdHJ1ZSkudG8uYmUuYSh0eXBlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RUeXBlT2YodmFsdWUsIG5hbWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAncyB0eXBlIGlzIF9ub3RfIGBuYW1lYCwgYXMgZGV0ZXJtaW5lZCBieVxuICAgKiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90VHlwZU9mKCd0ZWEnLCAnbnVtYmVyJywgJ3N0cmluZ3MgYXJlIG5vdCBudW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdFR5cGVPZlxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZW9mIG5hbWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdFR5cGVPZiA9IGZ1bmN0aW9uICh2YWwsIHR5cGUsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24odmFsLCBtc2csIGFzc2VydC5ub3RUeXBlT2YsIHRydWUpLnRvLm5vdC5iZS5hKHR5cGUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmluc3RhbmNlT2Yob2JqZWN0LCBjb25zdHJ1Y3RvciwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHZhbHVlYCBpcyBhbiBpbnN0YW5jZSBvZiBgY29uc3RydWN0b3JgLlxuICAgKlxuICAgKiAgICAgdmFyIFRlYSA9IGZ1bmN0aW9uIChuYW1lKSB7IHRoaXMubmFtZSA9IG5hbWU7IH1cbiAgICogICAgICAgLCBjaGFpID0gbmV3IFRlYSgnY2hhaScpO1xuICAgKlxuICAgKiAgICAgYXNzZXJ0Lmluc3RhbmNlT2YoY2hhaSwgVGVhLCAnY2hhaSBpcyBhbiBpbnN0YW5jZSBvZiB0ZWEnKTtcbiAgICpcbiAgICogQG5hbWUgaW5zdGFuY2VPZlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7Q29uc3RydWN0b3J9IGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pbnN0YW5jZU9mID0gZnVuY3Rpb24gKHZhbCwgdHlwZSwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0Lmluc3RhbmNlT2YsIHRydWUpLnRvLmJlLmluc3RhbmNlT2YodHlwZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90SW5zdGFuY2VPZihvYmplY3QsIGNvbnN0cnVjdG9yLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgYHZhbHVlYCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgYGNvbnN0cnVjdG9yYC5cbiAgICpcbiAgICogICAgIHZhciBUZWEgPSBmdW5jdGlvbiAobmFtZSkgeyB0aGlzLm5hbWUgPSBuYW1lOyB9XG4gICAqICAgICAgICwgY2hhaSA9IG5ldyBTdHJpbmcoJ2NoYWknKTtcbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RJbnN0YW5jZU9mKGNoYWksIFRlYSwgJ2NoYWkgaXMgbm90IGFuIGluc3RhbmNlIG9mIHRlYScpO1xuICAgKlxuICAgKiBAbmFtZSBub3RJbnN0YW5jZU9mXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtDb25zdHJ1Y3Rvcn0gY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdEluc3RhbmNlT2YgPSBmdW5jdGlvbiAodmFsLCB0eXBlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQubm90SW5zdGFuY2VPZiwgdHJ1ZSlcbiAgICAgIC50by5ub3QuYmUuaW5zdGFuY2VPZih0eXBlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pbmNsdWRlKGhheXN0YWNrLCBuZWVkbGUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBoYXlzdGFja2AgaW5jbHVkZXMgYG5lZWRsZWAuIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGVcbiAgICogaW5jbHVzaW9uIG9mIGEgdmFsdWUgaW4gYW4gYXJyYXksIGEgc3Vic3RyaW5nIGluIGEgc3RyaW5nLCBvciBhIHN1YnNldCBvZlxuICAgKiBwcm9wZXJ0aWVzIGluIGFuIG9iamVjdC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pbmNsdWRlKFsxLDIsM10sIDIsICdhcnJheSBjb250YWlucyB2YWx1ZScpO1xuICAgKiAgICAgYXNzZXJ0LmluY2x1ZGUoJ2Zvb2JhcicsICdmb28nLCAnc3RyaW5nIGNvbnRhaW5zIHN1YnN0cmluZycpO1xuICAgKiAgICAgYXNzZXJ0LmluY2x1ZGUoeyBmb286ICdiYXInLCBoZWxsbzogJ3VuaXZlcnNlJyB9LCB7IGZvbzogJ2JhcicgfSwgJ29iamVjdCBjb250YWlucyBwcm9wZXJ0eScpO1xuICAgKlxuICAgKiBTdHJpY3QgZXF1YWxpdHkgKD09PSkgaXMgdXNlZC4gV2hlbiBhc3NlcnRpbmcgdGhlIGluY2x1c2lvbiBvZiBhIHZhbHVlIGluXG4gICAqIGFuIGFycmF5LCB0aGUgYXJyYXkgaXMgc2VhcmNoZWQgZm9yIGFuIGVsZW1lbnQgdGhhdCdzIHN0cmljdGx5IGVxdWFsIHRvIHRoZVxuICAgKiBnaXZlbiB2YWx1ZS4gV2hlbiBhc3NlcnRpbmcgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhbiBvYmplY3QsIHRoZSBvYmplY3RcbiAgICogaXMgc2VhcmNoZWQgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eSBrZXlzLCBjaGVja2luZyB0aGF0IGVhY2ggb25lIGlzIHByZXNlbnRcbiAgICogYW5kIHN0cmljdHkgZXF1YWwgdG8gdGhlIGdpdmVuIHByb3BlcnR5IHZhbHVlLiBGb3IgaW5zdGFuY2U6XG4gICAqXG4gICAqICAgICB2YXIgb2JqMSA9IHthOiAxfVxuICAgKiAgICAgICAsIG9iajIgPSB7YjogMn07XG4gICAqICAgICBhc3NlcnQuaW5jbHVkZShbb2JqMSwgb2JqMl0sIG9iajEpO1xuICAgKiAgICAgYXNzZXJ0LmluY2x1ZGUoe2Zvbzogb2JqMSwgYmFyOiBvYmoyfSwge2Zvbzogb2JqMX0pO1xuICAgKiAgICAgYXNzZXJ0LmluY2x1ZGUoe2Zvbzogb2JqMSwgYmFyOiBvYmoyfSwge2Zvbzogb2JqMSwgYmFyOiBvYmoyfSk7XG4gICAqXG4gICAqIEBuYW1lIGluY2x1ZGVcbiAgICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG5lZWRsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaW5jbHVkZSA9IGZ1bmN0aW9uIChleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0LmluY2x1ZGUsIHRydWUpLmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RJbmNsdWRlKGhheXN0YWNrLCBuZWVkbGUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBoYXlzdGFja2AgZG9lcyBub3QgaW5jbHVkZSBgbmVlZGxlYC4gQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0XG4gICAqIHRoZSBhYnNlbmNlIG9mIGEgdmFsdWUgaW4gYW4gYXJyYXksIGEgc3Vic3RyaW5nIGluIGEgc3RyaW5nLCBvciBhIHN1YnNldCBvZlxuICAgKiBwcm9wZXJ0aWVzIGluIGFuIG9iamVjdC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlKFsxLDIsM10sIDQsICdhcnJheSBkb2Vzbid0IGNvbnRhaW4gdmFsdWUnKTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlKCdmb29iYXInLCAnYmF6JywgJ3N0cmluZyBkb2Vzbid0IGNvbnRhaW4gc3Vic3RyaW5nJyk7XG4gICAqICAgICBhc3NlcnQubm90SW5jbHVkZSh7IGZvbzogJ2JhcicsIGhlbGxvOiAndW5pdmVyc2UnIH0sIHsgZm9vOiAnYmF6JyB9LCAnb2JqZWN0IGRvZXNuJ3QgY29udGFpbiBwcm9wZXJ0eScpO1xuICAgKlxuICAgKiBTdHJpY3QgZXF1YWxpdHkgKD09PSkgaXMgdXNlZC4gV2hlbiBhc3NlcnRpbmcgdGhlIGFic2VuY2Ugb2YgYSB2YWx1ZSBpbiBhblxuICAgKiBhcnJheSwgdGhlIGFycmF5IGlzIHNlYXJjaGVkIHRvIGNvbmZpcm0gdGhlIGFic2VuY2Ugb2YgYW4gZWxlbWVudCB0aGF0J3NcbiAgICogc3RyaWN0bHkgZXF1YWwgdG8gdGhlIGdpdmVuIHZhbHVlLiBXaGVuIGFzc2VydGluZyBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluXG4gICAqIGFuIG9iamVjdCwgdGhlIG9iamVjdCBpcyBzZWFyY2hlZCB0byBjb25maXJtIHRoYXQgYXQgbGVhc3Qgb25lIG9mIHRoZSBnaXZlblxuICAgKiBwcm9wZXJ0eSBrZXlzIGlzIGVpdGhlciBub3QgcHJlc2VudCBvciBub3Qgc3RyaWN0bHkgZXF1YWwgdG8gdGhlIGdpdmVuXG4gICAqIHByb3BlcnR5IHZhbHVlLiBGb3IgaW5zdGFuY2U6XG4gICAqXG4gICAqICAgICB2YXIgb2JqMSA9IHthOiAxfVxuICAgKiAgICAgICAsIG9iajIgPSB7YjogMn07XG4gICAqICAgICBhc3NlcnQubm90SW5jbHVkZShbb2JqMSwgb2JqMl0sIHthOiAxfSk7XG4gICAqICAgICBhc3NlcnQubm90SW5jbHVkZSh7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9LCB7Zm9vOiB7YTogMX19KTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlKHtmb286IG9iajEsIGJhcjogb2JqMn0sIHtmb286IG9iajEsIGJhcjoge2I6IDJ9fSk7XG4gICAqXG4gICAqIEBuYW1lIG5vdEluY2x1ZGVcbiAgICogQHBhcmFtIHtBcnJheXxTdHJpbmd9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG5lZWRsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90SW5jbHVkZSA9IGZ1bmN0aW9uIChleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lm5vdEluY2x1ZGUsIHRydWUpLm5vdC5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZGVlcEluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYGhheXN0YWNrYCBpbmNsdWRlcyBgbmVlZGxlYC4gQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZVxuICAgKiBpbmNsdXNpb24gb2YgYSB2YWx1ZSBpbiBhbiBhcnJheSBvciBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIG9iamVjdC5cbiAgICogRGVlcCBlcXVhbGl0eSBpcyB1c2VkLlxuICAgKlxuICAgKiAgICAgdmFyIG9iajEgPSB7YTogMX1cbiAgICogICAgICAgLCBvYmoyID0ge2I6IDJ9O1xuICAgKiAgICAgYXNzZXJ0LmRlZXBJbmNsdWRlKFtvYmoxLCBvYmoyXSwge2E6IDF9KTtcbiAgICogICAgIGFzc2VydC5kZWVwSW5jbHVkZSh7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9LCB7Zm9vOiB7YTogMX19KTtcbiAgICogICAgIGFzc2VydC5kZWVwSW5jbHVkZSh7Zm9vOiBvYmoxLCBiYXI6IG9iajJ9LCB7Zm9vOiB7YTogMX0sIGJhcjoge2I6IDJ9fSk7XG4gICAqXG4gICAqIEBuYW1lIGRlZXBJbmNsdWRlXG4gICAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge01peGVkfSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRlZXBJbmNsdWRlID0gZnVuY3Rpb24gKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQuZGVlcEluY2x1ZGUsIHRydWUpLmRlZXAuaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdERlZXBJbmNsdWRlKGhheXN0YWNrLCBuZWVkbGUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBoYXlzdGFja2AgZG9lcyBub3QgaW5jbHVkZSBgbmVlZGxlYC4gQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0XG4gICAqIHRoZSBhYnNlbmNlIG9mIGEgdmFsdWUgaW4gYW4gYXJyYXkgb3IgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhbiBvYmplY3QuXG4gICAqIERlZXAgZXF1YWxpdHkgaXMgdXNlZC5cbiAgICpcbiAgICogICAgIHZhciBvYmoxID0ge2E6IDF9XG4gICAqICAgICAgICwgb2JqMiA9IHtiOiAyfTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwSW5jbHVkZShbb2JqMSwgb2JqMl0sIHthOiA5fSk7XG4gICAqICAgICBhc3NlcnQubm90RGVlcEluY2x1ZGUoe2Zvbzogb2JqMSwgYmFyOiBvYmoyfSwge2Zvbzoge2E6IDl9fSk7XG4gICAqICAgICBhc3NlcnQubm90RGVlcEluY2x1ZGUoe2Zvbzogb2JqMSwgYmFyOiBvYmoyfSwge2Zvbzoge2E6IDF9LCBiYXI6IHtiOiA5fX0pO1xuICAgKlxuICAgKiBAbmFtZSBub3REZWVwSW5jbHVkZVxuICAgKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gaGF5c3RhY2tcbiAgICogQHBhcmFtIHtNaXhlZH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3REZWVwSW5jbHVkZSA9IGZ1bmN0aW9uIChleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lm5vdERlZXBJbmNsdWRlLCB0cnVlKS5ub3QuZGVlcC5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubmVzdGVkSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqIFxuICAgKiBBc3NlcnRzIHRoYXQgJ2hheXN0YWNrJyBpbmNsdWRlcyAnbmVlZGxlJy4gXG4gICAqIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGUgaW5jbHVzaW9uIG9mIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW4gXG4gICAqIG9iamVjdC5cbiAgICogRW5hYmxlcyB0aGUgdXNlIG9mIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yIHJlZmVyZW5jaW5nIG5lc3RlZCBcbiAgICogcHJvcGVydGllcy5cbiAgICogJ1tdJyBhbmQgJy4nIGluIHByb3BlcnR5IG5hbWVzIGNhbiBiZSBlc2NhcGVkIHVzaW5nIGRvdWJsZSBiYWNrc2xhc2hlcy5cbiAgICogXG4gICAqICAgICBhc3NlcnQubmVzdGVkSW5jbHVkZSh7Jy5hJzogeydiJzogJ3gnfX0sIHsnXFxcXC5hLltiXSc6ICd4J30pO1xuICAgKiAgICAgYXNzZXJ0Lm5lc3RlZEluY2x1ZGUoeydhJzogeydbYl0nOiAneCd9fSwgeydhLlxcXFxbYlxcXFxdJzogJ3gnfSk7XG4gICAqIFxuICAgKiBAbmFtZSBuZXN0ZWRJbmNsdWRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge09iamVjdH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljIFxuICAgKi8gXG5cbiAgYXNzZXJ0Lm5lc3RlZEluY2x1ZGUgPSBmdW5jdGlvbiAoZXhwLCBpbmMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5uZXN0ZWRJbmNsdWRlLCB0cnVlKS5uZXN0ZWQuaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdE5lc3RlZEluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKiBcbiAgICogQXNzZXJ0cyB0aGF0ICdoYXlzdGFjaycgZG9lcyBub3QgaW5jbHVkZSAnbmVlZGxlJy4gXG4gICAqIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGUgYWJzZW5jZSBvZiBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIFxuICAgKiBvYmplY3QuXG4gICAqIEVuYWJsZXMgdGhlIHVzZSBvZiBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvciByZWZlcmVuY2luZyBuZXN0ZWQgXG4gICAqIHByb3BlcnRpZXMuIFxuICAgKiAnW10nIGFuZCAnLicgaW4gcHJvcGVydHkgbmFtZXMgY2FuIGJlIGVzY2FwZWQgdXNpbmcgZG91YmxlIGJhY2tzbGFzaGVzLlxuICAgKiBcbiAgICogICAgIGFzc2VydC5ub3ROZXN0ZWRJbmNsdWRlKHsnLmEnOiB7J2InOiAneCd9fSwgeydcXFxcLmEuYic6ICd5J30pO1xuICAgKiAgICAgYXNzZXJ0Lm5vdE5lc3RlZEluY2x1ZGUoeydhJzogeydbYl0nOiAneCd9fSwgeydhLlxcXFxbYlxcXFxdJzogJ3knfSk7XG4gICAqIFxuICAgKiBAbmFtZSBub3ROZXN0ZWRJbmNsdWRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge09iamVjdH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljIFxuICAgKi8gXG5cbiAgYXNzZXJ0Lm5vdE5lc3RlZEluY2x1ZGUgPSBmdW5jdGlvbiAoZXhwLCBpbmMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5ub3ROZXN0ZWRJbmNsdWRlLCB0cnVlKVxuICAgICAgLm5vdC5uZXN0ZWQuaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmRlZXBOZXN0ZWRJbmNsdWRlKGhheXN0YWNrLCBuZWVkbGUsIFttZXNzYWdlXSlcbiAgICogXG4gICAqIEFzc2VydHMgdGhhdCAnaGF5c3RhY2snIGluY2x1ZGVzICduZWVkbGUnLlxuICAgKiBDYW4gYmUgdXNlZCB0byBhc3NlcnQgdGhlIGluY2x1c2lvbiBvZiBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIFxuICAgKiBvYmplY3Qgd2hpbGUgY2hlY2tpbmcgZm9yIGRlZXAgZXF1YWxpdHkuXG4gICAqIEVuYWJsZXMgdGhlIHVzZSBvZiBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvciByZWZlcmVuY2luZyBuZXN0ZWQgXG4gICAqIHByb3BlcnRpZXMuXG4gICAqICdbXScgYW5kICcuJyBpbiBwcm9wZXJ0eSBuYW1lcyBjYW4gYmUgZXNjYXBlZCB1c2luZyBkb3VibGUgYmFja3NsYXNoZXMuXG4gICAqIFxuICAgKiAgICAgYXNzZXJ0LmRlZXBOZXN0ZWRJbmNsdWRlKHthOiB7YjogW3t4OiAxfV19fSwgeydhLmJbMF0nOiB7eDogMX19KTtcbiAgICogICAgIGFzc2VydC5kZWVwTmVzdGVkSW5jbHVkZSh7Jy5hJzogeydbYl0nOiB7eDogMX19fSwgeydcXFxcLmEuXFxcXFtiXFxcXF0nOiB7eDogMX19KTtcbiAgICogICAgXG4gICAqIEBuYW1lIGRlZXBOZXN0ZWRJbmNsdWRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge09iamVjdH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljIFxuICAgKi9cblxuICBhc3NlcnQuZGVlcE5lc3RlZEluY2x1ZGUgPSBmdW5jdGlvbihleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0LmRlZXBOZXN0ZWRJbmNsdWRlLCB0cnVlKVxuICAgICAgLmRlZXAubmVzdGVkLmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3REZWVwTmVzdGVkSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqIFxuICAgKiBBc3NlcnRzIHRoYXQgJ2hheXN0YWNrJyBkb2VzIG5vdCBpbmNsdWRlICduZWVkbGUnLlxuICAgKiBDYW4gYmUgdXNlZCB0byBhc3NlcnQgdGhlIGFic2VuY2Ugb2YgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhbiBcbiAgICogb2JqZWN0IHdoaWxlIGNoZWNraW5nIGZvciBkZWVwIGVxdWFsaXR5LlxuICAgKiBFbmFibGVzIHRoZSB1c2Ugb2YgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiBmb3IgcmVmZXJlbmNpbmcgbmVzdGVkIFxuICAgKiBwcm9wZXJ0aWVzLlxuICAgKiAnW10nIGFuZCAnLicgaW4gcHJvcGVydHkgbmFtZXMgY2FuIGJlIGVzY2FwZWQgdXNpbmcgZG91YmxlIGJhY2tzbGFzaGVzLlxuICAgKiBcbiAgICogICAgIGFzc2VydC5ub3REZWVwTmVzdGVkSW5jbHVkZSh7YToge2I6IFt7eDogMX1dfX0sIHsnYS5iWzBdJzoge3k6IDF9fSlcbiAgICogICAgIGFzc2VydC5ub3REZWVwTmVzdGVkSW5jbHVkZSh7Jy5hJzogeydbYl0nOiB7eDogMX19fSwgeydcXFxcLmEuXFxcXFtiXFxcXF0nOiB7eTogMn19KTtcbiAgICogICAgXG4gICAqIEBuYW1lIG5vdERlZXBOZXN0ZWRJbmNsdWRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge09iamVjdH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljIFxuICAgKi9cblxuICBhc3NlcnQubm90RGVlcE5lc3RlZEluY2x1ZGUgPSBmdW5jdGlvbihleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0Lm5vdERlZXBOZXN0ZWRJbmNsdWRlLCB0cnVlKVxuICAgICAgLm5vdC5kZWVwLm5lc3RlZC5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAub3duSW5jbHVkZShoYXlzdGFjaywgbmVlZGxlLCBbbWVzc2FnZV0pXG4gICAqIFxuICAgKiBBc3NlcnRzIHRoYXQgJ2hheXN0YWNrJyBpbmNsdWRlcyAnbmVlZGxlJy5cbiAgICogQ2FuIGJlIHVzZWQgdG8gYXNzZXJ0IHRoZSBpbmNsdXNpb24gb2YgYSBzdWJzZXQgb2YgcHJvcGVydGllcyBpbiBhbiBcbiAgICogb2JqZWN0IHdoaWxlIGlnbm9yaW5nIGluaGVyaXRlZCBwcm9wZXJ0aWVzLlxuICAgKiBcbiAgICogICAgIGFzc2VydC5vd25JbmNsdWRlKHsgYTogMSB9LCB7IGE6IDEgfSk7XG4gICAqIFxuICAgKiBAbmFtZSBvd25JbmNsdWRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYXlzdGFja1xuICAgKiBAcGFyYW0ge09iamVjdH0gbmVlZGxlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5vd25JbmNsdWRlID0gZnVuY3Rpb24oZXhwLCBpbmMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5vd25JbmNsdWRlLCB0cnVlKS5vd24uaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdE93bkluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKiBcbiAgICogQXNzZXJ0cyB0aGF0ICdoYXlzdGFjaycgaW5jbHVkZXMgJ25lZWRsZScuXG4gICAqIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGUgYWJzZW5jZSBvZiBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIFxuICAgKiBvYmplY3Qgd2hpbGUgaWdub3JpbmcgaW5oZXJpdGVkIHByb3BlcnRpZXMuXG4gICAqIFxuICAgKiAgICAgT2JqZWN0LnByb3RvdHlwZS5iID0gMjtcbiAgICogXG4gICAqICAgICBhc3NlcnQubm90T3duSW5jbHVkZSh7IGE6IDEgfSwgeyBiOiAyIH0pO1xuICAgKiBcbiAgICogQG5hbWUgbm90T3duSW5jbHVkZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaGF5c3RhY2tcbiAgICogQHBhcmFtIHtPYmplY3R9IG5lZWRsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90T3duSW5jbHVkZSA9IGZ1bmN0aW9uKGV4cCwgaW5jLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubm90T3duSW5jbHVkZSwgdHJ1ZSkubm90Lm93bi5pbmNsdWRlKGluYyk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuZGVlcE93bkluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKiBcbiAgICogQXNzZXJ0cyB0aGF0ICdoYXlzdGFjaycgaW5jbHVkZXMgJ25lZWRsZScuXG4gICAqIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGUgaW5jbHVzaW9uIG9mIGEgc3Vic2V0IG9mIHByb3BlcnRpZXMgaW4gYW4gXG4gICAqIG9iamVjdCB3aGlsZSBpZ25vcmluZyBpbmhlcml0ZWQgcHJvcGVydGllcyBhbmQgY2hlY2tpbmcgZm9yIGRlZXAgZXF1YWxpdHkuXG4gICAqIFxuICAgKiAgICAgIGFzc2VydC5kZWVwT3duSW5jbHVkZSh7YToge2I6IDJ9fSwge2E6IHtiOiAyfX0pO1xuICAgKiAgICAgIFxuICAgKiBAbmFtZSBkZWVwT3duSW5jbHVkZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaGF5c3RhY2tcbiAgICogQHBhcmFtIHtPYmplY3R9IG5lZWRsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZGVlcE93bkluY2x1ZGUgPSBmdW5jdGlvbihleHAsIGluYywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihleHAsIG1zZywgYXNzZXJ0LmRlZXBPd25JbmNsdWRlLCB0cnVlKVxuICAgICAgLmRlZXAub3duLmluY2x1ZGUoaW5jKTtcbiAgfTtcblxuICAgLyoqXG4gICAqICMjIyAubm90RGVlcE93bkluY2x1ZGUoaGF5c3RhY2ssIG5lZWRsZSwgW21lc3NhZ2VdKVxuICAgKiBcbiAgICogQXNzZXJ0cyB0aGF0ICdoYXlzdGFjaycgaW5jbHVkZXMgJ25lZWRsZScuXG4gICAqIENhbiBiZSB1c2VkIHRvIGFzc2VydCB0aGUgYWJzZW5jZSBvZiBhIHN1YnNldCBvZiBwcm9wZXJ0aWVzIGluIGFuIFxuICAgKiBvYmplY3Qgd2hpbGUgaWdub3JpbmcgaW5oZXJpdGVkIHByb3BlcnRpZXMgYW5kIGNoZWNraW5nIGZvciBkZWVwIGVxdWFsaXR5LlxuICAgKiBcbiAgICogICAgICBhc3NlcnQubm90RGVlcE93bkluY2x1ZGUoe2E6IHtiOiAyfX0sIHthOiB7YzogM319KTtcbiAgICogICAgICBcbiAgICogQG5hbWUgbm90RGVlcE93bkluY2x1ZGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGhheXN0YWNrXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBuZWVkbGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdERlZXBPd25JbmNsdWRlID0gZnVuY3Rpb24oZXhwLCBpbmMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5ub3REZWVwT3duSW5jbHVkZSwgdHJ1ZSlcbiAgICAgIC5ub3QuZGVlcC5vd24uaW5jbHVkZShpbmMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm1hdGNoKHZhbHVlLCByZWdleHAsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGB2YWx1ZWAgbWF0Y2hlcyB0aGUgcmVndWxhciBleHByZXNzaW9uIGByZWdleHBgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm1hdGNoKCdmb29iYXInLCAvXmZvby8sICdyZWdleHAgbWF0Y2hlcycpO1xuICAgKlxuICAgKiBAbmFtZSBtYXRjaFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXhwXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5tYXRjaCA9IGZ1bmN0aW9uIChleHAsIHJlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubWF0Y2gsIHRydWUpLnRvLm1hdGNoKHJlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RNYXRjaCh2YWx1ZSwgcmVnZXhwLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgdmFsdWVgIGRvZXMgbm90IG1hdGNoIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYHJlZ2V4cGAuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90TWF0Y2goJ2Zvb2JhcicsIC9eZm9vLywgJ3JlZ2V4cCBkb2VzIG5vdCBtYXRjaCcpO1xuICAgKlxuICAgKiBAbmFtZSBub3RNYXRjaFxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXhwXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RNYXRjaCA9IGZ1bmN0aW9uIChleHAsIHJlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGV4cCwgbXNnLCBhc3NlcnQubm90TWF0Y2gsIHRydWUpLnRvLm5vdC5tYXRjaChyZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAucHJvcGVydHkob2JqZWN0LCBwcm9wZXJ0eSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lZCBieVxuICAgKiBgcHJvcGVydHlgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LnByb3BlcnR5KHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ3RlYScpO1xuICAgKiAgICAgYXNzZXJ0LnByb3BlcnR5KHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ3RvU3RyaW5nJyk7XG4gICAqXG4gICAqIEBuYW1lIHByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5wcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIHByb3AsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5wcm9wZXJ0eSwgdHJ1ZSkudG8uaGF2ZS5wcm9wZXJ0eShwcm9wKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RQcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVkXG4gICAqIGJ5IGBwcm9wZXJ0eWAuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90UHJvcGVydHkoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAnY29mZmVlJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdFByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIHByb3AsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3RQcm9wZXJ0eSwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5wcm9wZXJ0eShwcm9wKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5wcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lZCBieVxuICAgKiBgcHJvcGVydHlgIHdpdGggYSB2YWx1ZSBnaXZlbiBieSBgdmFsdWVgLiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrXG4gICAqICg9PT0pLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LnByb3BlcnR5VmFsKHsgdGVhOiAnaXMgZ29vZCcgfSwgJ3RlYScsICdpcyBnb29kJyk7XG4gICAqXG4gICAqIEBuYW1lIHByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5wcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LnByb3BlcnR5VmFsLCB0cnVlKVxuICAgICAgLnRvLmhhdmUucHJvcGVydHkocHJvcCwgdmFsKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3RQcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgZG9lcyBfbm90XyBoYXZlIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lZFxuICAgKiBieSBgcHJvcGVydHlgIHdpdGggdmFsdWUgZ2l2ZW4gYnkgYHZhbHVlYC4gVXNlcyBhIHN0cmljdCBlcXVhbGl0eSBjaGVja1xuICAgKiAoPT09KS5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RQcm9wZXJ0eVZhbCh7IHRlYTogJ2lzIGdvb2QnIH0sICd0ZWEnLCAnaXMgYmFkJyk7XG4gICAqICAgICBhc3NlcnQubm90UHJvcGVydHlWYWwoeyB0ZWE6ICdpcyBnb29kJyB9LCAnY29mZmVlJywgJ2lzIGdvb2QnKTtcbiAgICpcbiAgICogQG5hbWUgbm90UHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdFByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQubm90UHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUucHJvcGVydHkocHJvcCwgdmFsKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZWQgYnlcbiAgICogYHByb3BlcnR5YCB3aXRoIGEgdmFsdWUgZ2l2ZW4gYnkgYHZhbHVlYC4gVXNlcyBhIGRlZXAgZXF1YWxpdHkgY2hlY2suXG4gICAqXG4gICAqICAgICBhc3NlcnQuZGVlcFByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9IH0sICd0ZWEnLCB7IGdyZWVuOiAnbWF0Y2hhJyB9KTtcbiAgICpcbiAgICogQG5hbWUgZGVlcFByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kZWVwUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5kZWVwUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8uaGF2ZS5kZWVwLnByb3BlcnR5KHByb3AsIHZhbCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAubm90RGVlcFByb3BlcnR5VmFsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVkXG4gICAqIGJ5IGBwcm9wZXJ0eWAgd2l0aCB2YWx1ZSBnaXZlbiBieSBgdmFsdWVgLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3REZWVwUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH0gfSwgJ3RlYScsIHsgYmxhY2s6ICdtYXRjaGEnIH0pO1xuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBQcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfSB9LCAndGVhJywgeyBncmVlbjogJ29vbG9uZycgfSk7XG4gICAqICAgICBhc3NlcnQubm90RGVlcFByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9IH0sICdjb2ZmZWUnLCB7IGdyZWVuOiAnbWF0Y2hhJyB9KTtcbiAgICpcbiAgICogQG5hbWUgbm90RGVlcFByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3REZWVwUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3REZWVwUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuZGVlcC5wcm9wZXJ0eShwcm9wLCB2YWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm93blByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIGRpcmVjdCBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgLiBJbmhlcml0ZWRcbiAgICogcHJvcGVydGllcyBhcmVuJ3QgY2hlY2tlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5vd25Qcm9wZXJ0eSh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfX0sICd0ZWEnKTtcbiAgICpcbiAgICogQG5hbWUgb3duUHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm93blByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm93blByb3BlcnR5LCB0cnVlKVxuICAgICAgLnRvLmhhdmUub3duLnByb3BlcnR5KHByb3ApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdE93blByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGRvZXMgX25vdF8gaGF2ZSBhIGRpcmVjdCBwcm9wZXJ0eSBuYW1lZCBieVxuICAgKiBgcHJvcGVydHlgLiBJbmhlcml0ZWQgcHJvcGVydGllcyBhcmVuJ3QgY2hlY2tlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RPd25Qcm9wZXJ0eSh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfX0sICdjb2ZmZWUnKTtcbiAgICogICAgIGFzc2VydC5ub3RPd25Qcm9wZXJ0eSh7fSwgJ3RvU3RyaW5nJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdE93blByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RPd25Qcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIHByb3AsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3RPd25Qcm9wZXJ0eSwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5vd24ucHJvcGVydHkocHJvcCk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAub3duUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIGRpcmVjdCBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgIGFuZCBhIHZhbHVlXG4gICAqIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBgdmFsdWVgLiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrICg9PT0pLlxuICAgKiBJbmhlcml0ZWQgcHJvcGVydGllcyBhcmVuJ3QgY2hlY2tlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5vd25Qcm9wZXJ0eVZhbCh7IGNvZmZlZTogJ2lzIGdvb2QnfSwgJ2NvZmZlZScsICdpcyBnb29kJyk7XG4gICAqXG4gICAqIEBuYW1lIG93blByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5vd25Qcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbHVlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQub3duUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8uaGF2ZS5vd24ucHJvcGVydHkocHJvcCwgdmFsdWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdE93blByb3BlcnR5VmFsKG9iamVjdCwgcHJvcGVydHksIHZhbHVlLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBkaXJlY3QgcHJvcGVydHkgbmFtZWQgYnkgYHByb3BlcnR5YFxuICAgKiB3aXRoIGEgdmFsdWUgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIGB2YWx1ZWAuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHkgY2hlY2tcbiAgICogKD09PSkuIEluaGVyaXRlZCBwcm9wZXJ0aWVzIGFyZW4ndCBjaGVja2VkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdE93blByb3BlcnR5VmFsKHsgdGVhOiAnaXMgYmV0dGVyJ30sICd0ZWEnLCAnaXMgd29yc2UnKTtcbiAgICogICAgIGFzc2VydC5ub3RPd25Qcm9wZXJ0eVZhbCh7fSwgJ3RvU3RyaW5nJywgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdE93blByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RPd25Qcm9wZXJ0eVZhbCA9IGZ1bmN0aW9uIChvYmosIHByb3AsIHZhbHVlLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQubm90T3duUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUub3duLnByb3BlcnR5KHByb3AsIHZhbHVlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwT3duUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIGRpcmVjdCBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgIGFuZCBhIHZhbHVlXG4gICAqIGVxdWFsIHRvIHRoZSBwcm92aWRlZCBgdmFsdWVgLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay4gSW5oZXJpdGVkXG4gICAqIHByb3BlcnRpZXMgYXJlbid0IGNoZWNrZWQuXG4gICAqXG4gICAqICAgICBhc3NlcnQuZGVlcE93blByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9IH0sICd0ZWEnLCB7IGdyZWVuOiAnbWF0Y2hhJyB9KTtcbiAgICpcbiAgICogQG5hbWUgZGVlcE93blByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kZWVwT3duUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWx1ZSwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmRlZXBPd25Qcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5oYXZlLmRlZXAub3duLnByb3BlcnR5KHByb3AsIHZhbHVlKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3REZWVwT3duUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGRvZXMgX25vdF8gaGF2ZSBhIGRpcmVjdCBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgXG4gICAqIHdpdGggYSB2YWx1ZSBlcXVhbCB0byB0aGUgcHJvdmlkZWQgYHZhbHVlYC4gVXNlcyBhIGRlZXAgZXF1YWxpdHkgY2hlY2suXG4gICAqIEluaGVyaXRlZCBwcm9wZXJ0aWVzIGFyZW4ndCBjaGVja2VkLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBPd25Qcm9wZXJ0eVZhbCh7IHRlYTogeyBncmVlbjogJ21hdGNoYScgfSB9LCAndGVhJywgeyBibGFjazogJ21hdGNoYScgfSk7XG4gICAqICAgICBhc3NlcnQubm90RGVlcE93blByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9IH0sICd0ZWEnLCB7IGdyZWVuOiAnb29sb25nJyB9KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwT3duUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH0gfSwgJ2NvZmZlZScsIHsgZ3JlZW46ICdtYXRjaGEnIH0pO1xuICAgKiAgICAgYXNzZXJ0Lm5vdERlZXBPd25Qcm9wZXJ0eVZhbCh7fSwgJ3RvU3RyaW5nJywgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdERlZXBPd25Qcm9wZXJ0eVZhbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90RGVlcE93blByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsdWUsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3REZWVwT3duUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuZGVlcC5vd24ucHJvcGVydHkocHJvcCwgdmFsdWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5lc3RlZFByb3BlcnR5KG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZWQgYnlcbiAgICogYHByb3BlcnR5YCwgd2hpY2ggY2FuIGJlIGEgc3RyaW5nIHVzaW5nIGRvdC0gYW5kIGJyYWNrZXQtbm90YXRpb24gZm9yXG4gICAqIG5lc3RlZCByZWZlcmVuY2UuXG4gICAqXG4gICAqICAgICBhc3NlcnQubmVzdGVkUHJvcGVydHkoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAndGVhLmdyZWVuJyk7XG4gICAqXG4gICAqIEBuYW1lIG5lc3RlZFByb3BlcnR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5uZXN0ZWRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIHByb3AsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5uZXN0ZWRQcm9wZXJ0eSwgdHJ1ZSlcbiAgICAgIC50by5oYXZlLm5lc3RlZC5wcm9wZXJ0eShwcm9wKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3ROZXN0ZWRQcm9wZXJ0eShvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBkb2VzIF9ub3RfIGhhdmUgYSBwcm9wZXJ0eSBuYW1lZCBieSBgcHJvcGVydHlgLCB3aGljaFxuICAgKiBjYW4gYmUgYSBzdHJpbmcgdXNpbmcgZG90LSBhbmQgYnJhY2tldC1ub3RhdGlvbiBmb3IgbmVzdGVkIHJlZmVyZW5jZS4gVGhlXG4gICAqIHByb3BlcnR5IGNhbm5vdCBleGlzdCBvbiB0aGUgb2JqZWN0IG5vciBhbnl3aGVyZSBpbiBpdHMgcHJvdG90eXBlIGNoYWluLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdE5lc3RlZFByb3BlcnR5KHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ3RlYS5vb2xvbmcnKTtcbiAgICpcbiAgICogQG5hbWUgbm90TmVzdGVkUHJvcGVydHlcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdE5lc3RlZFByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lm5vdE5lc3RlZFByb3BlcnR5LCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLm5lc3RlZC5wcm9wZXJ0eShwcm9wKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5uZXN0ZWRQcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgcHJvcGVydHkgbmFtZWQgYnkgYHByb3BlcnR5YCB3aXRoIHZhbHVlIGdpdmVuXG4gICAqIGJ5IGB2YWx1ZWAuIGBwcm9wZXJ0eWAgY2FuIHVzZSBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvciBuZXN0ZWRcbiAgICogcmVmZXJlbmNlLiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrICg9PT0pLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5lc3RlZFByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ3RlYS5ncmVlbicsICdtYXRjaGEnKTtcbiAgICpcbiAgICogQG5hbWUgbmVzdGVkUHJvcGVydHlWYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHlcbiAgICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5lc3RlZFByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQubmVzdGVkUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8uaGF2ZS5uZXN0ZWQucHJvcGVydHkocHJvcCwgdmFsKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5ub3ROZXN0ZWRQcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgZG9lcyBfbm90XyBoYXZlIGEgcHJvcGVydHkgbmFtZWQgYnkgYHByb3BlcnR5YCB3aXRoXG4gICAqIHZhbHVlIGdpdmVuIGJ5IGB2YWx1ZWAuIGBwcm9wZXJ0eWAgY2FuIHVzZSBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvclxuICAgKiBuZXN0ZWQgcmVmZXJlbmNlLiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrICg9PT0pLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdE5lc3RlZFByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiAnbWF0Y2hhJyB9fSwgJ3RlYS5ncmVlbicsICdrb25hY2hhJyk7XG4gICAqICAgICBhc3NlcnQubm90TmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46ICdtYXRjaGEnIH19LCAnY29mZmVlLmdyZWVuJywgJ21hdGNoYScpO1xuICAgKlxuICAgKiBAbmFtZSBub3ROZXN0ZWRQcm9wZXJ0eVZhbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90TmVzdGVkUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5ub3ROZXN0ZWRQcm9wZXJ0eVZhbCwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5uZXN0ZWQucHJvcGVydHkocHJvcCwgdmFsKTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5kZWVwTmVzdGVkUHJvcGVydHlWYWwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhIHByb3BlcnR5IG5hbWVkIGJ5IGBwcm9wZXJ0eWAgd2l0aCBhIHZhbHVlIGdpdmVuXG4gICAqIGJ5IGB2YWx1ZWAuIGBwcm9wZXJ0eWAgY2FuIHVzZSBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvciBuZXN0ZWRcbiAgICogcmVmZXJlbmNlLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5kZWVwTmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46IHsgbWF0Y2hhOiAneXVtJyB9IH0gfSwgJ3RlYS5ncmVlbicsIHsgbWF0Y2hhOiAneXVtJyB9KTtcbiAgICpcbiAgICogQG5hbWUgZGVlcE5lc3RlZFByb3BlcnR5VmFsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gICAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kZWVwTmVzdGVkUHJvcGVydHlWYWwgPSBmdW5jdGlvbiAob2JqLCBwcm9wLCB2YWwsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5kZWVwTmVzdGVkUHJvcGVydHlWYWwsIHRydWUpXG4gICAgICAudG8uaGF2ZS5kZWVwLm5lc3RlZC5wcm9wZXJ0eShwcm9wLCB2YWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLm5vdERlZXBOZXN0ZWRQcm9wZXJ0eVZhbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgZG9lcyBfbm90XyBoYXZlIGEgcHJvcGVydHkgbmFtZWQgYnkgYHByb3BlcnR5YCB3aXRoXG4gICAqIHZhbHVlIGdpdmVuIGJ5IGB2YWx1ZWAuIGBwcm9wZXJ0eWAgY2FuIHVzZSBkb3QtIGFuZCBicmFja2V0LW5vdGF0aW9uIGZvclxuICAgKiBuZXN0ZWQgcmVmZXJlbmNlLiBVc2VzIGEgZGVlcCBlcXVhbGl0eSBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3REZWVwTmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46IHsgbWF0Y2hhOiAneXVtJyB9IH0gfSwgJ3RlYS5ncmVlbicsIHsgb29sb25nOiAneXVtJyB9KTtcbiAgICogICAgIGFzc2VydC5ub3REZWVwTmVzdGVkUHJvcGVydHlWYWwoeyB0ZWE6IHsgZ3JlZW46IHsgbWF0Y2hhOiAneXVtJyB9IH0gfSwgJ3RlYS5ncmVlbicsIHsgbWF0Y2hhOiAneXVjaycgfSk7XG4gICAqICAgICBhc3NlcnQubm90RGVlcE5lc3RlZFByb3BlcnR5VmFsKHsgdGVhOiB7IGdyZWVuOiB7IG1hdGNoYTogJ3l1bScgfSB9IH0sICd0ZWEuYmxhY2snLCB7IG1hdGNoYTogJ3l1bScgfSk7XG4gICAqXG4gICAqIEBuYW1lIG5vdERlZXBOZXN0ZWRQcm9wZXJ0eVZhbFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICAgKiBAcGFyYW0ge01peGVkfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90RGVlcE5lc3RlZFByb3BlcnR5VmFsID0gZnVuY3Rpb24gKG9iaiwgcHJvcCwgdmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQubm90RGVlcE5lc3RlZFByb3BlcnR5VmFsLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLmRlZXAubmVzdGVkLnByb3BlcnR5KHByb3AsIHZhbCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5sZW5ndGhPZihvYmplY3QsIGxlbmd0aCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaGFzIGEgYGxlbmd0aGAgcHJvcGVydHkgd2l0aCB0aGUgZXhwZWN0ZWQgdmFsdWUuXG4gICAqXG4gICAqICAgICBhc3NlcnQubGVuZ3RoT2YoWzEsMiwzXSwgMywgJ2FycmF5IGhhcyBsZW5ndGggb2YgMycpO1xuICAgKiAgICAgYXNzZXJ0Lmxlbmd0aE9mKCdmb29iYXInLCA2LCAnc3RyaW5nIGhhcyBsZW5ndGggb2YgNicpO1xuICAgKlxuICAgKiBAbmFtZSBsZW5ndGhPZlxuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubGVuZ3RoT2YgPSBmdW5jdGlvbiAoZXhwLCBsZW4sIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oZXhwLCBtc2csIGFzc2VydC5sZW5ndGhPZiwgdHJ1ZSkudG8uaGF2ZS5sZW5ndGhPZihsZW4pO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmhhc0FueUtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhdCBsZWFzdCBvbmUgb2YgdGhlIGBrZXlzYCBwcm92aWRlZC5cbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBzaW5nbGUgb2JqZWN0IGluc3RlYWQgb2YgYSBga2V5c2AgYXJyYXkgYW5kIGl0cyBrZXlzXG4gICAqIHdpbGwgYmUgdXNlZCBhcyB0aGUgZXhwZWN0ZWQgc2V0IG9mIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaGFzQW55S2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIFsnZm9vJywgJ2lEb250RXhpc3QnLCAnYmF6J10pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FueUtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCB7Zm9vOiAzMCwgaURvbnRFeGlzdDogOTksIGJhejogMTMzN30pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FueUtleXMobmV3IE1hcChbW3tmb286IDF9LCAnYmFyJ10sIFsna2V5JywgJ3ZhbHVlJ11dKSwgW3tmb286IDF9LCAna2V5J10pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FueUtleXMobmV3IFNldChbe2ZvbzogJ2Jhcid9LCAnYW5vdGhlcktleSddKSwgW3tmb286ICdiYXInfSwgJ2Fub3RoZXJLZXknXSk7XG4gICAqXG4gICAqIEBuYW1lIGhhc0FueUtleXNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5oYXNBbnlLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0Lmhhc0FueUtleXMsIHRydWUpLnRvLmhhdmUuYW55LmtleXMoa2V5cyk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5oYXNBbGxLZXlzKG9iamVjdCwgW2tleXNdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgYWxsIGFuZCBvbmx5IGFsbCBvZiB0aGUgYGtleXNgIHByb3ZpZGVkLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhIGBrZXlzYCBhcnJheSBhbmQgaXRzIGtleXNcbiAgICogd2lsbCBiZSB1c2VkIGFzIHRoZSBleHBlY3RlZCBzZXQgb2Yga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5oYXNBbGxLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwgWydmb28nLCAnYmFyJywgJ2JheiddKTtcbiAgICogICAgIGFzc2VydC5oYXNBbGxLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwge2ZvbzogMzAsIGJhcjogOTksIGJhejogMTMzN10pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FsbEtleXMobmV3IE1hcChbW3tmb286IDF9LCAnYmFyJ10sIFsna2V5JywgJ3ZhbHVlJ11dKSwgW3tmb286IDF9LCAna2V5J10pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FsbEtleXMobmV3IFNldChbe2ZvbzogJ2Jhcid9LCAnYW5vdGhlcktleSddLCBbe2ZvbzogJ2Jhcid9LCAnYW5vdGhlcktleSddKTtcbiAgICpcbiAgICogQG5hbWUgaGFzQWxsS2V5c1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmdbXX0ga2V5c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaGFzQWxsS2V5cyA9IGZ1bmN0aW9uIChvYmosIGtleXMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5oYXNBbGxLZXlzLCB0cnVlKS50by5oYXZlLmFsbC5rZXlzKGtleXMpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuY29udGFpbnNBbGxLZXlzKG9iamVjdCwgW2tleXNdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgYWxsIG9mIHRoZSBga2V5c2AgcHJvdmlkZWQgYnV0IG1heSBoYXZlIG1vcmUga2V5cyBub3QgbGlzdGVkLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhIGBrZXlzYCBhcnJheSBhbmQgaXRzIGtleXNcbiAgICogd2lsbCBiZSB1c2VkIGFzIHRoZSBleHBlY3RlZCBzZXQgb2Yga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbEtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCBbJ2ZvbycsICdiYXonXSk7XG4gICAqICAgICBhc3NlcnQuY29udGFpbnNBbGxLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwgWydmb28nLCAnYmFyJywgJ2JheiddKTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbEtleXMoe2ZvbzogMSwgYmFyOiAyLCBiYXo6IDN9LCB7Zm9vOiAzMCwgYmF6OiAxMzM3fSk7XG4gICAqICAgICBhc3NlcnQuY29udGFpbnNBbGxLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwge2ZvbzogMzAsIGJhcjogOTksIGJhejogMTMzN30pO1xuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsS2V5cyhuZXcgTWFwKFtbe2ZvbzogMX0sICdiYXInXSwgWydrZXknLCAndmFsdWUnXV0pLCBbe2ZvbzogMX1dKTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbEtleXMobmV3IE1hcChbW3tmb286IDF9LCAnYmFyJ10sIFsna2V5JywgJ3ZhbHVlJ11dKSwgW3tmb286IDF9LCAna2V5J10pO1xuICAgKiAgICAgYXNzZXJ0LmNvbnRhaW5zQWxsS2V5cyhuZXcgU2V0KFt7Zm9vOiAnYmFyJ30sICdhbm90aGVyS2V5J10sIFt7Zm9vOiAnYmFyJ31dKTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbEtleXMobmV3IFNldChbe2ZvbzogJ2Jhcid9LCAnYW5vdGhlcktleSddLCBbe2ZvbzogJ2Jhcid9LCAnYW5vdGhlcktleSddKTtcbiAgICpcbiAgICogQG5hbWUgY29udGFpbnNBbGxLZXlzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5jb250YWluc0FsbEtleXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuY29udGFpbnNBbGxLZXlzLCB0cnVlKVxuICAgICAgLnRvLmNvbnRhaW4uYWxsLmtleXMoa2V5cyk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5kb2VzTm90SGF2ZUFueUtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBub25lIG9mIHRoZSBga2V5c2AgcHJvdmlkZWQuXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGEgYGtleXNgIGFycmF5IGFuZCBpdHMga2V5c1xuICAgKiB3aWxsIGJlIHVzZWQgYXMgdGhlIGV4cGVjdGVkIHNldCBvZiBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQW55S2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIFsnb25lJywgJ3R3bycsICdleGFtcGxlJ10pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQW55S2V5cyh7Zm9vOiAxLCBiYXI6IDIsIGJhejogM30sIHtvbmU6IDEsIHR3bzogMiwgZXhhbXBsZTogJ2Zvbyd9KTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFueUtleXMobmV3IE1hcChbW3tmb286IDF9LCAnYmFyJ10sIFsna2V5JywgJ3ZhbHVlJ11dKSwgW3tvbmU6ICd0d28nfSwgJ2V4YW1wbGUnXSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbnlLZXlzKG5ldyBTZXQoW3tmb286ICdiYXInfSwgJ2Fub3RoZXJLZXknXSwgW3tvbmU6ICd0d28nfSwgJ2V4YW1wbGUnXSk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3RIYXZlQW55S2V5c1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmdbXX0ga2V5c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZG9lc05vdEhhdmVBbnlLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmRvZXNOb3RIYXZlQW55S2V5cywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5hbnkua2V5cyhrZXlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmRvZXNOb3RIYXZlQWxsS2V5cyhvYmplY3QsIFtrZXlzXSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgZG9lcyBub3QgaGF2ZSBhdCBsZWFzdCBvbmUgb2YgdGhlIGBrZXlzYCBwcm92aWRlZC5cbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBzaW5nbGUgb2JqZWN0IGluc3RlYWQgb2YgYSBga2V5c2AgYXJyYXkgYW5kIGl0cyBrZXlzXG4gICAqIHdpbGwgYmUgdXNlZCBhcyB0aGUgZXhwZWN0ZWQgc2V0IG9mIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbGxLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwgWydvbmUnLCAndHdvJywgJ2V4YW1wbGUnXSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbGxLZXlzKHtmb286IDEsIGJhcjogMiwgYmF6OiAzfSwge29uZTogMSwgdHdvOiAyLCBleGFtcGxlOiAnZm9vJ30pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsS2V5cyhuZXcgTWFwKFtbe2ZvbzogMX0sICdiYXInXSwgWydrZXknLCAndmFsdWUnXV0pLCBbe29uZTogJ3R3byd9LCAnZXhhbXBsZSddKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFsbEtleXMobmV3IFNldChbe2ZvbzogJ2Jhcid9LCAnYW5vdGhlcktleSddLCBbe29uZTogJ3R3byd9LCAnZXhhbXBsZSddKTtcbiAgICpcbiAgICogQG5hbWUgZG9lc05vdEhhdmVBbGxLZXlzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kb2VzTm90SGF2ZUFsbEtleXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuZG9lc05vdEhhdmVBbGxLZXlzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLmFsbC5rZXlzKGtleXMpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaGFzQW55RGVlcEtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBhdCBsZWFzdCBvbmUgb2YgdGhlIGBrZXlzYCBwcm92aWRlZC5cbiAgICogU2luY2UgU2V0cyBhbmQgTWFwcyBjYW4gaGF2ZSBvYmplY3RzIGFzIGtleXMgeW91IGNhbiB1c2UgdGhpcyBhc3NlcnRpb24gdG8gcGVyZm9ybVxuICAgKiBhIGRlZXAgY29tcGFyaXNvbi5cbiAgICogWW91IGNhbiBhbHNvIHByb3ZpZGUgYSBzaW5nbGUgb2JqZWN0IGluc3RlYWQgb2YgYSBga2V5c2AgYXJyYXkgYW5kIGl0cyBrZXlzXG4gICAqIHdpbGwgYmUgdXNlZCBhcyB0aGUgZXhwZWN0ZWQgc2V0IG9mIGtleXMuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaGFzQW55RGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFsxLCAyXV0pLCB7b25lOiAnb25lJ30pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FueURlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddLCBbMSwgMl1dKSwgW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSk7XG4gICAqICAgICBhc3NlcnQuaGFzQW55RGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFt7dHdvOiAndHdvJ30sICd2YWx1ZVR3byddXSksIFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FueURlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIHtvbmU6ICdvbmUnfSk7XG4gICAqICAgICBhc3NlcnQuaGFzQW55RGVlcEtleXMobmV3IFNldChbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKSwgW3tvbmU6ICdvbmUnfSwge3RocmVlOiAndGhyZWUnfV0pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FueURlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90SGF2ZUFsbEtleXNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5oYXNBbnlEZWVwS2V5cyA9IGZ1bmN0aW9uIChvYmosIGtleXMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5oYXNBbnlEZWVwS2V5cywgdHJ1ZSlcbiAgICAgIC50by5oYXZlLmFueS5kZWVwLmtleXMoa2V5cyk7XG4gIH1cblxuIC8qKlxuICAgKiAjIyMgLmhhc0FsbERlZXBLZXlzKG9iamVjdCwgW2tleXNdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBoYXMgYWxsIGFuZCBvbmx5IGFsbCBvZiB0aGUgYGtleXNgIHByb3ZpZGVkLlxuICAgKiBTaW5jZSBTZXRzIGFuZCBNYXBzIGNhbiBoYXZlIG9iamVjdHMgYXMga2V5cyB5b3UgY2FuIHVzZSB0aGlzIGFzc2VydGlvbiB0byBwZXJmb3JtXG4gICAqIGEgZGVlcCBjb21wYXJpc29uLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhIGBrZXlzYCBhcnJheSBhbmQgaXRzIGtleXNcbiAgICogd2lsbCBiZSB1c2VkIGFzIHRoZSBleHBlY3RlZCBzZXQgb2Yga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5oYXNBbGxEZWVwS2V5cyhuZXcgTWFwKFtbe29uZTogJ29uZSd9LCAndmFsdWVPbmUnXV0pLCB7b25lOiAnb25lJ30pO1xuICAgKiAgICAgYXNzZXJ0Lmhhc0FsbERlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddLCBbe3R3bzogJ3R3byd9LCAndmFsdWVUd28nXV0pLCBbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKTtcbiAgICogICAgIGFzc2VydC5oYXNBbGxEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ31dKSwge29uZTogJ29uZSd9KTtcbiAgICogICAgIGFzc2VydC5oYXNBbGxEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pLCBbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKTtcbiAgICpcbiAgICogQG5hbWUgaGFzQWxsRGVlcEtleXNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5oYXNBbGxEZWVwS2V5cyA9IGZ1bmN0aW9uIChvYmosIGtleXMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5oYXNBbGxEZWVwS2V5cywgdHJ1ZSlcbiAgICAgIC50by5oYXZlLmFsbC5kZWVwLmtleXMoa2V5cyk7XG4gIH1cblxuIC8qKlxuICAgKiAjIyMgLmNvbnRhaW5zQWxsRGVlcEtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGNvbnRhaW5zIGFsbCBvZiB0aGUgYGtleXNgIHByb3ZpZGVkLlxuICAgKiBTaW5jZSBTZXRzIGFuZCBNYXBzIGNhbiBoYXZlIG9iamVjdHMgYXMga2V5cyB5b3UgY2FuIHVzZSB0aGlzIGFzc2VydGlvbiB0byBwZXJmb3JtXG4gICAqIGEgZGVlcCBjb21wYXJpc29uLlxuICAgKiBZb3UgY2FuIGFsc28gcHJvdmlkZSBhIHNpbmdsZSBvYmplY3QgaW5zdGVhZCBvZiBhIGBrZXlzYCBhcnJheSBhbmQgaXRzIGtleXNcbiAgICogd2lsbCBiZSB1c2VkIGFzIHRoZSBleHBlY3RlZCBzZXQgb2Yga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbERlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddLCBbMSwgMl1dKSwge29uZTogJ29uZSd9KTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbERlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddLCBbe3R3bzogJ3R3byd9LCAndmFsdWVUd28nXV0pLCBbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKTtcbiAgICogICAgIGFzc2VydC5jb250YWluc0FsbERlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIHtvbmU6ICdvbmUnfSk7XG4gICAqICAgICBhc3NlcnQuY29udGFpbnNBbGxEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pLCBbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKTtcbiAgICpcbiAgICogQG5hbWUgY29udGFpbnNBbGxEZWVwS2V5c1xuICAgKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGtleXNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmNvbnRhaW5zQWxsRGVlcEtleXMgPSBmdW5jdGlvbiAob2JqLCBrZXlzLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuY29udGFpbnNBbGxEZWVwS2V5cywgdHJ1ZSlcbiAgICAgIC50by5jb250YWluLmFsbC5kZWVwLmtleXMoa2V5cyk7XG4gIH1cblxuIC8qKlxuICAgKiAjIyMgLmRvZXNOb3RIYXZlQW55RGVlcEtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGhhcyBub25lIG9mIHRoZSBga2V5c2AgcHJvdmlkZWQuXG4gICAqIFNpbmNlIFNldHMgYW5kIE1hcHMgY2FuIGhhdmUgb2JqZWN0cyBhcyBrZXlzIHlvdSBjYW4gdXNlIHRoaXMgYXNzZXJ0aW9uIHRvIHBlcmZvcm1cbiAgICogYSBkZWVwIGNvbXBhcmlzb24uXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGEgYGtleXNgIGFycmF5IGFuZCBpdHMga2V5c1xuICAgKiB3aWxsIGJlIHVzZWQgYXMgdGhlIGV4cGVjdGVkIHNldCBvZiBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQW55RGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFsxLCAyXV0pLCB7dGhpc0RvZXNOb3Q6ICdleGlzdCd9KTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFueURlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddLCBbe3R3bzogJ3R3byd9LCAndmFsdWVUd28nXV0pLCBbe3R3ZW50eTogJ3R3ZW50eSd9LCB7ZmlmdHk6ICdmaWZ0eSd9XSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbnlEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pLCB7dHdlbnR5OiAndHdlbnR5J30pO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQW55RGVlcEtleXMobmV3IFNldChbe29uZTogJ29uZSd9LCB7dHdvOiAndHdvJ31dKSwgW3t0d2VudHk6ICd0d2VudHknfSwge2ZpZnR5OiAnZmlmdHknfV0pO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90SGF2ZUFueURlZXBLZXlzXG4gICAqIEBwYXJhbSB7TWl4ZWR9IG9iamVjdFxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0ga2V5c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZG9lc05vdEhhdmVBbnlEZWVwS2V5cyA9IGZ1bmN0aW9uIChvYmosIGtleXMsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5kb2VzTm90SGF2ZUFueURlZXBLZXlzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLmFueS5kZWVwLmtleXMoa2V5cyk7XG4gIH1cblxuIC8qKlxuICAgKiAjIyMgLmRvZXNOb3RIYXZlQWxsRGVlcEtleXMob2JqZWN0LCBba2V5c10sIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGRvZXMgbm90IGhhdmUgYXQgbGVhc3Qgb25lIG9mIHRoZSBga2V5c2AgcHJvdmlkZWQuXG4gICAqIFNpbmNlIFNldHMgYW5kIE1hcHMgY2FuIGhhdmUgb2JqZWN0cyBhcyBrZXlzIHlvdSBjYW4gdXNlIHRoaXMgYXNzZXJ0aW9uIHRvIHBlcmZvcm1cbiAgICogYSBkZWVwIGNvbXBhcmlzb24uXG4gICAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGEgc2luZ2xlIG9iamVjdCBpbnN0ZWFkIG9mIGEgYGtleXNgIGFycmF5IGFuZCBpdHMga2V5c1xuICAgKiB3aWxsIGJlIHVzZWQgYXMgdGhlIGV4cGVjdGVkIHNldCBvZiBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsRGVlcEtleXMobmV3IE1hcChbW3tvbmU6ICdvbmUnfSwgJ3ZhbHVlT25lJ10sIFsxLCAyXV0pLCB7dGhpc0RvZXNOb3Q6ICdleGlzdCd9KTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFsbERlZXBLZXlzKG5ldyBNYXAoW1t7b25lOiAnb25lJ30sICd2YWx1ZU9uZSddLCBbe3R3bzogJ3R3byd9LCAndmFsdWVUd28nXV0pLCBbe3R3ZW50eTogJ3R3ZW50eSd9LCB7b25lOiAnb25lJ31dKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90SGF2ZUFsbERlZXBLZXlzKG5ldyBTZXQoW3tvbmU6ICdvbmUnfSwge3R3bzogJ3R3byd9XSksIHt0d2VudHk6ICd0d2VudHknfSk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdEhhdmVBbGxEZWVwS2V5cyhuZXcgU2V0KFt7b25lOiAnb25lJ30sIHt0d286ICd0d28nfV0pLCBbe29uZTogJ29uZSd9LCB7ZmlmdHk6ICdmaWZ0eSd9XSk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3RIYXZlQWxsRGVlcEtleXNcbiAgICogQHBhcmFtIHtNaXhlZH0gb2JqZWN0XG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBrZXlzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kb2VzTm90SGF2ZUFsbERlZXBLZXlzID0gZnVuY3Rpb24gKG9iaiwga2V5cywgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmRvZXNOb3RIYXZlQWxsRGVlcEtleXMsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuYWxsLmRlZXAua2V5cyhrZXlzKTtcbiAgfVxuXG4gLyoqXG4gICAqICMjIyAudGhyb3dzKGZuLCBbZXJyb3JMaWtlL3N0cmluZy9yZWdleHBdLCBbc3RyaW5nL3JlZ2V4cF0sIFttZXNzYWdlXSlcbiAgICpcbiAgICogSWYgYGVycm9yTGlrZWAgaXMgYW4gYEVycm9yYCBjb25zdHJ1Y3RvciwgYXNzZXJ0cyB0aGF0IGBmbmAgd2lsbCB0aHJvdyBhbiBlcnJvciB0aGF0IGlzIGFuXG4gICAqIGluc3RhbmNlIG9mIGBlcnJvckxpa2VgLlxuICAgKiBJZiBgZXJyb3JMaWtlYCBpcyBhbiBgRXJyb3JgIGluc3RhbmNlLCBhc3NlcnRzIHRoYXQgdGhlIGVycm9yIHRocm93biBpcyB0aGUgc2FtZVxuICAgKiBpbnN0YW5jZSBhcyBgZXJyb3JMaWtlYC5cbiAgICogSWYgYGVyck1zZ01hdGNoZXJgIGlzIHByb3ZpZGVkLCBpdCBhbHNvIGFzc2VydHMgdGhhdCB0aGUgZXJyb3IgdGhyb3duIHdpbGwgaGF2ZSBhXG4gICAqIG1lc3NhZ2UgbWF0Y2hpbmcgYGVyck1zZ01hdGNoZXJgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LnRocm93cyhmbiwgJ2Z1bmN0aW9uIHRocm93cyBhIHJlZmVyZW5jZSBlcnJvcicpO1xuICAgKiAgICAgYXNzZXJ0LnRocm93cyhmbiwgL2Z1bmN0aW9uIHRocm93cyBhIHJlZmVyZW5jZSBlcnJvci8pO1xuICAgKiAgICAgYXNzZXJ0LnRocm93cyhmbiwgUmVmZXJlbmNlRXJyb3IpO1xuICAgKiAgICAgYXNzZXJ0LnRocm93cyhmbiwgZXJyb3JJbnN0YW5jZSk7XG4gICAqICAgICBhc3NlcnQudGhyb3dzKGZuLCBSZWZlcmVuY2VFcnJvciwgJ0Vycm9yIHRocm93biBtdXN0IGJlIGEgUmVmZXJlbmNlRXJyb3IgYW5kIGhhdmUgdGhpcyBtc2cnKTtcbiAgICogICAgIGFzc2VydC50aHJvd3MoZm4sIGVycm9ySW5zdGFuY2UsICdFcnJvciB0aHJvd24gbXVzdCBiZSB0aGUgc2FtZSBlcnJvckluc3RhbmNlIGFuZCBoYXZlIHRoaXMgbXNnJyk7XG4gICAqICAgICBhc3NlcnQudGhyb3dzKGZuLCBSZWZlcmVuY2VFcnJvciwgL0Vycm9yIHRocm93biBtdXN0IGJlIGEgUmVmZXJlbmNlRXJyb3IgYW5kIG1hdGNoIHRoaXMvKTtcbiAgICogICAgIGFzc2VydC50aHJvd3MoZm4sIGVycm9ySW5zdGFuY2UsIC9FcnJvciB0aHJvd24gbXVzdCBiZSB0aGUgc2FtZSBlcnJvckluc3RhbmNlIGFuZCBtYXRjaCB0aGlzLyk7XG4gICAqXG4gICAqIEBuYW1lIHRocm93c1xuICAgKiBAYWxpYXMgdGhyb3dcbiAgICogQGFsaWFzIFRocm93XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gICAqIEBwYXJhbSB7RXJyb3JDb25zdHJ1Y3RvcnxFcnJvcn0gZXJyb3JMaWtlXG4gICAqIEBwYXJhbSB7UmVnRXhwfFN0cmluZ30gZXJyTXNnTWF0Y2hlclxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Vycm9yI0Vycm9yX3R5cGVzXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC50aHJvd3MgPSBmdW5jdGlvbiAoZm4sIGVycm9yTGlrZSwgZXJyTXNnTWF0Y2hlciwgbXNnKSB7XG4gICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgZXJyb3JMaWtlIHx8IGVycm9yTGlrZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgZXJyTXNnTWF0Y2hlciA9IGVycm9yTGlrZTtcbiAgICAgIGVycm9yTGlrZSA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGFzc2VydEVyciA9IG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LnRocm93cywgdHJ1ZSlcbiAgICAgIC50by50aHJvdyhlcnJvckxpa2UsIGVyck1zZ01hdGNoZXIpO1xuICAgIHJldHVybiBmbGFnKGFzc2VydEVyciwgJ29iamVjdCcpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmRvZXNOb3RUaHJvdyhmbiwgW2Vycm9yTGlrZS9zdHJpbmcvcmVnZXhwXSwgW3N0cmluZy9yZWdleHBdLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIElmIGBlcnJvckxpa2VgIGlzIGFuIGBFcnJvcmAgY29uc3RydWN0b3IsIGFzc2VydHMgdGhhdCBgZm5gIHdpbGwgX25vdF8gdGhyb3cgYW4gZXJyb3IgdGhhdCBpcyBhblxuICAgKiBpbnN0YW5jZSBvZiBgZXJyb3JMaWtlYC5cbiAgICogSWYgYGVycm9yTGlrZWAgaXMgYW4gYEVycm9yYCBpbnN0YW5jZSwgYXNzZXJ0cyB0aGF0IHRoZSBlcnJvciB0aHJvd24gaXMgX25vdF8gdGhlIHNhbWVcbiAgICogaW5zdGFuY2UgYXMgYGVycm9yTGlrZWAuXG4gICAqIElmIGBlcnJNc2dNYXRjaGVyYCBpcyBwcm92aWRlZCwgaXQgYWxzbyBhc3NlcnRzIHRoYXQgdGhlIGVycm9yIHRocm93biB3aWxsIF9ub3RfIGhhdmUgYVxuICAgKiBtZXNzYWdlIG1hdGNoaW5nIGBlcnJNc2dNYXRjaGVyYC5cbiAgICpcbiAgICogICAgIGFzc2VydC5kb2VzTm90VGhyb3coZm4sICdBbnkgRXJyb3IgdGhyb3duIG11c3Qgbm90IGhhdmUgdGhpcyBtZXNzYWdlJyk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdFRocm93KGZuLCAvQW55IEVycm9yIHRocm93biBtdXN0IG5vdCBtYXRjaCB0aGlzLyk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdFRocm93KGZuLCBFcnJvcik7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdFRocm93KGZuLCBlcnJvckluc3RhbmNlKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90VGhyb3coZm4sIEVycm9yLCAnRXJyb3IgbXVzdCBub3QgaGF2ZSB0aGlzIG1lc3NhZ2UnKTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90VGhyb3coZm4sIGVycm9ySW5zdGFuY2UsICdFcnJvciBtdXN0IG5vdCBoYXZlIHRoaXMgbWVzc2FnZScpO1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RUaHJvdyhmbiwgRXJyb3IsIC9FcnJvciBtdXN0IG5vdCBtYXRjaCB0aGlzLyk7XG4gICAqICAgICBhc3NlcnQuZG9lc05vdFRocm93KGZuLCBlcnJvckluc3RhbmNlLCAvRXJyb3IgbXVzdCBub3QgbWF0Y2ggdGhpcy8pO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90VGhyb3dcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAgICogQHBhcmFtIHtFcnJvckNvbnN0cnVjdG9yfSBlcnJvckxpa2VcbiAgICogQHBhcmFtIHtSZWdFeHB8U3RyaW5nfSBlcnJNc2dNYXRjaGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3IjRXJyb3JfdHlwZXNcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRvZXNOb3RUaHJvdyA9IGZ1bmN0aW9uIChmbiwgZXJyb3JMaWtlLCBlcnJNc2dNYXRjaGVyLCBtc2cpIHtcbiAgICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBlcnJvckxpa2UgfHwgZXJyb3JMaWtlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICBlcnJNc2dNYXRjaGVyID0gZXJyb3JMaWtlO1xuICAgICAgZXJyb3JMaWtlID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5kb2VzTm90VGhyb3csIHRydWUpXG4gICAgICAudG8ubm90LnRocm93KGVycm9yTGlrZSwgZXJyTXNnTWF0Y2hlcik7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAub3BlcmF0b3IodmFsMSwgb3BlcmF0b3IsIHZhbDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQ29tcGFyZXMgdHdvIHZhbHVlcyB1c2luZyBgb3BlcmF0b3JgLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm9wZXJhdG9yKDEsICc8JywgMiwgJ2V2ZXJ5dGhpbmcgaXMgb2snKTtcbiAgICogICAgIGFzc2VydC5vcGVyYXRvcigxLCAnPicsIDIsICd0aGlzIHdpbGwgZmFpbCcpO1xuICAgKlxuICAgKiBAbmFtZSBvcGVyYXRvclxuICAgKiBAcGFyYW0ge01peGVkfSB2YWwxXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvcGVyYXRvclxuICAgKiBAcGFyYW0ge01peGVkfSB2YWwyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5vcGVyYXRvciA9IGZ1bmN0aW9uICh2YWwsIG9wZXJhdG9yLCB2YWwyLCBtc2cpIHtcbiAgICB2YXIgb2s7XG4gICAgc3dpdGNoKG9wZXJhdG9yKSB7XG4gICAgICBjYXNlICc9PSc6XG4gICAgICAgIG9rID0gdmFsID09IHZhbDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnPT09JzpcbiAgICAgICAgb2sgPSB2YWwgPT09IHZhbDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnPic6XG4gICAgICAgIG9rID0gdmFsID4gdmFsMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc+PSc6XG4gICAgICAgIG9rID0gdmFsID49IHZhbDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnPCc6XG4gICAgICAgIG9rID0gdmFsIDwgdmFsMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICc8PSc6XG4gICAgICAgIG9rID0gdmFsIDw9IHZhbDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnIT0nOlxuICAgICAgICBvayA9IHZhbCAhPSB2YWwyO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyE9PSc6XG4gICAgICAgIG9rID0gdmFsICE9PSB2YWwyO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG1zZyA9IG1zZyA/IG1zZyArICc6ICcgOiBtc2c7XG4gICAgICAgIHRocm93IG5ldyBjaGFpLkFzc2VydGlvbkVycm9yKFxuICAgICAgICAgIG1zZyArICdJbnZhbGlkIG9wZXJhdG9yIFwiJyArIG9wZXJhdG9yICsgJ1wiJyxcbiAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgYXNzZXJ0Lm9wZXJhdG9yXG4gICAgICAgICk7XG4gICAgfVxuICAgIHZhciB0ZXN0ID0gbmV3IEFzc2VydGlvbihvaywgbXNnLCBhc3NlcnQub3BlcmF0b3IsIHRydWUpO1xuICAgIHRlc3QuYXNzZXJ0KFxuICAgICAgICB0cnVlID09PSBmbGFnKHRlc3QsICdvYmplY3QnKVxuICAgICAgLCAnZXhwZWN0ZWQgJyArIHV0aWwuaW5zcGVjdCh2YWwpICsgJyB0byBiZSAnICsgb3BlcmF0b3IgKyAnICcgKyB1dGlsLmluc3BlY3QodmFsMilcbiAgICAgICwgJ2V4cGVjdGVkICcgKyB1dGlsLmluc3BlY3QodmFsKSArICcgdG8gbm90IGJlICcgKyBvcGVyYXRvciArICcgJyArIHV0aWwuaW5zcGVjdCh2YWwyKSApO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmNsb3NlVG8oYWN0dWFsLCBleHBlY3RlZCwgZGVsdGEsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IHRoZSB0YXJnZXQgaXMgZXF1YWwgYGV4cGVjdGVkYCwgdG8gd2l0aGluIGEgKy8tIGBkZWx0YWAgcmFuZ2UuXG4gICAqXG4gICAqICAgICBhc3NlcnQuY2xvc2VUbygxLjUsIDEsIDAuNSwgJ251bWJlcnMgYXJlIGNsb3NlJyk7XG4gICAqXG4gICAqIEBuYW1lIGNsb3NlVG9cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGFjdHVhbFxuICAgKiBAcGFyYW0ge051bWJlcn0gZXhwZWN0ZWRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5jbG9zZVRvID0gZnVuY3Rpb24gKGFjdCwgZXhwLCBkZWx0YSwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihhY3QsIG1zZywgYXNzZXJ0LmNsb3NlVG8sIHRydWUpLnRvLmJlLmNsb3NlVG8oZXhwLCBkZWx0YSk7XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuYXBwcm94aW1hdGVseShhY3R1YWwsIGV4cGVjdGVkLCBkZWx0YSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBpcyBlcXVhbCBgZXhwZWN0ZWRgLCB0byB3aXRoaW4gYSArLy0gYGRlbHRhYCByYW5nZS5cbiAgICpcbiAgICogICAgIGFzc2VydC5hcHByb3hpbWF0ZWx5KDEuNSwgMSwgMC41LCAnbnVtYmVycyBhcmUgY2xvc2UnKTtcbiAgICpcbiAgICogQG5hbWUgYXBwcm94aW1hdGVseVxuICAgKiBAcGFyYW0ge051bWJlcn0gYWN0dWFsXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBleHBlY3RlZFxuICAgKiBAcGFyYW0ge051bWJlcn0gZGVsdGFcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmFwcHJveGltYXRlbHkgPSBmdW5jdGlvbiAoYWN0LCBleHAsIGRlbHRhLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKGFjdCwgbXNnLCBhc3NlcnQuYXBwcm94aW1hdGVseSwgdHJ1ZSlcbiAgICAgIC50by5iZS5hcHByb3hpbWF0ZWx5KGV4cCwgZGVsdGEpO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLnNhbWVNZW1iZXJzKHNldDEsIHNldDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzZXQxYCBhbmQgYHNldDJgIGhhdmUgdGhlIHNhbWUgbWVtYmVycyBpbiBhbnkgb3JkZXIuIFVzZXMgYVxuICAgKiBzdHJpY3QgZXF1YWxpdHkgY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQuc2FtZU1lbWJlcnMoWyAxLCAyLCAzIF0sIFsgMiwgMSwgMyBdLCAnc2FtZSBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIHNhbWVNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDFcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuc2FtZU1lbWJlcnMgPSBmdW5jdGlvbiAoc2V0MSwgc2V0MiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzZXQxLCBtc2csIGFzc2VydC5zYW1lTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5oYXZlLnNhbWUubWVtYmVycyhzZXQyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm5vdFNhbWVNZW1iZXJzKHNldDEsIHNldDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzZXQxYCBhbmQgYHNldDJgIGRvbid0IGhhdmUgdGhlIHNhbWUgbWVtYmVycyBpbiBhbnkgb3JkZXIuXG4gICAqIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHkgY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90U2FtZU1lbWJlcnMoWyAxLCAyLCAzIF0sIFsgNSwgMSwgMyBdLCAnbm90IHNhbWUgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBub3RTYW1lTWVtYmVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQxXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDJcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdFNhbWVNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQubm90U2FtZU1lbWJlcnMsIHRydWUpXG4gICAgICAudG8ubm90LmhhdmUuc2FtZS5tZW1iZXJzKHNldDIpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuc2FtZURlZXBNZW1iZXJzKHNldDEsIHNldDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzZXQxYCBhbmQgYHNldDJgIGhhdmUgdGhlIHNhbWUgbWVtYmVycyBpbiBhbnkgb3JkZXIuIFVzZXMgYVxuICAgKiBkZWVwIGVxdWFsaXR5IGNoZWNrLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LnNhbWVEZWVwTWVtYmVycyhbIHsgYTogMSB9LCB7IGI6IDIgfSwgeyBjOiAzIH0gXSwgW3sgYjogMiB9LCB7IGE6IDEgfSwgeyBjOiAzIH1dLCAnc2FtZSBkZWVwIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgc2FtZURlZXBNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDFcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuc2FtZURlZXBNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQuc2FtZURlZXBNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLmhhdmUuc2FtZS5kZWVwLm1lbWJlcnMoc2V0Mik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5ub3RTYW1lRGVlcE1lbWJlcnMoc2V0MSwgc2V0MiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHNldDFgIGFuZCBgc2V0MmAgZG9uJ3QgaGF2ZSB0aGUgc2FtZSBtZW1iZXJzIGluIGFueSBvcmRlci5cbiAgICogVXNlcyBhIGRlZXAgZXF1YWxpdHkgY2hlY2suXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90U2FtZURlZXBNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbeyBiOiAyIH0sIHsgYTogMSB9LCB7IGY6IDUgfV0sICdub3Qgc2FtZSBkZWVwIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90U2FtZURlZXBNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDFcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90U2FtZURlZXBNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQubm90U2FtZURlZXBNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLnNhbWUuZGVlcC5tZW1iZXJzKHNldDIpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuc2FtZU9yZGVyZWRNZW1iZXJzKHNldDEsIHNldDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzZXQxYCBhbmQgYHNldDJgIGhhdmUgdGhlIHNhbWUgbWVtYmVycyBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICogVXNlcyBhIHN0cmljdCBlcXVhbGl0eSBjaGVjayAoPT09KS5cbiAgICpcbiAgICogICAgIGFzc2VydC5zYW1lT3JkZXJlZE1lbWJlcnMoWyAxLCAyLCAzIF0sIFsgMSwgMiwgMyBdLCAnc2FtZSBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgc2FtZU9yZGVyZWRNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDFcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuc2FtZU9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQuc2FtZU9yZGVyZWRNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLmhhdmUuc2FtZS5vcmRlcmVkLm1lbWJlcnMoc2V0Mik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5ub3RTYW1lT3JkZXJlZE1lbWJlcnMoc2V0MSwgc2V0MiwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHNldDFgIGFuZCBgc2V0MmAgZG9uJ3QgaGF2ZSB0aGUgc2FtZSBtZW1iZXJzIGluIHRoZSBzYW1lXG4gICAqIG9yZGVyLiBVc2VzIGEgc3RyaWN0IGVxdWFsaXR5IGNoZWNrICg9PT0pLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0Lm5vdFNhbWVPcmRlcmVkTWVtYmVycyhbIDEsIDIsIDMgXSwgWyAyLCAxLCAzIF0sICdub3Qgc2FtZSBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90U2FtZU9yZGVyZWRNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNldDFcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90U2FtZU9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQubm90U2FtZU9yZGVyZWRNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLm5vdC5oYXZlLnNhbWUub3JkZXJlZC5tZW1iZXJzKHNldDIpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuc2FtZURlZXBPcmRlcmVkTWVtYmVycyhzZXQxLCBzZXQyLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc2V0MWAgYW5kIGBzZXQyYCBoYXZlIHRoZSBzYW1lIG1lbWJlcnMgaW4gdGhlIHNhbWUgb3JkZXIuXG4gICAqIFVzZXMgYSBkZWVwIGVxdWFsaXR5IGNoZWNrLlxuICAgKlxuICAgKiBhc3NlcnQuc2FtZURlZXBPcmRlcmVkTWVtYmVycyhbIHsgYTogMSB9LCB7IGI6IDIgfSwgeyBjOiAzIH0gXSwgWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sICdzYW1lIGRlZXAgb3JkZXJlZCBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIHNhbWVEZWVwT3JkZXJlZE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MVxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5zYW1lRGVlcE9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQuc2FtZURlZXBPcmRlcmVkTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5oYXZlLnNhbWUuZGVlcC5vcmRlcmVkLm1lbWJlcnMoc2V0Mik7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5ub3RTYW1lRGVlcE9yZGVyZWRNZW1iZXJzKHNldDEsIHNldDIsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzZXQxYCBhbmQgYHNldDJgIGRvbid0IGhhdmUgdGhlIHNhbWUgbWVtYmVycyBpbiB0aGUgc2FtZVxuICAgKiBvcmRlci4gVXNlcyBhIGRlZXAgZXF1YWxpdHkgY2hlY2suXG4gICAqXG4gICAqIGFzc2VydC5ub3RTYW1lRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYTogMSB9LCB7IGI6IDIgfSwgeyB6OiA1IH0gXSwgJ25vdCBzYW1lIGRlZXAgb3JkZXJlZCBtZW1iZXJzJyk7XG4gICAqIGFzc2VydC5ub3RTYW1lRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYjogMiB9LCB7IGE6IDEgfSwgeyBjOiAzIH0gXSwgJ25vdCBzYW1lIGRlZXAgb3JkZXJlZCBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdFNhbWVEZWVwT3JkZXJlZE1lbWJlcnNcbiAgICogQHBhcmFtIHtBcnJheX0gc2V0MVxuICAgKiBAcGFyYW0ge0FycmF5fSBzZXQyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5ub3RTYW1lRGVlcE9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHNldDEsIHNldDIsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc2V0MSwgbXNnLCBhc3NlcnQubm90U2FtZURlZXBPcmRlcmVkTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaGF2ZS5zYW1lLmRlZXAub3JkZXJlZC5tZW1iZXJzKHNldDIpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jbHVkZU1lbWJlcnMoc3VwZXJzZXQsIHN1YnNldCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHN1YnNldGAgaXMgaW5jbHVkZWQgaW4gYHN1cGVyc2V0YCBpbiBhbnkgb3JkZXIuIFVzZXMgYVxuICAgKiBzdHJpY3QgZXF1YWxpdHkgY2hlY2sgKD09PSkuIER1cGxpY2F0ZXMgYXJlIGlnbm9yZWQuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaW5jbHVkZU1lbWJlcnMoWyAxLCAyLCAzIF0sIFsgMiwgMSwgMiBdLCAnaW5jbHVkZSBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIGluY2x1ZGVNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaW5jbHVkZU1lbWJlcnMgPSBmdW5jdGlvbiAoc3VwZXJzZXQsIHN1YnNldCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzdXBlcnNldCwgbXNnLCBhc3NlcnQuaW5jbHVkZU1lbWJlcnMsIHRydWUpXG4gICAgICAudG8uaW5jbHVkZS5tZW1iZXJzKHN1YnNldCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5ub3RJbmNsdWRlTWVtYmVycyhzdXBlcnNldCwgc3Vic2V0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc3Vic2V0YCBpc24ndCBpbmNsdWRlZCBpbiBgc3VwZXJzZXRgIGluIGFueSBvcmRlci4gVXNlcyBhXG4gICAqIHN0cmljdCBlcXVhbGl0eSBjaGVjayAoPT09KS4gRHVwbGljYXRlcyBhcmUgaWdub3JlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlTWVtYmVycyhbIDEsIDIsIDMgXSwgWyA1LCAxIF0sICdub3QgaW5jbHVkZSBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIG5vdEluY2x1ZGVNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90SW5jbHVkZU1lbWJlcnMgPSBmdW5jdGlvbiAoc3VwZXJzZXQsIHN1YnNldCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzdXBlcnNldCwgbXNnLCBhc3NlcnQubm90SW5jbHVkZU1lbWJlcnMsIHRydWUpXG4gICAgICAudG8ubm90LmluY2x1ZGUubWVtYmVycyhzdWJzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jbHVkZURlZXBNZW1iZXJzKHN1cGVyc2V0LCBzdWJzZXQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzdWJzZXRgIGlzIGluY2x1ZGVkIGluIGBzdXBlcnNldGAgaW4gYW55IG9yZGVyLiBVc2VzIGEgZGVlcFxuICAgKiBlcXVhbGl0eSBjaGVjay4gRHVwbGljYXRlcyBhcmUgaWdub3JlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pbmNsdWRlRGVlcE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBiOiAyIH0sIHsgYTogMSB9LCB7IGI6IDIgfSBdLCAnaW5jbHVkZSBkZWVwIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgaW5jbHVkZURlZXBNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaW5jbHVkZURlZXBNZW1iZXJzID0gZnVuY3Rpb24gKHN1cGVyc2V0LCBzdWJzZXQsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc3VwZXJzZXQsIG1zZywgYXNzZXJ0LmluY2x1ZGVEZWVwTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5pbmNsdWRlLmRlZXAubWVtYmVycyhzdWJzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAubm90SW5jbHVkZURlZXBNZW1iZXJzKHN1cGVyc2V0LCBzdWJzZXQsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBzdWJzZXRgIGlzbid0IGluY2x1ZGVkIGluIGBzdXBlcnNldGAgaW4gYW55IG9yZGVyLiBVc2VzIGFcbiAgICogZGVlcCBlcXVhbGl0eSBjaGVjay4gRHVwbGljYXRlcyBhcmUgaWdub3JlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlRGVlcE1lbWJlcnMoWyB7IGE6IDEgfSwgeyBiOiAyIH0sIHsgYzogMyB9IF0sIFsgeyBiOiAyIH0sIHsgZjogNSB9IF0sICdub3QgaW5jbHVkZSBkZWVwIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90SW5jbHVkZURlZXBNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90SW5jbHVkZURlZXBNZW1iZXJzID0gZnVuY3Rpb24gKHN1cGVyc2V0LCBzdWJzZXQsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc3VwZXJzZXQsIG1zZywgYXNzZXJ0Lm5vdEluY2x1ZGVEZWVwTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaW5jbHVkZS5kZWVwLm1lbWJlcnMoc3Vic2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmluY2x1ZGVPcmRlcmVkTWVtYmVycyhzdXBlcnNldCwgc3Vic2V0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc3Vic2V0YCBpcyBpbmNsdWRlZCBpbiBgc3VwZXJzZXRgIGluIHRoZSBzYW1lIG9yZGVyXG4gICAqIGJlZ2lubmluZyB3aXRoIHRoZSBmaXJzdCBlbGVtZW50IGluIGBzdXBlcnNldGAuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHlcbiAgICogY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaW5jbHVkZU9yZGVyZWRNZW1iZXJzKFsgMSwgMiwgMyBdLCBbIDEsIDIgXSwgJ2luY2x1ZGUgb3JkZXJlZCBtZW1iZXJzJyk7XG4gICAqXG4gICAqIEBuYW1lIGluY2x1ZGVPcmRlcmVkTWVtYmVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBzdXBlcnNldFxuICAgKiBAcGFyYW0ge0FycmF5fSBzdWJzZXRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmluY2x1ZGVPcmRlcmVkTWVtYmVycyA9IGZ1bmN0aW9uIChzdXBlcnNldCwgc3Vic2V0LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHN1cGVyc2V0LCBtc2csIGFzc2VydC5pbmNsdWRlT3JkZXJlZE1lbWJlcnMsIHRydWUpXG4gICAgICAudG8uaW5jbHVkZS5vcmRlcmVkLm1lbWJlcnMoc3Vic2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm5vdEluY2x1ZGVPcmRlcmVkTWVtYmVycyhzdXBlcnNldCwgc3Vic2V0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgc3Vic2V0YCBpc24ndCBpbmNsdWRlZCBpbiBgc3VwZXJzZXRgIGluIHRoZSBzYW1lIG9yZGVyXG4gICAqIGJlZ2lubmluZyB3aXRoIHRoZSBmaXJzdCBlbGVtZW50IGluIGBzdXBlcnNldGAuIFVzZXMgYSBzdHJpY3QgZXF1YWxpdHlcbiAgICogY2hlY2sgKD09PSkuXG4gICAqXG4gICAqICAgICBhc3NlcnQubm90SW5jbHVkZU9yZGVyZWRNZW1iZXJzKFsgMSwgMiwgMyBdLCBbIDIsIDEgXSwgJ25vdCBpbmNsdWRlIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKiAgICAgYXNzZXJ0Lm5vdEluY2x1ZGVPcmRlcmVkTWVtYmVycyhbIDEsIDIsIDMgXSwgWyAyLCAzIF0sICdub3QgaW5jbHVkZSBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90SW5jbHVkZU9yZGVyZWRNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQubm90SW5jbHVkZU9yZGVyZWRNZW1iZXJzID0gZnVuY3Rpb24gKHN1cGVyc2V0LCBzdWJzZXQsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oc3VwZXJzZXQsIG1zZywgYXNzZXJ0Lm5vdEluY2x1ZGVPcmRlcmVkTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaW5jbHVkZS5vcmRlcmVkLm1lbWJlcnMoc3Vic2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMoc3VwZXJzZXQsIHN1YnNldCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHN1YnNldGAgaXMgaW5jbHVkZWQgaW4gYHN1cGVyc2V0YCBpbiB0aGUgc2FtZSBvcmRlclxuICAgKiBiZWdpbm5pbmcgd2l0aCB0aGUgZmlyc3QgZWxlbWVudCBpbiBgc3VwZXJzZXRgLiBVc2VzIGEgZGVlcCBlcXVhbGl0eVxuICAgKiBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5pbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYTogMSB9LCB7IGI6IDIgfSBdLCAnaW5jbHVkZSBkZWVwIG9yZGVyZWQgbWVtYmVycycpO1xuICAgKlxuICAgKiBAbmFtZSBpbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1cGVyc2V0XG4gICAqIEBwYXJhbSB7QXJyYXl9IHN1YnNldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaW5jbHVkZURlZXBPcmRlcmVkTWVtYmVycyA9IGZ1bmN0aW9uIChzdXBlcnNldCwgc3Vic2V0LCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHN1cGVyc2V0LCBtc2csIGFzc2VydC5pbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzLCB0cnVlKVxuICAgICAgLnRvLmluY2x1ZGUuZGVlcC5vcmRlcmVkLm1lbWJlcnMoc3Vic2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLm5vdEluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMoc3VwZXJzZXQsIHN1YnNldCwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYHN1YnNldGAgaXNuJ3QgaW5jbHVkZWQgaW4gYHN1cGVyc2V0YCBpbiB0aGUgc2FtZSBvcmRlclxuICAgKiBiZWdpbm5pbmcgd2l0aCB0aGUgZmlyc3QgZWxlbWVudCBpbiBgc3VwZXJzZXRgLiBVc2VzIGEgZGVlcCBlcXVhbGl0eVxuICAgKiBjaGVjay5cbiAgICpcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYTogMSB9LCB7IGY6IDUgfSBdLCAnbm90IGluY2x1ZGUgZGVlcCBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYjogMiB9LCB7IGE6IDEgfSBdLCAnbm90IGluY2x1ZGUgZGVlcCBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICogICAgIGFzc2VydC5ub3RJbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzKFsgeyBhOiAxIH0sIHsgYjogMiB9LCB7IGM6IDMgfSBdLCBbIHsgYjogMiB9LCB7IGM6IDMgfSBdLCAnbm90IGluY2x1ZGUgZGVlcCBvcmRlcmVkIG1lbWJlcnMnKTtcbiAgICpcbiAgICogQG5hbWUgbm90SW5jbHVkZURlZXBPcmRlcmVkTWVtYmVyc1xuICAgKiBAcGFyYW0ge0FycmF5fSBzdXBlcnNldFxuICAgKiBAcGFyYW0ge0FycmF5fSBzdWJzZXRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0Lm5vdEluY2x1ZGVEZWVwT3JkZXJlZE1lbWJlcnMgPSBmdW5jdGlvbiAoc3VwZXJzZXQsIHN1YnNldCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihzdXBlcnNldCwgbXNnLCBhc3NlcnQubm90SW5jbHVkZURlZXBPcmRlcmVkTWVtYmVycywgdHJ1ZSlcbiAgICAgIC50by5ub3QuaW5jbHVkZS5kZWVwLm9yZGVyZWQubWVtYmVycyhzdWJzZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAub25lT2YoaW5MaXN0LCBsaXN0LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBub24tb2JqZWN0LCBub24tYXJyYXkgdmFsdWUgYGluTGlzdGAgYXBwZWFycyBpbiB0aGUgZmxhdCBhcnJheSBgbGlzdGAuXG4gICAqXG4gICAqICAgICBhc3NlcnQub25lT2YoMSwgWyAyLCAxIF0sICdOb3QgZm91bmQgaW4gbGlzdCcpO1xuICAgKlxuICAgKiBAbmFtZSBvbmVPZlxuICAgKiBAcGFyYW0geyp9IGluTGlzdFxuICAgKiBAcGFyYW0ge0FycmF5PCo+fSBsaXN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5vbmVPZiA9IGZ1bmN0aW9uIChpbkxpc3QsIGxpc3QsIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24oaW5MaXN0LCBtc2csIGFzc2VydC5vbmVPZiwgdHJ1ZSkudG8uYmUub25lT2YobGlzdCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5jaGFuZ2VzKGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGNoYW5nZXMgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCA9IDIyIH07XG4gICAqICAgICBhc3NlcnQuY2hhbmdlcyhmbiwgb2JqLCAndmFsJyk7XG4gICAqXG4gICAqIEBuYW1lIGNoYW5nZXNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5jaGFuZ2VzID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG1zZyA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5jaGFuZ2VzLCB0cnVlKS50by5jaGFuZ2Uob2JqLCBwcm9wKTtcbiAgfVxuXG4gICAvKipcbiAgICogIyMjIC5jaGFuZ2VzQnkoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIGRlbHRhLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGNoYW5nZXMgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgYnkgYW4gYW1vdW50IChkZWx0YSkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCArPSAyIH07XG4gICAqICAgICBhc3NlcnQuY2hhbmdlc0J5KGZuLCBvYmosICd2YWwnLCAyKTtcbiAgICpcbiAgICogQG5hbWUgY2hhbmdlc0J5XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1vZGlmaWVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3Qgb3IgZ2V0dGVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGNoYW5nZSBhbW91bnQgKGRlbHRhKVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5jaGFuZ2VzQnkgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgZGVsdGEsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA0ICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciB0bXBNc2cgPSBkZWx0YTtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIG1zZyA9IHRtcE1zZztcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICAgIGRlbHRhID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmNoYW5nZXNCeSwgdHJ1ZSlcbiAgICAgIC50by5jaGFuZ2Uob2JqLCBwcm9wKS5ieShkZWx0YSk7XG4gIH1cblxuICAgLyoqXG4gICAqICMjIyAuZG9lc05vdENoYW5nZShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYSBmdW5jdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgY29uc29sZS5sb2coJ2ZvbycpOyB9O1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RDaGFuZ2UoZm4sIG9iaiwgJ3ZhbCcpO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90Q2hhbmdlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1vZGlmaWVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3Qgb3IgZ2V0dGVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZG9lc05vdENoYW5nZSA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBtc2cgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmRvZXNOb3RDaGFuZ2UsIHRydWUpXG4gICAgICAudG8ubm90LmNoYW5nZShvYmosIHByb3ApO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuY2hhbmdlc0J1dE5vdEJ5KGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBkZWx0YSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYSBmdW5jdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIHZhbHVlIG9mIGEgcHJvcGVydHkgb3Igb2YgYSBmdW5jdGlvbidzIHJldHVybiB2YWx1ZSBieSBhbiBhbW91bnQgKGRlbHRhKVxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgKz0gMTAgfTtcbiAgICogICAgIGFzc2VydC5jaGFuZ2VzQnV0Tm90QnkoZm4sIG9iaiwgJ3ZhbCcsIDUpO1xuICAgKlxuICAgKiBAbmFtZSBjaGFuZ2VzQnV0Tm90QnlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmNoYW5nZXNCdXROb3RCeSA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBkZWx0YSwgbXNnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDQgJiYgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIHRtcE1zZyA9IGRlbHRhO1xuICAgICAgZGVsdGEgPSBwcm9wO1xuICAgICAgbXNnID0gdG1wTXNnO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgICAgZGVsdGEgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuY2hhbmdlc0J1dE5vdEJ5LCB0cnVlKVxuICAgICAgLnRvLmNoYW5nZShvYmosIHByb3ApLmJ1dC5ub3QuYnkoZGVsdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jcmVhc2VzKGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGluY3JlYXNlcyBhIG51bWVyaWMgb2JqZWN0IHByb3BlcnR5LlxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgPSAxMyB9O1xuICAgKiAgICAgYXNzZXJ0LmluY3JlYXNlcyhmbiwgb2JqLCAndmFsJyk7XG4gICAqXG4gICAqIEBuYW1lIGluY3JlYXNlc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmluY3JlYXNlcyA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBtc2cgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmluY3JlYXNlcywgdHJ1ZSlcbiAgICAgIC50by5pbmNyZWFzZShvYmosIHByb3ApO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuaW5jcmVhc2VzQnkoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIGRlbHRhLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGluY3JlYXNlcyBhIG51bWVyaWMgb2JqZWN0IHByb3BlcnR5IG9yIGEgZnVuY3Rpb24ncyByZXR1cm4gdmFsdWUgYnkgYW4gYW1vdW50IChkZWx0YSkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCArPSAxMCB9O1xuICAgKiAgICAgYXNzZXJ0LmluY3JlYXNlc0J5KGZuLCBvYmosICd2YWwnLCAxMCk7XG4gICAqXG4gICAqIEBuYW1lIGluY3JlYXNlc0J5XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1vZGlmaWVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3Qgb3IgZ2V0dGVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtOdW1iZXJ9IGNoYW5nZSBhbW91bnQgKGRlbHRhKVxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pbmNyZWFzZXNCeSA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBkZWx0YSwgbXNnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDQgJiYgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIHRtcE1zZyA9IGRlbHRhO1xuICAgICAgZGVsdGEgPSBwcm9wO1xuICAgICAgbXNnID0gdG1wTXNnO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgICAgZGVsdGEgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuaW5jcmVhc2VzQnksIHRydWUpXG4gICAgICAudG8uaW5jcmVhc2Uob2JqLCBwcm9wKS5ieShkZWx0YSk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5kb2VzTm90SW5jcmVhc2UoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gZG9lcyBub3QgaW5jcmVhc2UgYSBudW1lcmljIG9iamVjdCBwcm9wZXJ0eS5cbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBvYmoudmFsID0gOCB9O1xuICAgKiAgICAgYXNzZXJ0LmRvZXNOb3RJbmNyZWFzZShmbiwgb2JqLCAndmFsJyk7XG4gICAqXG4gICAqIEBuYW1lIGRvZXNOb3RJbmNyZWFzZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtb2RpZmllciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IG9yIGdldHRlciBmdW5jdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgbmFtZSBfb3B0aW9uYWxfXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRvZXNOb3RJbmNyZWFzZSA9IGZ1bmN0aW9uIChmbiwgb2JqLCBwcm9wLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBtc2cgPSBwcm9wO1xuICAgICAgcHJvcCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBc3NlcnRpb24oZm4sIG1zZywgYXNzZXJ0LmRvZXNOb3RJbmNyZWFzZSwgdHJ1ZSlcbiAgICAgIC50by5ub3QuaW5jcmVhc2Uob2JqLCBwcm9wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmluY3JlYXNlc0J1dE5vdEJ5KGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGRvZXMgbm90IGluY3JlYXNlIGEgbnVtZXJpYyBvYmplY3QgcHJvcGVydHkgb3IgZnVuY3Rpb24ncyByZXR1cm4gdmFsdWUgYnkgYW4gYW1vdW50IChkZWx0YSkuXG4gICAqXG4gICAqICAgICB2YXIgb2JqID0geyB2YWw6IDEwIH07XG4gICAqICAgICB2YXIgZm4gPSBmdW5jdGlvbigpIHsgb2JqLnZhbCA9IDE1IH07XG4gICAqICAgICBhc3NlcnQuaW5jcmVhc2VzQnV0Tm90QnkoZm4sIG9iaiwgJ3ZhbCcsIDEwKTtcbiAgICpcbiAgICogQG5hbWUgaW5jcmVhc2VzQnV0Tm90QnlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmluY3JlYXNlc0J1dE5vdEJ5ID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdG1wTXNnID0gZGVsdGE7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBtc2cgPSB0bXBNc2c7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5pbmNyZWFzZXNCdXROb3RCeSwgdHJ1ZSlcbiAgICAgIC50by5pbmNyZWFzZShvYmosIHByb3ApLmJ1dC5ub3QuYnkoZGVsdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuZGVjcmVhc2VzKGZ1bmN0aW9uLCBvYmplY3QsIHByb3BlcnR5LCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGRlY3JlYXNlcyBhIG51bWVyaWMgb2JqZWN0IHByb3BlcnR5LlxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgPSA1IH07XG4gICAqICAgICBhc3NlcnQuZGVjcmVhc2VzKGZuLCBvYmosICd2YWwnKTtcbiAgICpcbiAgICogQG5hbWUgZGVjcmVhc2VzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG1vZGlmaWVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3Qgb3IgZ2V0dGVyIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBuYW1lIF9vcHRpb25hbF9cbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuZGVjcmVhc2VzID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIG1zZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG1zZyA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuZGVjcmVhc2VzLCB0cnVlKVxuICAgICAgLnRvLmRlY3JlYXNlKG9iaiwgcHJvcCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5kZWNyZWFzZXNCeShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgZGVsdGEsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gZGVjcmVhc2VzIGEgbnVtZXJpYyBvYmplY3QgcHJvcGVydHkgb3IgYSBmdW5jdGlvbidzIHJldHVybiB2YWx1ZSBieSBhbiBhbW91bnQgKGRlbHRhKVxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgLT0gNSB9O1xuICAgKiAgICAgYXNzZXJ0LmRlY3JlYXNlc0J5KGZuLCBvYmosICd2YWwnLCA1KTtcbiAgICpcbiAgICogQG5hbWUgZGVjcmVhc2VzQnlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRlY3JlYXNlc0J5ID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdG1wTXNnID0gZGVsdGE7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBtc2cgPSB0bXBNc2c7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5kZWNyZWFzZXNCeSwgdHJ1ZSlcbiAgICAgIC50by5kZWNyZWFzZShvYmosIHByb3ApLmJ5KGRlbHRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAjIyMgLmRvZXNOb3REZWNyZWFzZShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgW21lc3NhZ2VdKVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYSBmdW5jdGlvbiBkb2VzIG5vdCBkZWNyZWFzZXMgYSBudW1lcmljIG9iamVjdCBwcm9wZXJ0eS5cbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBvYmoudmFsID0gMTUgfTtcbiAgICogICAgIGFzc2VydC5kb2VzTm90RGVjcmVhc2UoZm4sIG9iaiwgJ3ZhbCcpO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90RGVjcmVhc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5kb2VzTm90RGVjcmVhc2UgPSBmdW5jdGlvbiAoZm4sIG9iaiwgcHJvcCwgbXNnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbXNnID0gcHJvcDtcbiAgICAgIHByb3AgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5kb2VzTm90RGVjcmVhc2UsIHRydWUpXG4gICAgICAudG8ubm90LmRlY3JlYXNlKG9iaiwgcHJvcCk7XG4gIH1cblxuICAvKipcbiAgICogIyMjIC5kb2VzTm90RGVjcmVhc2VCeShmdW5jdGlvbiwgb2JqZWN0LCBwcm9wZXJ0eSwgZGVsdGEsIFttZXNzYWdlXSlcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGEgZnVuY3Rpb24gZG9lcyBub3QgZGVjcmVhc2VzIGEgbnVtZXJpYyBvYmplY3QgcHJvcGVydHkgb3IgYSBmdW5jdGlvbidzIHJldHVybiB2YWx1ZSBieSBhbiBhbW91bnQgKGRlbHRhKVxuICAgKlxuICAgKiAgICAgdmFyIG9iaiA9IHsgdmFsOiAxMCB9O1xuICAgKiAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7IG9iai52YWwgPSA1IH07XG4gICAqICAgICBhc3NlcnQuZG9lc05vdERlY3JlYXNlQnkoZm4sIG9iaiwgJ3ZhbCcsIDEpO1xuICAgKlxuICAgKiBAbmFtZSBkb2VzTm90RGVjcmVhc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRvZXNOb3REZWNyZWFzZUJ5ID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdG1wTXNnID0gZGVsdGE7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBtc2cgPSB0bXBNc2c7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFzc2VydGlvbihmbiwgbXNnLCBhc3NlcnQuZG9lc05vdERlY3JlYXNlQnksIHRydWUpXG4gICAgICAudG8ubm90LmRlY3JlYXNlKG9iaiwgcHJvcCkuYnkoZGVsdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqICMjIyAuZGVjcmVhc2VzQnV0Tm90QnkoZnVuY3Rpb24sIG9iamVjdCwgcHJvcGVydHksIGRlbHRhLCBbbWVzc2FnZV0pXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBhIGZ1bmN0aW9uIGRvZXMgbm90IGRlY3JlYXNlcyBhIG51bWVyaWMgb2JqZWN0IHByb3BlcnR5IG9yIGEgZnVuY3Rpb24ncyByZXR1cm4gdmFsdWUgYnkgYW4gYW1vdW50IChkZWx0YSlcbiAgICpcbiAgICogICAgIHZhciBvYmogPSB7IHZhbDogMTAgfTtcbiAgICogICAgIHZhciBmbiA9IGZ1bmN0aW9uKCkgeyBvYmoudmFsID0gNSB9O1xuICAgKiAgICAgYXNzZXJ0LmRlY3JlYXNlc0J1dE5vdEJ5KGZuLCBvYmosICd2YWwnLCAxKTtcbiAgICpcbiAgICogQG5hbWUgZGVjcmVhc2VzQnV0Tm90QnlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbW9kaWZpZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBvciBnZXR0ZXIgZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IG5hbWUgX29wdGlvbmFsX1xuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhbmdlIGFtb3VudCAoZGVsdGEpXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIF9vcHRpb25hbF9cbiAgICogQG5hbWVzcGFjZSBBc3NlcnRcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG5cbiAgYXNzZXJ0LmRlY3JlYXNlc0J1dE5vdEJ5ID0gZnVuY3Rpb24gKGZuLCBvYmosIHByb3AsIGRlbHRhLCBtc2cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdG1wTXNnID0gZGVsdGE7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBtc2cgPSB0bXBNc2c7XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBkZWx0YSA9IHByb3A7XG4gICAgICBwcm9wID0gbnVsbDtcbiAgICB9XG5cbiAgICBuZXcgQXNzZXJ0aW9uKGZuLCBtc2csIGFzc2VydC5kZWNyZWFzZXNCdXROb3RCeSwgdHJ1ZSlcbiAgICAgIC50by5kZWNyZWFzZShvYmosIHByb3ApLmJ1dC5ub3QuYnkoZGVsdGEpO1xuICB9XG5cbiAgLyohXG4gICAqICMjIyAuaWZFcnJvcihvYmplY3QpXG4gICAqXG4gICAqIEFzc2VydHMgaWYgdmFsdWUgaXMgbm90IGEgZmFsc2UgdmFsdWUsIGFuZCB0aHJvd3MgaWYgaXQgaXMgYSB0cnVlIHZhbHVlLlxuICAgKiBUaGlzIGlzIGFkZGVkIHRvIGFsbG93IGZvciBjaGFpIHRvIGJlIGEgZHJvcC1pbiByZXBsYWNlbWVudCBmb3IgTm9kZSdzXG4gICAqIGFzc2VydCBjbGFzcy5cbiAgICpcbiAgICogICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0kgYW0gYSBjdXN0b20gZXJyb3InKTtcbiAgICogICAgIGFzc2VydC5pZkVycm9yKGVycik7IC8vIFJldGhyb3dzIGVyciFcbiAgICpcbiAgICogQG5hbWUgaWZFcnJvclxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pZkVycm9yID0gZnVuY3Rpb24gKHZhbCkge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHRocm93KHZhbCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzRXh0ZW5zaWJsZShvYmplY3QpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBpcyBleHRlbnNpYmxlIChjYW4gaGF2ZSBuZXcgcHJvcGVydGllcyBhZGRlZCB0byBpdCkuXG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNFeHRlbnNpYmxlKHt9KTtcbiAgICpcbiAgICogQG5hbWUgaXNFeHRlbnNpYmxlXG4gICAqIEBhbGlhcyBleHRlbnNpYmxlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNFeHRlbnNpYmxlID0gZnVuY3Rpb24gKG9iaiwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbihvYmosIG1zZywgYXNzZXJ0LmlzRXh0ZW5zaWJsZSwgdHJ1ZSkudG8uYmUuZXh0ZW5zaWJsZTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdEV4dGVuc2libGUob2JqZWN0KVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgYG9iamVjdGAgaXMgX25vdF8gZXh0ZW5zaWJsZS5cbiAgICpcbiAgICogICAgIHZhciBub25FeHRlbnNpYmxlT2JqZWN0ID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KTtcbiAgICogICAgIHZhciBzZWFsZWRPYmplY3QgPSBPYmplY3Quc2VhbCh7fSk7XG4gICAqICAgICB2YXIgZnJvemVuT2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNOb3RFeHRlbnNpYmxlKG5vbkV4dGVuc2libGVPYmplY3QpO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90RXh0ZW5zaWJsZShzZWFsZWRPYmplY3QpO1xuICAgKiAgICAgYXNzZXJ0LmlzTm90RXh0ZW5zaWJsZShmcm96ZW5PYmplY3QpO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdEV4dGVuc2libGVcbiAgICogQGFsaWFzIG5vdEV4dGVuc2libGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEV4dGVuc2libGUgPSBmdW5jdGlvbiAob2JqLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuaXNOb3RFeHRlbnNpYmxlLCB0cnVlKS50by5ub3QuYmUuZXh0ZW5zaWJsZTtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc1NlYWxlZChvYmplY3QpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBpcyBzZWFsZWQgKGNhbm5vdCBoYXZlIG5ldyBwcm9wZXJ0aWVzIGFkZGVkIHRvIGl0XG4gICAqIGFuZCBpdHMgZXhpc3RpbmcgcHJvcGVydGllcyBjYW5ub3QgYmUgcmVtb3ZlZCkuXG4gICAqXG4gICAqICAgICB2YXIgc2VhbGVkT2JqZWN0ID0gT2JqZWN0LnNlYWwoe30pO1xuICAgKiAgICAgdmFyIGZyb3plbk9iamVjdCA9IE9iamVjdC5zZWFsKHt9KTtcbiAgICpcbiAgICogICAgIGFzc2VydC5pc1NlYWxlZChzZWFsZWRPYmplY3QpO1xuICAgKiAgICAgYXNzZXJ0LmlzU2VhbGVkKGZyb3plbk9iamVjdCk7XG4gICAqXG4gICAqIEBuYW1lIGlzU2VhbGVkXG4gICAqIEBhbGlhcyBzZWFsZWRcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc1NlYWxlZCA9IGZ1bmN0aW9uIChvYmosIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5pc1NlYWxlZCwgdHJ1ZSkudG8uYmUuc2VhbGVkO1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90U2VhbGVkKG9iamVjdClcbiAgICpcbiAgICogQXNzZXJ0cyB0aGF0IGBvYmplY3RgIGlzIF9ub3RfIHNlYWxlZC5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc05vdFNlYWxlZCh7fSk7XG4gICAqXG4gICAqIEBuYW1lIGlzTm90U2VhbGVkXG4gICAqIEBhbGlhcyBub3RTZWFsZWRcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdFNlYWxlZCA9IGZ1bmN0aW9uIChvYmosIG1zZykge1xuICAgIG5ldyBBc3NlcnRpb24ob2JqLCBtc2csIGFzc2VydC5pc05vdFNlYWxlZCwgdHJ1ZSkudG8ubm90LmJlLnNlYWxlZDtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc0Zyb3plbihvYmplY3QpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBpcyBmcm96ZW4gKGNhbm5vdCBoYXZlIG5ldyBwcm9wZXJ0aWVzIGFkZGVkIHRvIGl0XG4gICAqIGFuZCBpdHMgZXhpc3RpbmcgcHJvcGVydGllcyBjYW5ub3QgYmUgbW9kaWZpZWQpLlxuICAgKlxuICAgKiAgICAgdmFyIGZyb3plbk9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuICAgKiAgICAgYXNzZXJ0LmZyb3plbihmcm96ZW5PYmplY3QpO1xuICAgKlxuICAgKiBAbmFtZSBpc0Zyb3plblxuICAgKiBAYWxpYXMgZnJvemVuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNGcm96ZW4gPSBmdW5jdGlvbiAob2JqLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuaXNGcm96ZW4sIHRydWUpLnRvLmJlLmZyb3plbjtcbiAgfTtcblxuICAvKipcbiAgICogIyMjIC5pc05vdEZyb3plbihvYmplY3QpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCBgb2JqZWN0YCBpcyBfbm90XyBmcm96ZW4uXG4gICAqXG4gICAqICAgICBhc3NlcnQuaXNOb3RGcm96ZW4oe30pO1xuICAgKlxuICAgKiBAbmFtZSBpc05vdEZyb3plblxuICAgKiBAYWxpYXMgbm90RnJvemVuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNOb3RGcm96ZW4gPSBmdW5jdGlvbiAob2JqLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKG9iaiwgbXNnLCBhc3NlcnQuaXNOb3RGcm96ZW4sIHRydWUpLnRvLm5vdC5iZS5mcm96ZW47XG4gIH07XG5cbiAgLyoqXG4gICAqICMjIyAuaXNFbXB0eSh0YXJnZXQpXG4gICAqXG4gICAqIEFzc2VydHMgdGhhdCB0aGUgdGFyZ2V0IGRvZXMgbm90IGNvbnRhaW4gYW55IHZhbHVlcy5cbiAgICogRm9yIGFycmF5cyBhbmQgc3RyaW5ncywgaXQgY2hlY2tzIHRoZSBgbGVuZ3RoYCBwcm9wZXJ0eS5cbiAgICogRm9yIGBNYXBgIGFuZCBgU2V0YCBpbnN0YW5jZXMsIGl0IGNoZWNrcyB0aGUgYHNpemVgIHByb3BlcnR5LlxuICAgKiBGb3Igbm9uLWZ1bmN0aW9uIG9iamVjdHMsIGl0IGdldHMgdGhlIGNvdW50IG9mIG93blxuICAgKiBlbnVtZXJhYmxlIHN0cmluZyBrZXlzLlxuICAgKlxuICAgKiAgICAgYXNzZXJ0LmlzRW1wdHkoW10pO1xuICAgKiAgICAgYXNzZXJ0LmlzRW1wdHkoJycpO1xuICAgKiAgICAgYXNzZXJ0LmlzRW1wdHkobmV3IE1hcCk7XG4gICAqICAgICBhc3NlcnQuaXNFbXB0eSh7fSk7XG4gICAqXG4gICAqIEBuYW1lIGlzRW1wdHlcbiAgICogQGFsaWFzIGVtcHR5XG4gICAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fFN0cmluZ3xNYXB8U2V0fSB0YXJnZXRcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgX29wdGlvbmFsX1xuICAgKiBAbmFtZXNwYWNlIEFzc2VydFxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cblxuICBhc3NlcnQuaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbCwgbXNnKSB7XG4gICAgbmV3IEFzc2VydGlvbih2YWwsIG1zZywgYXNzZXJ0LmlzRW1wdHksIHRydWUpLnRvLmJlLmVtcHR5O1xuICB9O1xuXG4gIC8qKlxuICAgKiAjIyMgLmlzTm90RW1wdHkodGFyZ2V0KVxuICAgKlxuICAgKiBBc3NlcnRzIHRoYXQgdGhlIHRhcmdldCBjb250YWlucyB2YWx1ZXMuXG4gICAqIEZvciBhcnJheXMgYW5kIHN0cmluZ3MsIGl0IGNoZWNrcyB0aGUgYGxlbmd0aGAgcHJvcGVydHkuXG4gICAqIEZvciBgTWFwYCBhbmQgYFNldGAgaW5zdGFuY2VzLCBpdCBjaGVja3MgdGhlIGBzaXplYCBwcm9wZXJ0eS5cbiAgICogRm9yIG5vbi1mdW5jdGlvbiBvYmplY3RzLCBpdCBnZXRzIHRoZSBjb3VudCBvZiBvd25cbiAgICogZW51bWVyYWJsZSBzdHJpbmcga2V5cy5cbiAgICpcbiAgICogICAgIGFzc2VydC5pc05vdEVtcHR5KFsxLCAyXSk7XG4gICAqICAgICBhc3NlcnQuaXNOb3RFbXB0eSgnMzQnKTtcbiAgICogICAgIGFzc2VydC5pc05vdEVtcHR5KG5ldyBTZXQoWzUsIDZdKSk7XG4gICAqICAgICBhc3NlcnQuaXNOb3RFbXB0eSh7IGtleTogNyB9KTtcbiAgICpcbiAgICogQG5hbWUgaXNOb3RFbXB0eVxuICAgKiBAYWxpYXMgbm90RW1wdHlcbiAgICogQHBhcmFtIHtPYmplY3R8QXJyYXl8U3RyaW5nfE1hcHxTZXR9IHRhcmdldFxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBfb3B0aW9uYWxfXG4gICAqIEBuYW1lc3BhY2UgQXNzZXJ0XG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuXG4gIGFzc2VydC5pc05vdEVtcHR5ID0gZnVuY3Rpb24odmFsLCBtc2cpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHZhbCwgbXNnLCBhc3NlcnQuaXNOb3RFbXB0eSwgdHJ1ZSkudG8ubm90LmJlLmVtcHR5O1xuICB9O1xuXG4gIC8qIVxuICAgKiBBbGlhc2VzLlxuICAgKi9cblxuICAoZnVuY3Rpb24gYWxpYXMobmFtZSwgYXMpe1xuICAgIGFzc2VydFthc10gPSBhc3NlcnRbbmFtZV07XG4gICAgcmV0dXJuIGFsaWFzO1xuICB9KVxuICAoJ2lzT2snLCAnb2snKVxuICAoJ2lzTm90T2snLCAnbm90T2snKVxuICAoJ3Rocm93cycsICd0aHJvdycpXG4gICgndGhyb3dzJywgJ1Rocm93JylcbiAgKCdpc0V4dGVuc2libGUnLCAnZXh0ZW5zaWJsZScpXG4gICgnaXNOb3RFeHRlbnNpYmxlJywgJ25vdEV4dGVuc2libGUnKVxuICAoJ2lzU2VhbGVkJywgJ3NlYWxlZCcpXG4gICgnaXNOb3RTZWFsZWQnLCAnbm90U2VhbGVkJylcbiAgKCdpc0Zyb3plbicsICdmcm96ZW4nKVxuICAoJ2lzTm90RnJvemVuJywgJ25vdEZyb3plbicpXG4gICgnaXNFbXB0eScsICdlbXB0eScpXG4gICgnaXNOb3RFbXB0eScsICdub3RFbXB0eScpO1xufTtcbiIsIi8qIVxuICogY2hhaVxuICogQ29weXJpZ2h0KGMpIDIwMTEtMjAxNCBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbnZhciB1c2VkID0gW107XG5cbi8qIVxuICogQ2hhaSB2ZXJzaW9uXG4gKi9cblxuZXhwb3J0cy52ZXJzaW9uID0gJzQuMS4yJztcblxuLyohXG4gKiBBc3NlcnRpb24gRXJyb3JcbiAqL1xuXG5leHBvcnRzLkFzc2VydGlvbkVycm9yID0gcmVxdWlyZSgnYXNzZXJ0aW9uLWVycm9yJyk7XG5cbi8qIVxuICogVXRpbHMgZm9yIHBsdWdpbnMgKG5vdCBleHBvcnRlZClcbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vY2hhaS91dGlscycpO1xuXG4vKipcbiAqICMgLnVzZShmdW5jdGlvbilcbiAqXG4gKiBQcm92aWRlcyBhIHdheSB0byBleHRlbmQgdGhlIGludGVybmFscyBvZiBDaGFpLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259XG4gKiBAcmV0dXJucyB7dGhpc30gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMudXNlID0gZnVuY3Rpb24gKGZuKSB7XG4gIGlmICghfnVzZWQuaW5kZXhPZihmbikpIHtcbiAgICBmbihleHBvcnRzLCB1dGlsKTtcbiAgICB1c2VkLnB1c2goZm4pO1xuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHM7XG59O1xuXG4vKiFcbiAqIFV0aWxpdHkgRnVuY3Rpb25zXG4gKi9cblxuZXhwb3J0cy51dGlsID0gdXRpbDtcblxuLyohXG4gKiBDb25maWd1cmF0aW9uXG4gKi9cblxudmFyIGNvbmZpZyA9IHJlcXVpcmUoJy4vY2hhaS9jb25maWcnKTtcbmV4cG9ydHMuY29uZmlnID0gY29uZmlnO1xuXG4vKiFcbiAqIFByaW1hcnkgYEFzc2VydGlvbmAgcHJvdG90eXBlXG4gKi9cblxudmFyIGFzc2VydGlvbiA9IHJlcXVpcmUoJy4vY2hhaS9hc3NlcnRpb24nKTtcbmV4cG9ydHMudXNlKGFzc2VydGlvbik7XG5cbi8qIVxuICogQ29yZSBBc3NlcnRpb25zXG4gKi9cblxudmFyIGNvcmUgPSByZXF1aXJlKCcuL2NoYWkvY29yZS9hc3NlcnRpb25zJyk7XG5leHBvcnRzLnVzZShjb3JlKTtcblxuLyohXG4gKiBFeHBlY3QgaW50ZXJmYWNlXG4gKi9cblxudmFyIGV4cGVjdCA9IHJlcXVpcmUoJy4vY2hhaS9pbnRlcmZhY2UvZXhwZWN0Jyk7XG5leHBvcnRzLnVzZShleHBlY3QpO1xuXG4vKiFcbiAqIFNob3VsZCBpbnRlcmZhY2VcbiAqL1xuXG52YXIgc2hvdWxkID0gcmVxdWlyZSgnLi9jaGFpL2ludGVyZmFjZS9zaG91bGQnKTtcbmV4cG9ydHMudXNlKHNob3VsZCk7XG5cbi8qIVxuICogQXNzZXJ0IGludGVyZmFjZVxuICovXG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCcuL2NoYWkvaW50ZXJmYWNlL2Fzc2VydCcpO1xuZXhwb3J0cy51c2UoYXNzZXJ0KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvY2hhaScpO1xuIiwiKGZ1bmN0aW9uKGNoYWlEb20pIHtcbiAgaWYgKHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gY2hhaURvbVxuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjaGFpRG9tXG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICBjaGFpLnVzZShjaGFpRG9tKVxuICB9XG59KGZ1bmN0aW9uKGNoYWksIHV0aWxzKSB7XG4gIHZhciBmbGFnID0gdXRpbHMuZmxhZyxcblxuICBlbFRvU3RyaW5nID0gZnVuY3Rpb24oZWwpIHtcbiAgICB2YXIgZGVzY1xuICAgIGlmIChlbCBpbnN0YW5jZW9mIHdpbmRvdy5Ob2RlTGlzdCkge1xuICAgICAgaWYgKGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuICdlbXB0eSBOb2RlTGlzdCdcbiAgICAgIGRlc2MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlbCwgMCwgNSkubWFwKGVsVG9TdHJpbmcpLmpvaW4oJywgJylcbiAgICAgIHJldHVybiBlbC5sZW5ndGggPiA1ID8gZGVzYyArICcuLi4gKCsnICsgKGVsLmxlbmd0aCAtIDUpICsgJyBtb3JlKScgOiBkZXNjXG4gICAgfVxuICAgIGlmICghKGVsIGluc3RhbmNlb2Ygd2luZG93LkhUTUxFbGVtZW50KSkge1xuICAgICAgcmV0dXJuIFN0cmluZyhlbClcbiAgICB9XG5cbiAgICBkZXNjID0gZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVsLmlkKSB7XG4gICAgICBkZXNjICs9ICcjJyArIGVsLmlkXG4gICAgfVxuICAgIGlmIChlbC5jbGFzc05hbWUpIHtcbiAgICAgIGRlc2MgKz0gJy4nICsgU3RyaW5nKGVsLmNsYXNzTmFtZSkucmVwbGFjZSgvXFxzKy9nLCAnLicpXG4gICAgfVxuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZWwuYXR0cmlidXRlcywgZnVuY3Rpb24oYXR0cikge1xuICAgICAgaWYgKGF0dHIubmFtZSAhPT0gJ2NsYXNzJyAmJiBhdHRyLm5hbWUgIT09ICdpZCcpIHtcbiAgICAgICAgZGVzYyArPSAnWycgKyBhdHRyLm5hbWUgKyAoYXR0ci52YWx1ZSA/ICc9XCInICsgYXR0ci52YWx1ZSArICdcIl0nIDogJ10nKVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGRlc2NcbiAgfSxcblxuICBhdHRyQXNzZXJ0ID0gZnVuY3Rpb24obmFtZSwgdmFsKSB7XG4gICAgdmFyIGVsID0gZmxhZyh0aGlzLCAnb2JqZWN0JyksIGFjdHVhbCA9IGVsLmdldEF0dHJpYnV0ZShuYW1lKVxuXG4gICAgaWYgKCFmbGFnKHRoaXMsICduZWdhdGUnKSB8fCB1bmRlZmluZWQgPT09IHZhbCkge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICEhZWwuYXR0cmlidXRlc1tuYW1lXVxuICAgICAgICAsICdleHBlY3RlZCAnICsgZWxUb1N0cmluZyhlbCkgKyAnIHRvIGhhdmUgYW4gYXR0cmlidXRlICN7ZXhwfSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgJyArIGVsVG9TdHJpbmcoZWwpICsgJyBub3QgdG8gaGF2ZSBhbiBhdHRyaWJ1dGUgI3tleHB9J1xuICAgICAgICAsIG5hbWVcbiAgICAgIClcbiAgICB9XG5cbiAgICBpZiAodW5kZWZpbmVkICE9PSB2YWwpIHtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICB2YWwgPT09IGFjdHVhbFxuICAgICAgICAsICdleHBlY3RlZCAnICsgZWxUb1N0cmluZyhlbCkgKyAnIHRvIGhhdmUgYW4gYXR0cmlidXRlICcgKyB1dGlscy5pbnNwZWN0KG5hbWUpICsgJyB3aXRoIHRoZSB2YWx1ZSAje2V4cH0sIGJ1dCB0aGUgdmFsdWUgd2FzICN7YWN0fSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgJyArIGVsVG9TdHJpbmcoZWwpICsgJyBub3QgdG8gaGF2ZSBhbiBhdHRyaWJ1dGUgJyArIHV0aWxzLmluc3BlY3QobmFtZSkgKyAnIHdpdGggdGhlIHZhbHVlICN7YWN0fSdcbiAgICAgICAgLCB2YWxcbiAgICAgICAgLCBhY3R1YWxcbiAgICAgIClcbiAgICB9XG5cbiAgICBmbGFnKHRoaXMsICdvYmplY3QnLCBhY3R1YWwpXG4gIH1cblxuICB1dGlscy5lbFRvU3RyaW5nID0gZWxUb1N0cmluZ1xuICBjaGFpLkFzc2VydGlvbi5hZGRNZXRob2QoJ2F0dHInLCBhdHRyQXNzZXJ0KVxuICBjaGFpLkFzc2VydGlvbi5hZGRNZXRob2QoJ2F0dHJpYnV0ZScsIGF0dHJBc3NlcnQpXG5cbiAgY2hhaS5Bc3NlcnRpb24uYWRkTWV0aG9kKCdjbGFzcycsIGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgIHZhciBlbCA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICBlbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKVxuICAgICAgLCAnZXhwZWN0ZWQgJyArIGVsVG9TdHJpbmcoZWwpICsgJyB0byBoYXZlIGNsYXNzICN7ZXhwfSdcbiAgICAgICwgJ2V4cGVjdGVkICcgKyBlbFRvU3RyaW5nKGVsKSArICcgbm90IHRvIGhhdmUgY2xhc3MgI3tleHB9J1xuICAgICAgLCBjbGFzc05hbWVcbiAgICApXG4gIH0pXG5cbiAgY2hhaS5Bc3NlcnRpb24uYWRkTWV0aG9kKCdpZCcsIGZ1bmN0aW9uKGlkKSB7XG4gICAgdmFyIGVsID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICB0aGlzLmFzc2VydChcbiAgICAgIGVsLmlkID09IGlkXG4gICAgICAsICdleHBlY3RlZCAnICsgZWxUb1N0cmluZyhlbCkgKyAnIHRvIGhhdmUgaWQgI3tleHB9J1xuICAgICAgLCAnZXhwZWN0ZWQgJyArIGVsVG9TdHJpbmcoZWwpICsgJyBub3QgdG8gaGF2ZSBpZCAje2V4cH0nXG4gICAgICAsIGlkXG4gICAgKVxuICB9KVxuXG4gIGNoYWkuQXNzZXJ0aW9uLmFkZE1ldGhvZCgnaHRtbCcsIGZ1bmN0aW9uKGh0bWwpIHtcbiAgICB2YXIgZWwgPSBmbGFnKHRoaXMsICdvYmplY3QnKSwgYWN0dWFsID0gZmxhZyh0aGlzLCAnb2JqZWN0JykuaW5uZXJIVE1MXG5cbiAgICBpZiAoZmxhZyh0aGlzLCAnY29udGFpbnMnKSkge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIGFjdHVhbC5pbmRleE9mKGh0bWwpID49IDBcbiAgICAgICAgLCAnZXhwZWN0ZWQgI3thY3R9IHRvIGNvbnRhaW4gSFRNTCAje2V4cH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICN7YWN0fSBub3QgdG8gY29udGFpbiBIVE1MICN7ZXhwfSdcbiAgICAgICAgLCBodG1sXG4gICAgICAgICwgYWN0dWFsXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICBhY3R1YWwgPT09IGh0bWxcbiAgICAgICAgLCAnZXhwZWN0ZWQgJyArIGVsVG9TdHJpbmcoZWwpICsgJyB0byBoYXZlIEhUTUwgI3tleHB9LCBidXQgdGhlIEhUTUwgd2FzICN7YWN0fSdcbiAgICAgICAgLCAnZXhwZWN0ZWQgJyArIGVsVG9TdHJpbmcoZWwpICsgJyBub3QgdG8gaGF2ZSBIVE1MICN7ZXhwfSdcbiAgICAgICAgLCBodG1sXG4gICAgICAgICwgYWN0dWFsXG4gICAgICApXG4gICAgfVxuICB9KVxuXG4gIGNoYWkuQXNzZXJ0aW9uLmFkZE1ldGhvZCgndGV4dCcsIGZ1bmN0aW9uKHRleHQpIHtcbiAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JyksIGNvbnRhaW5zID0gZmxhZyh0aGlzLCAnY29udGFpbnMnKSwgYWN0dWFsLCByZXN1bHRcblxuICAgIGlmIChvYmogaW5zdGFuY2VvZiB3aW5kb3cuTm9kZUxpc3QpIHtcbiAgICAgIGFjdHVhbCA9IEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChvYmosIGZ1bmN0aW9uKGVsKSB7IHJldHVybiBlbC50ZXh0Q29udGVudCB9KVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGV4dCkpIHtcbiAgICAgICAgcmVzdWx0ID0gY29udGFpbnMgP1xuICAgICAgICAgIHRleHRbZmxhZyh0aGlzLCAnbmVnYXRlJykgPyAnc29tZScgOiAnZXZlcnknXShmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNvbWUuY2FsbChvYmosIGZ1bmN0aW9uKGVsKSB7IHJldHVybiBlbC50ZXh0Q29udGVudCA9PT0gdCB9KVxuICAgICAgICAgIH0pXG4gICAgICAgICAgOlxuICAgICAgICAgIHV0aWxzLmVxbChhY3R1YWwsIHRleHQpXG5cbiAgICAgICAgYWN0dWFsID0gYWN0dWFsLmpvaW4oKVxuICAgICAgICB0ZXh0ID0gdGV4dC5qb2luKClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdHVhbCA9IGFjdHVhbC5qb2luKCcnKVxuICAgICAgICByZXN1bHQgPSBjb250YWlucyA/IGFjdHVhbC5pbmRleE9mKHRleHQpID49IDAgOiBhY3R1YWwgPT09IHRleHRcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYWN0dWFsID0gZmxhZyh0aGlzLCAnb2JqZWN0JykudGV4dENvbnRlbnRcbiAgICAgIHJlc3VsdCA9IGNvbnRhaW5zID8gYWN0dWFsLmluZGV4T2YodGV4dCkgPj0gMCA6IGFjdHVhbCA9PT0gdGV4dFxuICAgIH1cblxuICAgIHZhciBvYmpEZXNjID0gZWxUb1N0cmluZyhvYmopXG4gICAgaWYgKGNvbnRhaW5zKSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgcmVzdWx0XG4gICAgICAgICwgJ2V4cGVjdGVkICcgKyBvYmpEZXNjICsgJyB0byBjb250YWluICN7ZXhwfSwgYnV0IHRoZSB0ZXh0IHdhcyAje2FjdH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICcgKyBvYmpEZXNjICsgJyBub3QgdG8gY29udGFpbiAje2V4cH0sIGJ1dCB0aGUgdGV4dCB3YXMgI3thY3R9J1xuICAgICAgICAsIHRleHRcbiAgICAgICAgLCBhY3R1YWxcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgIHJlc3VsdFxuICAgICAgICAsICdleHBlY3RlZCAnICsgb2JqRGVzYyArICcgdG8gaGF2ZSB0ZXh0ICN7ZXhwfSwgYnV0IHRoZSB0ZXh0IHdhcyAje2FjdH0nXG4gICAgICAgICwgJ2V4cGVjdGVkICcgKyBvYmpEZXNjICsgJyBub3QgdG8gaGF2ZSB0ZXh0ICN7ZXhwfSdcbiAgICAgICAgLCB0ZXh0XG4gICAgICAgICwgYWN0dWFsXG4gICAgICApXG4gICAgfVxuICB9KVxuXG4gIGNoYWkuQXNzZXJ0aW9uLmFkZE1ldGhvZCgndmFsdWUnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBlbCA9IGZsYWcodGhpcywgJ29iamVjdCcpLCBhY3R1YWwgPSBmbGFnKHRoaXMsICdvYmplY3QnKS52YWx1ZVxuICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgZmxhZyh0aGlzLCAnb2JqZWN0JykudmFsdWUgPT09IHZhbHVlXG4gICAgICAsICdleHBlY3RlZCAnICsgZWxUb1N0cmluZyhlbCkgKyAnIHRvIGhhdmUgdmFsdWUgI3tleHB9LCBidXQgdGhlIHZhbHVlIHdhcyAje2FjdH0nXG4gICAgICAsICdleHBlY3RlZCAnICsgZWxUb1N0cmluZyhlbCkgKyAnIG5vdCB0byBoYXZlIHZhbHVlICN7ZXhwfSdcbiAgICAgICwgdmFsdWVcbiAgICAgICwgYWN0dWFsXG4gICAgKVxuICB9KVxuXG4gIGNoYWkuQXNzZXJ0aW9uLm92ZXJ3cml0ZVByb3BlcnR5KCdleGlzdCcsIGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIHdpbmRvdy5Ob2RlTGlzdCkge1xuICAgICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBvYmoubGVuZ3RoID4gMFxuICAgICAgICAgICwgJ2V4cGVjdGVkIGFuIGVtcHR5IE5vZGVMaXN0IHRvIGhhdmUgbm9kZXMnXG4gICAgICAgICAgLCAnZXhwZWN0ZWQgJyArIGVsVG9TdHJpbmcob2JqKSArICcgdG8gbm90IGV4aXN0JylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG4gIGNoYWkuQXNzZXJ0aW9uLm92ZXJ3cml0ZVByb3BlcnR5KCdlbXB0eScsIGZ1bmN0aW9uKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MRWxlbWVudCkge1xuICAgICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBvYmouY2hpbGRyZW4ubGVuZ3RoID09PSAwXG4gICAgICAgICAgLCAnZXhwZWN0ZWQgJyArIGVsVG9TdHJpbmcob2JqKSArICcgdG8gYmUgZW1wdHknXG4gICAgICAgICAgLCAnZXhwZWN0ZWQgJyArIGVsVG9TdHJpbmcob2JqKSArICcgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2Ygd2luZG93Lk5vZGVMaXN0KSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgIG9iai5sZW5ndGggPT09IDBcbiAgICAgICAgICAsICdleHBlY3RlZCAnICsgZWxUb1N0cmluZyhvYmopICsgJyB0byBiZSBlbXB0eSdcbiAgICAgICAgICAsICdleHBlY3RlZCAnICsgZWxUb1N0cmluZyhvYmopICsgJyB0byBub3QgYmUgZW1wdHknKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9XG4gIH0pXG5cbiAgY2hhaS5Bc3NlcnRpb24ub3ZlcndyaXRlQ2hhaW5hYmxlTWV0aG9kKCdsZW5ndGgnLFxuICAgIGZ1bmN0aW9uKF9zdXBlcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGxlbmd0aCkge1xuICAgICAgICB2YXIgb2JqID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIHdpbmRvdy5Ob2RlTGlzdCB8fCBvYmogaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgYWN0dWFsTGVuZ3RoID0gb2JqLmNoaWxkcmVuID8gb2JqLmNoaWxkcmVuLmxlbmd0aCA6IG9iai5sZW5ndGg7XG4gICAgICAgICAgdGhpcy5hc3NlcnQoXG4gICAgICAgICAgICAgIGFjdHVhbExlbmd0aCA9PT0gbGVuZ3RoXG4gICAgICAgICAgICAsICdleHBlY3RlZCAnICsgZWxUb1N0cmluZyhvYmopICsgJyB0byBoYXZlICN7ZXhwfSBjaGlsZHJlbiBidXQgaXQgaGFkICN7YWN0fSBjaGlsZHJlbidcbiAgICAgICAgICAgICwgJ2V4cGVjdGVkICcgKyBlbFRvU3RyaW5nKG9iaikgKyAnIHRvIG5vdCBoYXZlICN7ZXhwfSBjaGlsZHJlbidcbiAgICAgICAgICAgICwgbGVuZ3RoXG4gICAgICAgICAgICAsIGFjdHVhbExlbmd0aFxuICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBmdW5jdGlvbihfc3VwZXIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgX3N1cGVyLmNhbGwodGhpcylcbiAgICAgIH1cbiAgICB9XG4gIClcblxuXG4gIGNoYWkuQXNzZXJ0aW9uLm92ZXJ3cml0ZU1ldGhvZCgnbWF0Y2gnLCBmdW5jdGlvbihfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgIHZhciBvYmogPSBmbGFnKHRoaXMsICdvYmplY3QnKVxuICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MRWxlbWVudCkge1xuICAgICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICBvYmoubWF0Y2hlcyhzZWxlY3RvcilcbiAgICAgICAgICAsICdleHBlY3RlZCAnICsgZWxUb1N0cmluZyhvYmopICsgJyB0byBtYXRjaCAje2V4cH0nXG4gICAgICAgICAgLCAnZXhwZWN0ZWQgJyArIGVsVG9TdHJpbmcob2JqKSArICcgdG8gbm90IG1hdGNoICN7ZXhwfSdcbiAgICAgICAgICAsIHNlbGVjdG9yXG4gICAgICAgIClcbiAgICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2Ygd2luZG93Lk5vZGVMaXN0KSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgICghIW9iai5sZW5ndGggJiYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5LmNhbGwob2JqLCBmdW5jdGlvbihlbCkgeyByZXR1cm4gZWwubWF0Y2hlcyhzZWxlY3RvcikgfSkpXG4gICAgICAgICAgLCAnZXhwZWN0ZWQgJyArIGVsVG9TdHJpbmcob2JqKSArICcgdG8gbWF0Y2ggI3tleHB9J1xuICAgICAgICAgICwgJ2V4cGVjdGVkICcgKyBlbFRvU3RyaW5nKG9iaikgKyAnIHRvIG5vdCBtYXRjaCAje2V4cH0nXG4gICAgICAgICAgLCBzZWxlY3RvclxuICAgICAgICApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfVxuICAgIH1cbiAgfSlcblxuICBjaGFpLkFzc2VydGlvbi5vdmVyd3JpdGVDaGFpbmFibGVNZXRob2QoJ2NvbnRhaW4nLFxuICAgIGZ1bmN0aW9uKF9zdXBlcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN1Yml0ZW0pIHtcbiAgICAgICAgdmFyIG9iaiA9IGZsYWcodGhpcywgJ29iamVjdCcpXG4gICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiB3aW5kb3cuSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHN1Yml0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICAgICAgISFvYmoucXVlcnlTZWxlY3RvcihzdWJpdGVtKVxuICAgICAgICAgICAgICAsICdleHBlY3RlZCAnICsgZWxUb1N0cmluZyhvYmopICsgJyB0byBjb250YWluICN7ZXhwfSdcbiAgICAgICAgICAgICAgLCAnZXhwZWN0ZWQgJyArIGVsVG9TdHJpbmcob2JqKSArICcgdG8gbm90IGNvbnRhaW4gI3tleHB9J1xuICAgICAgICAgICAgICAsIHN1Yml0ZW0pXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXNzZXJ0KFxuICAgICAgICAgICAgICBvYmouY29udGFpbnMoc3ViaXRlbSlcbiAgICAgICAgICAgICAgLCAnZXhwZWN0ZWQgJyArIGVsVG9TdHJpbmcob2JqKSArICcgdG8gY29udGFpbiAnICsgZWxUb1N0cmluZyhzdWJpdGVtKVxuICAgICAgICAgICAgICAsICdleHBlY3RlZCAnICsgZWxUb1N0cmluZyhvYmopICsgJyB0byBub3QgY29udGFpbiAnICsgZWxUb1N0cmluZyhzdWJpdGVtKSlcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIF9zdXBlci5jYWxsKHRoaXMpXG4gICAgICB9XG4gICAgfVxuICApXG5cbiAgY2hhaS5Bc3NlcnRpb24uYWRkUHJvcGVydHkoJ2Rpc3BsYXllZCcsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbCA9IGZsYWcodGhpcywgJ29iamVjdCcpLFxuICAgICAgICBhY3R1YWwgPSBkb2N1bWVudC5ib2R5LmNvbnRhaW5zKGVsKSA/IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKS5kaXNwbGF5IDogZWwuc3R5bGUuZGlzcGxheVxuXG4gICAgdGhpcy5hc3NlcnQoXG4gICAgICBhY3R1YWwgIT09ICdub25lJ1xuICAgICAgLCAnZXhwZWN0ZWQgJyArIGVsVG9TdHJpbmcoZWwpICsgJyB0byBiZSBkaXNwbGF5ZWQsIGJ1dCBpdCB3YXMgbm90J1xuICAgICAgLCAnZXhwZWN0ZWQgJyArIGVsVG9TdHJpbmcoZWwpICsgJyB0byBub3QgYmUgZGlzcGxheWVkLCBidXQgaXQgd2FzIGFzICcgKyBhY3R1YWxcbiAgICAgICwgYWN0dWFsXG4gICAgKVxuICB9KVxufSkpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBjaGFpU3R5bGVcblxuZnVuY3Rpb24gY2hhaVN0eWxlKGNoYWksIHV0aWxzKSB7XG4gIGNvbnN0IHtBc3NlcnRpb259ID0gY2hhaVxuICBjb25zdCB7ZmxhZ30gPSB1dGlsc1xuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoJ3N0eWxlJywgZnVuY3Rpb24ocHJvcGVydHksIHZhbHVlID0gJycpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZmxhZyh0aGlzLCAnb2JqZWN0JylcbiAgICBjb25zdCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpXG4gICAgdmFsdWUgPSB2YWx1ZS50cmltKClcblxuICAgIGNvbnN0IGlzTm9uQ29sb3JzID0gc3R5bGVbcHJvcGVydHldID09PSAncmdiYSgwLCAwLCAwLCAwKScgLy8gd2Via2l0XG4gICAgICB8fCBzdHlsZVtwcm9wZXJ0eV0gPT09ICd0cmFuc3BhcmVudCcgLy8gZmlyZWZveFxuXG4gICAgY29uc3QgcHJvcGVydHlWYWx1ZSA9IGlzTm9uQ29sb3JzXG4gICAgICA/ICcnXG4gICAgICA6IHN0eWxlW3Byb3BlcnR5XVxuXG4gICAgY29uc3QgYXNzZXJ0aW9uID0gdmFsdWVcbiAgICAgID8gY29tcGFyZUNTU1ZhbHVlKHByb3BlcnR5VmFsdWUsIHZhbHVlKVxuICAgICAgOiBCb29sZWFuKHByb3BlcnR5VmFsdWUpXG5cbiAgICBjb25zdCBlbGVtZW50VGFnID0gZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKClcblxuICAgIGNvbnN0IHRocm93TWVzc2FnZSA9IGBleHBlY3QgJHtlbGVtZW50VGFnfSB0byBoYXZlIHske3Byb3BlcnR5fTogJHt2YWx1ZX19LCBpcyByZWNlaXZpbmcgeyR7cHJvcGVydHl9OiAke3Byb3BlcnR5VmFsdWV9fWBcbiAgICBjb25zdCB0aHJvd01lc3NhZ2VOZWdhdGl2ZSA9IGBleHBlY3QgJHtlbGVtZW50VGFnfSB0byBub3QgaGF2ZSB7JHtwcm9wZXJ0eX06ICR7dmFsdWV9fSwgaXMgcmVjZWl2aW5nIHske3Byb3BlcnR5fTogJHtwcm9wZXJ0eVZhbHVlfX1gXG5cbiAgICB0aGlzLmFzc2VydChhc3NlcnRpb24sIHRocm93TWVzc2FnZSwgdGhyb3dNZXNzYWdlTmVnYXRpdmUsIHZhbHVlKVxuXG4gICAgZnVuY3Rpb24gY29tcGFyZUNTU1ZhbHVlKGNvbXB1dGVkLCBleHBlY3RlZCkge1xuICAgICAgY29uc3QgcHJvcGVydHlIaWZlbkNhc2UgPSBwcm9wZXJ0eS5yZXBsYWNlKC9bQS1aXS9nLCAobWF0Y2gpID0+ICctJyArIG1hdGNoLnRvTG93ZXJDYXNlKCkpXG4gICAgICBjb25zdCBmYWtlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIGZha2Uuc3R5bGUuZm9udFNpemUgPSBzdHlsZS5mb250U2l6ZVxuICAgICAgZmFrZS5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eUhpZmVuQ2FzZSwgZXhwZWN0ZWQsICdpbXBvcnRhbnQnKVxuICAgICAgY29uc3QgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJylcbiAgICAgIGlmcmFtZS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbidcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKVxuICAgICAgaWZyYW1lLmFwcGVuZENoaWxkKGZha2UpXG4gICAgICBjb25zdCBmYWtlU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShmYWtlKVxuICAgICAgY29uc3QgdmFsdWUgPSBmYWtlU3R5bGVbcHJvcGVydHldXG5cbiAgICAgIGNvbnN0IGhhc0F1dG9WYWx1ZSA9IHZhbHVlLmluY2x1ZGVzKCdhdXRvJylcbiAgICAgIGNvbnN0IHJlZyA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXhwKHZhbHVlKS5yZXBsYWNlKC9hdXRvL2csICcoXFxcXGQrKC5cXFxcZCspP3B4fGF1dG8pJykpXG5cbiAgICAgIHJldHVybiBoYXNBdXRvVmFsdWVcbiAgICAgICAgPyByZWcudGVzdChjb21wdXRlZClcbiAgICAgICAgOiBjb21wdXRlZCA9PT0gdmFsdWVcbiAgICB9XG4gIH0pXG59XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmdyL1JlZ0V4cC5lc2NhcGUvYmxvYi9tYXN0ZXIvcG9seWZpbGwuanNcbmZ1bmN0aW9uIGVzY2FwZVJlZ0V4cCh2YWx1ZSkge1xuICAgIHJldHVybiBTdHJpbmcodmFsdWUpLnJlcGxhY2UoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJylcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbi8qICFcbiAqIHR5cGUtZGV0ZWN0XG4gKiBDb3B5cmlnaHQoYykgMjAxMyBqYWtlIGx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG52YXIgZ2V0UHJvdG90eXBlT2ZFeGlzdHMgPSB0eXBlb2YgT2JqZWN0LmdldFByb3RvdHlwZU9mID09PSAnZnVuY3Rpb24nO1xudmFyIHByb21pc2VFeGlzdHMgPSB0eXBlb2YgUHJvbWlzZSA9PT0gJ2Z1bmN0aW9uJztcbnZhciBnbG9iYWxPYmplY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogc2VsZjsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxudmFyIGlzRG9tID0gJ2xvY2F0aW9uJyBpbiBnbG9iYWxPYmplY3QgJiYgJ2RvY3VtZW50JyBpbiBnbG9iYWxPYmplY3Q7XG52YXIgaHRtbEVsZW1lbnRFeGlzdHMgPSB0eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnO1xudmFyIGlzQXJyYXlFeGlzdHMgPSB0eXBlb2YgQXJyYXkuaXNBcnJheSA9PT0gJ2Z1bmN0aW9uJztcbnZhciBzeW1ib2xFeGlzdHMgPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJztcbnZhciBtYXBFeGlzdHMgPSB0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJztcbnZhciBzZXRFeGlzdHMgPSB0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJztcbnZhciB3ZWFrTWFwRXhpc3RzID0gdHlwZW9mIFdlYWtNYXAgIT09ICd1bmRlZmluZWQnO1xudmFyIHdlYWtTZXRFeGlzdHMgPSB0eXBlb2YgV2Vha1NldCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgZGF0YVZpZXdFeGlzdHMgPSB0eXBlb2YgRGF0YVZpZXcgIT09ICd1bmRlZmluZWQnO1xudmFyIHN5bWJvbEl0ZXJhdG9yRXhpc3RzID0gc3ltYm9sRXhpc3RzICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgIT09ICd1bmRlZmluZWQnO1xudmFyIHN5bWJvbFRvU3RyaW5nVGFnRXhpc3RzID0gc3ltYm9sRXhpc3RzICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgIT09ICd1bmRlZmluZWQnO1xudmFyIHNldEVudHJpZXNFeGlzdHMgPSBzZXRFeGlzdHMgJiYgdHlwZW9mIFNldC5wcm90b3R5cGUuZW50cmllcyA9PT0gJ2Z1bmN0aW9uJztcbnZhciBtYXBFbnRyaWVzRXhpc3RzID0gbWFwRXhpc3RzICYmIHR5cGVvZiBNYXAucHJvdG90eXBlLmVudHJpZXMgPT09ICdmdW5jdGlvbic7XG52YXIgc2V0SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZkV4aXN0cyAmJiBzZXRFbnRyaWVzRXhpc3RzICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgU2V0KCkuZW50cmllcygpKTtcbnZhciBtYXBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mRXhpc3RzICYmIG1hcEVudHJpZXNFeGlzdHMgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBNYXAoKS5lbnRyaWVzKCkpO1xudmFyIGFycmF5SXRlcmF0b3JFeGlzdHMgPSBzeW1ib2xJdGVyYXRvckV4aXN0cyAmJiB0eXBlb2YgQXJyYXkucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG52YXIgYXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGFycmF5SXRlcmF0b3JFeGlzdHMgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSk7XG52YXIgc3RyaW5nSXRlcmF0b3JFeGlzdHMgPSBzeW1ib2xJdGVyYXRvckV4aXN0cyAmJiB0eXBlb2YgQXJyYXkucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG52YXIgc3RyaW5nSXRlcmF0b3JQcm90b3R5cGUgPSBzdHJpbmdJdGVyYXRvckV4aXN0cyAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoJydbU3ltYm9sLml0ZXJhdG9yXSgpKTtcbnZhciB0b1N0cmluZ0xlZnRTbGljZUxlbmd0aCA9IDg7XG52YXIgdG9TdHJpbmdSaWdodFNsaWNlTGVuZ3RoID0gLTE7XG4vKipcbiAqICMjIyB0eXBlT2YgKG9iailcbiAqXG4gKiBVc2VzIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCB0byBkZXRlcm1pbmUgdGhlIHR5cGUgb2YgYW4gb2JqZWN0LFxuICogbm9ybWFsaXNpbmcgYmVoYXZpb3VyIGFjcm9zcyBlbmdpbmUgdmVyc2lvbnMgJiB3ZWxsIG9wdGltaXNlZC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBvYmplY3RcbiAqIEByZXR1cm4ge1N0cmluZ30gb2JqZWN0IHR5cGVcbiAqIEBhcGkgcHVibGljXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHlwZURldGVjdChvYmopIHtcbiAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgICogUHJlOlxuICAgKiAgIHN0cmluZyBsaXRlcmFsICAgICB4IDMsMDM5LDAzNSBvcHMvc2VjIMKxMS42MiUgKDc4IHJ1bnMgc2FtcGxlZClcbiAgICogICBib29sZWFuIGxpdGVyYWwgICAgeCAxLDQyNCwxMzggb3BzL3NlYyDCsTQuNTQlICg3NSBydW5zIHNhbXBsZWQpXG4gICAqICAgbnVtYmVyIGxpdGVyYWwgICAgIHggMSw2NTMsMTUzIG9wcy9zZWMgwrExLjkxJSAoODIgcnVucyBzYW1wbGVkKVxuICAgKiAgIHVuZGVmaW5lZCAgICAgICAgICB4IDksOTc4LDY2MCBvcHMvc2VjIMKxMS45MiUgKDc1IHJ1bnMgc2FtcGxlZClcbiAgICogICBmdW5jdGlvbiAgICAgICAgICAgeCAyLDU1Niw3Njkgb3BzL3NlYyDCsTEuNzMlICg3NyBydW5zIHNhbXBsZWQpXG4gICAqIFBvc3Q6XG4gICAqICAgc3RyaW5nIGxpdGVyYWwgICAgIHggMzgsNTY0LDc5NiBvcHMvc2VjIMKxMS4xNSUgKDc5IHJ1bnMgc2FtcGxlZClcbiAgICogICBib29sZWFuIGxpdGVyYWwgICAgeCAzMSwxNDgsOTQwIG9wcy9zZWMgwrExLjEwJSAoNzkgcnVucyBzYW1wbGVkKVxuICAgKiAgIG51bWJlciBsaXRlcmFsICAgICB4IDMyLDY3OSwzMzAgb3BzL3NlYyDCsTEuOTAlICg3OCBydW5zIHNhbXBsZWQpXG4gICAqICAgdW5kZWZpbmVkICAgICAgICAgIHggMzIsMzYzLDM2OCBvcHMvc2VjIMKxMS4wNyUgKDgyIHJ1bnMgc2FtcGxlZClcbiAgICogICBmdW5jdGlvbiAgICAgICAgICAgeCAzMSwyOTYsODcwIG9wcy9zZWMgwrEwLjk2JSAoODMgcnVucyBzYW1wbGVkKVxuICAgKi9cbiAgdmFyIHR5cGVvZk9iaiA9IHR5cGVvZiBvYmo7XG4gIGlmICh0eXBlb2ZPYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHR5cGVvZk9iajtcbiAgfVxuXG4gIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICAqIFByZTpcbiAgICogICBudWxsICAgICAgICAgICAgICAgeCAyOCw2NDUsNzY1IG9wcy9zZWMgwrExLjE3JSAoODIgcnVucyBzYW1wbGVkKVxuICAgKiBQb3N0OlxuICAgKiAgIG51bGwgICAgICAgICAgICAgICB4IDM2LDQyOCw5NjIgb3BzL3NlYyDCsTEuMzclICg4NCBydW5zIHNhbXBsZWQpXG4gICAqL1xuICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgcmV0dXJuICdudWxsJztcbiAgfVxuXG4gIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdpbmRvdylgYFxuICAgKiAgLSBOb2RlID09PSBcIltvYmplY3QgZ2xvYmFsXVwiXG4gICAqICAtIENocm9tZSA9PT0gXCJbb2JqZWN0IGdsb2JhbF1cIlxuICAgKiAgLSBGaXJlZm94ID09PSBcIltvYmplY3QgV2luZG93XVwiXG4gICAqICAtIFBoYW50b21KUyA9PT0gXCJbb2JqZWN0IFdpbmRvd11cIlxuICAgKiAgLSBTYWZhcmkgPT09IFwiW29iamVjdCBXaW5kb3ddXCJcbiAgICogIC0gSUUgMTEgPT09IFwiW29iamVjdCBXaW5kb3ddXCJcbiAgICogIC0gSUUgRWRnZSA9PT0gXCJbb2JqZWN0IFdpbmRvd11cIlxuICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMpYGBcbiAgICogIC0gQ2hyb21lIFdvcmtlciA9PT0gXCJbb2JqZWN0IGdsb2JhbF1cIlxuICAgKiAgLSBGaXJlZm94IFdvcmtlciA9PT0gXCJbb2JqZWN0IERlZGljYXRlZFdvcmtlckdsb2JhbFNjb3BlXVwiXG4gICAqICAtIFNhZmFyaSBXb3JrZXIgPT09IFwiW29iamVjdCBEZWRpY2F0ZWRXb3JrZXJHbG9iYWxTY29wZV1cIlxuICAgKiAgLSBJRSAxMSBXb3JrZXIgPT09IFwiW29iamVjdCBXb3JrZXJHbG9iYWxTY29wZV1cIlxuICAgKiAgLSBJRSBFZGdlIFdvcmtlciA9PT0gXCJbb2JqZWN0IFdvcmtlckdsb2JhbFNjb3BlXVwiXG4gICAqL1xuICBpZiAob2JqID09PSBnbG9iYWxPYmplY3QpIHtcbiAgICByZXR1cm4gJ2dsb2JhbCc7XG4gIH1cblxuICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAgKiBQcmU6XG4gICAqICAgYXJyYXkgbGl0ZXJhbCAgICAgIHggMiw4ODgsMzUyIG9wcy9zZWMgwrEwLjY3JSAoODIgcnVucyBzYW1wbGVkKVxuICAgKiBQb3N0OlxuICAgKiAgIGFycmF5IGxpdGVyYWwgICAgICB4IDIyLDQ3OSw2NTAgb3BzL3NlYyDCsTAuOTYlICg4MSBydW5zIHNhbXBsZWQpXG4gICAqL1xuICBpZiAoaXNBcnJheUV4aXN0cyAmJiBBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICByZXR1cm4gJ0FycmF5JztcbiAgfVxuXG4gIGlmIChpc0RvbSkge1xuICAgIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgICAqIChodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9icm93c2Vycy5odG1sI2xvY2F0aW9uKVxuICAgICAqIFdoYXRXRyBIVE1MJDcuNy4zIC0gVGhlIGBMb2NhdGlvbmAgaW50ZXJmYWNlXG4gICAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh3aW5kb3cubG9jYXRpb24pYGBcbiAgICAgKiAgLSBJRSA8PTExID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAgICogIC0gSUUgRWRnZSA8PTEzID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAgICovXG4gICAgaWYgKG9iaiA9PT0gZ2xvYmFsT2JqZWN0LmxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gJ0xvY2F0aW9uJztcbiAgICB9XG5cbiAgICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICAgKiAoaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jZG9jdW1lbnQpXG4gICAgICogV2hhdFdHIEhUTUwkMy4xLjEgLSBUaGUgYERvY3VtZW50YCBvYmplY3RcbiAgICAgKiBOb3RlOiBNb3N0IGJyb3dzZXJzIGN1cnJlbnRseSBhZGhlciB0byB0aGUgVzNDIERPTSBMZXZlbCAyIHNwZWNcbiAgICAgKiAgICAgICAoaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0yLUhUTUwvaHRtbC5odG1sI0lELTI2ODA5MjY4KVxuICAgICAqICAgICAgIHdoaWNoIHN1Z2dlc3RzIHRoYXQgYnJvd3NlcnMgc2hvdWxkIHVzZSBIVE1MVGFibGVDZWxsRWxlbWVudCBmb3JcbiAgICAgKiAgICAgICBib3RoIFREIGFuZCBUSCBlbGVtZW50cy4gV2hhdFdHIHNlcGFyYXRlcyB0aGVzZS5cbiAgICAgKiAgICAgICBXaGF0V0cgSFRNTCBzdGF0ZXM6XG4gICAgICogICAgICAgICA+IEZvciBoaXN0b3JpY2FsIHJlYXNvbnMsIFdpbmRvdyBvYmplY3RzIG11c3QgYWxzbyBoYXZlIGFcbiAgICAgKiAgICAgICAgID4gd3JpdGFibGUsIGNvbmZpZ3VyYWJsZSwgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgbmFtZWRcbiAgICAgKiAgICAgICAgID4gSFRNTERvY3VtZW50IHdob3NlIHZhbHVlIGlzIHRoZSBEb2N1bWVudCBpbnRlcmZhY2Ugb2JqZWN0LlxuICAgICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZG9jdW1lbnQpYGBcbiAgICAgKiAgLSBDaHJvbWUgPT09IFwiW29iamVjdCBIVE1MRG9jdW1lbnRdXCJcbiAgICAgKiAgLSBGaXJlZm94ID09PSBcIltvYmplY3QgSFRNTERvY3VtZW50XVwiXG4gICAgICogIC0gU2FmYXJpID09PSBcIltvYmplY3QgSFRNTERvY3VtZW50XVwiXG4gICAgICogIC0gSUUgPD0xMCA9PT0gXCJbb2JqZWN0IERvY3VtZW50XVwiXG4gICAgICogIC0gSUUgMTEgPT09IFwiW29iamVjdCBIVE1MRG9jdW1lbnRdXCJcbiAgICAgKiAgLSBJRSBFZGdlIDw9MTMgPT09IFwiW29iamVjdCBIVE1MRG9jdW1lbnRdXCJcbiAgICAgKi9cbiAgICBpZiAob2JqID09PSBnbG9iYWxPYmplY3QuZG9jdW1lbnQpIHtcbiAgICAgIHJldHVybiAnRG9jdW1lbnQnO1xuICAgIH1cblxuICAgIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgICAqIChodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS93ZWJhcHBhcGlzLmh0bWwjbWltZXR5cGVhcnJheSlcbiAgICAgKiBXaGF0V0cgSFRNTCQ4LjYuMS41IC0gUGx1Z2lucyAtIEludGVyZmFjZSBNaW1lVHlwZUFycmF5XG4gICAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuYXZpZ2F0b3IubWltZVR5cGVzKWBgXG4gICAgICogIC0gSUUgPD0xMCA9PT0gXCJbb2JqZWN0IE1TTWltZVR5cGVzQ29sbGVjdGlvbl1cIlxuICAgICAqL1xuICAgIGlmIChvYmogPT09IChnbG9iYWxPYmplY3QubmF2aWdhdG9yIHx8IHt9KS5taW1lVHlwZXMpIHtcbiAgICAgIHJldHVybiAnTWltZVR5cGVBcnJheSc7XG4gICAgfVxuXG4gICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICogKGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3dlYmFwcGFwaXMuaHRtbCNwbHVnaW5hcnJheSlcbiAgICAgKiBXaGF0V0cgSFRNTCQ4LjYuMS41IC0gUGx1Z2lucyAtIEludGVyZmFjZSBQbHVnaW5BcnJheVxuICAgICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmF2aWdhdG9yLnBsdWdpbnMpYGBcbiAgICAgKiAgLSBJRSA8PTEwID09PSBcIltvYmplY3QgTVNQbHVnaW5zQ29sbGVjdGlvbl1cIlxuICAgICAqL1xuICAgIGlmIChvYmogPT09IChnbG9iYWxPYmplY3QubmF2aWdhdG9yIHx8IHt9KS5wbHVnaW5zKSB7XG4gICAgICByZXR1cm4gJ1BsdWdpbkFycmF5JztcbiAgICB9XG5cbiAgICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICAgKiAoaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2ViYXBwYXBpcy5odG1sI3BsdWdpbmFycmF5KVxuICAgICAqIFdoYXRXRyBIVE1MJDQuNC40IC0gVGhlIGBibG9ja3F1b3RlYCBlbGVtZW50IC0gSW50ZXJmYWNlIGBIVE1MUXVvdGVFbGVtZW50YFxuICAgICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYmxvY2txdW90ZScpKWBgXG4gICAgICogIC0gSUUgPD0xMCA9PT0gXCJbb2JqZWN0IEhUTUxCbG9ja0VsZW1lbnRdXCJcbiAgICAgKi9cbiAgICBpZiAoaHRtbEVsZW1lbnRFeGlzdHMgJiYgb2JqIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgb2JqLnRhZ05hbWUgPT09ICdCTE9DS1FVT1RFJykge1xuICAgICAgcmV0dXJuICdIVE1MUXVvdGVFbGVtZW50JztcbiAgICB9XG5cbiAgICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICAgKiAoaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jaHRtbHRhYmxlZGF0YWNlbGxlbGVtZW50KVxuICAgICAqIFdoYXRXRyBIVE1MJDQuOS45IC0gVGhlIGB0ZGAgZWxlbWVudCAtIEludGVyZmFjZSBgSFRNTFRhYmxlRGF0YUNlbGxFbGVtZW50YFxuICAgICAqIE5vdGU6IE1vc3QgYnJvd3NlcnMgY3VycmVudGx5IGFkaGVyIHRvIHRoZSBXM0MgRE9NIExldmVsIDIgc3BlY1xuICAgICAqICAgICAgIChodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItSFRNTC9odG1sLmh0bWwjSUQtODI5MTUwNzUpXG4gICAgICogICAgICAgd2hpY2ggc3VnZ2VzdHMgdGhhdCBicm93c2VycyBzaG91bGQgdXNlIEhUTUxUYWJsZUNlbGxFbGVtZW50IGZvclxuICAgICAqICAgICAgIGJvdGggVEQgYW5kIFRIIGVsZW1lbnRzLiBXaGF0V0cgc2VwYXJhdGVzIHRoZXNlLlxuICAgICAqIFRlc3Q6IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpKVxuICAgICAqICAtIENocm9tZSA9PT0gXCJbb2JqZWN0IEhUTUxUYWJsZUNlbGxFbGVtZW50XVwiXG4gICAgICogIC0gRmlyZWZveCA9PT0gXCJbb2JqZWN0IEhUTUxUYWJsZUNlbGxFbGVtZW50XVwiXG4gICAgICogIC0gU2FmYXJpID09PSBcIltvYmplY3QgSFRNTFRhYmxlQ2VsbEVsZW1lbnRdXCJcbiAgICAgKi9cbiAgICBpZiAoaHRtbEVsZW1lbnRFeGlzdHMgJiYgb2JqIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgb2JqLnRhZ05hbWUgPT09ICdURCcpIHtcbiAgICAgIHJldHVybiAnSFRNTFRhYmxlRGF0YUNlbGxFbGVtZW50JztcbiAgICB9XG5cbiAgICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICAgKiAoaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jaHRtbHRhYmxlaGVhZGVyY2VsbGVsZW1lbnQpXG4gICAgICogV2hhdFdHIEhUTUwkNC45LjkgLSBUaGUgYHRkYCBlbGVtZW50IC0gSW50ZXJmYWNlIGBIVE1MVGFibGVIZWFkZXJDZWxsRWxlbWVudGBcbiAgICAgKiBOb3RlOiBNb3N0IGJyb3dzZXJzIGN1cnJlbnRseSBhZGhlciB0byB0aGUgVzNDIERPTSBMZXZlbCAyIHNwZWNcbiAgICAgKiAgICAgICAoaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0yLUhUTUwvaHRtbC5odG1sI0lELTgyOTE1MDc1KVxuICAgICAqICAgICAgIHdoaWNoIHN1Z2dlc3RzIHRoYXQgYnJvd3NlcnMgc2hvdWxkIHVzZSBIVE1MVGFibGVDZWxsRWxlbWVudCBmb3JcbiAgICAgKiAgICAgICBib3RoIFREIGFuZCBUSCBlbGVtZW50cy4gV2hhdFdHIHNlcGFyYXRlcyB0aGVzZS5cbiAgICAgKiBUZXN0OiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKSlcbiAgICAgKiAgLSBDaHJvbWUgPT09IFwiW29iamVjdCBIVE1MVGFibGVDZWxsRWxlbWVudF1cIlxuICAgICAqICAtIEZpcmVmb3ggPT09IFwiW29iamVjdCBIVE1MVGFibGVDZWxsRWxlbWVudF1cIlxuICAgICAqICAtIFNhZmFyaSA9PT0gXCJbb2JqZWN0IEhUTUxUYWJsZUNlbGxFbGVtZW50XVwiXG4gICAgICovXG4gICAgaWYgKGh0bWxFbGVtZW50RXhpc3RzICYmIG9iaiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmIG9iai50YWdOYW1lID09PSAnVEgnKSB7XG4gICAgICByZXR1cm4gJ0hUTUxUYWJsZUhlYWRlckNlbGxFbGVtZW50JztcbiAgICB9XG4gIH1cblxuICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAqIFByZTpcbiAgKiAgIEZsb2F0NjRBcnJheSAgICAgICB4IDYyNSw2NDQgb3BzL3NlYyDCsTEuNTglICg4MCBydW5zIHNhbXBsZWQpXG4gICogICBGbG9hdDMyQXJyYXkgICAgICAgeCAxLDI3OSw4NTIgb3BzL3NlYyDCsTIuOTElICg3NyBydW5zIHNhbXBsZWQpXG4gICogICBVaW50MzJBcnJheSAgICAgICAgeCAxLDE3OCwxODUgb3BzL3NlYyDCsTEuOTUlICg4MyBydW5zIHNhbXBsZWQpXG4gICogICBVaW50MTZBcnJheSAgICAgICAgeCAxLDAwOCwzODAgb3BzL3NlYyDCsTIuMjUlICg4MCBydW5zIHNhbXBsZWQpXG4gICogICBVaW50OEFycmF5ICAgICAgICAgeCAxLDEyOCwwNDAgb3BzL3NlYyDCsTIuMTElICg4MSBydW5zIHNhbXBsZWQpXG4gICogICBJbnQzMkFycmF5ICAgICAgICAgeCAxLDE3MCwxMTkgb3BzL3NlYyDCsTIuODglICg4MCBydW5zIHNhbXBsZWQpXG4gICogICBJbnQxNkFycmF5ICAgICAgICAgeCAxLDE3NiwzNDggb3BzL3NlYyDCsTUuNzklICg4NiBydW5zIHNhbXBsZWQpXG4gICogICBJbnQ4QXJyYXkgICAgICAgICAgeCAxLDA1OCw3MDcgb3BzL3NlYyDCsTQuOTQlICg3NyBydW5zIHNhbXBsZWQpXG4gICogICBVaW50OENsYW1wZWRBcnJheSAgeCAxLDExMCw2MzMgb3BzL3NlYyDCsTQuMjAlICg4MCBydW5zIHNhbXBsZWQpXG4gICogUG9zdDpcbiAgKiAgIEZsb2F0NjRBcnJheSAgICAgICB4IDcsMTA1LDY3MSBvcHMvc2VjIMKxMTMuNDclICg2NCBydW5zIHNhbXBsZWQpXG4gICogICBGbG9hdDMyQXJyYXkgICAgICAgeCA1LDg4Nyw5MTIgb3BzL3NlYyDCsTEuNDYlICg4MiBydW5zIHNhbXBsZWQpXG4gICogICBVaW50MzJBcnJheSAgICAgICAgeCA2LDQ5MSw2NjEgb3BzL3NlYyDCsTEuNzYlICg3OSBydW5zIHNhbXBsZWQpXG4gICogICBVaW50MTZBcnJheSAgICAgICAgeCA2LDU1OSw3OTUgb3BzL3NlYyDCsTEuNjclICg4MiBydW5zIHNhbXBsZWQpXG4gICogICBVaW50OEFycmF5ICAgICAgICAgeCA2LDQ2Myw5NjYgb3BzL3NlYyDCsTEuNDMlICg4NSBydW5zIHNhbXBsZWQpXG4gICogICBJbnQzMkFycmF5ICAgICAgICAgeCA1LDY0MSw4NDEgb3BzL3NlYyDCsTMuNDklICg4MSBydW5zIHNhbXBsZWQpXG4gICogICBJbnQxNkFycmF5ICAgICAgICAgeCA2LDU4Myw1MTEgb3BzL3NlYyDCsTEuOTglICg4MCBydW5zIHNhbXBsZWQpXG4gICogICBJbnQ4QXJyYXkgICAgICAgICAgeCA2LDYwNiwwNzggb3BzL3NlYyDCsTEuNzQlICg4MSBydW5zIHNhbXBsZWQpXG4gICogICBVaW50OENsYW1wZWRBcnJheSAgeCA2LDYwMiwyMjQgb3BzL3NlYyDCsTEuNzclICg4MyBydW5zIHNhbXBsZWQpXG4gICovXG4gIHZhciBzdHJpbmdUYWcgPSAoc3ltYm9sVG9TdHJpbmdUYWdFeGlzdHMgJiYgb2JqW1N5bWJvbC50b1N0cmluZ1RhZ10pO1xuICBpZiAodHlwZW9mIHN0cmluZ1RhZyA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gc3RyaW5nVGFnO1xuICB9XG5cbiAgaWYgKGdldFByb3RvdHlwZU9mRXhpc3RzKSB7XG4gICAgdmFyIG9ialByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopO1xuICAgIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICAgKiBQcmU6XG4gICAgKiAgIHJlZ2V4IGxpdGVyYWwgICAgICB4IDEsNzcyLDM4NSBvcHMvc2VjIMKxMS44NSUgKDc3IHJ1bnMgc2FtcGxlZClcbiAgICAqICAgcmVnZXggY29uc3RydWN0b3IgIHggMiwxNDMsNjM0IG9wcy9zZWMgwrEyLjQ2JSAoNzggcnVucyBzYW1wbGVkKVxuICAgICogUG9zdDpcbiAgICAqICAgcmVnZXggbGl0ZXJhbCAgICAgIHggMyw5MjgsMDA5IG9wcy9zZWMgwrEwLjY1JSAoNzggcnVucyBzYW1wbGVkKVxuICAgICogICByZWdleCBjb25zdHJ1Y3RvciAgeCAzLDkzMSwxMDggb3BzL3NlYyDCsTAuNTglICg4NCBydW5zIHNhbXBsZWQpXG4gICAgKi9cbiAgICBpZiAob2JqUHJvdG90eXBlID09PSBSZWdFeHAucHJvdG90eXBlKSB7XG4gICAgICByZXR1cm4gJ1JlZ0V4cCc7XG4gICAgfVxuXG4gICAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgICAqIFByZTpcbiAgICAqICAgZGF0ZSAgICAgICAgICAgICAgIHggMiwxMzAsMDc0IG9wcy9zZWMgwrE0LjQyJSAoNjggcnVucyBzYW1wbGVkKVxuICAgICogUG9zdDpcbiAgICAqICAgZGF0ZSAgICAgICAgICAgICAgIHggMyw5NTMsNzc5IG9wcy9zZWMgwrExLjM1JSAoNzcgcnVucyBzYW1wbGVkKVxuICAgICovXG4gICAgaWYgKG9ialByb3RvdHlwZSA9PT0gRGF0ZS5wcm90b3R5cGUpIHtcbiAgICAgIHJldHVybiAnRGF0ZSc7XG4gICAgfVxuXG4gICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICogKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvaW5kZXguaHRtbCNzZWMtcHJvbWlzZS5wcm90b3R5cGUtQEB0b3N0cmluZ3RhZylcbiAgICAgKiBFUzYkMjUuNC41LjQgLSBQcm9taXNlLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXSBzaG91bGQgYmUgXCJQcm9taXNlXCI6XG4gICAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChQcm9taXNlLnJlc29sdmUoKSlgYFxuICAgICAqICAtIENocm9tZSA8PTQ3ID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAgICogIC0gRWRnZSA8PTIwID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAgICogIC0gRmlyZWZveCAyOS1MYXRlc3QgPT09IFwiW29iamVjdCBQcm9taXNlXVwiXG4gICAgICogIC0gU2FmYXJpIDcuMS1MYXRlc3QgPT09IFwiW29iamVjdCBQcm9taXNlXVwiXG4gICAgICovXG4gICAgaWYgKHByb21pc2VFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBQcm9taXNlLnByb3RvdHlwZSkge1xuICAgICAgcmV0dXJuICdQcm9taXNlJztcbiAgICB9XG5cbiAgICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAgICogUHJlOlxuICAgICogICBzZXQgICAgICAgICAgICAgICAgeCAyLDIyMiwxODYgb3BzL3NlYyDCsTEuMzElICg4MiBydW5zIHNhbXBsZWQpXG4gICAgKiBQb3N0OlxuICAgICogICBzZXQgICAgICAgICAgICAgICAgeCA0LDU0NSw4Nzkgb3BzL3NlYyDCsTEuMTMlICg4MyBydW5zIHNhbXBsZWQpXG4gICAgKi9cbiAgICBpZiAoc2V0RXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gU2V0LnByb3RvdHlwZSkge1xuICAgICAgcmV0dXJuICdTZXQnO1xuICAgIH1cblxuICAgIC8qICEgU3BlZWQgb3B0aW1pc2F0aW9uXG4gICAgKiBQcmU6XG4gICAgKiAgIG1hcCAgICAgICAgICAgICAgICB4IDIsMzk2LDg0MiBvcHMvc2VjIMKxMS41OSUgKDgxIHJ1bnMgc2FtcGxlZClcbiAgICAqIFBvc3Q6XG4gICAgKiAgIG1hcCAgICAgICAgICAgICAgICB4IDQsMTgzLDk0NSBvcHMvc2VjIMKxNi41OSUgKDgyIHJ1bnMgc2FtcGxlZClcbiAgICAqL1xuICAgIGlmIChtYXBFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBNYXAucHJvdG90eXBlKSB7XG4gICAgICByZXR1cm4gJ01hcCc7XG4gICAgfVxuXG4gICAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgICAqIFByZTpcbiAgICAqICAgd2Vha3NldCAgICAgICAgICAgIHggMSwzMjMsMjIwIG9wcy9zZWMgwrEyLjE3JSAoNzYgcnVucyBzYW1wbGVkKVxuICAgICogUG9zdDpcbiAgICAqICAgd2Vha3NldCAgICAgICAgICAgIHggNCwyMzcsNTEwIG9wcy9zZWMgwrEyLjAxJSAoNzcgcnVucyBzYW1wbGVkKVxuICAgICovXG4gICAgaWYgKHdlYWtTZXRFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBXZWFrU2V0LnByb3RvdHlwZSkge1xuICAgICAgcmV0dXJuICdXZWFrU2V0JztcbiAgICB9XG5cbiAgICAvKiAhIFNwZWVkIG9wdGltaXNhdGlvblxuICAgICogUHJlOlxuICAgICogICB3ZWFrbWFwICAgICAgICAgICAgeCAxLDUwMCwyNjAgb3BzL3NlYyDCsTIuMDIlICg3OCBydW5zIHNhbXBsZWQpXG4gICAgKiBQb3N0OlxuICAgICogICB3ZWFrbWFwICAgICAgICAgICAgeCAzLDg4MSwzODQgb3BzL3NlYyDCsTEuNDUlICg4MiBydW5zIHNhbXBsZWQpXG4gICAgKi9cbiAgICBpZiAod2Vha01hcEV4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IFdlYWtNYXAucHJvdG90eXBlKSB7XG4gICAgICByZXR1cm4gJ1dlYWtNYXAnO1xuICAgIH1cblxuICAgIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgICAqIChodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wL2luZGV4Lmh0bWwjc2VjLWRhdGF2aWV3LnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnKVxuICAgICAqIEVTNiQyNC4yLjQuMjEgLSBEYXRhVmlldy5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ10gc2hvdWxkIGJlIFwiRGF0YVZpZXdcIjpcbiAgICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKWBgXG4gICAgICogIC0gRWRnZSA8PTEzID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAgICovXG4gICAgaWYgKGRhdGFWaWV3RXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gRGF0YVZpZXcucHJvdG90eXBlKSB7XG4gICAgICByZXR1cm4gJ0RhdGFWaWV3JztcbiAgICB9XG5cbiAgICAvKiAhIFNwZWMgQ29uZm9ybWFuY2VcbiAgICAgKiAoaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC9pbmRleC5odG1sI3NlYy0lbWFwaXRlcmF0b3Jwcm90b3R5cGUlLUBAdG9zdHJpbmd0YWcpXG4gICAgICogRVM2JDIzLjEuNS4yLjIgLSAlTWFwSXRlcmF0b3JQcm90b3R5cGUlW0BAdG9TdHJpbmdUYWddIHNob3VsZCBiZSBcIk1hcCBJdGVyYXRvclwiOlxuICAgICAqIFRlc3Q6IGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3IE1hcCgpLmVudHJpZXMoKSlgYFxuICAgICAqICAtIEVkZ2UgPD0xMyA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIlxuICAgICAqL1xuICAgIGlmIChtYXBFeGlzdHMgJiYgb2JqUHJvdG90eXBlID09PSBtYXBJdGVyYXRvclByb3RvdHlwZSkge1xuICAgICAgcmV0dXJuICdNYXAgSXRlcmF0b3InO1xuICAgIH1cblxuICAgIC8qICEgU3BlYyBDb25mb3JtYW5jZVxuICAgICAqIChodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wL2luZGV4Lmh0bWwjc2VjLSVzZXRpdGVyYXRvcnByb3RvdHlwZSUtQEB0b3N0cmluZ3RhZylcbiAgICAgKiBFUzYkMjMuMi41LjIuMiAtICVTZXRJdGVyYXRvclByb3RvdHlwZSVbQEB0b1N0cmluZ1RhZ10gc2hvdWxkIGJlIFwiU2V0IEl0ZXJhdG9yXCI6XG4gICAgICogVGVzdDogYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXcgU2V0KCkuZW50cmllcygpKWBgXG4gICAgICogIC0gRWRnZSA8PTEzID09PSBcIltvYmplY3QgT2JqZWN0XVwiXG4gICAgICovXG4gICAgaWYgKHNldEV4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IHNldEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICByZXR1cm4gJ1NldCBJdGVyYXRvcic7XG4gICAgfVxuXG4gICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICogKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvaW5kZXguaHRtbCNzZWMtJWFycmF5aXRlcmF0b3Jwcm90b3R5cGUlLUBAdG9zdHJpbmd0YWcpXG4gICAgICogRVM2JDIyLjEuNS4yLjIgLSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSVbQEB0b1N0cmluZ1RhZ10gc2hvdWxkIGJlIFwiQXJyYXkgSXRlcmF0b3JcIjpcbiAgICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSlgYFxuICAgICAqICAtIEVkZ2UgPD0xMyA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIlxuICAgICAqL1xuICAgIGlmIChhcnJheUl0ZXJhdG9yRXhpc3RzICYmIG9ialByb3RvdHlwZSA9PT0gYXJyYXlJdGVyYXRvclByb3RvdHlwZSkge1xuICAgICAgcmV0dXJuICdBcnJheSBJdGVyYXRvcic7XG4gICAgfVxuXG4gICAgLyogISBTcGVjIENvbmZvcm1hbmNlXG4gICAgICogKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvaW5kZXguaHRtbCNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS1AQHRvc3RyaW5ndGFnKVxuICAgICAqIEVTNiQyMS4xLjUuMi4yIC0gJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJVtAQHRvU3RyaW5nVGFnXSBzaG91bGQgYmUgXCJTdHJpbmcgSXRlcmF0b3JcIjpcbiAgICAgKiBUZXN0OiBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCcnW1N5bWJvbC5pdGVyYXRvcl0oKSlgYFxuICAgICAqICAtIEVkZ2UgPD0xMyA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIlxuICAgICAqL1xuICAgIGlmIChzdHJpbmdJdGVyYXRvckV4aXN0cyAmJiBvYmpQcm90b3R5cGUgPT09IHN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICByZXR1cm4gJ1N0cmluZyBJdGVyYXRvcic7XG4gICAgfVxuXG4gICAgLyogISBTcGVlZCBvcHRpbWlzYXRpb25cbiAgICAqIFByZTpcbiAgICAqICAgb2JqZWN0IGZyb20gbnVsbCAgIHggMiw0MjQsMzIwIG9wcy9zZWMgwrExLjY3JSAoNzYgcnVucyBzYW1wbGVkKVxuICAgICogUG9zdDpcbiAgICAqICAgb2JqZWN0IGZyb20gbnVsbCAgIHggNSw4MzgsMDAwIG9wcy9zZWMgwrEwLjk5JSAoODQgcnVucyBzYW1wbGVkKVxuICAgICovXG4gICAgaWYgKG9ialByb3RvdHlwZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuICdPYmplY3QnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBPYmplY3RcbiAgICAucHJvdG90eXBlXG4gICAgLnRvU3RyaW5nXG4gICAgLmNhbGwob2JqKVxuICAgIC5zbGljZSh0b1N0cmluZ0xlZnRTbGljZUxlbmd0aCwgdG9TdHJpbmdSaWdodFNsaWNlTGVuZ3RoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLnR5cGVEZXRlY3QgPSBtb2R1bGUuZXhwb3J0cztcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGdsb2JhbHMgU3ltYm9sOiB0cnVlLCBVaW50OEFycmF5OiB0cnVlLCBXZWFrTWFwOiB0cnVlICovXG4vKiFcbiAqIGRlZXAtZXFsXG4gKiBDb3B5cmlnaHQoYykgMjAxMyBKYWtlIEx1ZXIgPGpha2VAYWxvZ2ljYWxwYXJhZG94LmNvbT5cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbi8qIVxuICogTW9kdWxlIGRlcGVuZGVuY2llc1xuICovXG5cbnZhciB0eXBlID0gcmVxdWlyZSgndHlwZS1kZXRlY3QnKTtcbmZ1bmN0aW9uIEZha2VNYXAoKSB7XG4gIHRoaXMuY2xlYXIoKTtcbn1cbkZha2VNYXAucHJvdG90eXBlID0ge1xuICBjbGVhcjogZnVuY3Rpb24gY2xlYXJNYXAoKSB7XG4gICAgdGhpcy5rZXlzID0gW107XG4gICAgdGhpcy52YWx1ZXMgPSBbXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiBzZXRNYXAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMua2V5cy5pbmRleE9mKGtleSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHRoaXMudmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmtleXMucHVzaChrZXkpO1xuICAgICAgdGhpcy52YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uIGdldE1hcChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZXNbdGhpcy5rZXlzLmluZGV4T2Yoa2V5KV07XG4gIH0sXG4gIGRlbGV0ZTogZnVuY3Rpb24gZGVsZXRlTWFwKGtleSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMua2V5cy5pbmRleE9mKGtleSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHRoaXMudmFsdWVzID0gdGhpcy52YWx1ZXMuc2xpY2UoMCwgaW5kZXgpLmNvbmNhdCh0aGlzLnZhbHVlcy5zbGljZShpbmRleCArIDEpKTtcbiAgICAgIHRoaXMua2V5cyA9IHRoaXMua2V5cy5zbGljZSgwLCBpbmRleCkuY29uY2F0KHRoaXMua2V5cy5zbGljZShpbmRleCArIDEpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG59O1xuXG52YXIgTWVtb2l6ZU1hcCA9IG51bGw7XG5pZiAodHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicpIHtcbiAgTWVtb2l6ZU1hcCA9IFdlYWtNYXA7XG59IGVsc2Uge1xuICBNZW1vaXplTWFwID0gRmFrZU1hcDtcbn1cblxuLyohXG4gKiBDaGVjayB0byBzZWUgaWYgdGhlIE1lbW9pemVNYXAgaGFzIHJlY29yZGVkIGEgcmVzdWx0IG9mIHRoZSB0d28gb3BlcmFuZHNcbiAqXG4gKiBAcGFyYW0ge01peGVkfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWl4ZWR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWVtb2l6ZU1hcH0gbWVtb2l6ZU1hcFxuICogQHJldHVybnMge0Jvb2xlYW58bnVsbH0gcmVzdWx0XG4qL1xuZnVuY3Rpb24gbWVtb2l6ZUNvbXBhcmUobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBtZW1vaXplTWFwKSB7XG4gIC8vIFRlY2huaWNhbGx5LCBXZWFrTWFwIGtleXMgY2FuICpvbmx5KiBiZSBvYmplY3RzLCBub3QgcHJpbWl0aXZlcy5cbiAgaWYgKCFtZW1vaXplTWFwIHx8IGlzUHJpbWl0aXZlKGxlZnRIYW5kT3BlcmFuZCkgfHwgaXNQcmltaXRpdmUocmlnaHRIYW5kT3BlcmFuZCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgbGVmdEhhbmRNYXAgPSBtZW1vaXplTWFwLmdldChsZWZ0SGFuZE9wZXJhbmQpO1xuICBpZiAobGVmdEhhbmRNYXApIHtcbiAgICB2YXIgcmVzdWx0ID0gbGVmdEhhbmRNYXAuZ2V0KHJpZ2h0SGFuZE9wZXJhbmQpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKiFcbiAqIFNldCB0aGUgcmVzdWx0IG9mIHRoZSBlcXVhbGl0eSBpbnRvIHRoZSBNZW1vaXplTWFwXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gbGVmdEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge01peGVkfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge01lbW9pemVNYXB9IG1lbW9pemVNYXBcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gcmVzdWx0XG4qL1xuZnVuY3Rpb24gbWVtb2l6ZVNldChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG1lbW9pemVNYXAsIHJlc3VsdCkge1xuICAvLyBUZWNobmljYWxseSwgV2Vha01hcCBrZXlzIGNhbiAqb25seSogYmUgb2JqZWN0cywgbm90IHByaW1pdGl2ZXMuXG4gIGlmICghbWVtb2l6ZU1hcCB8fCBpc1ByaW1pdGl2ZShsZWZ0SGFuZE9wZXJhbmQpIHx8IGlzUHJpbWl0aXZlKHJpZ2h0SGFuZE9wZXJhbmQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBsZWZ0SGFuZE1hcCA9IG1lbW9pemVNYXAuZ2V0KGxlZnRIYW5kT3BlcmFuZCk7XG4gIGlmIChsZWZ0SGFuZE1hcCkge1xuICAgIGxlZnRIYW5kTWFwLnNldChyaWdodEhhbmRPcGVyYW5kLCByZXN1bHQpO1xuICB9IGVsc2Uge1xuICAgIGxlZnRIYW5kTWFwID0gbmV3IE1lbW9pemVNYXAoKTtcbiAgICBsZWZ0SGFuZE1hcC5zZXQocmlnaHRIYW5kT3BlcmFuZCwgcmVzdWx0KTtcbiAgICBtZW1vaXplTWFwLnNldChsZWZ0SGFuZE9wZXJhbmQsIGxlZnRIYW5kTWFwKTtcbiAgfVxufVxuXG4vKiFcbiAqIFByaW1hcnkgRXhwb3J0XG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBkZWVwRXF1YWw7XG5tb2R1bGUuZXhwb3J0cy5NZW1vaXplTWFwID0gTWVtb2l6ZU1hcDtcblxuLyoqXG4gKiBBc3NlcnQgZGVlcGx5IG5lc3RlZCBzYW1lVmFsdWUgZXF1YWxpdHkgYmV0d2VlbiB0d28gb2JqZWN0cyBvZiBhbnkgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWl4ZWR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gKG9wdGlvbmFsKSBBZGRpdGlvbmFsIG9wdGlvbnNcbiAqIEBwYXJhbSB7QXJyYXl9IFtvcHRpb25zLmNvbXBhcmF0b3JdIChvcHRpb25hbCkgT3ZlcnJpZGUgZGVmYXVsdCBhbGdvcml0aG0sIGRldGVybWluaW5nIGN1c3RvbSBlcXVhbGl0eS5cbiAqIEBwYXJhbSB7QXJyYXl9IFtvcHRpb25zLm1lbW9pemVdIChvcHRpb25hbCkgUHJvdmlkZSBhIGN1c3RvbSBtZW1vaXphdGlvbiBvYmplY3Qgd2hpY2ggd2lsbCBjYWNoZSB0aGUgcmVzdWx0cyBvZlxuICAgIGNvbXBsZXggb2JqZWN0cyBmb3IgYSBzcGVlZCBib29zdC4gQnkgcGFzc2luZyBgZmFsc2VgIHlvdSBjYW4gZGlzYWJsZSBtZW1vaXphdGlvbiwgYnV0IHRoaXMgd2lsbCBjYXVzZSBjaXJjdWxhclxuICAgIHJlZmVyZW5jZXMgdG8gYmxvdyB0aGUgc3RhY2suXG4gKiBAcmV0dXJuIHtCb29sZWFufSBlcXVhbCBtYXRjaFxuICovXG5mdW5jdGlvbiBkZWVwRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKSB7XG4gIC8vIElmIHdlIGhhdmUgYSBjb21wYXJhdG9yLCB3ZSBjYW4ndCBhc3N1bWUgYW55dGhpbmc7IHNvIGJhaWwgdG8gaXRzIGNoZWNrIGZpcnN0LlxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmNvbXBhcmF0b3IpIHtcbiAgICByZXR1cm4gZXh0ZW5zaXZlRGVlcEVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucyk7XG4gIH1cblxuICB2YXIgc2ltcGxlUmVzdWx0ID0gc2ltcGxlRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kKTtcbiAgaWYgKHNpbXBsZVJlc3VsdCAhPT0gbnVsbCkge1xuICAgIHJldHVybiBzaW1wbGVSZXN1bHQ7XG4gIH1cblxuICAvLyBEZWVwZXIgY29tcGFyaXNvbnMgYXJlIHB1c2hlZCB0aHJvdWdoIHRvIGEgbGFyZ2VyIGZ1bmN0aW9uXG4gIHJldHVybiBleHRlbnNpdmVEZWVwRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBNYW55IGNvbXBhcmlzb25zIGNhbiBiZSBjYW5jZWxlZCBvdXQgZWFybHkgdmlhIHNpbXBsZSBlcXVhbGl0eSBvciBwcmltaXRpdmUgY2hlY2tzLlxuICogQHBhcmFtIHtNaXhlZH0gbGVmdEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge01peGVkfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcmV0dXJuIHtCb29sZWFufG51bGx9IGVxdWFsIG1hdGNoXG4gKi9cbmZ1bmN0aW9uIHNpbXBsZUVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCkge1xuICAvLyBFcXVhbCByZWZlcmVuY2VzIChleGNlcHQgZm9yIE51bWJlcnMpIGNhbiBiZSByZXR1cm5lZCBlYXJseVxuICBpZiAobGVmdEhhbmRPcGVyYW5kID09PSByaWdodEhhbmRPcGVyYW5kKSB7XG4gICAgLy8gSGFuZGxlICstMCBjYXNlc1xuICAgIHJldHVybiBsZWZ0SGFuZE9wZXJhbmQgIT09IDAgfHwgMSAvIGxlZnRIYW5kT3BlcmFuZCA9PT0gMSAvIHJpZ2h0SGFuZE9wZXJhbmQ7XG4gIH1cblxuICAvLyBoYW5kbGUgTmFOIGNhc2VzXG4gIGlmIChcbiAgICBsZWZ0SGFuZE9wZXJhbmQgIT09IGxlZnRIYW5kT3BlcmFuZCAmJiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJpZ2h0SGFuZE9wZXJhbmQgIT09IHJpZ2h0SGFuZE9wZXJhbmQgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBBbnl0aGluZyB0aGF0IGlzIG5vdCBhbiAnb2JqZWN0JywgaS5lLiBzeW1ib2xzLCBmdW5jdGlvbnMsIGJvb2xlYW5zLCBudW1iZXJzLFxuICAvLyBzdHJpbmdzLCBhbmQgdW5kZWZpbmVkLCBjYW4gYmUgY29tcGFyZWQgYnkgcmVmZXJlbmNlLlxuICBpZiAoaXNQcmltaXRpdmUobGVmdEhhbmRPcGVyYW5kKSB8fCBpc1ByaW1pdGl2ZShyaWdodEhhbmRPcGVyYW5kKSkge1xuICAgIC8vIEVhc3kgb3V0IGIvYyBpdCB3b3VsZCBoYXZlIHBhc3NlZCB0aGUgZmlyc3QgZXF1YWxpdHkgY2hlY2tcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qIVxuICogVGhlIG1haW4gbG9naWMgb2YgdGhlIGBkZWVwRXF1YWxgIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtNaXhlZH0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAob3B0aW9uYWwpIEFkZGl0aW9uYWwgb3B0aW9uc1xuICogQHBhcmFtIHtBcnJheX0gW29wdGlvbnMuY29tcGFyYXRvcl0gKG9wdGlvbmFsKSBPdmVycmlkZSBkZWZhdWx0IGFsZ29yaXRobSwgZGV0ZXJtaW5pbmcgY3VzdG9tIGVxdWFsaXR5LlxuICogQHBhcmFtIHtBcnJheX0gW29wdGlvbnMubWVtb2l6ZV0gKG9wdGlvbmFsKSBQcm92aWRlIGEgY3VzdG9tIG1lbW9pemF0aW9uIG9iamVjdCB3aGljaCB3aWxsIGNhY2hlIHRoZSByZXN1bHRzIG9mXG4gICAgY29tcGxleCBvYmplY3RzIGZvciBhIHNwZWVkIGJvb3N0LiBCeSBwYXNzaW5nIGBmYWxzZWAgeW91IGNhbiBkaXNhYmxlIG1lbW9pemF0aW9uLCBidXQgdGhpcyB3aWxsIGNhdXNlIGNpcmN1bGFyXG4gICAgcmVmZXJlbmNlcyB0byBibG93IHRoZSBzdGFjay5cbiAqIEByZXR1cm4ge0Jvb2xlYW59IGVxdWFsIG1hdGNoXG4qL1xuZnVuY3Rpb24gZXh0ZW5zaXZlRGVlcEVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5tZW1vaXplID0gb3B0aW9ucy5tZW1vaXplID09PSBmYWxzZSA/IGZhbHNlIDogb3B0aW9ucy5tZW1vaXplIHx8IG5ldyBNZW1vaXplTWFwKCk7XG4gIHZhciBjb21wYXJhdG9yID0gb3B0aW9ucyAmJiBvcHRpb25zLmNvbXBhcmF0b3I7XG5cbiAgLy8gQ2hlY2sgaWYgYSBtZW1vaXplZCByZXN1bHQgZXhpc3RzLlxuICB2YXIgbWVtb2l6ZVJlc3VsdExlZnQgPSBtZW1vaXplQ29tcGFyZShsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMubWVtb2l6ZSk7XG4gIGlmIChtZW1vaXplUmVzdWx0TGVmdCAhPT0gbnVsbCkge1xuICAgIHJldHVybiBtZW1vaXplUmVzdWx0TGVmdDtcbiAgfVxuICB2YXIgbWVtb2l6ZVJlc3VsdFJpZ2h0ID0gbWVtb2l6ZUNvbXBhcmUocmlnaHRIYW5kT3BlcmFuZCwgbGVmdEhhbmRPcGVyYW5kLCBvcHRpb25zLm1lbW9pemUpO1xuICBpZiAobWVtb2l6ZVJlc3VsdFJpZ2h0ICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIG1lbW9pemVSZXN1bHRSaWdodDtcbiAgfVxuXG4gIC8vIElmIGEgY29tcGFyYXRvciBpcyBwcmVzZW50LCB1c2UgaXQuXG4gIGlmIChjb21wYXJhdG9yKSB7XG4gICAgdmFyIGNvbXBhcmF0b3JSZXN1bHQgPSBjb21wYXJhdG9yKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCk7XG4gICAgLy8gQ29tcGFyYXRvcnMgbWF5IHJldHVybiBudWxsLCBpbiB3aGljaCBjYXNlIHdlIHdhbnQgdG8gZ28gYmFjayB0byBkZWZhdWx0IGJlaGF2aW9yLlxuICAgIGlmIChjb21wYXJhdG9yUmVzdWx0ID09PSBmYWxzZSB8fCBjb21wYXJhdG9yUmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICBtZW1vaXplU2V0KGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucy5tZW1vaXplLCBjb21wYXJhdG9yUmVzdWx0KTtcbiAgICAgIHJldHVybiBjb21wYXJhdG9yUmVzdWx0O1xuICAgIH1cbiAgICAvLyBUbyBhbGxvdyBjb21wYXJhdG9ycyB0byBvdmVycmlkZSAqYW55KiBiZWhhdmlvciwgd2UgcmFuIHRoZW0gZmlyc3QuIFNpbmNlIGl0IGRpZG4ndCBkZWNpZGVcbiAgICAvLyB3aGF0IHRvIGRvLCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0byByZXR1cm4gdGhlIGJhc2ljIHRlc3RzIGZpcnN0IGJlZm9yZSB3ZSBtb3ZlIG9uLlxuICAgIHZhciBzaW1wbGVSZXN1bHQgPSBzaW1wbGVFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQpO1xuICAgIGlmIChzaW1wbGVSZXN1bHQgIT09IG51bGwpIHtcbiAgICAgIC8vIERvbid0IG1lbW9pemUgdGhpcywgaXQgdGFrZXMgbG9uZ2VyIHRvIHNldC9yZXRyaWV2ZSB0aGFuIHRvIGp1c3QgY29tcGFyZS5cbiAgICAgIHJldHVybiBzaW1wbGVSZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxlZnRIYW5kVHlwZSA9IHR5cGUobGVmdEhhbmRPcGVyYW5kKTtcbiAgaWYgKGxlZnRIYW5kVHlwZSAhPT0gdHlwZShyaWdodEhhbmRPcGVyYW5kKSkge1xuICAgIG1lbW9pemVTZXQobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zLm1lbW9pemUsIGZhbHNlKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZW1wb3JhcmlseSBzZXQgdGhlIG9wZXJhbmRzIGluIHRoZSBtZW1vaXplIG9iamVjdCB0byBwcmV2ZW50IGJsb3dpbmcgdGhlIHN0YWNrXG4gIG1lbW9pemVTZXQobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zLm1lbW9pemUsIHRydWUpO1xuXG4gIHZhciByZXN1bHQgPSBleHRlbnNpdmVEZWVwRXF1YWxCeVR5cGUobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBsZWZ0SGFuZFR5cGUsIG9wdGlvbnMpO1xuICBtZW1vaXplU2V0KGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucy5tZW1vaXplLCByZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBleHRlbnNpdmVEZWVwRXF1YWxCeVR5cGUobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBsZWZ0SGFuZFR5cGUsIG9wdGlvbnMpIHtcbiAgc3dpdGNoIChsZWZ0SGFuZFR5cGUpIHtcbiAgICBjYXNlICdTdHJpbmcnOlxuICAgIGNhc2UgJ051bWJlcic6XG4gICAgY2FzZSAnQm9vbGVhbic6XG4gICAgY2FzZSAnRGF0ZSc6XG4gICAgICAvLyBJZiB0aGVzZSB0eXBlcyBhcmUgdGhlaXIgaW5zdGFuY2UgdHlwZXMgKGUuZy4gYG5ldyBOdW1iZXJgKSB0aGVuIHJlLWRlZXBFcXVhbCBhZ2FpbnN0IHRoZWlyIHZhbHVlc1xuICAgICAgcmV0dXJuIGRlZXBFcXVhbChsZWZ0SGFuZE9wZXJhbmQudmFsdWVPZigpLCByaWdodEhhbmRPcGVyYW5kLnZhbHVlT2YoKSk7XG4gICAgY2FzZSAnUHJvbWlzZSc6XG4gICAgY2FzZSAnU3ltYm9sJzpcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgY2FzZSAnV2Vha01hcCc6XG4gICAgY2FzZSAnV2Vha1NldCc6XG4gICAgY2FzZSAnRXJyb3InOlxuICAgICAgcmV0dXJuIGxlZnRIYW5kT3BlcmFuZCA9PT0gcmlnaHRIYW5kT3BlcmFuZDtcbiAgICBjYXNlICdBcmd1bWVudHMnOlxuICAgIGNhc2UgJ0ludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhBcnJheSc6XG4gICAgY2FzZSAnVWludDhDbGFtcGVkQXJyYXknOlxuICAgIGNhc2UgJ0ludDE2QXJyYXknOlxuICAgIGNhc2UgJ1VpbnQxNkFycmF5JzpcbiAgICBjYXNlICdJbnQzMkFycmF5JzpcbiAgICBjYXNlICdVaW50MzJBcnJheSc6XG4gICAgY2FzZSAnRmxvYXQzMkFycmF5JzpcbiAgICBjYXNlICdGbG9hdDY0QXJyYXknOlxuICAgIGNhc2UgJ0FycmF5JzpcbiAgICAgIHJldHVybiBpdGVyYWJsZUVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucyk7XG4gICAgY2FzZSAnUmVnRXhwJzpcbiAgICAgIHJldHVybiByZWdleHBFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQpO1xuICAgIGNhc2UgJ0dlbmVyYXRvcic6XG4gICAgICByZXR1cm4gZ2VuZXJhdG9yRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbiAgICBjYXNlICdEYXRhVmlldyc6XG4gICAgICByZXR1cm4gaXRlcmFibGVFcXVhbChuZXcgVWludDhBcnJheShsZWZ0SGFuZE9wZXJhbmQuYnVmZmVyKSwgbmV3IFVpbnQ4QXJyYXkocmlnaHRIYW5kT3BlcmFuZC5idWZmZXIpLCBvcHRpb25zKTtcbiAgICBjYXNlICdBcnJheUJ1ZmZlcic6XG4gICAgICByZXR1cm4gaXRlcmFibGVFcXVhbChuZXcgVWludDhBcnJheShsZWZ0SGFuZE9wZXJhbmQpLCBuZXcgVWludDhBcnJheShyaWdodEhhbmRPcGVyYW5kKSwgb3B0aW9ucyk7XG4gICAgY2FzZSAnU2V0JzpcbiAgICAgIHJldHVybiBlbnRyaWVzRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbiAgICBjYXNlICdNYXAnOlxuICAgICAgcmV0dXJuIGVudHJpZXNFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gb2JqZWN0RXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKTtcbiAgfVxufVxuXG4vKiFcbiAqIENvbXBhcmUgdHdvIFJlZ3VsYXIgRXhwcmVzc2lvbnMgZm9yIGVxdWFsaXR5LlxuICpcbiAqIEBwYXJhbSB7UmVnRXhwfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7UmVnRXhwfSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcmV0dXJuIHtCb29sZWFufSByZXN1bHRcbiAqL1xuXG5mdW5jdGlvbiByZWdleHBFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQpIHtcbiAgcmV0dXJuIGxlZnRIYW5kT3BlcmFuZC50b1N0cmluZygpID09PSByaWdodEhhbmRPcGVyYW5kLnRvU3RyaW5nKCk7XG59XG5cbi8qIVxuICogQ29tcGFyZSB0d28gU2V0cy9NYXBzIGZvciBlcXVhbGl0eS4gRmFzdGVyIHRoYW4gb3RoZXIgZXF1YWxpdHkgZnVuY3Rpb25zLlxuICpcbiAqIEBwYXJhbSB7U2V0fSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7U2V0fSByaWdodEhhbmRPcGVyYW5kXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIChPcHRpb25hbClcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICovXG5cbmZ1bmN0aW9uIGVudHJpZXNFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIG9wdGlvbnMpIHtcbiAgLy8gSUUxMSBkb2Vzbid0IHN1cHBvcnQgU2V0I2VudHJpZXMgb3IgU2V0I0BAaXRlcmF0b3IsIHNvIHdlIG5lZWQgbWFudWFsbHkgcG9wdWxhdGUgdXNpbmcgU2V0I2ZvckVhY2hcbiAgaWYgKGxlZnRIYW5kT3BlcmFuZC5zaXplICE9PSByaWdodEhhbmRPcGVyYW5kLnNpemUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGxlZnRIYW5kT3BlcmFuZC5zaXplID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGxlZnRIYW5kSXRlbXMgPSBbXTtcbiAgdmFyIHJpZ2h0SGFuZEl0ZW1zID0gW107XG4gIGxlZnRIYW5kT3BlcmFuZC5mb3JFYWNoKGZ1bmN0aW9uIGdhdGhlckVudHJpZXMoa2V5LCB2YWx1ZSkge1xuICAgIGxlZnRIYW5kSXRlbXMucHVzaChbIGtleSwgdmFsdWUgXSk7XG4gIH0pO1xuICByaWdodEhhbmRPcGVyYW5kLmZvckVhY2goZnVuY3Rpb24gZ2F0aGVyRW50cmllcyhrZXksIHZhbHVlKSB7XG4gICAgcmlnaHRIYW5kSXRlbXMucHVzaChbIGtleSwgdmFsdWUgXSk7XG4gIH0pO1xuICByZXR1cm4gaXRlcmFibGVFcXVhbChsZWZ0SGFuZEl0ZW1zLnNvcnQoKSwgcmlnaHRIYW5kSXRlbXMuc29ydCgpLCBvcHRpb25zKTtcbn1cblxuLyohXG4gKiBTaW1wbGUgZXF1YWxpdHkgZm9yIGZsYXQgaXRlcmFibGUgb2JqZWN0cyBzdWNoIGFzIEFycmF5cywgVHlwZWRBcnJheXMgb3IgTm9kZS5qcyBidWZmZXJzLlxuICpcbiAqIEBwYXJhbSB7SXRlcmFibGV9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtJdGVyYWJsZX0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAoT3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtCb29sZWFufSByZXN1bHRcbiAqL1xuXG5mdW5jdGlvbiBpdGVyYWJsZUVxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwgb3B0aW9ucykge1xuICB2YXIgbGVuZ3RoID0gbGVmdEhhbmRPcGVyYW5kLmxlbmd0aDtcbiAgaWYgKGxlbmd0aCAhPT0gcmlnaHRIYW5kT3BlcmFuZC5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpbmRleCA9IC0xO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChkZWVwRXF1YWwobGVmdEhhbmRPcGVyYW5kW2luZGV4XSwgcmlnaHRIYW5kT3BlcmFuZFtpbmRleF0sIG9wdGlvbnMpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyohXG4gKiBTaW1wbGUgZXF1YWxpdHkgZm9yIGdlbmVyYXRvciBvYmplY3RzIHN1Y2ggYXMgdGhvc2UgcmV0dXJuZWQgYnkgZ2VuZXJhdG9yIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge0l0ZXJhYmxlfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7SXRlcmFibGV9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gKE9wdGlvbmFsKVxuICogQHJldHVybiB7Qm9vbGVhbn0gcmVzdWx0XG4gKi9cblxuZnVuY3Rpb24gZ2VuZXJhdG9yRXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKSB7XG4gIHJldHVybiBpdGVyYWJsZUVxdWFsKGdldEdlbmVyYXRvckVudHJpZXMobGVmdEhhbmRPcGVyYW5kKSwgZ2V0R2VuZXJhdG9yRW50cmllcyhyaWdodEhhbmRPcGVyYW5kKSwgb3B0aW9ucyk7XG59XG5cbi8qIVxuICogRGV0ZXJtaW5lIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGFuIEBAaXRlcmF0b3IgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBvYmplY3QgaGFzIGFuIEBAaXRlcmF0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGhhc0l0ZXJhdG9yRnVuY3Rpb24odGFyZ2V0KSB7XG4gIHJldHVybiB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiB0YXJnZXQgPT09ICdvYmplY3QnICYmXG4gICAgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgdGFyZ2V0W1N5bWJvbC5pdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG59XG5cbi8qIVxuICogR2V0cyBhbGwgaXRlcmF0b3IgZW50cmllcyBmcm9tIHRoZSBnaXZlbiBPYmplY3QuIElmIHRoZSBPYmplY3QgaGFzIG5vIEBAaXRlcmF0b3IgZnVuY3Rpb24sIHJldHVybnMgYW4gZW1wdHkgYXJyYXkuXG4gKiBUaGlzIHdpbGwgY29uc3VtZSB0aGUgaXRlcmF0b3IgLSB3aGljaCBjb3VsZCBoYXZlIHNpZGUgZWZmZWN0cyBkZXBlbmRpbmcgb24gdGhlIEBAaXRlcmF0b3IgaW1wbGVtZW50YXRpb24uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICogQHJldHVybnMge0FycmF5fSBhbiBhcnJheSBvZiBlbnRyaWVzIGZyb20gdGhlIEBAaXRlcmF0b3IgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JFbnRyaWVzKHRhcmdldCkge1xuICBpZiAoaGFzSXRlcmF0b3JGdW5jdGlvbih0YXJnZXQpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBnZXRHZW5lcmF0b3JFbnRyaWVzKHRhcmdldFtTeW1ib2wuaXRlcmF0b3JdKCkpO1xuICAgIH0gY2F0Y2ggKGl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtdO1xufVxuXG4vKiFcbiAqIEdldHMgYWxsIGVudHJpZXMgZnJvbSBhIEdlbmVyYXRvci4gVGhpcyB3aWxsIGNvbnN1bWUgdGhlIGdlbmVyYXRvciAtIHdoaWNoIGNvdWxkIGhhdmUgc2lkZSBlZmZlY3RzLlxuICpcbiAqIEBwYXJhbSB7R2VuZXJhdG9yfSB0YXJnZXRcbiAqIEByZXR1cm5zIHtBcnJheX0gYW4gYXJyYXkgb2YgZW50cmllcyBmcm9tIHRoZSBHZW5lcmF0b3IuXG4gKi9cbmZ1bmN0aW9uIGdldEdlbmVyYXRvckVudHJpZXMoZ2VuZXJhdG9yKSB7XG4gIHZhciBnZW5lcmF0b3JSZXN1bHQgPSBnZW5lcmF0b3IubmV4dCgpO1xuICB2YXIgYWNjdW11bGF0b3IgPSBbIGdlbmVyYXRvclJlc3VsdC52YWx1ZSBdO1xuICB3aGlsZSAoZ2VuZXJhdG9yUmVzdWx0LmRvbmUgPT09IGZhbHNlKSB7XG4gICAgZ2VuZXJhdG9yUmVzdWx0ID0gZ2VuZXJhdG9yLm5leHQoKTtcbiAgICBhY2N1bXVsYXRvci5wdXNoKGdlbmVyYXRvclJlc3VsdC52YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGFjY3VtdWxhdG9yO1xufVxuXG4vKiFcbiAqIEdldHMgYWxsIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUga2V5cyBmcm9tIGEgdGFyZ2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcbiAqIEByZXR1cm5zIHtBcnJheX0gYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBrZXlzIGZyb20gdGhlIHRhcmdldC5cbiAqL1xuZnVuY3Rpb24gZ2V0RW51bWVyYWJsZUtleXModGFyZ2V0KSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiB0YXJnZXQpIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cblxuLyohXG4gKiBEZXRlcm1pbmVzIGlmIHR3byBvYmplY3RzIGhhdmUgbWF0Y2hpbmcgdmFsdWVzLCBnaXZlbiBhIHNldCBvZiBrZXlzLiBEZWZlcnMgdG8gZGVlcEVxdWFsIGZvciB0aGUgZXF1YWxpdHkgY2hlY2sgb2ZcbiAqIGVhY2gga2V5LiBJZiBhbnkgdmFsdWUgb2YgdGhlIGdpdmVuIGtleSBpcyBub3QgZXF1YWwsIHRoZSBmdW5jdGlvbiB3aWxsIHJldHVybiBmYWxzZSAoZWFybHkpLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IGxlZnRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtNaXhlZH0gcmlnaHRIYW5kT3BlcmFuZFxuICogQHBhcmFtIHtBcnJheX0ga2V5cyBBbiBhcnJheSBvZiBrZXlzIHRvIGNvbXBhcmUgdGhlIHZhbHVlcyBvZiBsZWZ0SGFuZE9wZXJhbmQgYW5kIHJpZ2h0SGFuZE9wZXJhbmQgYWdhaW5zdFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAoT3B0aW9uYWwpXG4gKiBAcmV0dXJuIHtCb29sZWFufSByZXN1bHRcbiAqL1xuZnVuY3Rpb24ga2V5c0VxdWFsKGxlZnRIYW5kT3BlcmFuZCwgcmlnaHRIYW5kT3BlcmFuZCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIGlmIChsZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGRlZXBFcXVhbChsZWZ0SGFuZE9wZXJhbmRba2V5c1tpXV0sIHJpZ2h0SGFuZE9wZXJhbmRba2V5c1tpXV0sIG9wdGlvbnMpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyohXG4gKiBSZWN1cnNpdmVseSBjaGVjayB0aGUgZXF1YWxpdHkgb2YgdHdvIE9iamVjdHMuIE9uY2UgYmFzaWMgc2FtZW5lc3MgaGFzIGJlZW4gZXN0YWJsaXNoZWQgaXQgd2lsbCBkZWZlciB0byBgZGVlcEVxdWFsYFxuICogZm9yIGVhY2ggZW51bWVyYWJsZSBrZXkgaW4gdGhlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSBsZWZ0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7TWl4ZWR9IHJpZ2h0SGFuZE9wZXJhbmRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gKE9wdGlvbmFsKVxuICogQHJldHVybiB7Qm9vbGVhbn0gcmVzdWx0XG4gKi9cblxuZnVuY3Rpb24gb2JqZWN0RXF1YWwobGVmdEhhbmRPcGVyYW5kLCByaWdodEhhbmRPcGVyYW5kLCBvcHRpb25zKSB7XG4gIHZhciBsZWZ0SGFuZEtleXMgPSBnZXRFbnVtZXJhYmxlS2V5cyhsZWZ0SGFuZE9wZXJhbmQpO1xuICB2YXIgcmlnaHRIYW5kS2V5cyA9IGdldEVudW1lcmFibGVLZXlzKHJpZ2h0SGFuZE9wZXJhbmQpO1xuICBpZiAobGVmdEhhbmRLZXlzLmxlbmd0aCAmJiBsZWZ0SGFuZEtleXMubGVuZ3RoID09PSByaWdodEhhbmRLZXlzLmxlbmd0aCkge1xuICAgIGxlZnRIYW5kS2V5cy5zb3J0KCk7XG4gICAgcmlnaHRIYW5kS2V5cy5zb3J0KCk7XG4gICAgaWYgKGl0ZXJhYmxlRXF1YWwobGVmdEhhbmRLZXlzLCByaWdodEhhbmRLZXlzKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGtleXNFcXVhbChsZWZ0SGFuZE9wZXJhbmQsIHJpZ2h0SGFuZE9wZXJhbmQsIGxlZnRIYW5kS2V5cywgb3B0aW9ucyk7XG4gIH1cblxuICB2YXIgbGVmdEhhbmRFbnRyaWVzID0gZ2V0SXRlcmF0b3JFbnRyaWVzKGxlZnRIYW5kT3BlcmFuZCk7XG4gIHZhciByaWdodEhhbmRFbnRyaWVzID0gZ2V0SXRlcmF0b3JFbnRyaWVzKHJpZ2h0SGFuZE9wZXJhbmQpO1xuICBpZiAobGVmdEhhbmRFbnRyaWVzLmxlbmd0aCAmJiBsZWZ0SGFuZEVudHJpZXMubGVuZ3RoID09PSByaWdodEhhbmRFbnRyaWVzLmxlbmd0aCkge1xuICAgIGxlZnRIYW5kRW50cmllcy5zb3J0KCk7XG4gICAgcmlnaHRIYW5kRW50cmllcy5zb3J0KCk7XG4gICAgcmV0dXJuIGl0ZXJhYmxlRXF1YWwobGVmdEhhbmRFbnRyaWVzLCByaWdodEhhbmRFbnRyaWVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIGlmIChsZWZ0SGFuZEtleXMubGVuZ3RoID09PSAwICYmXG4gICAgICBsZWZ0SGFuZEVudHJpZXMubGVuZ3RoID09PSAwICYmXG4gICAgICByaWdodEhhbmRLZXlzLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgcmlnaHRIYW5kRW50cmllcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyohXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGFyZ3VtZW50IGlzIGEgcHJpbWl0aXZlLlxuICpcbiAqIFRoaXMgaW50ZW50aW9uYWxseSByZXR1cm5zIHRydWUgZm9yIGFsbCBvYmplY3RzIHRoYXQgY2FuIGJlIGNvbXBhcmVkIGJ5IHJlZmVyZW5jZSxcbiAqIGluY2x1ZGluZyBmdW5jdGlvbnMgYW5kIHN5bWJvbHMuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jztcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgZGVlcEVxdWFsID0gcmVxdWlyZSgnZGVlcC1lcWwnKVxudmFyIHR5cGUgPSByZXF1aXJlKCd0eXBlLWRldGVjdCcpXG5cbnZhciBERUZBVUxUX1RPTEVSQU5DRSA9IDFlLTZcblxuLyoqXG4gKiBzbWFsbCB1dGlsaXR5IGZ1bmN0aW9uc1xuICovXG5mdW5jdGlvbiBpc051bWJlciAodmFsKSB7XG4gIHJldHVybiB0eXBlKHZhbCkgPT09ICdudW1iZXInXG59XG5cbmZ1bmN0aW9uIGJvdGhOdW1iZXJzIChsZWZ0LCByaWdodCkge1xuICByZXR1cm4gaXNOdW1iZXIocmlnaHQpICYmIGlzTnVtYmVyKGxlZnQpXG59XG5cbmZ1bmN0aW9uIGFsbW9zdEVxdWFsIChsZWZ0LCByaWdodCwgdG9sKSB7XG4gIHJldHVybiBNYXRoLmFicyhsZWZ0IC0gcmlnaHQpIDw9IHRvbFxufVxuXG4vKipcbiAqIE1ha2VzIGEgY29tcGFyYXRvciBmdW5jdGlvbiB0byBiZSBwYXNzZWQgdG8gZGVlcEVxdWFsLlxuICogVGhlIHJldHVybmVkIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIG51bGwgaWYgYm90aCBhcmd1bWVudHMgYXJlIG5vdCBudW1iZXJzLFxuICogaW5kaWNhdGluZyB0aGF0IGRlZXBFcXVhbCBzaG91bGQgcHJvY2VlZCB3aXRoIG90aGVyIGVxdWFsaXR5IGNoZWNrc1xuICovXG5mdW5jdGlvbiBjb21wYXJhdG9yICh0b2xlcmFuY2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChsZWZ0LCByaWdodCkge1xuICAgIGlmIChib3RoTnVtYmVycyhsZWZ0LCByaWdodCkpIHtcbiAgICAgIHJldHVybiBhbG1vc3RFcXVhbChsZWZ0LCByaWdodCwgdG9sZXJhbmNlKVxuICAgIH1cbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbi8qKlxuICogU2V0cyBnbG9iYWwgdG9sZXJhbmNlIGFuZCByZXR1cm5zIGEgZnVuY3Rpb24gdG8gYmUgcGFzc2VkIHRvIGNoYWkudXNlXG4gKiBAc2VlIGh0dHA6Ly9jaGFpanMuY29tL2d1aWRlL3BsdWdpbnMvXG4gKi9cbmZ1bmN0aW9uIGNoYWlBbG1vc3QgKGN1c3RvbVRvbGVyYW5jZSkge1xuICB2YXIgc3RhbmRhcmRUb2xlcmFuY2UgPSBjdXN0b21Ub2xlcmFuY2UgfHwgREVGQVVMVF9UT0xFUkFOQ0VcblxuICByZXR1cm4gZnVuY3Rpb24gKGNoYWksIHV0aWxzKSB7XG4gICAgdmFyIEFzc2VydGlvbiA9IGNoYWkuQXNzZXJ0aW9uXG4gICAgdmFyIGZsYWcgPSB1dGlscy5mbGFnXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IHNoYWxsb3cgZXF1YWxpdHkgZnVuY3Rpb24gdG8gb3ZlcnJpZGVcbiAgICAgKiAuZXF1YWwsIC5lcXVhbHMsIC5lcSB0aGF0IHRlc3RzICdhbG1vc3QnIGVxdWFsaXR5XG4gICAgICogaWYgYm90aCB2YWx1ZXMgYXJlIG51bWJlcnMgYW5kIGEgJ3RvbGVyYW5jZScgZmxhZyBpcyBzZXQuXG4gICAgICogU2VuZHMgdG8gZGVlcCBlcXVhbGl0eSBjaGVjayBpZiBkZWVwIGZsYWcgaXMgc2V0XG4gICAgICovXG4gICAgZnVuY3Rpb24gb3ZlcnJpZGVBc3NlcnRFcXVhbCAoX3N1cGVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gYXNzZXJ0RXF1YWwgKHZhbCwgbXNnKSB7XG4gICAgICAgIGlmIChtc2cpIGZsYWcodGhpcywgJ21lc3NhZ2UnLCBtc2cpXG5cbiAgICAgICAgdmFyIGRlZXAgPSBmbGFnKHRoaXMsICdkZWVwJylcbiAgICAgICAgdmFyIHRvbGVyYW5jZSA9IGZsYWcodGhpcywgJ3RvbGVyYW5jZScpXG5cbiAgICAgICAgaWYgKGRlZXApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lcWwodmFsKVxuICAgICAgICB9IGVsc2UgaWYgKHRvbGVyYW5jZSAmJiBib3RoTnVtYmVycyh2YWwsIHRoaXMuX29iaikpIHtcbiAgICAgICAgICB0aGlzLmFzc2VydChhbG1vc3RFcXVhbCh2YWwsIHRoaXMuX29iaiwgdG9sZXJhbmNlKSxcbiAgICAgICAgICAgICdleHBlY3RlZCAje3RoaXN9IHRvIGFsbW9zdCBlcXVhbCAje2V4cH0nLFxuICAgICAgICAgICAgJ2V4cGVjdGVkICN7dGhpc30gdG8gbm90IGFsbW9zdCBlcXVhbCAje2V4cH0nLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgdGhpcy5fb2JqLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgZGVlcCBlcXVhbGl0eSBmdW5jdGlvbiB0byBvdmVycmlkZVxuICAgICAqIC5lcWwsIC5lcWxzIHRoYXQgdGVzdHMgJ2FsbW9zdCcgZXF1YWxpdHkgaWYgYm90aCBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWVzIGFyZSBudW1iZXJzIGFuZCB0b2xlcmFuY2UgZmxhZyBpcyBzZXRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvdmVycmlkZUFzc2VydEVxbCAoX3N1cGVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gYXNzZXJ0RXFsICh2YWwsIG1zZykge1xuICAgICAgICBpZiAobXNnKSBmbGFnKHRoaXMsICdtZXNzYWdlJywgbXNnKVxuXG4gICAgICAgIHZhciB0b2xlcmFuY2UgPSBmbGFnKHRoaXMsICd0b2xlcmFuY2UnKVxuXG4gICAgICAgIGlmICh0b2xlcmFuY2UpIHtcbiAgICAgICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgICAgIGRlZXBFcXVhbCh2YWwsIHRoaXMuX29iaiwgeyBjb21wYXJhdG9yOiBjb21wYXJhdG9yKHRvbGVyYW5jZSkgfSksXG4gICAgICAgICAgICAnZXhwZWN0ZWQgI3t0aGlzfSB0byBkZWVwbHkgYWxtb3N0IGVxdWFsICN7ZXhwfScsXG4gICAgICAgICAgICAnZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgZGVlcGx5IGFsbW9zdCBlcXVhbCAje2V4cH0nLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgdGhpcy5fb2JqLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIC5hbG1vc3QoKSBtZXRob2QuIFRvIGJlIHVzZWQgYXQgdGhlIGVuZCBvZiB0aGUgY2hhaW4gbGlrZTpcbiAgICAgKiBleHBlY3QoNCkudG8ubm90LmJlLmFsbW9zdCg1LCAxLjUpLiBTaW1wbHkgYWRkcyB0b2xlcmFuY2UgZmxhZyB0aGVuIGNhbGxzXG4gICAgICogLmVxdWFsLiBUaGlzIHdpbGwgcmVkaXJlY3QgdG8gLmVxbCBpZiBkZWVwIGZsYWcgc2V0XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWV0aG9kICh2YWwsIHRvbGVyYW5jZU92ZXJyaWRlKSB7XG4gICAgICB2YXIgdG9sZXJhbmNlID0gdG9sZXJhbmNlT3ZlcnJpZGUgfHwgc3RhbmRhcmRUb2xlcmFuY2VcblxuICAgICAgZmxhZyh0aGlzLCAndG9sZXJhbmNlJywgdG9sZXJhbmNlKVxuXG4gICAgICByZXR1cm4gdGhpcy5lcXVhbCh2YWwpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogLmFsbW9zdCBjaGFpbmFibGUgcHJvcGVydHkgdG8gYmUgdXNlZCBsaWtlOlxuICAgICAqIGV4cGVjdCgzLjk5OTk5OTk5KS50by5hbG1vc3QuZXF1YWwoNCkuIFNpbXBseSBhZGRzXG4gICAgICogdG9sZXJhbmNlIGZsYWcgdG8gYmUgcmVhZCBieSBlcXVhbGl0eSBjaGVja2luZyBtZXRob2RzXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2hhaW5pbmdCZWhhdmlvciAoKSB7XG4gICAgICBmbGFnKHRoaXMsICd0b2xlcmFuY2UnLCBzdGFuZGFyZFRvbGVyYW5jZSlcbiAgICB9XG5cbiAgICBBc3NlcnRpb24uYWRkQ2hhaW5hYmxlTWV0aG9kKCdhbG1vc3QnLCBtZXRob2QsIGNoYWluaW5nQmVoYXZpb3IpXG5cbiAgICBBc3NlcnRpb24ub3ZlcndyaXRlTWV0aG9kKCdlcXVhbCcsIG92ZXJyaWRlQXNzZXJ0RXF1YWwpXG4gICAgQXNzZXJ0aW9uLm92ZXJ3cml0ZU1ldGhvZCgnZXF1YWxzJywgb3ZlcnJpZGVBc3NlcnRFcXVhbClcbiAgICBBc3NlcnRpb24ub3ZlcndyaXRlTWV0aG9kKCdlcScsIG92ZXJyaWRlQXNzZXJ0RXF1YWwpXG5cbiAgICBBc3NlcnRpb24ub3ZlcndyaXRlTWV0aG9kKCdlcWwnLCBvdmVycmlkZUFzc2VydEVxbClcbiAgICBBc3NlcnRpb24ub3ZlcndyaXRlTWV0aG9kKCdlcWxzJywgb3ZlcnJpZGVBc3NlcnRFcWwpXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjaGFpQWxtb3N0XG4iLCIvKmdsb2JhbHMgZGVmaW5lLCBtb2R1bGUsIFN5bWJvbCAqL1xuLypqc2hpbnQgLVcwNTYgKi9cblxuKGZ1bmN0aW9uIChnbG9iYWxzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgc3RyaW5ncywgbWVzc2FnZXMsIHByZWRpY2F0ZXMsIGZ1bmN0aW9ucywgYXNzZXJ0LCBub3QsIG1heWJlLFxuICAgICAgY29sbGVjdGlvbnMsIHNsaWNlLCBuZWdpbmYsIHBvc2luZiwgaXNBcnJheSwgaGF2ZVN5bWJvbHM7XG5cbiAgc3RyaW5ncyA9IHtcbiAgICB2OiAndmFsdWUnLFxuICAgIG46ICdudW1iZXInLFxuICAgIHM6ICdzdHJpbmcnLFxuICAgIGI6ICdib29sZWFuJyxcbiAgICBvOiAnb2JqZWN0JyxcbiAgICB0OiAndHlwZScsXG4gICAgYTogJ2FycmF5JyxcbiAgICBhbDogJ2FycmF5LWxpa2UnLFxuICAgIGk6ICdpdGVyYWJsZScsXG4gICAgZDogJ2RhdGUnLFxuICAgIGY6ICdmdW5jdGlvbicsXG4gICAgbDogJ2xlbmd0aCdcbiAgfTtcblxuICBtZXNzYWdlcyA9IHt9O1xuICBwcmVkaWNhdGVzID0ge307XG5cbiAgW1xuICAgIHsgbjogJ2VxdWFsJywgZjogZXF1YWwsIHM6ICd2JyB9LFxuICAgIHsgbjogJ3VuZGVmaW5lZCcsIGY6IGlzVW5kZWZpbmVkLCBzOiAndicgfSxcbiAgICB7IG46ICdudWxsJywgZjogaXNOdWxsLCBzOiAndicgfSxcbiAgICB7IG46ICdhc3NpZ25lZCcsIGY6IGFzc2lnbmVkLCBzOiAndicgfSxcbiAgICB7IG46ICdwcmltaXRpdmUnLCBmOiBwcmltaXRpdmUsIHM6ICd2JyB9LFxuICAgIHsgbjogJ2luY2x1ZGVzJywgZjogaW5jbHVkZXMsIHM6ICd2JyB9LFxuICAgIHsgbjogJ3plcm8nLCBmOiB6ZXJvIH0sXG4gICAgeyBuOiAnaW5maW5pdHknLCBmOiBpbmZpbml0eSB9LFxuICAgIHsgbjogJ251bWJlcicsIGY6IG51bWJlciB9LFxuICAgIHsgbjogJ2ludGVnZXInLCBmOiBpbnRlZ2VyIH0sXG4gICAgeyBuOiAnZXZlbicsIGY6IGV2ZW4gfSxcbiAgICB7IG46ICdvZGQnLCBmOiBvZGQgfSxcbiAgICB7IG46ICdncmVhdGVyJywgZjogZ3JlYXRlciB9LFxuICAgIHsgbjogJ2xlc3MnLCBmOiBsZXNzIH0sXG4gICAgeyBuOiAnYmV0d2VlbicsIGY6IGJldHdlZW4gfSxcbiAgICB7IG46ICdncmVhdGVyT3JFcXVhbCcsIGY6IGdyZWF0ZXJPckVxdWFsIH0sXG4gICAgeyBuOiAnbGVzc09yRXF1YWwnLCBmOiBsZXNzT3JFcXVhbCB9LFxuICAgIHsgbjogJ2luUmFuZ2UnLCBmOiBpblJhbmdlIH0sXG4gICAgeyBuOiAncG9zaXRpdmUnLCBmOiBwb3NpdGl2ZSB9LFxuICAgIHsgbjogJ25lZ2F0aXZlJywgZjogbmVnYXRpdmUgfSxcbiAgICB7IG46ICdzdHJpbmcnLCBmOiBzdHJpbmcsIHM6ICdzJyB9LFxuICAgIHsgbjogJ2VtcHR5U3RyaW5nJywgZjogZW1wdHlTdHJpbmcsIHM6ICdzJyB9LFxuICAgIHsgbjogJ25vbkVtcHR5U3RyaW5nJywgZjogbm9uRW1wdHlTdHJpbmcsIHM6ICdzJyB9LFxuICAgIHsgbjogJ2NvbnRhaW5zJywgZjogY29udGFpbnMsIHM6ICdzJyB9LFxuICAgIHsgbjogJ21hdGNoJywgZjogbWF0Y2gsIHM6ICdzJyB9LFxuICAgIHsgbjogJ2Jvb2xlYW4nLCBmOiBib29sZWFuLCBzOiAnYicgfSxcbiAgICB7IG46ICdvYmplY3QnLCBmOiBvYmplY3QsIHM6ICdvJyB9LFxuICAgIHsgbjogJ2VtcHR5T2JqZWN0JywgZjogZW1wdHlPYmplY3QsIHM6ICdvJyB9LFxuICAgIHsgbjogJ25vbkVtcHR5T2JqZWN0JywgZjogbm9uRW1wdHlPYmplY3QsIHM6ICdvJyB9LFxuICAgIHsgbjogJ2luc3RhbmNlU3RyaWN0JywgZjogaW5zdGFuY2VTdHJpY3QsIHM6ICd0JyB9LFxuICAgIHsgbjogJ2luc3RhbmNlJywgZjogaW5zdGFuY2UsIHM6ICd0JyB9LFxuICAgIHsgbjogJ2xpa2UnLCBmOiBsaWtlLCBzOiAndCcgfSxcbiAgICB7IG46ICdhcnJheScsIGY6IGFycmF5LCBzOiAnYScgfSxcbiAgICB7IG46ICdlbXB0eUFycmF5JywgZjogZW1wdHlBcnJheSwgczogJ2EnIH0sXG4gICAgeyBuOiAnbm9uRW1wdHlBcnJheScsIGY6IG5vbkVtcHR5QXJyYXksIHM6ICdhJyB9LFxuICAgIHsgbjogJ2FycmF5TGlrZScsIGY6IGFycmF5TGlrZSwgczogJ2FsJyB9LFxuICAgIHsgbjogJ2l0ZXJhYmxlJywgZjogaXRlcmFibGUsIHM6ICdpJyB9LFxuICAgIHsgbjogJ2RhdGUnLCBmOiBkYXRlLCBzOiAnZCcgfSxcbiAgICB7IG46ICdmdW5jdGlvbicsIGY6IGlzRnVuY3Rpb24sIHM6ICdmJyB9LFxuICAgIHsgbjogJ2hhc0xlbmd0aCcsIGY6IGhhc0xlbmd0aCwgczogJ2wnIH0sXG4gIF0ubWFwKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIG4gPSBkYXRhLm47XG4gICAgbWVzc2FnZXNbbl0gPSAnSW52YWxpZCAnICsgc3RyaW5nc1tkYXRhLnMgfHwgJ24nXTtcbiAgICBwcmVkaWNhdGVzW25dID0gZGF0YS5mO1xuICB9KTtcblxuICBmdW5jdGlvbnMgPSB7XG4gICAgYXBwbHk6IGFwcGx5LFxuICAgIG1hcDogbWFwLFxuICAgIGFsbDogYWxsLFxuICAgIGFueTogYW55XG4gIH07XG5cbiAgY29sbGVjdGlvbnMgPSBbICdhcnJheScsICdhcnJheUxpa2UnLCAnaXRlcmFibGUnLCAnb2JqZWN0JyBdO1xuICBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbiAgbmVnaW5mID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuICBwb3NpbmYgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuICBoYXZlU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbic7XG5cbiAgZnVuY3Rpb25zID0gbWl4aW4oZnVuY3Rpb25zLCBwcmVkaWNhdGVzKTtcbiAgYXNzZXJ0ID0gY3JlYXRlTW9kaWZpZWRQcmVkaWNhdGVzKGFzc2VydE1vZGlmaWVyLCBhc3NlcnRJbXBsKTtcbiAgbm90ID0gY3JlYXRlTW9kaWZpZWRQcmVkaWNhdGVzKG5vdE1vZGlmaWVyLCBub3RJbXBsKTtcbiAgbWF5YmUgPSBjcmVhdGVNb2RpZmllZFByZWRpY2F0ZXMobWF5YmVNb2RpZmllciwgbWF5YmVJbXBsKTtcbiAgYXNzZXJ0Lm5vdCA9IGNyZWF0ZU1vZGlmaWVkTW9kaWZpZXIoYXNzZXJ0TW9kaWZpZXIsIG5vdCk7XG4gIGFzc2VydC5tYXliZSA9IGNyZWF0ZU1vZGlmaWVkTW9kaWZpZXIoYXNzZXJ0TW9kaWZpZXIsIG1heWJlKTtcblxuICBjb2xsZWN0aW9ucy5mb3JFYWNoKGNyZWF0ZU9mUHJlZGljYXRlcyk7XG4gIGNyZWF0ZU9mTW9kaWZpZXJzKGFzc2VydCwgYXNzZXJ0TW9kaWZpZXIpO1xuICBjcmVhdGVPZk1vZGlmaWVycyhub3QsIG5vdE1vZGlmaWVyKTtcbiAgY29sbGVjdGlvbnMuZm9yRWFjaChjcmVhdGVNYXliZU9mTW9kaWZpZXJzKTtcblxuICBleHBvcnRGdW5jdGlvbnMobWl4aW4oZnVuY3Rpb25zLCB7XG4gICAgYXNzZXJ0OiBhc3NlcnQsXG4gICAgbm90OiBub3QsXG4gICAgbWF5YmU6IG1heWJlXG4gIH0pKTtcblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBlcXVhbGAuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgbGhzYCBhbmQgYHJoc2AgYXJlIHN0cmljdGx5IGVxdWFsLCB3aXRob3V0IGNvZXJjaW9uLlxuICAgKiBSZXR1cm5zIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGZ1bmN0aW9uIGVxdWFsIChsaHMsIHJocykge1xuICAgIHJldHVybiBsaHMgPT09IHJocztcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgZnVuY3Rpb24gYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgZGF0YWAgaXMgdW5kZWZpbmVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiBpc1VuZGVmaW5lZCAoZGF0YSkge1xuICAgIHJldHVybiBkYXRhID09PSB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBudWxsYC5cbiAgICpcbiAgICogUmV0dXJucyB0cnVlIGlmIGBkYXRhYCBpcyBudWxsLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiBpc051bGwgKGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YSA9PT0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgZnVuY3Rpb24gYGFzc2lnbmVkYC5cbiAgICpcbiAgICogUmV0dXJucyB0cnVlIGlmIGBkYXRhYCBpcyBub3QgbnVsbCBvciB1bmRlZmluZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFzc2lnbmVkIChkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEgIT09IHVuZGVmaW5lZCAmJiBkYXRhICE9PSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBmdW5jdGlvbiBgcHJpbWl0aXZlYC5cbiAgICpcbiAgICogUmV0dXJucyB0cnVlIGlmIGBkYXRhYCBpcyBhIHByaW1pdGl2ZSB0eXBlLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiBwcmltaXRpdmUgKGRhdGEpIHtcbiAgICB2YXIgdHlwZTtcblxuICAgIHN3aXRjaCAoZGF0YSkge1xuICAgICAgY2FzZSBudWxsOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICBjYXNlIGZhbHNlOlxuICAgICAgY2FzZSB0cnVlOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB0eXBlID0gdHlwZW9mIGRhdGE7XG4gICAgcmV0dXJuIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGUgPT09ICdudW1iZXInIHx8IChoYXZlU3ltYm9scyAmJiB0eXBlID09PSAnc3ltYm9sJyk7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGB6ZXJvYC5cbiAgICpcbiAgICogUmV0dXJucyB0cnVlIGlmIGBkYXRhYCBpcyB6ZXJvLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiB6ZXJvIChkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEgPT09IDA7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBpbmZpbml0eWAuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgZGF0YWAgaXMgcG9zaXRpdmUgb3IgbmVnYXRpdmUgaW5maW5pdHksIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGZ1bmN0aW9uIGluZmluaXR5IChkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEgPT09IG5lZ2luZiB8fCBkYXRhID09PSBwb3NpbmY7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBudW1iZXJgLlxuICAgKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYGRhdGFgIGlzIGEgbnVtYmVyLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiBudW1iZXIgKGRhdGEpIHtcbiAgICByZXR1cm4gdHlwZW9mIGRhdGEgPT09ICdudW1iZXInICYmIGRhdGEgPiBuZWdpbmYgJiYgZGF0YSA8IHBvc2luZjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgZnVuY3Rpb24gYGludGVnZXJgLlxuICAgKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYGRhdGFgIGlzIGFuIGludGVnZXIsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGZ1bmN0aW9uIGludGVnZXIgKGRhdGEpIHtcbiAgICByZXR1cm4gdHlwZW9mIGRhdGEgPT09ICdudW1iZXInICYmIGRhdGEgJSAxID09PSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBmdW5jdGlvbiBgZXZlbmAuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgZGF0YWAgaXMgYW4gZXZlbiBudW1iZXIsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGZ1bmN0aW9uIGV2ZW4gKGRhdGEpIHtcbiAgICByZXR1cm4gdHlwZW9mIGRhdGEgPT09ICdudW1iZXInICYmIGRhdGEgJSAyID09PSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBmdW5jdGlvbiBgb2RkYC5cbiAgICpcbiAgICogUmV0dXJucyB0cnVlIGlmIGBkYXRhYCBpcyBhbiBvZGQgbnVtYmVyLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiBvZGQgKGRhdGEpIHtcbiAgICByZXR1cm4gaW50ZWdlcihkYXRhKSAmJiBkYXRhICUgMiAhPT0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgZnVuY3Rpb24gYGdyZWF0ZXJgLlxuICAgKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYGxoc2AgaXMgYSBudW1iZXIgZ3JlYXRlciB0aGFuIGByaHNgLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiBncmVhdGVyIChsaHMsIHJocykge1xuICAgIHJldHVybiBudW1iZXIobGhzKSAmJiBsaHMgPiByaHM7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBsZXNzYC5cbiAgICpcbiAgICogUmV0dXJucyB0cnVlIGlmIGBsaHNgIGlzIGEgbnVtYmVyIGxlc3MgdGhhbiBgcmhzYCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gbGVzcyAobGhzLCByaHMpIHtcbiAgICByZXR1cm4gbnVtYmVyKGxocykgJiYgbGhzIDwgcmhzO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBmdW5jdGlvbiBgYmV0d2VlbmAuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgZGF0YWAgaXMgYSBudW1iZXIgYmV0d2VlbiBgeGAgYW5kIGB5YCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gYmV0d2VlbiAoZGF0YSwgeCwgeSkge1xuICAgIGlmICh4IDwgeSkge1xuICAgICAgcmV0dXJuIGdyZWF0ZXIoZGF0YSwgeCkgJiYgZGF0YSA8IHk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxlc3MoZGF0YSwgeCkgJiYgZGF0YSA+IHk7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBncmVhdGVyT3JFcXVhbGAuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgbGhzYCBpcyBhIG51bWJlciBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYHJoc2AsIGZhbHNlXG4gICAqIG90aGVyd2lzZS5cbiAgICovXG4gIGZ1bmN0aW9uIGdyZWF0ZXJPckVxdWFsIChsaHMsIHJocykge1xuICAgIHJldHVybiBudW1iZXIobGhzKSAmJiBsaHMgPj0gcmhzO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBmdW5jdGlvbiBgbGVzc09yRXF1YWxgLlxuICAgKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYGxoc2AgaXMgYSBudW1iZXIgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGByaHNgLCBmYWxzZVxuICAgKiBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiBsZXNzT3JFcXVhbCAobGhzLCByaHMpIHtcbiAgICByZXR1cm4gbnVtYmVyKGxocykgJiYgbGhzIDw9IHJocztcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgZnVuY3Rpb24gYGluUmFuZ2VgLlxuICAgKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYGRhdGFgIGlzIGEgbnVtYmVyIGluIHRoZSByYW5nZSBgeC4ueWAsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGZ1bmN0aW9uIGluUmFuZ2UgKGRhdGEsIHgsIHkpIHtcbiAgICBpZiAoeCA8IHkpIHtcbiAgICAgIHJldHVybiBncmVhdGVyT3JFcXVhbChkYXRhLCB4KSAmJiBkYXRhIDw9IHk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxlc3NPckVxdWFsKGRhdGEsIHgpICYmIGRhdGEgPj0geTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgZnVuY3Rpb24gYHBvc2l0aXZlYC5cbiAgICpcbiAgICogUmV0dXJucyB0cnVlIGlmIGBkYXRhYCBpcyBhIHBvc2l0aXZlIG51bWJlciwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gcG9zaXRpdmUgKGRhdGEpIHtcbiAgICByZXR1cm4gZ3JlYXRlcihkYXRhLCAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgZnVuY3Rpb24gYG5lZ2F0aXZlYC5cbiAgICpcbiAgICogUmV0dXJucyB0cnVlIGlmIGBkYXRhYCBpcyBhIG5lZ2F0aXZlIG51bWJlciwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gbmVnYXRpdmUgKGRhdGEpIHtcbiAgICByZXR1cm4gbGVzcyhkYXRhLCAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgZnVuY3Rpb24gYHN0cmluZ2AuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgZGF0YWAgaXMgYSBzdHJpbmcsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZyAoZGF0YSkge1xuICAgIHJldHVybiB0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZyc7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBlbXB0eVN0cmluZ2AuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgZGF0YWAgaXMgdGhlIGVtcHR5IHN0cmluZywgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gZW1wdHlTdHJpbmcgKGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YSA9PT0gJyc7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBub25FbXB0eVN0cmluZ2AuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgZGF0YWAgaXMgYSBub24tZW1wdHkgc3RyaW5nLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiBub25FbXB0eVN0cmluZyAoZGF0YSkge1xuICAgIHJldHVybiBzdHJpbmcoZGF0YSkgJiYgZGF0YSAhPT0gJyc7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBjb250YWluc2AuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgZGF0YWAgaXMgYSBzdHJpbmcgdGhhdCBjb250YWlucyBgc3Vic3RyaW5nYCwgZmFsc2VcbiAgICogb3RoZXJ3aXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gY29udGFpbnMgKGRhdGEsIHN1YnN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcoZGF0YSkgJiYgZGF0YS5pbmRleE9mKHN1YnN0cmluZykgIT09IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBmdW5jdGlvbiBgbWF0Y2hgLlxuICAgKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYGRhdGFgIGlzIGEgc3RyaW5nIHRoYXQgbWF0Y2hlcyBgcmVnZXhgLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiBtYXRjaCAoZGF0YSwgcmVnZXgpIHtcbiAgICByZXR1cm4gc3RyaW5nKGRhdGEpICYmICEhIGRhdGEubWF0Y2gocmVnZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBmdW5jdGlvbiBgYm9vbGVhbmAuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgZGF0YWAgaXMgYSBib29sZWFuIHZhbHVlLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiBib29sZWFuIChkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEgPT09IGZhbHNlIHx8IGRhdGEgPT09IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBvYmplY3RgLlxuICAgKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYGRhdGFgIGlzIGEgcGxhaW4tb2xkIEpTIG9iamVjdCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gb2JqZWN0IChkYXRhKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkYXRhKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBlbXB0eU9iamVjdGAuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgZGF0YWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiBlbXB0eU9iamVjdCAoZGF0YSkge1xuICAgIHJldHVybiBvYmplY3QoZGF0YSkgJiYgT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoID09PSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBmdW5jdGlvbiBgbm9uRW1wdHlPYmplY3RgLlxuICAgKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYGRhdGFgIGlzIGEgbm9uLWVtcHR5IG9iamVjdCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gbm9uRW1wdHlPYmplY3QgKGRhdGEpIHtcbiAgICByZXR1cm4gb2JqZWN0KGRhdGEpICYmIE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCA+IDA7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBpbnN0YW5jZVN0cmljdGAuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgZGF0YWAgaXMgYW4gaW5zdGFuY2Ugb2YgYHByb3RvdHlwZWAsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGZ1bmN0aW9uIGluc3RhbmNlU3RyaWN0IChkYXRhLCBwcm90b3R5cGUpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGRhdGEgaW5zdGFuY2VvZiBwcm90b3R5cGU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBpbnN0YW5jZWAuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgZGF0YWAgaXMgYW4gaW5zdGFuY2Ugb2YgYHByb3RvdHlwZWAsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogRmFsbHMgYmFjayB0byB0ZXN0aW5nIGNvbnN0cnVjdG9yLm5hbWUgYW5kIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcbiAgICogaWYgdGhlIGluaXRpYWwgaW5zdGFuY2VvZiB0ZXN0IGZhaWxzLlxuICAgKi9cbiAgZnVuY3Rpb24gaW5zdGFuY2UgKGRhdGEsIHByb3RvdHlwZSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gaW5zdGFuY2VTdHJpY3QoZGF0YSwgcHJvdG90eXBlKSB8fFxuICAgICAgICBkYXRhLmNvbnN0cnVjdG9yLm5hbWUgPT09IHByb3RvdHlwZS5uYW1lIHx8XG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkYXRhKSA9PT0gJ1tvYmplY3QgJyArIHByb3RvdHlwZS5uYW1lICsgJ10nO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBmdW5jdGlvbiBgbGlrZWAuXG4gICAqXG4gICAqIFRlc3RzIHdoZXRoZXIgYGRhdGFgICdxdWFja3MgbGlrZSBhIGR1Y2snLiBSZXR1cm5zIHRydWUgaWYgYGRhdGFgIGhhcyBhbGxcbiAgICogb2YgdGhlIHByb3BlcnRpZXMgb2YgYGFyY2hldHlwZWAgKHRoZSAnZHVjaycpLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiBsaWtlIChkYXRhLCBhcmNoZXR5cGUpIHtcbiAgICB2YXIgbmFtZTtcblxuICAgIGZvciAobmFtZSBpbiBhcmNoZXR5cGUpIHtcbiAgICAgIGlmIChhcmNoZXR5cGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkobmFtZSkgPT09IGZhbHNlIHx8IHR5cGVvZiBkYXRhW25hbWVdICE9PSB0eXBlb2YgYXJjaGV0eXBlW25hbWVdKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9iamVjdChkYXRhW25hbWVdKSAmJiBsaWtlKGRhdGFbbmFtZV0sIGFyY2hldHlwZVtuYW1lXSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBhcnJheWAuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgZGF0YWAgaXMgYW4gYXJyYXksIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5IChkYXRhKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkoZGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBlbXB0eUFycmF5YC5cbiAgICpcbiAgICogUmV0dXJucyB0cnVlIGlmIGBkYXRhYCBpcyBhbiBlbXB0eSBhcnJheSwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gZW1wdHlBcnJheSAoZGF0YSkge1xuICAgIHJldHVybiBhcnJheShkYXRhKSAmJiBkYXRhLmxlbmd0aCA9PT0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgZnVuY3Rpb24gYG5vbkVtcHR5QXJyYXlgLlxuICAgKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYGRhdGFgIGlzIGEgbm9uLWVtcHR5IGFycmF5LCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiBub25FbXB0eUFycmF5IChkYXRhKSB7XG4gICAgcmV0dXJuIGFycmF5KGRhdGEpICYmIGdyZWF0ZXIoZGF0YS5sZW5ndGgsIDApO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBmdW5jdGlvbiBgYXJyYXlMaWtlYC5cbiAgICpcbiAgICogUmV0dXJucyB0cnVlIGlmIGBkYXRhYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlMaWtlIChkYXRhKSB7XG4gICAgcmV0dXJuIGFzc2lnbmVkKGRhdGEpICYmIGdyZWF0ZXJPckVxdWFsKGRhdGEubGVuZ3RoLCAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgZnVuY3Rpb24gYGl0ZXJhYmxlYC5cbiAgICpcbiAgICogUmV0dXJucyB0cnVlIGlmIGBkYXRhYCBpcyBhbiBpdGVyYWJsZSwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gaXRlcmFibGUgKGRhdGEpIHtcbiAgICBpZiAoISBoYXZlU3ltYm9scykge1xuICAgICAgLy8gRmFsbCBiYWNrIHRvIGBhcnJheUxpa2VgIHByZWRpY2F0ZSBpbiBwcmUtRVM2IGVudmlyb25tZW50cy5cbiAgICAgIHJldHVybiBhcnJheUxpa2UoZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFzc2lnbmVkKGRhdGEpICYmIGlzRnVuY3Rpb24oZGF0YVtTeW1ib2wuaXRlcmF0b3JdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgZnVuY3Rpb24gYGluY2x1ZGVzYC5cbiAgICpcbiAgICogUmV0dXJucyB0cnVlIGlmIGBkYXRhYCBjb250YWlucyBgdmFsdWVgLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiBpbmNsdWRlcyAoZGF0YSwgdmFsdWUpIHtcbiAgICB2YXIgaXRlcmF0b3IsIGl0ZXJhdGlvbiwga2V5cywgbGVuZ3RoLCBpO1xuXG4gICAgaWYgKCEgYXNzaWduZWQoZGF0YSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoaGF2ZVN5bWJvbHMgJiYgZGF0YVtTeW1ib2wuaXRlcmF0b3JdICYmIGlzRnVuY3Rpb24oZGF0YS52YWx1ZXMpKSB7XG4gICAgICBpdGVyYXRvciA9IGRhdGEudmFsdWVzKCk7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaXRlcmF0aW9uID0gaXRlcmF0b3IubmV4dCgpO1xuXG4gICAgICAgIGlmIChpdGVyYXRpb24udmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKCEgaXRlcmF0aW9uLmRvbmUpO1xuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgaWYgKGRhdGFba2V5c1tpXV0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgZnVuY3Rpb24gYGhhc0xlbmd0aGAuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgZGF0YWAgaGFzIGEgbGVuZ3RoIHByb3BlcnR5IHRoYXQgZXF1YWxzIGBsZW5ndGhgLCBmYWxzZVxuICAgKiBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNMZW5ndGggKGRhdGEsIGxlbmd0aCkge1xuICAgIHJldHVybiBhc3NpZ25lZChkYXRhKSAmJiBkYXRhLmxlbmd0aCA9PT0gbGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBmdW5jdGlvbiBgZGF0ZWAuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBgZGF0YWAgaXMgYSB2YWxpZCBkYXRlLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBmdW5jdGlvbiBkYXRlIChkYXRhKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlU3RyaWN0KGRhdGEsIERhdGUpICYmIGludGVnZXIoZGF0YS5nZXRUaW1lKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBmdW5jdGlvbiBgZnVuY3Rpb25gLlxuICAgKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYGRhdGFgIGlzIGEgZnVuY3Rpb24sIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGZ1bmN0aW9uIGlzRnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gdHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBhcHBseWAuXG4gICAqXG4gICAqIE1hcHMgZWFjaCB2YWx1ZSBmcm9tIHRoZSBgZGF0YWAgdG8gdGhlIGNvcnJlc3BvbmRpbmcgcHJlZGljYXRlIGFuZCByZXR1cm5zXG4gICAqIHRoZSByZXN1bHQgYXJyYXkuIElmIHRoZSBzYW1lIGZ1bmN0aW9uIGlzIHRvIGJlIGFwcGxpZWQgYWNyb3NzIGFsbCBvZiB0aGVcbiAgICogZGF0YSwgYSBzaW5nbGUgcHJlZGljYXRlIGZ1bmN0aW9uIG1heSBiZSBwYXNzZWQgaW4uXG4gICAqXG4gICAqL1xuICBmdW5jdGlvbiBhcHBseSAoZGF0YSwgcHJlZGljYXRlcykge1xuICAgIGFzc2VydC5hcnJheShkYXRhKTtcblxuICAgIGlmIChpc0Z1bmN0aW9uKHByZWRpY2F0ZXMpKSB7XG4gICAgICByZXR1cm4gZGF0YS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBwcmVkaWNhdGVzKHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGFzc2VydC5hcnJheShwcmVkaWNhdGVzKTtcbiAgICBhc3NlcnQuaGFzTGVuZ3RoKGRhdGEsIHByZWRpY2F0ZXMubGVuZ3RoKTtcblxuICAgIHJldHVybiBkYXRhLm1hcChmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcHJlZGljYXRlc1tpbmRleF0odmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBmdW5jdGlvbiBgbWFwYC5cbiAgICpcbiAgICogTWFwcyBlYWNoIHZhbHVlIGZyb20gdGhlIGBkYXRhYCB0byB0aGUgY29ycmVzcG9uZGluZyBwcmVkaWNhdGUgYW5kIHJldHVybnNcbiAgICogdGhlIHJlc3VsdCBvYmplY3QuIFN1cHBvcnRzIG5lc3RlZCBvYmplY3RzLiBJZiB0aGUgYGRhdGFgIGlzIG5vdCBuZXN0ZWQgYW5kXG4gICAqIHRoZSBzYW1lIGZ1bmN0aW9uIGlzIHRvIGJlIGFwcGxpZWQgYWNyb3NzIGFsbCBvZiBpdCwgYSBzaW5nbGUgcHJlZGljYXRlXG4gICAqIGZ1bmN0aW9uIG1heSBiZSBwYXNzZWQgaW4uXG4gICAqXG4gICAqL1xuICBmdW5jdGlvbiBtYXAgKGRhdGEsIHByZWRpY2F0ZXMpIHtcbiAgICBhc3NlcnQub2JqZWN0KGRhdGEpO1xuXG4gICAgaWYgKGlzRnVuY3Rpb24ocHJlZGljYXRlcykpIHtcbiAgICAgIHJldHVybiBtYXBTaW1wbGUoZGF0YSwgcHJlZGljYXRlcyk7XG4gICAgfVxuXG4gICAgYXNzZXJ0Lm9iamVjdChwcmVkaWNhdGVzKTtcblxuICAgIHJldHVybiBtYXBDb21wbGV4KGRhdGEsIHByZWRpY2F0ZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFwU2ltcGxlIChkYXRhLCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG5cbiAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gcHJlZGljYXRlKGRhdGFba2V5XSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbWFwQ29tcGxleCAoZGF0YSwgcHJlZGljYXRlcykge1xuICAgIHZhciByZXN1bHQgPSB7fTtcblxuICAgIE9iamVjdC5rZXlzKHByZWRpY2F0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIHByZWRpY2F0ZSA9IHByZWRpY2F0ZXNba2V5XTtcblxuICAgICAgaWYgKGlzRnVuY3Rpb24ocHJlZGljYXRlKSkge1xuICAgICAgICBpZiAobm90LmFzc2lnbmVkKGRhdGEpKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSAhIXByZWRpY2F0ZS5tO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gcHJlZGljYXRlKGRhdGFba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob2JqZWN0KHByZWRpY2F0ZSkpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBtYXBDb21wbGV4KGRhdGFba2V5XSwgcHJlZGljYXRlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBhbGxgXG4gICAqXG4gICAqIENoZWNrIHRoYXQgYWxsIGJvb2xlYW4gdmFsdWVzIGFyZSB0cnVlXG4gICAqIGluIGFuIGFycmF5IChyZXR1cm5lZCBmcm9tIGBhcHBseWApXG4gICAqIG9yIG9iamVjdCAocmV0dXJuZWQgZnJvbSBgbWFwYCkuXG4gICAqXG4gICAqL1xuICBmdW5jdGlvbiBhbGwgKGRhdGEpIHtcbiAgICBpZiAoYXJyYXkoZGF0YSkpIHtcbiAgICAgIHJldHVybiB0ZXN0QXJyYXkoZGF0YSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGFzc2VydC5vYmplY3QoZGF0YSk7XG5cbiAgICByZXR1cm4gdGVzdE9iamVjdChkYXRhLCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0ZXN0QXJyYXkgKGRhdGEsIHJlc3VsdCkge1xuICAgIHZhciBpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChkYXRhW2ldID09PSByZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gIXJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRlc3RPYmplY3QgKGRhdGEsIHJlc3VsdCkge1xuICAgIHZhciBrZXksIHZhbHVlO1xuXG4gICAgZm9yIChrZXkgaW4gZGF0YSkge1xuICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICB2YWx1ZSA9IGRhdGFba2V5XTtcblxuICAgICAgICBpZiAob2JqZWN0KHZhbHVlKSAmJiB0ZXN0T2JqZWN0KHZhbHVlLCByZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlID09PSByZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICFyZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIGZ1bmN0aW9uIGBhbnlgXG4gICAqXG4gICAqIENoZWNrIHRoYXQgYXQgbGVhc3Qgb25lIGJvb2xlYW4gdmFsdWUgaXMgdHJ1ZVxuICAgKiBpbiBhbiBhcnJheSAocmV0dXJuZWQgZnJvbSBgYXBwbHlgKVxuICAgKiBvciBvYmplY3QgKHJldHVybmVkIGZyb20gYG1hcGApLlxuICAgKlxuICAgKi9cbiAgZnVuY3Rpb24gYW55IChkYXRhKSB7XG4gICAgaWYgKGFycmF5KGRhdGEpKSB7XG4gICAgICByZXR1cm4gdGVzdEFycmF5KGRhdGEsIHRydWUpO1xuICAgIH1cblxuICAgIGFzc2VydC5vYmplY3QoZGF0YSk7XG5cbiAgICByZXR1cm4gdGVzdE9iamVjdChkYXRhLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1peGluICh0YXJnZXQsIHNvdXJjZSkge1xuICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgbW9kaWZpZXIgYGFzc2VydGAuXG4gICAqXG4gICAqIFRocm93cyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNzZXJ0TW9kaWZpZXIgKHByZWRpY2F0ZSwgZGVmYXVsdE1lc3NhZ2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGFzc2VydFByZWRpY2F0ZShwcmVkaWNhdGUsIGFyZ3VtZW50cywgZGVmYXVsdE1lc3NhZ2UpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnRQcmVkaWNhdGUgKHByZWRpY2F0ZSwgYXJncywgZGVmYXVsdE1lc3NhZ2UpIHtcbiAgICB2YXIgYXJnQ291bnQgPSBwcmVkaWNhdGUubCB8fCBwcmVkaWNhdGUubGVuZ3RoO1xuICAgIHZhciBtZXNzYWdlID0gYXJnc1thcmdDb3VudF07XG4gICAgdmFyIEVycm9yVHlwZSA9IGFyZ3NbYXJnQ291bnQgKyAxXTtcbiAgICBhc3NlcnRJbXBsKFxuICAgICAgcHJlZGljYXRlLmFwcGx5KG51bGwsIGFyZ3MpLFxuICAgICAgbm9uRW1wdHlTdHJpbmcobWVzc2FnZSkgPyBtZXNzYWdlIDogZGVmYXVsdE1lc3NhZ2UsXG4gICAgICBpc0Z1bmN0aW9uKEVycm9yVHlwZSkgPyBFcnJvclR5cGUgOiBUeXBlRXJyb3JcbiAgICApO1xuICAgIHJldHVybiBhcmdzWzBdO1xuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0SW1wbCAodmFsdWUsIG1lc3NhZ2UsIEVycm9yVHlwZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgKEVycm9yVHlwZSB8fCBFcnJvcikobWVzc2FnZSB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBtb2RpZmllciBgbm90YC5cbiAgICpcbiAgICogTmVnYXRlcyBgcHJlZGljYXRlYC5cbiAgICovXG4gIGZ1bmN0aW9uIG5vdE1vZGlmaWVyIChwcmVkaWNhdGUpIHtcbiAgICB2YXIgbW9kaWZpZWRQcmVkaWNhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm90SW1wbChwcmVkaWNhdGUuYXBwbHkobnVsbCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgICBtb2RpZmllZFByZWRpY2F0ZS5sID0gcHJlZGljYXRlLmxlbmd0aDtcbiAgICByZXR1cm4gbW9kaWZpZWRQcmVkaWNhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBub3RJbXBsICh2YWx1ZSkge1xuICAgIHJldHVybiAhdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogUHVibGljIG1vZGlmaWVyIGBtYXliZWAuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBwcmVkaWNhdGUgYXJndW1lbnQgaXMgIG51bGwgb3IgdW5kZWZpbmVkLFxuICAgKiBvdGhlcndpc2UgcHJvcGFnYXRlcyB0aGUgcmV0dXJuIHZhbHVlIGZyb20gYHByZWRpY2F0ZWAuXG4gICAqL1xuICBmdW5jdGlvbiBtYXliZU1vZGlmaWVyIChwcmVkaWNhdGUpIHtcbiAgICB2YXIgbW9kaWZpZWRQcmVkaWNhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAobm90LmFzc2lnbmVkKGFyZ3VtZW50c1swXSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmVkaWNhdGUuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9O1xuICAgIG1vZGlmaWVkUHJlZGljYXRlLmwgPSBwcmVkaWNhdGUubGVuZ3RoO1xuXG4gICAgLy8gSGFja2lzaGx5IGluZGljYXRlIHRoYXQgdGhpcyBpcyBhIG1heWJlLnh4eCBwcmVkaWNhdGUuXG4gICAgLy8gV2l0aG91dCB0aGlzIGZsYWcsIHRoZSBhbHRlcm5hdGl2ZSB3b3VsZCBiZSB0byBpdGVyYXRlXG4gICAgLy8gdGhyb3VnaCB0aGUgbWF5YmUgcHJlZGljYXRlcyBvciB1c2UgaW5kZXhPZiB0byBjaGVjayxcbiAgICAvLyB3aGljaCB3b3VsZCBiZSB0aW1lLWNvbnN1bWluZy5cbiAgICBtb2RpZmllZFByZWRpY2F0ZS5tID0gdHJ1ZTtcblxuICAgIHJldHVybiBtb2RpZmllZFByZWRpY2F0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1heWJlSW1wbCAodmFsdWUpIHtcbiAgICBpZiAoYXNzaWduZWQodmFsdWUpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBtb2RpZmllciBgb2ZgLlxuICAgKlxuICAgKiBBcHBsaWVzIHRoZSBjaGFpbmVkIHByZWRpY2F0ZSB0byBtZW1iZXJzIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gb2ZNb2RpZmllciAodGFyZ2V0LCB0eXBlLCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgbW9kaWZpZWRQcmVkaWNhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29sbGVjdGlvbiwgYXJncztcblxuICAgICAgY29sbGVjdGlvbiA9IGFyZ3VtZW50c1swXTtcblxuICAgICAgaWYgKHRhcmdldCA9PT0gJ21heWJlJyAmJiBub3QuYXNzaWduZWQoY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghdHlwZShjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGNvbGxlY3Rpb24gPSBjb2VyY2VDb2xsZWN0aW9uKHR5cGUsIGNvbGxlY3Rpb24pO1xuICAgICAgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29sbGVjdGlvbi5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKHRhcmdldCAhPT0gJ21heWJlJyB8fCBhc3NpZ25lZChpdGVtKSkgJiZcbiAgICAgICAgICAgICFwcmVkaWNhdGUuYXBwbHkobnVsbCwgWyBpdGVtIF0uY29uY2F0KGFyZ3MpKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gVE9ETzogUmVwbGFjZSB3aXRoIGZvci4uLm9mIHdoZW4gRVM2IGlzIHJlcXVpcmVkLlxuICAgICAgICAgICAgdGhyb3cgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoaWdub3JlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBtb2RpZmllZFByZWRpY2F0ZS5sID0gcHJlZGljYXRlLmxlbmd0aDtcbiAgICByZXR1cm4gbW9kaWZpZWRQcmVkaWNhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBjb2VyY2VDb2xsZWN0aW9uICh0eXBlLCBjb2xsZWN0aW9uKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIGFycmF5TGlrZTpcbiAgICAgICAgcmV0dXJuIHNsaWNlLmNhbGwoY29sbGVjdGlvbik7XG4gICAgICBjYXNlIG9iamVjdDpcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGNvbGxlY3Rpb24pLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25ba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVNb2RpZmllZFByZWRpY2F0ZXMgKG1vZGlmaWVyLCBvYmplY3QpIHtcbiAgICByZXR1cm4gY3JlYXRlTW9kaWZpZWRGdW5jdGlvbnMoWyBtb2RpZmllciwgcHJlZGljYXRlcywgb2JqZWN0IF0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTW9kaWZpZWRGdW5jdGlvbnMgKGFyZ3MpIHtcbiAgICB2YXIgbW9kaWZpZXIsIG9iamVjdCwgZnVuY3Rpb25zLCByZXN1bHQ7XG5cbiAgICBtb2RpZmllciA9IGFyZ3Muc2hpZnQoKTtcbiAgICBvYmplY3QgPSBhcmdzLnBvcCgpO1xuICAgIGZ1bmN0aW9ucyA9IGFyZ3MucG9wKCk7XG5cbiAgICByZXN1bHQgPSBvYmplY3QgfHwge307XG5cbiAgICBPYmplY3Qua2V5cyhmdW5jdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc3VsdCwga2V5LCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IG1vZGlmaWVyLmFwcGx5KG51bGwsIGFyZ3MuY29uY2F0KGZ1bmN0aW9uc1trZXldLCBtZXNzYWdlc1trZXldKSlcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU1vZGlmaWVkTW9kaWZpZXIgKG1vZGlmaWVyLCBtb2RpZmllZCkge1xuICAgIHJldHVybiBjcmVhdGVNb2RpZmllZEZ1bmN0aW9ucyhbIG1vZGlmaWVyLCBtb2RpZmllZCwgbnVsbCBdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZU9mUHJlZGljYXRlcyAoa2V5KSB7XG4gICAgcHJlZGljYXRlc1trZXldLm9mID0gY3JlYXRlTW9kaWZpZWRGdW5jdGlvbnMoXG4gICAgICBbIG9mTW9kaWZpZXIuYmluZChudWxsLCBudWxsKSwgcHJlZGljYXRlc1trZXldLCBwcmVkaWNhdGVzLCBudWxsIF1cbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlT2ZNb2RpZmllcnMgKGJhc2UsIG1vZGlmaWVyKSB7XG4gICAgY29sbGVjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBiYXNlW2tleV0ub2YgPSBjcmVhdGVNb2RpZmllZE1vZGlmaWVyKG1vZGlmaWVyLCBwcmVkaWNhdGVzW2tleV0ub2YpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlTWF5YmVPZk1vZGlmaWVycyAoa2V5KSB7XG4gICAgbWF5YmVba2V5XS5vZiA9IGNyZWF0ZU1vZGlmaWVkRnVuY3Rpb25zKFxuICAgICAgWyBvZk1vZGlmaWVyLmJpbmQobnVsbCwgJ21heWJlJyksIHByZWRpY2F0ZXNba2V5XSwgcHJlZGljYXRlcywgbnVsbCBdXG4gICAgKTtcbiAgICBhc3NlcnQubWF5YmVba2V5XS5vZiA9IGNyZWF0ZU1vZGlmaWVkTW9kaWZpZXIoYXNzZXJ0TW9kaWZpZXIsIG1heWJlW2tleV0ub2YpO1xuICAgIGFzc2VydC5ub3Rba2V5XS5vZiA9IGNyZWF0ZU1vZGlmaWVkTW9kaWZpZXIoYXNzZXJ0TW9kaWZpZXIsIG5vdFtrZXldLm9mKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4cG9ydEZ1bmN0aW9ucyAoZnVuY3Rpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgZGVmaW5lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9ucztcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlICE9PSBudWxsICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9ucztcbiAgICB9IGVsc2Uge1xuICAgICAgZ2xvYmFscy5jaGVjayA9IGZ1bmN0aW9ucztcbiAgICB9XG4gIH1cbn0odGhpcykpO1xuIiwiY29uc3QgY2hlY2sgPSByZXF1aXJlKCdjaGVjay10eXBlcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChjaGFpKSA9PiB7XG5cbiAgY29uc3QgdHlwZXMgPSBbJ251bWJlcicsICdzdHJpbmcnLCAnYm9vbGVhbicsICdvYmplY3QnLCAnYXJyYXknLCAnZGF0ZScsICdmdW5jdGlvbiddO1xuXG4gIHR5cGVzLmZvckVhY2goKHR5cGUpID0+IHtcbiAgICBjaGFpLkFzc2VydGlvbi5hZGRNZXRob2QodHlwZSwgZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmFzc2VydChcbiAgICAgICAgY2hlY2tbdHlwZV0odGhpcy5fb2JqKSxcbiAgICAgICAgYGV4cGVjdGVkICN7dGhpc30gdG8gYmUgJHt0eXBlfWAsXG4gICAgICAgIGBleHBlY3RlZCAje3RoaXN9IG5vdCB0byBiZSAke3R5cGV9YFxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbn07IiwiZnVuY3Rpb24gcGx1Z2luKGNoYWksIHV0aWxzKSB7XG5cbiAgdmFyIEFzc2VydGlvbiA9IGNoYWkuQXNzZXJ0aW9uO1xuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBnaXZlbiBlbnRyeSBpcyBhbiBldmVudCBlbWl0dGVyLlxuICAgKiBVc2VzIEV2ZW50RW1pdHRlciBvciBFdmVudFRhcmdldCBpZiBhdmFpbGFibGUgdG8gcXVpY2tseSBjaGVjayBgaW5zdGFuY2VvZmAuICBPdGhlcndpc2UsIGNoZWNrcyB0aGF0IGNvbW1vbiBtZXRob2RzXG4gICAqIHRvIGV2ZW50IGVtaXR0ZXJzIGFyZSBhdmFpbGFibGUuXG4gICAqXG4gICAqIEdyYWNlZnVsbHkgaGFuZGxlcyBjdXN0b20gaW1wbGVtZW50YXRpb25zIG9mIGV2ZW50IGVtaXR0ZXJzIGV2ZW4gaWYgRXZlbnRFbWl0dGVyIG9yIEV2ZW50VGFyZ2V0IGFyZSBhdmFpbGFibGUsXG4gICAqIGNoZWNraW5nIG1ldGhvZHMgaWYgdGhlIGVtaXR0ZXIgZG9lc24ndCBpbmhlcml0IGZyb20gdGhlIGdsb2JhbCBlbWl0dGVyLlxuICAqL1xuICBmdW5jdGlvbiBpc0VtaXR0ZXIoKSB7XG4gICAgLy8gRWFzeSBjaGVjazogaWYgTm9kZSdzIEV2ZW50RW1pdHRlciBvciB3aW5kb3cuRXZlbnRFbWl0dGVyIGV4aXN0LCBjaGVjayBpZiB0aGlzIGlzIGFuIGluc3RhbmNlIG9mIGl0LlxuICAgIGlmKHR5cGVvZiBFdmVudEVtaXR0ZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgRXZlbnRFbWl0dGVyICE9PSBudWxsICYmIHRoaXMuX29iaiBpbnN0YW5jZW9mIEV2ZW50RW1pdHRlcikge1xuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0KHRydWUsIFwiXCIsIFwiZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgYW4gRXZlbnRFbWl0dGVyXCIpO1xuICAgIH1cblxuICAgIC8vIEVhc3kgY2hlY2s6IGlmIHRoZSBicm93c2VyJ3MgRXZlbnRUYXJnZXQgZXhpc3RzLCBjaGVjayBpZiB0aGlzIGlzIGFuIGluc3RhbmNlIG9mIGl0LlxuICAgIGlmKHR5cGVvZiBFdmVudFRhcmdldCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBFdmVudFRhcmdldCAhPT0gbnVsbCAmJiB0aGlzLl9vYmogaW5zdGFuY2VvZiBFdmVudFRhcmdldCkge1xuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0KHRydWUsIFwiXCIsIFwiZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgYW4gRXZlbnRUYXJnZXRcIik7XG4gICAgfVxuXG4gICAgdmFyIG9iaiA9IHRoaXMuX29iajtcblxuICAgIC8vIENoZWNrIGZvciBOb2RlLmpzIHN0eWxlIGV2ZW50IGVtaXR0ZXJzIHdpdGggXCJvblwiLCBcImVtaXRcIiwgZXRjLlxuICAgIHZhciBub2RlID0gW1wib25cIiwgXCJlbWl0XCJdLmV2ZXJ5KGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmpbbWV0aG9kXSA9PT0gXCJmdW5jdGlvblwiO1xuICAgIH0pO1xuXG4gICAgaWYobm9kZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXNzZXJ0KHRydWUsIFwiXCIsIFwiZXhwZWN0ZWQgI3t0aGlzfSB0byBub3QgYmUgYW4gRXZlbnRFbWl0dGVyXCIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBCcm93c2VyLWJhc2VkIGV2ZW50IGVtaXR0ZXJzIHdpdGggXCJhZGRFdmVudExpc3RlbmVyXCIsIGV0Yy5cbiAgICB2YXIgYnJvd3NlciA9IFtcImFkZEV2ZW50TGlzdGVuZXJcIiwgXCJkaXNwYXRjaEV2ZW50XCIsIFwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiXS5ldmVyeShmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqW21ldGhvZF0gPT09IFwiZnVuY3Rpb25cIjtcbiAgICB9KTtcblxuICAgIGlmKGJyb3dzZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmFzc2VydCh0cnVlLCBcIlwiLCBcImV4cGVjdGVkICN7dGhpc30gdG8gbm90IGJlIGFuIEV2ZW50RW1pdHRlclwiKTtcbiAgICB9XG5cbiAgICB0aGlzLmFzc2VydChmYWxzZSwgXCJleHBlY3RlZCAje3RoaXN9IHRvIGJlIGFuIEV2ZW50RW1pdHRlclwiLCBcIlwiKTtcbiAgfTtcblxuICBBc3NlcnRpb24uYWRkUHJvcGVydHkoXCJlbWl0dGVyXCIsIGlzRW1pdHRlcik7XG4gIEFzc2VydGlvbi5hZGRQcm9wZXJ0eShcInRhcmdldFwiLCBpc0VtaXR0ZXIpO1xuXG4gIEFzc2VydGlvbi5hZGRNZXRob2QoXCJlbWl0XCIsIGZ1bmN0aW9uKG5hbWUsIGFyZ3MpIHtcbiAgICBuZXcgQXNzZXJ0aW9uKHRoaXMuX29iaikudG8uYmUuYW4uZW1pdHRlcjtcblxuICAgIG5ldyBBc3NlcnRpb24obmFtZSkudG8uYmUuYShcInN0cmluZ1wiKTtcbiAgICB2YXIgb2JqID0gdGhpcy5fb2JqO1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGFzc2VydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgX3RoaXMuYXNzZXJ0LmFwcGx5KF90aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHV0aWxzLmZsYWcodGhpcywgJ3RpbWVvdXQnKSB8fCAxNTAwO1xuXG4gICAgaWYodXRpbHMuZmxhZyh0aGlzLCAnbmVnYXRlJykpIHtcbiAgICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBldmVudCBkb2Vzbid0IGZpcmUgYmVmb3JlIHRpbWVvdXRcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgICAgb2JqLm9uKG5hbWUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmKGRvbmUpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgYXNzZXJ0KGZhbHNlLCBcImV4cGVjdGVkICN7dGhpc30gdG8gbm90IGVtaXQgXCIrbmFtZStcIi5cIik7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZihkb25lKSB7IHJldHVybjsgfVxuICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBFbnN1cmUgdGhhdCB0aGUgZXZlbnQgZmlyZXNcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgICAgb2JqLm9uKG5hbWUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmKGRvbmUpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZihkb25lKSB7IHJldHVybjsgfVxuICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgIGFzc2VydChmYWxzZSwgXCJleHBlY3RlZCAje3RoaXN9IHRvIGVtaXQgXCIrbmFtZStcIi5cIik7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbn1cblxuaWYgKHR5cGVvZiByZXF1aXJlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIikge1xuICBtb2R1bGUuZXhwb3J0cyA9IHBsdWdpbjtcbn1cbmVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHBsdWdpbjtcbiAgfSk7XG59XG5lbHNlIHtcbiAgLy8gT3RoZXIgZW52aXJvbm1lbnQgKHVzdWFsbHkgPHNjcmlwdD4gdGFnKTogcGx1ZyBpbiB0byBnbG9iYWwgY2hhaSBpbnN0YW5jZSBkaXJlY3RseS5cbiAgY2hhaS51c2UocGx1Z2luKTtcbn1cbiIsImltcG9ydCBDU1MgZnJvbSdxdWlja2Nzcyc7dmFyIHJlZ2lzdGVyZWQ7XG5yZWdpc3RlcmVkID0gZmFsc2U7XG5mdW5jdGlvbiByZWdpc3RlckFuaW1hdGlvbnMgKCkge1xuICBpZiAocmVnaXN0ZXJlZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJlZ2lzdGVyZWQgPSB0cnVlO1xuICBDU1MuYW5pbWF0aW9uKCdjaGVja21hcmtBbmltYXRlU3VjY2Vzc1RpcCcsIHtcbiAgICAnMCUsIDU0JSc6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogM1xuICAgIH0sXG4gICAgJzcwJSc6IHtcbiAgICAgIHdpZHRoOiAxNCxcbiAgICAgIGxlZnQ6IC0yLFxuICAgICAgdG9wOiA4XG4gICAgfSxcbiAgICAnODQlJzoge1xuICAgICAgd2lkdGg6IDUsXG4gICAgICBsZWZ0OiA1LFxuICAgICAgdG9wOiAxMFxuICAgIH0sXG4gICAgJzEwMCUnOiB7XG4gICAgICB3aWR0aDogOCxcbiAgICAgIGxlZnQ6IDMsXG4gICAgICB0b3A6IDEwXG4gICAgfVxuICB9KTtcbiAgQ1NTLmFuaW1hdGlvbignY2hlY2ttYXJrQW5pbWF0ZVN1Y2Nlc3NMb25nJywge1xuICAgICcwJSwgNjUlJzoge1xuICAgICAgd2lkdGg6IDAsXG4gICAgICByaWdodDogMTIsXG4gICAgICB0b3A6IDEyXG4gICAgfSxcbiAgICAnODQlJzoge1xuICAgICAgd2lkdGg6IDE0LFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0b3A6IDdcbiAgICB9LFxuICAgICcxMDAlJzoge1xuICAgICAgd2lkdGg6IDEyLFxuICAgICAgcmlnaHQ6IDIsXG4gICAgICB0b3A6IDhcbiAgICB9XG4gIH0pO1xuICBDU1MuYW5pbWF0aW9uKCdjaGVja21hcmtBbmltYXRlRXJyb3InLCB7XG4gICAgJzAlLCA2NSUnOiB7XG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwLjQpJyxcbiAgICAgIG9wYWNpdHk6IDBcbiAgICB9LFxuICAgICc4NCUnOiB7XG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxLjE1KSdcbiAgICB9LFxuICAgICcxMDAlJzoge1xuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXG4gICAgfVxuICB9KTtcbiAgQ1NTLmFuaW1hdGlvbignY2hlY2ttYXJrUm90YXRlUGxhY2Vob2xkZXInLCB7XG4gICAgJzAlLCA1JSc6IHtcbiAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgtNDVkZWcpJ1xuICAgIH0sXG4gICAgJzEyJSwgMTAwJSc6IHtcbiAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgtNDA1ZGVnKSdcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gQ1NTLmFuaW1hdGlvbignZmllbGRFcnJvclNoYWtlJywge1xuICAgICcwJSwgNTAlJzoge1xuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtMTBweCknXG4gICAgfSxcbiAgICAnMjUlLCA3NSUnOiB7XG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDEwcHgpJ1xuICAgIH0sXG4gICAgJzEwMCUnOiB7XG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDBweCknXG4gICAgfVxuICB9KTtcbn1leHBvcnQgZGVmYXVsdCByZWdpc3RlckFuaW1hdGlvbnM7IiwiaW1wb3J0IElTXyBmcm9tJ0BkYW5pZWxrYWxlbi9pcyc7dmFyIElTO1xuXG5JUyA9IElTXy5jcmVhdGUoJ25hdGl2ZXMnLCAnZG9tJyk7XG5JUy5sb2FkKHtcbiAgLy8gZmllbGQ6ICh0YXJnZXQpLT4gdGFyZ2V0IGFuZCB0YXJnZXQgaW5zdGFuY2VvZiBGaWVsZFxuICByZWdleDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHJldHVybiB0YXJnZXQgaW5zdGFuY2VvZiBSZWdFeHA7XG4gIH0sXG4gIG9iamVjdGFibGU6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICByZXR1cm4gSVMub2JqZWN0KHRhcmdldCkgfHwgSVMuZnVuY3Rpb24odGFyZ2V0KTtcbiAgfVxufSk7XG52YXIgSVMkMSA9IElTO2V4cG9ydCBkZWZhdWx0IElTJDE7IiwiLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmICh3aW5kb3cuY29uc29sZSA9PSBudWxsKSB7XG4gIHdpbmRvdy5jb25zb2xlID0ge307XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG5cbmlmIChjb25zb2xlLmxvZyA9PSBudWxsKSB7XG4gIGNvbnNvbGUubG9nID0gZnVuY3Rpb24gKCkge307XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG5cbmlmIChjb25zb2xlLndhcm4gPT0gbnVsbCkge1xuICBjb25zb2xlLndhcm4gPSBjb25zb2xlLmxvZztcbn0iLCIoZnVuY3Rpb24odCl7aWYodD1mdW5jdGlvbihlLGkscyl7cmV0dXJuIGZ1bmN0aW9uKG4pe2lmKCFpW25dKXRocm93IEVycm9yKG4rXCIgaXMgbm90IGEgbW9kdWxlXCIpO3JldHVybiBlW25dP2Vbbl0uZXhwb3J0czooZVtuXT17ZXhwb3J0czp7fX0sZVtuXS5leHBvcnRzPWlbbl0uY2FsbChzLHQsZVtuXSxlW25dLmV4cG9ydHMpKX19KHt9LHswOmZ1bmN0aW9uKHQsZSxpKXt2YXIgcz0wLG49XCJwdXNoIHBvcCBzaGlmdCB1bnNoaWZ0IHNwbGljZSByZXZlcnNlIHNvcnRcIi5zcGxpdChcIiBcIikscj17fSxoPXt9LG89W1wie3tcIixcIn19XCJdLHU9T2JqZWN0LmNyZWF0ZSh7c2lsZW50OiExfSx7cGxhY2Vob2xkZXI6e2dldDpmdW5jdGlvbigpe3JldHVybiBvfSxzZXQ6ZnVuY3Rpb24odCl7Ty5pQSh0KSYmMj09PXQubGVuZ3RoJiYobz10LEMoKSl9fX0pLGM9e2RlbGF5OiExLHRocm90dGxlOiExLHNpbXBsZVNlbGVjdG9yOiExLHByb21pc2VUcmFuc2Zvcm1zOiExLGRpc3BhdGNoRXZlbnRzOiExLHNlbmRBcnJheUNvcGllczohMSx1cGRhdGVFdmVuSWZTYW1lOiExLHVwZGF0ZU9uQmluZDohMH0sYT1PYmplY3QuZGVmaW5lUHJvcGVydHksZj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLGw9bnVsbCxwPWZ1bmN0aW9uKCl7aWYoIWwpe3ZhciB0PWw9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTt0LmluaXRFdmVudChcImNoYW5nZVwiLCEwLCExKSx0Ll9zYj0hMH1yZXR1cm4gbH0sZD0hKFwiY2xhc3NOYW1lXCJpbiBFbGVtZW50LnByb3RvdHlwZSYmZihFbGVtZW50LnByb3RvdHlwZSxcImNsYXNzTmFtZVwiKS5nZXQpLHY9XCJpbm5lcldpZHRoIGlubmVySGVpZ2h0IG91dGVyV2lkdGggb3V0ZXJIZWlnaHQgc2Nyb2xsWCBzY3JvbGxZIHBhZ2VYT2Zmc2V0IHBhZ2VZT2Zmc2V0IHNjcmVlblggc2NyZWVuWSBzY3JlZW5MZWZ0IHNjcmVlblRvcFwiLnNwbGl0KFwiIFwiKSxiPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudUFTKGV8fHRoaXMpfSxnPWZ1bmN0aW9uKCl7cmV0dXJuXCJcIisgKytzfSx5PWZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCl9LF89ZnVuY3Rpb24odCxlKXtyZXR1cm4gZnVuY3Rpb24oaSxzLG4pe3JldHVybiBIKGkscyxuLHQsZSl9fSxtPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuc1V8fCh0LnNVPW5ldyBSKGZ1bmN0aW9uKCl7cmV0dXJuIGU/dC5zVih0LmZEVigpLHQsITApOnQudUFTKHQpfSxcIkZ1bmNcIix7fSkpfSxEPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQmJi0xIT09dC5pbmRleE9mKGUpfSxPPXtpRDpmdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwIT09dH0saUE6ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBBcnJheX0saU86ZnVuY3Rpb24odCl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIHQmJnR9LGlTOmZ1bmN0aW9uKHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0fSxpTjpmdW5jdGlvbih0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdH0saUY6ZnVuY3Rpb24odCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdH0saUJJOmZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgWH0saUI6ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBSfSxpc0k6ZnVuY3Rpb24odCl7cmV0dXJuIE8uaU8odCkmJk8uaU4odC5sZW5ndGgpfSxETTpmdW5jdGlvbih0KXtyZXR1cm4gdC5ub2RlTmFtZSYmMT09PXQubm9kZVR5cGV9LGRJOmZ1bmN0aW9uKHQpe3JldHVyblwiSU5QVVRcIj09PSh0PXQubm9kZU5hbWUpfHxcIlRFWFRBUkVBXCI9PT10fHxcIlNFTEVDVFwiPT09dH0sZFI6ZnVuY3Rpb24odCl7cmV0dXJuXCJyYWRpb1wiPT09dC50eXBlfSxkQzpmdW5jdGlvbih0KXtyZXR1cm5cImNoZWNrYm94XCI9PT10LnR5cGV9LGVDOmZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgTm9kZUxpc3R8fHQgaW5zdGFuY2VvZiBIVE1MQ29sbGVjdGlvbnx8d2luZG93LmpRdWVyeSYmdCBpbnN0YW5jZW9mIGpRdWVyeX0sZUFTOmZ1bmN0aW9uKHQpe3ZhciBlPXRbMF0udHlwZTtyZXR1cm5bXS5maWx0ZXIuY2FsbCh0LGZ1bmN0aW9uKHQpe3JldHVybiB0LnR5cGU9PT1lfSkubGVuZ3RoPT09dC5sZW5ndGh9LGROOmZ1bmN0aW9uKHQpe3JldHVybiBPLkRNKHQpfHx0PT09d2luZG93fHx0PT09ZG9jdW1lbnR9fSxNPWZ1bmN0aW9uKHQsZSxpKXt2YXIgcztyZXR1cm4ocz1mKHQsZSkpPyhpJiYocy5jb25maWd1cmFibGU9ITApLHMpOih0PU9iamVjdC5nZXRQcm90b3R5cGVPZih0KSk/TSh0LGUsITApOnZvaWQgMH0sST1mdW5jdGlvbih0LGUsaSl7dmFyIHM7aWYodC5PRHx8KHQuT0Q9TShlLHQucHIpKSxpKW4uZm9yRWFjaChmdW5jdGlvbihpKXtyZXR1cm4gYShlLGkse2NvbmZpZ3VyYWJsZTohMCx2YWx1ZTpmdW5jdGlvbigpe3ZhciBzPUFycmF5LnByb3RvdHlwZVtpXS5hcHBseShlLGFyZ3VtZW50cyk7cmV0dXJuIHQudUFTKHQpLHN9fSl9KTtlbHNlIGlmKFwiUHJveHlcIj09PXQudHlwZSl7dmFyIGg9dC5vUj10LnZhbHVlO2lmKHQudmFsdWU9e3Jlc3VsdDpudWxsLGFyZ3M6bnVsbH0sTy5pRihoKSl7dmFyIG89W10uc2xpY2UsdT1zPWZ1bmN0aW9uKCl7dmFyIGk9by5jYWxsKGFyZ3VtZW50cyk7cmV0dXJuIHQudmFsdWUuYXJncz1pPXQudGZTP3QudGZTKGkpOmksdC52YWx1ZS5yZXN1bHQ9aT1oLmFwcGx5KGUsaSksdC51QVModCksaX07YShlLHQucHIse2NvbmZpZ3VyYWJsZTp0LmlzTD0hMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdX0sc2V0OmZ1bmN0aW9uKGUpe08uaUYoZSk/ZSE9PWgmJihlIT09cyYmKGg9dC5vUj1lKSx1IT09cyYmKHU9cykpOnU9ZX19KX19ZWxzZSBpZighKEQodC50eXBlLFwiRE9NXCIpfHx0Lm9iamVjdD09PXdpbmRvdyYmRCh2LHQucHIpKSl7KGk9dC5PRHx8cikuZ2V0JiYodC5PRz1pLmdldC5iaW5kKGUpKSxpLnNldCYmKHQuT1M9aS5zZXQuYmluZChlKSk7dmFyIGM9KGM9aS5jb25maWd1cmFibGUpJiZlLmNvbnN0cnVjdG9yIT09Q1NTU3R5bGVEZWNsYXJhdGlvbjtpZihkJiZ0LkRNJiZ0LnByIGluIGUuY2xvbmVOb2RlKCExKSYmKHQuT0Q9Yz0hMSx0LmlzTD0hMCx0Lk9HPWZ1bmN0aW9uKCl7cmV0dXJuIHQub2JqZWN0W3QucHJdfSx0Lk9TPWZ1bmN0aW9uKGUpe3JldHVybiB0Lm9iamVjdFt0LnByXT1lfSksYyl7Yz1cIkFycmF5XCI9PT10LnR5cGU7dmFyIGY9IXQuT1MmJiFjO2EoZSx0LnByLHtjb25maWd1cmFibGU6dC5pc0w9ITAsZW51bWVyYWJsZTppLmVudW1lcmFibGUsZ2V0OnQuT0d8fGZ1bmN0aW9uKCl7cmV0dXJuIHQudmFsdWV9LHNldDpmdW5jdGlvbihlKXt0LnNWKGUsdCxmKX19KSxjJiZJKHQsZVt0LnByXSwhMCl9fX0saj1mdW5jdGlvbih0LGUsaSl7aWYoaSl7dmFyIHM9W107Zm9yKHQ9MCxpPW4ubGVuZ3RoO3Q8aTt0Kyspe3ZhciByPW5bdF07cy5wdXNoKGRlbGV0ZSBlW3JdKX1yZXR1cm4gc31yZXR1cm4oaT10Lk9EKS5zZXR8fGkuZ2V0fHwoaS52YWx1ZT10Lm9SfHx0LnZhbHVlKSxhKGUsdC5wcixpKX0sUz1mdW5jdGlvbih0KXt2YXIgZSxpPXkoKTtmb3IoZSBpbiB0KWlbZV09dFtlXTtyZXR1cm4gaX0sRT1mdW5jdGlvbih0LGUpe3ZhciBpLHM9T2JqZWN0LmtleXMoZSksbj0wO2ZvcihpPXMubGVuZ3RoO248aTtuKyspe3ZhciByPXNbbl07dFtyXT1lW3JdfX0sUD17Z2V0OmZ1bmN0aW9uKHQsZSxpLHMpe3JldHVybiBlP2hbdC5fc2JfSURdOnMmJnRbMF0uX3NiX21hcCYmKGU9aFt0WzBdLl9zYl9tYXBbaV1dKS5nQj9lLmdCOnQuX3NiX21hcCYmdC5fc2JfbWFwW2ldP2hbdC5fc2JfbWFwW2ldXTp2b2lkIDB9LHNldDpmdW5jdGlvbih0LGUpe2lmKGUpYSh0Lm9iamVjdCxcIl9zYl9JRFwiLHtjb25maWd1cmFibGU6ITAsdmFsdWU6dC5JRH0pO2Vsc2V7dmFyIGk9dC5zZTt0Lm9iamVjdC5fc2JfbWFwP3Qub2JqZWN0Ll9zYl9tYXBbaV09dC5JRDooZT17fSxlW2ldPXQuSUQsYSh0Lm9iamVjdCxcIl9zYl9tYXBcIix7Y29uZmlndXJhYmxlOiEwLHZhbHVlOmV9KSl9fX0sVixOPS9bLiorP14ke30oKXxbXFxdXFxcXF0vZyxBPVY9bnVsbCxDPWZ1bmN0aW9uKCl7dmFyIHQ9dS5wbGFjZWhvbGRlclswXS5yZXBsYWNlKE4sXCJcXFxcJCZcIiksZT11LnBsYWNlaG9sZGVyWzFdLnJlcGxhY2UoTixcIlxcXFwkJlwiKSxpPVwiW15cIitlK1wiXStcIjtBPW5ldyBSZWdFeHAodCtcIihcIitpK1wiKVwiK2UsXCJnXCIpLFY9bmV3IFJlZ0V4cChcIlwiK3QraStlLFwiZ1wiKX07QygpO3ZhciB4PWZ1bmN0aW9uKHQsZSxpKXt2YXIgcyxuLHI9XCJcIixoPXM9MDtmb3Iobj10Lmxlbmd0aDtzPG47aD0rK3Mpcis9dFtoXSxpW2hdJiYocis9ZVtpW2hdXSk7cmV0dXJuIHJ9LGs9ZnVuY3Rpb24odCxlLGkpe251bGw9PXRbaV0mJih0W2ldPVtdKSx0W2ldLnB1c2goZSl9LEI9ZnVuY3Rpb24odCxlKXt2YXIgaSxzLG4scj0wO2ZvcihzPSh0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHQuY2hpbGROb2RlcykpLmxlbmd0aDtyPHM7cisrKXt2YXIgaD10W3JdO2lmKDMhPT1oLm5vZGVUeXBlKUIoaCxlKTtlbHNlIGlmKGgudGV4dENvbnRlbnQubWF0Y2goVikpe3ZhciBvPWgudGV4dENvbnRlbnQuc3BsaXQoQSk7aWYoMz09PW8ubGVuZ3RoJiZcIlwiPT09b1swXStvWzJdKWsoZSxoLG9bMV0pO2Vsc2V7dmFyIHU9ZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLGM9aT0wO2ZvcihuPW8ubGVuZ3RoO2k8bjtjPSsraSl7dmFyIGE9b1tjXSxmPXUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYSkpO2MlMiYmayhlLGYsYSl9aC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh1LGgpfX19fSxGPWZ1bmN0aW9uKHQpe3Rocm93IEVycm9yKFwiU2ltcGx5QmluZDogXCIrKFRbdF18fHQpKX0sRz1mdW5jdGlvbih0LGUpe3Uuc2lsZW50fHwoZT1MKGUpLHQ9VFt0XSxjb25zb2xlLndhcm4oXCJTaW1wbHlCaW5kOiBcIit0K1wiXFxuXFxuXCIrZSkpfSx3PWZ1bmN0aW9uKHQpe0YoXCJJbnZhbGlkIGFyZ3VtZW50L3MgKFwiK3QrXCIpXCIsITApfSxMPWZ1bmN0aW9uKHQpe3JldHVybihFcnJvcigpLnN0YWNrfHxcIlwiKS5zcGxpdChcIlxcblwiKS5zbGljZSh0KzMpLmpvaW4oXCJcXG5cIil9LFQ9e2VySVA6XCJTaW1wbHlCaW5kKCkgYW5kIC50bygpIG9ubHkgYWNjZXB0IGEgZnVuY3Rpb24sIGFuIGFycmF5LCBhIGJvdW5kIG9iamVjdCwgYSBzdHJpbmcsIG9yIGEgbnVtYmVyLlwiLGVyRk46XCJPbmx5IGZ1bmN0aW9ucyBhcmUgYWxsb3dlZCBmb3IgLnRyYW5zZm9ybS8uY29uZGl0aW9uL0FsbCgpXCIsZXJFVjpcIkludmFsaWQgYXJndW1lbnQgbnVtYmVyIGluIC5vZkV2ZW50KClcIixlbXB0eUxpc3Q6XCJFbXB0eSBjb2xsZWN0aW9uIHByb3ZpZGVkXCIsZXJPRDpcIllvdSBjYW4gb25seSBwYXNzIGEgc2luZ2xlIERPTSBlbGVtZW50IHRvIGEgYmluZGluZ1wiLGVyTVg6XCInY2hlY2tlZCcgb2YgTWl4ZWQgbGlzdCBvZiBlbGVtZW50IGNhbm5vdCBiZSBib3VuZFwifSxIPWZ1bmN0aW9uKHQsZSxpLHMsbil7cmV0dXJuKHR8fDA9PT10KSYmKE8uaVModCl8fE8uaU4odCl8fE8uaUYodCl8fHQgaW5zdGFuY2VvZiBBcnJheSl8fE8uaUJJKHQpfHxGKFwiZXJJUFwiKSwhTy5pTyh0KXx8dCBpbnN0YW5jZW9mIEFycmF5PyhlPW5ldyBYKGUpLGUuc289aSxlLklTPXMsZS5jQz1uLHQ9Ty5pRih0KT9lLnNTKHQsITApOmUuc1AodCkpOnQ9bj9uKHQpOnQuc0MoKSx0fTtILnZlcnNpb249XCIxLjE1LjhcIixILnNldHRpbmdzPXUsSC5kZWZhdWx0T3B0aW9ucz1jLEgudW5CaW5kQWxsPWZ1bmN0aW9uKHQsZSl7dmFyIGk7aWYodCYmKE8uaU8odCl8fE8uaUYodCkpKXtPLmlzSSh0KSYmIXQuX3NiX0lEJiZ0WzBdJiZPLkRNKHRbMF0pJiYodD10WzBdKTt2YXIgcz10Ll9zYl9tYXA7aWYodC5fc2JfSUQmJmhbdC5fc2JfSURdLnJBUyhlKSxzKWZvcihpIGluIHMpdD1zW2ldLGhbdF0uckFTKGUpfX07dmFyIFI9ZnVuY3Rpb24odCxlLGkpe3JldHVybiBFKHRoaXMsaSksdGhpcy5vRD10aGlzLnNvP3RoaXMub3B0aW9uczpjLHRoaXMudHlwZT1lLHRoaXMub2JqZWN0PXQsdGhpcy5JRD1nKCksdGhpcy5zdWJzPVtdLHRoaXMuc009eSgpLHRoaXMucE09eSgpLHRoaXMuYXRFVj1bXSxcIlByb3h5XCI9PT10aGlzLnR5cGUmJih0aGlzLnNWPWIpLHRoaXMubUMmJih0aGlzLmNIPXkoKSx0aGlzLm9iamVjdC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgaT10LmNIW2UudmFsdWVdPUgoXCJjaGVja2VkXCIpLm9mKGUpLl87aS5hUyh0KSxpLnNNW3QuSURdLnRGPWZ1bmN0aW9uKCl7cmV0dXJuIGl9LGkuZ0I9dH19KHRoaXMpKSksXCJFdmVudFwiPT09dGhpcy50eXBlfHxcIkZ1bmNcIj09PXRoaXMudHlwZSYmdGhpcy5JU3x8KFwiUGhvbGRlclwiPT09dGhpcy50eXBlPyhlPXRoaXMuZGUmJiFEKHRoaXMuZGUsXCJtdWx0aVwiKT90aGlzLmRlK1wiOlwiK3RoaXMucHI6dGhpcy5wciwodD10aGlzLnBCPUgoZSkub2YodCkuXykuc1BIKCksdGhpcy52YWx1ZT10LnBWTFt0aGlzLlBoXSx0LnR4TiYmKHRoaXMudHhOPXQudHhOW3RoaXMuUGhdKSk6KHRoaXMudmFsdWU9dD10aGlzLmZEVigpLFwiT2JqZWN0UHJvcFwiIT09dGhpcy50eXBlfHxPLmlEKHQpfHxmKHRoaXMub2JqZWN0LHRoaXMucHIpfHwodGhpcy5vYmplY3RbdGhpcy5wcl09dCksSSh0aGlzLHRoaXMub2JqZWN0KSkpLHRoaXMuYUVWKCksaFt0aGlzLklEXT10aGlzfTtSLnByb3RvdHlwZT17YVM6ZnVuY3Rpb24odCxlLGkscyl7dmFyIG47aWYodC5pc011bHRpKXt2YXIgcj10LmJpbmRpbmdzO2Zvcih0PTAsbj1yLmxlbmd0aDt0PG47dCsrKXt2YXIgaD1yW3RdO3RoaXMuYVMoaCxlLGkscyl9fWVsc2UgaWYodGhpcy5zTVt0LklEXSl2YXIgbz0hMDtlbHNlIHQucE1bdGhpcy5JRF09dGhpcyx0aGlzLnN1YnMudW5zaGlmdCh0KSwobj10aGlzLnNNW3QuSURdPXkoKSkudU89aSxuLm9wdHM9UyhlKSwoc3x8XCJFdmVudFwiPT09dGhpcy50eXBlfHxcIlByb3h5XCI9PT10aGlzLnR5cGV8fFwiQXJyYXlcIj09PXRoaXMudHlwZSkmJihuLm9wdHMudXBkYXRlRXZlbklmU2FtZT0hMCksbi5WUj1cIkZ1bmNcIj09PXQudHlwZT9cInBzXCI6XCJ2YWx1ZVwiO3JldHVybiBvfSxyUzpmdW5jdGlvbih0LGUpe3ZhciBpO2lmKHQuaXNNdWx0aSl7dmFyIHM9dC5iaW5kaW5ncztmb3IodD0wLGk9cy5sZW5ndGg7dDxpO3QrKyl7dmFyIG49c1t0XTt0aGlzLnJTKG4sZSl9fWVsc2UgdGhpcy5zTVt0LklEXSYmKHRoaXMuc3Vicy5zcGxpY2UodGhpcy5zdWJzLmluZGV4T2YodCksMSksZGVsZXRlIHRoaXMuc01bdC5JRF0sZGVsZXRlIHQucE1bdGhpcy5JRF0pLGUmJih0LnJTKHRoaXMpLGRlbGV0ZSB0aGlzLnBNW3QuSURdKTswPT09dGhpcy5zdWJzLmxlbmd0aCYmMD09PU9iamVjdC5rZXlzKHRoaXMucE0pLmxlbmd0aCYmdGhpcy5ERVMoKX0sckFTOmZ1bmN0aW9uKHQpe3ZhciBlLGk9dGhpcy5zdWJzLnNsaWNlKCkscz0wO2ZvcihlPWkubGVuZ3RoO3M8ZTtzKyspe3ZhciBuPWlbc107dGhpcy5yUyhuLHQpfX0sREVTOmZ1bmN0aW9uKCl7dmFyIHQ7aWYoZGVsZXRlIGhbdGhpcy5JRF0sdGhpcy5yUEkoKSxcIkV2ZW50XCI9PT10aGlzLnR5cGUpe3ZhciBlPXRoaXMuYXRFVixpPTA7Zm9yKHQ9ZS5sZW5ndGg7aTx0O2krKyl7dmFyIHM9ZVtpXTt0aGlzLnVyRVZFKHMpfX1lbHNlXCJGdW5jXCI9PT10aGlzLnR5cGUmJmRlbGV0ZSB0aGlzLm9iamVjdC5fc2JfSUQ7dGhpcy5pc0wmJnRoaXMuT0QmJmoodGhpcyx0aGlzLm9iamVjdCksXCJBcnJheVwiPT09dGhpcy50eXBlJiZqKHRoaXMsdGhpcy52YWx1ZSwhMCksdGhpcy5vYmplY3QuX3NiX21hcCYmKGRlbGV0ZSB0aGlzLm9iamVjdC5fc2JfbWFwW3RoaXMuc2VdLDA9PT1PYmplY3Qua2V5cyh0aGlzLm9iamVjdC5fc2JfbWFwKS5sZW5ndGgmJmRlbGV0ZSB0aGlzLm9iamVjdC5fc2JfbWFwKX0sZkRWOmZ1bmN0aW9uKCl7dmFyIHQsZT10aGlzLnR5cGU7c3dpdGNoKCExKXtjYXNlXCJGdW5jXCIhPT1lOnJldHVybiB0aGlzLm9iamVjdCgpO2Nhc2VcIkRPTUF0dHJcIiE9PWU6cmV0dXJuIHRoaXMub2JqZWN0LmdldEF0dHJpYnV0ZSh0aGlzLnByKXx8XCJcIjtjYXNlIXRoaXMubUM6dmFyIGk9W10scz10aGlzLmNIO2Zvcih0IGluIHMpaWYoc1t0XS5vYmplY3QuY2hlY2tlZCl7aWYoXCJET01SYWRpb1wiPT09ZSlyZXR1cm4gdDtpLnB1c2godCl9cmV0dXJuIGk7ZGVmYXVsdDpyZXR1cm4gdGhpcy5vYmplY3RbdGhpcy5wcl19fSxzVjpmdW5jdGlvbih0LGUsaSxzKXtpZihlfHwoZT10aGlzKSx0aGlzLnRmUyYmKHQ9dGhpcy50ZlModCkpLCFpKXN3aXRjaCh0aGlzLnR5cGUpe2Nhc2VcIk9iamVjdFByb3BcIjppZih0aGlzLmlzTClpZih0aGlzLmRJKWlmKHMpe2lmKHQhPT10aGlzLk9HKCkpe3ZhciBuPXRoaXMub2JqZWN0LnNlbGVjdGlvblN0YXJ0O3RoaXMuT1ModCksbiYmdGhpcy5vYmplY3Quc2V0U2VsZWN0aW9uUmFuZ2UobixuKX19ZWxzZSB0aGlzLk9TKHQpLHUuZGlzcGF0Y2hFdmVudHMmJnRoaXMub2JqZWN0LmRpc3BhdGNoRXZlbnQocCgpKTtlbHNlIHRoaXMuT1MmJnRoaXMuT1ModCk7ZWxzZSB0IT09dGhpcy52YWx1ZSYmKHRoaXMub2JqZWN0W3RoaXMucHJdPXQpO2JyZWFrO2Nhc2VcIlBob2xkZXJcIjppZihzPXRoaXMucEIscy5wVkxbdGhpcy5QaF09dCxuPXgocy5wQ1Qscy5wVkwscy5wSU0pLHRoaXMudHhOJiZ0IT09dGhpcy52YWx1ZSl7dmFyIHI9dGhpcy50eE4saD0wO2ZvcihpPXIubGVuZ3RoO2g8aTtoKyspe3ZhciBvPXJbaF07by50ZXh0Q29udGVudD10fX1cInRleHRDb250ZW50XCIhPT10aGlzLnByJiZzLnNWKG4sZSk7YnJlYWs7Y2FzZVwiQXJyYXlcIjp0IT09dGhpcy52YWx1ZSYmKE8uaUEodCl8fCh0PUFycmF5LnByb3RvdHlwZS5jb25jYXQodCkpLGoodGhpcyx0aGlzLnZhbHVlLCEwKSxJKHRoaXMsdD10LnNsaWNlKCksITApLHRoaXMuT1MmJnRoaXMuT1ModCkpO2JyZWFrO2Nhc2VcIkZ1bmNcIjpuPXRoaXMucHMsdGhpcy5wcz10LHQ9dGhpcy5vYmplY3QodCxuKTticmVhaztjYXNlXCJFdmVudFwiOnRoaXMuaUU9ITAsdGhpcy5lRSh0KSx0aGlzLmlFPSExO2JyZWFrO2Nhc2VcIkRPTVJhZGlvXCI6aWYodGhpcy5tQylpZihzPU8uaUIodCk/dDp0aGlzLmNIW3RdKWZvcihoIGluIHQ9cy5vYmplY3QudmFsdWUsbj10aGlzLmNIKShpPW5baF0pLnNWKGkuSUQ9PT1zLklELGUpO2Vsc2UgdD10aGlzLnZhbHVlO2Vsc2V7aWYoKHQ9ISF0KT09PXRoaXMudmFsdWUpcmV0dXJuO3RoaXMub2JqZWN0LmNoZWNrZWQhPT10JiYodGhpcy5vYmplY3QuY2hlY2tlZD10KSx0JiZ1LmRpc3BhdGNoRXZlbnRzJiZ0aGlzLm9iamVjdC5kaXNwYXRjaEV2ZW50KHAoKSl9YnJlYWs7Y2FzZVwiRE9NQ2hlY2tib3hcIjppZih0aGlzLm1DKXtmb3IoaD0hTy5pQih0KSxpPXM9MCxyPSh0PVtdLmNvbmNhdCh0KSkubGVuZ3RoO3M8cjtpPSsrcylvPXRbaV0sdFtpXT1PLmlCKG8pP286dGhpcy5jSFtvXTtyPVtdLG89dGhpcy5jSDtmb3IobiBpbiBvKWk9b1tuXSxzPWg/RCh0LGkpOmkudmFsdWUsaS5zVihzLGUpLHMmJnIucHVzaChuKTt0PXJ9ZWxzZXtpZigodD0hIXQpPT09dGhpcy52YWx1ZSlyZXR1cm47dGhpcy5vYmplY3QuY2hlY2tlZCE9PXQmJih0aGlzLm9iamVjdC5jaGVja2VkPXQsdS5kaXNwYXRjaEV2ZW50cyYmdGhpcy5vYmplY3QuZGlzcGF0Y2hFdmVudChwKCkpKX1icmVhaztjYXNlXCJET01BdHRyXCI6dGhpcy5vYmplY3Quc2V0QXR0cmlidXRlKHRoaXMucHIsdCl9dGhpcy52YWx1ZT10LHRoaXMudUFTKGUpfSx1QVM6ZnVuY3Rpb24odCl7dmFyIGUsaTtpZihpPShlPXRoaXMuc3VicykubGVuZ3RoKWZvcig7aS0tOyl0aGlzLnVTKGVbaV0sdCl9LHVTOmZ1bmN0aW9uKHQsZSxpKXt2YXIgcztpZighKGU9PT10fHxlIT09dGhpcyYmZS5zTVt0LklEXSkpe3ZhciBuPXRoaXMuc01bdC5JRF07aWYoIW4uZEx8fCFuLmRMW2UuSURdKXtpZihuLm9wdHMudGhyb3R0bGUpe3ZhciByPShpPStuZXcgRGF0ZSktbi5sVTtpZihyPG4ub3B0cy50aHJvdHRsZSlyZXR1cm4gY2xlYXJUaW1lb3V0KG4udVQpLG4udVQ9c2V0VGltZW91dChmdW5jdGlvbihpKXtyZXR1cm4gZnVuY3Rpb24oKXtpZihpLnNNW3QuSURdKXJldHVybiBpLnVTKHQsZSl9fSh0aGlzKSxuLm9wdHMudGhyb3R0bGUtcik7bi5sVT1pfWVsc2UgaWYobi5vcHRzLmRlbGF5JiYhaSlyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbihpKXtyZXR1cm4gZnVuY3Rpb24oKXtpZihpLnNNW3QuSURdKXJldHVybiBpLnVTKHQsZSwhMCl9fSh0aGlzKSxuLm9wdHMuZGVsYXkpO2k9XCJBcnJheVwiPT09dGhpcy50eXBlJiZuLm9wdHMuc2VuZEFycmF5Q29waWVzP3RoaXMudmFsdWUuc2xpY2UoKTp0aGlzLnZhbHVlLHI9dFtuLlZSXSwoaT0ocz1uLnRGKT9zKGkscix0Lm9iamVjdCk6aSk9PT1yJiYhbi5vcHRzLnVwZGF0ZUV2ZW5JZlNhbWV8fG4uY04mJiFuLmNOKGkscix0Lm9iamVjdCl8fChuLm9wdHMucHJvbWlzZVRyYW5zZm9ybXMmJmkmJk8uaUYoaS50aGVuKT9pLnRoZW4oZnVuY3Rpb24oaSl7dC5zVihpLGUpfSk6dC5zVihpLGUpLG4udU8mJnRoaXMuclModCkpfX19LGFNOmZ1bmN0aW9uKHQsZSxpLHMpe3ZhciBuLHI7aWYoTy5pRihpKSl7dmFyIGg9MDtmb3Iocj1lLmxlbmd0aDtoPHI7aCsrKXt2YXIgbz1lW2hdLHU9by5ffHxvO3UuaXNNdWx0aT90aGlzLmFNKHQsdS5iaW5kaW5ncyxpLHMpOihvPXRoaXMuc01bdS5JRF0sb1t0XT1pLHM9cyYmIW8udU8sdGhpcy5wTVt1LklEXSYmKChuPXUuc01bdGhpcy5JRF0pW3RdfHwoblt0XT1pKSksIXMmJlwiRnVuY1wiIT09dGhpcy50eXBlfHxcInRGXCIhPT10fHx0aGlzLnVTKHUsdGhpcykpfXJldHVybiEwfXJldHVybiBHKFwiZXJGTlwiLDIpfSxzczpmdW5jdGlvbih0LGUpe3RoaXMudGZTPXQsZSYmdGhpcy5zVih0aGlzLnZhbHVlKX0sYUQ6ZnVuY3Rpb24odCxlKXt2YXIgaTsobnVsbCE9KGk9dGhpcy5zTVt0LklEXSkuZEw/aS5kTDppLmRMPXkoKSlbZS5JRF09MX0sc1BIOmZ1bmN0aW9uKCl7aWYoIXRoaXMucFZMKXtpZih0aGlzLnBWTD15KCksdGhpcy5wSU09eSgpLHRoaXMucENUPVtdLE8uaVModGhpcy52YWx1ZSkpe3RoaXMucENUPXRoaXMudmFsdWUuc3BsaXQoVik7dmFyIHQ9MDt0aGlzLnZhbHVlPXRoaXMudmFsdWUucmVwbGFjZShBLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbihpLHMpe3JldHVybiBlLnBJTVt0KytdPXMsZS5wVkxbc109c319KHRoaXMpKX10aGlzLkRNJiZcInRleHRDb250ZW50XCI9PT10aGlzLnByJiZCKHRoaXMub2JqZWN0LHRoaXMudHhOPXkoKSl9fSxhUEk6ZnVuY3Rpb24odCl7aWYoXCJFdmVudFwiIT09dGhpcy50eXBlKXJldHVybiB0aGlzLnJQSSgpLHRoaXMuUEk9c2V0SW50ZXJ2YWwoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGU9dC5mRFYoKTtyZXR1cm4gdC5zVihlLHQsITApfX0odGhpcyksdCl9LHJQSTpmdW5jdGlvbigpe3JldHVybiBjbGVhckludGVydmFsKHRoaXMuUEkpLHRoaXMuUEk9bnVsbH0sYVVWOmZ1bmN0aW9uKHQsZSl7dGhpcy5vYmplY3QuYWRkRXZlbnRMaXN0ZW5lcih0LGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihpKXtpLl9zYnx8KGk9dC50ZlMmJnQuZEksdC5zVih0Lm9iamVjdFtlXSxudWxsLCFpLCEwKSl9fSh0aGlzKSwhMSl9LGFFVjpmdW5jdGlvbigpe3RoaXMuZXZOP3RoaXMuckVWRSh0aGlzLmV2Tik6dGhpcy5kST8odGhpcy5hVVYoXCJpbnB1dFwiLFwidmFsdWVcIiksdGhpcy5hVVYoXCJjaGFuZ2VcIixcInZhbHVlXCIpKTp0aGlzLm1DfHxcIkRPTVJhZGlvXCIhPT10aGlzLnR5cGUmJlwiRE9NQ2hlY2tib3hcIiE9PXRoaXMudHlwZXx8dGhpcy5hVVYoXCJjaGFuZ2VcIixcImNoZWNrZWRcIil9LHJFVkU6ZnVuY3Rpb24odCl7dGhpcy5hdEVWLnB1c2godCksdGhpcy5ldkh8fCh0aGlzLmV2SD1VLmJpbmQodGhpcykpLHRoaXMub2JqZWN0W3RoaXMuZU0ubGlzdGVuXSh0LHRoaXMuZXZIKX0sdXJFVkU6ZnVuY3Rpb24odCl7dGhpcy5hdEVWLnNwbGljZSh0aGlzLmF0RVYuaW5kZXhPZih0KSwxKSx0aGlzLm9iamVjdFt0aGlzLmVNLnJlbW92ZV0odCx0aGlzLmV2SCl9LGVFOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZXZOO1wiZGlzcGF0Y2hFdmVudFwiPT09dGhpcy5lTS5lbWl0JiYodGhpcy5ldk98fCh0aGlzLmV2Tz1kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpLHRoaXMuZXZPLmluaXRFdmVudCh0aGlzLmV2TiwhMCwhMCkpLHRoaXMuZXZPLmJpbmRpbmdEYXRhPXQsZT10aGlzLmV2TyksdGhpcy5vYmplY3RbdGhpcy5lTS5lbWl0XShlLHQpfX07dmFyIFU9ZnVuY3Rpb24oKXt0aGlzLmlFfHx0aGlzLnNWKGFyZ3VtZW50c1t0aGlzLnByXSxudWxsLCEwKX0sWD1mdW5jdGlvbih0LGUpe3ZhciBpO2lmKGUpRSh0aGlzLGUpLHRoaXMuc0c9MTtlbHNlIGZvcihpIGluIHRoaXMuc0c9MCx0aGlzLnN1YnM9W10sdGhpcy5vUD10fHwodD17fSksdGhpcy5vcHRpb25zPXt9LGMpdGhpcy5vcHRpb25zW2ldPW51bGwhPXRbaV0/dFtpXTpjW2ldO3JldHVybiB0aGlzfTt0PXtzQzpmdW5jdGlvbigpe3JldHVybiBuZXcgWChudWxsLHRoaXMpfSxkTTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fPXQsT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcyx7dmFsdWU6e2dldDpmdW5jdGlvbigpe3JldHVybiB0LnZhbHVlfX0sb3JpZ2luYWw6e2dldDpmdW5jdGlvbigpe3JldHVybiB0Lm9iamVjdHN8fHQub2JqZWN0fX0sc3Vic2NyaWJlcnM6e2dldDpmdW5jdGlvbigpe3JldHVybiB0LnN1YnMuc2xpY2UoKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQub2JqZWN0fSl9fX0pfSxjcmVhdGVCUDpmdW5jdGlvbih0LGUsaSxzKXt2YXIgbjtyZXR1cm4gdGhpcy5vYmplY3Q9dCwobj1QLmdldCh0LHMsdGhpcy5zZSx0aGlzLm1DKSk/dGhpcy5wYXRjaENhY2hlZEJQKG4pOih0PW5ldyBSKHQsZSxpKSxQLnNldCh0LHMpLHQpfSxwYXRjaENhY2hlZEJQOmZ1bmN0aW9uKHQpe3ZhciBlO2lmKFwiT2JqZWN0UHJvcFwiIT09dC50eXBlfHx0aGlzLnByIGluIHRoaXMub2JqZWN0fHxJKHQsdGhpcy5vYmplY3QpLHRoaXMuc28pe3ZhciBpPXRoaXMub1A7Zm9yKG4gaW4gaSl7dmFyIHM9aVtuXTt0Lm9EW25dPXN9fXZhciBuPXQub0Q7Zm9yKGUgaW4gbilzPW5bZV0sdGhpcy5vcHRpb25zW2VdPU8uaUQodGhpcy5vUFtlXSk/dGhpcy5vUFtlXTpzO3JldHVybiB0fSxzUDpmdW5jdGlvbih0KXtpZihPLmlOKHQpJiYodD10LnRvU3RyaW5nKCkpLHRoaXMuc2U9dGhpcy5wcj10LCF0aGlzLm9wdGlvbnMuc2ltcGxlU2VsZWN0b3Ipe2lmKEQodCxcIjpcIikpe3ZhciBlPXQuc3BsaXQoXCI6XCIpO3RoaXMuZGU9ZS5zbGljZSgwLC0xKS5qb2luKFwiOlwiKSx0aGlzLnByPWVbZS5sZW5ndGgtMV19RCh0LFwiLlwiKSYmKGU9dGhpcy5wci5zcGxpdChcIi5cIiksdGhpcy5wcj1lWzBdLHRoaXMuUGg9ZS5zbGljZSgxKS5qb2luKFwiLlwiKSksRCh0aGlzLmRlLFwiZXZlbnRcIikmJihEKHQsXCIjXCIpPyhlPXRoaXMucHIuc3BsaXQoXCIjXCIpLHRoaXMuZXZOPWVbMF0sdGhpcy5wcj1lWzFdKToodGhpcy5ldk49dGhpcy5wcix0aGlzLnByPTApLGlzTmFOKHBhcnNlSW50KHRoaXMucHIpKSYmRyhcImVyRVZcIiwxKSl9cmV0dXJuIHRoaXN9LHNTOmZ1bmN0aW9uKHQsZSl7dGhpcy5zRz0xO3ZhciBpLHM9KGk9dCE9PXdpbmRvdyYmTy5pc0kodCkmJiF0Lm5vZGVUeXBlKT90WzBdOnQ7aWYocyl7aWYodGhpcy5ETT1PLkRNKHMpKXtpZihcImNoZWNrZWRcIj09PXRoaXMucHIpdmFyIG49cyYmTy5kUihzKSxyPSFuJiZzJiZPLmRDKHMpO2Vsc2VcInZhbHVlXCI9PT10aGlzLnByJiYodGhpcy5kST1PLmRJKHMpKTtpZihpJiYhRCh0aGlzLmRlLFwibXVsdGlcIikpaWYoMT09PXQubGVuZ3RoKXQ9dFswXTtlbHNle2lmKChufHxyKSYmIU8uZUFTKHQpKXJldHVybiBHKFwiZXJNWFwiLDMpO258fHI/KHRoaXMubUM9ITAsdD1bXS5zbGljZS5jYWxsKHQpKToodD10WzBdLEcoXCJlck9EXCIsMykpfX19ZWxzZSBpJiZPLmVDKHQpJiZGKFwiZW1wdHlMaXN0XCIpO3N3aXRjaCghMSl7Y2FzZSFlOnI9XCJGdW5jXCI7YnJlYWs7Y2FzZSF0aGlzLlBoOnI9XCJQaG9sZGVyXCI7YnJlYWs7Y2FzZSEoRCh0aGlzLmRlLFwiYXJyYXlcIikmJk8uaUEodFt0aGlzLnByXSkpOnI9XCJBcnJheVwiO2JyZWFrO2Nhc2UhRCh0aGlzLmRlLFwiZXZlbnRcIik6cj1cIkV2ZW50XCIsdGhpcy5lTT17bGlzdGVuOnRoaXMub1AubGlzdGVuTWV0aG9kLHJlbW92ZTp0aGlzLm9QLnJlbW92ZU1ldGhvZCxlbWl0OnRoaXMub1AuZW1pdE1ldGhvZH0sdFt0aGlzLmVNLmxpc3Rlbl18fCh0aGlzLmVNLmxpc3Rlbj1PLmROKHQpP1wiYWRkRXZlbnRMaXN0ZW5lclwiOlwib25cIiksdFt0aGlzLmVNLnJlbW92ZV18fCh0aGlzLmVNLnJlbW92ZT1PLmROKHQpP1wicmVtb3ZlRXZlbnRMaXN0ZW5lclwiOlwicmVtb3ZlTGlzdGVuZXJcIiksdFt0aGlzLmVNLmVtaXRdfHwodGhpcy5lTS5lbWl0PU8uZE4odCk/XCJkaXNwYXRjaEV2ZW50XCI6XCJlbWl0XCIpO2JyZWFrO2Nhc2UhRCh0aGlzLmRlLFwiZnVuY1wiKTpyPVwiUHJveHlcIjticmVhaztjYXNlIW46cj1cIkRPTVJhZGlvXCI7YnJlYWs7Y2FzZSFyOnI9XCJET01DaGVja2JveFwiO2JyZWFrO2Nhc2UhRCh0aGlzLmRlLFwiYXR0clwiKTpyPVwiRE9NQXR0clwiO2JyZWFrO2RlZmF1bHQ6cj1cIk9iamVjdFByb3BcIn1yZXR1cm4gRCh0aGlzLmRlLFwibXVsdGlcIik/KHQubGVuZ3RofHxGKFwiZW1wdHlMaXN0XCIpLHRoaXMuZE0obmV3IG50KHRoaXMsdCxyKSkpOnRoaXMuZE0odGhpcy5jcmVhdGVCUCh0LHIsdGhpcyxlKSksRCh0aGlzLl8udHlwZSxcIkV2ZW50XCIpfHxEKHRoaXMuXy50eXBlLFwiUHJveHlcIik/dGhpcy5vcHRpb25zLnVwZGF0ZU9uQmluZD0hMTpEKHRoaXMuXy50eXBlLFwiRnVuY1wiKSYmKHRoaXMub3B0aW9ucy51cGRhdGVPbkJpbmQ9ITApLHRoaXMuY0M/dGhpcy5jQyh0aGlzKTp0aGlzfSxhUDpmdW5jdGlvbih0KXt2YXIgZTt0LnNHPTIsdC5zdWJzLnB1c2godGhpcyk7dmFyIGk9dC5fLmFTKHRoaXMuXyx0Lm9wdGlvbnMsdC51Tyk7aWYodC51TylkZWxldGUgdC51TztlbHNlIGlmKHQub3B0aW9ucy51cGRhdGVPbkJpbmQmJiFpKWlmKHRoaXMuXy5pc011bHRpKXt2YXIgcz10aGlzLl8uYmluZGluZ3Msbj0wO2ZvcihlPXMubGVuZ3RoO248ZTtuKyspaT1zW25dLHQuXy51UyhpLHQuXyl9ZWxzZSB0Ll8udVModGhpcy5fLHQuXyl9fSxYLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQse29mOntnZXQ6ZnVuY3Rpb24oKXtpZighdGhpcy5zRylyZXR1cm4gV319LHNldDp7Z2V0OmZ1bmN0aW9uKCl7aWYodGhpcy5zRylyZXR1cm4gJH19LGNoYWluVG86e2dldDpmdW5jdGlvbigpe2lmKDI9PT10aGlzLnNHKXJldHVybiBZfX0sdHJhbnNmb3JtU2VsZjp7Z2V0OmZ1bmN0aW9uKCl7aWYoMT09PXRoaXMuc0cpcmV0dXJuIFF9fSx0cmFuc2Zvcm06e2dldDpmdW5jdGlvbigpe2lmKDI9PT10aGlzLnNHKXJldHVybiBxfX0sdHJhbnNmb3JtQWxsOntnZXQ6ZnVuY3Rpb24oKXtpZigyPT09dGhpcy5zRylyZXR1cm4gen19LGNvbmRpdGlvbjp7Z2V0OmZ1bmN0aW9uKCl7aWYoMj09PXRoaXMuc0cpcmV0dXJuIEp9fSxjb25kaXRpb25BbGw6e2dldDpmdW5jdGlvbigpe2lmKDI9PT10aGlzLnNHKXJldHVybiBLfX0sYm90aFdheXM6e2dldDpmdW5jdGlvbigpe2lmKDI9PT10aGlzLnNHKXJldHVybiBafX0sdW5CaW5kOntnZXQ6ZnVuY3Rpb24oKXtpZigyPT09dGhpcy5zRylyZXR1cm4gdHR9fSxwb2xsRXZlcnk6e2dldDpmdW5jdGlvbigpe2lmKHRoaXMuc0cpcmV0dXJuIGV0fX0sc3RvcFBvbGxpbmc6e2dldDpmdW5jdGlvbigpe2lmKHRoaXMuc0cpcmV0dXJuIGl0fX0sc2V0T3B0aW9uOntnZXQ6ZnVuY3Rpb24oKXtpZigyPT09dGhpcy5zRylyZXR1cm4gc3R9fSxkaXNhbGxvd0Zyb206e2dldDpmdW5jdGlvbigpe3ZhciB0O2lmKDI9PT10aGlzLnNHJiYodD10aGlzKSlyZXR1cm4gXyghMSxmdW5jdGlvbihlKXtyZXR1cm4gdC5fLmFEKHQuc3Vic1t0LnN1YnMubGVuZ3RoLTFdLl8sZS5fKSx0fSl9fSx1cGRhdGVPbjp7Z2V0OmZ1bmN0aW9uKCl7dmFyIHQ7aWYodGhpcy5zRyYmKHQ9dGhpcykpcmV0dXJuIF8oITEsZnVuY3Rpb24oZSl7cmV0dXJuIGUuXyE9PXQuXyYmKHQuXy5wTVtlLl8uSURdPWUuXyxlLl8uYVMobSh0Ll8sITApLGUub3B0aW9ucywhMSwhMCkpLHR9KX19LHJlbW92ZVVwZGF0ZXI6e2dldDpmdW5jdGlvbigpe3ZhciB0LGU7aWYodGhpcy5zRyYmKGU9dGhpcykmJih0PXRoaXMuXy5zVSkpcmV0dXJuIF8oITEsZnVuY3Rpb24oaSl7aS5fLnNNW3QuSURdJiYoZGVsZXRlIGUuXy5wTVtpLl8uSURdLGkuXy5yUyh0KSl9KX19LHRvOntnZXQ6ZnVuY3Rpb24oKXt2YXIgdDtpZigxPT09dGhpcy5zRyYmKHQ9dGhpcykpcmV0dXJuIF8oITAsZnVuY3Rpb24oZSl7cmV0dXJuIGUuXyE9PXQuXyYmZS5hUCh0KSx0fSl9fSxhbmQ6e2dldDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuc0MoKTtpZigyPT09dGhpcy5zRylyZXR1cm4gdDtpZigxPT09dGhpcy5zRyl7aWYoIXQuXy5pc011bHRpKXt2YXIgZT10Ll87dC5fPXQuXz1uZXcgbnQodCksdC5fLmFkZEJQKGUpfXJldHVybiBfKCExLGZ1bmN0aW9uKGUpe3JldHVybiB0Ll8uYWRkQlAoZS5fKSx0fSl9fX0sb25jZTp7Z2V0OmZ1bmN0aW9uKCl7aWYoMT09PXRoaXMuc0cpe3ZhciB0PXRoaXMuc0MoKTtyZXR1cm4gdC51Tz0hMCx0fX19LHVwZGF0ZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2V0fX0sdHdvV2F5OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5ib3RoV2F5c319LHBpcGU6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNoYWluVG99fX0pO3ZhciBXPWZ1bmN0aW9uKHQpe3JldHVybiBPLmlPKHQpfHxPLmlGKHQpfHx3KHQpLE8uaUJJKHQpJiYodD10Lm9iamVjdCksdGhpcy5zRz0xLHRoaXMuc1ModCl9LFk9ZnVuY3Rpb24odCxlLGkpe3JldHVybiBIKHRoaXMuc3Vic1t0aGlzLnN1YnMubGVuZ3RoLTFdKS50byh0LGUsaSl9LCQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuXy5zVih0KSx0aGlzfSxRPWZ1bmN0aW9uKHQpe3JldHVybiBPLmlGKHQpP3RoaXMuXy5zcyh0LHRoaXMub3B0aW9ucy51cGRhdGVPbkJpbmQpOkcoXCJlckZOXCIsMSksdGhpc30scT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fLmFNKFwidEZcIix0aGlzLnN1YnMuc2xpY2UoLTEpLHQsdGhpcy5vcHRpb25zLnVwZGF0ZU9uQmluZCksdGhpc30sej1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fLmFNKFwidEZcIix0aGlzLnN1YnMsdCx0aGlzLm9wdGlvbnMudXBkYXRlT25CaW5kKSx0aGlzfSxKPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl8uYU0oXCJjTlwiLHRoaXMuc3Vicy5zbGljZSgtMSksdCksdGhpc30sSz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fLmFNKFwiY05cIix0aGlzLnN1YnMsdCksdGhpc30sWj1mdW5jdGlvbih0KXt2YXIgZSxpPXRoaXMuc3Vic1t0aGlzLnN1YnMubGVuZ3RoLTFdLHM9aS5fLG49dGhpcy5fLmlzTXVsdGk/dGhpcy5fLmJpbmRpbmdzOlt0aGlzLl9dO2ZvcihzLmFTKHRoaXMuXyxpLm9wdGlvbnMpLGk9MCxlPW4ubGVuZ3RoO2k8ZTtpKyspe3ZhciByPW5baV0saD1yLnNNW3MuSURdLnRGO3I9ci5zTVtzLklEXS5jTiwoaHx8dCkmJihoPU8uaUYodCk/dDpoKSYmITEhPT10JiYocy5zTVt0aGlzLl8uSURdLnRGPWgpLHImJihzLnNNW3RoaXMuXy5JRF0uY049cil9cmV0dXJuIHRoaXN9LHR0PWZ1bmN0aW9uKHQpe3ZhciBlLGk9dGhpcy5zdWJzLHM9MDtmb3IoZT1pLmxlbmd0aDtzPGU7cysrKXt2YXIgbj1pW3NdO3RoaXMuXy5yUyhuLl8sdCl9cmV0dXJuIHRoaXN9LGV0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl8uYVBJKHQpLHRoaXN9LGl0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXy5yUEkoKSx0aGlzfSxzdD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLl8uc01bdGhpcy5zdWJzW3RoaXMuc3Vicy5sZW5ndGgtMV0uXy5JRF0ub3B0c1t0XT1lLHRoaXN9LG50PWZ1bmN0aW9uKHQsZSxpKXt2YXIgcyxuO2lmKHQuc2U9dC5zZS5zbGljZSg2KSxFKHRoaXMsdGhpcy5Jbj10KSx0aGlzLmlzTXVsdGk9ITAsdGhpcy5iaW5kaW5ncz1zPVtdLGUpZm9yKHQ9MCxuPWUubGVuZ3RoO3Q8bjt0Kyspe3ZhciByPWVbdF07dGhpcy5hZGRCUChyLGkpfXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLHt0eXBlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcy5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQudHlwZX0pfX0sdmFsdWU6e2dldDpmdW5jdGlvbigpe3JldHVybiBzLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC52YWx1ZX0pfX19KX0scnQ9bnQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodCk7cmV0dXJuIE9iamVjdC5rZXlzKFIucHJvdG90eXBlKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiBydFt0XT1mdW5jdGlvbihlLGkscyxuKXt2YXIgcixoPXRoaXMuYmluZGluZ3Msbz0wO2ZvcihyPWgubGVuZ3RoO288cjtvKyspe3ZhciB1PWhbb107XCJ1U1wiPT09dCYmKGk9dSksdVt0XShlLGkscyxuKX19fSkscnQuYWRkQlA9ZnVuY3Rpb24odCxlKXt0aGlzLmJpbmRpbmdzLnB1c2goZT90aGlzLmNyZWF0ZUJQKHQsZSx0aGlzLkluKTp0KX0sZS5leHBvcnRzPUgsZS5leHBvcnRzfX0sdGhpcyksXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUudW1kKWRlZmluZShmdW5jdGlvbigpe3JldHVybiB0KDApfSk7ZWxzZXtpZihcIm9iamVjdFwiIT10eXBlb2YgbW9kdWxlfHwhbW9kdWxlLmV4cG9ydHMpcmV0dXJuIHRoaXMuc2ltcGx5YmluZD10KDApO21vZHVsZS5leHBvcnRzPXQoMCl9fSkuY2FsbCh0aGlzLG51bGwpOyIsInZhciBSRUdFWCA9IHtcbiAgYW55OiAvLi8sXG4gIHdoaXRlU3BhY2U6IC9cXHMrLyxcbiAgbnVtZXJpYzogL15cXGQkLyxcbiAgbGV0dGVyOiAvXlthLXpBLVpdJC8sXG4gIC8vIGFscGhhbnVtZXJpYzogL1tcXGRhLXpBLVpdL1xuICB3aWRlbnVtZXJpYzogL15bMC05XFwhI1xcJFxcJVxcKlxcK1xcL1xcPVxcP1xcXlxce1xcfFxcfVxcKFxcKVxcflxcLVxcLl0kLyxcbiAgYWxwaGFudW1lcmljOiAvXlswLTlBLVphLXpcXCEjXFwkXFwlXFwmXFwnXFwqXFwrXFwvXFw9XFw/XFxeXFxfXFxgXFx7XFx8XFx9XFwoXFwpXFx+XFwtXFwgXSQvLFxuICBlbWFpbDogL15bXFx3XFwtXFwuXStAW1xcd1xcLVxcLl0rXFwuW0EtWmEtel17MiwxMH0kL1xufTtleHBvcnQgZGVmYXVsdCBSRUdFWDsiLCJpbXBvcnQnQGRhbmllbGthbGVuL2lzJztpbXBvcnQgSVMgZnJvbScuL2NoZWNrcy5qcyc7aW1wb3J0IERPTSBmcm9tJ3F1aWNrZG9tJztpbXBvcnQnQGRhbmllbGthbGVuL3NpbXBseWJpbmQnO2ltcG9ydCBSRUdFWCBmcm9tJy4vY29uc3RhbnRzL3JlZ2V4LmpzJzt2YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xudmFyIGluY2x1ZGVzID0gZnVuY3Rpb24gKHRhcmdldCwgaXRlbSkge1xuICByZXR1cm4gdGFyZ2V0ICYmIHRhcmdldC5pbmRleE9mKGl0ZW0pICE9PSAtMTtcbn07XG52YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0cmluZywgY291bnQpIHtcbiAgdmFyIGk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGosIHJlZiwgcmVzdWx0czE7XG4gICAgcmVzdWx0czEgPSBbXTtcblxuICAgIGZvciAoaSA9IGogPSAxLCByZWYgPSBjb3VudDsgMSA8PSByZWYgPyBqIDw9IHJlZiA6IGogPj0gcmVmOyBpID0gMSA8PSByZWYgPyArK2ogOiAtLWopIHtcbiAgICAgIHJlc3VsdHMxLnB1c2goc3RyaW5nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0czE7XG4gIH0oKS5qb2luKCcnKTtcbn07XG52YXIgcmVtb3ZlSXRlbSA9IGZ1bmN0aW9uICh0YXJnZXQsIGl0ZW0pIHtcbiAgdmFyIGl0ZW1JbmRleDtcbiAgaXRlbUluZGV4ID0gdGFyZ2V0LmluZGV4T2YoaXRlbSk7XG5cbiAgaWYgKGl0ZW1JbmRleCAhPT0gLTEpIHtcbiAgICByZXR1cm4gdGFyZ2V0LnNwbGljZShpdGVtSW5kZXgsIDEpO1xuICB9XG59O1xudmFyIGluc2VydEFmdGVyID0gZnVuY3Rpb24gKHRhcmdldCwgaXRlbSwgbmV3SXRlbSkge1xuICB2YXIgaXRlbUluZGV4O1xuICBpdGVtSW5kZXggPSB0YXJnZXQuaW5kZXhPZihpdGVtKTtcblxuICBpZiAoaXRlbUluZGV4ICE9PSAtMSkge1xuICAgIHJldHVybiB0YXJnZXQuc3BsaWNlKGl0ZW1JbmRleCwgMCwgbmV3SXRlbSk7XG4gIH1cbn07XG52YXIgZmluZCA9IGZ1bmN0aW9uICh0YXJnZXQsIGZuKSB7XG4gIHZhciByZXN1bHRzO1xuICByZXN1bHRzID0gdGFyZ2V0LmZpbHRlcihmbik7XG4gIHJldHVybiByZXN1bHRzWzBdO1xufTtcbnZhciBkaWZmID0gZnVuY3Rpb24gKHNvdXJjZSwgY29tcGFyZWUpIHtcbiAgdmFyIGNvbXBhcmVlVmFsLCBpLCBtYXhMZW4sIHJlc3VsdCwgc291cmNlVmFsO1xuICByZXN1bHQgPSBbXTtcbiAgbWF4TGVuID0gTWF0aC5tYXgoc291cmNlLmxlbmd0aCwgY29tcGFyZWUubGVuZ3RoKTtcbiAgaSA9IC0xO1xuXG4gIHdoaWxlICgrK2kgPCBtYXhMZW4pIHtcbiAgICBzb3VyY2VWYWwgPSBzb3VyY2VbaV07XG4gICAgY29tcGFyZWVWYWwgPSBjb21wYXJlZVtpXTtcblxuICAgIGlmIChzb3VyY2VWYWwgIT09IGNvbXBhcmVlVmFsKSB7XG4gICAgICBpZiAoSVMuZGVmaW5lZChzb3VyY2VWYWwpICYmICFpbmNsdWRlcyhjb21wYXJlZSwgc291cmNlVmFsKSkge1xuICAgICAgICByZXN1bHQucHVzaChzb3VyY2VWYWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAoSVMuZGVmaW5lZChjb21wYXJlZVZhbCkgJiYgIWluY2x1ZGVzKHNvdXJjZSwgY29tcGFyZWVWYWwpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGNvbXBhcmVlVmFsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBoZXhUb1JHQkEgPSBmdW5jdGlvbiAoaGV4LCBhbHBoYSkge1xuICB2YXIgQiwgRywgUjtcblxuICBpZiAoaGV4WzBdID09PSAnIycpIHtcbiAgICBoZXggPSBoZXguc2xpY2UoMSk7XG4gIH1cblxuICBSID0gcGFyc2VJbnQoaGV4LnNsaWNlKDAsIDIpLCAxNik7XG4gIEcgPSBwYXJzZUludChoZXguc2xpY2UoMiwgNCksIDE2KTtcbiAgQiA9IHBhcnNlSW50KGhleC5zbGljZSg0LCA2KSwgMTYpO1xuICByZXR1cm4gYHJnYmEoJHtSfSwgJHtHfSwgJHtCfSwgJHthbHBoYX0pYDtcbn07XG52YXIgZGVmYXVsdENvbG9yID0gZnVuY3Rpb24gKGNvbG9yLCBkZWZhdWx0Q29sb3IpIHtcbiAgaWYgKGNvbG9yID09PSAndHJhbnNwYXJlbnQnIHx8ICFjb2xvcikge1xuICAgIHJldHVybiBkZWZhdWx0Q29sb3I7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59O1xudmFyIGNhbGNQYWRkaW5nID0gZnVuY3Rpb24gKGRlc2lyZWRIZWlnaHQsIGZvbnRTaXplKSB7XG4gIHJldHVybiBNYXRoLmNlaWwoKGRlc2lyZWRIZWlnaHQgLSBmb250U2l6ZSAqIDEuMjMxKSAvIDIpO1xufTtcbnZhciB1bmxvY2tTY3JvbGwgPSBmdW5jdGlvbiAoZXhjbHVkZWRFbCkge1xuICB3aW5kb3cuX2lzTG9ja2VkID0gZmFsc2U7XG4gIHJldHVybiBET00od2luZG93KS5vZmYoJ3doZWVsLmxvY2snKTtcbn07XG52YXIgbG9ja1Njcm9sbCA9IGZ1bmN0aW9uIChleGNsdWRlZEVsKSB7XG4gIGlmICghd2luZG93Ll9pc0xvY2tlZCkge1xuICAgIHdpbmRvdy5faXNMb2NrZWQgPSB0cnVlO1xuICAgIHJldHVybiBET00od2luZG93KS5vbignd2hlZWwubG9jaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gZXhjbHVkZWRFbC5yYXcgfHwgRE9NKGV2ZW50LnRhcmdldCkucGFyZW50TWF0Y2hpbmcoZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICByZXR1cm4gcGFyZW50ID09PSBleGNsdWRlZEVsO1xuICAgICAgfSkpIHtcbiAgICAgICAgaWYgKGV2ZW50LndoZWVsRGVsdGEgPiAwICYmIGV4Y2x1ZGVkRWwucmF3LnNjcm9sbFRvcCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50LndoZWVsRGVsdGEgPCAwICYmIGV4Y2x1ZGVkRWwucmF3LnNjcm9sbEhlaWdodCAtIGV4Y2x1ZGVkRWwucmF3LnNjcm9sbFRvcCA9PT0gZXhjbHVkZWRFbC5yYXcuY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xudmFyIGZ1enp5TWF0Y2ggPSBmdW5jdGlvbiAobmVlZGxlLCBoYXlzdGFjaywgY2FzZVNlbnNpdGl2ZSkge1xuICB2YXIgaEksIGhMZW5ndGgsIG1hdGNoZWRDb3VudCwgbkksIG5MZW5ndGgsIG5lZWRsZUNoYXI7XG4gIG5MZW5ndGggPSBuZWVkbGUubGVuZ3RoO1xuICBoTGVuZ3RoID0gaGF5c3RhY2subGVuZ3RoO1xuXG4gIGlmICghY2FzZVNlbnNpdGl2ZSkge1xuICAgIG5lZWRsZSA9IG5lZWRsZS50b1VwcGVyQ2FzZSgpO1xuICAgIGhheXN0YWNrID0gaGF5c3RhY2sudG9VcHBlckNhc2UoKTtcbiAgfVxuXG4gIGlmIChuTGVuZ3RoID4gaExlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChuTGVuZ3RoID09PSBoTGVuZ3RoKSB7XG4gICAgcmV0dXJuIG5lZWRsZSA9PT0gaGF5c3RhY2s7XG4gIH1cblxuICBuSSA9IGhJID0gbWF0Y2hlZENvdW50ID0gMDtcblxuICB3aGlsZSAobkkgPCBuTGVuZ3RoKSB7XG4gICAgbmVlZGxlQ2hhciA9IG5lZWRsZVtuSSsrXTtcblxuICAgIHdoaWxlIChoSSA8IGhMZW5ndGgpIHtcbiAgICAgIGlmIChoYXlzdGFja1toSSsrXSA9PT0gbmVlZGxlQ2hhcikge1xuICAgICAgICBtYXRjaGVkQ291bnQrKztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1hdGNoZWRDb3VudCA9PT0gbkxlbmd0aDtcbn07XG52YXIgc3RhcnRzV2l0aCA9IGZ1bmN0aW9uIChuZWVkbGUsIGhheXN0YWNrLCBjYXNlU2Vuc2l0aXZlKSB7XG4gIHZhciBpO1xuXG4gIGlmICghY2FzZVNlbnNpdGl2ZSkge1xuICAgIG5lZWRsZSA9IG5lZWRsZS50b1VwcGVyQ2FzZSgpO1xuICAgIGhheXN0YWNrID0gaGF5c3RhY2sudG9VcHBlckNhc2UoKTtcbiAgfVxuXG4gIGlmIChuZWVkbGUubGVuZ3RoID4gaGF5c3RhY2subGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKG5lZWRsZS5sZW5ndGggPT09IGhheXN0YWNrLmxlbmd0aCkge1xuICAgIHJldHVybiBuZWVkbGUgPT09IGhheXN0YWNrO1xuICB9XG5cbiAgaSA9IC0xO1xuXG4gIHdoaWxlIChuZWVkbGVbKytpXSkge1xuICAgIGlmIChuZWVkbGVbaV0gIT09IGhheXN0YWNrW2ldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIGdldEluZGV4T2ZGaXJzdERpZmYgPSBmdW5jdGlvbiAoc291cmNlU3RyaW5nLCBjb21wYXJlU3RyaW5nKSB7XG4gIHZhciBjdXJyZW50UG9zLCBtYXhMZW5ndGg7XG4gIGN1cnJlbnRQb3MgPSAwO1xuICBtYXhMZW5ndGggPSBNYXRoLm1heChzb3VyY2VTdHJpbmcubGVuZ3RoLCBjb21wYXJlU3RyaW5nLmxlbmd0aCk7XG5cbiAgd2hpbGUgKGN1cnJlbnRQb3MgPCBtYXhMZW5ndGgpIHtcbiAgICBpZiAoc291cmNlU3RyaW5nW2N1cnJlbnRQb3NdICE9PSBjb21wYXJlU3RyaW5nW2N1cnJlbnRQb3NdKSB7XG4gICAgICByZXR1cm4gY3VycmVudFBvcztcbiAgICB9XG5cbiAgICBjdXJyZW50UG9zKys7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG52YXIgcGFyc2VDc3NTaG9ydGhhbmRWYWx1ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCwgdmFsdWVzO1xuICB2YWx1ZXMgPSBzdHJpbmcuc3BsaXQoUkVHRVgud2hpdGVTcGFjZSkubWFwKHBhcnNlRmxvYXQpO1xuICByZXN1bHQgPSB7fTtcblxuICBzd2l0Y2ggKHZhbHVlcy5sZW5ndGgpIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXN1bHQudG9wID0gcmVzdWx0LnJpZ2h0ID0gcmVzdWx0LmJvdHRvbSA9IHJlc3VsdC5sZWZ0ID0gdmFsdWVzWzBdO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDI6XG4gICAgICByZXN1bHQudG9wID0gcmVzdWx0LmJvdHRvbSA9IHZhbHVlc1swXTtcbiAgICAgIHJlc3VsdC5yaWdodCA9IHJlc3VsdC5sZWZ0ID0gdmFsdWVzWzFdO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDM6XG4gICAgICByZXN1bHQudG9wID0gdmFsdWVzWzBdO1xuICAgICAgcmVzdWx0LnJpZ2h0ID0gcmVzdWx0LmxlZnQgPSB2YWx1ZXNbMV07XG4gICAgICByZXN1bHQuYm90dG9tID0gdmFsdWVzWzJdO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDQ6XG4gICAgICByZXN1bHQudG9wID0gdmFsdWVzWzBdO1xuICAgICAgcmVzdWx0LnJpZ2h0ID0gdmFsdWVzWzFdO1xuICAgICAgcmVzdWx0LmJvdHRvbSA9IHZhbHVlc1syXTtcbiAgICAgIHJlc3VsdC5sZWZ0ID0gdmFsdWVzWzNdO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgc2hvcnRoYW5kU2lkZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBzaWRlKSB7XG4gIHZhciB2YWx1ZXM7XG5cbiAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgcmV0dXJuIHZhbHVlO1xuXG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHZhbHVlcyA9IHBhcnNlQ3NzU2hvcnRoYW5kVmFsdWUodmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlc1tzaWRlXTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gMDtcbiAgfVxufTtcbnZhciB1cGRhdGVTaG9ydGhhbmRWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgc2lkZSwgbmV3VmFsdWUpIHtcbiAgdmFyIHZhbHVlcztcbiAgdmFsdWVzID0gcGFyc2VDc3NTaG9ydGhhbmRWYWx1ZSgnJyArICh2YWx1ZSB8fCAwKSk7XG5cbiAgc3dpdGNoIChzaWRlKSB7XG4gICAgY2FzZSAndG9wJzpcbiAgICAgIHZhbHVlcy50b3AgKz0gbmV3VmFsdWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIHZhbHVlcy5yaWdodCArPSBuZXdWYWx1ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnYm90dG9tJzpcbiAgICAgIHZhbHVlcy5ib3R0b20gKz0gbmV3VmFsdWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgdmFsdWVzLmxlZnQgKz0gbmV3VmFsdWU7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBPYmplY3Qua2V5cyh2YWx1ZXMpLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlc1tzaWRlXSArPSBuZXdWYWx1ZTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGAke3ZhbHVlcy50b3B9cHggJHt2YWx1ZXMucmlnaHR9cHggJHt2YWx1ZXMuYm90dG9tfXB4ICR7dmFsdWVzLmxlZnR9cHhgO1xufTtcbnZhciBpbmhlcml0UHJvdG8gPSBmdW5jdGlvbiAoY2hpbGQsIHBhcmVudCwga2V5cykge1xuICB2YXIgaiwga2V5LCBsZW4sIHJlZjtcbiAgcmVmID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocGFyZW50LnByb3RvdHlwZSk7XG5cbiAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAga2V5ID0gcmVmW2pdO1xuXG4gICAgaWYgKGtleXMgJiYgIWtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKCFjaGlsZC5wcm90b3R5cGVba2V5XSkge1xuICAgICAgY2hpbGQucHJvdG90eXBlW2tleV0gPSBwYXJlbnQucHJvdG90eXBlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNoaWxkO1xufTtleHBvcnR7bm9vcCxpbmNsdWRlcyxyZXBlYXQscmVtb3ZlSXRlbSxpbnNlcnRBZnRlcixmaW5kLGRpZmYsaGV4VG9SR0JBLGRlZmF1bHRDb2xvcixjYWxjUGFkZGluZyx1bmxvY2tTY3JvbGwsbG9ja1Njcm9sbCxmdXp6eU1hdGNoLHN0YXJ0c1dpdGgsZ2V0SW5kZXhPZkZpcnN0RGlmZixwYXJzZUNzc1Nob3J0aGFuZFZhbHVlLHNob3J0aGFuZFNpZGVWYWx1ZSx1cGRhdGVTaG9ydGhhbmRWYWx1ZSxpbmhlcml0UHJvdG99OyIsInZhciBSRVFVSVJFRF9GSUVMRF9NRVRIT0RTID0gWydfZ2V0VmFsdWUnLCAnX3NldFZhbHVlJywgJ192YWxpZGF0ZSddO2V4cG9ydCBkZWZhdWx0IFJFUVVJUkVEX0ZJRUxEX01FVEhPRFM7IiwiIShmdW5jdGlvbih3aW4pIHtcblxuLyoqXG4gKiBGYXN0RG9tXG4gKlxuICogRWxpbWluYXRlcyBsYXlvdXQgdGhyYXNoaW5nXG4gKiBieSBiYXRjaGluZyBET00gcmVhZC93cml0ZVxuICogaW50ZXJhY3Rpb25zLlxuICpcbiAqIEBhdXRob3IgV2lsc29uIFBhZ2UgPHdpbHNvbnBhZ2VAbWUuY29tPlxuICogQGF1dGhvciBLb3JuZWwgTGVzaW5za2kgPGtvcm5lbC5sZXNpbnNraUBmdC5jb20+XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIE1pbmkgbG9nZ2VyXG4gKlxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbnZhciBkZWJ1ZyA9IDAgPyBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUsICdbZmFzdGRvbV0nKSA6IGZ1bmN0aW9uKCkge307XG5cbi8qKlxuICogTm9ybWFsaXplZCByQUZcbiAqXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKi9cbnZhciByYWYgPSB3aW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gIHx8IHdpbi53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgfHwgd2luLm1velJlcXVlc3RBbmltYXRpb25GcmFtZVxuICB8fCB3aW4ubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgfHwgZnVuY3Rpb24oY2IpIHsgcmV0dXJuIHNldFRpbWVvdXQoY2IsIDE2KTsgfTtcblxuLyoqXG4gKiBJbml0aWFsaXplIGEgYEZhc3REb21gLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBGYXN0RG9tKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHNlbGYucmVhZHMgPSBbXTtcbiAgc2VsZi53cml0ZXMgPSBbXTtcbiAgc2VsZi5yYWYgPSByYWYuYmluZCh3aW4pOyAvLyB0ZXN0IGhvb2tcbiAgZGVidWcoJ2luaXRpYWxpemVkJywgc2VsZik7XG59XG5cbkZhc3REb20ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRmFzdERvbSxcblxuICAvKipcbiAgICogQWRkcyBhIGpvYiB0byB0aGUgcmVhZCBiYXRjaCBhbmRcbiAgICogc2NoZWR1bGVzIGEgbmV3IGZyYW1lIGlmIG5lZWQgYmUuXG4gICAqXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmblxuICAgKiBAcHVibGljXG4gICAqL1xuICBtZWFzdXJlOiBmdW5jdGlvbihmbiwgY3R4KSB7XG4gICAgZGVidWcoJ21lYXN1cmUnKTtcbiAgICB2YXIgdGFzayA9ICFjdHggPyBmbiA6IGZuLmJpbmQoY3R4KTtcbiAgICB0aGlzLnJlYWRzLnB1c2godGFzayk7XG4gICAgc2NoZWR1bGVGbHVzaCh0aGlzKTtcbiAgICByZXR1cm4gdGFzaztcbiAgfSxcblxuICAvKipcbiAgICogQWRkcyBhIGpvYiB0byB0aGVcbiAgICogd3JpdGUgYmF0Y2ggYW5kIHNjaGVkdWxlc1xuICAgKiBhIG5ldyBmcmFtZSBpZiBuZWVkIGJlLlxuICAgKlxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm5cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgbXV0YXRlOiBmdW5jdGlvbihmbiwgY3R4KSB7XG4gICAgZGVidWcoJ211dGF0ZScpO1xuICAgIHZhciB0YXNrID0gIWN0eCA/IGZuIDogZm4uYmluZChjdHgpO1xuICAgIHRoaXMud3JpdGVzLnB1c2godGFzayk7XG4gICAgc2NoZWR1bGVGbHVzaCh0aGlzKTtcbiAgICByZXR1cm4gdGFzaztcbiAgfSxcblxuICAvKipcbiAgICogQ2xlYXJzIGEgc2NoZWR1bGVkICdyZWFkJyBvciAnd3JpdGUnIHRhc2suXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0YXNrXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHN1Y2Nlc3NcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY2xlYXI6IGZ1bmN0aW9uKHRhc2spIHtcbiAgICBkZWJ1ZygnY2xlYXInLCB0YXNrKTtcbiAgICByZXR1cm4gcmVtb3ZlKHRoaXMucmVhZHMsIHRhc2spIHx8IHJlbW92ZSh0aGlzLndyaXRlcywgdGFzayk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEV4dGVuZCB0aGlzIEZhc3REb20gd2l0aCBzb21lXG4gICAqIGN1c3RvbSBmdW5jdGlvbmFsaXR5LlxuICAgKlxuICAgKiBCZWNhdXNlIGZhc3Rkb20gbXVzdCAqYWx3YXlzKiBiZSBhXG4gICAqIHNpbmdsZXRvbiwgd2UncmUgYWN0dWFsbHkgZXh0ZW5kaW5nXG4gICAqIHRoZSBmYXN0ZG9tIGluc3RhbmNlLiBUaGlzIG1lYW5zIHRhc2tzXG4gICAqIHNjaGVkdWxlZCBieSBhbiBleHRlbnNpb24gc3RpbGwgZW50ZXJcbiAgICogZmFzdGRvbSdzIGdsb2JhbCB0YXNrIHF1ZXVlLlxuICAgKlxuICAgKiBUaGUgJ3N1cGVyJyBpbnN0YW5jZSBjYW4gYmUgYWNjZXNzZWRcbiAgICogZnJvbSBgdGhpcy5mYXN0ZG9tYC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogdmFyIG15RmFzdGRvbSA9IGZhc3Rkb20uZXh0ZW5kKHtcbiAgICogICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICogICAgIC8vIHJ1bnMgb24gY3JlYXRpb25cbiAgICogICB9LFxuICAgKlxuICAgKiAgIC8vIG92ZXJyaWRlIGEgbWV0aG9kXG4gICAqICAgbWVhc3VyZTogZnVuY3Rpb24oZm4pIHtcbiAgICogICAgIC8vIGRvIGV4dHJhIHN0dWZmIC4uLlxuICAgKlxuICAgKiAgICAgLy8gdGhlbiBjYWxsIHRoZSBvcmlnaW5hbFxuICAgKiAgICAgcmV0dXJuIHRoaXMuZmFzdGRvbS5tZWFzdXJlKGZuKTtcbiAgICogICB9LFxuICAgKlxuICAgKiAgIC4uLlxuICAgKiB9KTtcbiAgICpcbiAgICogQHBhcmFtICB7T2JqZWN0fSBwcm9wcyAgcHJvcGVydGllcyB0byBtaXhpblxuICAgKiBAcmV0dXJuIHtGYXN0RG9tfVxuICAgKi9cbiAgZXh0ZW5kOiBmdW5jdGlvbihwcm9wcykge1xuICAgIGRlYnVnKCdleHRlbmQnLCBwcm9wcyk7XG4gICAgaWYgKHR5cGVvZiBwcm9wcyAhPSAnb2JqZWN0JykgdGhyb3cgbmV3IEVycm9yKCdleHBlY3RlZCBvYmplY3QnKTtcblxuICAgIHZhciBjaGlsZCA9IE9iamVjdC5jcmVhdGUodGhpcyk7XG4gICAgbWl4aW4oY2hpbGQsIHByb3BzKTtcbiAgICBjaGlsZC5mYXN0ZG9tID0gdGhpcztcblxuICAgIC8vIHJ1biBvcHRpb25hbCBjcmVhdGlvbiBob29rXG4gICAgaWYgKGNoaWxkLmluaXRpYWxpemUpIGNoaWxkLmluaXRpYWxpemUoKTtcblxuICAgIHJldHVybiBjaGlsZDtcbiAgfSxcblxuICAvLyBvdmVycmlkZSB0aGlzIHdpdGggYSBmdW5jdGlvblxuICAvLyB0byBwcmV2ZW50IEVycm9ycyBpbiBjb25zb2xlXG4gIC8vIHdoZW4gdGFza3MgdGhyb3dcbiAgY2F0Y2g6IG51bGxcbn07XG5cbi8qKlxuICogU2NoZWR1bGVzIGEgbmV3IHJlYWQvd3JpdGVcbiAqIGJhdGNoIGlmIG9uZSBpc24ndCBwZW5kaW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNjaGVkdWxlRmx1c2goZmFzdGRvbSkge1xuICBpZiAoIWZhc3Rkb20uc2NoZWR1bGVkKSB7XG4gICAgZmFzdGRvbS5zY2hlZHVsZWQgPSB0cnVlO1xuICAgIGZhc3Rkb20ucmFmKGZsdXNoLmJpbmQobnVsbCwgZmFzdGRvbSkpO1xuICAgIGRlYnVnKCdmbHVzaCBzY2hlZHVsZWQnKTtcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnMgcXVldWVkIGByZWFkYCBhbmQgYHdyaXRlYCB0YXNrcy5cbiAqXG4gKiBFcnJvcnMgYXJlIGNhdWdodCBhbmQgdGhyb3duIGJ5IGRlZmF1bHQuXG4gKiBJZiBhIGAuY2F0Y2hgIGZ1bmN0aW9uIGhhcyBiZWVuIGRlZmluZWRcbiAqIGl0IGlzIGNhbGxlZCBpbnN0ZWFkLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGZsdXNoKGZhc3Rkb20pIHtcbiAgZGVidWcoJ2ZsdXNoJyk7XG5cbiAgdmFyIHdyaXRlcyA9IGZhc3Rkb20ud3JpdGVzO1xuICB2YXIgcmVhZHMgPSBmYXN0ZG9tLnJlYWRzO1xuICB2YXIgZXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBkZWJ1ZygnZmx1c2hpbmcgcmVhZHMnLCByZWFkcy5sZW5ndGgpO1xuICAgIHJ1blRhc2tzKHJlYWRzKTtcbiAgICBkZWJ1ZygnZmx1c2hpbmcgd3JpdGVzJywgd3JpdGVzLmxlbmd0aCk7XG4gICAgcnVuVGFza3Mod3JpdGVzKTtcbiAgfSBjYXRjaCAoZSkgeyBlcnJvciA9IGU7IH1cblxuICBmYXN0ZG9tLnNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gIC8vIElmIHRoZSBiYXRjaCBlcnJvcmVkIHdlIG1heSBzdGlsbCBoYXZlIHRhc2tzIHF1ZXVlZFxuICBpZiAocmVhZHMubGVuZ3RoIHx8IHdyaXRlcy5sZW5ndGgpIHNjaGVkdWxlRmx1c2goZmFzdGRvbSk7XG5cbiAgaWYgKGVycm9yKSB7XG4gICAgZGVidWcoJ3Rhc2sgZXJyb3JlZCcsIGVycm9yLm1lc3NhZ2UpO1xuICAgIGlmIChmYXN0ZG9tLmNhdGNoKSBmYXN0ZG9tLmNhdGNoKGVycm9yKTtcbiAgICBlbHNlIHRocm93IGVycm9yO1xuICB9XG59XG5cbi8qKlxuICogV2UgcnVuIHRoaXMgaW5zaWRlIGEgdHJ5IGNhdGNoXG4gKiBzbyB0aGF0IGlmIGFueSBqb2JzIGVycm9yLCB3ZVxuICogYXJlIGFibGUgdG8gcmVjb3ZlciBhbmQgY29udGludWVcbiAqIHRvIGZsdXNoIHRoZSBiYXRjaCB1bnRpbCBpdCdzIGVtcHR5LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJ1blRhc2tzKHRhc2tzKSB7XG4gIGRlYnVnKCdydW4gdGFza3MnKTtcbiAgdmFyIHRhc2s7IHdoaWxlICh0YXNrID0gdGFza3Muc2hpZnQoKSkgdGFzaygpO1xufVxuXG4vKipcbiAqIFJlbW92ZSBhbiBpdGVtIGZyb20gYW4gQXJyYXkuXG4gKlxuICogQHBhcmFtICB7QXJyYXl9IGFycmF5XG4gKiBAcGFyYW0gIHsqfSBpdGVtXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiByZW1vdmUoYXJyYXksIGl0ZW0pIHtcbiAgdmFyIGluZGV4ID0gYXJyYXkuaW5kZXhPZihpdGVtKTtcbiAgcmV0dXJuICEhfmluZGV4ICYmICEhYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbn1cblxuLyoqXG4gKiBNaXhpbiBvd24gcHJvcGVydGllcyBvZiBzb3VyY2VcbiAqIG9iamVjdCBpbnRvIHRoZSB0YXJnZXQuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSB0YXJnZXRcbiAqIEBwYXJhbSAge09iamVjdH0gc291cmNlXG4gKi9cbmZ1bmN0aW9uIG1peGluKHRhcmdldCwgc291cmNlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KGtleSkpIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cbn1cblxuLy8gVGhlcmUgc2hvdWxkIG5ldmVyIGJlIG1vcmUgdGhhblxuLy8gb25lIGluc3RhbmNlIG9mIGBGYXN0RG9tYCBpbiBhbiBhcHBcbnZhciBleHBvcnRzID0gd2luLmZhc3Rkb20gPSAod2luLmZhc3Rkb20gfHwgbmV3IEZhc3REb20oKSk7IC8vIGpzaGludCBpZ25vcmU6bGluZVxuXG4vLyBFeHBvc2UgdG8gQ0pTICYgQU1EXG5pZiAoKHR5cGVvZiBkZWZpbmUpID09ICdmdW5jdGlvbicpIGRlZmluZShmdW5jdGlvbigpIHsgcmV0dXJuIGV4cG9ydHM7IH0pO1xuZWxzZSBpZiAoKHR5cGVvZiBtb2R1bGUpID09ICdvYmplY3QnKSBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG5cbn0pKCB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHRoaXMpO1xuIiwiaW1wb3J0J0BkYW5pZWxrYWxlbi9pcyc7aW1wb3J0IElTIGZyb20nLi4vY2hlY2tzLmpzJztpbXBvcnQgU2ltcGx5QmluZCBmcm9tJ0BkYW5pZWxrYWxlbi9zaW1wbHliaW5kJzt2YXIgQ29uZGl0aW9uO1xuQ29uZGl0aW9uID0gY2xhc3MgQ29uZGl0aW9uIHtcbiAgY29uc3RydWN0b3IoZmllbGQxLCBzZXR0aW5ncywgY2FsbGJhY2sxKSB7XG4gICAgdmFyIHByb3BlcnR5LCB0YXJnZXQ7XG4gICAgdGhpcy5maWVsZCA9IGZpZWxkMTtcbiAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrMTtcbiAgICB0aGlzLnNhdGlzZmllZCA9IGZhbHNlO1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLnNldHRpbmdzLnZhbHVlO1xuICAgIHRoaXMucHJvcGVydHkgPSB0aGlzLnNldHRpbmdzLnByb3BlcnR5IHx8ICdfdmFsdWUnO1xuXG4gICAgaWYgKHRoaXMuc2V0dGluZ3MucHJvcGVydHkgPT09ICd2YWx1ZScpIHtcbiAgICAgIHRoaXMucHJvcGVydHkgPSAnX3ZhbHVlJztcbiAgICB9XG5cbiAgICB0YXJnZXQgPSB0aGlzLmZpZWxkLmFsbEZpZWxkc1t0aGlzLnNldHRpbmdzLnRhcmdldF07XG5cbiAgICBpZiAodGFyZ2V0KSB7XG4gICAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihgY29uZGl0aW9uIHRhcmdldCBub3QgZm91bmQgZm9yIHRoZSBwcm92aWRlZCBJRCAnJHt0aGlzLnNldHRpbmdzLnRhcmdldH0nYCwgdGhpcy5maWVsZCk7XG4gICAgfVxuXG4gICAgcHJvcGVydHkgPSBJUy5hcnJheSh0aGlzLnRhcmdldFt0aGlzLnByb3BlcnR5XSkgPyBgYXJyYXk6JHt0aGlzLnByb3BlcnR5fWAgOiB0aGlzLnByb3BlcnR5O1xuICAgIFNpbXBseUJpbmQocHJvcGVydHksIHtcbiAgICAgIHVwZGF0ZU9uQmluZDogZmFsc2VcbiAgICB9KS5vZih0aGlzLnRhcmdldCkuYW5kKCd2aXNpYmxlJykub2YodGhpcy50YXJnZXQuc3RhdGUpLnRvKHRoaXMuY2FsbGJhY2spO1xuICAgIFNpbXBseUJpbmQoJ3NhdGlzZmllZCcsIHtcbiAgICAgIHVwZGF0ZU9uQmluZDogZmFsc2VcbiAgICB9KS5vZih0aGlzKS50bygobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICB2YXIgYmFzZTtcblxuICAgICAgaWYgKG9sZFZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiAoYmFzZSA9IHRoaXMuZmllbGQpLmVtaXQgPT09IFwiZnVuY3Rpb25cIiA/IGJhc2UuZW1pdCgnY29uZGl0aW9uQ2hhbmdlJywgdGhpcykgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB0ZXN0KCkge1xuICAgIHZhciBjb21wYXJpc29uLCBjb21wYXJpc29uT3BlcmF0b3JzLCBwYXNzZWRDb21wYXJpc29ucywgcmVmLCB0YXJnZXRWYWx1ZTtcblxuICAgIGlmICghKChyZWYgPSB0aGlzLnRhcmdldCkgIT0gbnVsbCA/IHJlZi5zdGF0ZS52aXNpYmxlIDogdm9pZCAwKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbXBhcmlzb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzd2l0Y2ggKGZhbHNlKSB7XG4gICAgICAgIGNhc2UgIUlTLm9iamVjdFBsYWluKHRoaXMudmFsdWUpOlxuICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuXG4gICAgICAgIGNhc2UgIUlTLnJlZ2V4KHRoaXMudmFsdWUpOlxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnJHJlZ2V4JzogdGhpcy52YWx1ZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgY2FzZSAhKHRoaXMudmFsdWUgPT09ICd2YWxpZCcgJiYgIXRoaXMuc2V0dGluZ3MucHJvcGVydHkgfHwgIUlTLmRlZmluZWQodGhpcy52YWx1ZSkpOlxuICAgICAgICAgIHJldHVybiAndmFsaWQnO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICckZXEnOiB0aGlzLnZhbHVlXG4gICAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LmNhbGwodGhpcyk7XG5cbiAgICBpZiAoY29tcGFyaXNvbiA9PT0gJ3ZhbGlkJykge1xuICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0LnZhbGlkYXRlKCk7XG4gICAgfVxuXG4gICAgdGFyZ2V0VmFsdWUgPSAoKCkgPT4ge1xuICAgICAgdmFyIG5lc3RlZE9iamVjdCwgcHJvcGVydHlDaGFpbjtcblxuICAgICAgaWYgKHRoaXMucHJvcGVydHkgPT09ICdfdmFsdWUnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhcmdldC52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcHJvcGVydHlDaGFpbiA9IHRoaXMucHJvcGVydHkuc3BsaXQoJy4nKTtcblxuICAgICAgc3dpdGNoIChmYWxzZSkge1xuICAgICAgICBjYXNlIHByb3BlcnR5Q2hhaW4ubGVuZ3RoICE9PSAxOlxuICAgICAgICAgIHJldHVybiB0aGlzLnRhcmdldFt0aGlzLnByb3BlcnR5XTtcblxuICAgICAgICBjYXNlICFJUy5kZWZpbmVkKHRoaXMudGFyZ2V0W3RoaXMucHJvcGVydHldKTpcbiAgICAgICAgICByZXR1cm4gdGhpcy50YXJnZXRbdGhpcy5wcm9wZXJ0eV07XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBuZXN0ZWRPYmplY3QgPSB0aGlzLnRhcmdldDtcblxuICAgICAgICAgIHdoaWxlIChJUy5vYmplY3QobmVzdGVkT2JqZWN0KSkge1xuICAgICAgICAgICAgbmVzdGVkT2JqZWN0ID0gbmVzdGVkT2JqZWN0W3Byb3BlcnR5Q2hhaW4ucG9wKCldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBuZXN0ZWRPYmplY3Q7XG4gICAgICB9XG4gICAgfSkoKTtcblxuICAgIGNvbXBhcmlzb25PcGVyYXRvcnMgPSBPYmplY3Qua2V5cyhjb21wYXJpc29uKTtcbiAgICBwYXNzZWRDb21wYXJpc29ucyA9IGNvbXBhcmlzb25PcGVyYXRvcnMuZmlsdGVyKGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgdmFyIHNlZWtlZFZhbHVlO1xuICAgICAgc2Vla2VkVmFsdWUgPSBjb21wYXJpc29uW29wZXJhdG9yXTtcblxuICAgICAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgICAgICBjYXNlICckZXEnOlxuICAgICAgICAgIHJldHVybiB0YXJnZXRWYWx1ZSA9PT0gc2Vla2VkVmFsdWU7XG5cbiAgICAgICAgY2FzZSAnJG5lJzpcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0VmFsdWUgIT09IHNlZWtlZFZhbHVlO1xuXG4gICAgICAgIGNhc2UgJyRndCc6XG4gICAgICAgICAgcmV0dXJuIHRhcmdldFZhbHVlID4gc2Vla2VkVmFsdWU7XG5cbiAgICAgICAgY2FzZSAnJGd0ZSc6XG4gICAgICAgICAgcmV0dXJuIHRhcmdldFZhbHVlID49IHNlZWtlZFZhbHVlO1xuXG4gICAgICAgIGNhc2UgJyRsdCc6XG4gICAgICAgICAgcmV0dXJuIHRhcmdldFZhbHVlIDwgc2Vla2VkVmFsdWU7XG5cbiAgICAgICAgY2FzZSAnJGx0ZSc6XG4gICAgICAgICAgcmV0dXJuIHRhcmdldFZhbHVlIDw9IHNlZWtlZFZhbHVlO1xuXG4gICAgICAgIGNhc2UgJyRjdCc6XG4gICAgICAgICAgcmV0dXJuIGhlbHBlcnMuaW5jbHVkZXModGFyZ2V0VmFsdWUsIHNlZWtlZFZhbHVlKTtcblxuICAgICAgICBjYXNlICckbmN0JzpcbiAgICAgICAgICByZXR1cm4gIWhlbHBlcnMuaW5jbHVkZXModGFyZ2V0VmFsdWUsIHNlZWtlZFZhbHVlKTtcblxuICAgICAgICBjYXNlICckcmVnZXgnOlxuICAgICAgICAgIHJldHVybiBzZWVrZWRWYWx1ZS50ZXN0KHRhcmdldFZhbHVlKTtcblxuICAgICAgICBjYXNlICckbnJlZ2V4JzpcbiAgICAgICAgICByZXR1cm4gIXNlZWtlZFZhbHVlLnRlc3QodGFyZ2V0VmFsdWUpO1xuXG4gICAgICAgIGNhc2UgJyRtYXNrJzpcbiAgICAgICAgICByZXR1cm4gaGVscGVycy50ZXN0TWFzayh0YXJnZXRWYWx1ZSwgc2Vla2VkVmFsdWUpO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBwYXNzZWRDb21wYXJpc29ucy5sZW5ndGggPT09IGNvbXBhcmlzb25PcGVyYXRvcnMubGVuZ3RoO1xuICB9XG5cbiAgc3RhdGljIHZhbGlkYXRlKGNvbmRpdGlvbnMpIHtcbiAgICB2YXIgdmFsaWRDb25kaXRpb25zO1xuXG4gICAgaWYgKGNvbmRpdGlvbnMpIHtcbiAgICAgIHZhbGlkQ29uZGl0aW9ucyA9IGNvbmRpdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChjb25kaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGNvbmRpdGlvbi5zYXRpc2ZpZWQgPSBjb25kaXRpb24udGVzdCgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdmFsaWRDb25kaXRpb25zLmxlbmd0aCA9PT0gY29uZGl0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGluaXQoZmllbGQsIGNvbmRpdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKGNhbGxiYWNrID09IG51bGwpIHtcbiAgICAgICAgY2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGZpZWxkLnZhbGlkYXRlQ29uZGl0aW9ucygpO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBmaWVsZC5jb25kaXRpb25zID0gY29uZGl0aW9ucy5tYXAoZnVuY3Rpb24gKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm4gbmV3IENvbmRpdGlvbihmaWVsZCwgY29uZGl0aW9uLCBjYWxsYmFjayk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH0pO1xuICB9XG5cbn07XG52YXIgQ29uZGl0aW9uJDEgPSBDb25kaXRpb247ZXhwb3J0IGRlZmF1bHQgQ29uZGl0aW9uJDE7IiwiaW1wb3J0J0BkYW5pZWxrYWxlbi9pcyc7aW1wb3J0IElTIGZyb20nLi4vY2hlY2tzLmpzJzt2YXIgdHJhbnNmb3JtU2V0dGluZ3MgPSB7XG4gIGNvbmRpdGlvbnM6IGZ1bmN0aW9uIChjb25kaXRpb25zKSB7XG4gICAgdmFyIHJlc3VsdHMsIHRhcmdldCwgdmFsdWU7XG5cbiAgICBpZiAoSVMub2JqZWN0UGxhaW4oY29uZGl0aW9ucykpIHtcbiAgICAgIHJlc3VsdHMgPSBbXTtcblxuICAgICAgZm9yICh0YXJnZXQgaW4gY29uZGl0aW9ucykge1xuICAgICAgICB2YWx1ZSA9IGNvbmRpdGlvbnNbdGFyZ2V0XTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHtcbiAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0gZWxzZSBpZiAoSVMuYXJyYXkoY29uZGl0aW9ucykpIHtcbiAgICAgIHJldHVybiBjb25kaXRpb25zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICBpZiAoSVMuc3RyaW5nKGl0ZW0pKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRhcmdldDogaXRlbVxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgY2hvaWNlczogZnVuY3Rpb24gKGNob2ljZXMpIHtcbiAgICB2YXIgbGFiZWwsIHJlc3VsdHMsIHZhbHVlO1xuXG4gICAgaWYgKElTLm9iamVjdFBsYWluKGNob2ljZXMpKSB7XG4gICAgICByZXN1bHRzID0gW107XG5cbiAgICAgIGZvciAobGFiZWwgaW4gY2hvaWNlcykge1xuICAgICAgICB2YWx1ZSA9IGNob2ljZXNbbGFiZWxdO1xuICAgICAgICByZXN1bHRzLnB1c2goe1xuICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9IGVsc2UgaWYgKElTLmFycmF5KGNob2ljZXMpKSB7XG4gICAgICByZXR1cm4gY2hvaWNlcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgaWYgKCFJUy5vYmplY3RQbGFpbihpdGVtKSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsYWJlbDogaXRlbSxcbiAgICAgICAgICAgIHZhbHVlOiBpdGVtXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICB2YWxpZFdoZW5SZWdleDogZnVuY3Rpb24gKHJlZ2V4KSB7XG4gICAgaWYgKElTLnN0cmluZyhyZWdleCkpIHtcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKHJlZ2V4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlZ2V4O1xuICAgIH1cbiAgfVxufTtleHBvcnQgZGVmYXVsdCB0cmFuc2Zvcm1TZXR0aW5nczsiLCJ2YXIgZ2xvYmFsRGVmYXVsdHMgPSB7XG4gIGZvbnRGYW1pbHk6ICdzeXN0ZW0tdWksIHNhbnMtc2VyaWYnLFxuICB0ZW1wbGF0ZXM6IHt9LFxuICBldmVudHM6IG51bGwsXG4gIGxhYmVsOiBmYWxzZSxcbiAgZXJyb3I6ICcnLFxuICBoZWxwOiAnJyxcbiAgcmVxdWlyZWQ6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIGRlZmF1bHRWYWx1ZTogbnVsbCxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgbW9iaWxlV2lkdGg6IG51bGwsXG4gIG1vYmlsZVRocmVzaG9sZDogNzM2LFxuICBib3JkZXI6IDEsXG4gIG1hcmdpbjogbnVsbCxcbiAgcGFkZGluZzogbnVsbCxcbiAgZGlzdGFuY2U6IG51bGwsXG4gIGlucHV0UGFkZGluZzogMTIsXG4gIGZvbnRTaXplOiAxNCxcbiAgbGFiZWxTaXplOiBudWxsLFxuICBpY29uOiBudWxsLFxuICBpY29uU2l6ZTogMjIsXG4gIGdldHRlcjogbnVsbCxcbiAgc2V0dGVyOiBudWxsLFxuICB2YWxpZGF0b3I6IG51bGwsXG4gIGNsZWFyRXJyb3JPblZhbGlkOiB0cnVlLFxuICBtYWtlUm9vbUZvckhlbHA6IHRydWVcbn07ZXhwb3J0IGRlZmF1bHQgZ2xvYmFsRGVmYXVsdHM7IiwiaW1wb3J0J0BkYW5pZWxrYWxlbi9pcyc7aW1wb3J0IElTIGZyb20nLi4vY2hlY2tzLmpzJztpbXBvcnQncXVpY2tkb20nO2ltcG9ydCBTaW1wbHlCaW5kIGZyb20nQGRhbmllbGthbGVuL3NpbXBseWJpbmQnO2ltcG9ydCcuLi9jb25zdGFudHMvcmVnZXguanMnO2ltcG9ydCB7dXBkYXRlU2hvcnRoYW5kVmFsdWV9ZnJvbScuLi9oZWxwZXJzLmpzJztpbXBvcnQgZXh0ZW5kIGZyb20nc21hcnQtZXh0ZW5kJztpbXBvcnQgZmFzdGRvbSBmcm9tJ2Zhc3Rkb20nO2ltcG9ydCBDb25kaXRpb24gZnJvbScuLi9jb21wb25lbnRzL2NvbmRpdGlvbi5qcyc7aW1wb3J0IHRyYW5zZm9ybVNldHRpbmdzIGZyb20nLi90cmFuc2Zvcm1TZXR0aW5ncy5qcyc7aW1wb3J0IGdsb2JhbERlZmF1bHRzIGZyb20nLi9nbG9iYWxEZWZhdWx0cy5qcyc7dmFyIEZpZWxkLCBjdXJyZW50SUQ7XG5jdXJyZW50SUQgPSAwO1xuXG5GaWVsZCA9IGZ1bmN0aW9uICgpIHtcbiAgY2xhc3MgRmllbGQge1xuICAgIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBidWlsZGVyLCBzZXR0aW5nT3ZlcnJpZGVzLCB0ZW1wbGF0ZU92ZXJyaWRlcykge1xuICAgICAgdmFyIHJlZiwgc2hhbGxvd1NldHRpbmdzLCB0cmFuc2Zvcm1TZXR0aW5nc187XG4gICAgICB0aGlzLmJ1aWxkZXIgPSBidWlsZGVyO1xuXG4gICAgICBpZiAoc2V0dGluZ092ZXJyaWRlcykge1xuICAgICAgICBpZiAoc2V0dGluZ092ZXJyaWRlcy5nbG9iYWxEZWZhdWx0cykge1xuICAgICAgICAgIHRoaXMuZ2xvYmFsRGVmYXVsdHMgPSBzZXR0aW5nT3ZlcnJpZGVzLmdsb2JhbERlZmF1bHRzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNldHRpbmdPdmVycmlkZXNbc2V0dGluZ3MudHlwZV0pIHtcbiAgICAgICAgICB0aGlzLmRlZmF1bHRzID0gc2V0dGluZ092ZXJyaWRlc1tzZXR0aW5ncy50eXBlXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGVtcGxhdGVPdmVycmlkZXMgJiYgdGVtcGxhdGVPdmVycmlkZXNbc2V0dGluZ3MudHlwZV0pIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZXMgPSB0ZW1wbGF0ZU92ZXJyaWRlc1tzZXR0aW5ncy50eXBlXTtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlT3ZlcnJpZGVzW3NldHRpbmdzLnR5cGVdLmRlZmF1bHQ7XG4gICAgICB9XG5cbiAgICAgIHNoYWxsb3dTZXR0aW5ncyA9IHRoaXMuc2hhbGxvd1NldHRpbmdzID8gRmllbGQuc2hhbGxvd1NldHRpbmdzLmNvbmNhdCh0aGlzLnNoYWxsb3dTZXR0aW5ncykgOiBGaWVsZC5zaGFsbG93U2V0dGluZ3M7XG4gICAgICB0cmFuc2Zvcm1TZXR0aW5nc18gPSB0aGlzLnRyYW5zZm9ybVNldHRpbmdzID8gRmllbGQudHJhbnNmb3JtU2V0dGluZ3MuY29uY2F0KHRoaXMudHJhbnNmb3JtU2V0dGluZ3MpIDogRmllbGQudHJhbnNmb3JtU2V0dGluZ3M7XG4gICAgICB0aGlzLnNldHRpbmdzID0gZXh0ZW5kLmRlZXAuY2xvbmUubm90RGVlcChzaGFsbG93U2V0dGluZ3MpLnRyYW5zZm9ybSh0cmFuc2Zvcm1TZXR0aW5nc18pKHRoaXMuZ2xvYmFsRGVmYXVsdHMsIHRoaXMuZGVmYXVsdHMsIHNldHRpbmdzKTtcbiAgICAgIHRoaXMuSUQgPSB0aGlzLnNldHRpbmdzLklEIHx8IGN1cnJlbnRJRCsrICsgJyc7XG4gICAgICB0aGlzLnR5cGUgPSBzZXR0aW5ncy50eXBlO1xuICAgICAgdGhpcy5uYW1lID0gc2V0dGluZ3MubmFtZTtcbiAgICAgIHRoaXMuYWxsRmllbGRzID0gdGhpcy5zZXR0aW5ncy5maWVsZEluc3RhbmNlcyB8fCBGaWVsZC5pbnN0YW5jZXM7XG4gICAgICB0aGlzLl92YWx1ZSA9IG51bGw7XG4gICAgICB0aGlzLl9ldmVudENhbGxiYWNrcyA9IHt9O1xuICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgdmFsaWQ6IHRydWUsXG4gICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgIGZvY3VzZWQ6IGZhbHNlLFxuICAgICAgICBob3ZlcmVkOiBmYWxzZSxcbiAgICAgICAgZmlsbGVkOiBmYWxzZSxcbiAgICAgICAgaW50ZXJhY3RlZDogZmFsc2UsXG4gICAgICAgIGlzTW9iaWxlOiBmYWxzZSxcbiAgICAgICAgZGlzYWJsZWQ6IHRoaXMuc2V0dGluZ3MuZGlzYWJsZWQsXG4gICAgICAgIG1hcmdpbjogdGhpcy5zZXR0aW5ncy5tYXJnaW4sXG4gICAgICAgIHBhZGRpbmc6IHRoaXMuc2V0dGluZ3MucGFkZGluZyxcbiAgICAgICAgd2lkdGg6IHRoaXMuc2V0dGluZ3Mud2lkdGgsXG4gICAgICAgIHNob3dMYWJlbDogdGhpcy5zZXR0aW5ncy5sYWJlbCxcbiAgICAgICAgbGFiZWw6IHRoaXMuc2V0dGluZ3MubGFiZWwsXG4gICAgICAgIHNob3dIZWxwOiB0aGlzLnNldHRpbmdzLmhlbHAsXG4gICAgICAgIGhlbHA6IHRoaXMuc2V0dGluZ3MuaGVscCxcbiAgICAgICAgc2hvd0Vycm9yOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHRoaXMuc2V0dGluZ3MuZXJyb3JcbiAgICAgIH07XG5cbiAgICAgIGlmIChJUy5kZWZpbmVkKHRoaXMuc2V0dGluZ3MucGxhY2Vob2xkZXIpKSB7XG4gICAgICAgIHRoaXMuc3RhdGUucGxhY2Vob2xkZXIgPSB0aGlzLnNldHRpbmdzLnBsYWNlaG9sZGVyO1xuICAgICAgfVxuXG4gICAgICBpZiAoSVMubnVtYmVyKHRoaXMuc2V0dGluZ3Mud2lkdGgpICYmIHRoaXMuc2V0dGluZ3Mud2lkdGggPD0gMSkge1xuICAgICAgICB0aGlzLnN0YXRlLndpZHRoID0gYCR7dGhpcy5zZXR0aW5ncy53aWR0aCAqIDEwMH0lYDtcbiAgICAgIH1cblxuICAgICAgaWYgKChyZWYgPSB0aGlzLnNldHRpbmdzLmNvbmRpdGlvbnMpICE9IG51bGwgPyByZWYubGVuZ3RoIDogdm9pZCAwKSB7XG4gICAgICAgIHRoaXMuc3RhdGUudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICBDb25kaXRpb24uaW5pdCh0aGlzLCB0aGlzLnNldHRpbmdzLmNvbmRpdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5hbGxGaWVsZHNbdGhpcy5JRF0pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnNvbGUgIT09IG51bGwpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYER1cGxpY2F0ZSBmaWVsZCBJRHMgZm91bmQ6ICcke3RoaXMuSUR9J2ApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWxsRmllbGRzW3RoaXMuSURdID0gdGhpcztcbiAgICB9XG5cbiAgICBfY29uc3RydWN0b3JFbmQoKSB7XG4gICAgICB2YXIgYmFzZSwgaGFuZGxlciwgcmVmLCB0YXJnZXQ7XG4gICAgICB0aGlzLmVsLmNoaWxkZjsgLy8uZmllbGQub24gJ2luc2VydGVkJywgKCk9PiBAZW1pdCgnaW5zZXJ0ZWQnKVxuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5JRCkge1xuICAgICAgICB0aGlzLmVsLnJhdy5pZCA9IHRoaXMuSUQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgaWYgKChiYXNlID0gdGhpcy5zZXR0aW5ncykuZGVmYXVsdFZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICBiYXNlLmRlZmF1bHRWYWx1ZSA9IHRoaXMuc2V0dGluZ3MudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc2V0dGluZ3MubXVsdGlwbGUgPyBbXS5jb25jYXQodGhpcy5zZXR0aW5ncy5kZWZhdWx0VmFsdWUpIDogdGhpcy5zZXR0aW5ncy5kZWZhdWx0VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIFNpbXBseUJpbmQoJ3Nob3dFcnJvcicsIHtcbiAgICAgICAgdXBkYXRlT25CaW5kOiBmYWxzZVxuICAgICAgfSkub2YodGhpcy5zdGF0ZSkudG8oJ2hlbHAnKS5vZih0aGlzLnN0YXRlKS50cmFuc2Zvcm0oc2hvdyA9PiB7XG4gICAgICAgIGlmIChzaG93ICYmIHRoaXMuc3RhdGUuZXJyb3IgJiYgSVMuc3RyaW5nKHRoaXMuc3RhdGUuZXJyb3IpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuZXJyb3I7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MuaGVscCB8fCB0aGlzLnN0YXRlLmhlbHA7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnZXJyb3InLCB7XG4gICAgICAgIHVwZGF0ZU9uQmluZDogZmFsc2VcbiAgICAgIH0pLm9mKHRoaXMuc3RhdGUpLnRvKCdoZWxwJykub2YodGhpcy5zdGF0ZSkuY29uZGl0aW9uKGVycm9yID0+IHtcbiAgICAgICAgcmV0dXJuIGVycm9yICYmIHRoaXMuc3RhdGUuc2hvd0Vycm9yO1xuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCdoZWxwJykub2YodGhpcy5zdGF0ZSkudG8oJ2h0bWwnKS5vZih0aGlzLmVsLmNoaWxkLmhlbHApLmFuZC50bygnc2hvd0hlbHAnKS5vZih0aGlzLnN0YXRlKTtcbiAgICAgIFNpbXBseUJpbmQoJ2xhYmVsJykub2YodGhpcy5zdGF0ZSkudG8oJ3RleHQnKS5vZih0aGlzLmVsLmNoaWxkLmxhYmVsKS5hbmQudG8oJ3Nob3dMYWJlbCcpLm9mKHRoaXMuc3RhdGUpO1xuICAgICAgU2ltcGx5QmluZCgnbWFyZ2luJykub2YodGhpcy5zdGF0ZSkudG8odGhpcy5lbC5zdHlsZS5iaW5kKHRoaXMuZWwsICdtYXJnaW4nKSk7XG4gICAgICBTaW1wbHlCaW5kKCdwYWRkaW5nJykub2YodGhpcy5zdGF0ZSkudG8odGhpcy5lbC5zdHlsZS5iaW5kKHRoaXMuZWwsICdwYWRkaW5nJykpO1xuICAgICAgU2ltcGx5QmluZCgnc2hvd0hlbHAnKS5vZih0aGlzLnN0YXRlKS50bygoc2hvdywgcHJldlNob3cpID0+IHtcbiAgICAgICAgdmFyIGNoYW5nZUFtb3VudDtcblxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5tYWtlUm9vbUZvckhlbHApIHtcbiAgICAgICAgICBjaGFuZ2VBbW91bnQgPSAhIXNob3cgPT09ICEhcHJldlNob3cgPyAwIDogc2hvdyA/IDI1IDogcHJldlNob3cgPyAtMjUgOiB2b2lkIDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlQW1vdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5tYXJnaW4gPSB1cGRhdGVTaG9ydGhhbmRWYWx1ZSh0aGlzLnN0YXRlLm1hcmdpbiwgJ2JvdHRvbScsIGNoYW5nZUFtb3VudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ2ZvY3VzZWQnLCB7XG4gICAgICAgIHVwZGF0ZU9uQmluZDogZmFsc2VcbiAgICAgIH0pLm9mKHRoaXMuc3RhdGUpLnRvKGZvY3VzZWQgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbWl0KGZvY3VzZWQgPyAnZm9jdXMnIDogJ2JsdXInKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5tb2JpbGVXaWR0aCkge1xuICAgICAgICBTaW1wbHlCaW5kKCgpID0+IHtcbiAgICAgICAgICByZXR1cm4gZmFzdGRvbS5tZWFzdXJlKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmlzTW9iaWxlID0gd2luZG93LmlubmVyV2lkdGggPD0gdGhpcy5zZXR0aW5ncy5tb2JpbGVUaHJlc2hvbGQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pLnVwZGF0ZU9uKCdldmVudDpyZXNpemUnKS5vZih3aW5kb3cpO1xuICAgICAgfVxuXG4gICAgICBpZiAoSVMub2JqZWN0KHRoaXMuc2V0dGluZ3MuZXZlbnRzKSkge1xuICAgICAgICByZWYgPSB0aGlzLnNldHRpbmdzLmV2ZW50cztcblxuICAgICAgICBmb3IgKHRhcmdldCBpbiByZWYpIHtcbiAgICAgICAgICBoYW5kbGVyID0gcmVmW3RhcmdldF07XG4gICAgICAgICAgdGhpcy5vbih0YXJnZXQsIGhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZW1pdCgnY3JlYXRlZCcsIHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXMuZWwucmF3Ll9xdWlja0ZpZWxkID0gdGhpcztcbiAgICB9XG5cbiAgICBfZm9ybWF0V2lkdGgod2lkdGgpIHtcbiAgICAgIHdpZHRoID0gdGhpcy5zdGF0ZS5pc01vYmlsZSA/IHRoaXMuc2V0dGluZ3MubW9iaWxlV2lkdGggfHwgd2lkdGggOiB3aWR0aDtcblxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZGlzdGFuY2UgJiYgd2lkdGggIT09ICcxMDAlJykge1xuICAgICAgICB3aWR0aCA9IGBjYWxjKCR7d2lkdGh9IC0gJHt0aGlzLnNldHRpbmdzLmRpc3RhbmNlfXB4KWA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3aWR0aDtcbiAgICB9XG5cbiAgICBhcHBlbmRUbyh0YXJnZXQpIHtcbiAgICAgIHRoaXMuZWwuYXBwZW5kVG8odGFyZ2V0KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHByZXBlbmRUbyh0YXJnZXQpIHtcbiAgICAgIHRoaXMuZWwucHJlcGVuZFRvKHRhcmdldCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpbnNlcnRBZnRlcih0YXJnZXQpIHtcbiAgICAgIHRoaXMuZWwuaW5zZXJ0QWZ0ZXIodGFyZ2V0KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGluc2VydEJlZm9yZSh0YXJnZXQpIHtcbiAgICAgIHRoaXMuZWwuaW5zZXJ0QmVmb3JlKHRhcmdldCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBkZXRhY2godGFyZ2V0KSB7XG4gICAgICB0aGlzLmVsLmRldGFjaCh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmVtb3ZlKCkge1xuICAgICAgdGhpcy5lbC5yZW1vdmUoKTtcbiAgICAgIHJldHVybiB0aGlzLmRlc3Ryb3koZmFsc2UpO1xuICAgIH1cblxuICAgIGRlc3Ryb3kocmVtb3ZlRnJvbURPTSA9IHRydWUpIHtcbiAgICAgIHZhciBjaGlsZCwgaSwgbGVuLCByZWY7XG4gICAgICBTaW1wbHlCaW5kLnVuQmluZEFsbCh0aGlzKTtcbiAgICAgIFNpbXBseUJpbmQudW5CaW5kQWxsKHRoaXMuc3RhdGUpO1xuICAgICAgU2ltcGx5QmluZC51bkJpbmRBbGwodGhpcy5lbCk7XG4gICAgICByZWYgPSB0aGlzLmVsLmNoaWxkO1xuXG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY2hpbGQgPSByZWZbaV07XG4gICAgICAgIFNpbXBseUJpbmQudW5CaW5kQWxsKGNoaWxkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbW92ZUZyb21ET00pIHtcbiAgICAgICAgdGhpcy5lbC5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2Rlc3Ryb3kpIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveSgpO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgdGhpcy5hbGxGaWVsZHNbdGhpcy5JRF07XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBvbihldmVudE5hbWVzLCBjYWxsYmFjaywgdXNlQ2FwdHVyZSkge1xuICAgICAgdGhpcy5lbC5vbi5jYWxsKHRoaXMuZWwsIGV2ZW50TmFtZXMsIGNhbGxiYWNrLCB1c2VDYXB0dXJlLCB0cnVlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIG9uY2UoZXZlbnROYW1lcywgY2FsbGJhY2ssIHVzZUNhcHR1cmUpIHtcbiAgICAgIHJldHVybiB0aGlzLm9uKGV2ZW50TmFtZXMsICgpID0+IHtcbiAgICAgICAgdGhpcy5vZmYoZXZlbnROYW1lcywgY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkodGhpcy5lbCwgYXJndW1lbnRzKTtcbiAgICAgIH0sIHVzZUNhcHR1cmUpO1xuICAgIH1cblxuICAgIG9mZigpIHtcbiAgICAgIHRoaXMuZWwub2ZmLmFwcGx5KHRoaXMuZWwsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBlbWl0KCkge1xuICAgICAgdGhpcy5lbC5lbWl0UHJpdmF0ZS5hcHBseSh0aGlzLmVsLCBhcmd1bWVudHMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFsaWRhdGUocHJvdmlkZWRWYWx1ZSA9IHRoaXNbdGhpcy5jb3JlVmFsdWVQcm9wXSwgdGVzdFVucmVxdWlyZWQsIHJlcG9ydCkge1xuICAgICAgdmFyIGlzVmFsaWQ7XG5cbiAgICAgIGlzVmFsaWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN3aXRjaCAoZmFsc2UpIHtcbiAgICAgICAgICBjYXNlICF0aGlzLnNldHRpbmdzLnZhbGlkYXRvcjpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnZhbGlkYXRvcihwcm92aWRlZFZhbHVlKTtcblxuICAgICAgICAgIGNhc2UgISghdGhpcy5zZXR0aW5ncy5yZXF1aXJlZCAmJiAhdGVzdFVucmVxdWlyZWQpOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgICBjYXNlIHRoaXMuX3ZhbGlkYXRlKHByb3ZpZGVkVmFsdWUsIHRlc3RVbnJlcXVpcmVkLCByZXBvcnQpICE9PSBmYWxzZTpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgIGNhc2UgIXRoaXMuc2V0dGluZ3MucmVxdWlyZWQ6XG4gICAgICAgICAgICBzd2l0Y2ggKGZhbHNlKSB7XG4gICAgICAgICAgICAgIGNhc2UgIXRoaXMuc2V0dGluZ3MubXVsdGlwbGU6XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhKHByb3ZpZGVkVmFsdWUgIT0gbnVsbCA/IHByb3ZpZGVkVmFsdWUubGVuZ3RoIDogdm9pZCAwKTtcblxuICAgICAgICAgICAgICBjYXNlIHR5cGVvZiBwcm92aWRlZFZhbHVlICE9PSAnc3RyaW5nJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gISFwcm92aWRlZFZhbHVlO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVkVmFsdWUgIT0gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0uY2FsbCh0aGlzKTtcblxuICAgICAgaWYgKGlzVmFsaWQgJiYgdGhpcy5zZXR0aW5ncy5jbGVhckVycm9yT25WYWxpZCkge1xuICAgICAgICB0aGlzLnN0YXRlLnNob3dFcnJvciA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICB9XG5cbiAgICB2YWxpZGF0ZUNvbmRpdGlvbnMoY29uZGl0aW9ucykge1xuICAgICAgdmFyIHBhc3NlZENvbmRpdGlvbnMsIHRvZ2dsZVZpc2liaWxpdHk7XG5cbiAgICAgIGlmIChjb25kaXRpb25zKSB7XG4gICAgICAgIHRvZ2dsZVZpc2liaWxpdHkgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbmRpdGlvbnMgPSB0aGlzLmNvbmRpdGlvbnM7XG4gICAgICAgIHRvZ2dsZVZpc2liaWxpdHkgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBwYXNzZWRDb25kaXRpb25zID0gQ29uZGl0aW9uLnZhbGlkYXRlKGNvbmRpdGlvbnMpO1xuXG4gICAgICBpZiAodG9nZ2xlVmlzaWJpbGl0eSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS52aXNpYmxlID0gcGFzc2VkQ29uZGl0aW9ucztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXNzZWRDb25kaXRpb25zO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhbGlkYXRlQW5kUmVwb3J0KHByb3ZpZGVkVmFsdWUsIHRlc3RVbnJlcXVpcmVkKSB7XG4gICAgICB2YXIgaXNWYWxpZDtcbiAgICAgIGlzVmFsaWQgPSB0aGlzLnZhbGlkYXRlKHByb3ZpZGVkVmFsdWUsIHRlc3RVbnJlcXVpcmVkLCB0cnVlKTtcbiAgICAgIHRoaXMuc3RhdGUuc2hvd0Vycm9yID0gIWlzVmFsaWQ7XG4gICAgICByZXR1cm4gaXNWYWxpZDtcbiAgICB9XG5cbiAgfVxuICBGaWVsZC5pbnN0YW5jZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBGaWVsZC5zaGFsbG93U2V0dGluZ3MgPSBbJ3RlbXBsYXRlcycsICdmaWVsZEluc3RhbmNlcycsICd2YWx1ZScsICdkZWZhdWx0VmFsdWUnXTtcbiAgRmllbGQudHJhbnNmb3JtU2V0dGluZ3MgPSB0cmFuc2Zvcm1TZXR0aW5ncztcbiAgRmllbGQucHJvdG90eXBlLmdsb2JhbERlZmF1bHRzID0gZ2xvYmFsRGVmYXVsdHM7XG4gIEZpZWxkLnByb3RvdHlwZS5jb3JlVmFsdWVQcm9wID0gJ192YWx1ZSc7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEZpZWxkLnByb3RvdHlwZSwge1xuICAgICdyZW1vdmVMaXN0ZW5lcic6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vZmY7XG4gICAgICB9XG4gICAgfSxcbiAgICAnZWxzJzoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLmNoaWxkO1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3ZhbHVlUmF3Jzoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgICd2YWx1ZSc6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5nZXR0ZXIpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5nZXR0ZXIodGhpcy5fZ2V0VmFsdWUoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2dldFZhbHVlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2V0VmFsdWUodGhpcy5zZXR0aW5ncy5zZXR0ZXIgPyB0aGlzLnNldHRpbmdzLnNldHRlcih2YWx1ZSkgOiB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIEZpZWxkO1xufS5jYWxsKHVuZGVmaW5lZCk7XG5cbnZhciBGaWVsZCQxID0gRmllbGQ7ZXhwb3J0IGRlZmF1bHQgRmllbGQkMTsiLCJ2YXIga2V5Q29kZXM7XG52YXIgS0VZQ09ERVMgPSBrZXlDb2RlcyA9IHtcbiAgZGVsZXRlOiA4LFxuICBlbnRlcjogMTMsXG4gIGVzYzogMjcsXG4gIGN0cmw6IDE3LFxuICBhbHQ6IDE4LFxuICBzaGlmdDogMTYsXG4gIHN1cGVyOiA5MSxcbiAgc3VwZXIyOiA5MyxcbiAgdXA6IDM4LFxuICBsZWZ0OiAzNyxcbiAgcmlnaHQ6IDM5LFxuICBkb3duOiA0MCxcbiAgaHlwaGVuOiA0NSxcbiAgdW5kZXJzY29yZTogOTUsXG4gIHF1ZXN0aW9uOiA2MyxcbiAgZXhjbGFtYXRpb246IDMzLFxuICBmcm9udHNsYXNoOiA0NyxcbiAgYmFja3NsYXNoOiA5MixcbiAgY29tbWE6IDQ0LFxuICBwZXJpb2Q6IDQ2LFxuICBzcGFjZTogMzIsXG4gIGFueUFycm93OiBmdW5jdGlvbiAoY29kZSkge1xuICAgIHJldHVybiBjb2RlID09PSBrZXlDb2Rlcy51cCB8fCBjb2RlID09PSBrZXlDb2Rlcy5kb3duIHx8IGNvZGUgPT09IGtleUNvZGVzLmxlZnQgfHwgY29kZSA9PT0ga2V5Q29kZXMucmlnaHQ7XG4gIH0sXG4gIGFueU1vZGlmaWVyOiBmdW5jdGlvbiAoY29kZSkge1xuICAgIHJldHVybiBjb2RlID09PSBrZXlDb2Rlcy5jdHJsIHx8IGNvZGUgPT09IGtleUNvZGVzLmFsdCB8fCBjb2RlID09PSBrZXlDb2Rlcy5zaGlmdCB8fCBjb2RlID09PSBrZXlDb2Rlcy5zdXBlciB8fCBjb2RlID09PSBrZXlDb2Rlcy5zdXBlcjI7XG4gIH0sXG4gIGFueUFscGhhOiBmdW5jdGlvbiAoY29kZSkge1xuICAgIHJldHVybiA5NyA8PSBjb2RlICYmIGNvZGUgPD0gMTIyIHx8IDY1IDw9IGNvZGUgJiYgY29kZSA8PSA5MDtcbiAgfSxcbiAgYW55TnVtZXJpYzogZnVuY3Rpb24gKGNvZGUpIHtcbiAgICByZXR1cm4gNDggPD0gY29kZSAmJiBjb2RlIDw9IDU3O1xuICB9LFxuICBhbnlBbHBoYU51bWVyaWM6IGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgcmV0dXJuIGtleUNvZGVzLmFueUFscGhhKGNvZGUpIHx8IGtleUNvZGVzLmFueU51bWVyaWMoY29kZSk7XG4gIH0sXG4gIGFueVByaW50YWJsZTogZnVuY3Rpb24gKGNvZGUpIHtcbiAgICByZXR1cm4ga2V5Q29kZXMuYW55QWxwaGEoY29kZSkgfHwga2V5Q29kZXMuYW55TnVtZXJpYyhjb2RlKSB8fCBjb2RlID09PSBrZXlDb2Rlcy5oeXBoZW4gfHwgY29kZSA9PT0ga2V5Q29kZXMudW5kZXJzY29yZSB8fCBjb2RlID09PSBrZXlDb2Rlcy5xdWVzdGlvbiB8fCBjb2RlID09PSBrZXlDb2Rlcy5leGNsYW1hdGlvbiB8fCBjb2RlID09PSBrZXlDb2Rlcy5mcm9udHNsYXNoIHx8IGNvZGUgPT09IGtleUNvZGVzLmJhY2tzbGFzaCB8fCBjb2RlID09PSBrZXlDb2Rlcy5jb21tYSB8fCBjb2RlID09PSBrZXlDb2Rlcy5wZXJpb2QgfHwgY29kZSA9PT0ga2V5Q29kZXMuc3BhY2U7XG4gIH1cbn07ZXhwb3J0IGRlZmF1bHQgS0VZQ09ERVM7IiwiaW1wb3J0IERPTSBmcm9tJ3F1aWNrZG9tJzt2YXIgY2hlY2ttYXJrID0gRE9NLnRlbXBsYXRlKFsnKnN2ZycsIHtcbiAgYXR0cnM6IHtcbiAgICB3aWR0aDogJzEycHgnLFxuICAgIGhlaWdodDogJzEycHgnLFxuICAgIHZpZXdCb3g6ICc1IDcgMTIgMTInLFxuICAgIHRhYmluZGV4OiAtMSxcbiAgICBmb2N1c2FibGU6IGZhbHNlXG4gIH0sXG4gIHN0eWxlOiB7XG4gICAgd2lkdGg6ICc5cHgnLFxuICAgIGhlaWdodDogJzlweCdcbiAgfVxufSwgWycqcG9seWxpbmUnLCB7XG4gIGF0dHJzOiB7XG4gICAgJ3N0cm9rZS13aWR0aCc6ICcyJyxcbiAgICAnc3Ryb2tlLWxpbmVjYXAnOiAncm91bmQnLFxuICAgICdzdHJva2UtbGluZWpvaW4nOiAncm91bmQnLFxuICAgIGZpbGw6ICdub25lJyxcbiAgICBwb2ludHM6ICc3IDEzLjg4ODg4ODkgOS42NjY2NjY2NyAxNyAxNSA5JyxcbiAgICB0YWJpbmRleDogLTEsXG4gICAgZm9jdXNhYmxlOiBmYWxzZVxuICB9XG59XV0pO2V4cG9ydCBkZWZhdWx0IGNoZWNrbWFyazsiLCJpbXBvcnQgRE9NIGZyb20ncXVpY2tkb20nO3ZhciBhbmdsZURvd24gPSBET00udGVtcGxhdGUoWycqc3ZnJywge1xuICBhdHRyczoge1xuICAgIHdpZHRoOiAnMTc5MnB4JyxcbiAgICBoZWlnaHQ6ICcxNzkycHgnLFxuICAgIHZpZXdCb3g6ICcwIDAgMTc5MiAxNzkyJyxcbiAgICB0YWJpbmRleDogLTEsXG4gICAgZm9jdXNhYmxlOiBmYWxzZVxuICB9LFxuICBzdHlsZToge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgb3V0bGluZTogJ25vbmUnXG4gIH1cbn0sIFsnKnBhdGgnLCB7XG4gIGF0dHJzOiB7XG4gICAgdGFiaW5kZXg6IC0xLFxuICAgIGZvY3VzYWJsZTogZmFsc2UsXG4gICAgZDogJ00xMzk1IDczNnEwIDEzLTEwIDIzbC00NjYgNDY2cS0xMCAxMC0yMyAxMHQtMjMtMTBsLTQ2Ni00NjZxLTEwLTEwLTEwLTIzdDEwLTIzbDUwLTUwcTEwLTEwIDIzLTEwdDIzIDEwbDM5MyAzOTMgMzkzLTM5M3ExMC0xMCAyMy0xMHQyMyAxMGw1MCA1MHExMCAxMCAxMCAyM3onXG4gIH1cbn1dXSk7ZXhwb3J0IGRlZmF1bHQgYW5nbGVEb3duOyIsImltcG9ydCBET00gZnJvbSdxdWlja2RvbSc7dmFyIGNhcmV0VXAgPSBET00udGVtcGxhdGUoWycqc3ZnJywge1xuICBhdHRyczoge1xuICAgIHZpZXdCb3g6ICcwIDAgNTEyIDUxMicsXG4gICAgdGFiaW5kZXg6IC0xLFxuICAgIGZvY3VzYWJsZTogZmFsc2VcbiAgfSxcbiAgc3R5bGU6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIG91dGxpbmU6ICdub25lJ1xuICB9XG59LCBbJypwYXRoJywge1xuICBhdHRyczoge1xuICAgIHRhYmluZGV4OiAtMSxcbiAgICBmb2N1c2FibGU6IGZhbHNlLFxuICAgIGQ6ICdNNDAyIDM0N2MwIDUtMiAxMC01IDEzLTQgNC04IDYtMTMgNmgtMjU2Yy01IDAtOS0yLTEzLTYtMy0zLTUtOC01LTEzczItOSA1LTEybDEyOC0xMjhjNC00IDgtNiAxMy02czkgMiAxMyA2bDEyOCAxMjhjMyAzIDUgNyA1IDEyeidcbiAgfVxufV1dKTtleHBvcnQgZGVmYXVsdCBjYXJldFVwOyIsImltcG9ydCBET00gZnJvbSdxdWlja2RvbSc7dmFyIGNhcmV0RG93biA9IERPTS50ZW1wbGF0ZShbJypzdmcnLCB7XG4gIGF0dHJzOiB7XG4gICAgdmlld0JveDogJzAgMCA1MTIgNTEyJyxcbiAgICB0YWJpbmRleDogLTEsXG4gICAgZm9jdXNhYmxlOiBmYWxzZVxuICB9LFxuICBzdHlsZToge1xuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgb3V0bGluZTogJ25vbmUnXG4gIH1cbn0sIFsnKnBhdGgnLCB7XG4gIGF0dHJzOiB7XG4gICAgdGFiaW5kZXg6IC0xLFxuICAgIGZvY3VzYWJsZTogZmFsc2UsXG4gICAgZDogJ000MDIgMjAxYzAgNS0yIDktNSAxM2wtMTI4IDEyOGMtNCA0LTggNS0xMyA1cy05LTEtMTMtNWwtMTI4LTEyOGMtMy00LTUtOC01LTEzczItOSA1LTEzYzQtMyA4LTUgMTMtNWgyNTZjNSAwIDkgMiAxMyA1IDMgNCA1IDggNSAxM3onXG4gIH1cbn1dXSk7ZXhwb3J0IGRlZmF1bHQgY2FyZXREb3duOyIsImltcG9ydCBET00gZnJvbSdxdWlja2RvbSc7dmFyIHBsdXMgPSBET00udGVtcGxhdGUoWycqc3ZnJywge1xuICBhdHRyczoge1xuICAgIHZpZXdCb3g6ICcwIDAgMTUgMTUnLFxuICAgIHRhYmluZGV4OiAtMSxcbiAgICBmb2N1c2FibGU6IGZhbHNlXG4gIH0sXG4gIHN0eWxlOiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICBvdXRsaW5lOiAnbm9uZSdcbiAgfVxufSwgWycqcG9seWdvbicsIHtcbiAgYXR0cnM6IHtcbiAgICB0YWJpbmRleDogLTEsXG4gICAgZm9jdXNhYmxlOiBmYWxzZSxcbiAgICBwb2ludHM6ICc5IDAgNiAwIDYgNiAwIDYgMCA5IDYgOSA2IDE1IDkgMTUgOSA5IDE1IDkgMTUgNiA5IDYnXG4gIH1cbn1dXSk7ZXhwb3J0IGRlZmF1bHQgcGx1czsiLCJpbXBvcnQgRE9NIGZyb20ncXVpY2tkb20nO3ZhciBjbG9uZSA9IERPTS50ZW1wbGF0ZShbJypzdmcnLCB7XG4gIGF0dHJzOiB7XG4gICAgdmlld0JveDogJzAgMCAxOCAyMCcsXG4gICAgdGFiaW5kZXg6IC0xLFxuICAgIGZvY3VzYWJsZTogZmFsc2VcbiAgfSxcbiAgc3R5bGU6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIG91dGxpbmU6ICdub25lJ1xuICB9XG59LCBbJypwYXRoJywge1xuICBhdHRyczoge1xuICAgIHRhYmluZGV4OiAtMSxcbiAgICBmb2N1c2FibGU6IGZhbHNlLFxuICAgIGQ6ICdNMTMuNDE0LDAgTDYsMCBDNC44OTcsMCA0LDAuODk4IDQsMiBMNCwxNCBDNCwxNS4xMDMgNC44OTcsMTYgNiwxNiBMMTYsMTYgQzE3LjEwMywxNiAxOCwxNS4xMDMgMTgsMTQgTDE4LDQuNTg2IEwxMy40MTQsMCBaIE0xNi4wMDEsMTQgTDYsMTQgTDYsMiBMMTIsMiBMMTIsNiBMMTYsNiBMMTYuMDAxLDE0IFonXG4gIH1cbn1dLCBbJypwYXRoJywge1xuICBhdHRyczoge1xuICAgIHRhYmluZGV4OiAtMSxcbiAgICBmb2N1c2FibGU6IGZhbHNlLFxuICAgIGQ6ICdNMiw2LjQyMzc5MjgyIEwwLDYuNDIzNzkyODIgTDAsMTggQzAsMTkuMTAzIDAuODk3LDIwIDIsMjAgTDE0LDIwIEwxNCwxOCBMMiwxOCBMMiw2LjQyMzc5MjgyIFonXG4gIH1cbn1dXSk7ZXhwb3J0IGRlZmF1bHQgY2xvbmU7IiwiaW1wb3J0J3F1aWNrZG9tJztpbXBvcnQgcGx1cyBmcm9tJy4vcGx1cy5qcyc7dmFyIHJlbW92ZSA9IHBsdXMuZXh0ZW5kKHtcbiAgb3B0aW9uczoge1xuICAgIHN0eWxlOiB7XG4gICAgICB0cmFuc2Zvcm06ICdyb3RhdGUoNDVkZWcpJ1xuICAgIH1cbiAgfVxufSk7ZXhwb3J0IGRlZmF1bHQgcmVtb3ZlOyIsImltcG9ydCBET00gZnJvbSdxdWlja2RvbSc7aW1wb3J0IHtoZXhUb1JHQkF9ZnJvbScuLi8uLi9oZWxwZXJzLmpzJztpbXBvcnQgY2hlY2ttYXJrIGZyb20nLi4vLi4vc3ZnL2NoZWNrbWFyay5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9hbmdsZURvd24uanMnO2ltcG9ydCBjYXJldFVwIGZyb20nLi4vLi4vc3ZnL2NhcmV0VXAuanMnO2ltcG9ydCBjYXJldERvd24gZnJvbScuLi8uLi9zdmcvY2FyZXREb3duLmpzJztpbXBvcnQnLi4vLi4vc3ZnL3BsdXMuanMnO2ltcG9ydCcuLi8uLi9zdmcvY2xvbmUuanMnO2ltcG9ydCcuLi8uLi9zdmcvcmVtb3ZlLmpzJzt2YXIgdGVtcGxhdGUgPSBET00udGVtcGxhdGUoWydkaXYnLCB7XG4gIHJlZjogJ2Ryb3Bkb3duJyxcbiAgc3R5bGVBZnRlckluc2VydDogdHJ1ZSxcbiAgc3R5bGU6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB6SW5kZXg6IDEwLFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICB0b3A6IGZ1bmN0aW9uIChkcm9wZG93bikge1xuICAgICAgaWYgKGRyb3Bkb3duLmZpZWxkLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQucmF3LnN0eWxlLmhlaWdodDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAnLTdweCc7XG4gICAgICB9XG4gICAgfSxcbiAgICBsZWZ0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5wYXJlbnQucmVjdC5sZWZ0IC0gNSA8IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLTU7XG4gICAgICB9XG4gICAgfSxcbiAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgLy8gYmFja2dyb3VuZENvbG9yOiBoZXhUb1JHQkEoJ2Y2ZjZmNicsIDAuOSlcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZjZmNmY2JyxcbiAgICBib3hTaGFkb3c6IGAwcHggNnB4IDEwcHggJHtoZXhUb1JHQkEoJzAwMDAwMCcsIDAuMzIpfWAsXG4gICAgYm9yZGVyV2lkdGg6ICcxcHgnLFxuICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgIGJvcmRlckNvbG9yOiAnI2QxZDFkMScsXG4gICAgYm9yZGVyUmFkaXVzOiAnNXB4JyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBwYWRkaW5nOiAnNHB4IDAnLFxuICAgICRpc09wZW46IHtcbiAgICAgICRoYXNWaXNpYmxlQ2hvaWNlczoge1xuICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICB9XG4gICAgfVxuICB9XG59XSk7XG52YXIgbGlzdCA9IERPTS50ZW1wbGF0ZShbJ2RpdicsIHtcbiAgcmVmOiAnbGlzdCcsXG4gIHBhc3NTdGF0ZVRvQ2hpbGRyZW46IGZhbHNlLFxuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIG92ZXJmbG93OiAnc2Nyb2xsJyxcbiAgICBvdmVyZmxvd1Njcm9sbGluZzogJ3RvdWNoJyxcbiAgICBvdmVyZmxvd1N0eWxlOiAnLW1zLWF1dG9oaWRpbmctc2Nyb2xsYmFyJ1xuICB9XG59XSk7XG52YXIgY2hvaWNlID0gRE9NLnRlbXBsYXRlKFsnZGl2Jywge1xuICBzdHlsZToge1xuICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICBmb250U2l6ZTogJzAnLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIGxpbmVIZWlnaHQ6ICcxZW0nLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICR2aXNpYmxlOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgfSxcbiAgICAkdW5hdmFpbGFibGU6IHtcbiAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgIH0sXG4gICAgJGhvdmVyOiB7XG4gICAgICBjb2xvcjogJyNmZmZmZmYnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzRDOTZGRidcbiAgICB9XG4gIH1cbn0sIFsnZGl2JywgLy8gQ2hlY2ttYXJrXG57XG4gIHN0eWxlOiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgd2lkdGg6ICcyMHB4JyxcbiAgICAvLyBoZWlnaHQ6ICgpLT4gQHBhcmVudC5yYXcuc3R5bGUuaGVpZ2h0XG4gICAgLy8gbGluZUhlaWdodDogKCktPiBAcGFyZW50LnN0eWxlKCdoZWlnaHQnKVxuICAgIC8vIGZvbnRTaXplOiAoKS0+IEBwYXJlbnQuc3R5bGUoJ2hlaWdodCcpXG4gICAgbGluZUhlaWdodDogJzIwcHgnLFxuICAgIGZvbnRTaXplOiAnMTNweCcsXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgIHN0cm9rZTogJ2N1cnJlbnRDb2xvcicsXG4gICAgdmlzaWJpbGl0eTogJ2hpZGRlbicsXG4gICAgJHNlbGVjdGVkOiB7XG4gICAgICB2aXNpYmlsaXR5OiAndmlzaWJsZSdcbiAgICB9XG4gIH1cbn0sIGNoZWNrbWFya10sIFsnZGl2JywgLy8gVGV4dFxue1xuICBzdHlsZUFmdGVySW5zZXJ0OiB0cnVlLFxuICBzdHlsZToge1xuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgd29yZFdyYXA6ICdub3JtYWwnLFxuICAgIG1heFdpZHRoOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYGNhbGMoMTAwJSAtICR7dGhpcy5wcmV2LnN0eWxlU2FmZSgnd2lkdGgnLCB0cnVlKX0pYDtcbiAgICB9LFxuICAgIHBhZGRpbmdSaWdodDogJzEwcHgnLFxuICAgIGxpbmVIZWlnaHQ6ICcyMHB4JyxcbiAgICBmb250U2l6ZTogJzExcHgnLFxuICAgIGZvbnRGYW1pbHk6IGZ1bmN0aW9uIChkcm9wZG93bikge1xuICAgICAgcmV0dXJuIGRyb3Bkb3duLnNldHRpbmdzLmZvbnRGYW1pbHk7XG4gICAgfSxcbiAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gIH1cbn1dXSk7XG52YXIgc2Nyb2xsSW5kaWNhdG9yVXAgPSBET00udGVtcGxhdGUoWydkaXYnLCB7XG4gIHJlZjogJ3Njcm9sbEluZGljYXRvclVwJyxcbiAgc3R5bGU6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcyMHB4JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZjZmNmY2JyxcbiAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgJHZpc2libGU6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICB9XG4gIH1cbn0sIFsnZGl2Jywge1xuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogJzUwJScsXG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMCxcbiAgICB3aWR0aDogJzE1cHgnLFxuICAgIGhlaWdodDogJzE1cHgnLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJ1xuICB9XG59LCBjYXJldFVwXV0pO1xudmFyIHNjcm9sbEluZGljYXRvckRvd24gPSBET00udGVtcGxhdGUoWydkaXYnLCB7XG4gIHJlZjogJ3Njcm9sbEluZGljYXRvckRvd24nLFxuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwLFxuICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogJzIwcHgnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJyNmNmY2ZjYnLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAkdmlzaWJsZToge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH1cbiAgfVxufSwgWydkaXYnLCB7XG4gIHN0eWxlOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAnNTAlJyxcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIHdpZHRoOiAnMTVweCcsXG4gICAgaGVpZ2h0OiAnMTVweCcsXG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICBtYXJnaW46ICcwIGF1dG8nLFxuICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTUwJSknXG4gIH1cbn0sIGNhcmV0RG93bl1dKTtcbnZhciBoZWxwID0gRE9NLnRlbXBsYXRlKFsnZGl2Jywge1xuICByZWY6ICdoZWxwJyxcbiAgc3R5bGU6IHtcbiAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgYm9yZGVyVG9wOiAnMnB4IHNvbGlkIHJnYmEoMCwwLDAsMC4wNSknLFxuICAgIHBhZGRpbmc6ICc0cHggMTJweCAxcHgnLFxuICAgIGNvbG9yOiAncmdiYSgwLDAsMCwwLjUpJyxcbiAgICBmb250V2VpZ2h0OiAnNTAwJyxcbiAgICBmb250U2l6ZTogJzExcHgnLFxuICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAkc2hvd0hlbHA6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICB9XG4gIH1cbn1dKTt2YXIgdGVtcGxhdGUkMSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtkZWZhdWx0OiB0ZW1wbGF0ZSxsaXN0OiBsaXN0LGNob2ljZTogY2hvaWNlLHNjcm9sbEluZGljYXRvclVwOiBzY3JvbGxJbmRpY2F0b3JVcCxzY3JvbGxJbmRpY2F0b3JEb3duOiBzY3JvbGxJbmRpY2F0b3JEb3duLGhlbHA6IGhlbHB9KTtleHBvcnR7dGVtcGxhdGUkMSBhcyBhLHRlbXBsYXRlIGFzIGIsbGlzdCBhcyBjLGNob2ljZSBhcyBkLHNjcm9sbEluZGljYXRvclVwIGFzIGUsc2Nyb2xsSW5kaWNhdG9yRG93biBhcyBmLGhlbHAgYXMgZ307IiwidmFyIGRlZmF1bHRzID0ge1xuICBtYXhIZWlnaHQ6IDMwMCxcbiAgbXVsdGlwbGU6IGZhbHNlLFxuICBsb2NrU2Nyb2xsOiB0cnVlLFxuICB0eXBlQnVmZmVyOiBmYWxzZSxcbiAgaGVscDogJycsXG4gIHRlbXBsYXRlczoge31cbn07ZXhwb3J0IGRlZmF1bHQgZGVmYXVsdHM7IiwiaW1wb3J0J0BkYW5pZWxrYWxlbi9pcyc7aW1wb3J0IElTIGZyb20nLi4vLi4vY2hlY2tzLmpzJztpbXBvcnQgRE9NIGZyb20ncXVpY2tkb20nO2ltcG9ydCBTaW1wbHlCaW5kIGZyb20nQGRhbmllbGthbGVuL3NpbXBseWJpbmQnO2ltcG9ydCcuLi8uLi9jb25zdGFudHMvcmVnZXguanMnO2ltcG9ydCB7cmVtb3ZlSXRlbSxub29wLGxvY2tTY3JvbGwsdW5sb2NrU2Nyb2xsLHN0YXJ0c1dpdGh9ZnJvbScuLi8uLi9oZWxwZXJzLmpzJztpbXBvcnQgZXh0ZW5kIGZyb20nc21hcnQtZXh0ZW5kJztpbXBvcnQgQ29uZGl0aW9uIGZyb20nLi4vY29uZGl0aW9uLmpzJztpbXBvcnQgZ2xvYmFsRGVmYXVsdHMgZnJvbScuLi8uLi9maWVsZC9nbG9iYWxEZWZhdWx0cy5qcyc7aW1wb3J0IEtFWUNPREVTIGZyb20nLi4vLi4vY29uc3RhbnRzL2tleUNvZGVzLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2NoZWNrbWFyay5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9hbmdsZURvd24uanMnO2ltcG9ydCcuLi8uLi9zdmcvY2FyZXRVcC5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9jYXJldERvd24uanMnO2ltcG9ydCcuLi8uLi9zdmcvcGx1cy5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9jbG9uZS5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9yZW1vdmUuanMnO2ltcG9ydCB7YSBhcyB0ZW1wbGF0ZX1mcm9tJy4vdGVtcGxhdGUtYjk2MWY4MWYuanMnO2ltcG9ydCBkZWZhdWx0cyBmcm9tJy4vZGVmYXVsdHMuanMnO3ZhciBDaG9pY2UsIERyb3Bkb3duLCBMaXN0O1xuXG5Ecm9wZG93biA9IGZ1bmN0aW9uICgpIHtcbiAgY2xhc3MgRHJvcGRvd24ge1xuICAgIGNvbnN0cnVjdG9yKGluaXRpYWxDaG9pY2VzLCBmaWVsZCkge1xuICAgICAgdGhpcy5pbml0aWFsQ2hvaWNlcyA9IGluaXRpYWxDaG9pY2VzO1xuICAgICAgdGhpcy5maWVsZCA9IGZpZWxkO1xuICAgICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcbiAgICAgIHRoaXMudHlwZUJ1ZmZlciA9ICcnO1xuICAgICAgdGhpcy5zZXR0aW5ncyA9IGV4dGVuZC5kZWVwLmNsb25lLmZpbHRlcih0aGlzLl9zZXR0aW5nRmlsdGVycykoZ2xvYmFsRGVmYXVsdHMsIHRoaXMuZGVmYXVsdHMsIHRoaXMuZmllbGQuc2V0dGluZ3MuZHJvcGRvd24pO1xuICAgICAgdGhpcy5zZWxlY3RlZCA9IHRoaXMuc2V0dGluZ3MubXVsdGlwbGUgPyBbXSA6IG51bGw7XG4gICAgICB0aGlzLmxhc3RTZWxlY3RlZCA9IG51bGw7XG4gICAgICB0aGlzLmNob2ljZXMgPSBbXTtcbiAgICAgIHRoaXMuY3VycmVudEhpZ2hsaWdodGVkID0gbnVsbDtcbiAgICAgIHRoaXMudmlzaWJsZUNob2ljZXNDb3VudCA9IDA7XG4gICAgICB0aGlzLnZpc2libGVDaG9pY2VzID0gW107XG4gICAgICB0aGlzLmVscyA9IHt9O1xuICAgICAgdGhpcy5fc2VsZWN0ZWRDYWxsYmFjayA9IG5vb3A7XG5cbiAgICAgIHRoaXMuX2NyZWF0ZUVsZW1lbnRzKCk7XG5cbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzKCk7XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIF9jcmVhdGVFbGVtZW50cygpIHtcbiAgICAgIHZhciBjaG9pY2UsIGdsb2JhbE9wdHMsIGksIGxlbiwgcmVmO1xuICAgICAgZ2xvYmFsT3B0cyA9IHtcbiAgICAgICAgcmVsYXRlZEluc3RhbmNlOiB0aGlzXG4gICAgICB9O1xuICAgICAgdGhpcy5lbHMuY29udGFpbmVyID0gdGhpcy50ZW1wbGF0ZS5kZWZhdWx0LnNwYXduKHRoaXMuc2V0dGluZ3MudGVtcGxhdGVzLmRlZmF1bHQsIGV4dGVuZCh7XG4gICAgICAgIHBhc3NTdGF0ZVRvQ2hpbGRyZW46IGZhbHNlXG4gICAgICB9LCBnbG9iYWxPcHRzKSk7XG4gICAgICB0aGlzLmVscy5saXN0ID0gdGhpcy50ZW1wbGF0ZS5saXN0LnNwYXduKHRoaXMuc2V0dGluZ3MudGVtcGxhdGVzLmxpc3QsIGdsb2JhbE9wdHMpLmFwcGVuZFRvKHRoaXMuZWxzLmNvbnRhaW5lcik7XG4gICAgICB0aGlzLmVscy5oZWxwID0gdGhpcy50ZW1wbGF0ZS5oZWxwLnNwYXduKHRoaXMuc2V0dGluZ3MudGVtcGxhdGVzLmhlbHAsIGdsb2JhbE9wdHMpLmFwcGVuZFRvKHRoaXMuZWxzLmNvbnRhaW5lcik7XG4gICAgICB0aGlzLmVscy5zY3JvbGxJbmRpY2F0b3JVcCA9IHRoaXMudGVtcGxhdGUuc2Nyb2xsSW5kaWNhdG9yVXAuc3Bhd24odGhpcy5zZXR0aW5ncy50ZW1wbGF0ZXMuc2Nyb2xsSW5kaWNhdG9yVXAsIGdsb2JhbE9wdHMpLmFwcGVuZFRvKHRoaXMuZWxzLmNvbnRhaW5lcik7XG4gICAgICB0aGlzLmVscy5zY3JvbGxJbmRpY2F0b3JEb3duID0gdGhpcy50ZW1wbGF0ZS5zY3JvbGxJbmRpY2F0b3JEb3duLnNwYXduKHRoaXMuc2V0dGluZ3MudGVtcGxhdGVzLnNjcm9sbEluZGljYXRvckRvd24sIGdsb2JhbE9wdHMpLmFwcGVuZFRvKHRoaXMuZWxzLmNvbnRhaW5lcik7XG4gICAgICB0aGlzLmxpc3QgPSBuZXcgTGlzdCh0aGlzKTtcbiAgICAgIHJlZiA9IHRoaXMuaW5pdGlhbENob2ljZXM7XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjaG9pY2UgPSByZWZbaV07XG4gICAgICAgIHRoaXMuYWRkQ2hvaWNlKGNob2ljZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2F0dGFjaEJpbmRpbmdzKCkge1xuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3NfZWxTdGF0ZSgpO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5nc19kaXNwbGF5KCk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9hdHRhY2hCaW5kaW5nc19zY3JvbGxJbmRpY2F0b3JzKCk7XG4gICAgfVxuXG4gICAgX2F0dGFjaEJpbmRpbmdzX2VsU3RhdGUoKSB7XG4gICAgICBTaW1wbHlCaW5kKCdoZWxwJykub2YodGhpcy5zZXR0aW5ncykudG8oJ3RleHQnKS5vZih0aGlzLmVscy5oZWxwKS5hbmQudG8oc2hvd0hlbHAgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbHMuaGVscC5zdGF0ZSgnc2hvd0hlbHAnLCBzaG93SGVscCk7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ3Zpc2libGVDaG9pY2VzQ291bnQnKS5vZih0aGlzKS50byhjb3VudCA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVscy5jb250YWluZXIuc3RhdGUoJ2hhc1Zpc2libGVDaG9pY2VzJywgISFjb3VudCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBTaW1wbHlCaW5kKCdjdXJyZW50SGlnaGxpZ2h0ZWQnKS5vZih0aGlzKS50bygoY3VycmVudCwgcHJldikgPT4ge1xuICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgIHByZXYuZWwuc3RhdGUoJ2hvdmVyJywgZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICByZXR1cm4gY3VycmVudC5lbC5zdGF0ZSgnaG92ZXInLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2F0dGFjaEJpbmRpbmdzX2Rpc3BsYXkoKSB7XG4gICAgICBTaW1wbHlCaW5kKCdpc09wZW4nLCB7XG4gICAgICAgIHVwZGF0ZU9uQmluZDogZmFsc2VcbiAgICAgIH0pLm9mKHRoaXMpLnRvKGlzT3BlbiA9PiB7XG4gICAgICAgIHRoaXMuZWxzLmNvbnRhaW5lci5zdGF0ZSgnaXNPcGVuJywgaXNPcGVuKTtcblxuICAgICAgICBpZiAoIWlzT3Blbikge1xuICAgICAgICAgIHRoaXMuY3VycmVudEhpZ2hsaWdodGVkID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmxvY2tTY3JvbGwpIHtcbiAgICAgICAgICBpZiAoaXNPcGVuKSB7XG4gICAgICAgICAgICBsb2NrU2Nyb2xsKHRoaXMuZWxzLmxpc3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1bmxvY2tTY3JvbGwoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNPcGVuKSB7XG4gICAgICAgICAgdGhpcy5saXN0LmFwcGVuZENob2ljZXMoKTtcbiAgICAgICAgICB0aGlzLmxpc3QuY2FsY0Rpc3BsYXkoKTtcblxuICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkICYmICF0aGlzLnNldHRpbmdzLm11bHRpcGxlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0LnNjcm9sbFRvQ2hvaWNlKHRoaXMuc2VsZWN0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5saXN0LnNldFRyYW5zbGF0ZSgwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCdsYXN0U2VsZWN0ZWQnLCB7XG4gICAgICAgIHVwZGF0ZU9uQmluZDogZmFsc2UsXG4gICAgICAgIHVwZGF0ZUV2ZW5JZlNhbWU6IHRydWVcbiAgICAgIH0pLm9mKHRoaXMpLnRvKChuZXdDaG9pY2UsIHByZXZDaG9pY2UpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkQ2FsbGJhY2sobmV3Q2hvaWNlLCBwcmV2Q2hvaWNlKTtcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnZm9jdXNlZCcsIHtcbiAgICAgICAgdXBkYXRlT25CaW5kOiBmYWxzZVxuICAgICAgfSkub2YodGhpcy5maWVsZC5zdGF0ZSkudG8oZm9jdXNlZCA9PiB7XG4gICAgICAgIGlmICghZm9jdXNlZCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmZpZWxkLmVsLmNoaWxkLmlucHV0Lm9mZigna2V5ZG93bi5kcm9wZG93bk5hdicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLmZpZWxkLmVsLmNoaWxkLmlucHV0Lm9uKCdrZXlkb3duLmRyb3Bkb3duTmF2JywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNPcGVuKSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgS0VZQ09ERVMudXA6XG4gICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGlnaGxpZ2h0UHJldigpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBLRVlDT0RFUy5kb3duOlxuICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmhpZ2hsaWdodE5leHQoKTtcblxuICAgICAgICAgICAgICAgIGNhc2UgS0VZQ09ERVMuZW50ZXI6XG4gICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50SGlnaGxpZ2h0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGFzdFNlbGVjdGVkID0gdGhpcy5jdXJyZW50SGlnaGxpZ2h0ZWQ7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBLRVlDT0RFUy5lc2M6XG4gICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICghdGhpcy5zZXR0aW5ncy50eXBlQnVmZmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgU2ltcGx5QmluZCgnZm9jdXNlZCcsIHtcbiAgICAgICAgdXBkYXRlT25CaW5kOiBmYWxzZVxuICAgICAgfSkub2YodGhpcy5maWVsZC5zdGF0ZSkudG8oZm9jdXNlZCA9PiB7XG4gICAgICAgIGlmICghZm9jdXNlZCkge1xuICAgICAgICAgIHJldHVybiBET00oZG9jdW1lbnQpLm9mZigna2V5cHJlc3MuZHJvcGRvd25UeXBlQnVmZmVyJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIERPTShkb2N1bWVudCkub24oJ2tleXByZXNzLmRyb3Bkb3duVHlwZUJ1ZmZlcicsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzT3Blbikge1xuICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgIGlmICghS0VZQ09ERVMuYW55UHJpbnRhYmxlKGV2ZW50LmtleUNvZGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudHlwZUJ1ZmZlciArPSBldmVudC5rZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFNpbXBseUJpbmQoJ3R5cGVCdWZmZXInLCB7XG4gICAgICAgIHVwZGF0ZU9uQmluZDogZmFsc2VcbiAgICAgIH0pLm9mKHRoaXMpLnRvKCgpID0+IHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudHlwZUJ1ZmZlclRpbWVvdXQpO1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlQnVmZmVyVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLnR5cGVCdWZmZXIgPSAnJztcbiAgICAgICAgfSwgMTUwMCk7XG4gICAgICB9KS5hbmQudG8oYnVmZmVyID0+IHtcbiAgICAgICAgdmFyIGNob2ljZSwgaSwgbGVuLCByZWY7XG5cbiAgICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgIHJlZiA9IHRoaXMudmlzaWJsZUNob2ljZXM7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNob2ljZSA9IHJlZltpXTtcblxuICAgICAgICAgICAgaWYgKHN0YXJ0c1dpdGgoYnVmZmVyLCBjaG9pY2UubGFiZWwpKSB7XG4gICAgICAgICAgICAgIHRoaXMuY3VycmVudEhpZ2hsaWdodGVkID0gY2hvaWNlO1xuXG4gICAgICAgICAgICAgIGlmICghdGhpcy5saXN0LmNob2ljZUluVmlldyhjaG9pY2UpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0LnNjcm9sbFRvQ2hvaWNlKGNob2ljZSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBfYXR0YWNoQmluZGluZ3Nfc2Nyb2xsSW5kaWNhdG9ycygpIHtcbiAgICAgIFNpbXBseUJpbmQoJ3Njcm9sbFRvcCcsIHtcbiAgICAgICAgdXBkYXRlRXZlbklmU2FtZTogdHJ1ZVxuICAgICAgfSkub2YodGhpcy5lbHMubGlzdC5yYXcpLnRvKHNjcm9sbFRvcCA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl91cGRhdGVTY3JvbGxJbmRpY2F0b3JWaXNpYmlsaXR5KCk7XG4gICAgICB9KS5jb25kaXRpb24oKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pc09wZW4gJiYgIXRoaXMuc2V0dGluZ3MuaGVscCAmJiB0aGlzLmVscy5saXN0LnJhdy5zY3JvbGxIZWlnaHQgIT09IHRoaXMuZWxzLmxpc3QucmF3LmNsaWVudEhlaWdodCAmJiB0aGlzLmVscy5saXN0LnJhdy5jbGllbnRIZWlnaHQgPj0gMTAwO1xuICAgICAgfSkudXBkYXRlT24oJ2V2ZW50OnNjcm9sbCcpLm9mKHRoaXMuZWxzLmxpc3QucmF3KS51cGRhdGVPbignaXNPcGVuJykub2YodGhpcyk7XG4gICAgICB0aGlzLmVscy5zY3JvbGxJbmRpY2F0b3JVcC5vbignbW91c2VlbnRlcicsICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdC5zdGFydFNjcm9sbGluZygndXAnKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbHMuc2Nyb2xsSW5kaWNhdG9yVXAub24oJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3Quc3RvcFNjcm9sbGluZygpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmVscy5zY3JvbGxJbmRpY2F0b3JEb3duLm9uKCdtb3VzZWVudGVyJywgKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5saXN0LnN0YXJ0U2Nyb2xsaW5nKCdkb3duJyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzLmVscy5zY3JvbGxJbmRpY2F0b3JEb3duLm9uKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5saXN0LnN0b3BTY3JvbGxpbmcoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF91cGRhdGVTY3JvbGxJbmRpY2F0b3JWaXNpYmlsaXR5KCkge1xuICAgICAgdmFyIHNjcm9sbFRvcCwgc2hvd0JvdHRvbUluZGljYXRvciwgc2hvd1RvcEluZGljYXRvcjtcbiAgICAgIHNjcm9sbFRvcCA9IHRoaXMuZWxzLmxpc3QucmF3O1xuICAgICAgc2hvd1RvcEluZGljYXRvciA9IHNjcm9sbFRvcCA+IDA7XG4gICAgICBzaG93Qm90dG9tSW5kaWNhdG9yID0gdGhpcy5lbHMubGlzdC5yYXcuc2Nyb2xsSGVpZ2h0IC0gdGhpcy5lbHMubGlzdC5yYXcuY2xpZW50SGVpZ2h0ID4gc2Nyb2xsVG9wO1xuICAgICAgdGhpcy5lbHMuc2Nyb2xsSW5kaWNhdG9yVXAuc3RhdGUoJ3Zpc2libGUnLCBzaG93VG9wSW5kaWNhdG9yKTtcbiAgICAgIHJldHVybiB0aGlzLmVscy5zY3JvbGxJbmRpY2F0b3JEb3duLnN0YXRlKCd2aXNpYmxlJywgc2hvd0JvdHRvbUluZGljYXRvcik7XG4gICAgfVxuXG4gICAgYWRkQ2hvaWNlKGNvbmZpZykge1xuICAgICAgdmFyIGksIGl0ZW0sIGxlbiwgbmV3Q2hvaWNlO1xuXG4gICAgICBpZiAoSVMuYXJyYXkoY29uZmlnKSkge1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBjb25maWcubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBpdGVtID0gY29uZmlnW2ldO1xuICAgICAgICAgIHRoaXMuYWRkQ2hvaWNlKGl0ZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChJUy5zdHJpbmcoY29uZmlnKSkge1xuICAgICAgICBjb25maWcgPSB7XG4gICAgICAgICAgbGFiZWw6IGNvbmZpZyxcbiAgICAgICAgICB2YWx1ZTogY29uZmlnXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKElTLm9iamVjdFBsYWluKGNvbmZpZykpIHtcbiAgICAgICAgaWYgKGNvbmZpZy52YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgY29uZmlnLnZhbHVlID0gY29uZmlnLmxhYmVsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5sYWJlbCA9PSBudWxsKSB7XG4gICAgICAgICAgY29uZmlnLmxhYmVsID0gY29uZmlnLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG5ld0Nob2ljZSA9IG5ldyBDaG9pY2UodGhpcywgY29uZmlnLCB0aGlzLmxpc3QsIHRoaXMuY2hvaWNlcy5sZW5ndGgpO1xuXG4gICAgICBpZiAodGhpcy5saXN0LmFwcGVuZGVkQ2hvaWNlcykge1xuICAgICAgICBuZXdDaG9pY2UuaW5pdCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNob2ljZXMucHVzaChuZXdDaG9pY2UpO1xuICAgICAgcmV0dXJuIG5ld0Nob2ljZTtcbiAgICB9XG5cbiAgICByZW1vdmVDaG9pY2UoY2hvaWNlKSB7XG4gICAgICB2YXIgaSwgaXRlbSwgbGVuO1xuXG4gICAgICBpZiAoSVMuYXJyYXkoY2hvaWNlKSkge1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBjaG9pY2UubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBpdGVtID0gY2hvaWNlW2ldO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQ2hvaWNlKGl0ZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hvaWNlID0gdGhpcy5maW5kQ2hvaWNlQW55KGNob2ljZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghY2hvaWNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2hvaWNlLnJlbW92ZSgpO1xuICAgICAgcmV0dXJuIHRoaXMuY2hvaWNlcy5zcGxpY2UodGhpcy5jaG9pY2VzLmluZGV4T2YoY2hvaWNlKSwgMSk7XG4gICAgfVxuXG4gICAgcmVwbGFjZUNob2ljZXMobmV3Q2hvaWNlcykge1xuICAgICAgdGhpcy5yZW1vdmVDaG9pY2UodGhpcy5jaG9pY2VzLnNsaWNlKCkpO1xuICAgICAgdGhpcy5hZGRDaG9pY2UobmV3Q2hvaWNlcyk7XG4gICAgfVxuXG4gICAgYXBwZW5kVG8odGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGhpcy5lbHMuY29udGFpbmVyLmFwcGVuZFRvKHRhcmdldCk7XG4gICAgfVxuXG4gICAgb25TZWxlY3RlZChjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICBmaW5kQ2hvaWNlKHByb3ZpZGVkVmFsdWUsIGJ5TGFiZWwpIHtcbiAgICAgIHZhciBtYXRjaGVzO1xuICAgICAgbWF0Y2hlcyA9IHRoaXMuY2hvaWNlcy5maWx0ZXIoZnVuY3Rpb24gKGNob2ljZSkge1xuICAgICAgICBzd2l0Y2ggKGZhbHNlKSB7XG4gICAgICAgICAgY2FzZSAhSVMub2JqZWN0KHByb3ZpZGVkVmFsdWUpOlxuICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVkVmFsdWUgPT09IGNob2ljZTtcblxuICAgICAgICAgIGNhc2UgIWJ5TGFiZWw6XG4gICAgICAgICAgICByZXR1cm4gcHJvdmlkZWRWYWx1ZSA9PT0gY2hvaWNlLmxhYmVsO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBwcm92aWRlZFZhbHVlID09PSBjaG9pY2UudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoZXNbMF07XG4gICAgfVxuXG4gICAgZmluZENob2ljZUFueShwcm92aWRlZFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5kQ2hvaWNlKHByb3ZpZGVkVmFsdWUpIHx8IHRoaXMuZmluZENob2ljZShwcm92aWRlZFZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICBoaWdobGlnaHRQcmV2KCkge1xuICAgICAgdmFyIGNob2ljZSwgY3VycmVudEluZGV4O1xuICAgICAgY3VycmVudEluZGV4ID0gdGhpcy52aXNpYmxlQ2hvaWNlcy5pbmRleE9mKHRoaXMuY3VycmVudEhpZ2hsaWdodGVkKTtcblxuICAgICAgaWYgKGN1cnJlbnRJbmRleCA+IDApIHtcbiAgICAgICAgdGhpcy5jdXJyZW50SGlnaGxpZ2h0ZWQgPSBjaG9pY2UgPSB0aGlzLnZpc2libGVDaG9pY2VzW2N1cnJlbnRJbmRleCAtIDFdO1xuXG4gICAgICAgIGlmICghdGhpcy5saXN0LmNob2ljZUluVmlldyhjaG9pY2UpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubGlzdC5zY3JvbGxVcChjaG9pY2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmN1cnJlbnRIaWdobGlnaHRlZCA9IGNob2ljZSA9IHRoaXMudmlzaWJsZUNob2ljZXNbdGhpcy52aXNpYmxlQ2hvaWNlcy5sZW5ndGggLSAxXTtcblxuICAgICAgICBpZiAoIXRoaXMubGlzdC5jaG9pY2VJblZpZXcoY2hvaWNlKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmxpc3Quc2Nyb2xsVG9DaG9pY2UoY2hvaWNlLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGhpZ2hsaWdodE5leHQoKSB7XG4gICAgICB2YXIgY2hvaWNlLCBjdXJyZW50SW5kZXg7XG4gICAgICBjdXJyZW50SW5kZXggPSB0aGlzLnZpc2libGVDaG9pY2VzLmluZGV4T2YodGhpcy5jdXJyZW50SGlnaGxpZ2h0ZWQpO1xuXG4gICAgICBpZiAoY3VycmVudEluZGV4IDwgdGhpcy52aXNpYmxlQ2hvaWNlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMuY3VycmVudEhpZ2hsaWdodGVkID0gY2hvaWNlID0gdGhpcy52aXNpYmxlQ2hvaWNlc1tjdXJyZW50SW5kZXggKyAxXTtcblxuICAgICAgICBpZiAoIXRoaXMubGlzdC5jaG9pY2VJblZpZXcoY2hvaWNlKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmxpc3Quc2Nyb2xsRG93bihjaG9pY2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmN1cnJlbnRIaWdobGlnaHRlZCA9IGNob2ljZSA9IHRoaXMudmlzaWJsZUNob2ljZXNbMF07XG5cbiAgICAgICAgaWYgKCF0aGlzLmxpc3QuY2hvaWNlSW5WaWV3KGNob2ljZSkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5saXN0LnNjcm9sbFRvQ2hvaWNlKGNob2ljZSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuICBEcm9wZG93bi5wcm90b3R5cGUudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgRHJvcGRvd24ucHJvdG90eXBlLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4gIERyb3Bkb3duLnByb3RvdHlwZS5fc2V0dGluZ0ZpbHRlcnMgPSB7XG4gICAgbWF4SGVpZ2h0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBJUy5udW1iZXIodmFsdWUpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIERyb3Bkb3duO1xufS5jYWxsKHVuZGVmaW5lZCk7XG5cbkxpc3QgPSBjbGFzcyBMaXN0IHtcbiAgY29uc3RydWN0b3IoZHJvcGRvd24pIHtcbiAgICB0aGlzLmNob2ljZUluVmlldyA9IHRoaXMuY2hvaWNlSW5WaWV3LmJpbmQodGhpcyk7XG4gICAgdGhpcy5kcm9wZG93biA9IGRyb3Bkb3duO1xuICAgICh7XG4gICAgICBlbHM6IHRoaXMuZWxzLFxuICAgICAgZmllbGQ6IHRoaXMuZmllbGQsXG4gICAgICBzZXR0aW5nczogdGhpcy5zZXR0aW5nc1xuICAgIH0gPSB0aGlzLmRyb3Bkb3duKTtcbiAgICB0aGlzLmVsID0gdGhpcy5lbHMubGlzdDtcbiAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMuZWxzLmNvbnRhaW5lcjtcbiAgICB0aGlzLmFwcGVuZGVkQ2hvaWNlcyA9IGZhbHNlO1xuICB9XG5cbiAgYXBwZW5kQ2hvaWNlcygpIHtcbiAgICB2YXIgY2hvaWNlLCBpLCBsZW4sIHJlZjtcblxuICAgIGlmICh0aGlzLmFwcGVuZGVkQ2hvaWNlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJlZiA9IHRoaXMuZHJvcGRvd24uY2hvaWNlcztcblxuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2hvaWNlID0gcmVmW2ldO1xuICAgICAgY2hvaWNlLmluaXQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hcHBlbmRlZENob2ljZXMgPSB0cnVlO1xuICB9XG5cbiAgY2FsY0Rpc3BsYXkoKSB7XG4gICAgdmFyIGJvdHRvbUN1dG9mZiwgY2xpcHBpbmdQYXJlbnQsIGNsaXBwaW5nUmVjdCwgY3V0b2ZmLCBoZWlnaHQsIGlzQm90dG9tQ3V0b2ZmLCBpc1RvcEN1dG9mZiwgbmVlZHNOZXdIZWlnaHQsIHBhZGRpbmcsIHNjcm9sbEhlaWdodCwgc2VsZlJlY3QsIHRvcEN1dG9mZiwgdHJhbnNsYXRpb24sIHdpbmRvd0N1dG9mZiwgd2luZG93SGVpZ2h0O1xuICAgIHdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICB0cmFuc2xhdGlvbiA9IHRoaXMudHJhbnNsYXRpb24gfHwgMDtcbiAgICBjbGlwcGluZ1BhcmVudCA9IHRoaXMuY29udGFpbmVyLnBhcmVudE1hdGNoaW5nKGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgIHZhciBvdmVyZmxvdztcbiAgICAgIG92ZXJmbG93ID0gcGFyZW50LnN0eWxlKCdvdmVyZmxvd1knKTtcbiAgICAgIHJldHVybiBvdmVyZmxvdyA9PT0gJ2hpZGRlbicgfHwgb3ZlcmZsb3cgPT09ICdzY3JvbGwnO1xuICAgIH0pO1xuICAgIHNjcm9sbEhlaWdodCA9IHRoaXMuZWwucmF3LnNjcm9sbEhlaWdodCB8fCAyZTMwODtcbiAgICBzZWxmUmVjdCA9IGV4dGVuZC5jbG9uZSh0aGlzLmNvbnRhaW5lci5yZWN0KTtcbiAgICBwYWRkaW5nID0gc2VsZlJlY3QuaGVpZ2h0IC0gdGhpcy5lbC5oZWlnaHQ7XG4gICAgaGVpZ2h0ID0gTWF0aC5taW4oc2Nyb2xsSGVpZ2h0LCB0aGlzLnNldHRpbmdzLm1heEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IC0gNDApO1xuICAgIHNlbGZSZWN0LmJvdHRvbSA9IHNlbGZSZWN0LnRvcCArIGhlaWdodDtcblxuICAgIGlmIChjbGlwcGluZ1BhcmVudCkge1xuICAgICAgY2xpcHBpbmdSZWN0ID0gY2xpcHBpbmdQYXJlbnQucmVjdDtcbiAgICAgIGJvdHRvbUN1dG9mZiA9IHNlbGZSZWN0LmJvdHRvbSAtIGNsaXBwaW5nUmVjdC5ib3R0b207XG4gICAgICB0b3BDdXRvZmYgPSBjbGlwcGluZ1JlY3QudG9wIC0gc2VsZlJlY3QudG9wO1xuICAgICAgaXNCb3R0b21DdXRvZmYgPSBib3R0b21DdXRvZmYgPiAwO1xuICAgICAgaXNUb3BDdXRvZmYgPSB0b3BDdXRvZmYgPiAwO1xuXG4gICAgICBpZiAoc2VsZlJlY3QudG9wID49IGNsaXBwaW5nUmVjdC5ib3R0b20gfHwgY2xpcHBpbmdSZWN0LnRvcCA+PSBzZWxmUmVjdC5ib3R0b20pIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBUaGUgZHJvcGRvd24gZm9yIGVsZW1lbnQgJyR7dGhpcy5maWVsZC5JRH0nIGNhbm5vdCBiZSBkaXNwbGF5ZWQgYXMgaXQncyBoaWRkZW4gYnkgdGhlIHBhcmVudCBvdmVyZmxvd2ApO1xuICAgICAgfSBlbHNlIGlmIChpc0JvdHRvbUN1dG9mZiB8fCBpc1RvcEN1dG9mZikge1xuICAgICAgICBuZWVkc05ld0hlaWdodCA9IHRydWU7XG5cbiAgICAgICAgaWYgKHNlbGZSZWN0LnRvcCAtIGJvdHRvbUN1dG9mZiA+IGNsaXBwaW5nUmVjdC50b3AgJiYgIWlzVG9wQ3V0b2ZmKSB7XG4gICAgICAgICAgdHJhbnNsYXRpb24gPSBib3R0b21DdXRvZmY7XG4gICAgICAgICAgc2VsZlJlY3QudG9wIC09IHRyYW5zbGF0aW9uO1xuICAgICAgICAgIHNlbGZSZWN0LmJvdHRvbSAtPSB0cmFuc2xhdGlvbjtcbiAgICAgICAgICBjdXRvZmYgPSBjbGlwcGluZ1JlY3QudG9wIC0gc2VsZlJlY3QudG9wO1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGZSZWN0LmJvdHRvbSAtIHRvcEN1dG9mZiA8IGNsaXBwaW5nUmVjdC5ib3R0b20pIHtcbiAgICAgICAgICB0cmFuc2xhdGlvbiA9IHRvcEN1dG9mZiAqIC0xO1xuICAgICAgICAgIHNlbGZSZWN0LnRvcCArPSB0cmFuc2xhdGlvbjtcbiAgICAgICAgICBzZWxmUmVjdC5ib3R0b20gKz0gdHJhbnNsYXRpb247XG4gICAgICAgICAgY3V0b2ZmID0gc2VsZlJlY3QuYm90dG9tIC0gY2xpcHBpbmdSZWN0LmJvdHRvbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZWVkc05ld0hlaWdodCA9IGN1dG9mZiA+IDApIHtcbiAgICAgICAgICBoZWlnaHQgPSBjdXRvZmYgLSBwYWRkaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgd2luZG93Q3V0b2ZmID0gc2VsZlJlY3QudG9wICsgaGVpZ2h0IC0gd2luZG93SGVpZ2h0O1xuXG4gICAgaWYgKHdpbmRvd0N1dG9mZiA+IDAgJiYgaGVpZ2h0IDwgd2luZG93SGVpZ2h0KSB7XG4gICAgICB0cmFuc2xhdGlvbiArPSB3aW5kb3dDdXRvZmYgKyAxMDtcbiAgICB9XG5cbiAgICB0aGlzLnNldERpbWVuc2lvbnMoaGVpZ2h0LCB0aGlzLmZpZWxkLmVsLmNoaWxkLmlubmVyd3JhcC53aWR0aCArIDEwKTtcbiAgICByZXR1cm4gdGhpcy5zZXRUcmFuc2xhdGUodHJhbnNsYXRpb24pO1xuICB9XG5cbiAgc2V0RGltZW5zaW9ucyhoZWlnaHQsIHdpZHRoKSB7XG4gICAgaWYgKGhlaWdodCAhPSBudWxsKSB7XG4gICAgICB0aGlzLmVsLnN0eWxlKCdtYXhIZWlnaHQnLCBoZWlnaHQpO1xuICAgIH1cblxuICAgIGlmICh3aWR0aCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbC5zdHlsZSgnbWluV2lkdGgnLCB3aWR0aCk7XG4gICAgfVxuICB9XG5cbiAgc2V0VHJhbnNsYXRlKHRyYW5zbGF0aW9uKSB7XG4gICAgdGhpcy50cmFuc2xhdGlvbiA9IHRyYW5zbGF0aW9uO1xuICAgIHRyYW5zbGF0aW9uICo9IC0xO1xuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lci5zdHlsZSgndHJhbnNmb3JtJywgYHRyYW5zbGF0ZVkoJHt0cmFuc2xhdGlvbn1weClgKTtcbiAgfVxuXG4gIHNjcm9sbFRvQ2hvaWNlKGNob2ljZSwgb2Zmc2V0ID0gMykge1xuICAgIHZhciBkaXN0YW5lRnJvbVRvcCwgc2VsZWN0ZWRIZWlnaHQ7XG4gICAgZGlzdGFuZUZyb21Ub3AgPSBjaG9pY2UuZWwucmF3Lm9mZnNldFRvcDtcbiAgICBzZWxlY3RlZEhlaWdodCA9IGNob2ljZS5lbC5oZWlnaHQ7XG4gICAgcmV0dXJuIHRoaXMuZWwucmF3LnNjcm9sbFRvcCA9IGRpc3RhbmVGcm9tVG9wIC0gc2VsZWN0ZWRIZWlnaHQgKiBvZmZzZXQ7XG4gIH1cblxuICBzY3JvbGxEb3duKGNob2ljZSkge1xuICAgIHJldHVybiB0aGlzLmVsLnJhdy5zY3JvbGxUb3AgKz0gY2hvaWNlLmVsLmhlaWdodDtcbiAgfVxuXG4gIHNjcm9sbFVwKGNob2ljZSkge1xuICAgIHJldHVybiB0aGlzLmVsLnJhdy5zY3JvbGxUb3AgLT0gY2hvaWNlLmVsLmhlaWdodDtcbiAgfVxuXG4gIGNob2ljZUluVmlldyhjaG9pY2UpIHtcbiAgICB2YXIgY2hvaWNlUmVjdCwgZG93blBhZGRpbmcsIGxpc3RSZWN0LCB1cFBhZGRpbmc7XG4gICAgY2hvaWNlUmVjdCA9IGNob2ljZS5lbC5yZWN0O1xuICAgIGxpc3RSZWN0ID0gdGhpcy5lbC5yZWN0O1xuICAgIHVwUGFkZGluZyA9IHRoaXMuZWxzLnNjcm9sbEluZGljYXRvclVwLnN0YXRlKCd2aXNpYmxlJykgPyBwYXJzZUZsb2F0KHRoaXMuZWxzLnNjcm9sbEluZGljYXRvclVwLnN0eWxlU2FmZSgnaGVpZ2h0JywgdHJ1ZSkpIDogdm9pZCAwO1xuICAgIGRvd25QYWRkaW5nID0gdGhpcy5lbHMuc2Nyb2xsSW5kaWNhdG9yRG93bi5zdGF0ZSgndmlzaWJsZScpID8gcGFyc2VGbG9hdCh0aGlzLmVscy5zY3JvbGxJbmRpY2F0b3JEb3duLnN0eWxlU2FmZSgnaGVpZ2h0JywgdHJ1ZSkpIDogdm9pZCAwO1xuICAgIHJldHVybiBjaG9pY2VSZWN0LmJvdHRvbSA8PSBsaXN0UmVjdC5ib3R0b20gLSBkb3duUGFkZGluZyAmJiBjaG9pY2VSZWN0LnRvcCA+PSBsaXN0UmVjdC50b3AgKyB1cFBhZGRpbmc7XG4gIH1cblxuICBzdGFydFNjcm9sbGluZyhkaXJlY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy5zY3JvbGxJbnRlcnZhbElEID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuZWwucmF3LnNjcm9sbFRvcCArPSBkaXJlY3Rpb24gPT09ICd1cCcgPyAtMjAgOiAyMDtcbiAgICB9LCA1MCk7XG4gIH1cblxuICBzdG9wU2Nyb2xsaW5nKCkge1xuICAgIHJldHVybiBjbGVhckludGVydmFsKHRoaXMuc2Nyb2xsSW50ZXJ2YWxJRCk7XG4gIH1cblxufTtcbkNob2ljZSA9IGNsYXNzIENob2ljZSB7XG4gIGNvbnN0cnVjdG9yKGRyb3Bkb3duLCBzZXR0aW5ncywgbGlzdCwgaW5kZXgpIHtcbiAgICB2YXIgcmVmO1xuICAgIHRoaXMuZHJvcGRvd24gPSBkcm9wZG93bjtcbiAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgdGhpcy5saXN0ID0gbGlzdDtcbiAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgKHtcbiAgICAgIGxhYmVsOiB0aGlzLmxhYmVsLFxuICAgICAgdmFsdWU6IHRoaXMudmFsdWUsXG4gICAgICBjb25kaXRpb25zOiB0aGlzLmNvbmRpdGlvbnNcbiAgICB9ID0gdGhpcy5zZXR0aW5ncyk7XG5cbiAgICBpZiAodGhpcy5sYWJlbCA9PSBudWxsKSB7XG4gICAgICB0aGlzLmxhYmVsID0gdGhpcy52YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy52YWx1ZSA9PSBudWxsKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5sYWJlbDtcbiAgICB9XG5cbiAgICB0aGlzLmZpZWxkID0gdGhpcy5kcm9wZG93bi5maWVsZDtcbiAgICB0aGlzLnZpc2libGUgPSB0cnVlO1xuICAgIHRoaXMuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnVuYXZhaWxhYmxlID0gZmFsc2U7XG4gICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgaWYgKChyZWYgPSB0aGlzLmNvbmRpdGlvbnMpICE9IG51bGwgPyByZWYubGVuZ3RoIDogdm9pZCAwKSB7XG4gICAgICB0aGlzLnVuYXZhaWxhYmxlID0gdHJ1ZTtcbiAgICAgIHRoaXMuYWxsRmllbGRzID0gdGhpcy5maWVsZC5hbGxGaWVsZHM7XG4gICAgICBDb25kaXRpb24uaW5pdCh0aGlzLCB0aGlzLmNvbmRpdGlvbnMsICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5hdmFpbGFibGUgPSAhQ29uZGl0aW9uLnZhbGlkYXRlKHRoaXMuY29uZGl0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBpbml0KCkge1xuICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgdGhpcy5lbCA9IHRoaXMuZHJvcGRvd24udGVtcGxhdGUuY2hvaWNlLnNwYXduKG51bGwsIHtcbiAgICAgIHJlbGF0ZWRJbnN0YW5jZTogdGhpcy5kcm9wZG93blxuICAgIH0pO1xuICAgIHRoaXMuZWwuY2hpbGRyZW5bMV0udGV4dCA9IHRoaXMubGFiZWw7XG4gICAgdGhpcy5lbC5hcHBlbmRUbyh0aGlzLmxpc3QuZWwpO1xuICAgIHJldHVybiB0aGlzLl9hdHRhY2hCaW5kaW5ncygpO1xuICB9XG5cbiAgcmVtb3ZlKCkge1xuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmVsLnJlbW92ZSgpO1xuICB9XG5cbiAgX2F0dGFjaEJpbmRpbmdzKCkge1xuICAgIHJldHVybiAoKCkgPT4ge1xuICAgICAgU2ltcGx5QmluZCgndmlzaWJsZScpLm9mKHRoaXMpLnRvKCh2aXNpYmxlLCBwcmV2KSA9PiB7XG4gICAgICAgIHRoaXMuZHJvcGRvd24udmlzaWJsZUNob2ljZXNDb3VudCArPSB2aXNpYmxlID8gMSA6IC0xO1xuICAgICAgICB0aGlzLmVsLnN0YXRlKCd2aXNpYmxlJywgdmlzaWJsZSk7XG5cbiAgICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgICB0aGlzLmRyb3Bkb3duLnZpc2libGVDaG9pY2VzLnB1c2godGhpcyk7XG5cbiAgICAgICAgICBpZiAoSVMuZGVmaW5lZChwcmV2KSkge1xuICAgICAgICAgICAgLy8gaW5kaWNhdGVzIHN0YXRlIGhhcyBjaGFuZ2VkXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kcm9wZG93bi52aXNpYmxlQ2hvaWNlcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhLmluZGV4IC0gYi5pbmRleDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmVtb3ZlSXRlbSh0aGlzLmRyb3Bkb3duLnZpc2libGVDaG9pY2VzLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCdzZWxlY3RlZCcpLm9mKHRoaXMpLnRvKHNlbGVjdGVkID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc3RhdGUoJ3NlbGVjdGVkJywgc2VsZWN0ZWQpO1xuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCd1bmF2YWlsYWJsZScpLm9mKHRoaXMpLnRvKHVuYXZhaWxhYmxlID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc3RhdGUoJ3VuYXZhaWxhYmxlJywgdW5hdmFpbGFibGUpO1xuICAgICAgfSkuYW5kLnRvKHVuYXZhaWxhYmxlID0+IHtcbiAgICAgICAgaWYgKHVuYXZhaWxhYmxlKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudG9nZ2xlKGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCdldmVudDpjbGljaycpLm9mKHRoaXMuZWwpLnRvKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZHJvcGRvd24ubGFzdFNlbGVjdGVkID0gdGhpcztcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnZXZlbnQ6bW91c2Vkb3duJykub2YodGhpcy5lbCkudG8oZXZlbnQgPT4ge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm4gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBTaW1wbHlCaW5kKCdldmVudDptb3VzZWVudGVyJykub2YodGhpcy5lbCkudG8oKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kcm9wZG93bi5jdXJyZW50SGlnaGxpZ2h0ZWQgPSB0aGlzO1xuICAgICAgfSk7XG4gICAgfSkoKTtcbiAgfVxuXG4gIHRvZ2dsZShuZXdWYWx1ZSwgdW5hdmFpbGFibGUpIHtcbiAgICB2YXIgbmV3U3RhdGUsIHByZXZTdGF0ZSwgcmVmLCB3YXNTZWxlY3RlZDtcbiAgICBwcmV2U3RhdGUgPSB0aGlzLnNlbGVjdGVkO1xuICAgIG5ld1N0YXRlID0gSVMuZGVmaW5lZChuZXdWYWx1ZSkgPyBuZXdWYWx1ZSA6ICF0aGlzLnNlbGVjdGVkO1xuXG4gICAgaWYgKCFuZXdTdGF0ZSkge1xuICAgICAgaWYgKHRoaXMuZHJvcGRvd24uc2V0dGluZ3MubXVsdGlwbGUgJiYgcHJldlN0YXRlKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBuZXdTdGF0ZTtcbiAgICAgICAgcmV0dXJuIHJlbW92ZUl0ZW0odGhpcy5maWVsZC5fdmFsdWUsIHRoaXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FzU2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGVkO1xuXG4gICAgICAgIGlmIChJUy5kZWZpbmVkKG5ld1ZhbHVlKSkge1xuICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBuZXdTdGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1bmF2YWlsYWJsZSAmJiB3YXNTZWxlY3RlZCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmZpZWxkLl92YWx1ZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3RlZCA9IG5ld1N0YXRlO1xuXG4gICAgICBpZiAodGhpcy5maWVsZC5zZXR0aW5ncy5tdWx0aXBsZSkge1xuICAgICAgICB0aGlzLmZpZWxkLl92YWx1ZS5wdXNoKHRoaXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKChyZWYgPSB0aGlzLmZpZWxkLl92YWx1ZSkgIT0gbnVsbCkge1xuICAgICAgICAgIHJlZi50b2dnbGUoZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5maWVsZC5fdmFsdWUgPSB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5maWVsZC5sYXN0U2VsZWN0ZWQgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG59O1xudmFyIERyb3Bkb3duJDEgPSBEcm9wZG93bjtleHBvcnQgZGVmYXVsdCBEcm9wZG93biQxO2V4cG9ydHtDaG9pY2V9OyIsIiFmdW5jdGlvbihlLHIpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXIoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHIpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMudGV4dE1hc2tDb3JlPXIoKTplLnRleHRNYXNrQ29yZT1yKCl9KHRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7ZnVuY3Rpb24gcihuKXtpZih0W25dKXJldHVybiB0W25dLmV4cG9ydHM7dmFyIG89dFtuXT17ZXhwb3J0czp7fSxpZDpuLGxvYWRlZDohMX07cmV0dXJuIGVbbl0uY2FsbChvLmV4cG9ydHMsbyxvLmV4cG9ydHMsciksby5sb2FkZWQ9ITAsby5leHBvcnRzfXZhciB0PXt9O3JldHVybiByLm09ZSxyLmM9dCxyLnA9XCJcIixyKDApfShbZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPXQoMyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJjb25mb3JtVG9NYXNrXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG4obykuZGVmYXVsdH19KTt2YXIgaT10KDIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiYWRqdXN0Q2FyZXRQb3NpdGlvblwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBuKGkpLmRlZmF1bHR9fSk7dmFyIGE9dCg1KTtPYmplY3QuZGVmaW5lUHJvcGVydHkocixcImNyZWF0ZVRleHRNYXNrSW5wdXRFbGVtZW50XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG4oYSkuZGVmYXVsdH19KX0sZnVuY3Rpb24oZSxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxyLnBsYWNlaG9sZGVyQ2hhcj1cIl9cIn0sZnVuY3Rpb24oZSxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KGUpe3ZhciByPWUucHJldmlvdXNDb25mb3JtZWRWYWx1ZSx0PXZvaWQgMD09PXI/bzpyLGk9ZS5wcmV2aW91c1BsYWNlaG9sZGVyLGE9dm9pZCAwPT09aT9vOmksdT1lLmN1cnJlbnRDYXJldFBvc2l0aW9uLGw9dm9pZCAwPT09dT8wOnUscz1lLmNvbmZvcm1lZFZhbHVlLGY9ZS5yYXdWYWx1ZSxkPWUucGxhY2Vob2xkZXJDaGFyLGM9ZS5wbGFjZWhvbGRlcix2PWUuaW5kZXhlc09mUGlwZWRDaGFycyxwPXZvaWQgMD09PXY/bjp2LGg9ZS5jYXJldFRyYXBJbmRleGVzLGc9dm9pZCAwPT09aD9uOmg7aWYoMD09PWwpcmV0dXJuIDA7dmFyIG09Zi5sZW5ndGgseT10Lmxlbmd0aCxiPWMubGVuZ3RoLEM9cy5sZW5ndGgsUD1tLXkseD1QPjAsTz0wPT09eSxrPVA+MSYmIXgmJiFPO2lmKGspcmV0dXJuIGw7dmFyIGo9eCYmKHQ9PT1zfHxzPT09YyksTT0wLFQ9dm9pZCAwLHc9dm9pZCAwO2lmKGopTT1sLVA7ZWxzZXt2YXIgXz1zLnRvTG93ZXJDYXNlKCksVj1mLnRvTG93ZXJDYXNlKCksUz1WLnN1YnN0cigwLGwpLnNwbGl0KG8pLE49Uy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIF8uaW5kZXhPZihlKSE9PS0xfSk7dz1OW04ubGVuZ3RoLTFdO3ZhciBFPWEuc3Vic3RyKDAsTi5sZW5ndGgpLnNwbGl0KG8pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZSE9PWR9KS5sZW5ndGgsQT1jLnN1YnN0cigwLE4ubGVuZ3RoKS5zcGxpdChvKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUhPT1kfSkubGVuZ3RoLFI9QSE9PUUsST12b2lkIDAhPT1hW04ubGVuZ3RoLTFdJiZ2b2lkIDAhPT1jW04ubGVuZ3RoLTJdJiZhW04ubGVuZ3RoLTFdIT09ZCYmYVtOLmxlbmd0aC0xXSE9PWNbTi5sZW5ndGgtMV0mJmFbTi5sZW5ndGgtMV09PT1jW04ubGVuZ3RoLTJdOyF4JiYoUnx8SSkmJkU+MCYmYy5pbmRleE9mKHcpPi0xJiZ2b2lkIDAhPT1mW2xdJiYoVD0hMCx3PWZbbF0pO2Zvcih2YXIgSj1wLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gX1tlXX0pLHE9Si5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT13fSkubGVuZ3RoLEY9Ti5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT13fSkubGVuZ3RoLEw9Yy5zdWJzdHIoMCxjLmluZGV4T2YoZCkpLnNwbGl0KG8pLmZpbHRlcihmdW5jdGlvbihlLHIpe3JldHVybiBlPT09dyYmZltyXSE9PWV9KS5sZW5ndGgsVz1MK0YrcSsoVD8xOjApLHo9MCxCPTA7QjxDO0IrKyl7dmFyIEQ9X1tCXTtpZihNPUIrMSxEPT09dyYmeisrLHo+PVcpYnJlYWt9fWlmKHgpe2Zvcih2YXIgRz1NLEg9TTtIPD1iO0grKylpZihjW0hdPT09ZCYmKEc9SCksY1tIXT09PWR8fGcuaW5kZXhPZihIKSE9PS0xfHxIPT09YilyZXR1cm4gR31lbHNlIGlmKFQpe2Zvcih2YXIgSz1NLTE7Sz49MDtLLS0paWYoc1tLXT09PXd8fGcuaW5kZXhPZihLKSE9PS0xfHwwPT09SylyZXR1cm4gS31lbHNlIGZvcih2YXIgUT1NO1E+PTA7US0tKWlmKGNbUS0xXT09PWR8fGcuaW5kZXhPZihRKSE9PS0xfHwwPT09USlyZXR1cm4gUX1PYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxyLmRlZmF1bHQ9dDt2YXIgbj1bXSxvPVwiXCJ9LGZ1bmN0aW9uKGUscix0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmEscj1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06YSx0PWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTp7fSxuPXQuZ3VpZGUsdT12b2lkIDA9PT1ufHxuLGw9dC5wcmV2aW91c0NvbmZvcm1lZFZhbHVlLHM9dm9pZCAwPT09bD9hOmwsZj10LnBsYWNlaG9sZGVyQ2hhcixkPXZvaWQgMD09PWY/aS5wbGFjZWhvbGRlckNoYXI6ZixjPXQucGxhY2Vob2xkZXIsdj12b2lkIDA9PT1jPygwLG8uY29udmVydE1hc2tUb1BsYWNlaG9sZGVyKShyLGQpOmMscD10LmN1cnJlbnRDYXJldFBvc2l0aW9uLGg9dC5rZWVwQ2hhclBvc2l0aW9ucyxnPXU9PT0hMSYmdm9pZCAwIT09cyxtPWUubGVuZ3RoLHk9cy5sZW5ndGgsYj12Lmxlbmd0aCxDPXIubGVuZ3RoLFA9bS15LHg9UD4wLE89cCsoeD8tUDowKSxrPU8rTWF0aC5hYnMoUCk7aWYoaD09PSEwJiYheCl7Zm9yKHZhciBqPWEsTT1PO008aztNKyspdltNXT09PWQmJihqKz1kKTtlPWUuc2xpY2UoMCxPKStqK2Uuc2xpY2UoTyxtKX1mb3IodmFyIFQ9ZS5zcGxpdChhKS5tYXAoZnVuY3Rpb24oZSxyKXtyZXR1cm57Y2hhcjplLGlzTmV3OnI+PU8mJnI8a319KSx3PW0tMTt3Pj0wO3ctLSl7dmFyIF89VFt3XS5jaGFyO2lmKF8hPT1kKXt2YXIgVj13Pj1PJiZ5PT09QztfPT09dltWP3ctUDp3XSYmVC5zcGxpY2UodywxKX19dmFyIFM9YSxOPSExO2U6Zm9yKHZhciBFPTA7RTxiO0UrKyl7dmFyIEE9dltFXTtpZihBPT09ZCl7aWYoVC5sZW5ndGg+MClmb3IoO1QubGVuZ3RoPjA7KXt2YXIgUj1ULnNoaWZ0KCksST1SLmNoYXIsSj1SLmlzTmV3O2lmKEk9PT1kJiZnIT09ITApe1MrPWQ7Y29udGludWUgZX1pZihyW0VdLnRlc3QoSSkpe2lmKGg9PT0hMCYmSiE9PSExJiZzIT09YSYmdSE9PSExJiZ4KXtmb3IodmFyIHE9VC5sZW5ndGgsRj1udWxsLEw9MDtMPHE7TCsrKXt2YXIgVz1UW0xdO2lmKFcuY2hhciE9PWQmJlcuaXNOZXc9PT0hMSlicmVhaztpZihXLmNoYXI9PT1kKXtGPUw7YnJlYWt9fW51bGwhPT1GPyhTKz1JLFQuc3BsaWNlKEYsMSkpOkUtLX1lbHNlIFMrPUk7Y29udGludWUgZX1OPSEwfWc9PT0hMSYmKFMrPXYuc3Vic3RyKEUsYikpO2JyZWFrfVMrPUF9aWYoZyYmeD09PSExKXtmb3IodmFyIHo9bnVsbCxCPTA7QjxTLmxlbmd0aDtCKyspdltCXT09PWQmJih6PUIpO1M9bnVsbCE9PXo/Uy5zdWJzdHIoMCx6KzEpOmF9cmV0dXJue2NvbmZvcm1lZFZhbHVlOlMsbWV0YTp7c29tZUNoYXJzUmVqZWN0ZWQ6Tn19fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHIuZGVmYXVsdD1uO3ZhciBvPXQoNCksaT10KDEpLGE9XCJcIn0sZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06bCxyPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp1LnBsYWNlaG9sZGVyQ2hhcjtpZihlLmluZGV4T2YocikhPT0tMSl0aHJvdyBuZXcgRXJyb3IoXCJQbGFjZWhvbGRlciBjaGFyYWN0ZXIgbXVzdCBub3QgYmUgdXNlZCBhcyBwYXJ0IG9mIHRoZSBtYXNrLiBQbGVhc2Ugc3BlY2lmeSBhIGNoYXJhY3RlciB0aGF0IGlzIG5vdCBwcmVzZW50IGluIHlvdXIgbWFzayBhcyB5b3VyIHBsYWNlaG9sZGVyIGNoYXJhY3Rlci5cXG5cXG5cIisoXCJUaGUgcGxhY2Vob2xkZXIgY2hhcmFjdGVyIHRoYXQgd2FzIHJlY2VpdmVkIGlzOiBcIitKU09OLnN0cmluZ2lmeShyKStcIlxcblxcblwiKSsoXCJUaGUgbWFzayB0aGF0IHdhcyByZWNlaXZlZCBpczogXCIrSlNPTi5zdHJpbmdpZnkoZSkpKTtyZXR1cm4gZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBSZWdFeHA/cjplfSkuam9pbihcIlwiKX1mdW5jdGlvbiBvKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlfHxlIGluc3RhbmNlb2YgU3RyaW5nfWZ1bmN0aW9uIGkoZSl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIGUmJnZvaWQgMD09PWUubGVuZ3RoJiYhaXNOYU4oZSl9ZnVuY3Rpb24gYShlKXtmb3IodmFyIHI9W10sdD12b2lkIDA7dD1lLmluZGV4T2YocyksdCE9PS0xOylyLnB1c2godCksZS5zcGxpY2UodCwxKTtyZXR1cm57bWFza1dpdGhvdXRDYXJldFRyYXBzOmUsaW5kZXhlczpyfX1PYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxyLmNvbnZlcnRNYXNrVG9QbGFjZWhvbGRlcj1uLHIuaXNTdHJpbmc9byxyLmlzTnVtYmVyPWksci5wcm9jZXNzQ2FyZXRUcmFwcz1hO3ZhciB1PXQoMSksbD1bXSxzPVwiW11cIn0sZnVuY3Rpb24oZSxyLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWZ1bmN0aW9uIG8oZSl7dmFyIHI9e3ByZXZpb3VzQ29uZm9ybWVkVmFsdWU6dm9pZCAwLHByZXZpb3VzUGxhY2Vob2xkZXI6dm9pZCAwfTtyZXR1cm57c3RhdGU6cix1cGRhdGU6ZnVuY3Rpb24odCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOmUsbz1uLmlucHV0RWxlbWVudCxzPW4ubWFzayxkPW4uZ3VpZGUsbT1uLnBpcGUsYj1uLnBsYWNlaG9sZGVyQ2hhcixDPXZvaWQgMD09PWI/cC5wbGFjZWhvbGRlckNoYXI6YixQPW4ua2VlcENoYXJQb3NpdGlvbnMseD12b2lkIDAhPT1QJiZQLE89bi5zaG93TWFzayxrPXZvaWQgMCE9PU8mJk87aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHQmJih0PW8udmFsdWUpLHQhPT1yLnByZXZpb3VzQ29uZm9ybWVkVmFsdWUpeyhcInVuZGVmaW5lZFwiPT10eXBlb2Ygcz9cInVuZGVmaW5lZFwiOmwocykpPT09eSYmdm9pZCAwIT09cy5waXBlJiZ2b2lkIDAhPT1zLm1hc2smJihtPXMucGlwZSxzPXMubWFzayk7dmFyIGo9dm9pZCAwLE09dm9pZCAwO2lmKHMgaW5zdGFuY2VvZiBBcnJheSYmKGo9KDAsdi5jb252ZXJ0TWFza1RvUGxhY2Vob2xkZXIpKHMsQykpLHMhPT0hMSl7dmFyIFQ9YSh0KSx3PW8uc2VsZWN0aW9uRW5kLF89ci5wcmV2aW91c0NvbmZvcm1lZFZhbHVlLFY9ci5wcmV2aW91c1BsYWNlaG9sZGVyLFM9dm9pZCAwO2lmKChcInVuZGVmaW5lZFwiPT10eXBlb2Ygcz9cInVuZGVmaW5lZFwiOmwocykpPT09aCl7aWYoTT1zKFQse2N1cnJlbnRDYXJldFBvc2l0aW9uOncscHJldmlvdXNDb25mb3JtZWRWYWx1ZTpfLHBsYWNlaG9sZGVyQ2hhcjpDfSksTT09PSExKXJldHVybjt2YXIgTj0oMCx2LnByb2Nlc3NDYXJldFRyYXBzKShNKSxFPU4ubWFza1dpdGhvdXRDYXJldFRyYXBzLEE9Ti5pbmRleGVzO009RSxTPUEsaj0oMCx2LmNvbnZlcnRNYXNrVG9QbGFjZWhvbGRlcikoTSxDKX1lbHNlIE09czt2YXIgUj17cHJldmlvdXNDb25mb3JtZWRWYWx1ZTpfLGd1aWRlOmQscGxhY2Vob2xkZXJDaGFyOkMscGlwZTptLHBsYWNlaG9sZGVyOmosY3VycmVudENhcmV0UG9zaXRpb246dyxrZWVwQ2hhclBvc2l0aW9uczp4fSxJPSgwLGMuZGVmYXVsdCkoVCxNLFIpLEo9SS5jb25mb3JtZWRWYWx1ZSxxPShcInVuZGVmaW5lZFwiPT10eXBlb2YgbT9cInVuZGVmaW5lZFwiOmwobSkpPT09aCxGPXt9O3EmJihGPW0oSix1KHtyYXdWYWx1ZTpUfSxSKSksRj09PSExP0Y9e3ZhbHVlOl8scmVqZWN0ZWQ6ITB9OigwLHYuaXNTdHJpbmcpKEYpJiYoRj17dmFsdWU6Rn0pKTt2YXIgTD1xP0YudmFsdWU6SixXPSgwLGYuZGVmYXVsdCkoe3ByZXZpb3VzQ29uZm9ybWVkVmFsdWU6XyxwcmV2aW91c1BsYWNlaG9sZGVyOlYsY29uZm9ybWVkVmFsdWU6TCxwbGFjZWhvbGRlcjpqLHJhd1ZhbHVlOlQsY3VycmVudENhcmV0UG9zaXRpb246dyxwbGFjZWhvbGRlckNoYXI6QyxpbmRleGVzT2ZQaXBlZENoYXJzOkYuaW5kZXhlc09mUGlwZWRDaGFycyxjYXJldFRyYXBJbmRleGVzOlN9KSx6PUw9PT1qJiYwPT09VyxCPWs/ajpnLEQ9ej9COkw7ci5wcmV2aW91c0NvbmZvcm1lZFZhbHVlPUQsci5wcmV2aW91c1BsYWNlaG9sZGVyPWosby52YWx1ZSE9PUQmJihvLnZhbHVlPUQsaShvLFcpKX19fX19ZnVuY3Rpb24gaShlLHIpe2RvY3VtZW50LmFjdGl2ZUVsZW1lbnQ9PT1lJiYoYj9DKGZ1bmN0aW9uKCl7cmV0dXJuIGUuc2V0U2VsZWN0aW9uUmFuZ2UocixyLG0pfSwwKTplLnNldFNlbGVjdGlvblJhbmdlKHIscixtKSl9ZnVuY3Rpb24gYShlKXtpZigoMCx2LmlzU3RyaW5nKShlKSlyZXR1cm4gZTtpZigoMCx2LmlzTnVtYmVyKShlKSlyZXR1cm4gU3RyaW5nKGUpO2lmKHZvaWQgMD09PWV8fG51bGw9PT1lKXJldHVybiBnO3Rocm93IG5ldyBFcnJvcihcIlRoZSAndmFsdWUnIHByb3ZpZGVkIHRvIFRleHQgTWFzayBuZWVkcyB0byBiZSBhIHN0cmluZyBvciBhIG51bWJlci4gVGhlIHZhbHVlIHJlY2VpdmVkIHdhczpcXG5cXG4gXCIrSlNPTi5zdHJpbmdpZnkoZSkpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciB1PU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgcj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspe3ZhciB0PWFyZ3VtZW50c1tyXTtmb3IodmFyIG4gaW4gdClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxuKSYmKGVbbl09dFtuXSl9cmV0dXJuIGV9LGw9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX07ci5kZWZhdWx0PW87dmFyIHM9dCgyKSxmPW4ocyksZD10KDMpLGM9bihkKSx2PXQoNCkscD10KDEpLGg9XCJmdW5jdGlvblwiLGc9XCJcIixtPVwibm9uZVwiLHk9XCJvYmplY3RcIixiPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBuYXZpZ2F0b3ImJi9BbmRyb2lkL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSxDPVwidW5kZWZpbmVkXCIhPXR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU/cmVxdWVzdEFuaW1hdGlvbkZyYW1lOnNldFRpbWVvdXR9XSl9KTsiLCIhZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSx0KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9leHBvcnRzLnRleHRNYXNrQWRkb25zPXQoKTplLnRleHRNYXNrQWRkb25zPXQoKX0odGhpcyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtmdW5jdGlvbiB0KHIpe2lmKG5bcl0pcmV0dXJuIG5bcl0uZXhwb3J0czt2YXIgbz1uW3JdPXtleHBvcnRzOnt9LGlkOnIsbG9hZGVkOiExfTtyZXR1cm4gZVtyXS5jYWxsKG8uZXhwb3J0cyxvLG8uZXhwb3J0cyx0KSxvLmxvYWRlZD0hMCxvLmV4cG9ydHN9dmFyIG49e307cmV0dXJuIHQubT1lLHQuYz1uLHQucD1cIlwiLHQoMCl9KFtmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gcihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxKTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcImNyZWF0ZUF1dG9Db3JyZWN0ZWREYXRlUGlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiByKG8pLmRlZmF1bHR9fSk7dmFyIGk9bigyKTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcImNyZWF0ZU51bWJlck1hc2tcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcihpKS5kZWZhdWx0fX0pO3ZhciB1PW4oMyk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJlbWFpbE1hc2tcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcih1KS5kZWZhdWx0fX0pfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06XCJtbSBkZCB5eXl5XCI7cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBuPVtdLHI9ZS5zcGxpdCgvW15kbXldKy8pLG89e2RkOjMxLG1tOjEyLHl5Ojk5LHl5eXk6OTk5OX0saT17ZGQ6MSxtbToxLHl5OjAseXl5eToxfSx1PXQuc3BsaXQoXCJcIik7ci5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciByPWUuaW5kZXhPZih0KSxpPXBhcnNlSW50KG9bdF0udG9TdHJpbmcoKS5zdWJzdHIoMCwxKSwxMCk7cGFyc2VJbnQodVtyXSwxMCk+aSYmKHVbcisxXT11W3JdLHVbcl09MCxuLnB1c2gocikpfSk7dmFyIGM9ci5zb21lKGZ1bmN0aW9uKG4pe3ZhciByPWUuaW5kZXhPZihuKSx1PW4ubGVuZ3RoLGM9dC5zdWJzdHIocix1KS5yZXBsYWNlKC9cXEQvZyxcIlwiKSxsPXBhcnNlSW50KGMsMTApO3JldHVybiBsPm9bbl18fGMubGVuZ3RoPT09dSYmbDxpW25dfSk7cmV0dXJuIWMmJnt2YWx1ZTp1LmpvaW4oXCJcIiksaW5kZXhlc09mUGlwZWRDaGFyczpufX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5kZWZhdWx0PW59LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbigpe2Z1bmN0aW9uIGUoKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06Yyx0PWUubGVuZ3RoO2lmKGU9PT1jfHxlWzBdPT09aFswXSYmMT09PXQpcmV0dXJuIGguc3BsaXQoYykuY29uY2F0KFt2XSkuY29uY2F0KG0uc3BsaXQoYykpO2lmKGU9PT1TJiZNKXJldHVybiBoLnNwbGl0KGMpLmNvbmNhdChbXCIwXCIsUyx2XSkuY29uY2F0KG0uc3BsaXQoYykpO3ZhciBuPWUubGFzdEluZGV4T2YoUyksdT1uIT09LTEsbD1lWzBdPT09cyYmSSxhPXZvaWQgMCxnPXZvaWQgMCxiPXZvaWQgMDtpZihlLnNsaWNlKFYqLTEpPT09bSYmKGU9ZS5zbGljZSgwLFYqLTEpKSx1JiYoTXx8RCk/KGE9ZS5zbGljZShlLnNsaWNlKDAsJCk9PT1oPyQ6MCxuKSxnPWUuc2xpY2UobisxLHQpLGc9cihnLnJlcGxhY2UoZixjKSkpOmE9ZS5zbGljZSgwLCQpPT09aD9lLnNsaWNlKCQpOmUsTiYmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBOP1widW5kZWZpbmVkXCI6aShOKSk9PT1wKXt2YXIgTz1cIi5cIj09PV8/XCJbLl1cIjpcIlwiK18saj0oYS5tYXRjaChuZXcgUmVnRXhwKE8sXCJnXCIpKXx8W10pLmxlbmd0aDthPWEuc2xpY2UoMCxOK2oqcSl9cmV0dXJuIGE9YS5yZXBsYWNlKGYsYyksQXx8KGE9YS5yZXBsYWNlKC9eMCsoMCR8W14wXSkvLFwiJDFcIikpLGE9eD9vKGEsXyk6YSxiPXIoYSksKHUmJk18fEQ9PT0hMCkmJihlW24tMV0hPT1TJiZiLnB1c2goeSksYi5wdXNoKFMseSksZyYmKChcInVuZGVmaW5lZFwiPT10eXBlb2YgQz9cInVuZGVmaW5lZFwiOmkoQykpPT09cCYmKGc9Zy5zbGljZSgwLEMpKSxiPWIuY29uY2F0KGcpKSxEPT09ITAmJmVbbi0xXT09PVMmJmIucHVzaCh2KSksJD4wJiYoYj1oLnNwbGl0KGMpLmNvbmNhdChiKSksbCYmKGIubGVuZ3RoPT09JCYmYi5wdXNoKHYpLGI9W2RdLmNvbmNhdChiKSksbS5sZW5ndGg+MCYmKGI9Yi5jb25jYXQobS5zcGxpdChjKSkpLGJ9dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LG49dC5wcmVmaXgsaD12b2lkIDA9PT1uP3U6bixnPXQuc3VmZml4LG09dm9pZCAwPT09Zz9jOmcsYj10LmluY2x1ZGVUaG91c2FuZHNTZXBhcmF0b3IseD12b2lkIDA9PT1ifHxiLE89dC50aG91c2FuZHNTZXBhcmF0b3JTeW1ib2wsXz12b2lkIDA9PT1PP2w6TyxqPXQuYWxsb3dEZWNpbWFsLE09dm9pZCAwIT09aiYmaixQPXQuZGVjaW1hbFN5bWJvbCxTPXZvaWQgMD09PVA/YTpQLHc9dC5kZWNpbWFsTGltaXQsQz12b2lkIDA9PT13PzI6dyxrPXQucmVxdWlyZURlY2ltYWwsRD12b2lkIDAhPT1rJiZrLEU9dC5hbGxvd05lZ2F0aXZlLEk9dm9pZCAwIT09RSYmRSxSPXQuYWxsb3dMZWFkaW5nWmVyb2VzLEE9dm9pZCAwIT09UiYmUixMPXQuaW50ZWdlckxpbWl0LE49dm9pZCAwPT09TD9udWxsOkwsJD1oJiZoLmxlbmd0aHx8MCxWPW0mJm0ubGVuZ3RofHwwLHE9XyYmXy5sZW5ndGh8fDA7cmV0dXJuIGUuaW5zdGFuY2VPZj1cImNyZWF0ZU51bWJlck1hc2tcIixlfWZ1bmN0aW9uIHIoZSl7cmV0dXJuIGUuc3BsaXQoYykubWFwKGZ1bmN0aW9uKGUpe3JldHVybiB2LnRlc3QoZSk/djplfSl9ZnVuY3Rpb24gbyhlLHQpe3JldHVybiBlLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csdCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX07dC5kZWZhdWx0PW47dmFyIHU9XCIkXCIsYz1cIlwiLGw9XCIsXCIsYT1cIi5cIixzPVwiLVwiLGQ9Ly0vLGY9L1xcRCsvZyxwPVwibnVtYmVyXCIsdj0vXFxkLyx5PVwiW11cIn0sZnVuY3Rpb24oZSx0LG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHIoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fWZ1bmN0aW9uIG8oZSx0KXtlPWUucmVwbGFjZShPLHYpO3ZhciBuPXQucGxhY2Vob2xkZXJDaGFyLHI9dC5jdXJyZW50Q2FyZXRQb3NpdGlvbixvPWUuaW5kZXhPZih5KSxzPWUubGFzdEluZGV4T2YocCksZD1zPG8/LTE6cyxmPWkoZSxvKzEseSksaD1pKGUsZC0xLHApLGc9dShlLG8sbiksbT1jKGUsbyxkLG4pLGI9bChlLGQsbixyKTtnPWEoZyksbT1hKG0pLGI9YShiLCEwKTt2YXIgeD1nLmNvbmNhdChmKS5jb25jYXQobSkuY29uY2F0KGgpLmNvbmNhdChiKTtyZXR1cm4geH1mdW5jdGlvbiBpKGUsdCxuKXt2YXIgcj1bXTtyZXR1cm4gZVt0XT09PW4/ci5wdXNoKG4pOnIucHVzaChoLG4pLHIucHVzaChoKSxyfWZ1bmN0aW9uIHUoZSx0KXtyZXR1cm4gdD09PS0xP2U6ZS5zbGljZSgwLHQpfWZ1bmN0aW9uIGMoZSx0LG4scil7dmFyIG89djtyZXR1cm4gdCE9PS0xJiYobz1uPT09LTE/ZS5zbGljZSh0KzEsZS5sZW5ndGgpOmUuc2xpY2UodCsxLG4pKSxvPW8ucmVwbGFjZShuZXcgUmVnRXhwKFwiW1xcXFxzXCIrcitcIl1cIixtKSx2KSxvPT09eT9mOm8ubGVuZ3RoPDE/ZzpvW28ubGVuZ3RoLTFdPT09cD9vLnNsaWNlKDAsby5sZW5ndGgtMSk6b31mdW5jdGlvbiBsKGUsdCxuLHIpe3ZhciBvPXY7cmV0dXJuIHQhPT0tMSYmKG89ZS5zbGljZSh0KzEsZS5sZW5ndGgpKSxvPW8ucmVwbGFjZShuZXcgUmVnRXhwKFwiW1xcXFxzXCIrbitcIi5dXCIsbSksdiksMD09PW8ubGVuZ3RoP2VbdC0xXT09PXAmJnIhPT1lLmxlbmd0aD9mOnY6b31mdW5jdGlvbiBhKGUsdCl7cmV0dXJuIGUuc3BsaXQodikubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlPT09Zz9lOnQ/eDpifSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHM9big0KSxkPXIocyksZj1cIipcIixwPVwiLlwiLHY9XCJcIix5PVwiQFwiLGg9XCJbXVwiLGc9XCIgXCIsbT1cImdcIixiPS9bXlxcc10vLHg9L1teLlxcc10vLE89L1xccy9nO3QuZGVmYXVsdD17bWFzazpvLHBpcGU6ZC5kZWZhdWx0fX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUsdCl7dmFyIG49dC5jdXJyZW50Q2FyZXRQb3NpdGlvbixpPXQucmF3VmFsdWUsZj10LnByZXZpb3VzQ29uZm9ybWVkVmFsdWUscD10LnBsYWNlaG9sZGVyQ2hhcix2PWU7dj1yKHYpO3ZhciB5PXYuaW5kZXhPZihjKSxoPW51bGw9PT1pLm1hdGNoKG5ldyBSZWdFeHAoXCJbXkBcXFxccy5cIitwK1wiXVwiKSk7aWYoaClyZXR1cm4gdTtpZih2LmluZGV4T2YoYSkhPT0tMXx8eSE9PS0xJiZuIT09eSsxfHxpLmluZGV4T2Yobyk9PT0tMSYmZiE9PXUmJmkuaW5kZXhPZihsKSE9PS0xKXJldHVybiExO3ZhciBnPXYuaW5kZXhPZihvKSxtPXYuc2xpY2UoZysxLHYubGVuZ3RoKTtyZXR1cm4obS5tYXRjaChkKXx8cykubGVuZ3RoPjEmJnYuc3Vic3RyKC0xKT09PWwmJm4hPT1pLmxlbmd0aCYmKHY9di5zbGljZSgwLHYubGVuZ3RoLTEpKSx2fWZ1bmN0aW9uIHIoZSl7dmFyIHQ9MDtyZXR1cm4gZS5yZXBsYWNlKGksZnVuY3Rpb24oKXtyZXR1cm4gdCsrLDE9PT10P286dX0pfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD1uO3ZhciBvPVwiQFwiLGk9L0AvZyx1PVwiXCIsYz1cIkAuXCIsbD1cIi5cIixhPVwiLi5cIixzPVtdLGQ9L1xcLi9nfV0pfSk7IiwiaW1wb3J0J0BkYW5pZWxrYWxlbi9pcyc7aW1wb3J0IElTIGZyb20nLi4vY2hlY2tzLmpzJztpbXBvcnQncXVpY2tkb20nO2ltcG9ydCdAZGFuaWVsa2FsZW4vc2ltcGx5YmluZCc7aW1wb3J0IFJFR0VYIGZyb20nLi4vY29uc3RhbnRzL3JlZ2V4LmpzJztpbXBvcnQge3JlcGVhdH1mcm9tJy4uL2hlbHBlcnMuanMnO2ltcG9ydCBleHRlbmQgZnJvbSdzbWFydC1leHRlbmQnO2ltcG9ydCBtYXNrQ29yZSBmcm9tJ3RleHQtbWFzay1jb3JlJztpbXBvcnQgbWFza0FkZG9ucyBmcm9tJ3RleHQtbWFzay1hZGRvbnMnO3ZhciBNYXNrLCBkZWZhdWx0UGF0dGVybkNoYXJzO1xuZGVmYXVsdFBhdHRlcm5DaGFycyA9IHtcbiAgJzEnOiBSRUdFWC5udW1lcmljLFxuICAnIyc6IFJFR0VYLndpZGVudW1lcmljLFxuICAnYSc6IFJFR0VYLmxldHRlcixcbiAgJyonOiBSRUdFWC5hbnlcbn07XG5NYXNrID0gY2xhc3MgTWFzayB7XG4gIGNvbnN0cnVjdG9yKGZpZWxkLCBjb25maWcpIHtcbiAgICB0aGlzLmZpZWxkID0gZmllbGQ7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy52YWx1ZSA9ICcnO1xuICAgIHRoaXMucHJldlZhbHVlID0gJyc7XG4gICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIHRoaXMucHJldkN1cnNvciA9IDA7XG4gICAgdGhpcy5wYXR0ZXJuID0gdGhpcy5wYXR0ZXJuUmF3ID0gdGhpcy5jb25maWcucGF0dGVybjtcbiAgICB0aGlzLnBhdHRlcm5TZXR0ZXIgPSB0aGlzLmNvbmZpZy5zZXR0ZXI7XG4gICAgdGhpcy5wbGFjZWhvbGRlckNoYXIgPSB0aGlzLmNvbmZpZy5wbGFjZWhvbGRlcjtcbiAgICB0aGlzLnBsYWNlaG9sZGVyUmVnZXggPSBuZXcgUmVnRXhwKCdcXFxcJyArICh0aGlzLnBsYWNlaG9sZGVyQ2hhciB8fCAnXycpLCAnZycpO1xuICAgIHRoaXMuZ3VpZGUgPSB0aGlzLmNvbmZpZy5ndWlkZTtcbiAgICB0aGlzLmtlZXBDaGFyUG9zaXRpb25zID0gdGhpcy5jb25maWcua2VlcENoYXJQb3NpdGlvbnM7XG4gICAgdGhpcy5jaGFycyA9IGV4dGVuZC5jbG9uZShkZWZhdWx0UGF0dGVybkNoYXJzLCB0aGlzLmNvbmZpZy5jdXN0b21QYXR0ZXJucyk7XG4gICAgdGhpcy5zZXRQYXR0ZXJuKHRoaXMucGF0dGVybik7XG4gIH1cblxuICBnZXRTdGF0ZShwYXR0ZXJuLCByYXdWYWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICByYXdWYWx1ZSxcbiAgICAgIGd1aWRlOiB0aGlzLmd1aWRlLFxuICAgICAgcGxhY2Vob2xkZXJDaGFyOiB0aGlzLnBsYWNlaG9sZGVyQ2hhcixcbiAgICAgIGtlZXBDaGFyUG9zaXRpb25zOiB0aGlzLmtlZXBDaGFyUG9zaXRpb25zLFxuICAgICAgY3VycmVudENhcmV0UG9zaXRpb246IHRoaXMuZmllbGQuZWwgPyB0aGlzLmZpZWxkLnNlbGVjdGlvbigpLmVuZCA6IHRoaXMuY3Vyc29yLFxuICAgICAgcHJldmlvdXNDb25mb3JtZWRWYWx1ZTogdGhpcy5wcmV2VmFsdWUsXG4gICAgICBwbGFjZWhvbGRlcjogdGhpcy5nZXRQbGFjZWhvbGRlcihwYXR0ZXJuKVxuICAgIH07XG4gIH1cblxuICBnZXRQbGFjZWhvbGRlcihwYXR0ZXJuKSB7XG4gICAgdmFyIGNoYXIsIGosIGxlbiwgcGxhY2Vob2xkZXI7XG5cbiAgICBpZiAoSVMuZnVuY3Rpb24ocGF0dGVybikpIDsgZWxzZSB7XG4gICAgICBwbGFjZWhvbGRlciA9ICcnO1xuXG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSBwYXR0ZXJuLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIGNoYXIgPSBwYXR0ZXJuW2pdO1xuXG4gICAgICAgIGlmIChJUy5yZWdleChjaGFyKSkge1xuICAgICAgICAgIHBsYWNlaG9sZGVyICs9IHRoaXMucGxhY2Vob2xkZXJDaGFyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBsYWNlaG9sZGVyICs9IGNoYXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICAgIH1cbiAgfVxuXG4gIHJlc29sdmVQYXR0ZXJuKHBhdHRlcm4sIGlucHV0LCBzdGF0ZSkge1xuICAgIHZhciBjaGFyLCBjb3B5LCBpLCBqLCBsZW4sIG9mZnNldCwgdHJhcEluZGV4ZXM7XG4gICAgcGF0dGVybiA9IHR5cGVvZiBwYXR0ZXJuID09PSAnZnVuY3Rpb24nID8gcGF0dGVybihpbnB1dCwgdGhpcy5nZXRTdGF0ZShwYXR0ZXJuLCBpbnB1dCkpIDogcGF0dGVybjtcbiAgICBvZmZzZXQgPSAwO1xuICAgIHRyYXBJbmRleGVzID0gW107XG4gICAgY29weSA9IHBhdHRlcm4uc2xpY2UoKTtcblxuICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSBjb3B5Lmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgY2hhciA9IGNvcHlbaV07XG5cbiAgICAgIGlmICghKGNoYXIgPT09ICdbXScpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB0cmFwSW5kZXhlcy5wdXNoKGkgLSBvZmZzZXQpO1xuICAgICAgcGF0dGVybi5zcGxpY2UoaSAtIG9mZnNldCwgMSk7XG4gICAgICBvZmZzZXQrKztcbiAgICB9XG5cbiAgICB0aGlzLnByZXZQYXR0ZXJuID0gdGhpcy5yZXNvbHZlZFBhdHRlcm47XG4gICAgdGhpcy5yZXNvbHZlZFBhdHRlcm4gPSBwYXR0ZXJuO1xuICAgIHJldHVybiB7XG4gICAgICBwYXR0ZXJuLFxuICAgICAgY2FyZXRUcmFwSW5kZXhlczogdHJhcEluZGV4ZXNcbiAgICB9O1xuICB9XG5cbiAgc2V0UGF0dGVybihzdHJpbmcsIHVwZGF0ZVZhbHVlID0gdHJ1ZSwgdXBkYXRlRmllbGQpIHtcbiAgICB0aGlzLnBhdHRlcm5SYXcgPSBzdHJpbmc7XG4gICAgdGhpcy5wYXR0ZXJuID0gdGhpcy5wYXJzZVBhdHRlcm4oc3RyaW5nKTtcbiAgICB0aGlzLnRyYW5zZm9ybSA9IHRoaXMucGFyc2VUcmFuc2Zvcm0oc3RyaW5nKTtcblxuICAgIGlmICh1cGRhdGVWYWx1ZSkge1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuc2V0VmFsdWUodGhpcy52YWx1ZSk7XG5cbiAgICAgIGlmICh1cGRhdGVGaWVsZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5maWVsZC52YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcGFyc2VQYXR0ZXJuKHN0cmluZykge1xuICAgIHZhciBjaGFyLCBlc2NhcGVkLCBpLCBqLCBsZW4sIHBhdHRlcm47XG5cbiAgICBzd2l0Y2ggKGZhbHNlKSB7XG4gICAgICBjYXNlIHN0cmluZyAhPT0gJ0VNQUlMJzpcbiAgICAgICAgcmV0dXJuIG1hc2tBZGRvbnMuZW1haWxNYXNrLm1hc2s7XG5cbiAgICAgIGNhc2Ugc3RyaW5nICE9PSAnUEhPTkUnOlxuICAgICAgICB0aGlzLnBhdHRlcm5TZXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gcmVwZWF0KCcjJywgTWF0aC5tYXgoNywgdmFsdWUubGVuZ3RoKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5ndWlkZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gJyMnO1xuXG4gICAgICBjYXNlIHN0cmluZyAhPT0gJ05BTUUnOlxuICAgICAgICB0aGlzLnBhdHRlcm5TZXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UodGhpcy5wbGFjZWhvbGRlclJlZ2V4LCAnJykudHJpbSgpO1xuICAgICAgICAgIHJldHVybiByZXBlYXQoJ2EnLCBNYXRoLm1heCgyLCB2YWx1ZS5sZW5ndGgpKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gJ2EnO1xuXG4gICAgICBjYXNlIHN0cmluZyAhPT0gJ0ZVTExOQU1FJzpcbiAgICAgICAgdGhpcy5wYXR0ZXJuU2V0dGVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHNwbGl0O1xuXG4gICAgICAgICAgaWYgKHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnICcpIHtcbiAgICAgICAgICAgIHZhbHVlICs9ICd4JztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzcGxpdCA9IHZhbHVlLnJlcGxhY2UodGhpcy5wbGFjZWhvbGRlclJlZ2V4LCAnJykudHJpbSgpLnNwbGl0KC9cXHMrLyk7XG5cbiAgICAgICAgICBpZiAoc3BsaXQubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHNwbGl0Lm1hcChmdW5jdGlvbiAocGFydCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcGVhdCgnYScsIE1hdGgubWF4KDIsIHBhcnQubGVuZ3RoKSk7XG4gICAgICAgICAgfSkuam9pbignICcpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiAnYSc7XG5cbiAgICAgIGNhc2Ugc3RyaW5nICE9PSAnREFURSc6XG4gICAgICAgIHJldHVybiBbL1xcZC8sIC9cXGQvLCAnLycsIC9cXGQvLCAvXFxkLywgJy8nLCAvXFxkLywgL1xcZC8sIC9cXGQvLCAvXFxkL107XG5cbiAgICAgIGNhc2UgIShzdHJpbmdbMF0gPT09ICdEQVRFJyAmJiBJUy5zdHJpbmcoc3RyaW5nWzFdKSk6XG4gICAgICAgIHJldHVybiBzdHJpbmdbMV0uc3BsaXQoJycpLm1hcChjaGFyID0+IHtcbiAgICAgICAgICBpZiAoUkVHRVgubGV0dGVyLnRlc3QoY2hhcikpIHtcbiAgICAgICAgICAgIHJldHVybiAvXFxkLztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNoYXI7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgY2FzZSBzdHJpbmcgIT09ICdOVU1CRVInOlxuICAgICAgICByZXR1cm4gbWFza0FkZG9ucy5jcmVhdGVOdW1iZXJNYXNrKHtcbiAgICAgICAgICBwcmVmaXg6IHRoaXMuY29uZmlnLnByZWZpeCB8fCAnJyxcbiAgICAgICAgICBzdWZmaXg6IHRoaXMuY29uZmlnLnN1ZmZpeCB8fCAnJyxcbiAgICAgICAgICBpbmNsdWRlVGhvdXNhbmRzU2VwYXJhdG9yOiB0aGlzLmNvbmZpZy5zZXAgPyB0cnVlIDogZmFsc2UsXG4gICAgICAgICAgdGhvdXNhbmRzU2VwYXJhdG9yU3ltYm9sOiBJUy5zdHJpbmcodGhpcy5jb25maWcuc2VwKSA/IHRoaXMuY29uZmlnLnNlcCA6IHZvaWQgMCxcbiAgICAgICAgICBhbGxvd0RlY2ltYWw6IHRoaXMuY29uZmlnLmRlY2ltYWwsXG4gICAgICAgICAgZGVjaW1hbExpbWl0OiBJUy5udW1iZXIodGhpcy5jb25maWcuZGVjaW1hbCkgPyB0aGlzLmNvbmZpZy5kZWNpbWFsIDogdm9pZCAwLFxuICAgICAgICAgIGludGVnZXJMaW1pdDogSVMubnVtYmVyKHRoaXMuY29uZmlnLmxpbWl0KSA/IHRoaXMuY29uZmlnLmxpbWl0IDogdm9pZCAwXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICFJUy5hcnJheShzdHJpbmcpOlxuICAgICAgICByZXR1cm4gc3RyaW5nO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBwYXR0ZXJuID0gW107XG5cbiAgICAgICAgZm9yIChpID0gaiA9IDAsIGxlbiA9IHN0cmluZy5sZW5ndGg7IGogPCBsZW47IGkgPSArK2opIHtcbiAgICAgICAgICBjaGFyID0gc3RyaW5nW2ldO1xuXG4gICAgICAgICAgaWYgKGNoYXIgPT09ICdcXFxcJykge1xuICAgICAgICAgICAgZXNjYXBlZCA9IHRydWU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXR0ZXJuLnB1c2goZXNjYXBlZCA/IGNoYXIgOiB0aGlzLmNoYXJzW2NoYXJdIHx8IGNoYXIpO1xuICAgICAgICAgIGVzY2FwZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXR0ZXJuO1xuICAgIH1cbiAgfVxuXG4gIHBhcnNlVHJhbnNmb3JtKHN0cmluZykge1xuICAgIHN3aXRjaCAoZmFsc2UpIHtcbiAgICAgIGNhc2Ugc3RyaW5nICE9PSAnRU1BSUwnOlxuICAgICAgICByZXR1cm4gbWFza0FkZG9ucy5lbWFpbE1hc2sucGlwZTtcblxuICAgICAgY2FzZSBzdHJpbmcgIT09ICdEQVRFJzpcbiAgICAgICAgcmV0dXJuIG1hc2tBZGRvbnMuY3JlYXRlQXV0b0NvcnJlY3RlZERhdGVQaXBlKCdtbS9kZC95eXl5Jyk7XG5cbiAgICAgIGNhc2UgIShzdHJpbmdbMF0gPT09ICdEQVRFJyAmJiBJUy5zdHJpbmcoc3RyaW5nWzFdKSk6XG4gICAgICAgIHJldHVybiBtYXNrQWRkb25zLmNyZWF0ZUF1dG9Db3JyZWN0ZWREYXRlUGlwZShzdHJpbmdbMV0pO1xuXG4gICAgICBjYXNlICF0aGlzLmNvbmZpZy50cmFuc2Zvcm06XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy50cmFuc2Zvcm07XG4gICAgfVxuICB9XG5cbiAgc2V0VmFsdWUoaW5wdXQpIHtcbiAgICB2YXIgY2FyZXRUcmFwSW5kZXhlcywgY29uZm9ybWVkVmFsdWUsIGluZGV4ZXNPZlBpcGVkQ2hhcnMsIG5ld1BhdHRlcm4sIHBhdHRlcm4sIHN0YXRlLCB0cmFuc2Zvcm1lZDtcblxuICAgIGlmICh0aGlzLnBhdHRlcm5TZXR0ZXIpIHtcbiAgICAgIG5ld1BhdHRlcm4gPSB0aGlzLnBhdHRlcm5TZXR0ZXIoaW5wdXQpIHx8IHRoaXMucGF0dGVybjtcblxuICAgICAgaWYgKG5ld1BhdHRlcm4gIT09IHRoaXMucGF0dGVyblJhdyAmJiBuZXdQYXR0ZXJuICE9PSB0aGlzLnBhdHRlcm4pIHtcbiAgICAgICAgdGhpcy5zZXRQYXR0ZXJuKG5ld1BhdHRlcm4sIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAoe1xuICAgICAgY2FyZXRUcmFwSW5kZXhlcyxcbiAgICAgIHBhdHRlcm5cbiAgICB9ID0gdGhpcy5yZXNvbHZlUGF0dGVybih0aGlzLnBhdHRlcm4sIGlucHV0KSk7XG5cbiAgICBpZiAocGF0dGVybiA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH1cblxuICAgIHRoaXMucHJldlZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICB0aGlzLnByZXZDdXJzb3IgPSB0aGlzLmN1cnNvcjtcbiAgICBzdGF0ZSA9IHRoaXMuZ2V0U3RhdGUocGF0dGVybiwgaW5wdXQpO1xuICAgICh7XG4gICAgICBjb25mb3JtZWRWYWx1ZVxuICAgIH0gPSBtYXNrQ29yZS5jb25mb3JtVG9NYXNrKGlucHV0LCBwYXR0ZXJuLCBzdGF0ZSkpO1xuXG4gICAgaWYgKHRoaXMudHJhbnNmb3JtKSB7XG4gICAgICB0cmFuc2Zvcm1lZCA9IHRoaXMudHJhbnNmb3JtKGNvbmZvcm1lZFZhbHVlLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHRyYW5zZm9ybWVkID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKElTLnN0cmluZyh0cmFuc2Zvcm1lZCkpIHtcbiAgICAgIGNvbmZvcm1lZFZhbHVlID0gdHJhbnNmb3JtZWQ7XG4gICAgfSBlbHNlIGlmIChJUy5vYmplY3QodHJhbnNmb3JtZWQpKSB7XG4gICAgICBpbmRleGVzT2ZQaXBlZENoYXJzID0gdHJhbnNmb3JtZWQuaW5kZXhlc09mUGlwZWRDaGFycztcbiAgICAgIGNvbmZvcm1lZFZhbHVlID0gdHJhbnNmb3JtZWQudmFsdWU7XG4gICAgfVxuXG4gICAgdGhpcy5jdXJzb3IgPSBtYXNrQ29yZS5hZGp1c3RDYXJldFBvc2l0aW9uKGV4dGVuZChzdGF0ZSwge1xuICAgICAgaW5kZXhlc09mUGlwZWRDaGFycyxcbiAgICAgIGNhcmV0VHJhcEluZGV4ZXMsXG4gICAgICBjb25mb3JtZWRWYWx1ZVxuICAgIH0pKTtcbiAgICByZXR1cm4gdGhpcy52YWx1ZSA9IGNvbmZvcm1lZFZhbHVlO1xuICB9XG5cbiAgdmFsaWRhdGUoaW5wdXQpIHtcbiAgICB2YXIgY2hhciwgaSwgaiwgbGVuLCBwYXR0ZXJuO1xuXG4gICAgaWYgKGlucHV0ICE9PSB0aGlzLnZhbHVlICYmIHRoaXMucGF0dGVyblNldHRlcikge1xuICAgICAgcGF0dGVybiA9IHRoaXMucGF0dGVyblNldHRlcihpbnB1dCkgfHwgdGhpcy5wYXR0ZXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXR0ZXJuID0gdGhpcy5yZXNvbHZlZFBhdHRlcm47XG5cbiAgICAgIGlmICghcGF0dGVybikge1xuICAgICAgICAoe1xuICAgICAgICAgIHBhdHRlcm5cbiAgICAgICAgfSA9IHRoaXMucmVzb2x2ZVBhdHRlcm4odGhpcy5wYXR0ZXJuLCBpbnB1dCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXR0ZXJuID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChpID0gaiA9IDAsIGxlbiA9IHBhdHRlcm4ubGVuZ3RoOyBqIDwgbGVuOyBpID0gKytqKSB7XG4gICAgICBjaGFyID0gcGF0dGVybltpXTtcblxuICAgICAgc3dpdGNoIChmYWxzZSkge1xuICAgICAgICBjYXNlICEhaW5wdXRbaV06XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGNhc2UgIShJUy5yZWdleChjaGFyKSAmJiAhY2hhci50ZXN0KGlucHV0W2ldKSk6XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGNhc2UgIShJUy5zdHJpbmcoY2hhcikgJiYgaW5wdXRbaV0gIT09IGNoYXIpOlxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlzRW1wdHkoKSB7XG4gICAgdmFyIGNoYXIsIGksIGlucHV0LCBqLCBsZW4sIHBhdHRlcm47XG4gICAgaW5wdXQgPSB0aGlzLnZhbHVlO1xuICAgIHBhdHRlcm4gPSB0aGlzLnJlc29sdmVkUGF0dGVybjtcblxuICAgIGlmICghcGF0dGVybikge1xuICAgICAgaWYgKHRoaXMucGF0dGVyblNldHRlcikge1xuICAgICAgICBwYXR0ZXJuID0gdGhpcy5wYXR0ZXJuU2V0dGVyKGlucHV0KTtcbiAgICAgIH1cblxuICAgICAgKHtcbiAgICAgICAgcGF0dGVyblxuICAgICAgfSA9IHRoaXMucmVzb2x2ZVBhdHRlcm4ocGF0dGVybiB8fCB0aGlzLnBhdHRlcm4sIGlucHV0KSk7XG4gICAgfVxuXG4gICAgaWYgKGlucHV0ID09PSB0aGlzLmNvbmZpZy5wcmVmaXggfHwgaW5wdXQgPT09IHRoaXMuY29uZmlnLnN1ZmZpeCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZm9yIChpID0gaiA9IDAsIGxlbiA9IHBhdHRlcm4ubGVuZ3RoOyBqIDwgbGVuOyBpID0gKytqKSB7XG4gICAgICBjaGFyID0gcGF0dGVybltpXTtcblxuICAgICAgc3dpdGNoIChmYWxzZSkge1xuICAgICAgICBjYXNlICEhaW5wdXRbaV06XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY2FzZSAhSVMucmVnZXgoY2hhcik6XG4gICAgICAgICAgcmV0dXJuICFjaGFyLnRlc3QoaW5wdXRbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG59O1xudmFyIE1hc2skMSA9IE1hc2s7ZXhwb3J0IGRlZmF1bHQgTWFzayQxOyIsInZhciBDT0xPUlMgPSB7XG4gIHJlZDogJyNjYzQ4MjAnLFxuICBncmVlbjogJyM3MmMzMjInLFxuICBvcmFuZ2U6ICcjZmY5YzAwJyxcbiAgYmxhY2s6ICcjMTgxODE4JyxcbiAgZ3JleV9kYXJrOiAnIzVlNWU1ZScsXG4gIGdyZXk6ICcjOTA5MDkwJyxcbiAgZ3JleV9zZW1pX2xpZ2h0OiAnI2JlYmViZScsXG4gIGdyZXlfbGlnaHQ6ICcjZDNkM2QzJyxcbiAgZ3JleV9saWdodDI6ICcjZGRkZGRkJyxcbiAgZ3JleV9saWdodDM6ICcjZjJmNWY3JyxcbiAgZ3JleV9saWdodDQ6ICcjZTVlNWU1J1xufTtleHBvcnQgZGVmYXVsdCBDT0xPUlM7IiwiaW1wb3J0IERPTSBmcm9tJ3F1aWNrZG9tJztpbXBvcnQge3Nob3J0aGFuZFNpZGVWYWx1ZSxjYWxjUGFkZGluZyxkZWZhdWx0Q29sb3IsaGV4VG9SR0JBfWZyb20nLi4vLi4vaGVscGVycy5qcyc7aW1wb3J0IENPTE9SUyBmcm9tJy4uLy4uL2NvbnN0YW50cy9jb2xvcnMuanMnO3ZhciB0ZXh0RmllbGRUZW1wbGF0ZSA9IERPTS50ZW1wbGF0ZShbJ2RpdicsIHtcbiAgcmVmOiAnZmllbGQnLFxuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBmb250RmFtaWx5OiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5mb250RmFtaWx5O1xuICAgIH0sXG4gICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgJHZpc2libGU6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gICAgfSxcbiAgICAkc2hvd0Vycm9yOiB7XG4gICAgICBhbmltYXRpb246ICcwLjJzIGZpZWxkRXJyb3JTaGFrZSdcbiAgICB9XG4gIH1cbn0sIFsnZGl2Jywge1xuICByZWY6ICdsYWJlbCcsXG4gIHN0eWxlQWZ0ZXJJbnNlcnQ6IHRydWUsXG4gIHN0eWxlOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgekluZGV4OiAxLFxuICAgIHRvcDogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHlsZVBhcnNlZCgnZm9udFNpemUnLCB0cnVlKSAqIDAuNztcbiAgICB9LFxuICAgIGxlZnQ6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgdmFyIHJlZjtcbiAgICAgIHJldHVybiBzaG9ydGhhbmRTaWRlVmFsdWUoZmllbGQuc2V0dGluZ3MucGFkZGluZywgJ2xlZnQnKSArICgoKHJlZiA9IGZpZWxkLmVsLmNoaWxkLmljb24pICE9IG51bGwgPyByZWYud2lkdGggOiB2b2lkIDApIHx8IDApO1xuICAgIH0sXG4gICAgcGFkZGluZzogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICByZXR1cm4gYDAgJHtmaWVsZC5zZXR0aW5ncy5pbnB1dFBhZGRpbmd9cHhgO1xuICAgIH0sXG4gICAgZm9udEZhbWlseTogJ2luaGVyaXQnLFxuICAgIGZvbnRTaXplOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5sYWJlbFNpemUgfHwgZmllbGQuc2V0dGluZ3MuZm9udFNpemUgKiAoMTEgLyAxNCk7XG4gICAgfSxcbiAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgbGluZUhlaWdodDogMSxcbiAgICBjb2xvcjogQ09MT1JTLmdyZXksXG4gICAgb3BhY2l0eTogMCxcbiAgICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAwLjJzLCBjb2xvciAwLjJzJyxcbiAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICRmaWxsZWQ6IHtcbiAgICAgICRzaG93TGFiZWw6IHtcbiAgICAgICAgb3BhY2l0eTogMVxuICAgICAgfVxuICAgIH0sXG4gICAgJGZvY3VzOiB7XG4gICAgICBjb2xvcjogQ09MT1JTLm9yYW5nZVxuICAgIH0sXG4gICAgJHNob3dFcnJvcjoge1xuICAgICAgY29sb3I6IENPTE9SUy5yZWRcbiAgICB9XG4gIH1cbn1dLCBbJ2RpdicsIHtcbiAgcmVmOiAnaW5uZXJ3cmFwJyxcbiAgc3R5bGU6IHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBoZWlnaHQ6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLnNldHRpbmdzLmhlaWdodDtcbiAgICB9LFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICBib3JkZXJXaWR0aDogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICByZXR1cm4gZmllbGQuc2V0dGluZ3MuYm9yZGVyO1xuICAgIH0sXG4gICAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gICAgYm9yZGVyQ29sb3I6IENPTE9SUy5ncmV5X2xpZ2h0LFxuICAgIGJvcmRlclJhZGl1czogJzJweCcsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgZm9udEZhbWlseTogJ2luaGVyaXQnLFxuICAgIHRyYW5zaXRpb246ICdib3JkZXItY29sb3IgMC4ycycsXG4gICAgJGZvY3VzOiB7XG4gICAgICBib3JkZXJDb2xvcjogQ09MT1JTLm9yYW5nZVxuICAgIH0sXG4gICAgJHNob3dFcnJvcjoge1xuICAgICAgYm9yZGVyQ29sb3I6IENPTE9SUy5yZWRcbiAgICB9LFxuICAgICRkaXNhYmxlZDoge1xuICAgICAgYm9yZGVyQ29sb3I6IENPTE9SUy5ncmV5X2xpZ2h0LFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMuZ3JleV9saWdodFxuICAgIH1cbiAgfVxufSwgWydpbnB1dCcsIHtcbiAgcmVmOiAnaW5wdXQnLFxuICB0eXBlOiAndGV4dCcsXG4gIHN0eWxlQWZ0ZXJJbnNlcnQ6IHRydWUsXG4gIHN0eWxlOiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgekluZGV4OiAzLFxuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgIGhlaWdodDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50LnN0eWxlU2FmZSgnaGVpZ2h0JywgMSkgfHwgdGhpcy5wYXJlbnQuc3R5bGVTYWZlKCdoZWlnaHQnKTtcbiAgICB9LFxuICAgIHdpZHRoOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHZhciBpY29uU2libGluZywgaW5wdXRTaWJsaW5nLCBwYWRkaW5nLCBwYWRkaW5nTGVmdCwgcGFkZGluZ1JpZ2h0LCBzdWJ0cmFjdCwgd2lkdGg7XG5cbiAgICAgIGlmICghZmllbGQuc2V0dGluZ3MuYXV0b1dpZHRoKSB7XG4gICAgICAgIHN1YnRyYWN0ID0gMDtcblxuICAgICAgICBpZiAoaWNvblNpYmxpbmcgPSBmaWVsZC5lbC5jaGlsZC5pY29uKSB7XG4gICAgICAgICAgc3VidHJhY3QgKz0gaWNvblNpYmxpbmcud2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5wdXRTaWJsaW5nID0gZmllbGQuZWwuY2hpbGRbZmllbGQuc2V0dGluZ3MuaW5wdXRTaWJsaW5nXSkge1xuICAgICAgICAgIHdpZHRoID0gaW5wdXRTaWJsaW5nLnN0eWxlUGFyc2VkKCd3aWR0aCcsIDEpIHx8IDA7XG4gICAgICAgICAgcGFkZGluZyA9IGlucHV0U2libGluZy5zdHlsZVBhcnNlZCgncGFkZGluZycsIDEpIHx8IDA7XG4gICAgICAgICAgcGFkZGluZ0xlZnQgPSBpbnB1dFNpYmxpbmcuc3R5bGVQYXJzZWQoJ3BhZGRpbmdMZWZ0JywgMSkgfHwgcGFkZGluZyB8fCAwO1xuICAgICAgICAgIHBhZGRpbmdSaWdodCA9IGlucHV0U2libGluZy5zdHlsZVBhcnNlZCgncGFkZGluZ1JpZ2h0JywgMSkgfHwgcGFkZGluZyB8fCAwO1xuICAgICAgICAgIHN1YnRyYWN0ICs9IHdpZHRoICsgcGFkZGluZ0xlZnQgKyBwYWRkaW5nUmlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYGNhbGMoMTAwJSAtICR7c3VidHJhY3R9cHgpYDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHBhZGRpbmc6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgaWYgKHRoaXMucGFkZGluZyA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMucGFkZGluZyA9IE1hdGgubWF4KDAsIGNhbGNQYWRkaW5nKGZpZWxkLnNldHRpbmdzLmhlaWdodCwgMTQpIC0gMyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBgJHt0aGlzLnBhZGRpbmd9cHggJHtmaWVsZC5zZXR0aW5ncy5pbnB1dFBhZGRpbmd9cHhgO1xuICAgIH0sXG4gICAgbWFyZ2luOiAnMCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGFwcGVhcmFuY2U6ICdub25lJyxcbiAgICBib3JkZXI6ICdub25lJyxcbiAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgZm9udEZhbWlseTogJ2luaGVyaXQnLFxuICAgIGZvbnRTaXplOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5mb250U2l6ZTtcbiAgICB9LFxuICAgIGNvbG9yOiBDT0xPUlMuYmxhY2ssXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgYm94U2hhZG93OiAnbm9uZScsXG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgYmFja2dyb3VuZENsaXA6ICdjb250ZW50LWJveCcsXG4gICAgLy8gc2VtaS1maXggZm9yIHllbGxvdyBhdXRvZmlsbCBiYWNrZ3JvdW5kXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgwKScsXG4gICAgdHJhbnNpdGlvbjogJ3RyYW5zZm9ybSAwLjJzLCAtd2Via2l0LXRyYW5zZm9ybSAwLjJzJyxcbiAgICAkZGlzYWJsZWQ6IHtcbiAgICAgIGN1cnNvcjogJ25vdC1hbGxvd2VkJ1xuICAgIH0sXG4gICAgJGZpbGxlZDoge1xuICAgICAgJHNob3dMYWJlbDoge1xuICAgICAgICB0cmFuc2Zvcm06IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICAgIHZhciBsYWJlbCwgdG90YWxIZWlnaHQsIHRyYW5zbGF0aW9uLCB3b3JrYWJsZUhlaWdodDtcblxuICAgICAgICAgIGlmICh0aGlzLnRyYW5zbGF0aW9uICE9IG51bGwgfHwgIShsYWJlbCA9IGZpZWxkLmVsLmNoaWxkLmxhYmVsKSB8fCBsYWJlbC5zdHlsZVNhZmUoJ3Bvc2l0aW9uJywgMSkgIT09ICdhYnNvbHV0ZScpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0aW9uO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRvdGFsSGVpZ2h0ID0gdGhpcy5wYXJlbnQuc3R5bGVQYXJzZWQoJ2hlaWdodCcsIDEpO1xuICAgICAgICAgIHdvcmthYmxlSGVpZ2h0ID0gdG90YWxIZWlnaHQgLSAobGFiZWwuc3R5bGVQYXJzZWQoJ2ZvbnRTaXplJywgMSkgKyBsYWJlbC5zdHlsZVBhcnNlZCgndG9wJywgMSkgKiAyKTtcbiAgICAgICAgICB0cmFuc2xhdGlvbiA9IE1hdGgubWF4KDAsIE1hdGguZmxvb3IoKHRvdGFsSGVpZ2h0IC0gd29ya2FibGVIZWlnaHQpIC8gNCkpO1xuICAgICAgICAgIHJldHVybiBgdHJhbnNsYXRlWSgke3RyYW5zbGF0aW9ufXB4KWA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1dLCBbJ2RpdicsIHtcbiAgcmVmOiAncGxhY2Vob2xkZXInLFxuICBzdHlsZUFmdGVySW5zZXJ0OiB0cnVlLFxuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHpJbmRleDogMixcbiAgICB0b3A6ICcwcHgnLFxuICAgIGxlZnQ6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgdmFyIHJlZjtcbiAgICAgIHJldHVybiAoKHJlZiA9IGZpZWxkLmVsLmNoaWxkLmljb24pICE9IG51bGwgPyByZWYud2lkdGggOiB2b2lkIDApIHx8IDA7XG4gICAgfSxcbiAgICBmb250RmFtaWx5OiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5lbC5jaGlsZC5pbnB1dC5zdHlsZVNhZmUoJ2ZvbnRGYW1pbHknLCAxKTtcbiAgICB9LFxuICAgIGZvbnRTaXplOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5lbC5jaGlsZC5pbnB1dC5zdHlsZVNhZmUoJ2ZvbnRTaXplJywgMSk7XG4gICAgfSxcbiAgICBwYWRkaW5nOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHZhciBob3JpeiwgdmVydGk7XG4gICAgICB2ZXJ0aSA9IGZpZWxkLmVsLmNoaWxkLmlucHV0LnN0eWxlUGFyc2VkKCdwYWRkaW5nVG9wJywgMSkgfHwgZmllbGQuZWwuY2hpbGQuaW5wdXQuc3R5bGVQYXJzZWQoJ3BhZGRpbmdUb3AnKTtcbiAgICAgIGhvcml6ID0gZmllbGQuZWwuY2hpbGQuaW5wdXQuc3R5bGVQYXJzZWQoJ3BhZGRpbmdMZWZ0JywgMSkgfHwgZmllbGQuZWwuY2hpbGQuaW5wdXQuc3R5bGVQYXJzZWQoJ3BhZGRpbmdMZWZ0Jyk7XG4gICAgICByZXR1cm4gYCR7dmVydGkgKyAzfXB4ICR7aG9yaXp9cHhgO1xuICAgIH0sXG4gICAgY29sb3I6IENPTE9SUy5ibGFjayxcbiAgICBvcGFjaXR5OiAwLjUsXG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDApJyxcbiAgICB0cmFuc2l0aW9uOiAndHJhbnNmb3JtIDAuMnMsIC13ZWJraXQtdHJhbnNmb3JtIDAuMnMnLFxuICAgICRmaWxsZWQ6IHtcbiAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgICAgJHNob3dMYWJlbDoge1xuICAgICAgICB0cmFuc2Zvcm06IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICAgIHJldHVybiBmaWVsZC5lbC5jaGlsZC5pbnB1dC5yYXcuc3R5bGUudHJhbnNmb3JtO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XV0sIFsnZGl2Jywge1xuICByZWY6ICdoZWxwJyxcbiAgc3R5bGVBZnRlckluc2VydDogdHJ1ZSxcbiAgc3R5bGU6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6ICcxMTAlJyxcbiAgICBsZWZ0OiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBzaG9ydGhhbmRTaWRlVmFsdWUoZmllbGQuc2V0dGluZ3MucGFkZGluZywgJ2xlZnQnKTtcbiAgICB9LFxuICAgIGZvbnRGYW1pbHk6ICdpbmhlcml0JyxcbiAgICBmb250U2l6ZTogJzExcHgnLFxuICAgIGNvbG9yOiBDT0xPUlMuZ3JleSxcbiAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgJHNob3dFcnJvcjoge1xuICAgICAgY29sb3I6IENPTE9SUy5yZWRcbiAgICB9LFxuICAgICRzaG93SGVscDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH1cbiAgfVxufV1dKTtcbnZhciBpY29uID0gRE9NLnRlbXBsYXRlKFsnZGl2Jywge1xuICByZWY6ICdpY29uJyxcbiAgc3R5bGVBZnRlckluc2VydDogdHJ1ZSxcbiAgc3R5bGU6IHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICB6SW5kZXg6IDIsXG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgd2lkdGg6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLnNldHRpbmdzLmljb25TaXplO1xuICAgIH0sXG4gICAgaGVpZ2h0OiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5pY29uU2l6ZTtcbiAgICB9LFxuICAgIGZvbnRTaXplOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5pY29uU2l6ZTtcbiAgICB9LFxuICAgIHBhZGRpbmdMZWZ0OiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5pbnB1dFBhZGRpbmc7XG4gICAgfSxcbiAgICBwYWRkaW5nVG9wOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcmVudC5zdHlsZVBhcnNlZCgnaGVpZ2h0JywgMSkgLyAyIC0gZmllbGQuc2V0dGluZ3MuaWNvblNpemUgLyAyO1xuICAgIH0sXG4gICAgbGluZUhlaWdodDogJzFlbScsXG4gICAgdXNlclNlbGVjdDogJ25vbmUnXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICB3aWR0aDoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbnNlcnRlZCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJhdy5vZmZzZXRXaWR0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zdHlsZVBhcnNlZCgnd2lkdGgnLCAxKSB8fCB0aGlzLnJlbGF0ZWQuc2V0dGluZ3MuaWNvblNpemU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1dKTsgLy8gQHN0eWxlUGFyc2VkKCd3aWR0aCcsMSkgb3IgQHJhdy5vZmZzZXRXaWR0aCBvciBAcmVsYXRlZC5zZXR0aW5ncy5pY29uU2l6ZSBvciAwXG5cbnZhciBjaGVja21hcmsgPSBET00udGVtcGxhdGUoWydkaXYnLCB7XG4gIHJlZjogJ2NoZWNrbWFyaycsXG4gIHN0eWxlQWZ0ZXJJbnNlcnQ6IHRydWUsXG4gIHN0eWxlOiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgekluZGV4OiA0LFxuICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICB3aWR0aDogMjYsXG4gICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgcGFkZGluZ1RvcDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50LnN0eWxlUGFyc2VkKCdoZWlnaHQnLCAxKSAvIDIgLSAxMztcbiAgICB9LFxuICAgIHBhZGRpbmdSaWdodDogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICByZXR1cm4gZmllbGQuc2V0dGluZ3MuaW5wdXRQYWRkaW5nO1xuICAgIH0sXG4gICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgJGZpbGxlZDoge1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaydcbiAgICB9XG4gIH1cbn0sIFsnZGl2Jywge1xuICByZWY6ICdjaGVja21hcmtfaW5uZXJ3cmFwJyxcbiAgc3R5bGU6IHtcbiAgICB3aWR0aDogJzIwcHgnLFxuICAgIGhlaWdodDogJzIwcHgnLFxuICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgYm9yZGVyV2lkdGg6ICczcHgnLFxuICAgIGJvcmRlclN0eWxlOiAnc29saWQnLFxuICAgIGJvcmRlckNvbG9yOiBDT0xPUlMuZ3JlZW4sXG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMC44KScsXG4gICAgLy8gdHJhbnNmb3JtT3JpZ2luOiAnMTAwJSAwJ1xuICAgICRzaG93RXJyb3I6IHtcbiAgICAgIGJvcmRlckNvbG9yOiBDT0xPUlMucmVkXG4gICAgfVxuICB9XG59LCBbJ2RpdicsIHtcbiAgcmVmOiAnY2hlY2ttYXJrX21hc2sxJyxcbiAgc3R5bGVBZnRlckluc2VydDogdHJ1ZSxcbiAgc3R5bGU6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6ICctNHB4JyxcbiAgICBsZWZ0OiAnLTEwcHgnLFxuICAgIHdpZHRoOiAnMTVweCcsXG4gICAgaGVpZ2h0OiAnMzBweCcsXG4gICAgYm9yZGVyUmFkaXVzOiAnMzBweCAwIDAgMzBweCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0Q29sb3IoZmllbGQuZWxzLmlubmVyd3JhcC5zdHlsZVNhZmUoJ2JhY2tncm91bmRDb2xvcicsIDEpLCAnd2hpdGUnKTtcbiAgICB9LFxuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgtNDVkZWcpJyxcbiAgICB0cmFuc2Zvcm1PcmlnaW46ICcxNXB4IDE1cHggMCdcbiAgfVxufV0sIFsnZGl2Jywge1xuICByZWY6ICdjaGVja21hcmtfbWFzazInLFxuICBzdHlsZUFmdGVySW5zZXJ0OiB0cnVlLFxuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogJy01cHgnLFxuICAgIGxlZnQ6ICc4cHgnLFxuICAgIHdpZHRoOiAnMTVweCcsXG4gICAgaGVpZ2h0OiAnMzBweCcsXG4gICAgYm9yZGVyUmFkaXVzOiAnMCAzMHB4IDMwcHggMCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0Q29sb3IoZmllbGQuZWxzLmlubmVyd3JhcC5zdHlsZVNhZmUoJ2JhY2tncm91bmRDb2xvcicsIDEpLCAnd2hpdGUnKTtcbiAgICB9LFxuICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgtNDVkZWcpJyxcbiAgICB0cmFuc2Zvcm1PcmlnaW46ICcwIDE1cHggMCcsXG4gICAgJGZpbGxlZDoge1xuICAgICAgYW5pbWF0aW9uOiAnNC4yNXMgZWFzZS1pbiBjaGVja21hcmtSb3RhdGVQbGFjZWhvbGRlcicsXG4gICAgICAkaW52YWxpZDoge1xuICAgICAgICBhbmltYXRpb246ICcnXG4gICAgICB9XG4gICAgfVxuICB9XG59XSwgWydkaXYnLCB7XG4gIHJlZjogJ2NoZWNrbWFya19saW5lV3JhcHBlcicsXG4gIHN0eWxlOiB7XG4gICAgJGZpbGxlZDoge1xuICAgICAgJGludmFsaWQ6IHtcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIHpJbmRleDogMixcbiAgICAgICAgYW5pbWF0aW9uOiAnMC41NXMgY2hlY2ttYXJrQW5pbWF0ZUVycm9yJyxcbiAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnNTAlIDEwcHgnXG4gICAgICB9XG4gICAgfVxuICB9XG59LCBbJ2RpdicsIHtcbiAgcmVmOiAnY2hlY2ttYXJrX2xpbmVTaG9ydCcsXG4gIHN0eWxlOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgekluZGV4OiAyLFxuICAgIHRvcDogJzEwcHgnLFxuICAgIGxlZnQ6ICczcHgnLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgd2lkdGg6ICc4cHgnLFxuICAgIGhlaWdodDogJzNweCcsXG4gICAgYm9yZGVyUmFkaXVzOiAnMnB4JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5ncmVlbixcbiAgICB0cmFuc2Zvcm06ICdyb3RhdGUoNDVkZWcpJyxcbiAgICAkZmlsbGVkOiB7XG4gICAgICBhbmltYXRpb246ICcwLjc1cyBjaGVja21hcmtBbmltYXRlU3VjY2Vzc1RpcCdcbiAgICB9LFxuICAgICRpbnZhbGlkOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5yZWQsXG4gICAgICBsZWZ0OiAnNHB4JyxcbiAgICAgIHRvcDogJzhweCcsXG4gICAgICB3aWR0aDogJzEycHgnLFxuICAgICAgJGZpbGxlZDoge1xuICAgICAgICBhbmltYXRpb246ICcnXG4gICAgICB9XG4gICAgfVxuICB9XG59XSwgWydkaXYnLCB7XG4gIHJlZjogJ2NoZWNrbWFya19saW5lTG9uZycsXG4gIHN0eWxlOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgekluZGV4OiAyLFxuICAgIHRvcDogJzhweCcsXG4gICAgcmlnaHQ6ICcycHgnLFxuICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgd2lkdGg6ICcxMnB4JyxcbiAgICBoZWlnaHQ6ICczcHgnLFxuICAgIGJvcmRlclJhZGl1czogJzJweCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiBDT0xPUlMuZ3JlZW4sXG4gICAgdHJhbnNmb3JtOiAncm90YXRlKC00NWRlZyknLFxuICAgICRmaWxsZWQ6IHtcbiAgICAgIGFuaW1hdGlvbjogJzAuNzVzIGNoZWNrbWFya0FuaW1hdGVTdWNjZXNzTG9uZydcbiAgICB9LFxuICAgICRpbnZhbGlkOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5yZWQsXG4gICAgICB0b3A6ICc4cHgnLFxuICAgICAgbGVmdDogJzRweCcsXG4gICAgICByaWdodDogJ2F1dG8nLFxuICAgICAgJGZpbGxlZDoge1xuICAgICAgICBhbmltYXRpb246ICcnXG4gICAgICB9XG4gICAgfVxuICB9XG59XV0sIFsnZGl2Jywge1xuICByZWY6ICdjaGVja21hcmtfcGxhY2Vob2xkZXInLFxuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHpJbmRleDogMixcbiAgICB0b3A6ICctNHB4JyxcbiAgICBsZWZ0OiAnLTNweCcsXG4gICAgd2lkdGg6ICcyMHB4JyxcbiAgICBoZWlnaHQ6ICcyMHB4JyxcbiAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgIGJvcmRlcldpZHRoOiAnM3B4JyxcbiAgICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgICBib3JkZXJDb2xvcjogaGV4VG9SR0JBKENPTE9SUy5ncmVlbiwgMC40KSxcbiAgICAkaW52YWxpZDoge1xuICAgICAgYm9yZGVyQ29sb3I6IGhleFRvUkdCQShDT0xPUlMucmVkLCAwLjQpXG4gICAgfVxuICB9XG59XSwgWydkaXYnLCB7XG4gIHJlZjogJ2NoZWNrbWFya19wYXRjaCcsXG4gIHN0eWxlQWZ0ZXJJbnNlcnQ6IHRydWUsXG4gIHN0eWxlOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgekluZGV4OiAxLFxuICAgIHRvcDogJy0ycHgnLFxuICAgIGxlZnQ6ICc2cHgnLFxuICAgIHdpZHRoOiAnNHB4JyxcbiAgICBoZWlnaHQ6ICcyOHB4JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRDb2xvcihmaWVsZC5lbHMuaW5uZXJ3cmFwLnN0eWxlU2FmZSgnYmFja2dyb3VuZENvbG9yJywgMSksICd3aGl0ZScpO1xuICAgIH0sXG4gICAgdHJhbnNmb3JtOiAncm90YXRlKC00NWRlZyknXG4gIH1cbn1dXV0pO3ZhciB0ZW1wbGF0ZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDogdGV4dEZpZWxkVGVtcGxhdGUsaWNvbjogaWNvbixjaGVja21hcms6IGNoZWNrbWFya30pO2V4cG9ydHt0ZXh0RmllbGRUZW1wbGF0ZSBhcyBhLHRlbXBsYXRlcyBhcyBiLGljb24gYXMgYyxjaGVja21hcmsgYXMgZH07IiwidmFyIGRlZmF1bHRzID0ge1xuICBwbGFjZWhvbGRlcjogdHJ1ZSxcbiAgdmFsaWRXaGVuSXNDaG9pY2U6IGZhbHNlLFxuICB2YWxpZFdoZW5SZWdleDogZmFsc2UsXG4gIGF1dG9XaWR0aDogZmFsc2UsXG4gIG1heFdpZHRoOiAnMTAwJScsXG4gIG1pbldpZHRoOiAyLFxuICBoZWlnaHQ6IDQ2LFxuICBjaGVja21hcms6IHRydWUsXG4gIGtleWJvYXJkOiAndGV4dCcsXG4gIGRyb3Bkb3duOiB7XG4gICAgbG9ja1Njcm9sbDogZmFsc2VcbiAgfSxcbiAgY2hvaWNlczogbnVsbCxcbiAgbWluTGVuZ3RoOiBudWxsLFxuICBtYXhMZW5ndGg6IG51bGwsXG4gIGlucHV0U2libGluZzogJ2NoZWNrbWFyaycsXG4gIG1hc2s6IHtcbiAgICBwYXR0ZXJuOiBmYWxzZSxcbiAgICBwbGFjZWhvbGRlcjogJ18nLFxuICAgIGd1aWRlOiB0cnVlLFxuICAgIGN1c3RvbVBhdHRlcm5zOiBmYWxzZVxuICB9XG59O2V4cG9ydCBkZWZhdWx0IGRlZmF1bHRzOyIsImltcG9ydCdAZGFuaWVsa2FsZW4vaXMnO2ltcG9ydCBJUyBmcm9tJy4uLy4uL2NoZWNrcy5qcyc7aW1wb3J0IERPTSBmcm9tJ3F1aWNrZG9tJztpbXBvcnQgU2ltcGx5QmluZCBmcm9tJ0BkYW5pZWxrYWxlbi9zaW1wbHliaW5kJztpbXBvcnQgUkVHRVggZnJvbScuLi8uLi9jb25zdGFudHMvcmVnZXguanMnO2ltcG9ydCB7ZnV6enlNYXRjaCxnZXRJbmRleE9mRmlyc3REaWZmLGluY2x1ZGVzfWZyb20nLi4vLi4vaGVscGVycy5qcyc7aW1wb3J0IGV4dGVuZCBmcm9tJ3NtYXJ0LWV4dGVuZCc7aW1wb3J0J2Zhc3Rkb20nO2ltcG9ydCcuLi8uLi9jb21wb25lbnRzL2NvbmRpdGlvbi5qcyc7aW1wb3J0Jy4uLy4uL2ZpZWxkL3RyYW5zZm9ybVNldHRpbmdzLmpzJztpbXBvcnQnLi4vLi4vZmllbGQvZ2xvYmFsRGVmYXVsdHMuanMnO2ltcG9ydCBGaWVsZCBmcm9tJy4uLy4uL2ZpZWxkL2luZGV4LmpzJztpbXBvcnQgS0VZQ09ERVMgZnJvbScuLi8uLi9jb25zdGFudHMva2V5Q29kZXMuanMnO2ltcG9ydCcuLi8uLi9zdmcvY2hlY2ttYXJrLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2FuZ2xlRG93bi5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9jYXJldFVwLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2NhcmV0RG93bi5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9wbHVzLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2Nsb25lLmpzJztpbXBvcnQnLi4vLi4vc3ZnL3JlbW92ZS5qcyc7aW1wb3J0Jy4uLy4uL2NvbXBvbmVudHMvZHJvcGRvd24vdGVtcGxhdGUtYjk2MWY4MWYuanMnO2ltcG9ydCcuLi8uLi9jb21wb25lbnRzL2Ryb3Bkb3duL2RlZmF1bHRzLmpzJztpbXBvcnQgRHJvcGRvd24gZnJvbScuLi8uLi9jb21wb25lbnRzL2Ryb3Bkb3duL2luZGV4LmpzJztpbXBvcnQndGV4dC1tYXNrLWNvcmUnO2ltcG9ydCd0ZXh0LW1hc2stYWRkb25zJztpbXBvcnQgTWFzayBmcm9tJy4uLy4uL2NvbXBvbmVudHMvbWFzay5qcyc7aW1wb3J0Jy4uLy4uL2NvbnN0YW50cy9jb2xvcnMuanMnO2ltcG9ydCB7YSBhcyB0ZXh0RmllbGRUZW1wbGF0ZSxiIGFzIHRlbXBsYXRlc31mcm9tJy4vdGVtcGxhdGUtMjMzZTk0MTMuanMnO2ltcG9ydCBkZWZhdWx0cyBmcm9tJy4vZGVmYXVsdHMuanMnO3ZhciBUZXh0RmllbGQ7XG5cblRleHRGaWVsZCA9IGZ1bmN0aW9uICgpIHtcbiAgY2xhc3MgVGV4dEZpZWxkIGV4dGVuZHMgRmllbGQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcblxuICAgICAgaWYgKHRoaXMuX3ZhbHVlID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSAnJztcbiAgICAgIH1cblxuICAgICAgdGhpcy5zdGF0ZS50eXBpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuY3Vyc29yID0ge1xuICAgICAgICBwcmV2OiAwLFxuICAgICAgICBjdXJyZW50OiAwXG4gICAgICB9O1xuXG4gICAgICBpZiAoIXRoaXMuc2V0dGluZ3MudmFsaWRXaGVuUmVnZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3Mua2V5Ym9hcmQgPT09ICdlbWFpbCcgJiYgdGhpcy5zZXR0aW5ncy5yZXF1aXJlZCkge1xuICAgICAgICAgIHRoaXMuc2V0dGluZ3MudmFsaWRXaGVuUmVnZXggPSBSRUdFWC5lbWFpbDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNldHRpbmdzLm1hc2sgPT09ICdOQU1FJyB8fCB0aGlzLnNldHRpbmdzLm1hc2sucGF0dGVybiA9PT0gJ05BTUUnKSB7XG4gICAgICAgICAgdGhpcy5zZXR0aW5ncy52YWxpZFdoZW5SZWdleCA9IC9eW2EtekEtWl17Mn0vO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2V0dGluZ3MubWFzayA9PT0gJ0ZVTExOQU1FJyB8fCB0aGlzLnNldHRpbmdzLm1hc2sucGF0dGVybiA9PT0gJ0ZVTExOQU1FJykge1xuICAgICAgICAgIHRoaXMuc2V0dGluZ3MudmFsaWRXaGVuUmVnZXggPSAvXlthLXpBLVpdK1xccytbYS16QS1aXSsvO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5tYXNrLnBhdHRlcm4pIHtcbiAgICAgICAgaWYgKElTLnN0cmluZyh0aGlzLnNldHRpbmdzLm1hc2spKSB7XG4gICAgICAgICAgdGhpcy5zZXR0aW5ncy5tYXNrID0gZXh0ZW5kLmRlZXAuY2xvbmUodGhpcy5kZWZhdWx0cy5tYXNrLCB7XG4gICAgICAgICAgICBwYXR0ZXJuOiB0aGlzLnNldHRpbmdzLm1hc2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChJUy5vYmplY3QodGhpcy5zZXR0aW5ncy5tYXNrKSkge1xuICAgICAgICAgIHRoaXMuc2V0dGluZ3MubWFzay5wYXR0ZXJuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnNldHRpbmdzLmtleWJvYXJkKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnREFURSc7XG5cbiAgICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ05VTUJFUic7XG5cbiAgICAgICAgICAgICAgY2FzZSAncGhvbmUnOlxuICAgICAgICAgICAgICBjYXNlICd0ZWwnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnUEhPTkUnO1xuXG4gICAgICAgICAgICAgIGNhc2UgJ2VtYWlsJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0VNQUlMJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubWFzay5wYXR0ZXJuKSB7XG4gICAgICAgIHRoaXMubWFzayA9IG5ldyBNYXNrKHRoaXMsIHRoaXMuc2V0dGluZ3MubWFzayk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NyZWF0ZUVsZW1lbnRzKCk7XG5cbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzKCk7XG5cbiAgICAgIHRoaXMuX2NvbnN0cnVjdG9yRW5kKCk7XG4gICAgfVxuXG4gICAgX2dldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuZHJvcGRvd24gJiYgdGhpcy5zZWxlY3RlZCAmJiB0aGlzLl92YWx1ZSA9PT0gdGhpcy5zZWxlY3RlZC5sYWJlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZC52YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfc2V0VmFsdWUobmV3VmFsdWUpIHtcbiAgICAgIGlmIChJUy5zdHJpbmcobmV3VmFsdWUpIHx8IElTLm51bWJlcihuZXdWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBTdHJpbmcobmV3VmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWUgPSB0aGlzLm1hc2sgPyB0aGlzLm1hc2suc2V0VmFsdWUobmV3VmFsdWUpIDogbmV3VmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3JlY2FsY0Rpc3BsYXkoKSB7XG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlID0gdGhpcy5fdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2NyZWF0ZUVsZW1lbnRzKCkge1xuICAgICAgdmFyIGdsb2JhbE9wdHM7XG4gICAgICBnbG9iYWxPcHRzID0ge1xuICAgICAgICByZWxhdGVkSW5zdGFuY2U6IHRoaXNcbiAgICAgIH07XG4gICAgICB0aGlzLmVsID0gdGhpcy50ZW1wbGF0ZS5zcGF3bih0aGlzLnNldHRpbmdzLnRlbXBsYXRlcy5kZWZhdWx0LCBnbG9iYWxPcHRzKTtcblxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuY2hvaWNlcykge1xuICAgICAgICB0aGlzLmRyb3Bkb3duID0gbmV3IERyb3Bkb3duKHRoaXMuc2V0dGluZ3MuY2hvaWNlcywgdGhpcyk7XG4gICAgICAgIHRoaXMuZHJvcGRvd24uYXBwZW5kVG8odGhpcy5lbC5jaGlsZC5pbm5lcndyYXApO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5pY29uKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGVzLmljb24uc3Bhd24odGhpcy5zZXR0aW5ncy50ZW1wbGF0ZXMuaWNvbiwgZ2xvYmFsT3B0cykuYXBwZW5kKHRoaXMuc2V0dGluZ3MuaWNvbikuaW5zZXJ0QmVmb3JlKHRoaXMuZWwuY2hpbGQuaW5wdXQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5jaGVja21hcmspIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZXMuY2hlY2ttYXJrLnNwYXduKHRoaXMuc2V0dGluZ3MudGVtcGxhdGVzLmNoZWNrbWFyaywgZ2xvYmFsT3B0cykuaW5zZXJ0QWZ0ZXIodGhpcy5lbC5jaGlsZC5pbnB1dCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZWwuY2hpbGQuaW5wdXQucHJvcCgndHlwZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnNldHRpbmdzLmtleWJvYXJkKSB7XG4gICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICBjYXNlICd0ZWwnOlxuICAgICAgICAgIGNhc2UgJ3Bob25lJzpcbiAgICAgICAgICAgIHJldHVybiAndGVsJztcblxuICAgICAgICAgIGNhc2UgJ3Bhc3N3b3JkJzpcbiAgICAgICAgICAgIHJldHVybiAncGFzc3dvcmQnO1xuXG4gICAgICAgICAgY2FzZSAndXJsJzpcbiAgICAgICAgICAgIHJldHVybiAndXJsJztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyB3aGVuICdlbWFpbCcgdGhlbiAnZW1haWwnXG4gICAgICAgICAgICByZXR1cm4gJ3RleHQnO1xuICAgICAgICB9XG4gICAgICB9LmNhbGwodGhpcykpO1xuICAgICAgdGhpcy5lbC5zdGF0ZSgnaGFzTGFiZWwnLCB0aGlzLnNldHRpbmdzLmxhYmVsKTtcbiAgICAgIHRoaXMuZWwuY2hpbGQuaW5uZXJ3cmFwLnJhdy5fcXVpY2tGaWVsZCA9IHRoaXMuZWwuY2hpbGQuaW5wdXQucmF3Ll9xdWlja0ZpZWxkID0gdGhpcztcbiAgICAgIHJldHVybiB0aGlzLmVsLmNoaWxkZjtcbiAgICB9XG5cbiAgICBfYXR0YWNoQmluZGluZ3MoKSB7XG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5nc19lbFN0YXRlKCk7XG5cbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzX2Rpc3BsYXkoKTtcblxuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3NfZGlzcGxheV9hdXRvV2lkdGgoKTtcblxuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3NfdmFsdWUoKTtcblxuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3NfYXV0b2NvbXBsZXRlKCk7XG5cbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzX3N0YXRlVHJpZ2dlcnMoKTtcbiAgICB9XG5cbiAgICBfYXR0YWNoQmluZGluZ3NfZWxTdGF0ZSgpIHtcbiAgICAgIFNpbXBseUJpbmQoJ3Zpc2libGUnKS5vZih0aGlzLnN0YXRlKS50byh2aXNpYmxlID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc3RhdGUoJ3Zpc2libGUnLCB2aXNpYmxlKTtcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnaG92ZXJlZCcpLm9mKHRoaXMuc3RhdGUpLnRvKGhvdmVyZWQgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zdGF0ZSgnaG92ZXInLCBob3ZlcmVkKTtcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnZm9jdXNlZCcpLm9mKHRoaXMuc3RhdGUpLnRvKGZvY3VzZWQgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zdGF0ZSgnZm9jdXMnLCBmb2N1c2VkKTtcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnZmlsbGVkJykub2YodGhpcy5zdGF0ZSkudG8oZmlsbGVkID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc3RhdGUoJ2ZpbGxlZCcsIGZpbGxlZCk7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ2Rpc2FibGVkJykub2YodGhpcy5zdGF0ZSkudG8oZGlzYWJsZWQgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zdGF0ZSgnZGlzYWJsZWQnLCBkaXNhYmxlZCk7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ3Nob3dMYWJlbCcpLm9mKHRoaXMuc3RhdGUpLnRvKHNob3dMYWJlbCA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnN0YXRlKCdzaG93TGFiZWwnLCBzaG93TGFiZWwpO1xuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCdzaG93RXJyb3InKS5vZih0aGlzLnN0YXRlKS50byhzaG93RXJyb3IgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zdGF0ZSgnc2hvd0Vycm9yJywgc2hvd0Vycm9yKTtcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnc2hvd0hlbHAnKS5vZih0aGlzLnN0YXRlKS50byhzaG93SGVscCA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnN0YXRlKCdzaG93SGVscCcsIHNob3dIZWxwKTtcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgndmFsaWQnKS5vZih0aGlzLnN0YXRlKS50byh2YWxpZCA9PiB7XG4gICAgICAgIHRoaXMuZWwuc3RhdGUoJ3ZhbGlkJywgdmFsaWQpO1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zdGF0ZSgnaW52YWxpZCcsICF2YWxpZCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBfYXR0YWNoQmluZGluZ3NfZGlzcGxheSgpIHtcbiAgICAgIFNpbXBseUJpbmQoJ3BsYWNlaG9sZGVyJykub2YodGhpcy5zdGF0ZSkudG8oJ3RleHQnKS5vZih0aGlzLmVsLmNoaWxkLnBsYWNlaG9sZGVyKS50cmFuc2Zvcm0ocGxhY2Vob2xkZXIgPT4ge1xuICAgICAgICBzd2l0Y2ggKGZhbHNlKSB7XG4gICAgICAgICAgY2FzZSAhKHBsYWNlaG9sZGVyID09PSB0cnVlICYmIHRoaXMuc2V0dGluZ3MubGFiZWwpOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MubGFiZWw7XG5cbiAgICAgICAgICBjYXNlICFJUy5zdHJpbmcocGxhY2Vob2xkZXIpOlxuICAgICAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCdkaXNhYmxlZCcsIHtcbiAgICAgICAgdXBkYXRlT25CaW5kOiB0aGlzLnN0YXRlLmRpc2FibGVkXG4gICAgICB9KS5vZih0aGlzLnN0YXRlKS50bygoZGlzYWJsZWQsIHByZXYpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuY2hlY2ttYXJrKSB7XG4gICAgICAgICAgaWYgKGRpc2FibGVkIHx8ICFkaXNhYmxlZCAmJiBwcmV2ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5lbC5jaGlsZC5jaGVja21hcmtfbWFzazEucmVjYWxjU3R5bGUoKTtcbiAgICAgICAgICAgICAgdGhpcy5lbC5jaGlsZC5jaGVja21hcmtfbWFzazIucmVjYWxjU3R5bGUoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWwuY2hpbGQuY2hlY2ttYXJrX3BhdGNoLnJlY2FsY1N0eWxlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gLy8gQGVsLmNoaWxkLmNoZWNrbWFyay5yZWNhbGNTdHlsZSh0cnVlKVxuXG5cbiAgICBfYXR0YWNoQmluZGluZ3NfZGlzcGxheV9hdXRvV2lkdGgoKSB7XG4gICAgICBTaW1wbHlCaW5kKCd3aWR0aCcsIHtcbiAgICAgICAgdXBkYXRlRXZlbklmU2FtZTogdHJ1ZVxuICAgICAgfSkub2YodGhpcy5zdGF0ZSkudG8od2lkdGggPT4ge1xuICAgICAgICByZXR1cm4gKHRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoID8gdGhpcy5lbC5jaGlsZC5pbnB1dCA6IHRoaXMuZWwpLnN0eWxlKCd3aWR0aCcsIHdpZHRoKTtcbiAgICAgIH0pLnRyYW5zZm9ybSh0aGlzLl9mb3JtYXRXaWR0aC5iaW5kKHRoaXMpKS51cGRhdGVPbignaXNNb2JpbGUnKS5vZih0aGlzLnN0YXRlKTtcblxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoKSB7XG4gICAgICAgIFNpbXBseUJpbmQoJ192YWx1ZScsIHtcbiAgICAgICAgICB1cGRhdGVFdmVuSWZTYW1lOiB0cnVlLFxuICAgICAgICAgIHVwZGF0ZU9uQmluZDogZmFsc2VcbiAgICAgICAgfSkub2YodGhpcykudG8oJ3dpZHRoJykub2YodGhpcy5zdGF0ZSkudHJhbnNmb3JtKCgpID0+IHtcbiAgICAgICAgICByZXR1cm4gYCR7dGhpcy5fZ2V0SW5wdXRBdXRvV2lkdGgoKX1weGA7XG4gICAgICAgIH0pLnVwZGF0ZU9uKCdldmVudDppbnNlcnRlZCcpLm9mKHRoaXMuZWwpLnVwZGF0ZU9uKCd2aXNpYmxlJykub2YodGhpcy5zdGF0ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2F0dGFjaEJpbmRpbmdzX3ZhbHVlKCkge1xuICAgICAgdmFyIGlucHV0LCByZXNldElucHV0O1xuICAgICAgaW5wdXQgPSB0aGlzLmVsLmNoaWxkLmlucHV0LnJhdztcblxuICAgICAgcmVzZXRJbnB1dCA9ICgpID0+IHtcbiAgICAgICAgdmFyIGZpbGxlZDtcbiAgICAgICAgZmlsbGVkID0gIXRoaXMubWFzay5pc0VtcHR5KCk7XG5cbiAgICAgICAgaWYgKCFmaWxsZWQpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdGlvbih0aGlzLm1hc2suY3Vyc29yID0gMCk7XG4gICAgICAgICAgdGhpcy5fdmFsdWUgPSAnJztcbiAgICAgICAgICB0aGlzLnN0YXRlLmZpbGxlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZpbGxlZDtcbiAgICAgIH07XG5cbiAgICAgIFNpbXBseUJpbmQoJ2V2ZW50OmlucHV0Jykub2YoaW5wdXQpLnRvKCgpID0+IHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IGlucHV0LnZhbHVlO1xuXG4gICAgICAgIGlmICh0aGlzLm1hc2spIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdGlvbih0aGlzLm1hc2suY3Vyc29yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmVtaXQoJ2lucHV0JywgdGhpcy52YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ192YWx1ZScsIHtcbiAgICAgICAgdXBkYXRlRXZlbklmU2FtZTogISF0aGlzLm1hc2tcbiAgICAgIH0pLm9mKHRoaXMpLnRvKCd2YWx1ZScpLm9mKGlucHV0KS5hbmQudG8odmFsdWUgPT4ge1xuICAgICAgICB2YXIgZmlsbGVkO1xuICAgICAgICBmaWxsZWQgPSAhIXZhbHVlO1xuXG4gICAgICAgIGlmIChmaWxsZWQgJiYgdGhpcy5tYXNrICYmIHRoaXMubWFzay5ndWlkZSAmJiAoIXRoaXMuc3RhdGUuZm9jdXNlZCB8fCB0aGlzLm1hc2suY3Vyc29yID09PSAwKSkge1xuICAgICAgICAgIGZpbGxlZCA9IHJlc2V0SW5wdXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RhdGUuZmlsbGVkID0gZmlsbGVkO1xuXG4gICAgICAgIGlmIChmaWxsZWQpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlLmludGVyYWN0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGF0ZS52YWxpZCA9IHRoaXMudmFsaWRhdGUodm9pZCAwLCB0cnVlKTtcblxuICAgICAgICBpZiAoIXRoaXMuc3RhdGUuZm9jdXNlZCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmVtaXQoJ2lucHV0JywgdGhpcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnZXZlbnQ6a2V5ZG93bicpLm9mKHRoaXMuZWwuY2hpbGQuaW5wdXQpLnRvKGV2ZW50ID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IEtFWUNPREVTLmVudGVyKSB7XG4gICAgICAgICAgdGhpcy5lbWl0KCdzdWJtaXQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmVtaXQoYGtleS0ke2V2ZW50LmtleUNvZGV9YCk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMubWFzayAmJiB0aGlzLm1hc2suZ3VpZGUpIHtcbiAgICAgICAgU2ltcGx5QmluZCgnZXZlbnQ6Ymx1cicpLm9mKHRoaXMuZWwuY2hpbGQuaW5wdXQpLnRvKHJlc2V0SW5wdXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9hdHRhY2hCaW5kaW5nc19hdXRvY29tcGxldGUoKSB7XG4gICAgICBpZiAodGhpcy5kcm9wZG93bikge1xuICAgICAgICBTaW1wbHlCaW5kLmRlZmF1bHRPcHRpb25zLnVwZGF0ZU9uQmluZCA9IGZhbHNlO1xuICAgICAgICBTaW1wbHlCaW5kKCd0eXBpbmcnLCB7XG4gICAgICAgICAgdXBkYXRlRXZlbklmU2FtZTogdHJ1ZVxuICAgICAgICB9KS5vZih0aGlzLnN0YXRlKS50byhpc1R5cGluZyA9PiB7XG4gICAgICAgICAgaWYgKGlzVHlwaW5nKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3ZhbHVlKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuZHJvcGRvd24uaXNPcGVuKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmRyb3Bkb3duLmxpc3QuY2FsY0Rpc3BsYXkoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuZHJvcGRvd24uaXNPcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcmV0dXJuIFNpbXBseUJpbmQoJ2V2ZW50OmNsaWNrJykub2YoZG9jdW1lbnQpLm9uY2UudG8oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRyb3Bkb3duLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICB9KS5jb25kaXRpb24oZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAhRE9NKGV2ZW50LnRhcmdldCkucGFyZW50TWF0Y2hpbmcocGFyZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnQgPT09IHRoaXMuZWwuY2hpbGQuaW5uZXJ3cmFwO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHJvcGRvd24uaXNPcGVuID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgU2ltcGx5QmluZCgnX3ZhbHVlJykub2YodGhpcykudG8odmFsdWUgPT4ge1xuICAgICAgICAgIHZhciBjaG9pY2UsIGksIGxlbiwgcmVmLCBzaG91bGRCZVZpc2libGU7XG4gICAgICAgICAgcmVmID0gdGhpcy5kcm9wZG93bi5jaG9pY2VzO1xuXG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBjaG9pY2UgPSByZWZbaV07XG4gICAgICAgICAgICBzaG91bGRCZVZpc2libGUgPSAhdmFsdWUgPyB0cnVlIDogZnV6enlNYXRjaCh2YWx1ZSwgY2hvaWNlLmxhYmVsKTtcblxuICAgICAgICAgICAgaWYgKGNob2ljZS52aXNpYmxlICE9PSBzaG91bGRCZVZpc2libGUpIHtcbiAgICAgICAgICAgICAgY2hvaWNlLnZpc2libGUgPSBzaG91bGRCZVZpc2libGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuZHJvcGRvd24uaXNPcGVuICYmICF2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRyb3Bkb3duLm9uU2VsZWN0ZWQoc2VsZWN0ZWRDaG9pY2UgPT4ge1xuICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBzZWxlY3RlZENob2ljZTtcbiAgICAgICAgICB0aGlzLnZhbHVlID0gc2VsZWN0ZWRDaG9pY2UubGFiZWw7XG4gICAgICAgICAgdGhpcy5kcm9wZG93bi5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb24odGhpcy5lbC5jaGlsZC5pbnB1dC5yYXcudmFsdWUubGVuZ3RoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFNpbXBseUJpbmQuZGVmYXVsdE9wdGlvbnMudXBkYXRlT25CaW5kID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfYXR0YWNoQmluZGluZ3Nfc3RhdGVUcmlnZ2VycygpIHtcbiAgICAgIFNpbXBseUJpbmQoJ2V2ZW50Om1vdXNlZW50ZXInKS5vZih0aGlzLmVsLmNoaWxkLmlucHV0KS50bygoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmhvdmVyZWQgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCdldmVudDptb3VzZWxlYXZlJykub2YodGhpcy5lbC5jaGlsZC5pbnB1dCkudG8oKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5ob3ZlcmVkID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ2V2ZW50OmZvY3VzJykub2YodGhpcy5lbC5jaGlsZC5pbnB1dCkudG8oKCkgPT4ge1xuICAgICAgICB0aGlzLnN0YXRlLmZvY3VzZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmRpc2FibGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYmx1cigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ2V2ZW50OmJsdXInKS5vZih0aGlzLmVsLmNoaWxkLmlucHV0KS50bygoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLnR5cGluZyA9IHRoaXMuc3RhdGUuZm9jdXNlZCA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCdldmVudDppbnB1dCcpLm9mKHRoaXMuZWwuY2hpbGQuaW5wdXQpLnRvKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUudHlwaW5nID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnZXZlbnQ6a2V5ZG93bicpLm9mKHRoaXMuZWwuY2hpbGQuaW5wdXQpLnRvKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3Vyc29yLnByZXYgPSB0aGlzLnNlbGVjdGlvbigpLmVuZDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF9zY2hlZHVsZUN1cnNvclJlc2V0KCkge1xuICAgICAgdmFyIGN1cnJlbnRDdXJzb3IsIGRpZmZJbmRleCwgbmV3Q3Vyc29yO1xuICAgICAgZGlmZkluZGV4ID0gZ2V0SW5kZXhPZkZpcnN0RGlmZih0aGlzLm1hc2sudmFsdWUsIHRoaXMubWFzay5wcmV2LnZhbHVlKTtcbiAgICAgIGN1cnJlbnRDdXJzb3IgPSB0aGlzLmN1cnNvci5jdXJyZW50O1xuICAgICAgbmV3Q3Vyc29yID0gdGhpcy5tYXNrLm5vcm1hbGl6ZUN1cnNvclBvcyhjdXJyZW50Q3Vyc29yLCB0aGlzLmN1cnNvci5wcmV2KTtcblxuICAgICAgaWYgKG5ld0N1cnNvciAhPT0gY3VycmVudEN1cnNvcikge1xuICAgICAgICB0aGlzLnNlbGVjdGlvbihuZXdDdXJzb3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9zZXRWYWx1ZUlmTm90U2V0KCkge1xuICAgICAgaWYgKHRoaXMuZWwuY2hpbGQuaW5wdXQucmF3LnZhbHVlICE9PSB0aGlzLl92YWx1ZSkge1xuICAgICAgICB0aGlzLmVsLmNoaWxkLmlucHV0LnJhdy52YWx1ZSA9IHRoaXMuX3ZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9nZXRJbnB1dEF1dG9XaWR0aCgpIHtcbiAgICAgIHZhciBpbnB1dFdpZHRoLCBsYWJlbFdpZHRoO1xuXG4gICAgICBpZiAodGhpcy5fdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fc2V0VmFsdWVJZk5vdFNldCgpO1xuXG4gICAgICAgIHRoaXMuZWwuY2hpbGQuaW5wdXQuc3R5bGUoJ3dpZHRoJywgMCk7XG4gICAgICAgIHRoaXMuZWwuY2hpbGQuaW5wdXQucmF3LnNjcm9sbExlZnQgPSAxZSsxMDtcbiAgICAgICAgaW5wdXRXaWR0aCA9IE1hdGgubWF4KHRoaXMuZWwuY2hpbGQuaW5wdXQucmF3LnNjcm9sbExlZnQgKyB0aGlzLmVsLmNoaWxkLmlucHV0LnJhdy5vZmZzZXRXaWR0aCwgdGhpcy5lbC5jaGlsZC5pbnB1dC5yYXcuc2Nyb2xsV2lkdGgpICsgMjtcbiAgICAgICAgbGFiZWxXaWR0aCA9IHRoaXMuc2V0dGluZ3MubGFiZWwgJiYgdGhpcy5lbC5jaGlsZC5sYWJlbC5zdHlsZVNhZmUoJ3Bvc2l0aW9uJykgPT09ICdhYnNvbHV0ZScgPyB0aGlzLmVsLmNoaWxkLmxhYmVsLnJlY3Qud2lkdGggOiAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5wdXRXaWR0aCA9IHRoaXMuZWwuY2hpbGQucGxhY2Vob2xkZXIucmVjdC53aWR0aDtcbiAgICAgICAgbGFiZWxXaWR0aCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBNYXRoLm1pbih0aGlzLl9nZXRXaWR0aFNldHRpbmcoJ21heCcpLCBNYXRoLm1heCh0aGlzLl9nZXRXaWR0aFNldHRpbmcoJ21pbicpLCBpbnB1dFdpZHRoLCBsYWJlbFdpZHRoKSk7XG4gICAgfVxuXG4gICAgX2dldFdpZHRoU2V0dGluZyh0YXJnZXQpIHtcbiAgICAgIHZhciBwYXJlbnQsIHBhcmVudFdpZHRoLCByZXN1bHQ7XG5cbiAgICAgIGlmICh0YXJnZXQgPT09ICdtaW4nIHx8IHRhcmdldCA9PT0gJ21heCcpIHtcbiAgICAgICAgdGFyZ2V0ICs9ICdXaWR0aCc7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5zZXR0aW5nc1t0YXJnZXRdID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXN1bHQgPSB0aGlzLnNldHRpbmdzW3RhcmdldF07XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLnNldHRpbmdzW3RhcmdldF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJlc3VsdCA9IHBhcnNlRmxvYXQodGhpcy5zZXR0aW5nc1t0YXJnZXRdKTtcblxuICAgICAgICBpZiAoaW5jbHVkZXModGhpcy5zZXR0aW5nc1t0YXJnZXRdLCAnJScpKSB7XG4gICAgICAgICAgaWYgKChwYXJlbnQgPSB0aGlzLmVsLnBhcmVudCkgJiYgcGFyZW50LnN0eWxlKCdkaXNwbGF5JykgPT09ICdibG9jaycpIHtcbiAgICAgICAgICAgIHBhcmVudFdpZHRoID0gcGFyZW50LnN0eWxlUGFyc2VkKCd3aWR0aCcpIC0gcGFyZW50LnN0eWxlUGFyc2VkKCdwYWRkaW5nTGVmdCcpIC0gcGFyZW50LnN0eWxlUGFyc2VkKCdwYWRkaW5nUmlnaHQnKSAtIDI7XG4gICAgICAgICAgICByZXN1bHQgPSBwYXJlbnRXaWR0aCAqIChyZXN1bHQgLyAxMDApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0IHx8ICh0YXJnZXQgPT09ICdtaW5XaWR0aCcgPyAwIDogMmUzMDgpO1xuICAgIH1cblxuICAgIF92YWxpZGF0ZShwcm92aWRlZFZhbHVlKSB7XG4gICAgICB2YXIgbWF0Y2hpbmdDaG9pY2UsIHJlZjtcblxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MudmFsaWRXaGVuUmVnZXggJiYgSVMucmVnZXgodGhpcy5zZXR0aW5ncy52YWxpZFdoZW5SZWdleCkpIHtcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLnZhbGlkV2hlblJlZ2V4LnRlc3QocHJvdmlkZWRWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MudmFsaWRXaGVuSXNDaG9pY2UgJiYgKChyZWYgPSB0aGlzLnNldHRpbmdzLmNob2ljZXMpICE9IG51bGwgPyByZWYubGVuZ3RoIDogdm9pZCAwKSkge1xuICAgICAgICBtYXRjaGluZ0Nob2ljZSA9IHRoaXMuc2V0dGluZ3MuY2hvaWNlcy5maWx0ZXIoZnVuY3Rpb24gKGNob2ljZSkge1xuICAgICAgICAgIHJldHVybiBjaG9pY2UudmFsdWUgPT09IHByb3ZpZGVkVmFsdWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghbWF0Y2hpbmdDaG9pY2UubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLm1pbkxlbmd0aCkge1xuICAgICAgICBpZiAocHJvdmlkZWRWYWx1ZS5sZW5ndGggPCB0aGlzLnNldHRpbmdzLm1pbkxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5tYXhMZW5ndGgpIHtcbiAgICAgICAgaWYgKHByb3ZpZGVkVmFsdWUubGVuZ3RoID49IHRoaXMuc2V0dGluZ3MubWF4TGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm1hc2spIHtcbiAgICAgICAgaWYgKCF0aGlzLm1hc2sudmFsaWRhdGUocHJvdmlkZWRWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgc2VsZWN0aW9uKGFyZykge1xuICAgICAgdmFyIGVuZCwgc3RhcnQ7XG5cbiAgICAgIGlmIChJUy5vYmplY3QoYXJnKSkge1xuICAgICAgICBzdGFydCA9IGFyZy5zdGFydDtcbiAgICAgICAgZW5kID0gYXJnLmVuZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gYXJnO1xuICAgICAgICBlbmQgPSBhcmd1bWVudHNbMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFydCAhPSBudWxsKSB7XG4gICAgICAgIGlmICghZW5kIHx8IGVuZCA8IHN0YXJ0KSB7XG4gICAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVsLmNoaWxkLmlucHV0LnJhdy5zZXRTZWxlY3Rpb25SYW5nZShzdGFydCwgZW5kKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgJ3N0YXJ0JzogdGhpcy5lbC5jaGlsZC5pbnB1dC5yYXcuc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgICAgJ2VuZCc6IHRoaXMuZWwuY2hpbGQuaW5wdXQucmF3LnNlbGVjdGlvbkVuZFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvY3VzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWwuY2hpbGQuaW5wdXQucmF3LmZvY3VzKCk7XG4gICAgfVxuXG4gICAgYmx1cigpIHtcbiAgICAgIHJldHVybiB0aGlzLmVsLmNoaWxkLmlucHV0LnJhdy5ibHVyKCk7XG4gICAgfVxuXG4gIH1cbiAgVGV4dEZpZWxkLnByb3RvdHlwZS50ZW1wbGF0ZSA9IHRleHRGaWVsZFRlbXBsYXRlO1xuICBUZXh0RmllbGQucHJvdG90eXBlLnRlbXBsYXRlcyA9IHRlbXBsYXRlcztcbiAgVGV4dEZpZWxkLnByb3RvdHlwZS5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICByZXR1cm4gVGV4dEZpZWxkO1xufS5jYWxsKHVuZGVmaW5lZCk7XG5cbnZhciBUZXh0RmllbGQkMSA9IFRleHRGaWVsZDtleHBvcnQgZGVmYXVsdCBUZXh0RmllbGQkMTsiLCJpbXBvcnQncXVpY2tjc3MnO2ltcG9ydCByZWdpc3RlckFuaW1hdGlvbnMgZnJvbScuL2FuaW1hdGlvbnMuanMnO2ltcG9ydCdAZGFuaWVsa2FsZW4vaXMnO2ltcG9ydCBJUyBmcm9tJy4vY2hlY2tzLmpzJztpbXBvcnQnLi9jb25zb2xlUGF0Y2guanMnO2ltcG9ydCdxdWlja2RvbSc7aW1wb3J0J0BkYW5pZWxrYWxlbi9zaW1wbHliaW5kJztpbXBvcnQnLi9jb25zdGFudHMvcmVnZXguanMnO2ltcG9ydCcuL2hlbHBlcnMuanMnO2ltcG9ydCBleHRlbmQgZnJvbSdzbWFydC1leHRlbmQnO2ltcG9ydCBSRVFVSVJFRF9GSUVMRF9NRVRIT0RTIGZyb20nLi9jb25zdGFudHMvcmVxRmllbGRNZXRob2RzLmpzJztpbXBvcnQnZmFzdGRvbSc7aW1wb3J0Jy4vY29tcG9uZW50cy9jb25kaXRpb24uanMnO2ltcG9ydCcuL2ZpZWxkL3RyYW5zZm9ybVNldHRpbmdzLmpzJztpbXBvcnQnLi9maWVsZC9nbG9iYWxEZWZhdWx0cy5qcyc7aW1wb3J0IEZpZWxkIGZyb20nLi9maWVsZC9pbmRleC5qcyc7aW1wb3J0Jy4vY29uc3RhbnRzL2tleUNvZGVzLmpzJztpbXBvcnQnLi9zdmcvY2hlY2ttYXJrLmpzJztpbXBvcnQnLi9zdmcvYW5nbGVEb3duLmpzJztpbXBvcnQnLi9zdmcvY2FyZXRVcC5qcyc7aW1wb3J0Jy4vc3ZnL2NhcmV0RG93bi5qcyc7aW1wb3J0Jy4vc3ZnL3BsdXMuanMnO2ltcG9ydCcuL3N2Zy9jbG9uZS5qcyc7aW1wb3J0Jy4vc3ZnL3JlbW92ZS5qcyc7aW1wb3J0Jy4vY29tcG9uZW50cy9kcm9wZG93bi90ZW1wbGF0ZS1iOTYxZjgxZi5qcyc7aW1wb3J0Jy4vY29tcG9uZW50cy9kcm9wZG93bi9kZWZhdWx0cy5qcyc7aW1wb3J0Jy4vY29tcG9uZW50cy9kcm9wZG93bi9pbmRleC5qcyc7aW1wb3J0J3RleHQtbWFzay1jb3JlJztpbXBvcnQndGV4dC1tYXNrLWFkZG9ucyc7aW1wb3J0Jy4vY29tcG9uZW50cy9tYXNrLmpzJztpbXBvcnQnLi9jb25zdGFudHMvY29sb3JzLmpzJztpbXBvcnQnLi9maWVsZHMvdGV4dC90ZW1wbGF0ZS0yMzNlOTQxMy5qcyc7aW1wb3J0Jy4vZmllbGRzL3RleHQvZGVmYXVsdHMuanMnO2ltcG9ydCBUZXh0RmllbGQgZnJvbScuL2ZpZWxkcy90ZXh0L2luZGV4LmpzJzt2YXIgdmVyc2lvbiA9IFwiMS4wLjk3XCI7dmFyIGNyZWF0ZUJ1aWxkZXIsIHF1aWNrZmllbGQ7XG5cbmNyZWF0ZUJ1aWxkZXIgPSBmdW5jdGlvbiAoc2V0dGluZ092ZXJyaWRlcywgdGVtcGxhdGVPdmVycmlkZXMpIHtcbiAgdmFyIGJ1aWxkZXI7XG5cbiAgYnVpbGRlciA9IGZ1bmN0aW9uIChzZXR0aW5ncykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgc2V0dGluZ3MgPSBleHRlbmQuY2xvbmUoLi4uYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBpZiAoIUlTLm9iamVjdChzZXR0aW5ncykpIHtcbiAgICAgIHNldHRpbmdzID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNldHRpbmdzLnR5cGUgPT0gbnVsbCkge1xuICAgICAgc2V0dGluZ3MudHlwZSA9ICd0ZXh0JztcbiAgICB9XG5cbiAgICBpZiAoIUZpZWxkW3NldHRpbmdzLnR5cGVdKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFF1aWNrRmllbGQ6ICcke3NldHRpbmdzLnR5cGV9JyBpcyBub3QgYSB2YWxpZC9yZWdpc3RlcmVkIGZpZWxkIHR5cGVgKTtcbiAgICB9XG5cbiAgICByZWdpc3RlckFuaW1hdGlvbnMoKTtcbiAgICByZXR1cm4gbmV3IEZpZWxkW3NldHRpbmdzLnR5cGVdKHNldHRpbmdzLCBidWlsZGVyLCBzZXR0aW5nT3ZlcnJpZGVzLCB0ZW1wbGF0ZU92ZXJyaWRlcyk7XG4gIH07XG5cbiAgYnVpbGRlci5yZWdpc3RlciA9IGZ1bmN0aW9uICh0eXBlLCB0YXJnZXRGaWVsZCkge1xuICAgIHZhciBpLCBsZW4sIHJlcXVpcmVkTWV0aG9kO1xuXG4gICAgaWYgKCFJUy5zdHJpbmcodHlwZSkgfHwgIUlTLmZ1bmN0aW9uKHRhcmdldEZpZWxkKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUXVpY2tGaWVsZCBSZWdpc3RyYXRpb246IGludmFsaWQgYXJndW1lbnRzXCIpO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIGxlbiA9IFJFUVVJUkVEX0ZJRUxEX01FVEhPRFMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHJlcXVpcmVkTWV0aG9kID0gUkVRVUlSRURfRklFTERfTUVUSE9EU1tpXTtcblxuICAgICAgaWYgKCF0YXJnZXRGaWVsZC5wcm90b3R5cGVbcmVxdWlyZWRNZXRob2RdKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUXVpY2tGaWVsZCBSZWdpc3RyYXRpb246ICcke3JlcXVpcmVkTWV0aG9kfScgbWV0aG9kIGlzIHJlcXVpcmVkIGluIG9yZGVyIHRvIHJlZ2lzdGVyIHRoZSBmaWVsZGApO1xuICAgICAgfVxuICAgIH1cblxuICAgIEZpZWxkW3R5cGVdID0gdGFyZ2V0RmllbGQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgYnVpbGRlci5jb25maWcgPSBmdW5jdGlvbiAobmV3U2V0dGluZ3MsIG5ld1RlbXBsYXRlcykge1xuICAgIHZhciBjb25maWcsIGdsb2JhbENvbmZpZywgbmFtZSQkMSwgb3JpZ2luYWxUZW1wbGF0ZXMsIG91dHB1dFNldHRpbmdzLCBvdXRwdXRUZW1wbGF0ZXMsIHJlZiwgdGVtcGxhdGVzLCB0eXBlO1xuXG4gICAgaWYgKCFJUy5vYmplY3QobmV3U2V0dGluZ3MpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFF1aWNrRmllbGQgQ29uZmlnOiBpbnZhbGlkIGNvbmZpZyBvYmplY3QgcHJvdmlkZWQgJHtTdHJpbmcobmV3U2V0dGluZ3MpfWApO1xuICAgIH1cblxuICAgIG91dHB1dFNldHRpbmdzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIGZvciAodHlwZSBpbiBuZXdTZXR0aW5ncykge1xuICAgICAgY29uZmlnID0gbmV3U2V0dGluZ3NbdHlwZV07XG5cbiAgICAgIGlmICh0eXBlID09PSAnZ2xvYmFsJykge1xuICAgICAgICBvdXRwdXRTZXR0aW5ncy5nbG9iYWxEZWZhdWx0cyA9IGV4dGVuZC5kZWVwLm5vdERlZXAoRmllbGQuc2hhbGxvd1NldHRpbmdzKS5jbG9uZShGaWVsZC5wcm90b3R5cGUuZ2xvYmFsRGVmYXVsdHMsIGNvbmZpZyk7XG4gICAgICB9IGVsc2UgaWYgKEZpZWxkW3R5cGVdKSB7XG4gICAgICAgIG91dHB1dFNldHRpbmdzW3R5cGVdID0gZXh0ZW5kLmNsb25lLmRlZXAubm90RGVlcChGaWVsZC5zaGFsbG93U2V0dGluZ3MpKEZpZWxkW3R5cGVdLnByb3RvdHlwZS5kZWZhdWx0cywgY29uZmlnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoSVMub2JqZWN0KG5ld1RlbXBsYXRlcykpIHtcbiAgICAgIG91dHB1dFRlbXBsYXRlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICBnbG9iYWxDb25maWcgPSBuZXdUZW1wbGF0ZXMuZ2xvYmFsO1xuXG4gICAgICBpZiAoZ2xvYmFsQ29uZmlnICYmIGdsb2JhbENvbmZpZy5maWVsZCAmJiAhZ2xvYmFsQ29uZmlnLmRlZmF1bHQpIHtcbiAgICAgICAgZ2xvYmFsQ29uZmlnLmRlZmF1bHQgPSBnbG9iYWxDb25maWcuZmllbGQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodHlwZSBpbiBGaWVsZCkge1xuICAgICAgICBvcmlnaW5hbFRlbXBsYXRlcyA9IChyZWYgPSBGaWVsZFt0eXBlXS5wcm90b3R5cGUpICE9IG51bGwgPyByZWYudGVtcGxhdGVzIDogdm9pZCAwO1xuICAgICAgICB0ZW1wbGF0ZXMgPSBuZXdUZW1wbGF0ZXNbdHlwZV0gfHwgZ2xvYmFsQ29uZmlnO1xuXG4gICAgICAgIGlmICghb3JpZ2luYWxUZW1wbGF0ZXMpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGVtcGxhdGVzKSB7XG4gICAgICAgICAgb3V0cHV0VGVtcGxhdGVzW3R5cGVdID0gb3JpZ2luYWxUZW1wbGF0ZXM7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGVtcGxhdGVzLmZpZWxkICYmICF0ZW1wbGF0ZXMuZGVmYXVsdCkge1xuICAgICAgICAgIHRlbXBsYXRlcy5kZWZhdWx0ID0gdGVtcGxhdGVzLmZpZWxkO1xuICAgICAgICB9XG5cbiAgICAgICAgb3V0cHV0VGVtcGxhdGVzW3R5cGVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgICAgICBmb3IgKG5hbWUkJDEgaW4gdGVtcGxhdGVzKSB7XG4gICAgICAgICAgY29uZmlnID0gdGVtcGxhdGVzW25hbWUkJDFdO1xuXG4gICAgICAgICAgaWYgKG5hbWUkJDEgPT09ICdmaWVsZCcgfHwgIW9yaWdpbmFsVGVtcGxhdGVzW25hbWUkJDFdKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZ2xvYmFsQ29uZmlnICYmIGdsb2JhbENvbmZpZ1tuYW1lJCQxXSkge1xuICAgICAgICAgICAgY29uZmlnID0gZXh0ZW5kLmNsb25lLmRlZXAuY29uY2F0KGdsb2JhbENvbmZpZ1tuYW1lJCQxXSwgY29uZmlnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvdXRwdXRUZW1wbGF0ZXNbdHlwZV1bbmFtZSQkMV0gPSBvcmlnaW5hbFRlbXBsYXRlc1tuYW1lJCQxXS5leHRlbmQoY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobmFtZSQkMSBpbiBvcmlnaW5hbFRlbXBsYXRlcykge1xuICAgICAgICAgIGNvbmZpZyA9IG9yaWdpbmFsVGVtcGxhdGVzW25hbWUkJDFdO1xuXG4gICAgICAgICAgaWYgKCFvdXRwdXRUZW1wbGF0ZXNbdHlwZV1bbmFtZSQkMV0pIHtcbiAgICAgICAgICAgIG91dHB1dFRlbXBsYXRlc1t0eXBlXVtuYW1lJCQxXSA9IGNvbmZpZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlQnVpbGRlcihvdXRwdXRTZXR0aW5ncywgb3V0cHV0VGVtcGxhdGVzKTtcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYnVpbGRlciwgJ2ZpZWxkcycsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBleHRlbmQuY2xvbmUub3duLm5vdEtleXMoJ2luc3RhbmNlcycpKEZpZWxkKTtcbiAgICB9XG4gIH0pO1xuICBidWlsZGVyLnNldHRpbmdPdmVycmlkZXMgPSBzZXR0aW5nT3ZlcnJpZGVzO1xuICBidWlsZGVyLnRlbXBsYXRlT3ZlcnJpZGVzID0gdGVtcGxhdGVPdmVycmlkZXM7XG4gIGJ1aWxkZXIudmVyc2lvbiA9IHZlcnNpb247XG4gIGJ1aWxkZXIuRmllbGQgPSBGaWVsZDtcbiAgcmV0dXJuIGJ1aWxkZXI7XG59O1xuLy8gaW1wb3J0IE51bWJlckZpZWxkIGZyb20gJy4vZmllbGRzL251bWJlcidcbi8vIGltcG9ydCBTZWxlY3RGaWVsZCBmcm9tICcuL2ZpZWxkcy9zZWxlY3QnXG4vLyBpbXBvcnQgQ2hvaWNlRmllbGQgZnJvbSAnLi9maWVsZHMvY2hvaWNlJ1xuLy8gaW1wb3J0IFRydWVmYWxzZUZpZWxkIGZyb20gJy4vZmllbGRzL3RydWVmYWxzZSdcbi8vIGltcG9ydCBUb2dnbGVGaWVsZCBmcm9tICcuL2ZpZWxkcy90b2dnbGUnXG4vLyBpbXBvcnQgR3JvdXBGaWVsZCBmcm9tICcuL2ZpZWxkcy9ncm91cCdcbi8vIGltcG9ydCBSZXBlYXRlckZpZWxkIGZyb20gJy4vZmllbGRzL3JlcGVhdGVyJ1xuLy8gaW1wb3J0IEZpbGVGaWVsZCBmcm9tICcuL2ZpZWxkcy9maWxlJ1xuLy8gaW1wb3J0IENoZWNrYm94RmllbGQgZnJvbSAnLi9maWVsZHMvY2hlY2tib3gnXG5cbnF1aWNrZmllbGQgPSBjcmVhdGVCdWlsZGVyKCk7XG5xdWlja2ZpZWxkLnJlZ2lzdGVyKCd0ZXh0JywgVGV4dEZpZWxkKTsgLy8gcXVpY2tmaWVsZC5yZWdpc3RlciAndGV4dGFyZWEnLCBUZXh0YXJlYUZpZWxkXG4vLyBxdWlja2ZpZWxkLnJlZ2lzdGVyICdudW1iZXInLCBOdW1iZXJGaWVsZFxuLy8gcXVpY2tmaWVsZC5yZWdpc3RlciAnc2VsZWN0JywgU2VsZWN0RmllbGRcbi8vIHF1aWNrZmllbGQucmVnaXN0ZXIgJ2Nob2ljZScsIENob2ljZUZpZWxkXG4vLyBxdWlja2ZpZWxkLnJlZ2lzdGVyICd0cnVlZmFsc2UnLCBUcnVlZmFsc2VGaWVsZFxuLy8gcXVpY2tmaWVsZC5yZWdpc3RlciAndG9nZ2xlJywgVG9nZ2xlRmllbGRcbi8vIHF1aWNrZmllbGQucmVnaXN0ZXIgJ2dyb3VwJywgR3JvdXBGaWVsZFxuLy8gcXVpY2tmaWVsZC5yZWdpc3RlciAncmVwZWF0ZXInLCBSZXBlYXRlckZpZWxkXG4vLyBxdWlja2ZpZWxkLnJlZ2lzdGVyICdjaGVja2JveCcsIEZpbGVGaWVsZFxuLy8gcXVpY2tmaWVsZC5yZWdpc3RlciAnZmlsZScsIENoZWNrYm94RmllbGRcblxudmFyIHF1aWNrZmllbGQkMSA9IHF1aWNrZmllbGQ7ZXhwb3J0IGRlZmF1bHQgcXVpY2tmaWVsZCQxOyIsInZhciBkZWZhdWx0cyA9IHtcbiAgcGxhY2Vob2xkZXI6IHRydWUsXG4gIHZhbGlkV2hlblJlZ2V4OiBmYWxzZSxcbiAgYXV0b1dpZHRoOiBmYWxzZSxcbiAgYXV0b0hlaWdodDogdHJ1ZSxcbiAgbWluSGVpZ2h0OiA0NixcbiAgbWF4V2lkdGg6ICcxMDAlJyxcbiAgbWF4SGVpZ2h0OiAyZTMwOCxcbiAgbWluV2lkdGg6IDIsXG4gIG1pbkxlbmd0aDogbnVsbCxcbiAgbWF4TGVuZ3RoOiBudWxsLFxuICBjb3VudGVyOiBmYWxzZVxufTsgLy8gZHJvcGRvd246IHtzdG9yZVNlbGVjdGVkOmZhbHNlLCBsb2NrU2Nyb2xsOmZhbHNlfVxuLy8gY2hvaWNlczogbnVsbFxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdHM7IiwiaW1wb3J0IERPTSBmcm9tJ3F1aWNrZG9tJztpbXBvcnQge3Nob3J0aGFuZFNpZGVWYWx1ZX1mcm9tJy4uLy4uL2hlbHBlcnMuanMnO2ltcG9ydCcuLi8uLi9jb25zdGFudHMvY29sb3JzLmpzJztpbXBvcnQge2EgYXMgdGV4dEZpZWxkVGVtcGxhdGV9ZnJvbScuLi90ZXh0L3RlbXBsYXRlLTIzM2U5NDEzLmpzJzt2YXIgdGVtcGxhdGUgPSB0ZXh0RmllbGRUZW1wbGF0ZS5leHRlbmQoe1xuICBjaGlsZHJlbjoge1xuICAgICdpbm5lcndyYXAnOiB7XG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmllbGQuc2V0dGluZ3MubWluSGVpZ2h0IHx8IDQ2O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgd2lkdGg6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICAgICAgaWYgKCFmaWVsZC5zZXR0aW5ncy5hdXRvV2lkdGgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICcxMDAlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgICdsYWJlbCc6IHtcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBsZWZ0OiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICAgIHJldHVybiBzaG9ydGhhbmRTaWRlVmFsdWUoZmllbGQuc2V0dGluZ3MucGFkZGluZywgJ2xlZnQnKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRvcDogJzcuNnB4J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICAnaW5wdXQnOiB7XG4gICAgICB0eXBlOiAndGV4dGFyZWEnLFxuICAgICAgb3B0aW9uczoge1xuICAgICAgICB0eXBlOiBudWxsLFxuICAgICAgICBzdHlsZUFmdGVySW5zZXJ0OiB0cnVlLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHJlc2l6ZTogJ25vbmUnLFxuICAgICAgICAgIHdoaXRlU3BhY2U6ICdub3JtYWwnLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgaGVpZ2h0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gYGNhbGMoMTAwJSAtICR7dGhpcy5zdHlsZVNhZmUoJ21hcmdpblRvcCcsIHRydWUpfSAtICR7dGhpcy5zdHlsZVNhZmUoJ21hcmdpbkJvdHRvbScsIHRydWUpfSlgO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbWFyZ2luOiAnMCcsXG4gICAgICAgICAgbWFyZ2luVG9wOiAnMTVweCcsXG4gICAgICAgICAgbWFyZ2luQm90dG9tOiAnMTJweCcsXG4gICAgICAgICAgcGFkZGluZzogJzAgMTJweCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgJ3BsYWNlaG9sZGVyJzoge1xuICAgICAgb3B0aW9uczoge1xuICAgICAgICBzdHlsZUFmdGVySW5zZXJ0OiB0cnVlLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgcGFkZGluZzogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgICB2YXIgaG9yaXosIHZlcnRpO1xuICAgICAgICAgICAgaG9yaXogPSBmaWVsZC5lbC5jaGlsZC5pbnB1dC5zdHlsZVNhZmUoJ3BhZGRpbmdMZWZ0JywgdHJ1ZSkgfHwgZmllbGQuZWwuY2hpbGQuaW5wdXQuc3R5bGVTYWZlKCdwYWRkaW5nTGVmdCcpO1xuICAgICAgICAgICAgdmVydGkgPSBmaWVsZC5lbC5jaGlsZC5pbnB1dC5zdHlsZVNhZmUoJ21hcmdpblRvcCcsIHRydWUpIHx8IGZpZWxkLmVsLmNoaWxkLmlucHV0LnN0eWxlU2FmZSgnbWFyZ2luVG9wJyk7XG4gICAgICAgICAgICByZXR1cm4gYCR7dmVydGl9ICR7aG9yaXp9YDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xudmFyIGNvdW50ZXIgPSBET00udGVtcGxhdGUoWydkaXYnLCB7XG4gIHJlZjogJ2NvdW50ZXInLFxuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGJvdHRvbTogLTEwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGZvbnRTaXplOiAxMCxcbiAgICBmb250V2VpZ2h0OiA1MDBcbiAgfVxufV0pO3ZhciB0ZW1wbGF0ZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDogdGVtcGxhdGUsY291bnRlcjogY291bnRlcn0pO2V4cG9ydHt0ZW1wbGF0ZSBhcyBhLHRlbXBsYXRlcyBhcyBiLGNvdW50ZXIgYXMgY307IiwiaW1wb3J0J0BkYW5pZWxrYWxlbi9pcyc7aW1wb3J0IElTIGZyb20nLi4vLi4vY2hlY2tzLmpzJztpbXBvcnQncXVpY2tkb20nO2ltcG9ydCBTaW1wbHlCaW5kIGZyb20nQGRhbmllbGthbGVuL3NpbXBseWJpbmQnO2ltcG9ydCcuLi8uLi9jb25zdGFudHMvcmVnZXguanMnO2ltcG9ydCB7aW5oZXJpdFByb3RvfWZyb20nLi4vLi4vaGVscGVycy5qcyc7aW1wb3J0J3NtYXJ0LWV4dGVuZCc7aW1wb3J0J2Zhc3Rkb20nO2ltcG9ydCcuLi8uLi9jb21wb25lbnRzL2NvbmRpdGlvbi5qcyc7aW1wb3J0Jy4uLy4uL2ZpZWxkL3RyYW5zZm9ybVNldHRpbmdzLmpzJztpbXBvcnQnLi4vLi4vZmllbGQvZ2xvYmFsRGVmYXVsdHMuanMnO2ltcG9ydCBGaWVsZCBmcm9tJy4uLy4uL2ZpZWxkL2luZGV4LmpzJztpbXBvcnQnLi4vLi4vY29uc3RhbnRzL2tleUNvZGVzLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2NoZWNrbWFyay5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9hbmdsZURvd24uanMnO2ltcG9ydCcuLi8uLi9zdmcvY2FyZXRVcC5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9jYXJldERvd24uanMnO2ltcG9ydCcuLi8uLi9zdmcvcGx1cy5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9jbG9uZS5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9yZW1vdmUuanMnO2ltcG9ydCcuLi8uLi9jb21wb25lbnRzL2Ryb3Bkb3duL3RlbXBsYXRlLWI5NjFmODFmLmpzJztpbXBvcnQnLi4vLi4vY29tcG9uZW50cy9kcm9wZG93bi9kZWZhdWx0cy5qcyc7aW1wb3J0Jy4uLy4uL2NvbXBvbmVudHMvZHJvcGRvd24vaW5kZXguanMnO2ltcG9ydCd0ZXh0LW1hc2stY29yZSc7aW1wb3J0J3RleHQtbWFzay1hZGRvbnMnO2ltcG9ydCcuLi8uLi9jb21wb25lbnRzL21hc2suanMnO2ltcG9ydCcuLi8uLi9jb25zdGFudHMvY29sb3JzLmpzJztpbXBvcnQnLi4vdGV4dC90ZW1wbGF0ZS0yMzNlOTQxMy5qcyc7aW1wb3J0Jy4uL3RleHQvZGVmYXVsdHMuanMnO2ltcG9ydCBUZXh0RmllbGQgZnJvbScuLi90ZXh0L2luZGV4LmpzJztpbXBvcnQgZGVmYXVsdHMgZnJvbScuL2RlZmF1bHRzLmpzJztpbXBvcnQge2EgYXMgdGVtcGxhdGUsYiBhcyB0ZW1wbGF0ZXN9ZnJvbScuL3RlbXBsYXRlLTY1ZmVkYTA1LmpzJzt2YXIgVGV4dGFyZWFGaWVsZDtcblxuVGV4dGFyZWFGaWVsZCA9IGZ1bmN0aW9uICgpIHtcbiAgY2xhc3MgVGV4dGFyZWFGaWVsZCBleHRlbmRzIEZpZWxkIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG5cbiAgICAgIGlmICh0aGlzLl92YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gJyc7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhdGUuaGVpZ2h0ID0gdGhpcy5zZXR0aW5ncy5hdXRvSGVpZ2h0ID8gJ2F1dG8nIDogdGhpcy5zZXR0aW5ncy5oZWlnaHQ7XG4gICAgICB0aGlzLnN0YXRlLnR5cGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5jdXJzb3IgPSB7XG4gICAgICAgIHByZXY6IDAsXG4gICAgICAgIGN1cnJlbnQ6IDBcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2NyZWF0ZUVsZW1lbnRzKCk7XG5cbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzKCk7XG5cbiAgICAgIHRoaXMuX2NvbnN0cnVjdG9yRW5kKCk7XG4gICAgfVxuXG4gICAgX2dldFZhbHVlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cblxuICAgIF9zZXRWYWx1ZShuZXdWYWx1ZSkge1xuICAgICAgaWYgKElTLnN0cmluZyhuZXdWYWx1ZSkgfHwgSVMubnVtYmVyKG5ld1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWUgPSBTdHJpbmcobmV3VmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9yZWNhbGNEaXNwbGF5KCkge1xuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuYXV0b0hlaWdodCB8fCB0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWUgPSB0aGlzLl92YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfY3JlYXRlRWxlbWVudHMoKSB7XG4gICAgICB2YXIgZm9yY2VPcHRzO1xuICAgICAgZm9yY2VPcHRzID0ge1xuICAgICAgICByZWxhdGVkSW5zdGFuY2U6IHRoaXNcbiAgICAgIH07XG4gICAgICB0aGlzLmVsID0gdGhpcy50ZW1wbGF0ZS5zcGF3bih0aGlzLnNldHRpbmdzLnRlbXBsYXRlcy5kZWZhdWx0cywgZm9yY2VPcHRzKTtcbiAgICAgIHRoaXMuZWwuc3RhdGUoJ2hhc0xhYmVsJywgdGhpcy5zZXR0aW5ncy5sYWJlbCk7XG4gICAgICB0aGlzLmVsLmNoaWxkLmlubmVyd3JhcC5yYXcuX3F1aWNrRmllbGQgPSB0aGlzLmVsLmNoaWxkLmlucHV0LnJhdy5fcXVpY2tGaWVsZCA9IHRoaXM7XG4gICAgfVxuXG4gICAgX2F0dGFjaEJpbmRpbmdzKCkge1xuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3NfZWxTdGF0ZSgpO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5nc19kaXNwbGF5KCk7XG5cbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzX2Rpc3BsYXlfYXV0b1dpZHRoKCk7XG5cbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzX2Rpc3BsYXlfYXV0b0hlaWdodCgpO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5nc192YWx1ZSgpO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5nc19hdXRvY29tcGxldGUoKTtcblxuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3Nfc3RhdGVUcmlnZ2VycygpO1xuICAgIH1cblxuICAgIF9hdHRhY2hCaW5kaW5nc19kaXNwbGF5X2F1dG9IZWlnaHQoKSB7XG4gICAgICBTaW1wbHlCaW5kKCdoZWlnaHQnLCB7XG4gICAgICAgIHVwZGF0ZUV2ZW5JZlNhbWU6IHRydWVcbiAgICAgIH0pLm9mKHRoaXMuc3RhdGUpLnRyYW5zZm9ybVNlbGYoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmIChpc05hTih2YWx1ZSkgJiYgaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpKSB7XG4gICAgICAgICAgcmV0dXJuICdhdXRvJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pLnRvKGhlaWdodCA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLmNoaWxkLmlubmVyd3JhcC5zdHlsZSgnaGVpZ2h0JywgaGVpZ2h0KTtcbiAgICAgIH0pLnVwZGF0ZU9uKCdldmVudDppbnNlcnRlZCcpLm9mKHRoaXMpO1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgIFNpbXBseUJpbmQoJ192YWx1ZScsIHtcbiAgICAgICAgICB1cGRhdGVFdmVuSWZTYW1lOiB0cnVlLFxuICAgICAgICAgIHVwZGF0ZU9uQmluZDogZmFsc2VcbiAgICAgICAgfSkub2YodGhpcykudG8oJ2hlaWdodCcpLm9mKHRoaXMuc3RhdGUpLnRyYW5zZm9ybSgoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2dldElucHV0QXV0b0hlaWdodCgpO1xuICAgICAgICB9KS51cGRhdGVPbignZXZlbnQ6aW5zZXJ0ZWQnKS5vZih0aGlzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfYXR0YWNoQmluZGluZ3NfZGlzcGxheV9hdXRvV2lkdGgoKSB7XG4gICAgICBTaW1wbHlCaW5kKCd3aWR0aCcsIHtcbiAgICAgICAgdXBkYXRlRXZlbklmU2FtZTogdHJ1ZVxuICAgICAgfSkub2YodGhpcy5zdGF0ZSkudG8od2lkdGggPT4ge1xuICAgICAgICByZXR1cm4gKHRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoID8gdGhpcy5lbC5jaGlsZC5pbm5lcndyYXAgOiB0aGlzLmVsKS5zdHlsZSgnd2lkdGgnLCB3aWR0aCk7XG4gICAgICB9KS50cmFuc2Zvcm0odGhpcy5fZm9ybWF0V2lkdGguYmluZCh0aGlzKSkudXBkYXRlT24oJ2lzTW9iaWxlJykub2YodGhpcy5zdGF0ZSk7XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCkge1xuICAgICAgICBTaW1wbHlCaW5kKCdfdmFsdWUnLCB7XG4gICAgICAgICAgdXBkYXRlRXZlbklmU2FtZTogdHJ1ZSxcbiAgICAgICAgICB1cGRhdGVPbkJpbmQ6IGZhbHNlXG4gICAgICAgIH0pLm9mKHRoaXMpLnRvKCd3aWR0aCcpLm9mKHRoaXMuc3RhdGUpLnRyYW5zZm9ybSgoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2dldElucHV0QXV0b1dpZHRoKCk7XG4gICAgICAgIH0pLnVwZGF0ZU9uKCdldmVudDppbnNlcnRlZCcpLm9mKHRoaXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9hdHRhY2hCaW5kaW5nc192YWx1ZSgpIHtcbiAgICAgIHZhciBpbnB1dDtcbiAgICAgIGlucHV0ID0gdGhpcy5lbC5jaGlsZC5pbnB1dC5yYXc7XG4gICAgICBTaW1wbHlCaW5kKCdldmVudDppbnB1dCcpLm9mKGlucHV0KS50bygoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID0gaW5wdXQudmFsdWU7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ192YWx1ZScpLm9mKHRoaXMpLnRvKCd2YWx1ZScpLm9mKGlucHV0KS5hbmQudG8odmFsdWUgPT4ge1xuICAgICAgICB0aGlzLnN0YXRlLmZpbGxlZCA9ICEhdmFsdWU7XG5cbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5pbnRlcmFjdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RhdGUudmFsaWQgPSB0aGlzLnZhbGlkYXRlKHZvaWQgMCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmVtaXQoJ2lucHV0JywgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2F0dGFjaEJpbmRpbmdzX2F1dG9jb21wbGV0ZSgpIHt9XG5cbiAgICBfZ2V0SW5wdXRBdXRvSGVpZ2h0KCkge1xuICAgICAgdmFyIGlucHV0SGVpZ2h0LCBwcmV2SGVpZ2h0O1xuICAgICAgcHJldkhlaWdodCA9IHRoaXMuZWwuY2hpbGQuaW5wdXQucmF3LnN0eWxlLmhlaWdodDtcblxuICAgICAgaWYgKHRoaXMuX3ZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3NldFZhbHVlSWZOb3RTZXQoKTtcblxuICAgICAgICB0aGlzLmVsLmNoaWxkLmlucHV0LnN0eWxlKCdoZWlnaHQnLCAwKTtcbiAgICAgICAgaW5wdXRIZWlnaHQgPSB0aGlzLmVsLmNoaWxkLmlucHV0LnJhdy5zY3JvbGxIZWlnaHQgKyAyO1xuICAgICAgICBpbnB1dEhlaWdodCArPSB0aGlzLmVsLmNoaWxkLmlucHV0LnN0eWxlUGFyc2VkKCdtYXJnaW5Ub3AnKSArIHRoaXMuZWwuY2hpbGQuaW5wdXQuc3R5bGVQYXJzZWQoJ21hcmdpbkJvdHRvbScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5wdXRIZWlnaHQgPSB0aGlzLmVsLmNoaWxkLnBsYWNlaG9sZGVyLmhlaWdodDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbC5jaGlsZC5pbnB1dC5zdHlsZSgnaGVpZ2h0JywgcHJldkhlaWdodCk7XG4gICAgICByZXR1cm4gTWF0aC5taW4odGhpcy5zZXR0aW5ncy5tYXhIZWlnaHQsIE1hdGgubWF4KGlucHV0SGVpZ2h0LCB0aGlzLnNldHRpbmdzLm1pbkhlaWdodCkpO1xuICAgIH1cblxuICAgIF9nZXRJbnB1dEF1dG9XaWR0aCgpIHtcbiAgICAgIHZhciBpbnB1dFBhZGRpbmcsIGlucHV0V2lkdGgsIGxhYmVsV2lkdGg7XG5cbiAgICAgIGlmICh0aGlzLl92YWx1ZSkge1xuICAgICAgICB0aGlzLl9zZXRWYWx1ZUlmTm90U2V0KCk7XG5cbiAgICAgICAgdGhpcy5lbC5jaGlsZC5pbnB1dC5zdHlsZSh7XG4gICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICAgICAgfSkucmF3LnNjcm9sbExlZnQgPSAxZSsxMDtcbiAgICAgICAgaW5wdXRQYWRkaW5nID0gdGhpcy5lbC5jaGlsZC5pbnB1dC5zdHlsZVBhcnNlZCgncGFkZGluZ0xlZnQnKSB8fCB0aGlzLmVsLmNoaWxkLmlucHV0LnN0eWxlUGFyc2VkKCdwYWRkaW5nJyk7XG4gICAgICAgIGlucHV0V2lkdGggPSBNYXRoLm1heCh0aGlzLmVsLmNoaWxkLmlucHV0LnJhdy5zY3JvbGxMZWZ0ICsgdGhpcy5lbC5jaGlsZC5pbnB1dC5yYXcub2Zmc2V0V2lkdGgsIHRoaXMuZWwuY2hpbGQuaW5wdXQucmF3LnNjcm9sbFdpZHRoKSArIDIgKyBpbnB1dFBhZGRpbmcgKyAxO1xuICAgICAgICBsYWJlbFdpZHRoID0gdGhpcy5zZXR0aW5ncy5sYWJlbCAmJiB0aGlzLmVsLmNoaWxkLmxhYmVsLnN0eWxlU2FmZSgncG9zaXRpb24nKSA9PT0gJ2Fic29sdXRlJyA/IHRoaXMuZWwuY2hpbGQubGFiZWwucmVjdC53aWR0aCA6IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnB1dFdpZHRoID0gdGhpcy5lbC5jaGlsZC5wbGFjZWhvbGRlci5yZWN0LndpZHRoO1xuICAgICAgICBsYWJlbFdpZHRoID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbC5jaGlsZC5pbnB1dC5zdHlsZSh7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIHdoaXRlU3BhY2U6ICdub3JtYWwnXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBNYXRoLm1pbih0aGlzLl9nZXRXaWR0aFNldHRpbmcoJ21heCcpLCBNYXRoLm1heCh0aGlzLl9nZXRXaWR0aFNldHRpbmcoJ21pbicpLCBpbnB1dFdpZHRoLCBsYWJlbFdpZHRoKSk7XG4gICAgfVxuXG4gIH1cbiAgVGV4dGFyZWFGaWVsZC5wcm90b3R5cGUudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgVGV4dGFyZWFGaWVsZC5wcm90b3R5cGUudGVtcGxhdGVzID0gdGVtcGxhdGVzO1xuICBUZXh0YXJlYUZpZWxkLnByb3RvdHlwZS5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICBpbmhlcml0UHJvdG8oVGV4dGFyZWFGaWVsZCwgVGV4dEZpZWxkKTtcbiAgcmV0dXJuIFRleHRhcmVhRmllbGQ7XG59LmNhbGwodW5kZWZpbmVkKTtcblxudmFyIFRleHRhcmVhRmllbGQkMSA9IFRleHRhcmVhRmllbGQ7ZXhwb3J0IGRlZmF1bHQgVGV4dGFyZWFGaWVsZCQxOyIsInZhciBkZWZhdWx0cyA9IHtcbiAgcGxhY2Vob2xkZXI6IHRydWUsXG4gIHZhbGlkV2hlbk1pbjogZmFsc2UsXG4gIHZhbGlkV2hlbk1heDogZmFsc2UsXG4gIGF1dG9XaWR0aDogZmFsc2UsXG4gIG1heFdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogNDYsXG4gIGJ1dHRvbnM6IHRydWUsXG4gIG1pblZhbHVlOiAtMmUzMDgsXG4gIG1heFZhbHVlOiAyZTMwOCxcbiAgc3RlcDogMSxcbiAgZW5mb3JjZTogZmFsc2UsXG4gIGlucHV0U2libGluZzogJ2J1dHRvbnMnXG59O2V4cG9ydCBkZWZhdWx0IGRlZmF1bHRzOyIsImltcG9ydCBET00gZnJvbSdxdWlja2RvbSc7aW1wb3J0Jy4uLy4uL3N2Zy9jaGVja21hcmsuanMnO2ltcG9ydCcuLi8uLi9zdmcvYW5nbGVEb3duLmpzJztpbXBvcnQgY2FyZXRVcCBmcm9tJy4uLy4uL3N2Zy9jYXJldFVwLmpzJztpbXBvcnQgY2FyZXREb3duIGZyb20nLi4vLi4vc3ZnL2NhcmV0RG93bi5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9wbHVzLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2Nsb25lLmpzJztpbXBvcnQnLi4vLi4vc3ZnL3JlbW92ZS5qcyc7aW1wb3J0IENPTE9SUyBmcm9tJy4uLy4uL2NvbnN0YW50cy9jb2xvcnMuanMnO2ltcG9ydCB7YSBhcyB0ZXh0RmllbGRUZW1wbGF0ZX1mcm9tJy4uL3RleHQvdGVtcGxhdGUtMjMzZTk0MTMuanMnO3ZhciB0ZW1wbGF0ZSA9IHRleHRGaWVsZFRlbXBsYXRlLmV4dGVuZCgpO1xudmFyIHN0ZXBCdXR0b24gPSBET00udGVtcGxhdGUoWydkaXYnLCB7XG4gIHN0YXRlVHJpZ2dlcnM6IHtcbiAgICAnYWN0aXZlJzoge1xuICAgICAgb246ICdtb3VzZWRvd24nLFxuICAgICAgb2ZmOiAnbW91c2V1cCcsXG4gICAgICBidWJibGVzOiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgYXR0cnM6IHtcbiAgICB0YWJpbmRleDogLTFcbiAgfSxcbiAgc3R5bGU6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGhlaWdodDogMTcsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgb3V0bGluZTogJ25vbmUnLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIGZpbGw6IENPTE9SUy5ncmV5LFxuICAgICRhY3RpdmU6IHtcbiAgICAgIGZpbGw6IENPTE9SUy5ncmV5X2RhcmtcbiAgICB9XG4gIH1cbn1dKTtcbnZhciBidXR0b25zID0gRE9NLnRlbXBsYXRlKFsnZGl2Jywge1xuICByZWY6ICdidXR0b25zJyxcbiAgc3R5bGU6IHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICB6SW5kZXg6IDMsXG4gICAgdG9wOiAnNTAlJyxcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJyxcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICB3aWR0aDogMTcsXG4gICAgcGFkZGluZ1JpZ2h0OiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5pbnB1dFBhZGRpbmc7XG4gICAgfSxcbiAgICBvdXRsaW5lOiAnbm9uZSdcbiAgfVxufSwgc3RlcEJ1dHRvbi5leHRlbmQoe1xuICBjaGlsZHJlbjogW2NhcmV0VXBdLFxuICBvcHRpb25zOiB7XG4gICAgcmVmOiAnc3RlcFVwJ1xuICB9XG59KSwgc3RlcEJ1dHRvbi5leHRlbmQoe1xuICBjaGlsZHJlbjogW2NhcmV0RG93bl0sXG4gIG9wdGlvbnM6IHtcbiAgICByZWY6ICdzdGVwRG93bidcbiAgfVxufSldKTt2YXIgdGVtcGxhdGVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe2RlZmF1bHQ6IHRlbXBsYXRlLHN0ZXBCdXR0b246IHN0ZXBCdXR0b24sYnV0dG9uczogYnV0dG9uc30pO2V4cG9ydHt0ZW1wbGF0ZSBhcyBhLHRlbXBsYXRlcyBhcyBiLGJ1dHRvbnMgYXMgYyxzdGVwQnV0dG9uIGFzIGR9OyIsImltcG9ydCdAZGFuaWVsa2FsZW4vaXMnO2ltcG9ydCcuLi8uLi9jaGVja3MuanMnO2ltcG9ydCdxdWlja2RvbSc7aW1wb3J0IFNpbXBseUJpbmQgZnJvbSdAZGFuaWVsa2FsZW4vc2ltcGx5YmluZCc7aW1wb3J0Jy4uLy4uL2NvbnN0YW50cy9yZWdleC5qcyc7aW1wb3J0IHtpbmhlcml0UHJvdG99ZnJvbScuLi8uLi9oZWxwZXJzLmpzJztpbXBvcnQgZXh0ZW5kIGZyb20nc21hcnQtZXh0ZW5kJztpbXBvcnQnZmFzdGRvbSc7aW1wb3J0Jy4uLy4uL2NvbXBvbmVudHMvY29uZGl0aW9uLmpzJztpbXBvcnQnLi4vLi4vZmllbGQvdHJhbnNmb3JtU2V0dGluZ3MuanMnO2ltcG9ydCcuLi8uLi9maWVsZC9nbG9iYWxEZWZhdWx0cy5qcyc7aW1wb3J0IEZpZWxkIGZyb20nLi4vLi4vZmllbGQvaW5kZXguanMnO2ltcG9ydCBLRVlDT0RFUyBmcm9tJy4uLy4uL2NvbnN0YW50cy9rZXlDb2Rlcy5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9jaGVja21hcmsuanMnO2ltcG9ydCcuLi8uLi9zdmcvYW5nbGVEb3duLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2NhcmV0VXAuanMnO2ltcG9ydCcuLi8uLi9zdmcvY2FyZXREb3duLmpzJztpbXBvcnQnLi4vLi4vc3ZnL3BsdXMuanMnO2ltcG9ydCcuLi8uLi9zdmcvY2xvbmUuanMnO2ltcG9ydCcuLi8uLi9zdmcvcmVtb3ZlLmpzJztpbXBvcnQnLi4vLi4vY29tcG9uZW50cy9kcm9wZG93bi90ZW1wbGF0ZS1iOTYxZjgxZi5qcyc7aW1wb3J0Jy4uLy4uL2NvbXBvbmVudHMvZHJvcGRvd24vZGVmYXVsdHMuanMnO2ltcG9ydCcuLi8uLi9jb21wb25lbnRzL2Ryb3Bkb3duL2luZGV4LmpzJztpbXBvcnQndGV4dC1tYXNrLWNvcmUnO2ltcG9ydCd0ZXh0LW1hc2stYWRkb25zJztpbXBvcnQnLi4vLi4vY29tcG9uZW50cy9tYXNrLmpzJztpbXBvcnQnLi4vLi4vY29uc3RhbnRzL2NvbG9ycy5qcyc7aW1wb3J0Jy4uL3RleHQvdGVtcGxhdGUtMjMzZTk0MTMuanMnO2ltcG9ydCcuLi90ZXh0L2RlZmF1bHRzLmpzJztpbXBvcnQgVGV4dEZpZWxkIGZyb20nLi4vdGV4dC9pbmRleC5qcyc7aW1wb3J0IGRlZmF1bHRzIGZyb20nLi9kZWZhdWx0cy5qcyc7aW1wb3J0IHthIGFzIHRlbXBsYXRlLGIgYXMgdGVtcGxhdGVzLGMgYXMgYnV0dG9uc31mcm9tJy4vdGVtcGxhdGUtYzkyMmUxNjMuanMnO3ZhciBOdW1iZXJGaWVsZDtcblxuTnVtYmVyRmllbGQgPSBmdW5jdGlvbiAoKSB7XG4gIGNsYXNzIE51bWJlckZpZWxkIGV4dGVuZHMgRmllbGQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdmFyIHJlZjtcbiAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG5cbiAgICAgIGlmICh0aGlzLl92YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLmVuZm9yY2UgJiYgdGhpcy5zZXR0aW5ncy5taW5WYWx1ZSAmJiB0aGlzLnNldHRpbmdzLm1pblZhbHVlICE9PSAtMmUzMDgpIHtcbiAgICAgICAgdGhpcy5fdmFsdWUgfHwgKHRoaXMuX3ZhbHVlID0gdGhpcy5zZXR0aW5ncy5taW5WYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0dGluZ3Muc3RlcCA9IE51bWJlcih0aGlzLnNldHRpbmdzLnN0ZXApIHx8IDE7XG4gICAgICB0aGlzLnN0YXRlLnR5cGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5jdXJzb3IgPSB7XG4gICAgICAgIHByZXY6IDAsXG4gICAgICAgIGN1cnJlbnQ6IDBcbiAgICAgIH07XG4gICAgICB0aGlzLnByZWNpc2lvbiA9ICgocmVmID0gdGhpcy5zZXR0aW5ncy5zdGVwLnRvU3RyaW5nKCkuc3BsaXQoJy4nKVsxXSkgIT0gbnVsbCA/IHJlZi5sZW5ndGggOiB2b2lkIDApIHx8IDA7XG5cbiAgICAgIHRoaXMuX2NyZWF0ZUVsZW1lbnRzKCk7XG5cbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzKCk7XG5cbiAgICAgIHRoaXMuX2NvbnN0cnVjdG9yRW5kKCk7XG4gICAgfVxuXG4gICAgX2dldFZhbHVlKCkge1xuICAgICAgcmV0dXJuIE51bWJlcih0aGlzLl92YWx1ZSkgfHwgMDtcbiAgICB9XG5cbiAgICBfc2V0VmFsdWUobmV3VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZSA9IHRoaXMuX25vcm1hbGl6ZVZhbHVlKG5ld1ZhbHVlLCB0aGlzLnNldHRpbmdzLmVuZm9yY2UpO1xuICAgIH1cblxuICAgIF9jcmVhdGVFbGVtZW50cygpIHtcbiAgICAgIHZhciBnbG9iYWxPcHRzO1xuICAgICAgZ2xvYmFsT3B0cyA9IHtcbiAgICAgICAgcmVsYXRlZEluc3RhbmNlOiB0aGlzXG4gICAgICB9O1xuICAgICAgdGhpcy5lbCA9IHRoaXMudGVtcGxhdGUuc3Bhd24odGhpcy5zZXR0aW5ncy50ZW1wbGF0ZXMuZGVmYXVsdHMsIGdsb2JhbE9wdHMpO1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5idXR0b25zKSB7XG4gICAgICAgIGJ1dHRvbnMuc3Bhd24odGhpcy5zZXR0aW5ncy50ZW1wbGF0ZXMuYnV0dG9ucywgZ2xvYmFsT3B0cykuaW5zZXJ0QWZ0ZXIodGhpcy5lbC5jaGlsZC5pbnB1dCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZWwuc3RhdGUoJ2hhc0xhYmVsJywgdGhpcy5zZXR0aW5ncy5sYWJlbCk7XG4gICAgICB0aGlzLmVsLmNoaWxkLmlubmVyd3JhcC5yYXcuX3F1aWNrRmllbGQgPSB0aGlzLmVsLmNoaWxkZi5pbnB1dC5yYXcuX3F1aWNrRmllbGQgPSB0aGlzO1xuICAgIH1cblxuICAgIF9hdHRhY2hCaW5kaW5ncygpIHtcbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzX2VsU3RhdGUoKTtcblxuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3NfZGlzcGxheSgpO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5nc19kaXNwbGF5X2F1dG9XaWR0aCgpO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5nc192YWx1ZSgpO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5nc19zdGF0ZVRyaWdnZXJzKCk7XG5cbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzX3N0ZXBFdmVudHMoKTtcbiAgICB9XG5cbiAgICBfYXR0YWNoQmluZGluZ3NfdmFsdWUoKSB7XG4gICAgICB2YXIgaW5wdXQ7XG4gICAgICBpbnB1dCA9IHRoaXMuZWwuY2hpbGQuaW5wdXQucmF3O1xuICAgICAgU2ltcGx5QmluZCgnZXZlbnQ6aW5wdXQnKS5vZihpbnB1dCkudG8oKCkgPT4ge1xuICAgICAgICB2YXIgbmV3VmFsdWUsIHNlbGVjdE51bWJlclBhcnQ7XG4gICAgICAgIHRoaXMuY3Vyc29yLnByZXYgPSB0aGlzLmN1cnNvci5jdXJyZW50O1xuICAgICAgICB0aGlzLmN1cnNvci5jdXJyZW50ID0gdGhpcy5zZWxlY3Rpb24oKS5lbmQ7XG4gICAgICAgIG5ld1ZhbHVlID0gaW5wdXQudmFsdWU7XG5cbiAgICAgICAgaWYgKG5ld1ZhbHVlW25ld1ZhbHVlLmxlbmd0aCAtIDFdID09PSAnLScpIHtcbiAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5taW5WYWx1ZSA+IC0xKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHRoaXMuX3ZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IC0xO1xuICAgICAgICAgICAgc2VsZWN0TnVtYmVyUGFydCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc2V0VmFsdWUobmV3VmFsdWUpO1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmZvY3VzZWQpIHtcbiAgICAgICAgICBpZiAoc2VsZWN0TnVtYmVyUGFydCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uKDEsIDIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb24odGhpcy5jdXJzb3IuY3VycmVudCwgdGhpcy5jdXJzb3IuY3VycmVudCArIChTdHJpbmcodGhpcy5fdmFsdWUpLmxlbmd0aCAtIG5ld1ZhbHVlLmxlbmd0aCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCdfdmFsdWUnKS5vZih0aGlzKS50bygndmFsdWUnKS5vZihpbnB1dCkuYW5kLnRvKHZhbHVlID0+IHtcbiAgICAgICAgdGhpcy5zdGF0ZS5maWxsZWQgPSAhIVN0cmluZyh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKFN0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlLmludGVyYWN0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGF0ZS52YWxpZCA9IHRoaXMudmFsaWRhdGUodm9pZCAwLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1pdCgnaW5wdXQnLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ2V2ZW50OmJsdXInKS5vZihpbnB1dCkudG8oKCkgPT4ge1xuICAgICAgICB2YXIgdmFsdWU7XG5cbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmVuZm9yY2UpIHtcbiAgICAgICAgICB2YWx1ZSA9IE51bWJlcih0aGlzLl92YWx1ZSkgfHwgMDtcblxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMCB8fCAhdGhpcy5zdGF0ZS5pbnRlcmFjdGVkICYmIHZhbHVlID09PSB0aGlzLnNldHRpbmdzLm1pblZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWUgPSAnJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnZXZlbnQ6a2V5ZG93bicpLm9mKHRoaXMuZWwuY2hpbGQuaW5wdXQpLnRvKGV2ZW50ID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IEtFWUNPREVTLmVudGVyKSB7XG4gICAgICAgICAgdGhpcy5lbWl0KCdzdWJtaXQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmVtaXQoYGtleS0ke2V2ZW50LmtleUNvZGV9YCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBfYXR0YWNoQmluZGluZ3Nfc3RlcEV2ZW50cygpIHtcbiAgICAgIHZhciBzdG9wUHJvcGFnYXRpb247XG4gICAgICBTaW1wbHlCaW5kKCdldmVudDprZXlkb3duJykub2YodGhpcy5lbC5jaGlsZC5pbnB1dCkudG8oZXZlbnQgPT4ge1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgICBjYXNlIEtFWUNPREVTLnVwOlxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0ZXBVcCgpO1xuXG4gICAgICAgICAgY2FzZSBLRVlDT0RFUy5kb3duOlxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0ZXBEb3duKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5idXR0b25zKSB7XG4gICAgICAgIHN0b3BQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFNpbXBseUJpbmQoJ2V2ZW50OmNsaWNrJykub2YodGhpcy5lbC5jaGlsZC5zdGVwVXApLnRvKHRoaXMuc3RlcFVwLmJpbmQodGhpcykpLmFuZC50byhzdG9wUHJvcGFnYXRpb24pO1xuICAgICAgICBTaW1wbHlCaW5kKCdldmVudDpjbGljaycpLm9mKHRoaXMuZWwuY2hpbGQuc3RlcERvd24pLnRvKHRoaXMuc3RlcERvd24uYmluZCh0aGlzKSkuYW5kLnRvKHN0b3BQcm9wYWdhdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3NldFZhbHVlSWZOb3RTZXQoKSB7XG4gICAgICBpZiAoTnVtYmVyKHRoaXMuZWwuY2hpbGQuaW5wdXQucmF3LnZhbHVlKSAhPT0gdGhpcy5fdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuY2hpbGQuaW5wdXQucmF3LnZhbHVlID0gdGhpcy5fdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX25vcm1hbGl6ZVZhbHVlKHZhbHVlLCBlbmZvcmNlKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlID8gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMCA6IDA7XG5cbiAgICAgIGlmICh2YWx1ZSAlIHRoaXMuc2V0dGluZ3Muc3RlcCAmJiBlbmZvcmNlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA8IHRoaXMuc2V0dGluZ3Muc3RlcCkge1xuICAgICAgICAgIHZhbHVlID0gdGhpcy5zZXR0aW5ncy5zdGVwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gdGhpcy5fcm91bmRUb05lYXJlc3QodmFsdWUsIHRoaXMuc2V0dGluZ3Muc3RlcCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlIDwgdGhpcy5zZXR0aW5ncy5taW5WYWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IHRoaXMuc2V0dGluZ3MubWluVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZSA+IHRoaXMuc2V0dGluZ3MubWF4VmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGlzLnNldHRpbmdzLm1heFZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgX3JvdW5kVG9OZWFyZXN0KHZhbHVlLCB0YXJnZXQpIHtcbiAgICAgIHZhciBtdWx0aXBsaWVyO1xuICAgICAgdmFsdWUgPSAodmFsdWUgfHwgMCkudG9GaXhlZCh0aGlzLnByZWNpc2lvbikgKiAxO1xuICAgICAgbXVsdGlwbGllciA9IHRhcmdldCA8IDEgPyAxIC8gdGFyZ2V0IDogMTtcbiAgICAgIHRhcmdldCAqPSBtdWx0aXBsaWVyO1xuICAgICAgdmFsdWUgKj0gbXVsdGlwbGllcjtcbiAgICAgIHZhbHVlID0gTWF0aC5jZWlsKHZhbHVlIC8gdGFyZ2V0KSAqIHRhcmdldCAvIG11bHRpcGxpZXI7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgc3RlcFVwKCkge1xuICAgICAgdmFyIG5ld1ZhbHVlLCByb3VuZGVkO1xuICAgICAgcm91bmRlZCA9IHRoaXMuX3JvdW5kVG9OZWFyZXN0KHRoaXMuX3ZhbHVlLCB0aGlzLnNldHRpbmdzLnN0ZXApO1xuICAgICAgbmV3VmFsdWUgPSBNYXRoLm1pbihyb3VuZGVkICsgdGhpcy5zZXR0aW5ncy5zdGVwLCB0aGlzLl92YWx1ZSArIHRoaXMuc2V0dGluZ3Muc3RlcCk7XG4gICAgICByZXR1cm4gdGhpcy5fc2V0VmFsdWUodGhpcy5fcm91bmRUb05lYXJlc3QobmV3VmFsdWUsIHRoaXMuc2V0dGluZ3Muc3RlcCkpO1xuICAgIH1cblxuICAgIHN0ZXBEb3duKCkge1xuICAgICAgdmFyIG5ld1ZhbHVlLCByb3VuZGVkO1xuICAgICAgcm91bmRlZCA9IHRoaXMuX3JvdW5kVG9OZWFyZXN0KHRoaXMuX3ZhbHVlLCB0aGlzLnNldHRpbmdzLnN0ZXApO1xuICAgICAgbmV3VmFsdWUgPSBNYXRoLm1heChyb3VuZGVkIC0gdGhpcy5zZXR0aW5ncy5zdGVwLCB0aGlzLl92YWx1ZSAtIHRoaXMuc2V0dGluZ3Muc3RlcCk7XG4gICAgICByZXR1cm4gdGhpcy5fc2V0VmFsdWUodGhpcy5fcm91bmRUb05lYXJlc3QobmV3VmFsdWUsIHRoaXMuc2V0dGluZ3Muc3RlcCkpO1xuICAgIH1cblxuICB9XG4gIE51bWJlckZpZWxkLnByb3RvdHlwZS50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICBOdW1iZXJGaWVsZC5wcm90b3R5cGUudGVtcGxhdGVzID0gdGVtcGxhdGVzO1xuICBOdW1iZXJGaWVsZC5wcm90b3R5cGUuZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgaW5oZXJpdFByb3RvKE51bWJlckZpZWxkLCBUZXh0RmllbGQpO1xuICByZXR1cm4gTnVtYmVyRmllbGQ7XG59LmNhbGwodW5kZWZpbmVkKTtcblxuZXh0ZW5kLm5vdEtleXMoTnVtYmVyRmllbGQucHJvdG90eXBlKShOdW1iZXJGaWVsZC5wcm90b3R5cGUsIFRleHRGaWVsZC5wcm90b3R5cGUpO1xudmFyIE51bWJlckZpZWxkJDEgPSBOdW1iZXJGaWVsZDtleHBvcnQgZGVmYXVsdCBOdW1iZXJGaWVsZCQxOyIsInZhciBkZWZhdWx0cyA9IHtcbiAgcGxhY2Vob2xkZXI6IHRydWUsXG4gIHZhbGlkV2hlbklzQ2hvaWNlOiBmYWxzZSxcbiAgdmFsaWRXaGVuUmVnZXg6IGZhbHNlLFxuICB2YWxpZFdoZW5DaG9zZU1pbjogMmUzMDgsXG4gIGF1dG9XaWR0aDogZmFsc2UsXG4gIG1heFdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogNDYsXG4gIGxhYmVsRmlsdGVyOiBudWxsLFxuICBjaG9pY2VzOiBbXSxcbiAgbXVsdGlwbGU6IGZhbHNlLFxuICBkcm9wZG93bjoge1xuICAgIHR5cGVCdWZmZXI6IHRydWVcbiAgfSxcbiAgaW5wdXRTaWJsaW5nOiAnY2FyZXQnXG59O2V4cG9ydCBkZWZhdWx0IGRlZmF1bHRzOyIsImltcG9ydCdxdWlja2RvbSc7aW1wb3J0Jy4uLy4uL3N2Zy9jaGVja21hcmsuanMnO2ltcG9ydCcuLi8uLi9zdmcvYW5nbGVEb3duLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2NhcmV0VXAuanMnO2ltcG9ydCBjYXJldERvd24gZnJvbScuLi8uLi9zdmcvY2FyZXREb3duLmpzJztpbXBvcnQnLi4vLi4vc3ZnL3BsdXMuanMnO2ltcG9ydCcuLi8uLi9zdmcvY2xvbmUuanMnO2ltcG9ydCcuLi8uLi9zdmcvcmVtb3ZlLmpzJztpbXBvcnQgQ09MT1JTIGZyb20nLi4vLi4vY29uc3RhbnRzL2NvbG9ycy5qcyc7aW1wb3J0IHthIGFzIHRleHRGaWVsZFRlbXBsYXRlfWZyb20nLi4vdGV4dC90ZW1wbGF0ZS0yMzNlOTQxMy5qcyc7dmFyIHRlbXBsYXRlID0gdGV4dEZpZWxkVGVtcGxhdGUuZXh0ZW5kKHtcbiAgY2hpbGRyZW46IHtcbiAgICBpbm5lcndyYXA6IHtcbiAgICAgIGNoaWxkcmVuOiB7XG4gICAgICAgICdpbnB1dCc6IFsnZGl2Jywge1xuICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICB0YWJJbmRleDogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIG1hcmdpblRvcDogMyxcbiAgICAgICAgICAgIGhlaWdodDogJ2F1dG8nLFxuICAgICAgICAgICAgY3Vyc29yOiAnZGVmYXVsdCcsXG4gICAgICAgICAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgICAgICAgICAvLyBvdmVyZmxvdzogJ3Njcm9sbCdcbiAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgICAgIH1cbiAgICAgICAgfV0sXG4gICAgICAgICdjYXJldCc6IFsnZGl2Jywge1xuICAgICAgICAgIHJlZjogJ2NhcmV0JyxcbiAgICAgICAgICBzdHlsZUFmdGVySW5zZXJ0OiB0cnVlLFxuICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgIHpJbmRleDogMyxcbiAgICAgICAgICAgIHRvcDogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5zdHlsZVBhcnNlZCgnaGVpZ2h0JywgdHJ1ZSkgLyAyIC0gdGhpcy5zdHlsZVBhcnNlZCgnaGVpZ2h0JykgLyAyO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICAgICAgd2lkdGg6IDE3LFxuICAgICAgICAgICAgaGVpZ2h0OiAxNyxcbiAgICAgICAgICAgIHBhZGRpbmdSaWdodDogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5pbnB1dFBhZGRpbmc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgICAgICAgICBvdXRsaW5lOiAnbm9uZScsXG4gICAgICAgICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICAgICAgICBmaWxsOiBDT0xPUlMuZ3JleVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgY2FyZXREb3duXVxuICAgICAgfVxuICAgIH1cbiAgfVxufSk7dmFyIHRlbXBsYXRlcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtkZWZhdWx0OiB0ZW1wbGF0ZX0pO2V4cG9ydHt0ZW1wbGF0ZSBhcyBhLHRlbXBsYXRlcyBhcyBifTsiLCJpbXBvcnQnQGRhbmllbGthbGVuL2lzJztpbXBvcnQgSVMgZnJvbScuLi8uLi9jaGVja3MuanMnO2ltcG9ydCBET00gZnJvbSdxdWlja2RvbSc7aW1wb3J0IFNpbXBseUJpbmQgZnJvbSdAZGFuaWVsa2FsZW4vc2ltcGx5YmluZCc7aW1wb3J0Jy4uLy4uL2NvbnN0YW50cy9yZWdleC5qcyc7aW1wb3J0IHtpbmhlcml0UHJvdG8saW5jbHVkZXN9ZnJvbScuLi8uLi9oZWxwZXJzLmpzJztpbXBvcnQnc21hcnQtZXh0ZW5kJztpbXBvcnQnZmFzdGRvbSc7aW1wb3J0Jy4uLy4uL2NvbXBvbmVudHMvY29uZGl0aW9uLmpzJztpbXBvcnQnLi4vLi4vZmllbGQvdHJhbnNmb3JtU2V0dGluZ3MuanMnO2ltcG9ydCcuLi8uLi9maWVsZC9nbG9iYWxEZWZhdWx0cy5qcyc7aW1wb3J0IEZpZWxkIGZyb20nLi4vLi4vZmllbGQvaW5kZXguanMnO2ltcG9ydCcuLi8uLi9jb25zdGFudHMva2V5Q29kZXMuanMnO2ltcG9ydCcuLi8uLi9zdmcvY2hlY2ttYXJrLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2FuZ2xlRG93bi5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9jYXJldFVwLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2NhcmV0RG93bi5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9wbHVzLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2Nsb25lLmpzJztpbXBvcnQnLi4vLi4vc3ZnL3JlbW92ZS5qcyc7aW1wb3J0Jy4uLy4uL2NvbXBvbmVudHMvZHJvcGRvd24vdGVtcGxhdGUtYjk2MWY4MWYuanMnO2ltcG9ydCcuLi8uLi9jb21wb25lbnRzL2Ryb3Bkb3duL2RlZmF1bHRzLmpzJztpbXBvcnQgRHJvcGRvd24se0Nob2ljZX1mcm9tJy4uLy4uL2NvbXBvbmVudHMvZHJvcGRvd24vaW5kZXguanMnO2ltcG9ydCd0ZXh0LW1hc2stY29yZSc7aW1wb3J0J3RleHQtbWFzay1hZGRvbnMnO2ltcG9ydCcuLi8uLi9jb21wb25lbnRzL21hc2suanMnO2ltcG9ydCcuLi8uLi9jb25zdGFudHMvY29sb3JzLmpzJztpbXBvcnQnLi4vdGV4dC90ZW1wbGF0ZS0yMzNlOTQxMy5qcyc7aW1wb3J0Jy4uL3RleHQvZGVmYXVsdHMuanMnO2ltcG9ydCBUZXh0RmllbGQgZnJvbScuLi90ZXh0L2luZGV4LmpzJztpbXBvcnQgZGVmYXVsdHMgZnJvbScuL2RlZmF1bHRzLmpzJztpbXBvcnQge2EgYXMgdGVtcGxhdGUsYiBhcyB0ZW1wbGF0ZXN9ZnJvbScuL3RlbXBsYXRlLTZiYmNkZGQwLmpzJzt2YXIgU2VsZWN0RmllbGQ7XG5cblNlbGVjdEZpZWxkID0gZnVuY3Rpb24gKCkge1xuICBjbGFzcyBTZWxlY3RGaWVsZCBleHRlbmRzIEZpZWxkIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHZhciBiYXNlO1xuICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgIHRoaXMuc2V0dGluZ3MuZHJvcGRvd24ubXVsdGlwbGUgPSB0aGlzLnNldHRpbmdzLm11bHRpcGxlO1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5tdWx0aXBsZSkge1xuICAgICAgICBpZiAoKGJhc2UgPSB0aGlzLnNldHRpbmdzLmRyb3Bkb3duKS5oZWxwID09IG51bGwpIHtcbiAgICAgICAgICBiYXNlLmhlbHAgPSAnVGlwOiBwcmVzcyBFU0MgdG8gY2xvc2UgdGhpcyBtZW51JztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl92YWx1ZSA9IHRoaXMuc2V0dGluZ3MubXVsdGlwbGUgPyBbXSA6IG51bGw7XG4gICAgICB0aGlzLmRyb3Bkb3duID0gbmV3IERyb3Bkb3duKHRoaXMuc2V0dGluZ3MuY2hvaWNlcywgdGhpcyk7XG5cbiAgICAgIHRoaXMuX2NyZWF0ZUVsZW1lbnRzKCk7XG5cbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzKCk7XG5cbiAgICAgIHRoaXMuX2NvbnN0cnVjdG9yRW5kKCk7XG4gICAgfVxuXG4gICAgX2dldFZhbHVlKCkge1xuICAgICAgdmFyIHJlZjtcblxuICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLm11bHRpcGxlKSB7XG4gICAgICAgIHJldHVybiAocmVmID0gdGhpcy5fdmFsdWUpICE9IG51bGwgPyByZWYudmFsdWUgOiB2b2lkIDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWUubWFwKGZ1bmN0aW9uIChjaG9pY2UpIHtcbiAgICAgICAgICByZXR1cm4gY2hvaWNlLnZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfc2V0VmFsdWUobmV3VmFsdWUpIHtcbiAgICAgIHZhciBpLCBsZW4sIHZhbHVlO1xuXG4gICAgICBpZiAoIXRoaXMuc2V0dGluZ3MubXVsdGlwbGUgfHwgIUlTLmFycmF5KG5ld1ZhbHVlKSkge1xuICAgICAgICB0aGlzLnNldENob2ljZShuZXdWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBuZXdWYWx1ZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHZhbHVlID0gbmV3VmFsdWVbaV07XG4gICAgICAgICAgdGhpcy5zZXRDaG9pY2UodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3JlY2FsY0Rpc3BsYXkoKSB7XG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVMYWJlbCA9IHRoaXMudmFsdWVMYWJlbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfY3JlYXRlRWxlbWVudHMoKSB7XG4gICAgICB2YXIgZm9yY2VPcHRzO1xuICAgICAgZm9yY2VPcHRzID0ge1xuICAgICAgICByZWxhdGVkSW5zdGFuY2U6IHRoaXNcbiAgICAgIH07XG4gICAgICB0aGlzLmVsID0gdGhpcy50ZW1wbGF0ZS5zcGF3bih0aGlzLnNldHRpbmdzLnRlbXBsYXRlcy5kZWZhdWx0LCBmb3JjZU9wdHMpO1xuICAgICAgdGhpcy5kcm9wZG93bi5hcHBlbmRUbyh0aGlzLmVsLmNoaWxkLmlubmVyd3JhcCk7XG4gICAgICB0aGlzLmVsLmNoaWxkLnBsYWNlaG9sZGVyLmluc2VydEJlZm9yZSh0aGlzLmVsLmNoaWxkLmlucHV0KTtcblxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubGFiZWwpIHtcbiAgICAgICAgdGhpcy5lbC5jaGlsZC5sYWJlbC50ZXh0ID0gdGhpcy5zZXR0aW5ncy5sYWJlbDtcbiAgICAgICAgdGhpcy5lbC5zdGF0ZSgnaGFzTGFiZWwnLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbC5jaGlsZC5pbm5lcndyYXAucmF3Ll9xdWlja0ZpZWxkID0gdGhpcy5lbC5jaGlsZC5pbnB1dC5yYXcuX3F1aWNrRmllbGQgPSB0aGlzO1xuICAgIH1cblxuICAgIF9hdHRhY2hCaW5kaW5ncygpIHtcbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzX2VsU3RhdGUoKTtcblxuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3NfdmFsdWUoKTtcblxuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3NfZGlzcGxheSgpO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5nc19kaXNwbGF5X2F1dG9XaWR0aCgpO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5nc19kcm9wZG93bigpO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5nc19zdGF0ZVRyaWdnZXJzKCk7XG4gICAgfVxuXG4gICAgX2F0dGFjaEJpbmRpbmdzX2Rpc3BsYXlfYXV0b1dpZHRoKCkge1xuICAgICAgU2ltcGx5QmluZCgnd2lkdGgnLCB7XG4gICAgICAgIHVwZGF0ZUV2ZW5JZlNhbWU6IHRydWVcbiAgICAgIH0pLm9mKHRoaXMuc3RhdGUpLnRvKHdpZHRoID0+IHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCA/IHRoaXMuZWwuY2hpbGQuaW5wdXQgOiB0aGlzLmVsKS5zdHlsZSh7XG4gICAgICAgICAgd2lkdGhcbiAgICAgICAgfSk7XG4gICAgICB9KS50cmFuc2Zvcm0odGhpcy5fZm9ybWF0V2lkdGguYmluZCh0aGlzKSkudXBkYXRlT24oJ2lzTW9iaWxlJykub2YodGhpcy5zdGF0ZSk7XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCkge1xuICAgICAgICBTaW1wbHlCaW5kKCd2YWx1ZUxhYmVsJywge1xuICAgICAgICAgIHVwZGF0ZUV2ZW5JZlNhbWU6IHRydWUsXG4gICAgICAgICAgdXBkYXRlT25CaW5kOiBmYWxzZVxuICAgICAgICB9KS5vZih0aGlzKS50bygnd2lkdGgnKS5vZih0aGlzLnN0YXRlKS50cmFuc2Zvcm0oKCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRJbnB1dEF1dG9XaWR0aCgpO1xuICAgICAgICB9KS51cGRhdGVPbignZXZlbnQ6aW5zZXJ0ZWQnKS5vZih0aGlzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfZ2V0SW5wdXRBdXRvV2lkdGgoKSB7XG4gICAgICB2YXIgaW5wdXRXaWR0aCwgbGFiZWxXaWR0aDtcblxuICAgICAgaWYgKHRoaXMudmFsdWVMYWJlbCkge1xuICAgICAgICB0aGlzLmVsLmNoaWxkLmlucHV0LnN0eWxlKCd3aWR0aCcsIDApO1xuICAgICAgICBpbnB1dFdpZHRoID0gdGhpcy5lbC5jaGlsZC5pbnB1dC5yYXcuc2Nyb2xsV2lkdGggKyAyO1xuICAgICAgICBsYWJlbFdpZHRoID0gdGhpcy5lbC5jaGlsZC5sYWJlbC5zdHlsZVNhZmUoJ3Bvc2l0aW9uJykgPT09ICdhYnNvbHV0ZScgPyB0aGlzLmVsLmNoaWxkLmxhYmVsLnJlY3Qud2lkdGggOiAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5wdXRXaWR0aCA9IHRoaXMuZWwuY2hpbGQucGxhY2Vob2xkZXIucmVjdC53aWR0aDtcbiAgICAgICAgbGFiZWxXaWR0aCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBNYXRoLm1heChpbnB1dFdpZHRoLCBsYWJlbFdpZHRoKTtcbiAgICB9XG5cbiAgICBfYXR0YWNoQmluZGluZ3NfdmFsdWUoKSB7XG4gICAgICBTaW1wbHlCaW5kKCdhcnJheTpfdmFsdWUnKS5vZih0aGlzKS50byhzZWxlY3RlZCA9PiB7XG4gICAgICAgIHRoaXMuc3RhdGUuZmlsbGVkID0gdGhpcy5zZXR0aW5ncy5tdWx0aXBsZSA/ICEhKHNlbGVjdGVkICE9IG51bGwgPyBzZWxlY3RlZC5sZW5ndGggOiB2b2lkIDApIDogISFzZWxlY3RlZDtcblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5maWxsZWQpIHtcbiAgICAgICAgICB0aGlzLnN0YXRlLmludGVyYWN0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGF0ZS52YWxpZCA9IHRoaXMudmFsaWRhdGUodm9pZCAwLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1pdCgnaW5wdXQnLCB0aGlzLnZhbHVlKTtcbiAgICAgIH0pLmFuZC50bygndmFsdWVMYWJlbCcpLm9mKHRoaXMpLnRyYW5zZm9ybShzZWxlY3RlZCA9PiB7XG4gICAgICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubXVsdGlwbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZC5tYXAoZnVuY3Rpb24gKGNob2ljZSkge1xuICAgICAgICAgICAgICByZXR1cm4gY2hvaWNlLmxhYmVsO1xuICAgICAgICAgICAgfSkuam9pbignLCAnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkLmxhYmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCd2YWx1ZUxhYmVsJykub2YodGhpcykudG8oJ3RleHQnKS5vZih0aGlzLmVsLmNoaWxkLmlucHV0KS50cmFuc2Zvcm0obGFiZWwgPT4ge1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5sYWJlbEZvcm1hdCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmxhYmVsRm9ybWF0KGxhYmVsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF9hdHRhY2hCaW5kaW5nc19kcm9wZG93bigpIHtcbiAgICAgIFNpbXBseUJpbmQoJ2V2ZW50OmNsaWNrJykub2YodGhpcy5lbC5jaGlsZC5pbnB1dCkudG8oZXZlbnQgPT4ge1xuICAgICAgICB2YXIgZXNjTGlzdGVuZXI7XG5cbiAgICAgICAgaWYgKCEodGhpcy5zdGF0ZS5kaXNhYmxlZCB8fCB0aGlzLmRyb3Bkb3duLmNob2ljZXMubGVuZ3RoID09PSAwKSkge1xuICAgICAgICAgIHRoaXMuZHJvcGRvd24uaXNPcGVuID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICAgICAgRE9NKGRvY3VtZW50KS5vbignY2xpY2suZHJvcGRvd24nLCBldmVudCA9PiB7XG4gICAgICAgICAgICBpZiAoRE9NKGV2ZW50LnRhcmdldCkucGFyZW50TWF0Y2hpbmcocGFyZW50ID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudCA9PT0gdGhpcy5lbC5jaGlsZC5pbm5lcndyYXA7XG4gICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRyb3Bkb3duLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgIGVzY0xpc3RlbmVyID0gU2ltcGx5QmluZCgnZXZlbnQ6a2V5ZG93bicpLm9mKGRvY3VtZW50KS5vbmNlLnRvKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRyb3Bkb3duLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgIH0pLmNvbmRpdGlvbihmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBldmVudC5rZXlDb2RlID09PSAyNztcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gU2ltcGx5QmluZCgnaXNPcGVuJywge1xuICAgICAgICAgICAgdXBkYXRlT25CaW5kOiBmYWxzZVxuICAgICAgICAgIH0pLm9mKHRoaXMuZHJvcGRvd24pLm9uY2UudG8oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZXNjTGlzdGVuZXIudW5CaW5kKCk7XG4gICAgICAgICAgICByZXR1cm4gRE9NKGRvY3VtZW50KS5vZmYoJ2NsaWNrLmRyb3Bkb3duJyk7XG4gICAgICAgICAgfSkuY29uZGl0aW9uKGZ1bmN0aW9uIChpc09wZW4pIHtcbiAgICAgICAgICAgIHJldHVybiAhaXNPcGVuO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ2V2ZW50OmNsaWNrJykub2YodGhpcy5lbC5jaGlsZC5pbm5lcndyYXApLnRvKGV2ZW50ID0+IHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLmNoaWxkLmlucHV0LmVtaXRQcml2YXRlKCdjbGljaycpO1xuICAgICAgfSkuY29uZGl0aW9uKGV2ZW50ID0+IHtcbiAgICAgICAgcmV0dXJuIGV2ZW50LnRhcmdldCA9PT0gdGhpcy5lbC5jaGlsZC5pbm5lcndyYXAucmF3O1xuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCdmb2N1c2VkJywge1xuICAgICAgICB1cGRhdGVPbkJpbmQ6IGZhbHNlXG4gICAgICB9KS5vZih0aGlzLnN0YXRlKS50byhmb2N1c2VkID0+IHtcbiAgICAgICAgdmFyIHRyaWdnZXJpbmdLZXljb2RlcztcblxuICAgICAgICBpZiAoIWZvY3VzZWQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lbC5jaGlsZC5pbnB1dC5vZmYoJ2tleWRvd24uZHJvcGRvd25UcmlnZ2VyJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJpZ2dlcmluZ0tleWNvZGVzID0gWzMyLCAzNywgMzgsIDM5LCA0MF07XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZWwuY2hpbGQuaW5wdXQub24oJ2tleWRvd24uZHJvcGRvd25UcmlnZ2VyJywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgdmFyIHJlZjtcblxuICAgICAgICAgICAgaWYgKGluY2x1ZGVzKHRyaWdnZXJpbmdLZXljb2RlcywgZXZlbnQua2V5Q29kZSkgJiYgIXRoaXMuZHJvcGRvd24uaXNPcGVuKSB7XG4gICAgICAgICAgICAgIHRoaXMuZHJvcGRvd24uaXNPcGVuID0gdHJ1ZTtcblxuICAgICAgICAgICAgICBpZiAoKHJlZiA9IHRoaXMuZHJvcGRvd24ubGFzdFNlbGVjdGVkKSAhPSBudWxsID8gcmVmLnNlbGVjdGVkIDogdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcm9wZG93bi5jdXJyZW50SGlnaGxpZ2h0ZWQgPSB0aGlzLmRyb3Bkb3duLmxhc3RTZWxlY3RlZDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSA5ICYmIHRoaXMuZHJvcGRvd24uaXNPcGVuKSB7XG4gICAgICAgICAgICAgIC8vIFByZXZlbnQgdGFiIGtleVxuICAgICAgICAgICAgICByZXR1cm4gZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLmRyb3Bkb3duLm9uU2VsZWN0ZWQoY2hvaWNlID0+IHtcbiAgICAgICAgaWYgKCEoY2hvaWNlLnNlbGVjdGVkICYmICF0aGlzLnNldHRpbmdzLm11bHRpcGxlKSkge1xuICAgICAgICAgIHRoaXMudmFsdWUgPSBjaG9pY2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuc2V0dGluZ3MubXVsdGlwbGUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5kcm9wZG93bi5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2F0dGFjaEJpbmRpbmdzX3N0YXRlVHJpZ2dlcnMoKSB7XG4gICAgICAvLyMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgIC8vIyBTdGF0ZSBldmVudCB0cmlnZ2Vyc1xuICAgICAgLy8jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IFxuICAgICAgU2ltcGx5QmluZCgnZXZlbnQ6bW91c2VlbnRlcicpLm9mKHRoaXMuZWwuY2hpbGQuaW5wdXQpLnRvKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuaG92ZXJlZCA9IHRydWU7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ2V2ZW50Om1vdXNlbGVhdmUnKS5vZih0aGlzLmVsLmNoaWxkLmlucHV0KS50bygoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmhvdmVyZWQgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnZXZlbnQ6Zm9jdXMnKS5vZih0aGlzLmVsLmNoaWxkLmlucHV0KS50bygoKSA9PiB7XG4gICAgICAgIHRoaXMuc3RhdGUuZm9jdXNlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZGlzYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ibHVyKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnZXZlbnQ6Ymx1cicpLm9mKHRoaXMuZWwuY2hpbGQuaW5wdXQpLnRvKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuZm9jdXNlZCA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3ZhbGlkYXRlKHByb3ZpZGVkVmFsdWUpIHtcbiAgICAgIHZhciBtYXRjaGluZ0Nob2ljZSwgcmVmLCByZWYxO1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy52YWxpZFdoZW5SZWdleCAmJiBJUy5yZWdleCh0aGlzLnNldHRpbmdzLnZhbGlkV2hlblJlZ2V4KSkge1xuICAgICAgICBzd2l0Y2ggKGZhbHNlKSB7XG4gICAgICAgICAgY2FzZSAhdGhpcy5zZXR0aW5ncy5tdWx0aXBsZTpcbiAgICAgICAgICAgIGlmICghKCgpID0+IHtcbiAgICAgICAgICAgICAgdmFyIHZhbGlkQ2hvaWNlcztcblxuICAgICAgICAgICAgICBpZiAocHJvdmlkZWRWYWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YWxpZENob2ljZXMgPSBwcm92aWRlZFZhbHVlLmZpbHRlcihjaG9pY2UgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnZhbGlkV2hlblJlZ2V4LnRlc3QoY2hvaWNlKTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MudmFsaWRXaGVuQ2hvc2VNaW4gPT09IDJlMzA4IHx8ICFJUy5udW1iZXIodGhpcy5zZXR0aW5ncy52YWxpZFdoZW5DaG9zZU1pbikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsaWRDaG9pY2VzLmxlbmd0aCA9PT0gcHJvdmlkZWRWYWx1ZS5sZW5ndGg7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbGlkQ2hvaWNlcy5sZW5ndGggPj0gdGhpcy5zZXR0aW5ncy52YWxpZFdoZW5DaG9zZU1pbjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoKSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy52YWxpZFdoZW5SZWdleC50ZXN0KHByb3ZpZGVkVmFsdWUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLnZhbGlkV2hlbklzQ2hvaWNlICYmICgocmVmID0gdGhpcy5kcm9wZG93bi5jaG9pY2VzKSAhPSBudWxsID8gcmVmLmxlbmd0aCA6IHZvaWQgMCkpIHtcbiAgICAgICAgbWF0Y2hpbmdDaG9pY2UgPSB0aGlzLmRyb3Bkb3duLmNob2ljZXMuZmlsdGVyKGZ1bmN0aW9uIChvcHRpb24pIHtcbiAgICAgICAgICByZXR1cm4gb3B0aW9uLnZhbHVlID09PSBwcm92aWRlZFZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoISEhbWF0Y2hpbmdDaG9pY2UubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLm11bHRpcGxlICYmIC0xID4gKHJlZjEgPSB0aGlzLnNldHRpbmdzLnZhbGlkV2hlbkNob3NlTWluKSAmJiByZWYxIDwgMmUzMDgpIHtcbiAgICAgICAgaWYgKCFwcm92aWRlZFZhbHVlLmxlbmd0aCA+PSB0aGlzLnNldHRpbmdzLnZhbGlkV2hlbkNob3NlTWluKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLm11bHRpcGxlICYmIHRoaXMuc2V0dGluZ3MucmVxdWlyZWQpIHtcbiAgICAgICAgaWYgKCFwcm92aWRlZFZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBhZGRDaG9pY2UoY2hvaWNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5kcm9wZG93bi5hZGRDaG9pY2UoY2hvaWNlKTtcbiAgICB9XG5cbiAgICBzZXRDaG9pY2UoY2hvaWNlKSB7XG4gICAgICB2YXIgbWF0Y2gsIHJlZjtcblxuICAgICAgaWYgKElTLm9iamVjdChjaG9pY2UpICYmIGNob2ljZSBpbnN0YW5jZW9mIENob2ljZSkge1xuICAgICAgICByZXR1cm4gY2hvaWNlLnRvZ2dsZSgpO1xuICAgICAgfSBlbHNlIGlmIChtYXRjaCA9IHRoaXMuZHJvcGRvd24uZmluZENob2ljZUFueShjaG9pY2UpKSB7XG4gICAgICAgIHJldHVybiBtYXRjaC50b2dnbGUodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKHJlZiA9IHRoaXMuYWRkQ2hvaWNlKGNob2ljZSkpICE9IG51bGwgPyByZWYudG9nZ2xlKHRydWUpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cblxuICB9XG4gIFNlbGVjdEZpZWxkLnByb3RvdHlwZS50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICBTZWxlY3RGaWVsZC5wcm90b3R5cGUudGVtcGxhdGVzID0gdGVtcGxhdGVzO1xuICBTZWxlY3RGaWVsZC5wcm90b3R5cGUuZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgU2VsZWN0RmllbGQucHJvdG90eXBlLmNvcmVWYWx1ZVByb3AgPSAndmFsdWUnO1xuICByZXR1cm4gU2VsZWN0RmllbGQ7XG59LmNhbGwodW5kZWZpbmVkKTtcblxuaW5oZXJpdFByb3RvKFNlbGVjdEZpZWxkLCBUZXh0RmllbGQsIFsnX2dldE1heFdpZHRoJywgJ19hdHRhY2hCaW5kaW5nc19lbFN0YXRlJywgJ19hdHRhY2hCaW5kaW5nc19kaXNwbGF5JywgJ2ZvY3VzJywgJ2JsdXInXSk7XG52YXIgU2VsZWN0RmllbGQkMSA9IFNlbGVjdEZpZWxkO2V4cG9ydCBkZWZhdWx0IFNlbGVjdEZpZWxkJDE7IiwiaW1wb3J0IERPTSBmcm9tJ3F1aWNrZG9tJztpbXBvcnQgQ09MT1JTIGZyb20nLi4vLi4vY29uc3RhbnRzL2NvbG9ycy5qcyc7dmFyIHRlbXBsYXRlID0gRE9NLnRlbXBsYXRlKFsnZGl2Jywge1xuICByZWY6ICdmaWVsZCcsXG4gIHN0eWxlOiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgZGlzcGxheTogJ25vbmUnLFxuICAgIHdpZHRoOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zdGF0ZS53aWR0aDtcbiAgICB9LFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIGZvbnRGYW1pbHk6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLnNldHRpbmdzLmZvbnRGYW1pbHk7XG4gICAgfSxcbiAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAkdmlzaWJsZToge1xuICAgICAgJGhhc1Zpc2libGVDaG9pY2VzOiB7XG4gICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gICAgICB9XG4gICAgfSxcbiAgICAkc2hvd0Vycm9yOiB7XG4gICAgICBhbmltYXRpb246ICcwLjJzIGZpZWxkRXJyb3JTaGFrZSdcbiAgICB9XG4gIH1cbn0sIFsnZGl2Jywge1xuICByZWY6ICdsYWJlbCcsXG4gIHN0eWxlOiB7XG4gICAgZGlzcGxheTogJ25vbmUnLFxuICAgIG1hcmdpbkJvdHRvbTogJzEycHgnLFxuICAgIGZvbnRGYW1pbHk6ICdpbmhlcml0JyxcbiAgICBmb250U2l6ZTogJzEzcHgnLFxuICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICBjb2xvcjogQ09MT1JTLmJsYWNrLFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgJHNob3dMYWJlbDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH0sXG4gICAgJHNob3dFcnJvcjoge1xuICAgICAgY29sb3I6IENPTE9SUy5yZWRcbiAgICB9XG4gIH1cbn1dLCBbJ2RpdicsIHtcbiAgcmVmOiAnaW5uZXJ3cmFwJyxcbiAgc3R5bGU6IHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBmb250RmFtaWx5OiAnaW5oZXJpdCdcbiAgfVxufV0sIFsnZGl2Jywge1xuICByZWY6ICdoZWxwJyxcbiAgc3R5bGU6IHtcbiAgICBtYXJnaW5Ub3A6ICcxMHB4JyxcbiAgICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXG4gICAgZm9udFNpemU6ICcxMXB4JyxcbiAgICBjb2xvcjogQ09MT1JTLmdyZXksXG4gICAgZGlzcGxheTogJ25vbmUnLFxuICAgICRzaG93RXJyb3I6IHtcbiAgICAgIGNvbG9yOiBDT0xPUlMucmVkLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH0sXG4gICAgJHNob3dIZWxwOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgfVxuICB9XG59XV0pO1xudmFyIGNob2ljZUdyb3VwID0gRE9NLnRlbXBsYXRlKFsnZGl2Jywge1xuICByZWY6ICdjaG9pY2VHcm91cCcsXG4gIHN0eWxlOiB7XG4gICAgbWFyZ2luQm90dG9tOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5zcGFjaW5nO1xuICAgIH0sXG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIGZvbnRTaXplOiAnMCcsXG4gICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgfVxufV0pO1xudmFyIGNob2ljZSA9IERPTS50ZW1wbGF0ZShbJ2RpdicsIHtcbiAgcmVmOiAnY2hvaWNlJyxcbiAgc3R5bGVBZnRlckluc2VydDogdHJ1ZSxcbiAgc3R5bGU6IHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICB3aWR0aDogJ2F1dG8nLFxuICAgIG1hcmdpbkxlZnQ6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgaWYgKHRoaXMuaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGBjYWxjKDEwMCUgLSAoMTAwJSAtICR7ZmllbGQuc2V0dGluZ3Muc3BhY2luZ31weCkpYDtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIG1pbkhlaWdodDogJzQ2cHgnXG4gICAgcGFkZGluZzogJzAgMTJweCcsXG4gICAgYm9yZGVyUmFkaXVzOiAnMnB4JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgZm9udEZhbWlseTogJ2luaGVyaXQnLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgY29sb3I6IENPTE9SUy5ibGFjayxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICB2ZXJ0aWNhbEFsaWduOiAndG9wJyxcbiAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAkZGVmaW5lZFdpZHRoOiB7XG4gICAgICB3aWR0aDogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIHJldHVybiBgY2FsYygoMTAwJSAtICR7ZmllbGQuc2V0dGluZ3Muc3BhY2luZyAqIChmaWVsZC5zZXR0aW5ncy5wZXJHcm91cCAtIDEpfXB4KSAvICR7ZmllbGQuc2V0dGluZ3MucGVyR3JvdXB9KWA7XG4gICAgICB9XG4gICAgfSxcbiAgICAkc2VsZWN0ZWQ6IHtcbiAgICAgIGNvbG9yOiBDT0xPUlMub3JhbmdlXG4gICAgfSxcbiAgICAkdW5hdmFpbGFibGU6IHtcbiAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgIH0sXG4gICAgJGRpc2FibGVkOiB7XG4gICAgICBjdXJzb3I6ICdub3QtYWxsb3dlZCcsXG4gICAgICBvcGFjaXR5OiAwLjcsXG4gICAgICBjb2xvcjogQ09MT1JTLmdyZXlcbiAgICB9XG4gIH1cbn0sIFsnZGl2Jywge1xuICByZWY6ICdib3JkZXInLFxuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHpJbmRleDogMixcbiAgICB0b3A6ICcwJyxcbiAgICBsZWZ0OiAnMCcsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICBib3JkZXJXaWR0aDogJzFweCcsXG4gICAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gICAgYm9yZGVyQ29sb3I6IENPTE9SUy5ncmV5X2xpZ2h0LFxuICAgIGJvcmRlclJhZGl1czogJzJweCcsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgJHNlbGVjdGVkOiB7XG4gICAgICBib3JkZXJDb2xvcjogJ2luaGVyaXQnLFxuICAgICAgYm9yZGVyV2lkdGg6ICcycHgnXG4gICAgfSxcbiAgICAkZGlzYWJsZWQ6IHtcbiAgICAgIGJvcmRlckNvbG9yOiBDT0xPUlMuZ3JleV9saWdodFxuICAgIH1cbiAgfVxufV0sIFsnZGl2Jywge1xuICByZWY6ICdsYWJlbCcsXG4gIHN0eWxlOiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICBwYWRkaW5nOiAnMTVweCAwcHgnLFxuICAgIGZvbnRGYW1pbHk6ICdpbmhlcml0JyxcbiAgICBmb250U2l6ZTogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICByZXR1cm4gZmllbGQuc2V0dGluZ3MuZm9udFNpemU7XG4gICAgfSxcbiAgICBmb250V2VpZ2h0OiAnNTAwJ1xuICB9XG59XV0pO1xudmFyIGNob2ljZUljb24gPSBET00udGVtcGxhdGUoWydkaXYnLCB7XG4gIHJlZjogJ2ljb24nLFxuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogJzUwJScsXG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICBmb250U2l6ZTogJzIwcHgnLFxuICAgIG9wYWNpdHk6IDAuMTYsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKSdcbiAgfVxufV0pO3ZhciB0ZW1wbGF0ZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDogdGVtcGxhdGUsY2hvaWNlR3JvdXA6IGNob2ljZUdyb3VwLGNob2ljZTogY2hvaWNlLGNob2ljZUljb246IGNob2ljZUljb259KTtleHBvcnR7dGVtcGxhdGUgYXMgYSx0ZW1wbGF0ZXMgYXMgYixjaG9pY2UgYXMgYyxjaG9pY2VJY29uIGFzIGQsY2hvaWNlR3JvdXAgYXMgZX07IiwidmFyIGRlZmF1bHRzID0ge1xuICB2YWxpZFdoZW5TZWxlY3RlZDogZmFsc2UsXG4gIHZhbGlkV2hlbklzQ2hvaWNlOiBmYWxzZSxcbiAgc2hvd1NlbGVjdEFsbDogZmFsc2UsXG4gIHBlckdyb3VwOiA3LFxuICBzcGFjaW5nOiA4LFxuICBjaG9pY2VzOiBbXVxufTtleHBvcnQgZGVmYXVsdCBkZWZhdWx0czsiLCJpbXBvcnQnQGRhbmllbGthbGVuL2lzJztpbXBvcnQgSVMgZnJvbScuLi8uLi9jaGVja3MuanMnO2ltcG9ydCdxdWlja2RvbSc7aW1wb3J0IFNpbXBseUJpbmQgZnJvbSdAZGFuaWVsa2FsZW4vc2ltcGx5YmluZCc7aW1wb3J0Jy4uLy4uL2NvbnN0YW50cy9yZWdleC5qcyc7aW1wb3J0IHtyZW1vdmVJdGVtLGluY2x1ZGVzfWZyb20nLi4vLi4vaGVscGVycy5qcyc7aW1wb3J0J3NtYXJ0LWV4dGVuZCc7aW1wb3J0J2Zhc3Rkb20nO2ltcG9ydCBDb25kaXRpb24gZnJvbScuLi8uLi9jb21wb25lbnRzL2NvbmRpdGlvbi5qcyc7aW1wb3J0Jy4uLy4uL2ZpZWxkL3RyYW5zZm9ybVNldHRpbmdzLmpzJztpbXBvcnQnLi4vLi4vZmllbGQvZ2xvYmFsRGVmYXVsdHMuanMnO2ltcG9ydCBGaWVsZCBmcm9tJy4uLy4uL2ZpZWxkL2luZGV4LmpzJztpbXBvcnQnLi4vLi4vY29uc3RhbnRzL2NvbG9ycy5qcyc7aW1wb3J0IHthIGFzIHRlbXBsYXRlLGIgYXMgdGVtcGxhdGVzfWZyb20nLi90ZW1wbGF0ZS1jODhmYTk1Yi5qcyc7aW1wb3J0IGRlZmF1bHRzIGZyb20nLi9kZWZhdWx0cy5qcyc7dmFyIENob2ljZSwgQ2hvaWNlRmllbGQ7XG5cbkNob2ljZUZpZWxkID0gZnVuY3Rpb24gKCkge1xuICBjbGFzcyBDaG9pY2VGaWVsZCBleHRlbmRzIEZpZWxkIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHZhciByZWY7XG4gICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuXG4gICAgICBpZiAoISgocmVmID0gdGhpcy5zZXR0aW5ncy5jaG9pY2VzKSAhPSBudWxsID8gcmVmLmxlbmd0aCA6IHZvaWQgMCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDaG9pY2VzIHdlcmUgbm90IHByb3ZpZGVkIGZvciBjaG9pY2UgZmllbGQgJyR7dGhpcy5zZXR0aW5ncy5sYWJlbCB8fCB0aGlzLklEfSdgKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLnNldHRpbmdzLm11bHRpcGxlID8gW10gOiBudWxsO1xuICAgICAgdGhpcy5sYXN0U2VsZWN0ZWQgPSBudWxsO1xuICAgICAgdGhpcy52aXNpYmxlQ2hvaWNlc0NvdW50ID0gMDtcbiAgICAgIHRoaXMuY2hvaWNlcyA9IHRoaXMuc2V0dGluZ3MuY2hvaWNlcztcblxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MudmFsaWRXaGVuU2VsZWN0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy52YWxpZFdoZW5TZWxlY3RlZCA9IDE7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0dGluZ3MucGVyR3JvdXAgPSBNYXRoLm1pbih0aGlzLnNldHRpbmdzLnBlckdyb3VwLCB0aGlzLmNob2ljZXMubGVuZ3RoICsgKHRoaXMuc2V0dGluZ3MubXVsdGlwbGUgJiYgdGhpcy5zZXR0aW5ncy5zaG93U2VsZWN0QWxsID8gMSA6IDApKTtcblxuICAgICAgdGhpcy5fY3JlYXRlRWxlbWVudHMoKTtcblxuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3MoKTtcblxuICAgICAgdGhpcy5fY29uc3RydWN0b3JFbmQoKTtcbiAgICB9XG5cbiAgICBfZ2V0VmFsdWUoKSB7XG4gICAgICB2YXIgcmVmO1xuXG4gICAgICBpZiAoIXRoaXMuc2V0dGluZ3MubXVsdGlwbGUpIHtcbiAgICAgICAgcmV0dXJuIChyZWYgPSB0aGlzLl92YWx1ZSkgIT0gbnVsbCA/IHJlZi52YWx1ZSA6IHZvaWQgMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZS5tYXAoZnVuY3Rpb24gKGNob2ljZSkge1xuICAgICAgICAgIHJldHVybiBjaG9pY2UudmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9zZXRWYWx1ZShuZXdWYWx1ZSkge1xuICAgICAgdmFyIGksIGxlbiwgdmFsdWU7XG5cbiAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5tdWx0aXBsZSB8fCAhSVMuYXJyYXkobmV3VmFsdWUpKSB7XG4gICAgICAgIHRoaXMuc2V0Q2hvaWNlKG5ld1ZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IG5ld1ZhbHVlLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZVtpXTtcbiAgICAgICAgICB0aGlzLnNldENob2ljZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBfY3JlYXRlRWxlbWVudHMoKSB7XG4gICAgICB2YXIgY2hvaWNlR3JvdXBzLCBjaG9pY2VzLCBnbG9iYWxPcHRzLCBwZXJHcm91cDtcbiAgICAgIGdsb2JhbE9wdHMgPSB7XG4gICAgICAgIHJlbGF0ZWRJbnN0YW5jZTogdGhpc1xuICAgICAgfTtcbiAgICAgIHRoaXMuZWwgPSB0aGlzLnRlbXBsYXRlLnNwYXduKHRoaXMuc2V0dGluZ3MudGVtcGxhdGVzLmRlZmF1bHQsIGdsb2JhbE9wdHMpO1xuICAgICAgdGhpcy5jaG9pY2VzID0gW107XG4gICAgICBjaG9pY2VzID0gdGhpcy5zZXR0aW5ncy5jaG9pY2VzO1xuICAgICAgcGVyR3JvdXAgPSB0aGlzLnNldHRpbmdzLnBlckdyb3VwO1xuICAgICAgY2hvaWNlR3JvdXBzID0gQXJyYXkoTWF0aC5jZWlsKGNob2ljZXMubGVuZ3RoIC8gcGVyR3JvdXApKS5maWxsKCkubWFwKGZ1bmN0aW9uIChzLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gY2hvaWNlcy5zbGljZShpbmRleCAqIHBlckdyb3VwLCBpbmRleCAqIHBlckdyb3VwICsgcGVyR3JvdXApO1xuICAgICAgfSk7XG4gICAgICBjaG9pY2VHcm91cHMuZm9yRWFjaCgoY2hvaWNlcywgZ3JvdXBJbmRleCkgPT4ge1xuICAgICAgICB2YXIgZ3JvdXBFbDtcbiAgICAgICAgZ3JvdXBFbCA9IHRoaXMudGVtcGxhdGVzLmNob2ljZUdyb3VwLnNwYXduKHRoaXMuc2V0dGluZ3MudGVtcGxhdGVzLmNob2ljZUdyb3VwLCBnbG9iYWxPcHRzKS5hcHBlbmRUbyh0aGlzLmVsLmNoaWxkLmlubmVyd3JhcCk7XG4gICAgICAgIHJldHVybiBjaG9pY2VzLmZvckVhY2goKGNob2ljZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jaG9pY2VzLnB1c2gobmV3IENob2ljZSh0aGlzLCBjaG9pY2UsIGluZGV4LCBncm91cEluZGV4LCBncm91cEVsKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmVsLmNoaWxkLmlubmVyd3JhcC5yYXcuX3F1aWNrRmllbGQgPSB0aGlzO1xuICAgIH1cblxuICAgIF9hdHRhY2hCaW5kaW5ncygpIHtcbiAgICAgIHZhciBjaG9pY2UsIGksIGxlbiwgcmVmO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5nc19lbFN0YXRlKCk7XG5cbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzX3N0YXRlVHJpZ2dlcnMoKTtcblxuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3NfZGlzcGxheSgpO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5nc192YWx1ZSgpO1xuXG4gICAgICByZWYgPSB0aGlzLmNob2ljZXM7XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBjaG9pY2UgPSByZWZbaV07XG5cbiAgICAgICAgY2hvaWNlLl9hdHRhY2hCaW5kaW5ncygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9hdHRhY2hCaW5kaW5nc19lbFN0YXRlKCkge1xuICAgICAgU2ltcGx5QmluZCgndmlzaWJsZScpLm9mKHRoaXMuc3RhdGUpLnRvKHZpc2libGUgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zdGF0ZSgndmlzaWJsZScsIHZpc2libGUpO1xuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCdob3ZlcmVkJykub2YodGhpcy5zdGF0ZSkudG8oaG92ZXJlZCA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnN0YXRlKCdob3ZlcmVkJywgaG92ZXJlZCk7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ2ZpbGxlZCcpLm9mKHRoaXMuc3RhdGUpLnRvKGZpbGxlZCA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnN0YXRlKCdmaWxsZWQnLCBmaWxsZWQpO1xuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCdkaXNhYmxlZCcpLm9mKHRoaXMuc3RhdGUpLnRvKGRpc2FibGVkID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc3RhdGUoJ2Rpc2FibGVkJywgZGlzYWJsZWQpO1xuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCdzaG93TGFiZWwnKS5vZih0aGlzLnN0YXRlKS50byhzaG93TGFiZWwgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zdGF0ZSgnc2hvd0xhYmVsJywgc2hvd0xhYmVsKTtcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnc2hvd0Vycm9yJykub2YodGhpcy5zdGF0ZSkudG8oc2hvd0Vycm9yID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc3RhdGUoJ3Nob3dFcnJvcicsIHNob3dFcnJvcik7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ3Nob3dIZWxwJykub2YodGhpcy5zdGF0ZSkudG8oc2hvd0hlbHAgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zdGF0ZSgnc2hvd0hlbHAnLCBzaG93SGVscCk7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ3ZhbGlkJykub2YodGhpcy5zdGF0ZSkudG8odmFsaWQgPT4ge1xuICAgICAgICB0aGlzLmVsLnN0YXRlKCd2YWxpZCcsIHZhbGlkKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc3RhdGUoJ2ludmFsaWQnLCAhdmFsaWQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2F0dGFjaEJpbmRpbmdzX3N0YXRlVHJpZ2dlcnMoKSB7XG4gICAgICBTaW1wbHlCaW5kKCdldmVudDptb3VzZWVudGVyJykub2YodGhpcy5lbCkudG8oKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5ob3ZlcmVkID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnZXZlbnQ6bW91c2VsZWF2ZScpLm9mKHRoaXMuZWwpLnRvKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuaG92ZXJlZCA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2F0dGFjaEJpbmRpbmdzX2Rpc3BsYXkoKSB7XG4gICAgICBTaW1wbHlCaW5kKCd3aWR0aCcpLm9mKHRoaXMuc3RhdGUpLnRvKHdpZHRoID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc3R5bGUoJ3dpZHRoJywgd2lkdGgpLnN0YXRlKCdkZWZpbmVkV2lkdGgnLCB3aWR0aCAhPT0gJ2F1dG8nKTtcbiAgICAgIH0pLnRyYW5zZm9ybSh0aGlzLl9mb3JtYXRXaWR0aC5iaW5kKHRoaXMpKS51cGRhdGVPbignaXNNb2JpbGUnKS5vZih0aGlzLnN0YXRlKTtcbiAgICAgIFNpbXBseUJpbmQoJ3Zpc2libGVDaG9pY2VzQ291bnQnKS5vZih0aGlzKS50byhjb3VudCA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnN0YXRlKCdoYXNWaXNpYmxlQ2hvaWNlcycsICEhY291bnQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2F0dGFjaEJpbmRpbmdzX3ZhbHVlKCkge1xuICAgICAgU2ltcGx5QmluZCgnX3ZhbHVlJykub2YodGhpcykudG8oc2VsZWN0ZWQgPT4ge1xuICAgICAgICB0aGlzLnN0YXRlLmZpbGxlZCA9ICEhKHNlbGVjdGVkICE9IG51bGwgPyBzZWxlY3RlZC5sZW5ndGggOiB2b2lkIDApO1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmZpbGxlZCkge1xuICAgICAgICAgIHRoaXMuc3RhdGUuaW50ZXJhY3RlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS52YWxpZCA9IHRoaXMudmFsaWRhdGUodm9pZCAwLCB0cnVlKTtcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnYXJyYXk6X3ZhbHVlJywge1xuICAgICAgICB1cGRhdGVPbkJpbmQ6IGZhbHNlXG4gICAgICB9KS5vZih0aGlzKS50bygoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVtaXQoJ2lucHV0JywgdGhpcy52YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBfdmFsaWRhdGUocHJvdmlkZWRWYWx1ZSkge1xuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubXVsdGlwbGUpIHtcbiAgICAgICAgaWYgKCFJUy5hcnJheShwcm92aWRlZFZhbHVlKSkge1xuICAgICAgICAgIHByb3ZpZGVkVmFsdWUgPSBbcHJvdmlkZWRWYWx1ZV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvdmlkZWRWYWx1ZS5sZW5ndGggJiYgIUlTLm9iamVjdChwcm92aWRlZFZhbHVlWzBdKSkge1xuICAgICAgICAgIHByb3ZpZGVkVmFsdWUgPSBwcm92aWRlZFZhbHVlLm1hcChmdW5jdGlvbiAoY2hvaWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hvaWNlLnZhbHVlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoSVMub2JqZWN0KHByb3ZpZGVkVmFsdWUpKSB7XG4gICAgICAgICAgcHJvdmlkZWRWYWx1ZSA9IHByb3ZpZGVkVmFsdWUudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKElTLm51bWJlcih0aGlzLnNldHRpbmdzLnZhbGlkV2hlblNlbGVjdGVkKSkge1xuICAgICAgICBpZiAoISgocHJvdmlkZWRWYWx1ZSAhPSBudWxsID8gcHJvdmlkZWRWYWx1ZS5sZW5ndGggOiB2b2lkIDApID49IHRoaXMuc2V0dGluZ3MudmFsaWRXaGVuU2VsZWN0ZWQpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLnZhbGlkV2hlbklzQ2hvaWNlKSB7XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLm11bHRpcGxlKSB7XG4gICAgICAgICAgaWYgKCFpbmNsdWRlcyhwcm92aWRlZFZhbHVlLCB0aGlzLnNldHRpbmdzLnZhbGlkV2hlbklzQ2hvaWNlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAocHJvdmlkZWRWYWx1ZSAhPT0gdGhpcy5zZXR0aW5ncy52YWxpZFdoZW5Jc0Nob2ljZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmaW5kQ2hvaWNlKHByb3ZpZGVkVmFsdWUsIGJ5TGFiZWwpIHtcbiAgICAgIHZhciBtYXRjaGVzO1xuICAgICAgbWF0Y2hlcyA9IHRoaXMuY2hvaWNlcy5maWx0ZXIoZnVuY3Rpb24gKGNob2ljZSkge1xuICAgICAgICBzd2l0Y2ggKGZhbHNlKSB7XG4gICAgICAgICAgY2FzZSAhSVMub2JqZWN0KHByb3ZpZGVkVmFsdWUpOlxuICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVkVmFsdWUgPT09IGNob2ljZTtcblxuICAgICAgICAgIGNhc2UgIWJ5TGFiZWw6XG4gICAgICAgICAgICByZXR1cm4gcHJvdmlkZWRWYWx1ZSA9PT0gY2hvaWNlLmxhYmVsO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBwcm92aWRlZFZhbHVlID09PSBjaG9pY2UudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoZXNbMF07XG4gICAgfVxuXG4gICAgZmluZENob2ljZUFueShwcm92aWRlZFZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maW5kQ2hvaWNlKHByb3ZpZGVkVmFsdWUpIHx8IHRoaXMuZmluZENob2ljZShwcm92aWRlZFZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICBzZXRDaG9pY2UoY2hvaWNlKSB7XG4gICAgICBpZiAoSVMub2JqZWN0KGNob2ljZSkgJiYgY2hvaWNlIGluc3RhbmNlb2YgQ2hvaWNlKSB7XG4gICAgICAgIHJldHVybiBjaG9pY2UudG9nZ2xlKCk7XG4gICAgICB9IGVsc2UgaWYgKGNob2ljZSA9IHRoaXMuZmluZENob2ljZUFueShjaG9pY2UpKSB7XG4gICAgICAgIHJldHVybiBjaG9pY2UudG9nZ2xlKHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICB9XG4gIENob2ljZUZpZWxkLnByb3RvdHlwZS50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICBDaG9pY2VGaWVsZC5wcm90b3R5cGUudGVtcGxhdGVzID0gdGVtcGxhdGVzO1xuICBDaG9pY2VGaWVsZC5wcm90b3R5cGUuZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgcmV0dXJuIENob2ljZUZpZWxkO1xufS5jYWxsKHVuZGVmaW5lZCk7XG5cbkNob2ljZSA9IGNsYXNzIENob2ljZSB7XG4gIGNvbnN0cnVjdG9yKGZpZWxkLCBzZXR0aW5ncywgaW5kZXgxLCBncm91cEluZGV4LCBncm91cEVsKSB7XG4gICAgdmFyIGdsb2JhbE9wdHMsIGljb25FbCwgcmVmO1xuICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcbiAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgdGhpcy5pbmRleCA9IGluZGV4MTtcbiAgICBnbG9iYWxPcHRzID0ge1xuICAgICAgcmVsYXRlZEluc3RhbmNlOiB0aGlzLmZpZWxkXG4gICAgfTtcbiAgICAoe1xuICAgICAgbGFiZWw6IHRoaXMubGFiZWwsXG4gICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgIGNvbmRpdGlvbnM6IHRoaXMuY29uZGl0aW9uc1xuICAgIH0gPSB0aGlzLnNldHRpbmdzKTtcblxuICAgIGlmICh0aGlzLmxhYmVsID09IG51bGwpIHtcbiAgICAgIHRoaXMubGFiZWwgPSB0aGlzLnZhbHVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnZhbHVlID09IG51bGwpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmxhYmVsO1xuICAgIH1cblxuICAgIHRoaXMuZWwgPSB0aGlzLmZpZWxkLnRlbXBsYXRlcy5jaG9pY2Uuc3Bhd24odGhpcy5maWVsZC5zZXR0aW5ncy50ZW1wbGF0ZXMuY2hvaWNlLCBnbG9iYWxPcHRzKS5hcHBlbmRUbyhncm91cEVsKTtcblxuICAgIGlmICh0aGlzLmljb24pIHtcbiAgICAgIGljb25FbCA9IHRoaXMudGVtcGxhdGVzLmNob2ljZUljb24uc3Bhd24odGhpcy5maWVsZC5zZXR0aW5ncy50ZW1wbGF0ZXMuY2hvaWNlSWNvbiwgZ2xvYmFsT3B0cykuaW5zZXJ0QmVmb3JlKHRoaXMuZWwuY2hpbGQubGFiZWwpO1xuICAgICAgaWNvbkVsLnRleHQgPSB0aGlzLmljb247XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZWwuaW5kZXggPT0gbnVsbCkge1xuICAgICAgdGhpcy5lbC5pbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgfVxuXG4gICAgdGhpcy5lbC50b3RhbEluZGV4ID0gdGhpcy5pbmRleCAqIGdyb3VwSW5kZXg7XG4gICAgdGhpcy5lbC5wcm9wKCd0aXRsZScsIHRoaXMubGFiZWwpO1xuICAgIHRoaXMuZWwuY2hpbGQubGFiZWwudGV4dCA9IHRoaXMubGFiZWw7XG4gICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgdGhpcy5kaXNhYmxlZCA9IHRoaXMuc2V0dGluZ3MuZGlzYWJsZWQgfHwgZmFsc2U7XG4gICAgdGhpcy51bmF2YWlsYWJsZSA9IGZhbHNlO1xuXG4gICAgaWYgKChyZWYgPSB0aGlzLmNvbmRpdGlvbnMpICE9IG51bGwgPyByZWYubGVuZ3RoIDogdm9pZCAwKSB7XG4gICAgICB0aGlzLnVuYXZhaWxhYmxlID0gdHJ1ZTtcbiAgICAgIHRoaXMuYWxsRmllbGRzID0gdGhpcy5maWVsZC5hbGxGaWVsZHM7XG4gICAgICBDb25kaXRpb24uaW5pdCh0aGlzLCB0aGlzLmNvbmRpdGlvbnMsICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5hdmFpbGFibGUgPSAhQ29uZGl0aW9uLnZhbGlkYXRlKHRoaXMuY29uZGl0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBfYXR0YWNoQmluZGluZ3MoKSB7XG4gICAgcmV0dXJuICgoKSA9PiB7XG4gICAgICBTaW1wbHlCaW5kKCd2aXNpYmxlJykub2YodGhpcykudG8odmlzaWJsZSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnN0YXRlKCd2aXNpYmxlJywgdmlzaWJsZSk7XG4gICAgICB9KS5hbmQudG8odmlzaWJsZSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkLnZpc2libGVDaG9pY2VzQ291bnQgKz0gdmlzaWJsZSA/IDEgOiAtMTtcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnc2VsZWN0ZWQnLCB7XG4gICAgICAgIHVwZGF0ZU9uQmluZDogZmFsc2VcbiAgICAgIH0pLm9mKHRoaXMpLnRvKHNlbGVjdGVkID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc3RhdGUoJ3NlbGVjdGVkJywgc2VsZWN0ZWQpO1xuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCdkaXNhYmxlZCcsIHtcbiAgICAgICAgdXBkYXRlT25CaW5kOiBmYWxzZVxuICAgICAgfSkub2YodGhpcykudG8oZGlzYWJsZWQgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zdGF0ZSgnZGlzYWJsZWQnLCBkaXNhYmxlZCk7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ3VuYXZhaWxhYmxlJywge1xuICAgICAgICB1cGRhdGVPbkJpbmQ6IGZhbHNlXG4gICAgICB9KS5vZih0aGlzKS50byh1bmF2YWlsYWJsZSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnN0YXRlKCd1bmF2YWlsYWJsZScsIHVuYXZhaWxhYmxlKTtcbiAgICAgIH0pLmFuZC50byh1bmF2YWlsYWJsZSA9PiB7XG4gICAgICAgIGlmICh1bmF2YWlsYWJsZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnRvZ2dsZShmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFNpbXBseUJpbmQoJ2V2ZW50OmNsaWNrJykub2YodGhpcy5lbCkudG8oKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5maWVsZC52YWx1ZSA9IHRoaXM7XG4gICAgICB9KS5jb25kaXRpb24oKCkgPT4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuZGlzYWJsZWQ7XG4gICAgICB9KTtcbiAgICB9KSgpO1xuICB9XG5cbiAgdG9nZ2xlKG5ld1ZhbHVlLCB1bmF2YWlsYWJsZSkge1xuICAgIHZhciBuZXdTdGF0ZSwgcHJldlN0YXRlLCByZWY7XG4gICAgcHJldlN0YXRlID0gdGhpcy5zZWxlY3RlZDtcbiAgICBuZXdTdGF0ZSA9IElTLmRlZmluZWQobmV3VmFsdWUpID8gbmV3VmFsdWUgOiAhdGhpcy5zZWxlY3RlZDtcblxuICAgIGlmICghbmV3U3RhdGUpIHtcbiAgICAgIGlmICh0aGlzLmZpZWxkLnNldHRpbmdzLm11bHRpcGxlICYmIHByZXZTdGF0ZSkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkID0gbmV3U3RhdGU7XG4gICAgICAgIHJldHVybiByZW1vdmVJdGVtKHRoaXMuZmllbGQuX3ZhbHVlLCB0aGlzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChJUy5kZWZpbmVkKG5ld1ZhbHVlKSkge1xuICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBuZXdTdGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1bmF2YWlsYWJsZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmZpZWxkLl92YWx1ZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3RlZCA9IG5ld1N0YXRlO1xuXG4gICAgICBpZiAodGhpcy5maWVsZC5zZXR0aW5ncy5tdWx0aXBsZSkge1xuICAgICAgICB0aGlzLmZpZWxkLl92YWx1ZS5wdXNoKHRoaXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuZmllbGQuX3ZhbHVlICE9PSB0aGlzKSB7XG4gICAgICAgICAgaWYgKChyZWYgPSB0aGlzLmZpZWxkLl92YWx1ZSkgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmVmLnRvZ2dsZShmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5maWVsZC5fdmFsdWUgPSB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5maWVsZC5sYXN0U2VsZWN0ZWQgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG59O1xudmFyIENob2ljZUZpZWxkJDEgPSBDaG9pY2VGaWVsZDtleHBvcnQgZGVmYXVsdCBDaG9pY2VGaWVsZCQxO2V4cG9ydHtDaG9pY2V9OyIsImltcG9ydCdzbWFydC1leHRlbmQnO2ltcG9ydCB7YSBhcyB0ZW1wbGF0ZSxjIGFzIGNob2ljZSxkIGFzIGNob2ljZUljb24sZSBhcyBjaG9pY2VHcm91cH1mcm9tJy4uL2Nob2ljZS90ZW1wbGF0ZS1jODhmYTk1Yi5qcyc7dmFyIHRlbXBsYXRlJDEgPSB0ZW1wbGF0ZS5leHRlbmQoKTtcbnZhciBjaG9pY2UkMSA9IGNob2ljZS5leHRlbmQoKTtcbnZhciBjaG9pY2VJY29uJDEgPSBjaG9pY2VJY29uLmV4dGVuZCgpO1xudmFyIGNob2ljZUdyb3VwJDEgPSBjaG9pY2VHcm91cC5leHRlbmQoKTt2YXIgdGVtcGxhdGVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe2RlZmF1bHQ6IHRlbXBsYXRlJDEsY2hvaWNlOiBjaG9pY2UkMSxjaG9pY2VJY29uOiBjaG9pY2VJY29uJDEsY2hvaWNlR3JvdXA6IGNob2ljZUdyb3VwJDF9KTtleHBvcnR7dGVtcGxhdGUkMSBhcyBhLHRlbXBsYXRlcyBhcyBiLGNob2ljZSQxIGFzIGMsY2hvaWNlSWNvbiQxIGFzIGQsY2hvaWNlR3JvdXAkMSBhcyBlfTsiLCJ2YXIgZGVmYXVsdHMgPSB7XG4gIHZhbGlkV2hlblNlbGVjdGVkOiBmYWxzZSxcbiAgdmFsaWRXaGVuSXNDaG9pY2U6IGZhbHNlLFxuICB2YWxpZFdoZW5UcnVlOiB0cnVlLFxuICBjaG9pY2VMYWJlbHM6IFsnVHJ1ZScsICdGYWxzZSddLFxuICBjaG9pY2VzOiBbe1xuICAgIHZhbHVlOiB0cnVlXG4gIH0sIHtcbiAgICB2YWx1ZTogZmFsc2VcbiAgfV0sXG4gIHNwYWNpbmc6IDhcbn07ZXhwb3J0IGRlZmF1bHQgZGVmYXVsdHM7IiwiaW1wb3J0J0BkYW5pZWxrYWxlbi9pcyc7aW1wb3J0Jy4uLy4uL2NoZWNrcy5qcyc7aW1wb3J0J3F1aWNrZG9tJztpbXBvcnQnQGRhbmllbGthbGVuL3NpbXBseWJpbmQnO2ltcG9ydCcuLi8uLi9jb25zdGFudHMvcmVnZXguanMnO2ltcG9ydCB7aW5oZXJpdFByb3RvfWZyb20nLi4vLi4vaGVscGVycy5qcyc7aW1wb3J0J3NtYXJ0LWV4dGVuZCc7aW1wb3J0J2Zhc3Rkb20nO2ltcG9ydCcuLi8uLi9jb21wb25lbnRzL2NvbmRpdGlvbi5qcyc7aW1wb3J0Jy4uLy4uL2ZpZWxkL3RyYW5zZm9ybVNldHRpbmdzLmpzJztpbXBvcnQnLi4vLi4vZmllbGQvZ2xvYmFsRGVmYXVsdHMuanMnO2ltcG9ydCBGaWVsZCBmcm9tJy4uLy4uL2ZpZWxkL2luZGV4LmpzJztpbXBvcnQnLi4vLi4vY29uc3RhbnRzL2NvbG9ycy5qcyc7aW1wb3J0Jy4uL2Nob2ljZS90ZW1wbGF0ZS1jODhmYTk1Yi5qcyc7aW1wb3J0Jy4uL2Nob2ljZS9kZWZhdWx0cy5qcyc7aW1wb3J0IENob2ljZUZpZWxkIGZyb20nLi4vY2hvaWNlL2luZGV4LmpzJztpbXBvcnQge2EgYXMgdGVtcGxhdGUsYiBhcyB0ZW1wbGF0ZXN9ZnJvbScuL3RlbXBsYXRlLTNkNmM1NGEwLmpzJztpbXBvcnQgZGVmYXVsdHMgZnJvbScuL2RlZmF1bHRzLmpzJzt2YXIgVHJ1ZUZhbHNlRmllbGQ7XG5cblRydWVGYWxzZUZpZWxkID0gZnVuY3Rpb24gKCkge1xuICBjbGFzcyBUcnVlRmFsc2VGaWVsZCBleHRlbmRzIEZpZWxkIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICB0aGlzLmxhc3RTZWxlY3RlZCA9IG51bGw7XG4gICAgICB0aGlzLnZpc2libGVDaG9pY2VzQ291bnQgPSAyO1xuICAgICAgdGhpcy5jaG9pY2VzID0gdGhpcy5zZXR0aW5ncy5jaG9pY2VzO1xuICAgICAgdGhpcy5jaG9pY2VzWzBdLmxhYmVsID0gdGhpcy5zZXR0aW5ncy5jaG9pY2VMYWJlbHNbMF07XG4gICAgICB0aGlzLmNob2ljZXNbMV0ubGFiZWwgPSB0aGlzLnNldHRpbmdzLmNob2ljZUxhYmVsc1sxXTtcbiAgICAgIHRoaXMuc2V0dGluZ3MucGVyR3JvdXAgPSAyO1xuXG4gICAgICB0aGlzLl9jcmVhdGVFbGVtZW50cygpO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5ncygpO1xuXG4gICAgICB0aGlzLl9jb25zdHJ1Y3RvckVuZCgpO1xuICAgIH1cblxuICAgIF9nZXRWYWx1ZSgpIHtcbiAgICAgIGlmICh0aGlzLl92YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLl92YWx1ZS5pbmRleCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIF9zZXRWYWx1ZShuZXdWYWx1ZSkge1xuICAgICAgdmFyIHJlZjtcblxuICAgICAgaWYgKG5ld1ZhbHVlID09PSB0aGlzLmNob2ljZXNbMF0pIHtcbiAgICAgICAgbmV3VmFsdWUgPSB0aGlzLmNob2ljZXNbMF0udmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdGhpcy5jaG9pY2VzWzFdKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gdGhpcy5jaG9pY2VzWzFdLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV3VmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBudWxsO1xuXG4gICAgICAgIGlmICgocmVmID0gdGhpcy5sYXN0U2VsZWN0ZWQpICE9IG51bGwpIHtcbiAgICAgICAgICByZWYudG9nZ2xlKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBuZXdWYWx1ZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gJ2ZhbHNlJykge1xuICAgICAgICAgIG5ld1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChuZXdWYWx1ZSA/IHRoaXMuY2hvaWNlc1swXSA6IHRoaXMuY2hvaWNlc1sxXSkudG9nZ2xlKCk7XG4gICAgfVxuXG4gICAgX3ZhbGlkYXRlKHByb3ZpZGVkVmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvdmlkZWRWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcHJvdmlkZWRWYWx1ZSA9IHRoaXMuZmluZENob2ljZShwcm92aWRlZFZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MudmFsaWRXaGVuSXNDaG9pY2UpIHtcbiAgICAgICAgaWYgKHByb3ZpZGVkVmFsdWUpIHtcbiAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy52YWxpZFdoZW5Jc0Nob2ljZSAhPT0gcHJvdmlkZWRWYWx1ZS52YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MudmFsaWRXaGVuU2VsZWN0ZWQpIHtcbiAgICAgICAgaWYgKCFwcm92aWRlZFZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLnZhbGlkV2hlblRydWUpIHtcbiAgICAgICAgaWYgKChwcm92aWRlZFZhbHVlICE9IG51bGwgPyBwcm92aWRlZFZhbHVlLmluZGV4IDogdm9pZCAwKSAhPT0gMCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgfVxuICBUcnVlRmFsc2VGaWVsZC5wcm90b3R5cGUudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgVHJ1ZUZhbHNlRmllbGQucHJvdG90eXBlLnRlbXBsYXRlcyA9IHRlbXBsYXRlcztcbiAgVHJ1ZUZhbHNlRmllbGQucHJvdG90eXBlLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4gIHJldHVybiBUcnVlRmFsc2VGaWVsZDtcbn0uY2FsbCh1bmRlZmluZWQpO1xuXG5pbmhlcml0UHJvdG8oVHJ1ZUZhbHNlRmllbGQsIENob2ljZUZpZWxkLCBbJ19jcmVhdGVFbGVtZW50cycsICdfYXR0YWNoQmluZGluZ3MnLCAnX2F0dGFjaEJpbmRpbmdzX2VsU3RhdGUnLCAnX2F0dGFjaEJpbmRpbmdzX3N0YXRlVHJpZ2dlcnMnLCAnX2F0dGFjaEJpbmRpbmdzX2Rpc3BsYXknLCAnX2F0dGFjaEJpbmRpbmdzX3ZhbHVlJ10pO1xudmFyIFRydWVGYWxzZUZpZWxkJDEgPSBUcnVlRmFsc2VGaWVsZDtleHBvcnQgZGVmYXVsdCBUcnVlRmFsc2VGaWVsZCQxOyIsImltcG9ydCBDT0xPUlMgZnJvbScuLi8uLi9jb25zdGFudHMvY29sb3JzLmpzJzt2YXIgZGVmYXVsdHMgPSB7XG4gIHZhbGlkV2hlblRydWU6IHRydWUsXG4gIHNpemU6IDUwLFxuICBzdHlsZTogJ2NlbnRlcmVkJyxcbiAgY29sb3I6IENPTE9SUy5ncmVlbixcbiAgYmFja2dyb3VuZDogQ09MT1JTLmdyZXlfbGlnaHQsXG4gIHRyaWdnZXJFdmVudDogJ21vdXNldXAnXG59O2V4cG9ydCBkZWZhdWx0IGRlZmF1bHRzOyIsImltcG9ydCBET00gZnJvbSdxdWlja2RvbSc7aW1wb3J0IENPTE9SUyBmcm9tJy4uLy4uL2NvbnN0YW50cy9jb2xvcnMuanMnO3ZhciB0ZW1wbGF0ZSA9IERPTS50ZW1wbGF0ZShbJ2RpdicsIHtcbiAgcmVmOiAnZmllbGQnLFxuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICB3aWR0aDogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICByZXR1cm4gZmllbGQuc3RhdGUud2lkdGg7XG4gICAgfSxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBmb250RmFtaWx5OiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5mb250RmFtaWx5O1xuICAgIH0sXG4gICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgJHZpc2libGU6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gICAgfSxcbiAgICAkc2hvd0Vycm9yOiB7XG4gICAgICBhbmltYXRpb246ICcwLjJzIGZpZWxkRXJyb3JTaGFrZSdcbiAgICB9LFxuICAgICRhbGlnbmVkU3R5bGU6IHtcbiAgICAgIHBhZGRpbmdSaWdodDogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5zaXplICsgMjA7XG4gICAgICB9XG4gICAgfVxuICB9XG59LCBbJ2RpdicsIHtcbiAgcmVmOiAnbGFiZWwnLFxuICBzdHlsZToge1xuICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICBtYXJnaW5Cb3R0b206ICcxMnB4JyxcbiAgICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXG4gICAgZm9udFNpemU6ICcxM3B4JyxcbiAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICBjb2xvcjogQ09MT1JTLmJsYWNrLFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgJHNob3dMYWJlbDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH0sXG4gICAgJHNob3dFcnJvcjoge1xuICAgICAgY29sb3I6IENPTE9SUy5yZWRcbiAgICB9LFxuICAgICRhbGlnbmVkU3R5bGU6IHtcbiAgICAgIG1hcmdpbkJvdHRvbTogJzAnLFxuICAgICAgdGV4dEFsaWduOiAnbGVmdCdcbiAgICB9XG4gIH1cbn1dLCBbJ2RpdicsIHtcbiAgcmVmOiAnaW5uZXJ3cmFwJyxcbiAgc3R5bGU6IHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXG4gICAgJGFsaWduZWRTdHlsZToge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogJzUwJScsXG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJ1xuICAgIH1cbiAgfVxufSwgWydkaXYnLCB7XG4gIHJlZjogJ2lucHV0JyxcbiAgc3R5bGU6IHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICB6SW5kZXg6IDIsXG4gICAgd2lkdGg6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLnNldHRpbmdzLnNpemU7XG4gICAgfSxcbiAgICBoZWlnaHQ6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLnNldHRpbmdzLnNpemUgLyAyO1xuICAgIH0sXG4gICAgbWFyZ2luOiAnMCBhdXRvJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLnNldHRpbmdzLmJhY2tncm91bmQ7XG4gICAgfSxcbiAgICBib3JkZXI6IGAxcHggc29saWQgJHtDT0xPUlMuZ3JleV9zZW1pX2xpZ2h0fWAsXG4gICAgYm9yZGVyUmFkaXVzOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5zaXplO1xuICAgIH0sXG4gICAgY3Vyc29yOiAncG9pbnRlcidcbiAgfVxufSwgWydkaXYnLCB7XG4gIHJlZjogJ2JhY2tncm91bmQnLFxuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHpJbmRleDogMSxcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIHdpZHRoOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5zaXplIC8gMjtcbiAgICB9LFxuICAgIGhlaWdodDogJzEwMCUnLFxuICAgIGJvcmRlclJhZGl1czogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICB2YXIgc2l6ZTtcbiAgICAgIHNpemUgPSBmaWVsZC5zZXR0aW5ncy5zaXplO1xuICAgICAgcmV0dXJuIGAke3NpemV9cHggMCAwICR7c2l6ZX1weGA7XG4gICAgfSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLnNldHRpbmdzLmNvbG9yO1xuICAgIH0sXG4gICAgb3BhY2l0eTogMCxcbiAgICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAwLjJzLCB3aWR0aCAwLjJzJyxcbiAgICAkdG9nZ2xlZDoge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIHdpZHRoOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIGZpZWxkLnNldHRpbmdzLnNpemUgKiAwLjc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XSwgWydkaXYnLCB7XG4gIHJlZjogJ2JhbGwnLFxuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHpJbmRleDogMixcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIHdpZHRoOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5zaXplIC8gMjtcbiAgICB9LFxuICAgIGhlaWdodDogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICByZXR1cm4gZmllbGQuc2V0dGluZ3Muc2l6ZSAvIDI7XG4gICAgfSxcbiAgICBtYXJnaW46ICcwIGF1dG8nLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICBib3JkZXJSYWRpdXM6ICc1MCUnLFxuICAgIGJvcmRlcjogYDFweCBzb2xpZCAke0NPTE9SUy5ncmV5X2xpZ2h0fWAsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtNTUlKScsXG4gICAgdHJhbnNpdGlvbjogJ3RyYW5zZm9ybSAwLjJzJyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgJHRvZ2dsZWQ6IHtcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoNTAlKScsXG4gICAgICBib3JkZXI6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICByZXR1cm4gYDFweCBzb2xpZCAke2ZpZWxkLnNldHRpbmdzLmNvbG9yfWA7XG4gICAgICB9XG4gICAgfVxuICB9XG59XV1dLCBbJ2RpdicsIHtcbiAgcmVmOiAnaGVscCcsXG4gIHN0eWxlOiB7XG4gICAgbWFyZ2luVG9wOiAnMTBweCcsXG4gICAgZm9udEZhbWlseTogJ2luaGVyaXQnLFxuICAgIGZvbnRTaXplOiAnMTFweCcsXG4gICAgY29sb3I6IENPTE9SUy5ncmV5LFxuICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICAkc2hvd0Vycm9yOiB7XG4gICAgICBjb2xvcjogQ09MT1JTLnJlZCxcbiAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICB9LFxuICAgICRzaG93SGVscDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH1cbiAgfVxufV1dKTt2YXIgdGVtcGxhdGVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe2RlZmF1bHQ6IHRlbXBsYXRlfSk7ZXhwb3J0e3RlbXBsYXRlIGFzIGEsdGVtcGxhdGVzIGFzIGJ9OyIsImltcG9ydCdAZGFuaWVsa2FsZW4vaXMnO2ltcG9ydCcuLi8uLi9jaGVja3MuanMnO2ltcG9ydCdxdWlja2RvbSc7aW1wb3J0IFNpbXBseUJpbmQgZnJvbSdAZGFuaWVsa2FsZW4vc2ltcGx5YmluZCc7aW1wb3J0Jy4uLy4uL2NvbnN0YW50cy9yZWdleC5qcyc7aW1wb3J0IHtpbmhlcml0UHJvdG99ZnJvbScuLi8uLi9oZWxwZXJzLmpzJztpbXBvcnQnc21hcnQtZXh0ZW5kJztpbXBvcnQnZmFzdGRvbSc7aW1wb3J0Jy4uLy4uL2NvbXBvbmVudHMvY29uZGl0aW9uLmpzJztpbXBvcnQnLi4vLi4vZmllbGQvdHJhbnNmb3JtU2V0dGluZ3MuanMnO2ltcG9ydCcuLi8uLi9maWVsZC9nbG9iYWxEZWZhdWx0cy5qcyc7aW1wb3J0IEZpZWxkIGZyb20nLi4vLi4vZmllbGQvaW5kZXguanMnO2ltcG9ydCcuLi8uLi9jb25zdGFudHMvY29sb3JzLmpzJztpbXBvcnQnLi4vY2hvaWNlL3RlbXBsYXRlLWM4OGZhOTViLmpzJztpbXBvcnQnLi4vY2hvaWNlL2RlZmF1bHRzLmpzJztpbXBvcnQnLi4vY2hvaWNlL2luZGV4LmpzJztpbXBvcnQgZGVmYXVsdHMgZnJvbScuL2RlZmF1bHRzLmpzJztpbXBvcnQnLi4vdHJ1ZWZhbHNlL3RlbXBsYXRlLTNkNmM1NGEwLmpzJztpbXBvcnQnLi4vdHJ1ZWZhbHNlL2RlZmF1bHRzLmpzJztpbXBvcnQgVHJ1ZUZhbHNlRmllbGQgZnJvbScuLi90cnVlZmFsc2UvaW5kZXguanMnO2ltcG9ydCB7YSBhcyB0ZW1wbGF0ZSxiIGFzIHRlbXBsYXRlc31mcm9tJy4vdGVtcGxhdGUtYmY3Yjk5YzEuanMnO3ZhciBUb2dnbGVGaWVsZDtcblxuVG9nZ2xlRmllbGQgPSBmdW5jdGlvbiAoKSB7XG4gIGNsYXNzIFRvZ2dsZUZpZWxkIGV4dGVuZHMgRmllbGQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgIHRoaXMuX3ZhbHVlID0gISF0aGlzLl92YWx1ZTtcbiAgICAgIHRoaXMuc2V0dGluZ3Muc2l6ZSA9IHBhcnNlRmxvYXQodGhpcy5zZXR0aW5ncy5zaXplKSB8fCBkZWZhdWx0cy5zaXplO1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5zdHlsZSAhPT0gJ2NlbnRlcmVkJyAmJiB0aGlzLnNldHRpbmdzLnN0eWxlICE9PSAnYWxpZ25lZCcpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5zdHlsZSA9IGRlZmF1bHRzLnN0eWxlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jcmVhdGVFbGVtZW50cygpO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5ncygpO1xuXG4gICAgICB0aGlzLl9jb25zdHJ1Y3RvckVuZCgpO1xuICAgIH1cblxuICAgIF9nZXRWYWx1ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG5cbiAgICBfc2V0VmFsdWUobmV3VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZSA9ICEhbmV3VmFsdWU7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUVsZW1lbnRzKCkge1xuICAgICAgdmFyIGZvcmNlT3B0cztcbiAgICAgIGZvcmNlT3B0cyA9IHtcbiAgICAgICAgcmVsYXRlZEluc3RhbmNlOiB0aGlzXG4gICAgICB9O1xuICAgICAgdGhpcy5lbCA9IHRoaXMudGVtcGxhdGUuc3Bhd24odGhpcy5zZXR0aW5ncy50ZW1wbGF0ZXMuZGVmYXVsdCwgZm9yY2VPcHRzKTtcbiAgICAgIHRoaXMuZWwuc3RhdGUoJ2FsaWduZWRTdHlsZScsIHRoaXMuc2V0dGluZ3Muc3R5bGUgPT09ICdhbGlnbmVkJykuY2hpbGQuaW5uZXJ3cmFwLnJhdy5fcXVpY2tGaWVsZCA9IHRoaXM7XG4gICAgfVxuXG4gICAgX2F0dGFjaEJpbmRpbmdzKCkge1xuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3NfZWxTdGF0ZSgpO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5nc19zdGF0ZVRyaWdnZXJzKCk7XG5cbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzX2Rpc3BsYXkoKTtcblxuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3NfdmFsdWUoKTtcbiAgICB9XG5cbiAgICBfYXR0YWNoQmluZGluZ3NfdmFsdWUoKSB7XG4gICAgICBTaW1wbHlCaW5kKCdfdmFsdWUnKS5vZih0aGlzKS50byh2YWx1ZSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnN0YXRlKCd0b2dnbGVkJywgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCdfdmFsdWUnLCB7XG4gICAgICAgIHVwZGF0ZU9uQmluZDogZmFsc2VcbiAgICAgIH0pLm9mKHRoaXMpLnRvKHZhbHVlID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1pdCgnaW5wdXQnLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoYGV2ZW50OiR7dGhpcy5zZXR0aW5ncy50cmlnZ2VyRXZlbnR9YCkub2YodGhpcy5lbC5jaGlsZC5pbnB1dCkudG8oKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9ICF0aGlzLl92YWx1ZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF92YWxpZGF0ZShwcm92aWRlZFZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy52YWxpZFdoZW5UcnVlKSB7XG4gICAgICAgIGlmICghcHJvdmlkZWRWYWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgfVxuICBUb2dnbGVGaWVsZC5wcm90b3R5cGUudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgVG9nZ2xlRmllbGQucHJvdG90eXBlLnRlbXBsYXRlcyA9IHRlbXBsYXRlcztcbiAgVG9nZ2xlRmllbGQucHJvdG90eXBlLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4gIHJldHVybiBUb2dnbGVGaWVsZDtcbn0uY2FsbCh1bmRlZmluZWQpO1xuXG5pbmhlcml0UHJvdG8oVG9nZ2xlRmllbGQsIFRydWVGYWxzZUZpZWxkLCBbJ19hdHRhY2hCaW5kaW5nc19lbFN0YXRlJywgJ19hdHRhY2hCaW5kaW5nc19zdGF0ZVRyaWdnZXJzJywgJ19hdHRhY2hCaW5kaW5nc19kaXNwbGF5J10pO1xudmFyIFRvZ2dsZUZpZWxkJDEgPSBUb2dnbGVGaWVsZDtleHBvcnQgZGVmYXVsdCBUb2dnbGVGaWVsZCQxOyIsImltcG9ydCBDT0xPUlMgZnJvbScuLi8uLi9jb25zdGFudHMvY29sb3JzLmpzJzt2YXIgZGVmYXVsdHMgPSB7XG4gIGZpZWxkczoge30sXG4gIGNvbGxhcHNhYmxlOiB0cnVlLFxuICBzdGFydENvbGxhcHNlZDogZmFsc2UsXG4gIHBhZGRpbmc6IDIwLFxuICBmaWVsZE1hcmdpbjogMCxcbiAgZmllbGRBbGlnbjogJ3RvcCcsXG4gIGxhYmVsU2l6ZTogMTYsXG4gIGNvbG9yOiBDT0xPUlMuZ3JleV9saWdodDRcbn07ZXhwb3J0IGRlZmF1bHQgZGVmYXVsdHM7IiwiaW1wb3J0IERPTSBmcm9tJ3F1aWNrZG9tJztpbXBvcnQnLi4vLi4vc3ZnL2NoZWNrbWFyay5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9hbmdsZURvd24uanMnO2ltcG9ydCBjYXJldFVwIGZyb20nLi4vLi4vc3ZnL2NhcmV0VXAuanMnO2ltcG9ydCBjYXJldERvd24gZnJvbScuLi8uLi9zdmcvY2FyZXREb3duLmpzJztpbXBvcnQnLi4vLi4vc3ZnL3BsdXMuanMnO2ltcG9ydCcuLi8uLi9zdmcvY2xvbmUuanMnO2ltcG9ydCcuLi8uLi9zdmcvcmVtb3ZlLmpzJztpbXBvcnQgQ09MT1JTIGZyb20nLi4vLi4vY29uc3RhbnRzL2NvbG9ycy5qcyc7dmFyIGFjdGlvbiA9IERPTS50ZW1wbGF0ZShbJ2RpdicsIHtcbiAgZXZlbnRzOiB7XG4gICAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLmluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0eWxlKCdtYXJnaW5MZWZ0JywgNSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBzdHlsZToge1xuICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gIH1cbn0sIFsvLyB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJ1xuJ2RpdicsIHtcbiAgcmVmOiAnaWNvbicsXG4gIHN0eWxlOiB7XG4gICAgd2lkdGg6IDE3LFxuICAgIGhlaWdodDogMTcsXG4gICAgY29sb3I6IENPTE9SUy5ncmV5LFxuICAgIGZpbGw6IENPTE9SUy5ncmV5LFxuICAgICRob3Zlcjoge1xuICAgICAgY29sb3I6IENPTE9SUy5ncmV5X2RhcmssXG4gICAgICBmaWxsOiBDT0xPUlMuZ3JleV9kYXJrXG4gICAgfVxuICB9XG59XV0pO1xudmFyIGNvbGxhcHNlSWNvbnMgPSBbY2FyZXRVcC5leHRlbmQoe1xuICBvcHRpb25zOiB7XG4gICAgc3R5bGU6IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgdG9wOiAtMixcbiAgICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICAgICRjb2xsYXBzZWQ6IHtcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgICAgfVxuICAgIH1cbiAgfVxufSksIGNhcmV0RG93bi5leHRlbmQoe1xuICBvcHRpb25zOiB7XG4gICAgc3R5bGU6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAkY29sbGFwc2VkOiB7XG4gICAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgICAgfVxuICAgIH1cbiAgfVxufSldO1xudmFyIHRlbXBsYXRlID0gRE9NLnRlbXBsYXRlKFsnZGl2Jywge1xuICByZWY6ICdmaWVsZCcsXG4gIHN0eWxlOiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgZGlzcGxheTogJ25vbmUnLFxuICAgIHdpZHRoOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zdGF0ZS53aWR0aDtcbiAgICB9LFxuICAgIGZvbnRGYW1pbHk6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLnNldHRpbmdzLmZvbnRGYW1pbHk7XG4gICAgfSxcbiAgICAvLyBiYWNrZ3JvdW5kQ29sb3I6IChmaWVsZCktPiBmaWVsZC5zZXR0aW5ncy5jb2xvclxuICAgIGJvcmRlcjogYDFweCBzb2xpZCAke0NPTE9SUy5ncmV5X2xpZ2h0fWAsXG4gICAgYm9yZGVyUmFkaXVzOiAzLFxuICAgIHRleHRBbGlnbjogJ2xlZnQnLFxuICAgIC8vIGxpbmVIZWlnaHQ6ICcxZW0nXG4gICAgJHZpc2libGU6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gICAgfSxcbiAgICAkc2hvd0Vycm9yOiB7XG4gICAgICAkY29sbGFwc2VkOiB7XG4gICAgICAgIGFuaW1hdGlvbjogJzAuMnMgZmllbGRFcnJvclNoYWtlJ1xuICAgICAgfVxuICAgIH1cbiAgfVxufSwgWydkaXYnLCB7XG4gIHJlZjogJ2xhYmVsJyxcbiAgc3R5bGU6IHtcbiAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgZm9udEZhbWlseTogJ2luaGVyaXQnLFxuICAgIGZvbnRTaXplOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5sYWJlbFNpemU7XG4gICAgfSxcbiAgICBmb250V2VpZ2h0OiA2MDAsXG4gICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgY29sb3I6IENPTE9SUy5ibGFjayxcbiAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgJHNob3dMYWJlbDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH0sXG4gICAgJHNob3dFcnJvcjoge1xuICAgICAgY29sb3I6IENPTE9SUy5yZWRcbiAgICB9XG4gIH1cbn1dLCBbJ2RpdicsIHtcbiAgcmVmOiAnYWN0aW9ucycsXG4gIHN0eWxlOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5wYWRkaW5nICogKDEyIC8gMjApO1xuICAgIH0sXG4gICAgcmlnaHQ6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLnNldHRpbmdzLnBhZGRpbmcgKiAoMTIgLyAyMCk7XG4gICAgfSxcbiAgICBsaW5lSGVpZ2h0OiAwLFxuICAgIGZvbnRTaXplOiAwLFxuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgJHNob3dMYWJlbDoge1xuICAgICAgdG9wOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIGZpZWxkLnNldHRpbmdzLnBhZGRpbmcgKiAoMjEgLyAyMCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XSwgWydkaXYnLCB7XG4gIHJlZjogJ2hlbHAnLFxuICBzdHlsZToge1xuICAgIG1hcmdpblRvcDogJzEwcHgnLFxuICAgIGZvbnRGYW1pbHk6ICdpbmhlcml0JyxcbiAgICBmb250U2l6ZTogJzExcHgnLFxuICAgIGNvbG9yOiBDT0xPUlMuZ3JleSxcbiAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgd2hpdGVTcGFjZTogJ3ByZS1saW5lJyxcbiAgICAkc2hvd0Vycm9yOiB7XG4gICAgICBjb2xvcjogQ09MT1JTLnJlZCxcbiAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICB9LFxuICAgICRzaG93SGVscDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH1cbiAgfVxufV0sIFsnZGl2Jywge1xuICByZWY6ICdpbm5lcndyYXAnLFxuICB1bnBhc3NhYmxlU3RhdGVzOiBbJ3Zpc2libGUnLCAnaG92ZXInLCAnZm9jdXMnLCAnZGlzYWJsZWQnLCAnc2hvd0xhYmVsJywgJ3Nob3dFcnJvcicsICdzaG93SGVscCcsICdjb2xsYXBzZWQnLCAndmFsaWQnLCAnaW52YWxpZCddLFxuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIG1hcmdpblRvcDogMTUsXG4gICAgZm9udEZhbWlseTogJ2luaGVyaXQnLFxuICAgIHRleHRBbGlnbjogJ2p1c3RpZnknLFxuICAgIHRleHRKdXN0aWZ5OiAnZGlzdHJpYnV0ZS1hbGwtbGluZXMnLFxuICAgIGZvbnRTaXplOiAwLFxuICAgICRjb2xsYXBzZWQ6IHtcbiAgICAgIGRpc3BsYXk6ICdub25lJ1xuICAgIH1cbiAgfVxufV1dKTt2YXIgdGVtcGxhdGVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe2FjdGlvbjogYWN0aW9uLGNvbGxhcHNlSWNvbnM6IGNvbGxhcHNlSWNvbnMsZGVmYXVsdDogdGVtcGxhdGV9KTtleHBvcnR7dGVtcGxhdGUgYXMgYSx0ZW1wbGF0ZXMgYXMgYixjb2xsYXBzZUljb25zIGFzIGMsYWN0aW9uIGFzIGR9OyIsImltcG9ydCdAZGFuaWVsa2FsZW4vaXMnO2ltcG9ydCBJUyBmcm9tJy4uLy4uL2NoZWNrcy5qcyc7aW1wb3J0IERPTSBmcm9tJ3F1aWNrZG9tJztpbXBvcnQgU2ltcGx5QmluZCBmcm9tJ0BkYW5pZWxrYWxlbi9zaW1wbHliaW5kJztpbXBvcnQnLi4vLi4vY29uc3RhbnRzL3JlZ2V4LmpzJztpbXBvcnQnLi4vLi4vaGVscGVycy5qcyc7aW1wb3J0IGV4dGVuZCBmcm9tJ3NtYXJ0LWV4dGVuZCc7aW1wb3J0J2Zhc3Rkb20nO2ltcG9ydCcuLi8uLi9jb21wb25lbnRzL2NvbmRpdGlvbi5qcyc7aW1wb3J0Jy4uLy4uL2ZpZWxkL3RyYW5zZm9ybVNldHRpbmdzLmpzJztpbXBvcnQnLi4vLi4vZmllbGQvZ2xvYmFsRGVmYXVsdHMuanMnO2ltcG9ydCBGaWVsZCBmcm9tJy4uLy4uL2ZpZWxkL2luZGV4LmpzJztpbXBvcnQnLi4vLi4vc3ZnL2NoZWNrbWFyay5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9hbmdsZURvd24uanMnO2ltcG9ydCcuLi8uLi9zdmcvY2FyZXRVcC5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9jYXJldERvd24uanMnO2ltcG9ydCcuLi8uLi9zdmcvcGx1cy5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9jbG9uZS5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9yZW1vdmUuanMnO2ltcG9ydCcuLi8uLi9jb25zdGFudHMvY29sb3JzLmpzJztpbXBvcnQgZGVmYXVsdHMgZnJvbScuL2RlZmF1bHRzLmpzJztpbXBvcnQge2EgYXMgdGVtcGxhdGUsYiBhcyB0ZW1wbGF0ZXN9ZnJvbScuL3RlbXBsYXRlLTA4NmE4MmUyLmpzJzt2YXIgR3JvdXBGaWVsZDtcblxuR3JvdXBGaWVsZCA9IGZ1bmN0aW9uICgpIHtcbiAgY2xhc3MgR3JvdXBGaWVsZCBleHRlbmRzIEZpZWxkIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICB0aGlzLl9jYWxjRm9jdXNTdGF0ZSA9IHRoaXMuX2NhbGNGb2N1c1N0YXRlLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9jYWxjQmx1clN0YXRlID0gdGhpcy5fY2FsY0JsdXJTdGF0ZS5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fZW1pdFN1Ym1pdCA9IHRoaXMuZW1pdC5iaW5kKHRoaXMsICdzdWJtaXQnKTtcbiAgICAgIHRoaXMuc3RhdGUuY29sbGFwc2VkID0gdGhpcy5zZXR0aW5ncy5zdGFydENvbGxhcHNlZCAmJiB0aGlzLnNldHRpbmdzLmNvbGxhcHNhYmxlO1xuXG4gICAgICBpZiAodGhpcy5fdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl92YWx1ZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZmllbGRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHRoaXMuZmllbGRzQXJyYXkgPSBbXTtcblxuICAgICAgdGhpcy5fY3JlYXRlRWxlbWVudHMoKTtcblxuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3MoKTtcblxuICAgICAgdGhpcy5fY29uc3RydWN0b3JFbmQoKTtcbiAgICB9XG5cbiAgICBfZ2V0VmFsdWUoKSB7XG4gICAgICB2YXIgZmllbGQsIG5hbWUsIHJlZiwgdmFsdWVzO1xuICAgICAgdmFsdWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJlZiA9IHRoaXMuZmllbGRzO1xuXG4gICAgICBmb3IgKG5hbWUgaW4gcmVmKSB7XG4gICAgICAgIGZpZWxkID0gcmVmW25hbWVdO1xuICAgICAgICB2YWx1ZXNbbmFtZV0gPSBmaWVsZC52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICBfc2V0VmFsdWUobmV3VmFsdWUpIHtcbiAgICAgIHZhciBuYW1lLCB2YWx1ZTtcblxuICAgICAgaWYgKElTLm9iamVjdChuZXdWYWx1ZSkpIHtcbiAgICAgICAgZm9yIChuYW1lIGluIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZVtuYW1lXTtcblxuICAgICAgICAgIGlmICh0aGlzLmZpZWxkc1tuYW1lXSkge1xuICAgICAgICAgICAgdGhpcy5maWVsZHNbbmFtZV0udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3JlY2FsY0Rpc3BsYXkoKSB7XG4gICAgICB2YXIgZmllbGQsIGksIGxlbiwgcmVmO1xuICAgICAgcmVmID0gdGhpcy5maWVsZHNBcnJheTtcblxuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGZpZWxkID0gcmVmW2ldO1xuXG4gICAgICAgIGlmIChmaWVsZC5fcmVjYWxjRGlzcGxheSkge1xuICAgICAgICAgIGZpZWxkLl9yZWNhbGNEaXNwbGF5KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBfY3JlYXRlRWxlbWVudHMoKSB7XG4gICAgICB2YXIgY29uZmlnLCBmaWVsZCwgZmllbGRzLCBmb3JjZU9wdHMsIGksIGxlbiwgbWFyZ2luLCBuYW1lLCByZWYsIHJlZjE7XG4gICAgICBmb3JjZU9wdHMgPSB7XG4gICAgICAgIHJlbGF0ZWRJbnN0YW5jZTogdGhpc1xuICAgICAgfTtcbiAgICAgIG1hcmdpbiA9IGAwIDAgJHt0aGlzLnNldHRpbmdzLmZpZWxkTWFyZ2lufXB4IDBgO1xuICAgICAgdGhpcy5lbCA9IHRoaXMudGVtcGxhdGUuc3Bhd24odGhpcy5zZXR0aW5ncy50ZW1wbGF0ZXMuZGVmYXVsdCwgZm9yY2VPcHRzKTtcblxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuY29sbGFwc2FibGUpIHtcbiAgICAgICAgdGhpcy5hZGRBY3Rpb24oJ2NvbGxhcHNlJywgdGhpcy50ZW1wbGF0ZXMuY29sbGFwc2VJY29ucyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChJUy5hcnJheSh0aGlzLnNldHRpbmdzLmZpZWxkcykpIHtcbiAgICAgICAgZmllbGRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgcmVmID0gdGhpcy5zZXR0aW5ncy5maWVsZHM7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgZmllbGQgPSByZWZbaV07XG5cbiAgICAgICAgICBpZiAoIWZpZWxkLm5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZmllbGQgJHt0aGlzLm5hbWUgfHwgdGhpcy5JRH06Z3JvdXAgZmllbGRzIHByb3ZpZGVkIGluIGFycmF5IGZvcm1hdCBtdXN0IGhhdmUgYSBuYW1lYCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmllbGRzW2ZpZWxkLm5hbWVdID0gZmllbGQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldHRpbmdzLmZpZWxkcyA9IGZpZWxkcztcbiAgICAgIH1cblxuICAgICAgcmVmMSA9IHRoaXMuc2V0dGluZ3MuZmllbGRzO1xuXG4gICAgICBmb3IgKG5hbWUgaW4gcmVmMSkge1xuICAgICAgICBmaWVsZCA9IHJlZjFbbmFtZV07XG4gICAgICAgIGNvbmZpZyA9IGV4dGVuZCh7XG4gICAgICAgICAgbWFyZ2luLFxuICAgICAgICAgIGZpZWxkSW5zdGFuY2VzOiB0aGlzLmZpZWxkc1xuICAgICAgICB9LCBmaWVsZCwge1xuICAgICAgICAgIElEOiBuYW1lXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmZpZWxkc0FycmF5LnB1c2godGhpcy5maWVsZHNbbmFtZV0gPSB0aGlzLmJ1aWxkZXIoY29uZmlnKS5hcHBlbmRUbyh0aGlzLmVsLmNoaWxkLmlubmVyd3JhcCkpO1xuICAgICAgICB0aGlzLmZpZWxkc1tuYW1lXS5vbignZm9jdXMnLCB0aGlzLl9jYWxjRm9jdXNTdGF0ZSkub24oJ2JsdXInLCB0aGlzLl9jYWxjQmx1clN0YXRlKS5vbignc3VibWl0JywgdGhpcy5fZW1pdFN1Ym1pdCkuZWwuc3R5bGUoJ3ZlcnRpY2FsQWxpZ24nLCB0aGlzLnNldHRpbmdzLmZpZWxkQWxpZ24pLmFmdGVyKCcgJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZWwuY2hpbGQuaW5uZXJ3cmFwLmFwcGVuZChET00uZGl2KHtcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnXG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICAgIHRoaXMuZWwuc3RhdGUoJ2NvbGxhcHNhYmxlJywgdGhpcy5zZXR0aW5ncy5jb2xsYXBzYWJsZSk7XG4gICAgICB0aGlzLmVsLnJhdy5fcXVpY2tGaWVsZCA9IHRoaXMuZWwuY2hpbGRmLmlubmVyd3JhcC5yYXcuX3F1aWNrRmllbGQgPSB0aGlzO1xuICAgIH1cblxuICAgIF9hdHRhY2hCaW5kaW5ncygpIHtcbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzX2VsU3RhdGUoKTtcblxuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3NfZGlzcGxheSgpO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5nc19zdGF0ZVRyaWdnZXJzKCk7XG5cbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzX3ZhbHVlKCk7XG4gICAgfVxuXG4gICAgX2F0dGFjaEJpbmRpbmdzX2VsU3RhdGUoKSB7XG4gICAgICBTaW1wbHlCaW5kKCd2aXNpYmxlJykub2YodGhpcy5zdGF0ZSkudG8odmlzaWJsZSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnN0YXRlKCd2aXNpYmxlJywgdmlzaWJsZSk7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ2hvdmVyZWQnKS5vZih0aGlzLnN0YXRlKS50byhob3ZlcmVkID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc3RhdGUoJ2hvdmVyJywgaG92ZXJlZCk7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ2ZvY3VzZWQnKS5vZih0aGlzLnN0YXRlKS50byhmb2N1c2VkID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc3RhdGUoJ2ZvY3VzJywgZm9jdXNlZCk7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ2Rpc2FibGVkJykub2YodGhpcy5zdGF0ZSkudG8oZGlzYWJsZWQgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zdGF0ZSgnZGlzYWJsZWQnLCBkaXNhYmxlZCk7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ3Nob3dMYWJlbCcpLm9mKHRoaXMuc3RhdGUpLnRvKHNob3dMYWJlbCA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnN0YXRlKCdzaG93TGFiZWwnLCBzaG93TGFiZWwpO1xuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCdzaG93RXJyb3InKS5vZih0aGlzLnN0YXRlKS50byhzaG93RXJyb3IgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zdGF0ZSgnc2hvd0Vycm9yJywgc2hvd0Vycm9yKTtcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnc2hvd0hlbHAnKS5vZih0aGlzLnN0YXRlKS50byhzaG93SGVscCA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnN0YXRlKCdzaG93SGVscCcsIHNob3dIZWxwKTtcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnY29sbGFwc2VkJykub2YodGhpcy5zdGF0ZSkudG8oY29sbGFwc2VkID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc3RhdGUoJ2NvbGxhcHNlZCcsIGNvbGxhcHNlZCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBTaW1wbHlCaW5kKCd2YWxpZCcpLm9mKHRoaXMuc3RhdGUpLnRvKHZhbGlkID0+IHtcbiAgICAgICAgdGhpcy5lbC5zdGF0ZSgndmFsaWQnLCB2YWxpZCk7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnN0YXRlKCdpbnZhbGlkJywgIXZhbGlkKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF9hdHRhY2hCaW5kaW5nc19kaXNwbGF5KCkge1xuICAgICAgdmFyIGZpZWxkLCBpLCBsZW4sIHJlZjtcbiAgICAgIFNpbXBseUJpbmQoJ3dpZHRoJykub2YodGhpcy5zdGF0ZSkudG8od2lkdGggPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zdHlsZSgnd2lkdGgnLCB3aWR0aCkuc3RhdGUoJ2RlZmluZWRXaWR0aCcsIHdpZHRoICE9PSAnYXV0bycpO1xuICAgICAgfSkudHJhbnNmb3JtKHRoaXMuX2Zvcm1hdFdpZHRoLmJpbmQodGhpcykpLnVwZGF0ZU9uKCdpc01vYmlsZScpLm9mKHRoaXMuc3RhdGUpO1xuICAgICAgcmVmID0gdGhpcy5maWVsZHNBcnJheTtcblxuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGZpZWxkID0gcmVmW2ldO1xuICAgICAgICBTaW1wbHlCaW5kKCdkaXNhYmxlZCcpLm9mKHRoaXMuc3RhdGUpLnRvKCdkaXNhYmxlZCcpLm9mKGZpZWxkLnN0YXRlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfYXR0YWNoQmluZGluZ3Nfc3RhdGVUcmlnZ2VycygpIHtcbiAgICAgIHZhciB0b2dnbGVDb2xsYXBzZTtcblxuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuY29sbGFwc2FibGUpIHtcbiAgICAgICAgdG9nZ2xlQ29sbGFwc2UgPSAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZS5jb2xsYXBzZWQgPSAhdGhpcy5zdGF0ZS5jb2xsYXBzZWQ7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdCgnY29sbGFwc2VkJywgdGhpcy5zdGF0ZS5jb2xsYXBzZWQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFNpbXBseUJpbmQoJ2V2ZW50OmNsaWNrJykub2YodGhpcy5lbC5jaGlsZC5jb2xsYXBzZSkudG8odG9nZ2xlQ29sbGFwc2UpO1xuICAgICAgICBTaW1wbHlCaW5kKCdldmVudDpjbGljaycpLm9mKHRoaXMuZWwuY2hpbGQubGFiZWwpLnRvKHRvZ2dsZUNvbGxhcHNlKTtcbiAgICAgICAgU2ltcGx5QmluZCgnY29sbGFwc2VkJykub2YodGhpcy5zdGF0ZSkub25jZS50bygoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY2FsY0Rpc3BsYXkoKTtcbiAgICAgICAgfSkuY29uZGl0aW9uKGZ1bmN0aW9uIChjb2xsYXBzZWQpIHtcbiAgICAgICAgICByZXR1cm4gIWNvbGxhcHNlZDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2F0dGFjaEJpbmRpbmdzX3ZhbHVlKCkge1xuICAgICAgdmFyIGZpZWxkLCBmaWVsZE5hbWUsIHJlZjtcbiAgICAgIHJlZiA9IHRoaXMuZmllbGRzO1xuXG4gICAgICBmb3IgKGZpZWxkTmFtZSBpbiByZWYpIHtcbiAgICAgICAgZmllbGQgPSByZWZbZmllbGROYW1lXTtcbiAgICAgICAgU2ltcGx5QmluZCgnX3ZhbHVlJykub2YoZmllbGQpLnRvKGZpZWxkTmFtZSkub2YodGhpcy5fdmFsdWUpO1xuICAgICAgICBTaW1wbHlCaW5kKCdfdmFsdWUnLCB7XG4gICAgICAgICAgdXBkYXRlT25CaW5kOiBmYWxzZVxuICAgICAgICB9KS5vZihmaWVsZCkudG8odmFsdWUgPT4ge1xuICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5pbnRlcmFjdGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnN0YXRlLnZhbGlkID0gdGhpcy52YWxpZGF0ZSh2b2lkIDAsIHRydWUpO1xuICAgICAgICAgIHJldHVybiB0aGlzLmVtaXQoJ2lucHV0JywgdGhpcy5fdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfdmFsaWRhdGUocHJvdmlkZWRWYWx1ZSwgdGVzdFVucmVxdWlyZWQsIHJlcG9ydCkge1xuICAgICAgdmFyIGZpZWxkLCBpLCBpc1ZhbGlkLCBsZW4sIHJlZiwgc29tZUludmFsaWQ7XG4gICAgICBzb21lSW52YWxpZCA9IGZhbHNlO1xuICAgICAgcmVmID0gdGhpcy5maWVsZHNBcnJheTtcblxuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGZpZWxkID0gcmVmW2ldO1xuXG4gICAgICAgIGlmICghZmllbGQuc3RhdGUudmlzaWJsZSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlcG9ydCkge1xuICAgICAgICAgIGlzVmFsaWQgPSBmaWVsZC52YWxpZGF0ZUFuZFJlcG9ydChwcm92aWRlZFZhbHVlW2ZpZWxkLm5hbWVdLCB0ZXN0VW5yZXF1aXJlZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXNWYWxpZCA9IGZpZWxkLnZhbGlkYXRlKHByb3ZpZGVkVmFsdWVbZmllbGQubmFtZV0sIHRlc3RVbnJlcXVpcmVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICAgIHNvbWVJbnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gIXNvbWVJbnZhbGlkO1xuICAgIH1cblxuICAgIF9jYWxjRm9jdXNTdGF0ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlLmZvY3VzZWQgPSB0aGlzLmZpZWxkc0FycmF5LnNvbWUoZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgIHJldHVybiBmaWVsZC5zdGF0ZS5mb2N1c2VkO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2NhbGNCbHVyU3RhdGUoKSB7XG4gICAgICByZXR1cm4gc2V0VGltZW91dCh0aGlzLl9jYWxjRm9jdXNTdGF0ZSk7XG4gICAgfVxuXG4gICAgZm9jdXMoKSB7XG4gICAgICB2YXIgZmllbGQsIGksIGxlbiwgcmVmO1xuICAgICAgdGhpcy5zdGF0ZS5jb2xsYXBzZWQgPSBmYWxzZTtcbiAgICAgIHJlZiA9IHRoaXMuZmllbGRzQXJyYXk7XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBmaWVsZCA9IHJlZltpXTtcblxuICAgICAgICBpZiAoZmllbGQuZm9jdXMpIHtcbiAgICAgICAgICByZXR1cm4gZmllbGQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGJsdXIoKSB7XG4gICAgICB2YXIgZmllbGQsIGksIGxlbiwgcmVmO1xuICAgICAgcmVmID0gdGhpcy5maWVsZHNBcnJheTtcblxuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGZpZWxkID0gcmVmW2ldO1xuXG4gICAgICAgIGlmIChmaWVsZC5ibHVyKSB7XG4gICAgICAgICAgcmV0dXJuIGZpZWxkLmJsdXIoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGFkZEFjdGlvbihuYW1lLCBpY29ucywgY2FsbGJhY2ssIHByZXBlbmQpIHtcbiAgICAgIHZhciBhY3Rpb24sIGksIGljb24sIGxlbjtcblxuICAgICAgaWYgKGljb25zICYmICFJUy5hcnJheShpY29ucykpIHtcbiAgICAgICAgaWNvbnMgPSBbaWNvbnNdO1xuICAgICAgfVxuXG4gICAgICBhY3Rpb24gPSB0aGlzLnRlbXBsYXRlcy5hY3Rpb24uc3Bhd24odGhpcy5zZXR0aW5ncy50ZW1wbGF0ZXMuYWN0aW9uLCB7XG4gICAgICAgIHJlbGF0ZWRJbnN0YW5jZTogdGhpc1xuICAgICAgfSk7XG4gICAgICBhY3Rpb24ucmVmID0gYWN0aW9uLm9wdGlvbnMucmVmID0gbmFtZTtcblxuICAgICAgZm9yIChpID0gMCwgbGVuID0gaWNvbnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWNvbiA9IGljb25zW2ldO1xuICAgICAgICBhY3Rpb24uY2hpbGQuaWNvbi5hcHBlbmQoaWNvbik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZWwuY2hpbGQuYWN0aW9uc1twcmVwZW5kID8gJ3ByZXBlbmQnIDogJ2FwcGVuZCddKGFjdGlvbik7XG5cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBTaW1wbHlCaW5kKCdldmVudDpjbGljaycpLm9mKGFjdGlvbikudG8oY2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH1cblxuICB9XG4gIEdyb3VwRmllbGQucHJvdG90eXBlLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gIEdyb3VwRmllbGQucHJvdG90eXBlLnRlbXBsYXRlcyA9IHRlbXBsYXRlcztcbiAgR3JvdXBGaWVsZC5wcm90b3R5cGUuZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgR3JvdXBGaWVsZC5wcm90b3R5cGUuc2hhbGxvd1NldHRpbmdzID0gWydmaWVsZHMnXTtcbiAgcmV0dXJuIEdyb3VwRmllbGQ7XG59LmNhbGwodW5kZWZpbmVkKTtcblxudmFyIEdyb3VwRmllbGQkMSA9IEdyb3VwRmllbGQ7ZXhwb3J0IGRlZmF1bHQgR3JvdXBGaWVsZCQxOyIsImltcG9ydCBET00gZnJvbSdxdWlja2RvbSc7aW1wb3J0Jy4uLy4uL3N2Zy9jaGVja21hcmsuanMnO2ltcG9ydCcuLi8uLi9zdmcvYW5nbGVEb3duLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2NhcmV0VXAuanMnO2ltcG9ydCcuLi8uLi9zdmcvY2FyZXREb3duLmpzJztpbXBvcnQgcGx1cyBmcm9tJy4uLy4uL3N2Zy9wbHVzLmpzJztpbXBvcnQgY2xvbmUgZnJvbScuLi8uLi9zdmcvY2xvbmUuanMnO2ltcG9ydCByZW1vdmUgZnJvbScuLi8uLi9zdmcvcmVtb3ZlLmpzJztpbXBvcnQgQ09MT1JTIGZyb20nLi4vLi4vY29uc3RhbnRzL2NvbG9ycy5qcyc7aW1wb3J0IHtjIGFzIGNvbGxhcHNlSWNvbnN9ZnJvbScuLi9ncm91cC90ZW1wbGF0ZS0wODZhODJlMi5qcyc7dmFyIHRlbXBsYXRlID0gRE9NLnRlbXBsYXRlKFsnZGl2Jywge1xuICByZWY6ICdmaWVsZCcsXG4gIHN0eWxlOiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgZGlzcGxheTogJ25vbmUnLFxuICAgIHdpZHRoOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zdGF0ZS53aWR0aDtcbiAgICB9LFxuICAgIGZvbnRGYW1pbHk6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLnNldHRpbmdzLmZvbnRGYW1pbHk7XG4gICAgfSxcbiAgICBib3JkZXJSYWRpdXM6IDMsXG4gICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgJHZpc2libGU6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gICAgfSxcbiAgICAkc2hvd0Vycm9yOiB7XG4gICAgICBhbmltYXRpb246ICcwLjJzIGZpZWxkRXJyb3JTaGFrZSdcbiAgICB9XG4gIH1cbn0sIFsnZGl2Jywge1xuICByZWY6ICdsYWJlbCcsXG4gIHN0eWxlOiB7XG4gICAgZGlzcGxheTogJ25vbmUnLFxuICAgIGZvbnRGYW1pbHk6ICdpbmhlcml0JyxcbiAgICBmb250U2l6ZTogJzE2cHgnLFxuICAgIGZvbnRXZWlnaHQ6IDYwMCxcbiAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICBjb2xvcjogQ09MT1JTLmJsYWNrLFxuICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAkc2hvd0xhYmVsOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgfSxcbiAgICAkc2hvd0Vycm9yOiB7XG4gICAgICBjb2xvcjogQ09MT1JTLnJlZFxuICAgIH1cbiAgfVxufV0sIFsnZGl2Jywge1xuICByZWY6ICdjb2xsYXBzZScsXG4gIHN0eWxlOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiA1LFxuICAgIHJpZ2h0OiAwLFxuICAgIGxpbmVIZWlnaHQ6IDAsXG4gICAgZm9udFNpemU6IDAsXG4gICAgZGlzcGxheTogJ25vbmUnLFxuICAgICRzaG93TGFiZWw6IHtcbiAgICAgICRjb2xsYXBzYWJsZToge1xuICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICB9XG4gICAgfVxuICB9XG59LCBbJ2RpdicsIHtcbiAgcmVmOiAnaWNvbicsXG4gIHN0eWxlOiB7XG4gICAgd2lkdGg6IDE3LFxuICAgIGhlaWdodDogMTcsXG4gICAgY29sb3I6IENPTE9SUy5ncmV5LFxuICAgIGZpbGw6IENPTE9SUy5ncmV5LFxuICAgICRob3Zlcjoge1xuICAgICAgY29sb3I6IENPTE9SUy5ncmV5X2RhcmssXG4gICAgICBmaWxsOiBDT0xPUlMuZ3JleV9kYXJrXG4gICAgfVxuICB9XG59LCAuLi5jb2xsYXBzZUljb25zXV0sIFsnZGl2Jywge1xuICByZWY6ICdoZWxwJyxcbiAgc3R5bGU6IHtcbiAgICBtYXJnaW5Ub3A6ICcxMHB4JyxcbiAgICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXG4gICAgZm9udFNpemU6ICcxMXB4JyxcbiAgICBjb2xvcjogQ09MT1JTLmdyZXksXG4gICAgZGlzcGxheTogJ25vbmUnLFxuICAgICRzaG93RXJyb3I6IHtcbiAgICAgIGNvbG9yOiBDT0xPUlMucmVkLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH0sXG4gICAgJHNob3dIZWxwOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgfVxuICB9XG59XSwgWydkaXYnLCB7XG4gIHJlZjogJ2lubmVyd3JhcCcsXG4gIHVucGFzc2FibGVTdGF0ZXM6IFsndmlzaWJsZScsICdob3ZlcicsICdmb2N1cycsICdkaXNhYmxlZCcsICdzaG93TGFiZWwnLCAnc2hvd0Vycm9yJywgJ3Nob3dIZWxwJywgJ2NvbGxhcHNlZCcsICd2YWxpZCcsICdpbnZhbGlkJ10sXG4gIHN0eWxlOiB7XG4gICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgbWFyZ2luVG9wOiAxNSxcbiAgICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXG4gICAgdGV4dEFsaWduOiAnanVzdGlmeScsXG4gICAgdGV4dEp1c3RpZnk6ICdkaXN0cmlidXRlLWFsbC1saW5lcycsXG4gICAgZm9udFNpemU6IDAsXG4gICAgJGNvbGxhcHNlZDoge1xuICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgfVxuICB9XG59LCBbJ2RpdicsIHtcbiAgcmVmOiAnYWRkQnV0dG9uJyxcbiAgc3R5bGU6IHtcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBwYWRkaW5nOiAxMixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IENPTE9SUy5ncmV5X3NlbWlfbGlnaHQsXG4gICAgYm9yZGVyUmFkaXVzOiAzLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICBsaW5lSGVpZ2h0OiAnMWVtJyxcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICRkaXNhYmxlZDoge1xuICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgfSxcbiAgICAkaW5saW5lU3R5bGU6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgdG9wOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIGZpZWxkLnNldHRpbmdzLmdyb3VwTWFyZ2luIC8gMiAqIC0xO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSwgWydkaXYnLCB7XG4gIHN0eWxlOiB7XG4gICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgd2lkdGg6IDE1LFxuICAgIGhlaWdodDogMTUsXG4gICAgY29sb3I6IENPTE9SUy5ibGFjayxcbiAgICBmaWxsOiBDT0xPUlMuYmxhY2tcbiAgfVxufSwgcGx1c11dXV0pO1xudmFyIGNsb25lSWNvbiA9IGNsb25lLmV4dGVuZCh7XG4gIG9wdGlvbnM6IHtcbiAgICBzdHlsZToge1xuICAgICAgd2lkdGg6IDExXG4gICAgfVxuICB9XG59KTtcbnZhciByZW1vdmVJY29uID0gcmVtb3ZlLmV4dGVuZCh7XG4gIG9wdGlvbnM6IHtcbiAgICBzdHlsZToge1xuICAgICAgd2lkdGg6IDExXG4gICAgfVxuICB9XG59KTtcbnZhciBibG9ja0dyb3VwID0ge307XG52YXIgaW5saW5lR3JvdXAgPSB7XG4gIGRlZmF1bHQ6IHtcbiAgICAvLyBvcHRpb25zOiBzdHlsZTpcbiAgICAvLyBcdHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnXG4gICAgY2hpbGRyZW46IHtcbiAgICAgIGlubmVyd3JhcDoge1xuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICAgICAgICBtYXJnaW5Ub3A6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhY3Rpb25zOiB7XG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgIGluc2VydGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmluc2VydEFmdGVyKHRoaXMucGFyZW50LmNoaWxkLmlubmVyd3JhcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgcG9zaXRpb246ICdzdGF0aWMnLFxuICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLXRhYmxlJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgYWN0aW9uOiBbJ2RpdicsIHtcbiAgICBldmVudHM6IHtcbiAgICAgIGluc2VydGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3R5bGUoJ2JvcmRlclRvcCcsIGAxcHggc29saWQgJHtDT0xPUlMuZ3JleX1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgZGlzcGxheTogJ3RhYmxlLXJvdycsXG4gICAgICBwYWRkaW5nOiA0XG4gICAgfVxuICB9LCBbJ2RpdicsIHtcbiAgICByZWY6ICdpY29uJyxcbiAgICBzdHlsZToge1xuICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICBkaXNwbGF5OiAndGFibGUtY2VsbCcsXG4gICAgICBjb2xvcjogQ09MT1JTLmJsYWNrLFxuICAgICAgZmlsbDogQ09MT1JTLmJsYWNrLFxuICAgICAgb3BhY2l0eTogMC42LFxuICAgICAgJGhvdmVyOiB7XG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH1cbiAgICB9XG4gIH1dXVxufTt2YXIgdGVtcGxhdGVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe2RlZmF1bHQ6IHRlbXBsYXRlLGNsb25lSWNvbjogY2xvbmVJY29uLHJlbW92ZUljb246IHJlbW92ZUljb24sYmxvY2tHcm91cDogYmxvY2tHcm91cCxpbmxpbmVHcm91cDogaW5saW5lR3JvdXB9KTtleHBvcnR7aW5saW5lR3JvdXAgYXMgYSxibG9ja0dyb3VwIGFzIGIsdGVtcGxhdGUgYXMgYyx0ZW1wbGF0ZXMgYXMgZCxjbG9uZUljb24gYXMgZSxyZW1vdmVJY29uIGFzIGZ9OyIsImltcG9ydCdxdWlja2RvbSc7aW1wb3J0Jy4uLy4uL3N2Zy9jaGVja21hcmsuanMnO2ltcG9ydCcuLi8uLi9zdmcvYW5nbGVEb3duLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2NhcmV0VXAuanMnO2ltcG9ydCcuLi8uLi9zdmcvY2FyZXREb3duLmpzJztpbXBvcnQnLi4vLi4vc3ZnL3BsdXMuanMnO2ltcG9ydCcuLi8uLi9zdmcvY2xvbmUuanMnO2ltcG9ydCcuLi8uLi9zdmcvcmVtb3ZlLmpzJztpbXBvcnQnLi4vLi4vY29uc3RhbnRzL2NvbG9ycy5qcyc7aW1wb3J0Jy4uL2dyb3VwL3RlbXBsYXRlLTA4NmE4MmUyLmpzJztpbXBvcnQge2EgYXMgaW5saW5lR3JvdXAsYiBhcyBibG9ja0dyb3VwfWZyb20nLi90ZW1wbGF0ZS03YzI4NGU2MS5qcyc7dmFyIGRlZmF1bHRzID0ge1xuICBmaWVsZHM6IG51bGwsXG4gIHN0eWxlOiAnYmxvY2snLFxuICBjb2xsYXBzYWJsZTogdHJ1ZSxcbiAgc3RhcnRDb2xsYXBzZWQ6IGZhbHNlLFxuICBncm91cE1hcmdpbjogMTAsXG4gIGdyb3VwV2lkdGg6ICcxMDAlJyxcbiAgYXV0b1dpZHRoOiB0cnVlLFxuICBhdXRvUmVtb3ZlRW1wdHk6IGZhbHNlLFxuICBkeW5hbWljTGFiZWw6IGZhbHNlLFxuICBtaW5JdGVtczogbnVsbCxcbiAgbWF4SXRlbXM6IG51bGwsXG4gIGRyYWdnYWJsZTogZmFsc2UsXG4gIGNsb25lYWJsZTogZmFsc2UsXG4gIHJlbW92ZWFibGU6IHRydWUsXG4gIHNpbmdsZU1vZGU6IGZhbHNlLFxuICBudW1iZXJpbmc6IGZhbHNlLFxuICBtdWx0aXBsZTogdHJ1ZSxcbiAgZHJhZ2Ryb3A6IHRydWUsXG4gIGdyb3VwU2V0dGluZ3M6IHtcbiAgICBsYWJlbFNpemU6IDE0LFxuICAgIGlubGluZToge1xuICAgICAgcGFkZGluZzogMCxcbiAgICAgIGZpZWxkTWFyZ2luOiAwLFxuICAgICAgd2lkdGg6ICdhdXRvJyxcbiAgICAgIGNvbGxhcHNhYmxlOiBmYWxzZSxcbiAgICAgIHN0YXJ0Q29sbGFwc2VkOiBmYWxzZSxcbiAgICAgIHRlbXBsYXRlczogaW5saW5lR3JvdXBcbiAgICB9LFxuICAgIGJsb2NrOiB7XG4gICAgICBzdGFydENvbGxhcHNlZDogZmFsc2UsXG4gICAgICB0ZW1wbGF0ZXM6IGJsb2NrR3JvdXBcbiAgICB9XG4gIH1cbn07ZXhwb3J0IGRlZmF1bHQgZGVmYXVsdHM7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhdG9hIChhLCBuKSB7IHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhLCBuKTsgfVxuIiwidmFyIHNpID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJywgdGljaztcbmlmIChzaSkge1xuICB0aWNrID0gZnVuY3Rpb24gKGZuKSB7IHNldEltbWVkaWF0ZShmbik7IH07XG59IGVsc2Uge1xuICB0aWNrID0gZnVuY3Rpb24gKGZuKSB7IHNldFRpbWVvdXQoZm4sIDApOyB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRpY2s7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdGlja3kgPSByZXF1aXJlKCd0aWNreScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlYm91bmNlIChmbiwgYXJncywgY3R4KSB7XG4gIGlmICghZm4pIHsgcmV0dXJuOyB9XG4gIHRpY2t5KGZ1bmN0aW9uIHJ1biAoKSB7XG4gICAgZm4uYXBwbHkoY3R4IHx8IG51bGwsIGFyZ3MgfHwgW10pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhdG9hID0gcmVxdWlyZSgnYXRvYScpO1xudmFyIGRlYm91bmNlID0gcmVxdWlyZSgnLi9kZWJvdW5jZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVtaXR0ZXIgKHRoaW5nLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIGV2dCA9IHt9O1xuICBpZiAodGhpbmcgPT09IHVuZGVmaW5lZCkgeyB0aGluZyA9IHt9OyB9XG4gIHRoaW5nLm9uID0gZnVuY3Rpb24gKHR5cGUsIGZuKSB7XG4gICAgaWYgKCFldnRbdHlwZV0pIHtcbiAgICAgIGV2dFt0eXBlXSA9IFtmbl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2dFt0eXBlXS5wdXNoKGZuKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaW5nO1xuICB9O1xuICB0aGluZy5vbmNlID0gZnVuY3Rpb24gKHR5cGUsIGZuKSB7XG4gICAgZm4uX29uY2UgPSB0cnVlOyAvLyB0aGluZy5vZmYoZm4pIHN0aWxsIHdvcmtzIVxuICAgIHRoaW5nLm9uKHR5cGUsIGZuKTtcbiAgICByZXR1cm4gdGhpbmc7XG4gIH07XG4gIHRoaW5nLm9mZiA9IGZ1bmN0aW9uICh0eXBlLCBmbikge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBpZiAoYyA9PT0gMSkge1xuICAgICAgZGVsZXRlIGV2dFt0eXBlXTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IDApIHtcbiAgICAgIGV2dCA9IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZXQgPSBldnRbdHlwZV07XG4gICAgICBpZiAoIWV0KSB7IHJldHVybiB0aGluZzsgfVxuICAgICAgZXQuc3BsaWNlKGV0LmluZGV4T2YoZm4pLCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaW5nO1xuICB9O1xuICB0aGluZy5lbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gYXRvYShhcmd1bWVudHMpO1xuICAgIHJldHVybiB0aGluZy5lbWl0dGVyU25hcHNob3QoYXJncy5zaGlmdCgpKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfTtcbiAgdGhpbmcuZW1pdHRlclNuYXBzaG90ID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICB2YXIgZXQgPSAoZXZ0W3R5cGVdIHx8IFtdKS5zbGljZSgwKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhdG9hKGFyZ3VtZW50cyk7XG4gICAgICB2YXIgY3R4ID0gdGhpcyB8fCB0aGluZztcbiAgICAgIGlmICh0eXBlID09PSAnZXJyb3InICYmIG9wdHMudGhyb3dzICE9PSBmYWxzZSAmJiAhZXQubGVuZ3RoKSB7IHRocm93IGFyZ3MubGVuZ3RoID09PSAxID8gYXJnc1swXSA6IGFyZ3M7IH1cbiAgICAgIGV0LmZvckVhY2goZnVuY3Rpb24gZW1pdHRlciAobGlzdGVuKSB7XG4gICAgICAgIGlmIChvcHRzLmFzeW5jKSB7IGRlYm91bmNlKGxpc3RlbiwgYXJncywgY3R4KTsgfSBlbHNlIHsgbGlzdGVuLmFwcGx5KGN0eCwgYXJncyk7IH1cbiAgICAgICAgaWYgKGxpc3Rlbi5fb25jZSkgeyB0aGluZy5vZmYodHlwZSwgbGlzdGVuKTsgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpbmc7XG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIHRoaW5nO1xufTtcbiIsIlxudmFyIE5hdGl2ZUN1c3RvbUV2ZW50ID0gZ2xvYmFsLkN1c3RvbUV2ZW50O1xuXG5mdW5jdGlvbiB1c2VOYXRpdmUgKCkge1xuICB0cnkge1xuICAgIHZhciBwID0gbmV3IE5hdGl2ZUN1c3RvbUV2ZW50KCdjYXQnLCB7IGRldGFpbDogeyBmb286ICdiYXInIH0gfSk7XG4gICAgcmV0dXJuICAnY2F0JyA9PT0gcC50eXBlICYmICdiYXInID09PSBwLmRldGFpbC5mb287XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ3Jvc3MtYnJvd3NlciBgQ3VzdG9tRXZlbnRgIGNvbnN0cnVjdG9yLlxuICpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DdXN0b21FdmVudC5DdXN0b21FdmVudFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZU5hdGl2ZSgpID8gTmF0aXZlQ3VzdG9tRXZlbnQgOlxuXG4vLyBJRSA+PSA5XG4nZnVuY3Rpb24nID09PSB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRXZlbnQgPyBmdW5jdGlvbiBDdXN0b21FdmVudCAodHlwZSwgcGFyYW1zKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gIGlmIChwYXJhbXMpIHtcbiAgICBlLmluaXRDdXN0b21FdmVudCh0eXBlLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpO1xuICB9IGVsc2Uge1xuICAgIGUuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSwgdm9pZCAwKTtcbiAgfVxuICByZXR1cm4gZTtcbn0gOlxuXG4vLyBJRSA8PSA4XG5mdW5jdGlvbiBDdXN0b21FdmVudCAodHlwZSwgcGFyYW1zKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QoKTtcbiAgZS50eXBlID0gdHlwZTtcbiAgaWYgKHBhcmFtcykge1xuICAgIGUuYnViYmxlcyA9IEJvb2xlYW4ocGFyYW1zLmJ1YmJsZXMpO1xuICAgIGUuY2FuY2VsYWJsZSA9IEJvb2xlYW4ocGFyYW1zLmNhbmNlbGFibGUpO1xuICAgIGUuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgfSBlbHNlIHtcbiAgICBlLmJ1YmJsZXMgPSBmYWxzZTtcbiAgICBlLmNhbmNlbGFibGUgPSBmYWxzZTtcbiAgICBlLmRldGFpbCA9IHZvaWQgMDtcbiAgfVxuICByZXR1cm4gZTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGV2ZW50bWFwID0gW107XG52YXIgZXZlbnRuYW1lID0gJyc7XG52YXIgcm9uID0gL15vbi87XG5cbmZvciAoZXZlbnRuYW1lIGluIGdsb2JhbCkge1xuICBpZiAocm9uLnRlc3QoZXZlbnRuYW1lKSkge1xuICAgIGV2ZW50bWFwLnB1c2goZXZlbnRuYW1lLnNsaWNlKDIpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV2ZW50bWFwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VzdG9tRXZlbnQgPSByZXF1aXJlKCdjdXN0b20tZXZlbnQnKTtcbnZhciBldmVudG1hcCA9IHJlcXVpcmUoJy4vZXZlbnRtYXAnKTtcbnZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG52YXIgYWRkRXZlbnQgPSBhZGRFdmVudEVhc3k7XG52YXIgcmVtb3ZlRXZlbnQgPSByZW1vdmVFdmVudEVhc3k7XG52YXIgaGFyZENhY2hlID0gW107XG5cbmlmICghZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgYWRkRXZlbnQgPSBhZGRFdmVudEhhcmQ7XG4gIHJlbW92ZUV2ZW50ID0gcmVtb3ZlRXZlbnRIYXJkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYWRkOiBhZGRFdmVudCxcbiAgcmVtb3ZlOiByZW1vdmVFdmVudCxcbiAgZmFicmljYXRlOiBmYWJyaWNhdGVFdmVudFxufTtcblxuZnVuY3Rpb24gYWRkRXZlbnRFYXN5IChlbCwgdHlwZSwgZm4sIGNhcHR1cmluZykge1xuICByZXR1cm4gZWwuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgY2FwdHVyaW5nKTtcbn1cblxuZnVuY3Rpb24gYWRkRXZlbnRIYXJkIChlbCwgdHlwZSwgZm4pIHtcbiAgcmV0dXJuIGVsLmF0dGFjaEV2ZW50KCdvbicgKyB0eXBlLCB3cmFwKGVsLCB0eXBlLCBmbikpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFdmVudEVhc3kgKGVsLCB0eXBlLCBmbiwgY2FwdHVyaW5nKSB7XG4gIHJldHVybiBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGZuLCBjYXB0dXJpbmcpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFdmVudEhhcmQgKGVsLCB0eXBlLCBmbikge1xuICB2YXIgbGlzdGVuZXIgPSB1bndyYXAoZWwsIHR5cGUsIGZuKTtcbiAgaWYgKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIGVsLmRldGFjaEV2ZW50KCdvbicgKyB0eXBlLCBsaXN0ZW5lcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmFicmljYXRlRXZlbnQgKGVsLCB0eXBlLCBtb2RlbCkge1xuICB2YXIgZSA9IGV2ZW50bWFwLmluZGV4T2YodHlwZSkgPT09IC0xID8gbWFrZUN1c3RvbUV2ZW50KCkgOiBtYWtlQ2xhc3NpY0V2ZW50KCk7XG4gIGlmIChlbC5kaXNwYXRjaEV2ZW50KSB7XG4gICAgZWwuZGlzcGF0Y2hFdmVudChlKTtcbiAgfSBlbHNlIHtcbiAgICBlbC5maXJlRXZlbnQoJ29uJyArIHR5cGUsIGUpO1xuICB9XG4gIGZ1bmN0aW9uIG1ha2VDbGFzc2ljRXZlbnQgKCkge1xuICAgIHZhciBlO1xuICAgIGlmIChkb2MuY3JlYXRlRXZlbnQpIHtcbiAgICAgIGUgPSBkb2MuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKGRvYy5jcmVhdGVFdmVudE9iamVjdCkge1xuICAgICAgZSA9IGRvYy5jcmVhdGVFdmVudE9iamVjdCgpO1xuICAgIH1cbiAgICByZXR1cm4gZTtcbiAgfVxuICBmdW5jdGlvbiBtYWtlQ3VzdG9tRXZlbnQgKCkge1xuICAgIHJldHVybiBuZXcgY3VzdG9tRXZlbnQodHlwZSwgeyBkZXRhaWw6IG1vZGVsIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdyYXBwZXJGYWN0b3J5IChlbCwgdHlwZSwgZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBwZXIgKG9yaWdpbmFsRXZlbnQpIHtcbiAgICB2YXIgZSA9IG9yaWdpbmFsRXZlbnQgfHwgZ2xvYmFsLmV2ZW50O1xuICAgIGUudGFyZ2V0ID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50O1xuICAgIGUucHJldmVudERlZmF1bHQgPSBlLnByZXZlbnREZWZhdWx0IHx8IGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0ICgpIHsgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlOyB9O1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uID0gZS5zdG9wUHJvcGFnYXRpb24gfHwgZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uICgpIHsgZS5jYW5jZWxCdWJibGUgPSB0cnVlOyB9O1xuICAgIGUud2hpY2ggPSBlLndoaWNoIHx8IGUua2V5Q29kZTtcbiAgICBmbi5jYWxsKGVsLCBlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gd3JhcCAoZWwsIHR5cGUsIGZuKSB7XG4gIHZhciB3cmFwcGVyID0gdW53cmFwKGVsLCB0eXBlLCBmbikgfHwgd3JhcHBlckZhY3RvcnkoZWwsIHR5cGUsIGZuKTtcbiAgaGFyZENhY2hlLnB1c2goe1xuICAgIHdyYXBwZXI6IHdyYXBwZXIsXG4gICAgZWxlbWVudDogZWwsXG4gICAgdHlwZTogdHlwZSxcbiAgICBmbjogZm5cbiAgfSk7XG4gIHJldHVybiB3cmFwcGVyO1xufVxuXG5mdW5jdGlvbiB1bndyYXAgKGVsLCB0eXBlLCBmbikge1xuICB2YXIgaSA9IGZpbmQoZWwsIHR5cGUsIGZuKTtcbiAgaWYgKGkpIHtcbiAgICB2YXIgd3JhcHBlciA9IGhhcmRDYWNoZVtpXS53cmFwcGVyO1xuICAgIGhhcmRDYWNoZS5zcGxpY2UoaSwgMSk7IC8vIGZyZWUgdXAgYSB0YWQgb2YgbWVtb3J5XG4gICAgcmV0dXJuIHdyYXBwZXI7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZCAoZWwsIHR5cGUsIGZuKSB7XG4gIHZhciBpLCBpdGVtO1xuICBmb3IgKGkgPSAwOyBpIDwgaGFyZENhY2hlLmxlbmd0aDsgaSsrKSB7XG4gICAgaXRlbSA9IGhhcmRDYWNoZVtpXTtcbiAgICBpZiAoaXRlbS5lbGVtZW50ID09PSBlbCAmJiBpdGVtLnR5cGUgPT09IHR5cGUgJiYgaXRlbS5mbiA9PT0gZm4pIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FjaGUgPSB7fTtcbnZhciBzdGFydCA9ICcoPzpefFxcXFxzKSc7XG52YXIgZW5kID0gJyg/OlxcXFxzfCQpJztcblxuZnVuY3Rpb24gbG9va3VwQ2xhc3MgKGNsYXNzTmFtZSkge1xuICB2YXIgY2FjaGVkID0gY2FjaGVbY2xhc3NOYW1lXTtcbiAgaWYgKGNhY2hlZCkge1xuICAgIGNhY2hlZC5sYXN0SW5kZXggPSAwO1xuICB9IGVsc2Uge1xuICAgIGNhY2hlW2NsYXNzTmFtZV0gPSBjYWNoZWQgPSBuZXcgUmVnRXhwKHN0YXJ0ICsgY2xhc3NOYW1lICsgZW5kLCAnZycpO1xuICB9XG4gIHJldHVybiBjYWNoZWQ7XG59XG5cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xhc3NOYW1lKSB7XG4gIHZhciBjdXJyZW50ID0gZWwuY2xhc3NOYW1lO1xuICBpZiAoIWN1cnJlbnQubGVuZ3RoKSB7XG4gICAgZWwuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICB9IGVsc2UgaWYgKCFsb29rdXBDbGFzcyhjbGFzc05hbWUpLnRlc3QoY3VycmVudCkpIHtcbiAgICBlbC5jbGFzc05hbWUgKz0gJyAnICsgY2xhc3NOYW1lO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJtQ2xhc3MgKGVsLCBjbGFzc05hbWUpIHtcbiAgZWwuY2xhc3NOYW1lID0gZWwuY2xhc3NOYW1lLnJlcGxhY2UobG9va3VwQ2xhc3MoY2xhc3NOYW1lKSwgJyAnKS50cmltKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhZGQ6IGFkZENsYXNzLFxuICBybTogcm1DbGFzc1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVtaXR0ZXIgPSByZXF1aXJlKCdjb250cmEvZW1pdHRlcicpO1xudmFyIGNyb3NzdmVudCA9IHJlcXVpcmUoJ2Nyb3NzdmVudCcpO1xudmFyIGNsYXNzZXMgPSByZXF1aXJlKCcuL2NsYXNzZXMnKTtcbnZhciBkb2MgPSBkb2N1bWVudDtcbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG5mdW5jdGlvbiBkcmFndWxhIChpbml0aWFsQ29udGFpbmVycywgb3B0aW9ucykge1xuICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgaWYgKGxlbiA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGluaXRpYWxDb250YWluZXJzKSA9PT0gZmFsc2UpIHtcbiAgICBvcHRpb25zID0gaW5pdGlhbENvbnRhaW5lcnM7XG4gICAgaW5pdGlhbENvbnRhaW5lcnMgPSBbXTtcbiAgfVxuICB2YXIgX21pcnJvcjsgLy8gbWlycm9yIGltYWdlXG4gIHZhciBfc291cmNlOyAvLyBzb3VyY2UgY29udGFpbmVyXG4gIHZhciBfaXRlbTsgLy8gaXRlbSBiZWluZyBkcmFnZ2VkXG4gIHZhciBfb2Zmc2V0WDsgLy8gcmVmZXJlbmNlIHhcbiAgdmFyIF9vZmZzZXRZOyAvLyByZWZlcmVuY2UgeVxuICB2YXIgX21vdmVYOyAvLyByZWZlcmVuY2UgbW92ZSB4XG4gIHZhciBfbW92ZVk7IC8vIHJlZmVyZW5jZSBtb3ZlIHlcbiAgdmFyIF9pbml0aWFsU2libGluZzsgLy8gcmVmZXJlbmNlIHNpYmxpbmcgd2hlbiBncmFiYmVkXG4gIHZhciBfY3VycmVudFNpYmxpbmc7IC8vIHJlZmVyZW5jZSBzaWJsaW5nIG5vd1xuICB2YXIgX2NvcHk7IC8vIGl0ZW0gdXNlZCBmb3IgY29weWluZ1xuICB2YXIgX3JlbmRlclRpbWVyOyAvLyB0aW1lciBmb3Igc2V0VGltZW91dCByZW5kZXJNaXJyb3JJbWFnZVxuICB2YXIgX2xhc3REcm9wVGFyZ2V0ID0gbnVsbDsgLy8gbGFzdCBjb250YWluZXIgaXRlbSB3YXMgb3ZlclxuICB2YXIgX2dyYWJiZWQ7IC8vIGhvbGRzIG1vdXNlZG93biBjb250ZXh0IHVudGlsIGZpcnN0IG1vdXNlbW92ZVxuXG4gIHZhciBvID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKG8ubW92ZXMgPT09IHZvaWQgMCkgeyBvLm1vdmVzID0gYWx3YXlzOyB9XG4gIGlmIChvLmFjY2VwdHMgPT09IHZvaWQgMCkgeyBvLmFjY2VwdHMgPSBhbHdheXM7IH1cbiAgaWYgKG8uaW52YWxpZCA9PT0gdm9pZCAwKSB7IG8uaW52YWxpZCA9IGludmFsaWRUYXJnZXQ7IH1cbiAgaWYgKG8uY29udGFpbmVycyA9PT0gdm9pZCAwKSB7IG8uY29udGFpbmVycyA9IGluaXRpYWxDb250YWluZXJzIHx8IFtdOyB9XG4gIGlmIChvLmlzQ29udGFpbmVyID09PSB2b2lkIDApIHsgby5pc0NvbnRhaW5lciA9IG5ldmVyOyB9XG4gIGlmIChvLmNvcHkgPT09IHZvaWQgMCkgeyBvLmNvcHkgPSBmYWxzZTsgfVxuICBpZiAoby5jb3B5U29ydFNvdXJjZSA9PT0gdm9pZCAwKSB7IG8uY29weVNvcnRTb3VyY2UgPSBmYWxzZTsgfVxuICBpZiAoby5yZXZlcnRPblNwaWxsID09PSB2b2lkIDApIHsgby5yZXZlcnRPblNwaWxsID0gZmFsc2U7IH1cbiAgaWYgKG8ucmVtb3ZlT25TcGlsbCA9PT0gdm9pZCAwKSB7IG8ucmVtb3ZlT25TcGlsbCA9IGZhbHNlOyB9XG4gIGlmIChvLmRpcmVjdGlvbiA9PT0gdm9pZCAwKSB7IG8uZGlyZWN0aW9uID0gJ3ZlcnRpY2FsJzsgfVxuICBpZiAoby5pZ25vcmVJbnB1dFRleHRTZWxlY3Rpb24gPT09IHZvaWQgMCkgeyBvLmlnbm9yZUlucHV0VGV4dFNlbGVjdGlvbiA9IHRydWU7IH1cbiAgaWYgKG8ubWlycm9yQ29udGFpbmVyID09PSB2b2lkIDApIHsgby5taXJyb3JDb250YWluZXIgPSBkb2MuYm9keTsgfVxuXG4gIHZhciBkcmFrZSA9IGVtaXR0ZXIoe1xuICAgIGNvbnRhaW5lcnM6IG8uY29udGFpbmVycyxcbiAgICBzdGFydDogbWFudWFsU3RhcnQsXG4gICAgZW5kOiBlbmQsXG4gICAgY2FuY2VsOiBjYW5jZWwsXG4gICAgcmVtb3ZlOiByZW1vdmUsXG4gICAgZGVzdHJveTogZGVzdHJveSxcbiAgICBjYW5Nb3ZlOiBjYW5Nb3ZlLFxuICAgIGRyYWdnaW5nOiBmYWxzZVxuICB9KTtcblxuICBpZiAoby5yZW1vdmVPblNwaWxsID09PSB0cnVlKSB7XG4gICAgZHJha2Uub24oJ292ZXInLCBzcGlsbE92ZXIpLm9uKCdvdXQnLCBzcGlsbE91dCk7XG4gIH1cblxuICBldmVudHMoKTtcblxuICByZXR1cm4gZHJha2U7XG5cbiAgZnVuY3Rpb24gaXNDb250YWluZXIgKGVsKSB7XG4gICAgcmV0dXJuIGRyYWtlLmNvbnRhaW5lcnMuaW5kZXhPZihlbCkgIT09IC0xIHx8IG8uaXNDb250YWluZXIoZWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXZlbnRzIChyZW1vdmUpIHtcbiAgICB2YXIgb3AgPSByZW1vdmUgPyAncmVtb3ZlJyA6ICdhZGQnO1xuICAgIHRvdWNoeShkb2N1bWVudEVsZW1lbnQsIG9wLCAnbW91c2Vkb3duJywgZ3JhYik7XG4gICAgdG91Y2h5KGRvY3VtZW50RWxlbWVudCwgb3AsICdtb3VzZXVwJywgcmVsZWFzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBldmVudHVhbE1vdmVtZW50cyAocmVtb3ZlKSB7XG4gICAgdmFyIG9wID0gcmVtb3ZlID8gJ3JlbW92ZScgOiAnYWRkJztcbiAgICB0b3VjaHkoZG9jdW1lbnRFbGVtZW50LCBvcCwgJ21vdXNlbW92ZScsIHN0YXJ0QmVjYXVzZU1vdXNlTW92ZWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW92ZW1lbnRzIChyZW1vdmUpIHtcbiAgICB2YXIgb3AgPSByZW1vdmUgPyAncmVtb3ZlJyA6ICdhZGQnO1xuICAgIGNyb3NzdmVudFtvcF0oZG9jdW1lbnRFbGVtZW50LCAnc2VsZWN0c3RhcnQnLCBwcmV2ZW50R3JhYmJlZCk7IC8vIElFOFxuICAgIGNyb3NzdmVudFtvcF0oZG9jdW1lbnRFbGVtZW50LCAnY2xpY2snLCBwcmV2ZW50R3JhYmJlZCk7XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgICBldmVudHModHJ1ZSk7XG4gICAgcmVsZWFzZSh7fSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcmV2ZW50R3JhYmJlZCAoZSkge1xuICAgIGlmIChfZ3JhYmJlZCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdyYWIgKGUpIHtcbiAgICBfbW92ZVggPSBlLmNsaWVudFg7XG4gICAgX21vdmVZID0gZS5jbGllbnRZO1xuXG4gICAgdmFyIGlnbm9yZSA9IHdoaWNoTW91c2VCdXR0b24oZSkgIT09IDEgfHwgZS5tZXRhS2V5IHx8IGUuY3RybEtleTtcbiAgICBpZiAoaWdub3JlKSB7XG4gICAgICByZXR1cm47IC8vIHdlIG9ubHkgY2FyZSBhYm91dCBob25lc3QtdG8tZ29kIGxlZnQgY2xpY2tzIGFuZCB0b3VjaCBldmVudHNcbiAgICB9XG4gICAgdmFyIGl0ZW0gPSBlLnRhcmdldDtcbiAgICB2YXIgY29udGV4dCA9IGNhblN0YXJ0KGl0ZW0pO1xuICAgIGlmICghY29udGV4dCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBfZ3JhYmJlZCA9IGNvbnRleHQ7XG4gICAgZXZlbnR1YWxNb3ZlbWVudHMoKTtcbiAgICBpZiAoZS50eXBlID09PSAnbW91c2Vkb3duJykge1xuICAgICAgaWYgKGlzSW5wdXQoaXRlbSkpIHsgLy8gc2VlIGFsc286IGh0dHBzOi8vZ2l0aHViLmNvbS9iZXZhY3F1YS9kcmFndWxhL2lzc3Vlcy8yMDhcbiAgICAgICAgaXRlbS5mb2N1cygpOyAvLyBmaXhlcyBodHRwczovL2dpdGh1Yi5jb20vYmV2YWNxdWEvZHJhZ3VsYS9pc3N1ZXMvMTc2XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIGZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXZhY3F1YS9kcmFndWxhL2lzc3Vlcy8xNTVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydEJlY2F1c2VNb3VzZU1vdmVkIChlKSB7XG4gICAgaWYgKCFfZ3JhYmJlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAod2hpY2hNb3VzZUJ1dHRvbihlKSA9PT0gMCkge1xuICAgICAgcmVsZWFzZSh7fSk7XG4gICAgICByZXR1cm47IC8vIHdoZW4gdGV4dCBpcyBzZWxlY3RlZCBvbiBhbiBpbnB1dCBhbmQgdGhlbiBkcmFnZ2VkLCBtb3VzZXVwIGRvZXNuJ3QgZmlyZS4gdGhpcyBpcyBvdXIgb25seSBob3BlXG4gICAgfVxuICAgIC8vIHRydXRoeSBjaGVjayBmaXhlcyAjMjM5LCBlcXVhbGl0eSBmaXhlcyAjMjA3XG4gICAgaWYgKGUuY2xpZW50WCAhPT0gdm9pZCAwICYmIGUuY2xpZW50WCA9PT0gX21vdmVYICYmIGUuY2xpZW50WSAhPT0gdm9pZCAwICYmIGUuY2xpZW50WSA9PT0gX21vdmVZKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvLmlnbm9yZUlucHV0VGV4dFNlbGVjdGlvbikge1xuICAgICAgdmFyIGNsaWVudFggPSBnZXRDb29yZCgnY2xpZW50WCcsIGUpO1xuICAgICAgdmFyIGNsaWVudFkgPSBnZXRDb29yZCgnY2xpZW50WScsIGUpO1xuICAgICAgdmFyIGVsZW1lbnRCZWhpbmRDdXJzb3IgPSBkb2MuZWxlbWVudEZyb21Qb2ludChjbGllbnRYLCBjbGllbnRZKTtcbiAgICAgIGlmIChpc0lucHV0KGVsZW1lbnRCZWhpbmRDdXJzb3IpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZ3JhYmJlZCA9IF9ncmFiYmVkOyAvLyBjYWxsIHRvIGVuZCgpIHVuc2V0cyBfZ3JhYmJlZFxuICAgIGV2ZW50dWFsTW92ZW1lbnRzKHRydWUpO1xuICAgIG1vdmVtZW50cygpO1xuICAgIGVuZCgpO1xuICAgIHN0YXJ0KGdyYWJiZWQpO1xuXG4gICAgdmFyIG9mZnNldCA9IGdldE9mZnNldChfaXRlbSk7XG4gICAgX29mZnNldFggPSBnZXRDb29yZCgncGFnZVgnLCBlKSAtIG9mZnNldC5sZWZ0O1xuICAgIF9vZmZzZXRZID0gZ2V0Q29vcmQoJ3BhZ2VZJywgZSkgLSBvZmZzZXQudG9wO1xuXG4gICAgY2xhc3Nlcy5hZGQoX2NvcHkgfHwgX2l0ZW0sICdndS10cmFuc2l0Jyk7XG4gICAgcmVuZGVyTWlycm9ySW1hZ2UoKTtcbiAgICBkcmFnKGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuU3RhcnQgKGl0ZW0pIHtcbiAgICBpZiAoZHJha2UuZHJhZ2dpbmcgJiYgX21pcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNDb250YWluZXIoaXRlbSkpIHtcbiAgICAgIHJldHVybjsgLy8gZG9uJ3QgZHJhZyBjb250YWluZXIgaXRzZWxmXG4gICAgfVxuICAgIHZhciBoYW5kbGUgPSBpdGVtO1xuICAgIHdoaWxlIChnZXRQYXJlbnQoaXRlbSkgJiYgaXNDb250YWluZXIoZ2V0UGFyZW50KGl0ZW0pKSA9PT0gZmFsc2UpIHtcbiAgICAgIGlmIChvLmludmFsaWQoaXRlbSwgaGFuZGxlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpdGVtID0gZ2V0UGFyZW50KGl0ZW0pOyAvLyBkcmFnIHRhcmdldCBzaG91bGQgYmUgYSB0b3AgZWxlbWVudFxuICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHNvdXJjZSA9IGdldFBhcmVudChpdGVtKTtcbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoby5pbnZhbGlkKGl0ZW0sIGhhbmRsZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbW92YWJsZSA9IG8ubW92ZXMoaXRlbSwgc291cmNlLCBoYW5kbGUsIG5leHRFbChpdGVtKSk7XG4gICAgaWYgKCFtb3ZhYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGl0ZW06IGl0ZW0sXG4gICAgICBzb3VyY2U6IHNvdXJjZVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjYW5Nb3ZlIChpdGVtKSB7XG4gICAgcmV0dXJuICEhY2FuU3RhcnQoaXRlbSk7XG4gIH1cblxuICBmdW5jdGlvbiBtYW51YWxTdGFydCAoaXRlbSkge1xuICAgIHZhciBjb250ZXh0ID0gY2FuU3RhcnQoaXRlbSk7XG4gICAgaWYgKGNvbnRleHQpIHtcbiAgICAgIHN0YXJ0KGNvbnRleHQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0IChjb250ZXh0KSB7XG4gICAgaWYgKGlzQ29weShjb250ZXh0Lml0ZW0sIGNvbnRleHQuc291cmNlKSkge1xuICAgICAgX2NvcHkgPSBjb250ZXh0Lml0ZW0uY2xvbmVOb2RlKHRydWUpO1xuICAgICAgZHJha2UuZW1pdCgnY2xvbmVkJywgX2NvcHksIGNvbnRleHQuaXRlbSwgJ2NvcHknKTtcbiAgICB9XG5cbiAgICBfc291cmNlID0gY29udGV4dC5zb3VyY2U7XG4gICAgX2l0ZW0gPSBjb250ZXh0Lml0ZW07XG4gICAgX2luaXRpYWxTaWJsaW5nID0gX2N1cnJlbnRTaWJsaW5nID0gbmV4dEVsKGNvbnRleHQuaXRlbSk7XG5cbiAgICBkcmFrZS5kcmFnZ2luZyA9IHRydWU7XG4gICAgZHJha2UuZW1pdCgnZHJhZycsIF9pdGVtLCBfc291cmNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludmFsaWRUYXJnZXQgKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZCAoKSB7XG4gICAgaWYgKCFkcmFrZS5kcmFnZ2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgaXRlbSA9IF9jb3B5IHx8IF9pdGVtO1xuICAgIGRyb3AoaXRlbSwgZ2V0UGFyZW50KGl0ZW0pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuZ3JhYiAoKSB7XG4gICAgX2dyYWJiZWQgPSBmYWxzZTtcbiAgICBldmVudHVhbE1vdmVtZW50cyh0cnVlKTtcbiAgICBtb3ZlbWVudHModHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWxlYXNlIChlKSB7XG4gICAgdW5ncmFiKCk7XG5cbiAgICBpZiAoIWRyYWtlLmRyYWdnaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBpdGVtID0gX2NvcHkgfHwgX2l0ZW07XG4gICAgdmFyIGNsaWVudFggPSBnZXRDb29yZCgnY2xpZW50WCcsIGUpO1xuICAgIHZhciBjbGllbnRZID0gZ2V0Q29vcmQoJ2NsaWVudFknLCBlKTtcbiAgICB2YXIgZWxlbWVudEJlaGluZEN1cnNvciA9IGdldEVsZW1lbnRCZWhpbmRQb2ludChfbWlycm9yLCBjbGllbnRYLCBjbGllbnRZKTtcbiAgICB2YXIgZHJvcFRhcmdldCA9IGZpbmREcm9wVGFyZ2V0KGVsZW1lbnRCZWhpbmRDdXJzb3IsIGNsaWVudFgsIGNsaWVudFkpO1xuICAgIGlmIChkcm9wVGFyZ2V0ICYmICgoX2NvcHkgJiYgby5jb3B5U29ydFNvdXJjZSkgfHwgKCFfY29weSB8fCBkcm9wVGFyZ2V0ICE9PSBfc291cmNlKSkpIHtcbiAgICAgIGRyb3AoaXRlbSwgZHJvcFRhcmdldCk7XG4gICAgfSBlbHNlIGlmIChvLnJlbW92ZU9uU3BpbGwpIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYW5jZWwoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkcm9wIChpdGVtLCB0YXJnZXQpIHtcbiAgICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50KGl0ZW0pO1xuICAgIGlmIChfY29weSAmJiBvLmNvcHlTb3J0U291cmNlICYmIHRhcmdldCA9PT0gX3NvdXJjZSkge1xuICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKF9pdGVtKTtcbiAgICB9XG4gICAgaWYgKGlzSW5pdGlhbFBsYWNlbWVudCh0YXJnZXQpKSB7XG4gICAgICBkcmFrZS5lbWl0KCdjYW5jZWwnLCBpdGVtLCBfc291cmNlLCBfc291cmNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJha2UuZW1pdCgnZHJvcCcsIGl0ZW0sIHRhcmdldCwgX3NvdXJjZSwgX2N1cnJlbnRTaWJsaW5nKTtcbiAgICB9XG4gICAgY2xlYW51cCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlICgpIHtcbiAgICBpZiAoIWRyYWtlLmRyYWdnaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBpdGVtID0gX2NvcHkgfHwgX2l0ZW07XG4gICAgdmFyIHBhcmVudCA9IGdldFBhcmVudChpdGVtKTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoaXRlbSk7XG4gICAgfVxuICAgIGRyYWtlLmVtaXQoX2NvcHkgPyAnY2FuY2VsJyA6ICdyZW1vdmUnLCBpdGVtLCBwYXJlbnQsIF9zb3VyY2UpO1xuICAgIGNsZWFudXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCAocmV2ZXJ0KSB7XG4gICAgaWYgKCFkcmFrZS5kcmFnZ2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgcmV2ZXJ0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwID8gcmV2ZXJ0IDogby5yZXZlcnRPblNwaWxsO1xuICAgIHZhciBpdGVtID0gX2NvcHkgfHwgX2l0ZW07XG4gICAgdmFyIHBhcmVudCA9IGdldFBhcmVudChpdGVtKTtcbiAgICB2YXIgaW5pdGlhbCA9IGlzSW5pdGlhbFBsYWNlbWVudChwYXJlbnQpO1xuICAgIGlmIChpbml0aWFsID09PSBmYWxzZSAmJiByZXZlcnRzKSB7XG4gICAgICBpZiAoX2NvcHkpIHtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChfY29weSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9zb3VyY2UuaW5zZXJ0QmVmb3JlKGl0ZW0sIF9pbml0aWFsU2libGluZyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpbml0aWFsIHx8IHJldmVydHMpIHtcbiAgICAgIGRyYWtlLmVtaXQoJ2NhbmNlbCcsIGl0ZW0sIF9zb3VyY2UsIF9zb3VyY2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkcmFrZS5lbWl0KCdkcm9wJywgaXRlbSwgcGFyZW50LCBfc291cmNlLCBfY3VycmVudFNpYmxpbmcpO1xuICAgIH1cbiAgICBjbGVhbnVwKCk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhbnVwICgpIHtcbiAgICB2YXIgaXRlbSA9IF9jb3B5IHx8IF9pdGVtO1xuICAgIHVuZ3JhYigpO1xuICAgIHJlbW92ZU1pcnJvckltYWdlKCk7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIGNsYXNzZXMucm0oaXRlbSwgJ2d1LXRyYW5zaXQnKTtcbiAgICB9XG4gICAgaWYgKF9yZW5kZXJUaW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KF9yZW5kZXJUaW1lcik7XG4gICAgfVxuICAgIGRyYWtlLmRyYWdnaW5nID0gZmFsc2U7XG4gICAgaWYgKF9sYXN0RHJvcFRhcmdldCkge1xuICAgICAgZHJha2UuZW1pdCgnb3V0JywgaXRlbSwgX2xhc3REcm9wVGFyZ2V0LCBfc291cmNlKTtcbiAgICB9XG4gICAgZHJha2UuZW1pdCgnZHJhZ2VuZCcsIGl0ZW0pO1xuICAgIF9zb3VyY2UgPSBfaXRlbSA9IF9jb3B5ID0gX2luaXRpYWxTaWJsaW5nID0gX2N1cnJlbnRTaWJsaW5nID0gX3JlbmRlclRpbWVyID0gX2xhc3REcm9wVGFyZ2V0ID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSW5pdGlhbFBsYWNlbWVudCAodGFyZ2V0LCBzKSB7XG4gICAgdmFyIHNpYmxpbmc7XG4gICAgaWYgKHMgIT09IHZvaWQgMCkge1xuICAgICAgc2libGluZyA9IHM7XG4gICAgfSBlbHNlIGlmIChfbWlycm9yKSB7XG4gICAgICBzaWJsaW5nID0gX2N1cnJlbnRTaWJsaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaWJsaW5nID0gbmV4dEVsKF9jb3B5IHx8IF9pdGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldCA9PT0gX3NvdXJjZSAmJiBzaWJsaW5nID09PSBfaW5pdGlhbFNpYmxpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kRHJvcFRhcmdldCAoZWxlbWVudEJlaGluZEN1cnNvciwgY2xpZW50WCwgY2xpZW50WSkge1xuICAgIHZhciB0YXJnZXQgPSBlbGVtZW50QmVoaW5kQ3Vyc29yO1xuICAgIHdoaWxlICh0YXJnZXQgJiYgIWFjY2VwdGVkKCkpIHtcbiAgICAgIHRhcmdldCA9IGdldFBhcmVudCh0YXJnZXQpO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuXG4gICAgZnVuY3Rpb24gYWNjZXB0ZWQgKCkge1xuICAgICAgdmFyIGRyb3BwYWJsZSA9IGlzQ29udGFpbmVyKHRhcmdldCk7XG4gICAgICBpZiAoZHJvcHBhYmxlID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBpbW1lZGlhdGUgPSBnZXRJbW1lZGlhdGVDaGlsZCh0YXJnZXQsIGVsZW1lbnRCZWhpbmRDdXJzb3IpO1xuICAgICAgdmFyIHJlZmVyZW5jZSA9IGdldFJlZmVyZW5jZSh0YXJnZXQsIGltbWVkaWF0ZSwgY2xpZW50WCwgY2xpZW50WSk7XG4gICAgICB2YXIgaW5pdGlhbCA9IGlzSW5pdGlhbFBsYWNlbWVudCh0YXJnZXQsIHJlZmVyZW5jZSk7XG4gICAgICBpZiAoaW5pdGlhbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gc2hvdWxkIGFsd2F5cyBiZSBhYmxlIHRvIGRyb3AgaXQgcmlnaHQgYmFjayB3aGVyZSBpdCB3YXNcbiAgICAgIH1cbiAgICAgIHJldHVybiBvLmFjY2VwdHMoX2l0ZW0sIHRhcmdldCwgX3NvdXJjZSwgcmVmZXJlbmNlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkcmFnIChlKSB7XG4gICAgaWYgKCFfbWlycm9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIHZhciBjbGllbnRYID0gZ2V0Q29vcmQoJ2NsaWVudFgnLCBlKTtcbiAgICB2YXIgY2xpZW50WSA9IGdldENvb3JkKCdjbGllbnRZJywgZSk7XG4gICAgdmFyIHggPSBjbGllbnRYIC0gX29mZnNldFg7XG4gICAgdmFyIHkgPSBjbGllbnRZIC0gX29mZnNldFk7XG5cbiAgICBfbWlycm9yLnN0eWxlLmxlZnQgPSB4ICsgJ3B4JztcbiAgICBfbWlycm9yLnN0eWxlLnRvcCA9IHkgKyAncHgnO1xuXG4gICAgdmFyIGl0ZW0gPSBfY29weSB8fCBfaXRlbTtcbiAgICB2YXIgZWxlbWVudEJlaGluZEN1cnNvciA9IGdldEVsZW1lbnRCZWhpbmRQb2ludChfbWlycm9yLCBjbGllbnRYLCBjbGllbnRZKTtcbiAgICB2YXIgZHJvcFRhcmdldCA9IGZpbmREcm9wVGFyZ2V0KGVsZW1lbnRCZWhpbmRDdXJzb3IsIGNsaWVudFgsIGNsaWVudFkpO1xuICAgIHZhciBjaGFuZ2VkID0gZHJvcFRhcmdldCAhPT0gbnVsbCAmJiBkcm9wVGFyZ2V0ICE9PSBfbGFzdERyb3BUYXJnZXQ7XG4gICAgaWYgKGNoYW5nZWQgfHwgZHJvcFRhcmdldCA9PT0gbnVsbCkge1xuICAgICAgb3V0KCk7XG4gICAgICBfbGFzdERyb3BUYXJnZXQgPSBkcm9wVGFyZ2V0O1xuICAgICAgb3ZlcigpO1xuICAgIH1cbiAgICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50KGl0ZW0pO1xuICAgIGlmIChkcm9wVGFyZ2V0ID09PSBfc291cmNlICYmIF9jb3B5ICYmICFvLmNvcHlTb3J0U291cmNlKSB7XG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChpdGVtKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJlZmVyZW5jZTtcbiAgICB2YXIgaW1tZWRpYXRlID0gZ2V0SW1tZWRpYXRlQ2hpbGQoZHJvcFRhcmdldCwgZWxlbWVudEJlaGluZEN1cnNvcik7XG4gICAgaWYgKGltbWVkaWF0ZSAhPT0gbnVsbCkge1xuICAgICAgcmVmZXJlbmNlID0gZ2V0UmVmZXJlbmNlKGRyb3BUYXJnZXQsIGltbWVkaWF0ZSwgY2xpZW50WCwgY2xpZW50WSk7XG4gICAgfSBlbHNlIGlmIChvLnJldmVydE9uU3BpbGwgPT09IHRydWUgJiYgIV9jb3B5KSB7XG4gICAgICByZWZlcmVuY2UgPSBfaW5pdGlhbFNpYmxpbmc7XG4gICAgICBkcm9wVGFyZ2V0ID0gX3NvdXJjZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKF9jb3B5ICYmIHBhcmVudCkge1xuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoaXRlbSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChcbiAgICAgIChyZWZlcmVuY2UgPT09IG51bGwgJiYgY2hhbmdlZCkgfHxcbiAgICAgIHJlZmVyZW5jZSAhPT0gaXRlbSAmJlxuICAgICAgcmVmZXJlbmNlICE9PSBuZXh0RWwoaXRlbSlcbiAgICApIHtcbiAgICAgIF9jdXJyZW50U2libGluZyA9IHJlZmVyZW5jZTtcbiAgICAgIGRyb3BUYXJnZXQuaW5zZXJ0QmVmb3JlKGl0ZW0sIHJlZmVyZW5jZSk7XG4gICAgICBkcmFrZS5lbWl0KCdzaGFkb3cnLCBpdGVtLCBkcm9wVGFyZ2V0LCBfc291cmNlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbW92ZWQgKHR5cGUpIHsgZHJha2UuZW1pdCh0eXBlLCBpdGVtLCBfbGFzdERyb3BUYXJnZXQsIF9zb3VyY2UpOyB9XG4gICAgZnVuY3Rpb24gb3ZlciAoKSB7IGlmIChjaGFuZ2VkKSB7IG1vdmVkKCdvdmVyJyk7IH0gfVxuICAgIGZ1bmN0aW9uIG91dCAoKSB7IGlmIChfbGFzdERyb3BUYXJnZXQpIHsgbW92ZWQoJ291dCcpOyB9IH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNwaWxsT3ZlciAoZWwpIHtcbiAgICBjbGFzc2VzLnJtKGVsLCAnZ3UtaGlkZScpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3BpbGxPdXQgKGVsKSB7XG4gICAgaWYgKGRyYWtlLmRyYWdnaW5nKSB7IGNsYXNzZXMuYWRkKGVsLCAnZ3UtaGlkZScpOyB9XG4gIH1cblxuICBmdW5jdGlvbiByZW5kZXJNaXJyb3JJbWFnZSAoKSB7XG4gICAgaWYgKF9taXJyb3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJlY3QgPSBfaXRlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBfbWlycm9yID0gX2l0ZW0uY2xvbmVOb2RlKHRydWUpO1xuICAgIF9taXJyb3Iuc3R5bGUud2lkdGggPSBnZXRSZWN0V2lkdGgocmVjdCkgKyAncHgnO1xuICAgIF9taXJyb3Iuc3R5bGUuaGVpZ2h0ID0gZ2V0UmVjdEhlaWdodChyZWN0KSArICdweCc7XG4gICAgY2xhc3Nlcy5ybShfbWlycm9yLCAnZ3UtdHJhbnNpdCcpO1xuICAgIGNsYXNzZXMuYWRkKF9taXJyb3IsICdndS1taXJyb3InKTtcbiAgICBvLm1pcnJvckNvbnRhaW5lci5hcHBlbmRDaGlsZChfbWlycm9yKTtcbiAgICB0b3VjaHkoZG9jdW1lbnRFbGVtZW50LCAnYWRkJywgJ21vdXNlbW92ZScsIGRyYWcpO1xuICAgIGNsYXNzZXMuYWRkKG8ubWlycm9yQ29udGFpbmVyLCAnZ3UtdW5zZWxlY3RhYmxlJyk7XG4gICAgZHJha2UuZW1pdCgnY2xvbmVkJywgX21pcnJvciwgX2l0ZW0sICdtaXJyb3InKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU1pcnJvckltYWdlICgpIHtcbiAgICBpZiAoX21pcnJvcikge1xuICAgICAgY2xhc3Nlcy5ybShvLm1pcnJvckNvbnRhaW5lciwgJ2d1LXVuc2VsZWN0YWJsZScpO1xuICAgICAgdG91Y2h5KGRvY3VtZW50RWxlbWVudCwgJ3JlbW92ZScsICdtb3VzZW1vdmUnLCBkcmFnKTtcbiAgICAgIGdldFBhcmVudChfbWlycm9yKS5yZW1vdmVDaGlsZChfbWlycm9yKTtcbiAgICAgIF9taXJyb3IgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEltbWVkaWF0ZUNoaWxkIChkcm9wVGFyZ2V0LCB0YXJnZXQpIHtcbiAgICB2YXIgaW1tZWRpYXRlID0gdGFyZ2V0O1xuICAgIHdoaWxlIChpbW1lZGlhdGUgIT09IGRyb3BUYXJnZXQgJiYgZ2V0UGFyZW50KGltbWVkaWF0ZSkgIT09IGRyb3BUYXJnZXQpIHtcbiAgICAgIGltbWVkaWF0ZSA9IGdldFBhcmVudChpbW1lZGlhdGUpO1xuICAgIH1cbiAgICBpZiAoaW1tZWRpYXRlID09PSBkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaW1tZWRpYXRlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UmVmZXJlbmNlIChkcm9wVGFyZ2V0LCB0YXJnZXQsIHgsIHkpIHtcbiAgICB2YXIgaG9yaXpvbnRhbCA9IG8uZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCc7XG4gICAgdmFyIHJlZmVyZW5jZSA9IHRhcmdldCAhPT0gZHJvcFRhcmdldCA/IGluc2lkZSgpIDogb3V0c2lkZSgpO1xuICAgIHJldHVybiByZWZlcmVuY2U7XG5cbiAgICBmdW5jdGlvbiBvdXRzaWRlICgpIHsgLy8gc2xvd2VyLCBidXQgYWJsZSB0byBmaWd1cmUgb3V0IGFueSBwb3NpdGlvblxuICAgICAgdmFyIGxlbiA9IGRyb3BUYXJnZXQuY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgZWw7XG4gICAgICB2YXIgcmVjdDtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBlbCA9IGRyb3BUYXJnZXQuY2hpbGRyZW5baV07XG4gICAgICAgIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKGhvcml6b250YWwgJiYgKHJlY3QubGVmdCArIHJlY3Qud2lkdGggLyAyKSA+IHgpIHsgcmV0dXJuIGVsOyB9XG4gICAgICAgIGlmICghaG9yaXpvbnRhbCAmJiAocmVjdC50b3AgKyByZWN0LmhlaWdodCAvIDIpID4geSkgeyByZXR1cm4gZWw7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc2lkZSAoKSB7IC8vIGZhc3RlciwgYnV0IG9ubHkgYXZhaWxhYmxlIGlmIGRyb3BwZWQgaW5zaWRlIGEgY2hpbGQgZWxlbWVudFxuICAgICAgdmFyIHJlY3QgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBpZiAoaG9yaXpvbnRhbCkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSh4ID4gcmVjdC5sZWZ0ICsgZ2V0UmVjdFdpZHRoKHJlY3QpIC8gMik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzb2x2ZSh5ID4gcmVjdC50b3AgKyBnZXRSZWN0SGVpZ2h0KHJlY3QpIC8gMik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZSAoYWZ0ZXIpIHtcbiAgICAgIHJldHVybiBhZnRlciA/IG5leHRFbCh0YXJnZXQpIDogdGFyZ2V0O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzQ29weSAoaXRlbSwgY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvLmNvcHkgPT09ICdib29sZWFuJyA/IG8uY29weSA6IG8uY29weShpdGVtLCBjb250YWluZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvdWNoeSAoZWwsIG9wLCB0eXBlLCBmbikge1xuICB2YXIgdG91Y2ggPSB7XG4gICAgbW91c2V1cDogJ3RvdWNoZW5kJyxcbiAgICBtb3VzZWRvd246ICd0b3VjaHN0YXJ0JyxcbiAgICBtb3VzZW1vdmU6ICd0b3VjaG1vdmUnXG4gIH07XG4gIHZhciBwb2ludGVycyA9IHtcbiAgICBtb3VzZXVwOiAncG9pbnRlcnVwJyxcbiAgICBtb3VzZWRvd246ICdwb2ludGVyZG93bicsXG4gICAgbW91c2Vtb3ZlOiAncG9pbnRlcm1vdmUnXG4gIH07XG4gIHZhciBtaWNyb3NvZnQgPSB7XG4gICAgbW91c2V1cDogJ01TUG9pbnRlclVwJyxcbiAgICBtb3VzZWRvd246ICdNU1BvaW50ZXJEb3duJyxcbiAgICBtb3VzZW1vdmU6ICdNU1BvaW50ZXJNb3ZlJ1xuICB9O1xuICBpZiAoZ2xvYmFsLm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZCkge1xuICAgIGNyb3NzdmVudFtvcF0oZWwsIHBvaW50ZXJzW3R5cGVdLCBmbik7XG4gIH0gZWxzZSBpZiAoZ2xvYmFsLm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkKSB7XG4gICAgY3Jvc3N2ZW50W29wXShlbCwgbWljcm9zb2Z0W3R5cGVdLCBmbik7XG4gIH0gZWxzZSB7XG4gICAgY3Jvc3N2ZW50W29wXShlbCwgdG91Y2hbdHlwZV0sIGZuKTtcbiAgICBjcm9zc3ZlbnRbb3BdKGVsLCB0eXBlLCBmbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gd2hpY2hNb3VzZUJ1dHRvbiAoZSkge1xuICBpZiAoZS50b3VjaGVzICE9PSB2b2lkIDApIHsgcmV0dXJuIGUudG91Y2hlcy5sZW5ndGg7IH1cbiAgaWYgKGUud2hpY2ggIT09IHZvaWQgMCAmJiBlLndoaWNoICE9PSAwKSB7IHJldHVybiBlLndoaWNoOyB9IC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vYmV2YWNxdWEvZHJhZ3VsYS9pc3N1ZXMvMjYxXG4gIGlmIChlLmJ1dHRvbnMgIT09IHZvaWQgMCkgeyByZXR1cm4gZS5idXR0b25zOyB9XG4gIHZhciBidXR0b24gPSBlLmJ1dHRvbjtcbiAgaWYgKGJ1dHRvbiAhPT0gdm9pZCAwKSB7IC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9ibG9iLzk5ZThmZjFiYWE3YWUzNDFlOTRiYjg5YzNlODQ1NzBjN2MzYWQ5ZWEvc3JjL2V2ZW50LmpzI0w1NzMtTDU3NVxuICAgIHJldHVybiBidXR0b24gJiAxID8gMSA6IGJ1dHRvbiAmIDIgPyAzIDogKGJ1dHRvbiAmIDQgPyAyIDogMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0T2Zmc2V0IChlbCkge1xuICB2YXIgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIGxlZnQ6IHJlY3QubGVmdCArIGdldFNjcm9sbCgnc2Nyb2xsTGVmdCcsICdwYWdlWE9mZnNldCcpLFxuICAgIHRvcDogcmVjdC50b3AgKyBnZXRTY3JvbGwoJ3Njcm9sbFRvcCcsICdwYWdlWU9mZnNldCcpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbCAoc2Nyb2xsUHJvcCwgb2Zmc2V0UHJvcCkge1xuICBpZiAodHlwZW9mIGdsb2JhbFtvZmZzZXRQcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZ2xvYmFsW29mZnNldFByb3BdO1xuICB9XG4gIGlmIChkb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50RWxlbWVudFtzY3JvbGxQcm9wXTtcbiAgfVxuICByZXR1cm4gZG9jLmJvZHlbc2Nyb2xsUHJvcF07XG59XG5cbmZ1bmN0aW9uIGdldEVsZW1lbnRCZWhpbmRQb2ludCAocG9pbnQsIHgsIHkpIHtcbiAgdmFyIHAgPSBwb2ludCB8fCB7fTtcbiAgdmFyIHN0YXRlID0gcC5jbGFzc05hbWU7XG4gIHZhciBlbDtcbiAgcC5jbGFzc05hbWUgKz0gJyBndS1oaWRlJztcbiAgZWwgPSBkb2MuZWxlbWVudEZyb21Qb2ludCh4LCB5KTtcbiAgcC5jbGFzc05hbWUgPSBzdGF0ZTtcbiAgcmV0dXJuIGVsO1xufVxuXG5mdW5jdGlvbiBuZXZlciAoKSB7IHJldHVybiBmYWxzZTsgfVxuZnVuY3Rpb24gYWx3YXlzICgpIHsgcmV0dXJuIHRydWU7IH1cbmZ1bmN0aW9uIGdldFJlY3RXaWR0aCAocmVjdCkgeyByZXR1cm4gcmVjdC53aWR0aCB8fCAocmVjdC5yaWdodCAtIHJlY3QubGVmdCk7IH1cbmZ1bmN0aW9uIGdldFJlY3RIZWlnaHQgKHJlY3QpIHsgcmV0dXJuIHJlY3QuaGVpZ2h0IHx8IChyZWN0LmJvdHRvbSAtIHJlY3QudG9wKTsgfVxuZnVuY3Rpb24gZ2V0UGFyZW50IChlbCkgeyByZXR1cm4gZWwucGFyZW50Tm9kZSA9PT0gZG9jID8gbnVsbCA6IGVsLnBhcmVudE5vZGU7IH1cbmZ1bmN0aW9uIGlzSW5wdXQgKGVsKSB7IHJldHVybiBlbC50YWdOYW1lID09PSAnSU5QVVQnIHx8IGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScgfHwgZWwudGFnTmFtZSA9PT0gJ1NFTEVDVCcgfHwgaXNFZGl0YWJsZShlbCk7IH1cbmZ1bmN0aW9uIGlzRWRpdGFibGUgKGVsKSB7XG4gIGlmICghZWwpIHsgcmV0dXJuIGZhbHNlOyB9IC8vIG5vIHBhcmVudHMgd2VyZSBlZGl0YWJsZVxuICBpZiAoZWwuY29udGVudEVkaXRhYmxlID09PSAnZmFsc2UnKSB7IHJldHVybiBmYWxzZTsgfSAvLyBzdG9wIHRoZSBsb29rdXBcbiAgaWYgKGVsLmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnKSB7IHJldHVybiB0cnVlOyB9IC8vIGZvdW5kIGEgY29udGVudEVkaXRhYmxlIGVsZW1lbnQgaW4gdGhlIGNoYWluXG4gIHJldHVybiBpc0VkaXRhYmxlKGdldFBhcmVudChlbCkpOyAvLyBjb250ZW50RWRpdGFibGUgaXMgc2V0IHRvICdpbmhlcml0J1xufVxuXG5mdW5jdGlvbiBuZXh0RWwgKGVsKSB7XG4gIHJldHVybiBlbC5uZXh0RWxlbWVudFNpYmxpbmcgfHwgbWFudWFsbHkoKTtcbiAgZnVuY3Rpb24gbWFudWFsbHkgKCkge1xuICAgIHZhciBzaWJsaW5nID0gZWw7XG4gICAgZG8ge1xuICAgICAgc2libGluZyA9IHNpYmxpbmcubmV4dFNpYmxpbmc7XG4gICAgfSB3aGlsZSAoc2libGluZyAmJiBzaWJsaW5nLm5vZGVUeXBlICE9PSAxKTtcbiAgICByZXR1cm4gc2libGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRFdmVudEhvc3QgKGUpIHtcbiAgLy8gb24gdG91Y2hlbmQgZXZlbnQsIHdlIGhhdmUgdG8gdXNlIGBlLmNoYW5nZWRUb3VjaGVzYFxuICAvLyBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83MTkyNTYzL3RvdWNoZW5kLWV2ZW50LXByb3BlcnRpZXNcbiAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXZhY3F1YS9kcmFndWxhL2lzc3Vlcy8zNFxuICBpZiAoZS50YXJnZXRUb3VjaGVzICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZS50YXJnZXRUb3VjaGVzWzBdO1xuICB9XG4gIGlmIChlLmNoYW5nZWRUb3VjaGVzICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGUuY2hhbmdlZFRvdWNoZXNbMF07XG4gIH1cbiAgcmV0dXJuIGU7XG59XG5cbmZ1bmN0aW9uIGdldENvb3JkIChjb29yZCwgZSkge1xuICB2YXIgaG9zdCA9IGdldEV2ZW50SG9zdChlKTtcbiAgdmFyIG1pc3NNYXAgPSB7XG4gICAgcGFnZVg6ICdjbGllbnRYJywgLy8gSUU4XG4gICAgcGFnZVk6ICdjbGllbnRZJyAvLyBJRThcbiAgfTtcbiAgaWYgKGNvb3JkIGluIG1pc3NNYXAgJiYgIShjb29yZCBpbiBob3N0KSAmJiBtaXNzTWFwW2Nvb3JkXSBpbiBob3N0KSB7XG4gICAgY29vcmQgPSBtaXNzTWFwW2Nvb3JkXTtcbiAgfVxuICByZXR1cm4gaG9zdFtjb29yZF07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZHJhZ3VsYTtcbiIsImltcG9ydCdAZGFuaWVsa2FsZW4vaXMnO2ltcG9ydCBJUyBmcm9tJy4uLy4uL2NoZWNrcy5qcyc7aW1wb3J0J3F1aWNrZG9tJztpbXBvcnQgU2ltcGx5QmluZCBmcm9tJ0BkYW5pZWxrYWxlbi9zaW1wbHliaW5kJztpbXBvcnQnLi4vLi4vY29uc3RhbnRzL3JlZ2V4LmpzJztpbXBvcnQge2luY2x1ZGVzLGluc2VydEFmdGVyLHJlbW92ZUl0ZW19ZnJvbScuLi8uLi9oZWxwZXJzLmpzJztpbXBvcnQgZXh0ZW5kIGZyb20nc21hcnQtZXh0ZW5kJztpbXBvcnQnZmFzdGRvbSc7aW1wb3J0Jy4uLy4uL2NvbXBvbmVudHMvY29uZGl0aW9uLmpzJztpbXBvcnQnLi4vLi4vZmllbGQvdHJhbnNmb3JtU2V0dGluZ3MuanMnO2ltcG9ydCcuLi8uLi9maWVsZC9nbG9iYWxEZWZhdWx0cy5qcyc7aW1wb3J0IEZpZWxkIGZyb20nLi4vLi4vZmllbGQvaW5kZXguanMnO2ltcG9ydCcuLi8uLi9zdmcvY2hlY2ttYXJrLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2FuZ2xlRG93bi5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9jYXJldFVwLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2NhcmV0RG93bi5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9wbHVzLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2Nsb25lLmpzJztpbXBvcnQnLi4vLi4vc3ZnL3JlbW92ZS5qcyc7aW1wb3J0Jy4uLy4uL2NvbnN0YW50cy9jb2xvcnMuanMnO2ltcG9ydCcuLi9ncm91cC90ZW1wbGF0ZS0wODZhODJlMi5qcyc7aW1wb3J0IHtjIGFzIHRlbXBsYXRlLGQgYXMgdGVtcGxhdGVzfWZyb20nLi90ZW1wbGF0ZS03YzI4NGU2MS5qcyc7aW1wb3J0IGRlZmF1bHRzIGZyb20nLi9kZWZhdWx0cy5qcyc7aW1wb3J0IGRyYWd1bGEgZnJvbSdkcmFndWxhJzsoZnVuY3Rpb24oKXtcblx0dmFyIGNzcyA9IFwiLmd1LW1pcnJvciB7XFxuICBwb3NpdGlvbjogZml4ZWQgIWltcG9ydGFudDtcXG4gIG1hcmdpbjogMCAhaW1wb3J0YW50O1xcbiAgei1pbmRleDogOTk5OSAhaW1wb3J0YW50O1xcbiAgb3BhY2l0eTogMC44O1xcbiAgLW1zLWZpbHRlcjogXFxcInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5BbHBoYShPcGFjaXR5PTgwKVxcXCI7XFxuICBmaWx0ZXI6IGFscGhhKG9wYWNpdHk9ODApO1xcbn1cXG4uZ3UtaGlkZSB7XFxuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxufVxcbi5ndS11bnNlbGVjdGFibGUge1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZSAhaW1wb3J0YW50O1xcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZSAhaW1wb3J0YW50O1xcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lICFpbXBvcnRhbnQ7XFxuICB1c2VyLXNlbGVjdDogbm9uZSAhaW1wb3J0YW50O1xcbn1cXG4uZ3UtdHJhbnNpdCB7XFxuICBvcGFjaXR5OiAwLjI7XFxuICAtbXMtZmlsdGVyOiBcXFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkFscGhhKE9wYWNpdHk9MjApXFxcIjtcXG4gIGZpbHRlcjogYWxwaGEob3BhY2l0eT0yMCk7XFxufVxcblwiO1xuXHR2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG5cdHZhciBzaGVldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cdFxuXHRzaGVldC5zZXRBdHRyaWJ1dGUoJ2RhdGEtZmlsZScsICcvVXNlcnMvZGFuaWVsa2FsZW4vc2FuZGJveC9xdWlja2ZpZWxkL25vZGVfbW9kdWxlcy9kcmFndWxhL2Rpc3QvZHJhZ3VsYS5jc3MnKTtcblx0c2hlZXQuaW5uZXJIVE1MID0gY3NzO1xuXHRoZWFkLmFwcGVuZENoaWxkKHNoZWV0KTtcbn0pKCk7dmFyIFJlcGVhdGVyRmllbGQ7XG5cblJlcGVhdGVyRmllbGQgPSBmdW5jdGlvbiAoKSB7XG4gIGNsYXNzIFJlcGVhdGVyRmllbGQgZXh0ZW5kcyBGaWVsZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICB2YXIgYmFzZSwgZGlmZjtcbiAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICB0aGlzLl9jYWxjRm9jdXNTdGF0ZSA9IHRoaXMuX2NhbGNGb2N1c1N0YXRlLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9jYWxjQmx1clN0YXRlID0gdGhpcy5fY2FsY0JsdXJTdGF0ZS5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fZW1pdFN1Ym1pdCA9IHRoaXMuZW1pdC5iaW5kKHRoaXMsICdzdWJtaXQnKTtcbiAgICAgIHRoaXMuZ3JvdXBMYWJlbCA9IElTLnN0cmluZyh0aGlzLnNldHRpbmdzLm51bWJlcmluZykgPyB0aGlzLnNldHRpbmdzLm51bWJlcmluZyA6ICdJdGVtJztcbiAgICAgIHRoaXMubGFiZWxSZWdleCA9IG5ldyBSZWdFeHAoYF4ke3RoaXMuZ3JvdXBMYWJlbH0gXFxcXGQrKD86XFw6ICk/YCk7XG4gICAgICB0aGlzLnN0YXRlLmNvbGxhcHNlZCA9IHRoaXMuc2V0dGluZ3Muc3RhcnRDb2xsYXBzZWQgJiYgdGhpcy5zZXR0aW5ncy5jb2xsYXBzYWJsZTtcblxuICAgICAgaWYgKHRoaXMuX3ZhbHVlID09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBbXTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXR0aW5ncy5fZ3JvdXBTZXR0aW5ncyA9IGV4dGVuZC5ub3RLZXlzKFsnaW5saW5lJywgJ2Jsb2NrJ10pLmNsb25lKHRoaXMuc2V0dGluZ3MuZ3JvdXBTZXR0aW5ncyk7XG4gICAgICB0aGlzLnNldHRpbmdzLmdyb3VwU2V0dGluZ3MgPSBleHRlbmQua2V5cyhbJ2lubGluZScsICdibG9jayddKS5jbG9uZSh0aGlzLnNldHRpbmdzLmdyb3VwU2V0dGluZ3MpO1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5zdHlsZSA9PT0gJ2Jsb2NrJykge1xuICAgICAgICB0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLmZpZWxkKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3Muc2luZ2xlTW9kZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLnNpbmdsZU1vZGUpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5maWVsZHMgPSBbdGhpcy5zZXR0aW5ncy5maWVsZCB8fCB0aGlzLnNldHRpbmdzLmZpZWxkc107XG4gICAgICB9XG5cbiAgICAgIGlmICgoYmFzZSA9IHRoaXMuc2V0dGluZ3MpLnZhbHVlID09IG51bGwpIHtcbiAgICAgICAgYmFzZS52YWx1ZSA9IFtdO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5taW5JdGVtcyAmJiB0aGlzLnNldHRpbmdzLnZhbHVlLmxlbmd0aCA8IHRoaXMuc2V0dGluZ3MubWluSXRlbXMpIHtcbiAgICAgICAgZGlmZiA9IHRoaXMuc2V0dGluZ3MubWluSXRlbXMgLSB0aGlzLnNldHRpbmdzLnZhbHVlLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoLS1kaWZmKSB7XG4gICAgICAgICAgdGhpcy5zZXR0aW5ncy52YWx1ZS5wdXNoKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NyZWF0ZUVsZW1lbnRzKCk7XG5cbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzKCk7XG5cbiAgICAgIHRoaXMuX2NvbnN0cnVjdG9yRW5kKCk7XG4gICAgfVxuXG4gICAgX2dldFZhbHVlKCkge1xuICAgICAgdmFyIGdyb3VwLCBpLCBpbmRleCwgbGVuLCByZWYsIHZhbHVlcztcbiAgICAgIHZhbHVlcyA9IFtdO1xuICAgICAgcmVmID0gdGhpcy5fdmFsdWU7XG5cbiAgICAgIGZvciAoaW5kZXggPSBpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaW5kZXggPSArK2kpIHtcbiAgICAgICAgZ3JvdXAgPSByZWZbaW5kZXhdO1xuICAgICAgICB2YWx1ZXNbaW5kZXhdID0gZ3JvdXAudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgX3NldFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgICB2YXIgaSwgaW5kZXgsIGxlbiwgdmFsdWU7XG5cbiAgICAgIGlmICghSVMuYXJyYXkobmV3VmFsdWUpKSB7XG4gICAgICAgIHRoaXMuYWRkSXRlbShuZXdWYWx1ZSwgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChpbmRleCA9IGkgPSAwLCBsZW4gPSBuZXdWYWx1ZS5sZW5ndGg7IGkgPCBsZW47IGluZGV4ID0gKytpKSB7XG4gICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZVtpbmRleF07XG5cbiAgICAgICAgICBpZiAodGhpcy5fdmFsdWVbaW5kZXhdICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlW2luZGV4XS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkZEl0ZW0odmFsdWUsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgIH1cblxuICAgIF9jcmVhdGVFbGVtZW50cygpIHtcbiAgICAgIHZhciBmb3JjZU9wdHM7XG4gICAgICBmb3JjZU9wdHMgPSB7XG4gICAgICAgIHJlbGF0ZWRJbnN0YW5jZTogdGhpc1xuICAgICAgfTtcbiAgICAgIHRoaXMuZWwgPSB0aGlzLnRlbXBsYXRlLnNwYXduKHRoaXMuc2V0dGluZ3MudGVtcGxhdGVzLmRlZmF1bHQsIGZvcmNlT3B0cyk7XG4gICAgICB0aGlzLmVsLnN0YXRlKCdjb2xsYXBzYWJsZScsIHRoaXMuc2V0dGluZ3MuY29sbGFwc2FibGUpO1xuICAgICAgdGhpcy5lbC5zdGF0ZShgJHt0aGlzLnNldHRpbmdzLnN0eWxlfVN0eWxlYCwgdHJ1ZSk7XG4gICAgICB0aGlzLmVsLnJhdy5fcXVpY2tGaWVsZCA9IHRoaXMuZWwuY2hpbGRmLmlubmVyd3JhcC5yYXcuX3F1aWNrRmllbGQgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5kcmFnZHJvcCkge1xuICAgICAgICB0aGlzLmRyYWdnZXIgPSBkcmFndWxhKFt0aGlzLmVsLmNoaWxkLmlubmVyd3JhcC5yYXddLCB7XG4gICAgICAgICAgcmV2ZXJ0T25TcGlsbDogdHJ1ZSxcbiAgICAgICAgICBpbnZhbGlkOiBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgIHZhciByZWY7XG4gICAgICAgICAgICByZXR1cm4gKChyZWYgPSBlbC5fcXVpY2tFbGVtZW50KSAhPSBudWxsID8gcmVmLnJlZiA6IHZvaWQgMCkgPT09ICdhZGRCdXR0b24nO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7IC8vIG1vdmVzOiAoXywgX18sIGVsKS0+IGVsLl9xdWlja0VsZW1lbnQ/LnJlZiBpcyAnaGVhZGVyJ1xuXG4gICAgICAgIHRoaXMuZHJhZ2dlci5vbignZHJvcCcsICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZU9yZ2FuaXplKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9hdHRhY2hCaW5kaW5ncygpIHtcbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzX2VsU3RhdGUoKTtcblxuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3NfZGlzcGxheSgpO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5nc19zdGF0ZVRyaWdnZXJzKCk7XG5cbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzX3ZhbHVlKCk7XG4gICAgfVxuXG4gICAgX2F0dGFjaEJpbmRpbmdzX2VsU3RhdGUoKSB7XG4gICAgICBTaW1wbHlCaW5kKCd2aXNpYmxlJykub2YodGhpcy5zdGF0ZSkudG8odmlzaWJsZSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnN0YXRlKCd2aXNpYmxlJywgdmlzaWJsZSk7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ2Rpc2FibGVkJykub2YodGhpcy5zdGF0ZSkudG8oZGlzYWJsZWQgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zdGF0ZSgnZGlzYWJsZWQnLCBkaXNhYmxlZCk7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ3Nob3dMYWJlbCcpLm9mKHRoaXMuc3RhdGUpLnRvKHNob3dMYWJlbCA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnN0YXRlKCdzaG93TGFiZWwnLCBzaG93TGFiZWwpO1xuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKCdzaG93RXJyb3InKS5vZih0aGlzLnN0YXRlKS50byhzaG93RXJyb3IgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zdGF0ZSgnc2hvd0Vycm9yJywgc2hvd0Vycm9yKTtcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnc2hvd0hlbHAnKS5vZih0aGlzLnN0YXRlKS50byhzaG93SGVscCA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnN0YXRlKCdzaG93SGVscCcsIHNob3dIZWxwKTtcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnY29sbGFwc2VkJykub2YodGhpcy5zdGF0ZSkudG8oY29sbGFwc2VkID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwuc3RhdGUoJ2NvbGxhcHNlZCcsIGNvbGxhcHNlZCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBTaW1wbHlCaW5kKCd2YWxpZCcpLm9mKHRoaXMuc3RhdGUpLnRvKHZhbGlkID0+IHtcbiAgICAgICAgdGhpcy5lbC5zdGF0ZSgndmFsaWQnLCB2YWxpZCk7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLnN0YXRlKCdpbnZhbGlkJywgIXZhbGlkKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF9hdHRhY2hCaW5kaW5nc19kaXNwbGF5KCkge1xuICAgICAgdmFyIGdyb3VwLCBpLCBsZW4sIHJlZjtcbiAgICAgIFNpbXBseUJpbmQoJ3dpZHRoJykub2YodGhpcy5zdGF0ZSkudG8od2lkdGggPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zdHlsZSgnd2lkdGgnLCB3aWR0aCkuc3RhdGUoJ2RlZmluZWRXaWR0aCcsIHdpZHRoICE9PSAnYXV0bycpO1xuICAgICAgfSkudHJhbnNmb3JtKHRoaXMuX2Zvcm1hdFdpZHRoLmJpbmQodGhpcykpLnVwZGF0ZU9uKCdpc01vYmlsZScpLm9mKHRoaXMuc3RhdGUpO1xuICAgICAgU2ltcGx5QmluZCgnc2hvd0Vycm9yJywge1xuICAgICAgICB1cGRhdGVPbkJpbmQ6IGZhbHNlXG4gICAgICB9KS5vZih0aGlzLnN0YXRlKS50byhzaG93RXJyb3IgPT4ge1xuICAgICAgICB2YXIgZ3JvdXAsIGksIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgICByZWYgPSB0aGlzLl92YWx1ZTtcbiAgICAgICAgcmVzdWx0cyA9IFtdO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGdyb3VwID0gcmVmW2ldO1xuICAgICAgICAgIHJlc3VsdHMucHVzaChncm91cC5zdGF0ZS5zaG93RXJyb3IgPSBzaG93RXJyb3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9KTtcbiAgICAgIHJlZiA9IHRoaXMuX3ZhbHVlO1xuXG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZ3JvdXAgPSByZWZbaV07XG4gICAgICAgIFNpbXBseUJpbmQoJ2Rpc2FibGVkJykub2YodGhpcy5zdGF0ZSkudG8oJ2Rpc2FibGVkJykub2YoZmllbGQuc3RhdGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9hdHRhY2hCaW5kaW5nc19zdGF0ZVRyaWdnZXJzKCkge1xuICAgICAgdmFyIHRvZ2dsZUNvbGxhcHNlO1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5jb2xsYXBzYWJsZSkge1xuICAgICAgICB0b2dnbGVDb2xsYXBzZSA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLnN0YXRlLmNvbGxhcHNlZCA9ICF0aGlzLnN0YXRlLmNvbGxhcHNlZDtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lbWl0KCdjb2xsYXBzZWQnLCB0aGlzLnN0YXRlLmNvbGxhcHNlZCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgU2ltcGx5QmluZCgnZXZlbnQ6Y2xpY2snKS5vZih0aGlzLmVsLmNoaWxkLmNvbGxhcHNlKS50byh0b2dnbGVDb2xsYXBzZSk7XG4gICAgICAgIFNpbXBseUJpbmQoJ2V2ZW50OmNsaWNrJykub2YodGhpcy5lbC5jaGlsZC5sYWJlbCkudG8odG9nZ2xlQ29sbGFwc2UpO1xuICAgICAgICBTaW1wbHlCaW5kKCdjb2xsYXBzZWQnKS5vZih0aGlzLnN0YXRlKS5vbmNlLnRvKCgpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjYWxjRGlzcGxheSgpO1xuICAgICAgICB9KS5jb25kaXRpb24oZnVuY3Rpb24gKGNvbGxhcHNlZCkge1xuICAgICAgICAgIHJldHVybiAhY29sbGFwc2VkO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfYXR0YWNoQmluZGluZ3NfdmFsdWUoKSB7XG4gICAgICBTaW1wbHlCaW5kKCdhcnJheTpfdmFsdWUnLCB7XG4gICAgICAgIHVwZGF0ZU9uQmluZDogdHJ1ZVxuICAgICAgfSkub2YodGhpcykudG8oKHZhbHVlLCBwcmV2VmFsdWUpID0+IHtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX3JlY2FsY0xhYmVscygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZXZWYWx1ZSkge1xuICAgICAgICAgIHRoaXMuc3RhdGUuaW50ZXJhY3RlZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUudmFsaWQgPSB0aGlzLnZhbGlkYXRlKHZvaWQgMCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnZXZlbnQ6Y2xpY2snKS5vZih0aGlzLmVsLmNoaWxkLmFkZEJ1dHRvbikudG8oKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRJdGVtKCkuZm9jdXMoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF92YWxpZGF0ZShwcm92aWRlZFZhbHVlLCB0ZXN0VW5yZXF1aXJlZCkge1xuICAgICAgdmFyIGdyb3VwLCBpLCBpc1ZhbGlkLCBsZW4sIHJlZjtcbiAgICAgIHJlZiA9IHRoaXMuX3ZhbHVlO1xuXG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZ3JvdXAgPSByZWZbaV07XG4gICAgICAgIGlzVmFsaWQgPSBncm91cC52YWxpZGF0ZShwcm92aWRlZFZhbHVlW2dyb3VwLm5hbWVdLCB0ZXN0VW5yZXF1aXJlZCk7XG5cbiAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIF9jYWxjRm9jdXNTdGF0ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0YXRlLmZvY3VzZWQgPSB0aGlzLl92YWx1ZS5zb21lKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICByZXR1cm4gZmllbGQuc3RhdGUuZm9jdXNlZDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF9jYWxjQmx1clN0YXRlKCkge1xuICAgICAgcmV0dXJuIHNldFRpbWVvdXQodGhpcy5fY2FsY0ZvY3VzU3RhdGUpO1xuICAgIH1cblxuICAgIGZvY3VzKCkge1xuICAgICAgdmFyIHJlZjtcbiAgICAgIHJldHVybiAocmVmID0gdGhpcy5fdmFsdWVbMF0pICE9IG51bGwgPyByZWYuZm9jdXMoKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICBibHVyKCkge1xuICAgICAgdmFyIGZpZWxkLCBpLCBsZW4sIHJlZjtcbiAgICAgIHJlZiA9IHRoaXMuX3ZhbHVlO1xuXG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZmllbGQgPSByZWZbaV07XG5cbiAgICAgICAgaWYgKGZpZWxkLmJsdXIpIHtcbiAgICAgICAgICBmaWVsZC5ibHVyKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBfcmVjYWxjTGFiZWxzKCkge1xuICAgICAgdmFyIGdyb3VwLCBpLCBpbmRleCwgbGVuLCByZWY7XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLnN0eWxlID09PSAnYmxvY2snKSB7XG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5udW1iZXJpbmcgJiYgIXRoaXMuc2V0dGluZ3MuZHluYW1pY0xhYmVsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVmID0gdGhpcy5fdmFsdWU7XG5cbiAgICAgICAgZm9yIChpbmRleCA9IGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpbmRleCA9ICsraSkge1xuICAgICAgICAgIGdyb3VwID0gcmVmW2luZGV4XTtcblxuICAgICAgICAgIHRoaXMuX3JlY2FsY0xhYmVsKGdyb3VwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBfcmVjYWxjTGFiZWwoZ3JvdXAsIGluZGV4KSB7XG4gICAgICB2YXIgZXhpc3RpbmdMYWJlbCwgbmV3TGFiZWw7XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLmR5bmFtaWNMYWJlbCAmJiBncm91cC5maWVsZHNbdGhpcy5zZXR0aW5ncy5keW5hbWljTGFiZWxdKSB7XG4gICAgICAgIG5ld0xhYmVsID0gZ3JvdXAuZmllbGRzW3RoaXMuc2V0dGluZ3MuZHluYW1pY0xhYmVsXS52YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4aXN0aW5nTGFiZWwgPSBncm91cC5zdGF0ZS5sYWJlbCB8fCAnJztcbiAgICAgICAgZXhpc3RpbmdMYWJlbCA9IGV4aXN0aW5nTGFiZWwucmVwbGFjZSh0aGlzLmxhYmVsUmVnZXgsICcnKTtcbiAgICAgICAgbmV3TGFiZWwgPSBgJHt0aGlzLmdyb3VwTGFiZWx9ICR7aW5kZXggKyAxfWA7XG5cbiAgICAgICAgaWYgKGV4aXN0aW5nTGFiZWwpIHtcbiAgICAgICAgICBuZXdMYWJlbCArPSBgOiAke2V4aXN0aW5nTGFiZWx9YDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ3JvdXAuc3RhdGUubGFiZWwgPSBuZXdMYWJlbDtcbiAgICB9XG5cbiAgICBfcmVjYWxjRGlzcGxheSgpIHtcbiAgICAgIHZhciBncm91cCwgaSwgbGVuLCByZWY7XG4gICAgICByZWYgPSB0aGlzLl92YWx1ZTtcblxuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGdyb3VwID0gcmVmW2ldO1xuXG4gICAgICAgIGlmIChncm91cC5fcmVjYWxjRGlzcGxheSkge1xuICAgICAgICAgIGdyb3VwLl9yZWNhbGNEaXNwbGF5KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRJdGVtKHZhbHVlLCBza2lwSW5zZXJ0LCBza2lwRW1pdCkge1xuICAgICAgdmFyIGZpcnN0RmllbGQsIGdyb3VwLCBtYXJnaW4sIHJlZnJlc2hDaGlsZHJlbiwgc2V0dGluZ3M7XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLm1heEl0ZW1zICYmIHRoaXMuX3ZhbHVlLmxlbmd0aCA9PT0gdGhpcy5zZXR0aW5ncy5tYXhJdGVtcyB8fCB0aGlzLnN0YXRlLmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbWFyZ2luID0gdGhpcy5zZXR0aW5ncy5zdHlsZSA9PT0gJ2lubGluZScgPyBgMCAke3RoaXMuc2V0dGluZ3MuZ3JvdXBNYXJnaW59cHggJHt0aGlzLnNldHRpbmdzLmdyb3VwTWFyZ2lufXB4IDBgIDogYDAgMCAke3RoaXMuc2V0dGluZ3MuZ3JvdXBNYXJnaW59cHggMGA7XG4gICAgICBzZXR0aW5ncyA9IGV4dGVuZCh7XG4gICAgICAgIHR5cGU6ICdncm91cCcsXG4gICAgICAgIGZpZWxkczogdGhpcy5zZXR0aW5ncy5maWVsZHMsXG4gICAgICAgIG1hcmdpbixcbiAgICAgICAgdmFsdWVcbiAgICAgIH0sIHRoaXMuc2V0dGluZ3MuX2dyb3VwU2V0dGluZ3MsIHRoaXMuc2V0dGluZ3MuZ3JvdXBTZXR0aW5nc1t0aGlzLnNldHRpbmdzLnN0eWxlXSk7XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLnNpbmdsZU1vZGUpIHtcbiAgICAgICAgZmlyc3RGaWVsZCA9IHRoaXMuc2V0dGluZ3MuZmllbGRzWzBdLm5hbWU7XG5cbiAgICAgICAgc2V0dGluZ3MuZ2V0dGVyID0gZnVuY3Rpb24gKGZpZWxkcykge1xuICAgICAgICAgIHJldHVybiBmaWVsZHNbZmlyc3RGaWVsZF07XG4gICAgICAgIH07XG5cbiAgICAgICAgc2V0dGluZ3Muc2V0dGVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFtgJHtmaXJzdEZpZWxkfWBdOiB2YWx1ZVxuICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGdyb3VwID0gdGhpcy5idWlsZGVyKHNldHRpbmdzKTtcbiAgICAgIGdyb3VwLmVsLmNoaWxkLmFjdGlvbnMuYXBwZW5kKHRoaXMuc2V0dGluZ3MuZ3JvdXBTZXR0aW5nc1t0aGlzLnNldHRpbmdzLnN0eWxlXSk7XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLmNsb25lYWJsZSkge1xuICAgICAgICBncm91cC5hZGRBY3Rpb24oJ2Nsb25lJywgdGhpcy50ZW1wbGF0ZXMuY2xvbmVJY29uLCB0aGlzLmNsb25lSXRlbS5iaW5kKHRoaXMsIGdyb3VwKSwgdGhpcy5zZXR0aW5ncy5zdHlsZSA9PT0gJ2Jsb2NrJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLnJlbW92ZWFibGUpIHtcbiAgICAgICAgZ3JvdXAuYWRkQWN0aW9uKCdyZW1vdmUnLCB0aGlzLnRlbXBsYXRlcy5yZW1vdmVJY29uLCB0aGlzLnJlbW92ZUl0ZW0uYmluZCh0aGlzLCBncm91cCksIHRoaXMuc2V0dGluZ3Muc3R5bGUgPT09ICdibG9jaycpO1xuICAgICAgfVxuXG4gICAgICBncm91cC5vbignZm9jdXMnLCB0aGlzLl9jYWxjRm9jdXNTdGF0ZSk7XG4gICAgICBncm91cC5vbignYmx1cicsIHRoaXMuX2NhbGNCbHVyU3RhdGUpO1xuICAgICAgZ3JvdXAub24oJ3N1Ym1pdCcsIHRoaXMuX2VtaXRTdWJtaXQpO1xuICAgICAgU2ltcGx5QmluZCgnZXZlbnQ6aW5wdXQnKS5vZihncm91cCkudG8oKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbWl0KCdpbnB1dCcsIHRoaXMuX3ZhbHVlLCBncm91cCk7XG4gICAgICB9KTtcbiAgICAgIFNpbXBseUJpbmQoJ2Rpc2FibGVkJykub2YodGhpcy5zdGF0ZSkudG8oJ2Rpc2FibGVkJykub2YoZ3JvdXAuc3RhdGUpO1xuICAgICAgcmVmcmVzaENoaWxkcmVuID0gZ3JvdXAuZWwuY2hpbGRmO1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5keW5hbWljTGFiZWwpIHtcbiAgICAgICAgZ3JvdXAub24oJ2lucHV0JywgKCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9yZWNhbGNMYWJlbChncm91cCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5hdXRvUmVtb3ZlRW1wdHkpIHtcbiAgICAgICAgZ3JvdXAub25jZSgnYmx1cicsICgpID0+IHtcbiAgICAgICAgICBpZiAoIWdyb3VwLnN0YXRlLmludGVyYWN0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbW92ZUl0ZW0oZ3JvdXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgpIHtcbiAgICAgICAgZ3JvdXAuc3RhdGUud2lkdGggPSB0aGlzLnNldHRpbmdzLmdyb3VwV2lkdGg7XG4gICAgICAgIGdyb3VwLmVsLmNoaWxkLmlubmVyd3JhcC5vbmNlKCdpbnNlcnRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zdHlsZSgnd2lkdGgnLCBgY2FsYygxMDAlIC0gJHt0aGlzLnBhcmVudC5jaGlsZC5hY3Rpb25zLndpZHRoIHx8IDE3fXB4KWApO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFza2lwSW5zZXJ0KSB7XG4gICAgICAgIGdyb3VwLmluc2VydEJlZm9yZSh0aGlzLmVsLmNoaWxkLmFkZEJ1dHRvbik7XG5cbiAgICAgICAgaWYgKCFza2lwRW1pdCkge1xuICAgICAgICAgIHRoaXMuZW1pdCgnaXRlbUFkZCcsIGdyb3VwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3ZhbHVlLnB1c2goZ3JvdXApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ3JvdXA7XG4gICAgfVxuXG4gICAgY2xvbmVJdGVtKGdyb3VwKSB7XG4gICAgICB2YXIgY2xvbmU7XG5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLm1heEl0ZW1zICYmIHRoaXMuX3ZhbHVlLmxlbmd0aCA9PT0gdGhpcy5zZXR0aW5ncy5tYXhJdGVtcyB8fCB0aGlzLnN0YXRlLmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpbmNsdWRlcyh0aGlzLl92YWx1ZSwgZ3JvdXApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2xvbmUgPSB0aGlzLmFkZEl0ZW0oZ3JvdXAudmFsdWUsIHRydWUpO1xuICAgICAgY2xvbmUuaW5zZXJ0QWZ0ZXIoZ3JvdXAuZWwpO1xuICAgICAgaW5zZXJ0QWZ0ZXIodGhpcy5fdmFsdWUsIGdyb3VwLCBjbG9uZSk7XG4gICAgICB0aGlzLmVtaXQoJ2l0ZW1BZGQnLCBjbG9uZSk7XG4gICAgICB0aGlzLmVtaXQoJ2l0ZW1DbG9uZScsIGNsb25lKTtcbiAgICAgIHRoaXMucmVPcmdhbml6ZSgpO1xuICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cblxuICAgIHJlbW92ZUl0ZW0oZ3JvdXApIHtcbiAgICAgIHZhciByZWYsIHJlbW92ZWQsIHRhcmdldEluZGV4O1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5taW5JdGVtcyAmJiB0aGlzLl92YWx1ZS5sZW5ndGggPT09IHRoaXMuc2V0dGluZ3MubWluSXRlbXMgfHwgdGhpcy5zdGF0ZS5kaXNhYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4ID0gTWF0aC5tYXgoMSwgdGhpcy5fdmFsdWUuaW5kZXhPZihncm91cCkpO1xuXG4gICAgICBpZiAocmVtb3ZlZCA9IHJlbW92ZUl0ZW0odGhpcy5fdmFsdWUsIGdyb3VwKSkge1xuICAgICAgICBncm91cC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuZW1pdCgnaXRlbVJlbW92ZScsIGdyb3VwKTtcblxuICAgICAgICBpZiAoKHJlZiA9IHRoaXMuX3ZhbHVlW3RhcmdldEluZGV4IC0gMV0pICE9IG51bGwpIHtcbiAgICAgICAgICByZWYuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnJlT3JnYW5pemUoKTtcbiAgICAgIHJldHVybiAhIXJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmVPcmdhbml6ZSgpIHtcbiAgICAgIHZhciBjaGlsZHJlbjtcbiAgICAgIGNoaWxkcmVuID0gW10uc2xpY2UuY2FsbCh0aGlzLmVsLmNoaWxkLmlubmVyd3JhcC5yYXcuY2hpbGROb2RlcywgMCwgLTEpO1xuICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlID0gY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICByZXR1cm4gZW50cnkuX3F1aWNrRmllbGQ7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgfVxuICBSZXBlYXRlckZpZWxkLnByb3RvdHlwZS50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICBSZXBlYXRlckZpZWxkLnByb3RvdHlwZS50ZW1wbGF0ZXMgPSB0ZW1wbGF0ZXM7XG4gIFJlcGVhdGVyRmllbGQucHJvdG90eXBlLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4gIFJlcGVhdGVyRmllbGQucHJvdG90eXBlLnNoYWxsb3dTZXR0aW5ncyA9IFsnZmllbGRzJ107XG4gIHJldHVybiBSZXBlYXRlckZpZWxkO1xufS5jYWxsKHVuZGVmaW5lZCk7XG5cbnZhciBSZXBlYXRlckZpZWxkJDEgPSBSZXBlYXRlckZpZWxkO2V4cG9ydCBkZWZhdWx0IFJlcGVhdGVyRmllbGQkMTsiLCJpbXBvcnQgQ09MT1JTIGZyb20nLi4vLi4vY29uc3RhbnRzL2NvbG9ycy5qcyc7dmFyIGRlZmF1bHRzID0ge1xuICBhbHdheXNWYWxpZDogZmFsc2UsXG4gIGxhYmVsQ2xpY2tzOiBmYWxzZSxcbiAgc2l6ZTogMTUsXG4gIGZvbnRTaXplOiAxMyxcbiAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgY29sb3JzOiB7XG4gICAgdGV4dDogQ09MT1JTLmdyZXksXG4gICAgc3ltYm9sOiBDT0xPUlMub3JhbmdlLFxuICAgIGJhY2tncm91bmQ6ICd3aGl0ZSdcbiAgfVxufTtleHBvcnQgZGVmYXVsdCBkZWZhdWx0czsiLCJpbXBvcnQgRE9NIGZyb20ncXVpY2tkb20nO2ltcG9ydCBjaGVja21hcmsgZnJvbScuLi8uLi9zdmcvY2hlY2ttYXJrLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2FuZ2xlRG93bi5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9jYXJldFVwLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2NhcmV0RG93bi5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9wbHVzLmpzJztpbXBvcnQnLi4vLi4vc3ZnL2Nsb25lLmpzJztpbXBvcnQnLi4vLi4vc3ZnL3JlbW92ZS5qcyc7aW1wb3J0IENPTE9SUyBmcm9tJy4uLy4uL2NvbnN0YW50cy9jb2xvcnMuanMnO3ZhciB0ZW1wbGF0ZSA9IERPTS50ZW1wbGF0ZShbJ2RpdicsIHtcbiAgcmVmOiAnZmllbGQnLFxuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICB3aWR0aDogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICByZXR1cm4gZmllbGQuc3RhdGUud2lkdGg7XG4gICAgfSxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBmb250RmFtaWx5OiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5mb250RmFtaWx5O1xuICAgIH0sXG4gICAgdGV4dEFsaWduOiAnbGVmdCcsXG4gICAgJHZpc2libGU6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gICAgfSxcbiAgICAkc2hvd0Vycm9yOiB7XG4gICAgICBhbmltYXRpb246ICcwLjJzIGZpZWxkRXJyb3JTaGFrZSdcbiAgICB9XG4gIH1cbn0sIFsnZGl2Jywge1xuICByZWY6ICdpbm5lcndyYXAnLFxuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIGZvbnRGYW1pbHk6ICdpbmhlcml0JyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgZmxleFdyYXA6ICdub3dyYXAnLFxuICAgIGFsaWduQ29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgIGFsaWduSXRlbXM6ICdmbGV4LXN0YXJ0J1xuICB9XG59LCBbJ2RpdicsIHtcbiAgcmVmOiAnaW5wdXQnLFxuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgIGFsaWduU2VsZjogJ3N0YXJ0JyxcbiAgICB6SW5kZXg6IDIsXG4gICAgZmxleEdyb3c6IDAsXG4gICAgZmxleFNocmluazogMCxcbiAgICB3aWR0aDogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICByZXR1cm4gZmllbGQuc2V0dGluZ3Muc2l6ZTtcbiAgICB9LFxuICAgIGhlaWdodDogZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICByZXR1cm4gZmllbGQuc2V0dGluZ3Muc2l6ZTtcbiAgICB9LFxuICAgIG1hcmdpbjogJzAgYXV0bycsXG4gICAgYmFja2dyb3VuZENvbG9yOiBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5zZXR0aW5ncy5jb2xvcnMuYmFja2dyb3VuZDtcbiAgICB9LFxuICAgIGJvcmRlcjogYDFweCBzb2xpZCAke0NPTE9SUy5ncmV5X2xpZ2h0fWAsXG4gICAgYm9yZGVyUmFkaXVzOiAzLFxuICAgIGN1cnNvcjogJ3BvaW50ZXInXG4gIH1cbn0sIFsvLyAkdG9nZ2xlZDpcbi8vIFx0Ym9yZGVyQ29sb3I6IChmaWVsZCktPiBmaWVsZC5zZXR0aW5ncy5jb2xvcnMuc3ltYm9sXG4nZGl2Jywge1xuICByZWY6ICdjaGVja21hcmsnLFxuICBzdHlsZToge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHpJbmRleDogMixcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIHRvcDogJzUwJScsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKScsXG4gICAgd2lkdGg6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLnNldHRpbmdzLnNpemUgLyAxLjU7XG4gICAgfSxcbiAgICBoZWlnaHQ6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLnNldHRpbmdzLnNpemUgLyAxLjU7XG4gICAgfSxcbiAgICBtYXJnaW46ICcwIGF1dG8nLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgIGxpbmVIZWlnaHQ6IDAsXG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIGRpc3BsYXk6ICdub25lJyxcbiAgICAkdG9nZ2xlZDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH1cbiAgfVxufSwgY2hlY2ttYXJrLmV4dGVuZCh7XG4gIHN0eWxlOiB7XG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICBzdHJva2U6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLnNldHRpbmdzLmNvbG9ycy5zeW1ib2w7XG4gICAgfSxcbiAgICBvdXRsaW5lOiAnbm9uZSdcbiAgfVxufSldXSwgWydkaXYnLCB7XG4gIHJlZjogJ2xhYmVsJyxcbiAgc3R5bGU6IHtcbiAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgbWFyZ2luTGVmdDogNSxcbiAgICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXG4gICAgZm9udFNpemU6IGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLnNldHRpbmdzLmZvbnRTaXplO1xuICAgIH0sXG4gICAgY29sb3I6IENPTE9SUy5ibGFjayxcbiAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gICAgJHNob3dMYWJlbDoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH0sXG4gICAgJHNob3dFcnJvcjoge1xuICAgICAgY29sb3I6IENPTE9SUy5yZWRcbiAgICB9XG4gIH1cbn1dXSwgWydkaXYnLCB7XG4gIHJlZjogJ2hlbHAnLFxuICBzdHlsZToge1xuICAgIG1hcmdpblRvcDogJzEwcHgnLFxuICAgIGZvbnRGYW1pbHk6ICdpbmhlcml0JyxcbiAgICBmb250U2l6ZTogJzExcHgnLFxuICAgIGNvbG9yOiBDT0xPUlMuZ3JleSxcbiAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgJHNob3dFcnJvcjoge1xuICAgICAgY29sb3I6IENPTE9SUy5yZWQsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgfSxcbiAgICAkc2hvd0hlbHA6IHtcbiAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICB9XG4gIH1cbn1dXSk7dmFyIHRlbXBsYXRlcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtkZWZhdWx0OiB0ZW1wbGF0ZX0pO2V4cG9ydHt0ZW1wbGF0ZSBhcyBhLHRlbXBsYXRlcyBhcyBifTsiLCJpbXBvcnQnQGRhbmllbGthbGVuL2lzJztpbXBvcnQnLi4vLi4vY2hlY2tzLmpzJztpbXBvcnQncXVpY2tkb20nO2ltcG9ydCBTaW1wbHlCaW5kIGZyb20nQGRhbmllbGthbGVuL3NpbXBseWJpbmQnO2ltcG9ydCcuLi8uLi9jb25zdGFudHMvcmVnZXguanMnO2ltcG9ydCB7aW5oZXJpdFByb3RvfWZyb20nLi4vLi4vaGVscGVycy5qcyc7aW1wb3J0J3NtYXJ0LWV4dGVuZCc7aW1wb3J0J2Zhc3Rkb20nO2ltcG9ydCcuLi8uLi9jb21wb25lbnRzL2NvbmRpdGlvbi5qcyc7aW1wb3J0Jy4uLy4uL2ZpZWxkL3RyYW5zZm9ybVNldHRpbmdzLmpzJztpbXBvcnQnLi4vLi4vZmllbGQvZ2xvYmFsRGVmYXVsdHMuanMnO2ltcG9ydCBGaWVsZCBmcm9tJy4uLy4uL2ZpZWxkL2luZGV4LmpzJztpbXBvcnQnLi4vLi4vc3ZnL2NoZWNrbWFyay5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9hbmdsZURvd24uanMnO2ltcG9ydCcuLi8uLi9zdmcvY2FyZXRVcC5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9jYXJldERvd24uanMnO2ltcG9ydCcuLi8uLi9zdmcvcGx1cy5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9jbG9uZS5qcyc7aW1wb3J0Jy4uLy4uL3N2Zy9yZW1vdmUuanMnO2ltcG9ydCcuLi8uLi9jb25zdGFudHMvY29sb3JzLmpzJztpbXBvcnQgZGVmYXVsdHMgZnJvbScuL2RlZmF1bHRzLmpzJztpbXBvcnQge2EgYXMgdGVtcGxhdGUsYiBhcyB0ZW1wbGF0ZXN9ZnJvbScuL3RlbXBsYXRlLTBiOTA3YmJlLmpzJztpbXBvcnQnLi4vY2hvaWNlL3RlbXBsYXRlLWM4OGZhOTViLmpzJztpbXBvcnQnLi4vY2hvaWNlL2RlZmF1bHRzLmpzJztpbXBvcnQgQ2hvaWNlRmllbGQgZnJvbScuLi9jaG9pY2UvaW5kZXguanMnO3ZhciBDaGVja2JveEZpZWxkO1xuXG5DaGVja2JveEZpZWxkID0gZnVuY3Rpb24gKCkge1xuICBjbGFzcyBDaGVja2JveEZpZWxkIGV4dGVuZHMgRmllbGQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgIHRoaXMuX3ZhbHVlID0gISF0aGlzLl92YWx1ZTtcbiAgICAgIHRoaXMuc2V0dGluZ3Muc2l6ZSA9IHBhcnNlRmxvYXQodGhpcy5zZXR0aW5ncy5zaXplKSB8fCBkZWZhdWx0cy5zaXplO1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5kaXNwbGF5ICE9PSAnYmxvY2snICYmIHRoaXMuc2V0dGluZ3MuZGlzcGxheSAhPT0gJ2lubGluZScpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5kaXNwbGF5ID0gZGVmYXVsdHMuZGlzcGxheTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fY3JlYXRlRWxlbWVudHMoKTtcblxuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3MoKTtcblxuICAgICAgdGhpcy5fY29uc3RydWN0b3JFbmQoKTtcbiAgICB9XG5cbiAgICBfZ2V0VmFsdWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgfVxuXG4gICAgX3NldFZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdmFsdWUgPSAhIW5ld1ZhbHVlO1xuICAgIH1cblxuICAgIF9jcmVhdGVFbGVtZW50cygpIHtcbiAgICAgIHZhciBmb3JjZU9wdHM7XG4gICAgICBmb3JjZU9wdHMgPSB7XG4gICAgICAgIHJlbGF0ZWRJbnN0YW5jZTogdGhpc1xuICAgICAgfTtcbiAgICAgIHRoaXMuZWwgPSB0aGlzLnRlbXBsYXRlLnNwYXduKHRoaXMuc2V0dGluZ3MudGVtcGxhdGVzLmRlZmF1bHQsIGZvcmNlT3B0cyk7XG4gICAgICB0aGlzLmVsLmNoaWxkLmlubmVyd3JhcC5yYXcuX3F1aWNrRmllbGQgPSB0aGlzO1xuICAgIH1cblxuICAgIF9hdHRhY2hCaW5kaW5ncygpIHtcbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzX2VsU3RhdGUoKTtcblxuICAgICAgdGhpcy5fYXR0YWNoQmluZGluZ3Nfc3RhdGVUcmlnZ2VycygpO1xuXG4gICAgICB0aGlzLl9hdHRhY2hCaW5kaW5nc19kaXNwbGF5KCk7XG5cbiAgICAgIHRoaXMuX2F0dGFjaEJpbmRpbmdzX3ZhbHVlKCk7XG5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICByZXR1cm4gU2ltcGx5QmluZCgnbGFiZWwnKS5vZih0aGlzLnN0YXRlKS50bygnaHRtbCcpLm9mKHRoaXMuZWwuY2hpbGQubGFiZWwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2F0dGFjaEJpbmRpbmdzX3ZhbHVlKCkge1xuICAgICAgU2ltcGx5QmluZCgnX3ZhbHVlJykub2YodGhpcykudG8odmFsdWUgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5zdGF0ZSgndG9nZ2xlZCcsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgU2ltcGx5QmluZCgnX3ZhbHVlJywge1xuICAgICAgICB1cGRhdGVPbkJpbmQ6IGZhbHNlXG4gICAgICB9KS5vZih0aGlzKS50byh2YWx1ZSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVtaXQoJ2lucHV0JywgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICBTaW1wbHlCaW5kKFwiZXZlbnQ6Y2xpY2tcIikub2YodGhpcy5lbC5jaGlsZC5pbnB1dCkudG8oKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9ICF0aGlzLl92YWx1ZTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5sYWJlbENsaWNrcykge1xuICAgICAgICBTaW1wbHlCaW5kKFwiZXZlbnQ6Y2xpY2tcIikub2YodGhpcy5lbC5jaGlsZC5sYWJlbCkudG8oKCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlID0gIXRoaXMuX3ZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBfdmFsaWRhdGUocHJvdmlkZWRWYWx1ZSkge1xuICAgICAgaWYgKHRoaXMuc2V0dGluZ3MudmFsaWRXaGVuVHJ1ZSkge1xuICAgICAgICBpZiAoIXByb3ZpZGVkVmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gIH1cbiAgQ2hlY2tib3hGaWVsZC5wcm90b3R5cGUudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgQ2hlY2tib3hGaWVsZC5wcm90b3R5cGUudGVtcGxhdGVzID0gdGVtcGxhdGVzO1xuICBDaGVja2JveEZpZWxkLnByb3RvdHlwZS5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICByZXR1cm4gQ2hlY2tib3hGaWVsZDtcbn0uY2FsbCh1bmRlZmluZWQpO1xuXG5pbmhlcml0UHJvdG8oQ2hlY2tib3hGaWVsZCwgQ2hvaWNlRmllbGQsIFsnX2F0dGFjaEJpbmRpbmdzX2VsU3RhdGUnLCAnX2F0dGFjaEJpbmRpbmdzX3N0YXRlVHJpZ2dlcnMnLCAnX2F0dGFjaEJpbmRpbmdzX2Rpc3BsYXknXSk7XG52YXIgQ2hlY2tib3hGaWVsZCQxID0gQ2hlY2tib3hGaWVsZDtleHBvcnQgZGVmYXVsdCBDaGVja2JveEZpZWxkJDE7IiwiaW1wb3J0ICogYXMgaGVscGVycyBmcm9tICcuL2hlbHBlcnMnXG5pbXBvcnQgcHJvbWlzZUV2ZW50IGZyb20gJ3AtZXZlbnQnXG5pbXBvcnQgZXh0ZW5kIGZyb20gJ3NtYXJ0LWV4dGVuZCdcbmltcG9ydCBET00gZnJvbSAncXVpY2tkb20nXG5pbXBvcnQgQ09MT1JTIGZyb20gJy4uL3NyYy9jb25zdGFudHMvY29sb3JzJ1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSdcbmltcG9ydCBjaGFpRG9tIGZyb20gJ2NoYWktZG9tJ1xuaW1wb3J0IGNoYWlTdHlsZSBmcm9tICdjaGFpLXN0eWxlJ1xuaW1wb3J0IGNoYWlBbG1vc3QgZnJvbSAnY2hhaS1hbG1vc3QnXG5pbXBvcnQgY2hhaUFzc2VydHR5cGUgZnJvbSAnY2hhaS1hc3NlcnR0eXBlJ1xuaW1wb3J0IGNoYWlFdmVudHMgZnJvbSAnY2hhaS1ldmVudHMnXG5jaGFpLnVzZShjaGFpRG9tKVxuY2hhaS51c2UoY2hhaVN0eWxlKVxuY2hhaS51c2UoY2hhaUFsbW9zdClcbmNoYWkudXNlKGNoYWlBc3NlcnR0eXBlKVxuY2hhaS51c2UoY2hhaUV2ZW50cylcbmNoYWkuY29uZmlnLnRydW5jYXRlVGhyZXNob2xkID0gMWUzXG5tb2NoYS5zZXR1cCgndGRkJylcbm1vY2hhLnNsb3coNDAwKVxubW9jaGEudGltZW91dCgxMjAwMClcbm1vY2hhLmJhaWwoKSB1bmxlc3Mgd2luZG93Ll9fa2FybWFfX1xuYXNzZXJ0ID0gY2hhaS5hc3NlcnRcbmV4cGVjdCA9IGNoYWkuZXhwZWN0XG53aW5kb3cuc2FuZGJveCA9IG51bGxcblxuaW1wb3J0IHF1aWNrZmllbGQgZnJvbSAnLi4vYnVpbGQvcXVpY2tmaWVsZCdcbmltcG9ydCBUZXh0YXJlYUZpZWxkIGZyb20gJy4uL2J1aWxkL2ZpZWxkcy90ZXh0YXJlYSdcbmltcG9ydCBOdW1iZXJGaWVsZCBmcm9tICcuLi9idWlsZC9maWVsZHMvbnVtYmVyJ1xuaW1wb3J0IFNlbGVjdEZpZWxkIGZyb20gJy4uL2J1aWxkL2ZpZWxkcy9zZWxlY3QnXG5pbXBvcnQgQ2hvaWNlRmllbGQgZnJvbSAnLi4vYnVpbGQvZmllbGRzL2Nob2ljZSdcbmltcG9ydCBUcnVlZmFsc2VGaWVsZCBmcm9tICcuLi9idWlsZC9maWVsZHMvdHJ1ZWZhbHNlJ1xuaW1wb3J0IFRvZ2dsZUZpZWxkIGZyb20gJy4uL2J1aWxkL2ZpZWxkcy90b2dnbGUnXG5pbXBvcnQgR3JvdXBGaWVsZCBmcm9tICcuLi9idWlsZC9maWVsZHMvZ3JvdXAnXG5pbXBvcnQgUmVwZWF0ZXJGaWVsZCBmcm9tICcuLi9idWlsZC9maWVsZHMvcmVwZWF0ZXInXG5pbXBvcnQgQ2hlY2tib3hGaWVsZCBmcm9tICcuLi9idWlsZC9maWVsZHMvY2hlY2tib3gnXG5pbXBvcnQgRmlsZUZpZWxkIGZyb20gJy4uL2J1aWxkL2ZpZWxkcy9maWxlJ1xucXVpY2tmaWVsZC5yZWdpc3RlcigndGV4dGFyZWEnLCBUZXh0YXJlYUZpZWxkKVxucXVpY2tmaWVsZC5yZWdpc3RlcignbnVtYmVyJywgTnVtYmVyRmllbGQpXG5xdWlja2ZpZWxkLnJlZ2lzdGVyKCdzZWxlY3QnLCBTZWxlY3RGaWVsZClcbnF1aWNrZmllbGQucmVnaXN0ZXIoJ2Nob2ljZScsIENob2ljZUZpZWxkKVxucXVpY2tmaWVsZC5yZWdpc3RlcigndHJ1ZWZhbHNlJywgVHJ1ZWZhbHNlRmllbGQpXG5xdWlja2ZpZWxkLnJlZ2lzdGVyKCd0b2dnbGUnLCBUb2dnbGVGaWVsZClcbnF1aWNrZmllbGQucmVnaXN0ZXIoJ2dyb3VwJywgR3JvdXBGaWVsZClcbnF1aWNrZmllbGQucmVnaXN0ZXIoJ3JlcGVhdGVyJywgUmVwZWF0ZXJGaWVsZClcbnF1aWNrZmllbGQucmVnaXN0ZXIoJ2NoZWNrYm94JywgQ2hlY2tib3hGaWVsZClcbiMgcXVpY2tmaWVsZC5yZWdpc3RlcignZmlsZScsIEZpbGVGaWVsZClcbndpbmRvdy5xdWlja2ZpZWxkID0gcXVpY2tmaWVsZFxuXG5lbWl0RXZlbnQgPSAodGFyZ2V0LCBldmVudCwgdHJpZ2dlciktPlxuXHRwcm9taXNlID0gcHJvbWlzZUV2ZW50KHRhcmdldCwgZXZlbnQpXG5cdHRyaWdnZXIoKVxuXHRyZXR1cm4gcHJvbWlzZVxuXG5cbnN1aXRlIFwiUXVpY2tGaWVsZFwiLCAoKS0+XHRcblx0dGVhcmRvd24gKCktPlxuXHRcdGxhc3RDaGlsZCA9IHNhbmRib3guY2hpbGRyZW5bc2FuZGJveC5jaGlsZHJlbi5sZW5ndGgtMV1cblx0XHRsYXN0Q2hpbGQucmVtb3ZlKCkgaWYgbGFzdENoaWxkPy5yZWYgaXMgJ3Rlc3RUaXRsZSdcblx0XG5cdHN1aXRlU2V0dXAgKCktPlxuXHRcdGhlbHBlcnMucmVzdGFydFNhbmRib3goKVxuXG5cblx0c3VpdGUgXCJjcmVhdGlvblwiLCAoKS0+XG5cdFx0dGVhcmRvd24oaGVscGVycy5yZXN0YXJ0U2FuZGJveClcblxuXHRcdHRlc3QgXCJ0ZXh0IGZpZWxkXCIsICgpLT5cblx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh0eXBlOid0ZXh0JykuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGFzc2VydC5lcXVhbCBmaWVsZC5lbC5wYXJlbnQsIHNhbmRib3hcblx0XHRcdGFzc2VydC5lcXVhbCBmaWVsZC5lbC5jaGlsZC5pbnB1dC5hdHRyKCd0eXBlJyksICd0ZXh0J1xuXG5cdFx0dGVzdCBcInRleHRhcmVhIGZpZWxkXCIsICgpLT5cblx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh0eXBlOid0ZXh0YXJlYScpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRhc3NlcnQuZXF1YWwgZmllbGQuZWwucGFyZW50LCBzYW5kYm94XG5cblx0XHR0ZXN0IFwibnVtYmVyIGZpZWxkXCIsICgpLT5cblx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh0eXBlOidudW1iZXInKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0YXNzZXJ0LmVxdWFsIGZpZWxkLmVsLnBhcmVudCwgc2FuZGJveFxuXG5cdFx0dGVzdCBcInNlbGVjdCBmaWVsZFwiLCAoKS0+XG5cdFx0XHRmaWVsZCA9IHF1aWNrZmllbGQodHlwZTonc2VsZWN0JykuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGFzc2VydC5lcXVhbCBmaWVsZC5lbC5wYXJlbnQsIHNhbmRib3hcblxuXHRcdHRlc3QgXCJjaG9pY2UgZmllbGRcIiwgKCktPlxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHR5cGU6J2Nob2ljZScsIGNob2ljZXM6WydhJywnYiddKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0YXNzZXJ0LmVxdWFsIGZpZWxkLmVsLnBhcmVudCwgc2FuZGJveFxuXG5cdFx0dGVzdCBcInRydWVmYWxzZSBmaWVsZFwiLCAoKS0+XG5cdFx0XHRmaWVsZCA9IHF1aWNrZmllbGQodHlwZTondHJ1ZWZhbHNlJykuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGFzc2VydC5lcXVhbCBmaWVsZC5lbC5wYXJlbnQsIHNhbmRib3hcblxuXHRcdHRlc3QgXCJ0b2dnbGUgZmllbGRcIiwgKCktPlxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHR5cGU6J3RvZ2dsZScpLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRhc3NlcnQuZXF1YWwgZmllbGQuZWwucGFyZW50LCBzYW5kYm94XG5cblx0XHRzdWl0ZSBcIm1pc2NcIiwgKCktPlxuXHRcdFx0dGVzdCBcIndpdGggbXVsdGlwbGUgb3B0aW9ucyBvYmplY3RcIiwgKCktPlxuXHRcdFx0XHRjb25maWcgPSB0eXBlOid0ZXh0JywgbGFiZWw6J2FiYycsIHZhbHVlOicxMjMnXG5cdFx0XHRcdGZpZWxkMSA9IHF1aWNrZmllbGQoY29uZmlnKVxuXHRcdFx0XHRmaWVsZDIgPSBxdWlja2ZpZWxkKGNvbmZpZywge2xhYmVsOidkZWYnfSwge2hlaWdodDo1MCwgdmFsdWU6JzQ1Nid9KVxuXG5cdFx0XHRcdGV4cGVjdChjb25maWcpLnRvLmVxbCB0eXBlOid0ZXh0JywgbGFiZWw6J2FiYycsIHZhbHVlOicxMjMnXG5cdFx0XHRcdGV4cGVjdChmaWVsZDEuc2V0dGluZ3MubGFiZWwpLnRvLmVxdWFsICdhYmMnXG5cdFx0XHRcdGV4cGVjdChmaWVsZDIuc2V0dGluZ3MubGFiZWwpLnRvLmVxdWFsICdkZWYnXG5cdFx0XHRcdGV4cGVjdChmaWVsZDEuc2V0dGluZ3MuaGVpZ2h0KS50by5lcXVhbCA0NlxuXHRcdFx0XHRleHBlY3QoZmllbGQyLnNldHRpbmdzLmhlaWdodCkudG8uZXF1YWwgNTBcblx0XHRcdFx0ZXhwZWN0KGZpZWxkMS52YWx1ZSkudG8uZXF1YWwgJzEyMydcblx0XHRcdFx0ZXhwZWN0KGZpZWxkMi52YWx1ZSkudG8uZXF1YWwgJzQ1NidcblxuXG5cdHN1aXRlIFwidGV4dCBmaWVsZFwiLCAoKS0+XG5cdFx0c3VpdGVTZXR1cCAoKS0+XG5cdFx0XHRoZWxwZXJzLmFkZFRpdGxlKFwidGV4dCBmaWVsZFwiKVxuXHRcdFx0QGNvbnRyb2wgPSBxdWlja2ZpZWxkKHt0eXBlOid0ZXh0JywgbGFiZWw6J1JlZ3VsYXInfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHR0ZWFyZG93biAoKS0+XG5cdFx0XHRAY29udHJvbC52YWx1ZSA9ICcnXG5cblx0XHR0ZXN0IFwiZ2V0dGVyL3NldHRlclwiLCAoKS0+XG5cdFx0XHRnZXR0ZXIgPSAodmFsdWUpLT4gXCJleGFtcGxlLmNvbS8je3ZhbHVlfVwiXG5cdFx0XHRzZXR0ZXIgPSAodmFsdWUpLT4gdmFsdWUudG9Mb3dlckNhc2UoKVxuXHRcdFx0ZmllbGRBID0gcXVpY2tmaWVsZCh7dHlwZTondGV4dCcsIGxhYmVsOidwYXRoJywgZ2V0dGVyfSlcblx0XHRcdGZpZWxkQiA9IHF1aWNrZmllbGQoe3R5cGU6J3RleHQnLCBsYWJlbDoncGF0aCcsIHNldHRlcn0pXG5cdFx0XHRmaWVsZEMgPSBxdWlja2ZpZWxkKHt0eXBlOid0ZXh0JywgbGFiZWw6J3BhdGgnLCBnZXR0ZXIsIHNldHRlcn0pXG5cblx0XHRcdGV4cGVjdChmaWVsZEEudmFsdWUpLnRvLmVxdWFsICdleGFtcGxlLmNvbS8nXG5cdFx0XHRleHBlY3QoZmllbGRBLmVsLmNoaWxkLmlucHV0LnJhdy52YWx1ZSkudG8uZXF1YWwgJydcblx0XHRcdGV4cGVjdChmaWVsZEIudmFsdWUpLnRvLmVxdWFsICcnXG5cdFx0XHRleHBlY3QoZmllbGRCLmVsLmNoaWxkLmlucHV0LnJhdy52YWx1ZSkudG8uZXF1YWwgJydcblx0XHRcdGV4cGVjdChmaWVsZEMudmFsdWUpLnRvLmVxdWFsICdleGFtcGxlLmNvbS8nXG5cdFx0XHRleHBlY3QoZmllbGRDLmVsLmNoaWxkLmlucHV0LnJhdy52YWx1ZSkudG8uZXF1YWwgJydcblxuXHRcdFx0aGVscGVycy5zaW11bGF0ZUtleXMoZmllbGRBLmVsLmNoaWxkLmlucHV0LnJhdywgJ0FiQycpXG5cdFx0XHRoZWxwZXJzLnNpbXVsYXRlS2V5cyhmaWVsZEIuZWwuY2hpbGQuaW5wdXQucmF3LCAnQWJDJylcblx0XHRcdGhlbHBlcnMuc2ltdWxhdGVLZXlzKGZpZWxkQy5lbC5jaGlsZC5pbnB1dC5yYXcsICdBYkMnKVxuXHRcdFx0ZXhwZWN0KGZpZWxkQS52YWx1ZSkudG8uZXF1YWwgJ2V4YW1wbGUuY29tL0FiQydcblx0XHRcdGV4cGVjdChmaWVsZEEuZWwuY2hpbGQuaW5wdXQucmF3LnZhbHVlKS50by5lcXVhbCAnQWJDJ1xuXHRcdFx0ZXhwZWN0KGZpZWxkQi52YWx1ZSkudG8uZXF1YWwgJ2FiYydcblx0XHRcdGV4cGVjdChmaWVsZEIuZWwuY2hpbGQuaW5wdXQucmF3LnZhbHVlKS50by5lcXVhbCAnYWJjJ1xuXHRcdFx0ZXhwZWN0KGZpZWxkQy52YWx1ZSkudG8uZXF1YWwgJ2V4YW1wbGUuY29tL2FiYydcblx0XHRcdGV4cGVjdChmaWVsZEMuZWwuY2hpbGQuaW5wdXQucmF3LnZhbHVlKS50by5lcXVhbCAnYWJjJ1xuXG5cdFx0XHRmaWVsZEEudmFsdWUgPSAnRGVGJ1xuXHRcdFx0ZmllbGRCLnZhbHVlID0gJ0RlRidcblx0XHRcdGZpZWxkQy52YWx1ZSA9ICdEZUYnXG5cdFx0XHRleHBlY3QoZmllbGRBLnZhbHVlKS50by5lcXVhbCAnZXhhbXBsZS5jb20vRGVGJ1xuXHRcdFx0ZXhwZWN0KGZpZWxkQS5lbC5jaGlsZC5pbnB1dC5yYXcudmFsdWUpLnRvLmVxdWFsICdEZUYnXG5cdFx0XHRleHBlY3QoZmllbGRCLnZhbHVlKS50by5lcXVhbCAnZGVmJ1xuXHRcdFx0ZXhwZWN0KGZpZWxkQi5lbC5jaGlsZC5pbnB1dC5yYXcudmFsdWUpLnRvLmVxdWFsICdkZWYnXG5cdFx0XHRleHBlY3QoZmllbGRDLnZhbHVlKS50by5lcXVhbCAnZXhhbXBsZS5jb20vZGVmJ1xuXHRcdFx0ZXhwZWN0KGZpZWxkQy5lbC5jaGlsZC5pbnB1dC5yYXcudmFsdWUpLnRvLmVxdWFsICdkZWYnXG5cblxuXHRcdHRlc3QgXCJ3aXRoIGhlbHAgbWVzc2FnZVwiLCAoKS0+XG5cdFx0XHRmaWVsZCA9IHF1aWNrZmllbGQoe3R5cGU6J3RleHQnLCBsYWJlbDonV2l0aCBIZWxwIE1lc3NhZ2UnLCBoZWxwOidoZWxwIDxiPm1lc3NhZ2U8L2I+IGhlcmUnfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGV4cGVjdChmaWVsZC5lbC50ZXh0KS50by5pbmNsdWRlICdoZWxwIG1lc3NhZ2UgaGVyZSdcblx0XHRcdGV4cGVjdChmaWVsZC5lbHMuaGVscC5odG1sKS50by5lcXVhbCAnaGVscCA8Yj5tZXNzYWdlPC9iPiBoZXJlJ1xuXHRcdFx0ZXhwZWN0KEBjb250cm9sLmVscy5oZWxwLmh0bWwpLnRvLmVxdWFsICcnXG5cdFx0XHRcblx0XHRcdGV4cGVjdChAY29udHJvbC5lbC5yYXcpLnRvLmhhdmUuc3R5bGUgJ21hcmdpbkJvdHRvbScsICcwcHgnXG5cdFx0XHRleHBlY3QoZmllbGQuZWwucmF3KS50by5oYXZlLnN0eWxlICdtYXJnaW5Cb3R0b20nLCAnMjVweCdcblx0XHRcdFxuXHRcdFx0ZmllbGQuc3RhdGUuaGVscCA9ICcnXG5cdFx0XHRleHBlY3QoZmllbGQuZWwucmF3KS50by5oYXZlLnN0eWxlICdtYXJnaW5Cb3R0b20nLCAnMHB4J1xuXHRcdFx0ZXhwZWN0KGZpZWxkLmVscy5oZWxwLmh0bWwpLnRvLmVxdWFsICcnXG5cdFx0XHRcblx0XHRcdGZpZWxkLnN0YXRlLmVycm9yID0gJ2FiYzEyMydcblx0XHRcdGV4cGVjdChmaWVsZC5lbC5yYXcpLnRvLmhhdmUuc3R5bGUgJ21hcmdpbkJvdHRvbScsICcwcHgnXG5cdFx0XHRleHBlY3QoZmllbGQuZWxzLmhlbHAuaHRtbCkudG8uZXF1YWwgJydcblxuXHRcdFx0ZmllbGQuc3RhdGUuc2hvd0Vycm9yID0gdHJ1ZVxuXHRcdFx0ZXhwZWN0KGZpZWxkLmVsLnJhdykudG8uaGF2ZS5zdHlsZSAnbWFyZ2luQm90dG9tJywgJzI1cHgnXG5cdFx0XHRleHBlY3QoZmllbGQuZWxzLmhlbHAuaHRtbCkudG8uZXF1YWwgJ2FiYzEyMydcblxuXHRcdFx0ZmllbGQuc3RhdGUuaGVscCA9ICdkZWY0NTYnXG5cdFx0XHRleHBlY3QoZmllbGQuZWwucmF3KS50by5oYXZlLnN0eWxlICdtYXJnaW5Cb3R0b20nLCAnMjVweCdcblx0XHRcdGV4cGVjdChmaWVsZC5lbHMuaGVscC5odG1sKS50by5lcXVhbCAnZGVmNDU2J1xuXHRcdFx0XG5cdFx0XHRmaWVsZC5zdGF0ZS5oZWxwID0gJydcblx0XHRcdGZpZWxkLnN0YXRlLnNob3dFcnJvciA9IGZhbHNlXG5cdFx0XHRleHBlY3QoZmllbGQuZWwucmF3KS50by5oYXZlLnN0eWxlICdtYXJnaW5Cb3R0b20nLCAnMjVweCdcblx0XHRcdGV4cGVjdChmaWVsZC5lbHMuaGVscC5odG1sKS50by5lcXVhbCAnaGVscCA8Yj5tZXNzYWdlPC9iPiBoZXJlJ1xuXG5cblx0XHR0ZXN0IFwid2l0aG91dCBsYWJlbFwiLCAoKS0+XG5cdFx0XHR3aXRoTGFiZWwgPSBxdWlja2ZpZWxkKHt0eXBlOid0ZXh0JywgbGFiZWw6J1dpdGggTGFiZWwnfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdHdpdGhvdXRMYWJlbCA9IHF1aWNrZmllbGQoe3R5cGU6J3RleHQnLCBwbGFjZWhvbGRlcjonV2l0aG91dCBMYWJlbCd9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0RE9NLmJhdGNoKFtcblx0XHRcdFx0d2l0aExhYmVsLmVscy5sYWJlbFxuXHRcdFx0XHR3aXRoTGFiZWwuZWxzLmlubmVyd3JhcFxuXHRcdFx0XHR3aXRoTGFiZWwuZWxzLmlucHV0XG5cdFx0XHRcdHdpdGhvdXRMYWJlbC5lbHMubGFiZWxcblx0XHRcdFx0d2l0aG91dExhYmVsLmVscy5pbm5lcndyYXBcblx0XHRcdFx0d2l0aG91dExhYmVsLmVscy5pbnB1dFxuXHRcdFx0XSkuc3R5bGUgJ3RyYW5zaXRpb24nLCBudWxsXG5cblx0XHRcdGFzc2VydC5lcXVhbCB3aXRoTGFiZWwuZWwuY2hpbGQucGxhY2Vob2xkZXIuaHRtbCwgJ1dpdGggTGFiZWwnXG5cdFx0XHRhc3NlcnQuZXF1YWwgd2l0aExhYmVsLmVsLmNoaWxkLmxhYmVsLmh0bWwsICdXaXRoIExhYmVsJ1xuXHRcdFx0YXNzZXJ0LmVxdWFsIHdpdGhMYWJlbC5lbC5jaGlsZC5sYWJlbC5zdHlsZSgnb3BhY2l0eScpLCAnMCdcblx0XHRcdFxuXHRcdFx0YXNzZXJ0LmVxdWFsIHdpdGhvdXRMYWJlbC5lbC5jaGlsZC5wbGFjZWhvbGRlci5odG1sLCAnV2l0aG91dCBMYWJlbCdcblx0XHRcdGFzc2VydC5ub3RFcXVhbCB3aXRob3V0TGFiZWwuZWwuY2hpbGQubGFiZWwuaHRtbCwgJ1dpdGhvdXQgTGFiZWwnXG5cdFx0XHRhc3NlcnQuZXF1YWwgd2l0aG91dExhYmVsLmVsLmNoaWxkLmxhYmVsLnN0eWxlKCdvcGFjaXR5JyksICcwJ1xuXG5cdFx0XHRpbml0aWFsVG9wID1cblx0XHRcdFx0d2l0aExhYmVsOiB3aXRoTGFiZWwuZWwuY2hpbGQuaW5wdXQucmVjdC50b3Bcblx0XHRcdFx0d2l0aG91dExhYmVsOiB3aXRob3V0TGFiZWwuZWwuY2hpbGQuaW5wdXQucmVjdC50b3Bcblx0XHRcdFxuXHRcdFx0d2l0aExhYmVsLnZhbHVlID0gJ2FiYzEyMydcblx0XHRcdHdpdGhvdXRMYWJlbC52YWx1ZSA9ICdhYmMxMjMnXG5cblx0XHRcdGFzc2VydC5ub3RFcXVhbCB3aXRoTGFiZWwuZWwuY2hpbGQuaW5wdXQucmVjdC50b3AsIGluaXRpYWxUb3Aud2l0aExhYmVsXG5cdFx0XHRhc3NlcnQuZXF1YWwgd2l0aG91dExhYmVsLmVsLmNoaWxkLmlucHV0LnJlY3QudG9wLCBpbml0aWFsVG9wLndpdGhvdXRMYWJlbFxuXHRcdFx0YXNzZXJ0LmVxdWFsIHdpdGhMYWJlbC5lbC5jaGlsZC5sYWJlbC5zdHlsZSgnb3BhY2l0eScpLCAnMSdcblx0XHRcdGFzc2VydC5lcXVhbCB3aXRob3V0TGFiZWwuZWwuY2hpbGQubGFiZWwuc3R5bGUoJ29wYWNpdHknKSwgJzAnXG5cblxuXHRcdHRlc3QgXCJ3aXRoIGljb25cIiwgKCktPlxuXHRcdFx0aWNvbkZpZWxkID0gcXVpY2tmaWVsZCh7dHlwZTondGV4dCcsIGxhYmVsOidXaXRoIEljb24nLCBpY29uOidCJ30pLmFwcGVuZFRvKHNhbmRib3gpXG5cblxuXHRcdHRlc3QgXCJjdXN0b20gaGVpZ2h0L2ZvbnRzaXplXCIsICgpLT5cblx0XHRcdGZpZWxkQSA9IHF1aWNrZmllbGQoe3R5cGU6J3RleHQnLCBsYWJlbDonQ3VzdG9tIEhlaWdodCcsIGhlaWdodDo0MCwgZm9udFNpemU6MTMsIGF1dG9XaWR0aDp0cnVlfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGZpZWxkQiA9IHF1aWNrZmllbGQoe3R5cGU6J3RleHQnLCBsYWJlbDonQ3VzdG9tIEhlaWdodCcsIGhlaWdodDo2MCwgZm9udFNpemU6MTYsIGF1dG9XaWR0aDp0cnVlfSkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdFx0YXNzZXJ0LmlzQXRMZWFzdCBAY29udHJvbC5lbC5oZWlnaHQsIEBjb250cm9sLnNldHRpbmdzLmhlaWdodFxuXHRcdFx0YXNzZXJ0LmlzQXRNb3N0IEBjb250cm9sLmVsLmhlaWdodCwgQGNvbnRyb2wuc2V0dGluZ3MuaGVpZ2h0KzVcblx0XHRcdFxuXHRcdFx0YXNzZXJ0LmlzQXRMZWFzdCBmaWVsZEEuZWwuaGVpZ2h0LCA0MFxuXHRcdFx0YXNzZXJ0LmlzQXRNb3N0IGZpZWxkQS5lbC5oZWlnaHQsIDQ1XG5cdFx0XHRcblx0XHRcdGFzc2VydC5pc0F0TGVhc3QgZmllbGRCLmVsLmhlaWdodCwgNjBcblx0XHRcdGFzc2VydC5pc0F0TW9zdCBmaWVsZEIuZWwuaGVpZ2h0LCA2NVxuXG5cblx0XHR0ZXN0IFwiY3VzdG9tIGJvcmRlclwiLCAoKS0+XG5cdFx0XHRjdXN0b20gPSBxdWlja2ZpZWxkKHt0eXBlOid0ZXh0JywgbGFiZWw6J0N1c3RvbSBCb3JkZXInLCBib3JkZXI6JzAgMCAycHggMCd9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0XG5cdFx0XHRhc3NlcnQuZGVlcEVxdWFsIGhlbHBlcnMuZ2V0Qm9yZGVyU2lkZXMoQGNvbnRyb2wuZWwuY2hpbGQuaW5uZXJ3cmFwKSwge3RvcDonMXB4JywgbGVmdDonMXB4JywgcmlnaHQ6JzFweCcsIGJvdHRvbTonMXB4J31cblx0XHRcdGFzc2VydC5kZWVwRXF1YWwgaGVscGVycy5nZXRCb3JkZXJTaWRlcyhjdXN0b20uZWwuY2hpbGQuaW5uZXJ3cmFwKSwge3RvcDonMHB4JywgbGVmdDonMHB4JywgcmlnaHQ6JzBweCcsIGJvdHRvbTonMnB4J31cblxuXG5cdFx0dGVzdCBcImRlZmF1bHQgdmFsdWVcIiwgKCktPlxuXHRcdFx0ZmllbGRBID0gcXVpY2tmaWVsZCh7dHlwZTondGV4dCd9KVxuXHRcdFx0ZmllbGRCID0gcXVpY2tmaWVsZCh7dHlwZTondGV4dCcsIGRlZmF1bHRWYWx1ZTondmFsdWVCJ30pXG5cdFx0XHRmaWVsZEMgPSBxdWlja2ZpZWxkKHt0eXBlOid0ZXh0JywgdmFsdWU6J3ZhbHVlQyd9KVxuXHRcdFx0YXNzZXJ0LmVxdWFsIGZpZWxkQS52YWx1ZSwgJydcblx0XHRcdGFzc2VydC5lcXVhbCBmaWVsZEEuZWwuY2hpbGQuaW5wdXQucmF3LnZhbHVlLCAnJ1xuXHRcdFx0YXNzZXJ0LmVxdWFsIGZpZWxkQi52YWx1ZSwgJ3ZhbHVlQidcblx0XHRcdGFzc2VydC5lcXVhbCBmaWVsZEIuZWwuY2hpbGQuaW5wdXQucmF3LnZhbHVlLCAndmFsdWVCJ1xuXHRcdFx0YXNzZXJ0LmVxdWFsIGZpZWxkQy52YWx1ZSwgJ3ZhbHVlQydcblx0XHRcdGFzc2VydC5lcXVhbCBmaWVsZEMuZWwuY2hpbGQuaW5wdXQucmF3LnZhbHVlLCAndmFsdWVDJ1xuXG5cblx0XHR0ZXN0IFwiZGlzYWJsZWRcIiwgKCktPlxuXHRcdFx0ZmllbGRBID0gcXVpY2tmaWVsZCh7dHlwZTondGV4dCcsIGxhYmVsOidEaXNhYmxlZCcsIGF1dG9XaWR0aDp0cnVlLCBkaXNhYmxlZDp0cnVlfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGZpZWxkQiA9IHF1aWNrZmllbGQoe3R5cGU6J3RleHQnLCBsYWJlbDonRGlzYWJsZWQgdy8gdmFsdWUnLCBhdXRvV2lkdGg6dHJ1ZSwgZGlzYWJsZWQ6dHJ1ZSwgdmFsdWU6J2FiYzEyMyd9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0d2luZG93LmFzc2VydCA9IGFzc2VydFxuXHRcdFx0ZXhwZWN0KEBjb250cm9sLnZhbHVlKS50by5lcXVhbCAnJ1xuXHRcdFx0ZXhwZWN0KEBjb250cm9sLmVsLmNoaWxkLmlucHV0LnJhdy52YWx1ZSkudG8uZXF1YWwgJydcblx0XHRcdGV4cGVjdChAY29udHJvbC5lbC5jaGlsZC5pbm5lcndyYXAucmF3KS50by5oYXZlLnN0eWxlICdiYWNrZ3JvdW5kQ29sb3InLCAnd2hpdGUnXG5cdFx0XHRleHBlY3QoZmllbGRBLnZhbHVlKS50by5lcXVhbCAnJ1xuXHRcdFx0ZXhwZWN0KGZpZWxkQS5lbC5jaGlsZC5pbnB1dC5yYXcudmFsdWUpLnRvLmVxdWFsICcnXG5cdFx0XHRleHBlY3QoZmllbGRBLmVsLmNoaWxkLmlubmVyd3JhcC5yYXcpLnRvLmhhdmUuc3R5bGUgJ2JhY2tncm91bmRDb2xvcicsIENPTE9SUy5ncmV5X2xpZ2h0XG5cdFx0XHRleHBlY3QoZmllbGRCLnZhbHVlKS50by5lcXVhbCAnYWJjMTIzJ1xuXHRcdFx0ZXhwZWN0KGZpZWxkQi5lbC5jaGlsZC5pbnB1dC5yYXcudmFsdWUpLnRvLmVxdWFsICdhYmMxMjMnXG5cdFx0XHRleHBlY3QoZmllbGRCLmVsLmNoaWxkLmlubmVyd3JhcC5yYXcpLnRvLmhhdmUuc3R5bGUgJ2JhY2tncm91bmRDb2xvcicsIENPTE9SUy5ncmV5X2xpZ2h0XG5cblx0XHRcdCMgZXhwZWN0KEBjb250cm9sLnN0YXRlLmZvY3VzZWQpLnRvLmVxdWFsIGZhbHNlXG5cdFx0XHQjIEBjb250cm9sLmZvY3VzKClcblx0XHRcdCMgZXhwZWN0KEBjb250cm9sLnN0YXRlLmZvY3VzZWQpLnRvLmVxdWFsIHRydWVcblxuXHRcdFx0IyBleHBlY3QoZmllbGRBLnN0YXRlLmZvY3VzZWQpLnRvLmVxdWFsIGZhbHNlXG5cdFx0XHQjIGZpZWxkQS5mb2N1cygpXG5cdFx0XHQjIFByb21pc2UuZGVsYXkoNSkudGhlbiAoKS0+XG5cdFx0XHQjIFx0ZXhwZWN0KGZpZWxkQS5zdGF0ZS5mb2N1c2VkKS50by5lcXVhbCBmYWxzZVxuXG5cblx0XHR0ZXN0IFwiY29uZGl0aW9uc1wiLCAoKS0+XG5cdFx0XHRtYXN0ZXIgPSBxdWlja2ZpZWxkKHt0eXBlOid0ZXh0JywgbGFiZWw6J01hc3RlciBGaWVsZCcsIElEOidtYXN0ZXJGaWVsZCcsIG1hc2s6J2FhYS0xMTEnLCByZXF1aXJlZDp0cnVlLCBhdXRvV2lkdGg6dHJ1ZX0pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRzbGF2ZSA9IHF1aWNrZmllbGQoe3R5cGU6J3RleHQnLCBsYWJlbDonU2xhdmUgRmllbGQnLCBjb25kaXRpb25zOlt0YXJnZXQ6J21hc3RlckZpZWxkJ10sIGF1dG9XaWR0aDp0cnVlfSkuYXBwZW5kVG8oc2FuZGJveClcblxuXG5cdFx0dGVzdCBcImF1dG93aWR0aFwiLCAoKS0+XG5cdFx0XHRmaWVsZCA9IHF1aWNrZmllbGQoe3R5cGU6J3RleHQnLCBsYWJlbDonQXV0b3dpZHRoJywgYXV0b1dpZHRoOnRydWUsIGNoZWNrbWFyazpmYWxzZX0pLmFwcGVuZFRvKHNhbmRib3gpXG5cblxuXHRcdHRlc3QgXCJpbnB1dCBldmVudFwiLCAoKS0+XG5cdFx0XHRjb3VudCA9IDBcblx0XHRcdGZpZWxkID0gQGNvbnRyb2xcblx0XHRcdGlucHV0ID0gZmllbGQuZWxzLmlucHV0LnJhd1xuXHRcdFx0ZmllbGQub24gJ2lucHV0JywgKCktPiBjb3VudCsrXG5cdFx0XHRcblxuXHRcdFx0UHJvbWlzZS5yZXNvbHZlKClcblx0XHRcdFx0LnRoZW4gKCktPiBleHBlY3QoY291bnQpLnRvLmVxdWFsIDBcblx0XHRcdFx0LnRoZW4gKCktPiBlbWl0RXZlbnQgZmllbGQsICdpbnB1dCcsICgpPT4gZmllbGQudmFsdWUgPSAnY2hhbmdlJ1xuXHRcdFx0XHQudGhlbiAoKS0+IGV4cGVjdChjb3VudCkudG8uZXF1YWwgMVxuXHRcdFx0XHQudGhlbiAoKS0+IGVtaXRFdmVudCBmaWVsZCwgJ2lucHV0JywgKCk9PiBmaWVsZC52YWx1ZSA9ICdjaGFuZ2UyJ1xuXHRcdFx0XHQudGhlbiAoKS0+IGV4cGVjdChjb3VudCkudG8uZXF1YWwgMlxuXHRcdFx0XHQudGhlbiAoKS0+IGVtaXRFdmVudCBmaWVsZCwgJ2lucHV0JywgKCk9PiBoZWxwZXJzLnNpbXVsYXRlS2V5cyhpbnB1dCwgJ2EnKVxuXHRcdFx0XHQudGhlbiAoKS0+IGV4cGVjdChjb3VudCkudG8uZXF1YWwgM1xuXHRcdFx0XHQudGhlbiAoKS0+IGVtaXRFdmVudCBmaWVsZCwgJ2lucHV0JywgKCk9PiBoZWxwZXJzLnNpbXVsYXRlS2V5cyhpbnB1dCwgJ2FiYycpXG5cdFx0XHRcdC50aGVuICgpLT4gZXhwZWN0KGNvdW50KS50by5lcXVhbCA2XG5cblxuXHRcdHN1aXRlIFwib3B0aW9ucy9hdXRvY29tcGxldGVcIiwgKCktPlxuXHRcdFx0c3VpdGVTZXR1cCAoKS0+XG5cdFx0XHRcdEBmaWVsZCA9IHF1aWNrZmllbGQoe3R5cGU6J3RleHQnLCBsYWJlbDonTXkgb3B0aW9ucyBmaWVsZCcsIGNob2ljZXM6WydhcHBsZScsICdiYW5hbmEnLCAnb3JhbmdlJywgJ2JhbmFuYSByZXB1YmxpYycsIHtsYWJlbDonb3JhbmdlIHNwbGl0JywgdmFsdWU6J3NwbGl0J31dfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdFx0QGNob2ljZXMgPSBAZmllbGQuZHJvcGRvd24uY2hvaWNlc1xuXHRcdFx0XHRAZHJvcGRvd25FbCA9IEBmaWVsZC5kcm9wZG93bi5lbHMuY29udGFpbmVyLnJhd1xuXHRcdFx0XHRAaW5wdXRFbCA9IEBmaWVsZC5lbC5jaGlsZC5pbnB1dC5yYXdcblx0XHRcdFxuXHRcdFx0dGVhcmRvd24gKCktPlxuXHRcdFx0XHRAZmllbGQuYmx1cigpXG5cdFx0XHRcdEBmaWVsZC52YWx1ZSA9ICcnXG5cblx0XHRcdHRlc3QgXCJ0cmlnZ2VyaW5nXCIsICgpLT5cblx0XHRcdFx0UHJvbWlzZS5iaW5kKEApXG5cdFx0XHRcdFx0LnRoZW4gKCktPlxuXHRcdFx0XHRcdFx0ZXhwZWN0KEBkcm9wZG93bkVsKS5ub3QudG8uYmUuZGlzcGxheWVkXG5cdFx0XHRcdFx0XHRwcm9taXNlID0gcHJvbWlzZUV2ZW50KEBmaWVsZC5lbC5jaGlsZC5pbnB1dCwgJ2ZvY3VzJylcblx0XHRcdFx0XHRcdEBmaWVsZC5mb2N1cygpXG5cdFx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZVxuXG5cdFx0XHRcdFx0LnRoZW4gKCktPlxuXHRcdFx0XHRcdFx0ZXhwZWN0KEBkcm9wZG93bkVsKS5ub3QudG8uYmUuZGlzcGxheWVkXG5cdFx0XHRcdFx0XHRoZWxwZXJzLnNpbXVsYXRlS2V5cyhAaW5wdXRFbCwgJ2EnKVxuXHRcdFx0XHRcdFx0ZXhwZWN0KEBkcm9wZG93bkVsKS50by5iZS5kaXNwbGF5ZWRcblx0XHRcdFx0XHRcdHByb21pc2UgPSBwcm9taXNlRXZlbnQoQGZpZWxkLmVsLmNoaWxkLmlucHV0LCAnYmx1cicpXG5cdFx0XHRcdFx0XHRAZmllbGQuYmx1cigpXG5cdFx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZVxuXG5cdFx0XHRcdFx0LnRoZW4gKCktPlxuXHRcdFx0XHRcdFx0ZXhwZWN0KEBkcm9wZG93bkVsKS5ub3QudG8uYmUuZGlzcGxheWVkXG5cdFx0XHRcdFx0XHRAZmllbGQuZm9jdXMoKVxuXHRcdFx0XHRcdFx0aGVscGVycy5zaW11bGF0ZUFjdGlvbihAaW5wdXRFbCwgJ2Rvd24nKVxuXHRcdFx0XHRcdFx0ZXhwZWN0KEBkcm9wZG93bkVsKS5ub3QudG8uYmUuZGlzcGxheWVkXG5cblx0XHRcdFx0XHQudGhlbiAoKS0+XG5cdFx0XHRcdFx0XHRoZWxwZXJzLnNpbXVsYXRlS2V5cyhAaW5wdXRFbCwgJ2EnKVxuXHRcdFx0XHRcdFx0ZXhwZWN0KEBkcm9wZG93bkVsKS50by5iZS5kaXNwbGF5ZWRcblxuXHRcdFx0XHRcdC50aGVuICgpLT5cblx0XHRcdFx0XHRcdHByb21pc2UgPSBwcm9taXNlRXZlbnQoQGZpZWxkLmVsLmNoaWxkLmlucHV0LCAnYmx1cicpXG5cdFx0XHRcdFx0XHRAZmllbGQuYmx1cigpXG5cdFx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZVxuXG5cdFx0XHRcdFx0LnRoZW4gKCktPlxuXHRcdFx0XHRcdFx0QGZpZWxkLmRyb3Bkb3duLmlzT3BlbiA9IHRydWVcblx0XHRcdFx0XHRcdGV4cGVjdChAZHJvcGRvd25FbCkudG8uYmUuZGlzcGxheWVkXG5cdFx0XHRcdFx0XHRAZmllbGQuZHJvcGRvd24uaXNPcGVuID0gZmFsc2Vcblx0XHRcdFx0XHRcdGV4cGVjdChAZHJvcGRvd25FbCkubm90LnRvLmJlLmRpc3BsYXllZFxuXG5cblx0XHRcdHRlc3QgXCJoaWdobGlnaHRpbmdcIiwgKCktPlxuXHRcdFx0XHRAZmllbGQuZm9jdXMoKVxuXHRcdFx0XHRcblx0XHRcdFx0aGVscGVycy5zaW11bGF0ZUtleXMoQGlucHV0RWwsICdhJylcblx0XHRcdFx0ZXhwZWN0KEBmaWVsZC5kcm9wZG93bi5jdXJyZW50SGlnaGxpZ2h0ZWQpLnRvLmVxdWFsIG51bGxcblx0XHRcdFx0XG5cdFx0XHRcdGhlbHBlcnMuc2ltdWxhdGVBY3Rpb24oQGlucHV0RWwsICdkb3duJylcblx0XHRcdFx0ZXhwZWN0KEBmaWVsZC5kcm9wZG93bi5jdXJyZW50SGlnaGxpZ2h0ZWQpLnRvLmVxdWFsIEBjaG9pY2VzWzBdXG5cdFx0XHRcdFxuXHRcdFx0XHRoZWxwZXJzLnNpbXVsYXRlQWN0aW9uKEBpbnB1dEVsLCAnZG93bicpXG5cdFx0XHRcdGhlbHBlcnMuc2ltdWxhdGVBY3Rpb24oQGlucHV0RWwsICdkb3duJylcblx0XHRcdFx0ZXhwZWN0KEBmaWVsZC5kcm9wZG93bi5jdXJyZW50SGlnaGxpZ2h0ZWQpLnRvLmVxdWFsIEBjaG9pY2VzWzJdXG5cdFx0XHRcdFxuXHRcdFx0XHRoZWxwZXJzLnNpbXVsYXRlQWN0aW9uKEBpbnB1dEVsLCAnZG93bicpXG5cdFx0XHRcdGhlbHBlcnMuc2ltdWxhdGVBY3Rpb24oQGlucHV0RWwsICdkb3duJylcblx0XHRcdFx0ZXhwZWN0KEBmaWVsZC5kcm9wZG93bi5jdXJyZW50SGlnaGxpZ2h0ZWQpLnRvLmVxdWFsIEBjaG9pY2VzWzRdXG5cdFx0XHRcdFxuXHRcdFx0XHRoZWxwZXJzLnNpbXVsYXRlQWN0aW9uKEBpbnB1dEVsLCAnZG93bicpXG5cdFx0XHRcdGV4cGVjdChAZmllbGQuZHJvcGRvd24uY3VycmVudEhpZ2hsaWdodGVkKS50by5lcXVhbCBAY2hvaWNlc1swXVxuXHRcdFx0XHRcblx0XHRcdFx0aGVscGVycy5zaW11bGF0ZUFjdGlvbihAaW5wdXRFbCwgJ3VwJylcblx0XHRcdFx0ZXhwZWN0KEBmaWVsZC5kcm9wZG93bi5jdXJyZW50SGlnaGxpZ2h0ZWQpLnRvLmVxdWFsIEBjaG9pY2VzWzRdXG5cdFx0XHRcdFxuXHRcdFx0XHRoZWxwZXJzLnNpbXVsYXRlQWN0aW9uKEBpbnB1dEVsLCAndXAnKVxuXHRcdFx0XHRleHBlY3QoQGZpZWxkLmRyb3Bkb3duLmN1cnJlbnRIaWdobGlnaHRlZCkudG8uZXF1YWwgQGNob2ljZXNbM11cblxuXHRcdFx0XHRAZmllbGQuYmx1cigpXG5cdFx0XHRcdGV4cGVjdChAZmllbGQuZHJvcGRvd24uY3VycmVudEhpZ2hsaWdodGVkKS50by5lcXVhbCBudWxsXG5cblxuXHRcdFx0dGVzdCBcImZpbHRlcmluZ1wiLCAoKS0+XG5cdFx0XHRcdGdldFZpc2libGUgPSAoKT0+IEBjaG9pY2VzLmZpbHRlcigoY2hvaWNlKS0+IGNob2ljZS52aXNpYmxlKS5tYXAoKGNob2ljZSktPiBjaG9pY2UudmFsdWUpXG5cdFx0XHRcdEBmaWVsZC5mb2N1cygpXG5cblx0XHRcdFx0ZXhwZWN0KGdldFZpc2libGUoKSkudG8uZXFsIFsnYXBwbGUnLCAnYmFuYW5hJywgJ29yYW5nZScsICdiYW5hbmEgcmVwdWJsaWMnLCAnc3BsaXQnXVxuXHRcdFx0XHRcblx0XHRcdFx0aGVscGVycy5zaW11bGF0ZUtleXMoQGlucHV0RWwsICdiYW4nKVxuXHRcdFx0XHRleHBlY3QoZ2V0VmlzaWJsZSgpKS50by5lcWwgWydiYW5hbmEnLCAnYmFuYW5hIHJlcHVibGljJ11cblx0XHRcdFx0XG5cdFx0XHRcdGhlbHBlcnMuc2ltdWxhdGVLZXlzKEBpbnB1dEVsLCAnYW5hJylcblx0XHRcdFx0ZXhwZWN0KGdldFZpc2libGUoKSkudG8uZXFsIFsnYmFuYW5hJywgJ2JhbmFuYSByZXB1YmxpYyddXG5cdFx0XHRcdFxuXHRcdFx0XHRoZWxwZXJzLnNpbXVsYXRlS2V5cyhAaW5wdXRFbCwgJyAnKVxuXHRcdFx0XHRleHBlY3QoZ2V0VmlzaWJsZSgpKS50by5lcWwgWydiYW5hbmEgcmVwdWJsaWMnXVxuXHRcdFx0XHRcblx0XHRcdFx0QGZpZWxkLnZhbHVlID0gJ29yYSdcblx0XHRcdFx0ZXhwZWN0KGdldFZpc2libGUoKSkudG8uZXFsIFsnb3JhbmdlJywgJ3NwbGl0J11cblxuXG5cdFx0XHR0ZXN0IFwic2VsZWN0aW5nXCIsICgpLT5cblx0XHRcdFx0QGZpZWxkLmZvY3VzKClcblxuXHRcdFx0XHRleHBlY3QoQGZpZWxkLnZhbHVlKS50by5lcXVhbCAnJ1xuXHRcdFx0XHRcblx0XHRcdFx0QGNob2ljZXNbMV0uZWwuZW1pdCAnY2xpY2snXG5cdFx0XHRcdGV4cGVjdChAZmllbGQudmFsdWUpLnRvLmVxdWFsICdiYW5hbmEnXG5cdFx0XHRcdGV4cGVjdChAaW5wdXRFbC52YWx1ZSkudG8uZXF1YWwgJ2JhbmFuYSdcblx0XHRcdFx0XG5cdFx0XHRcdEBmaWVsZC5mb2N1cygpOyBAZmllbGQuc3RhdGUudHlwaW5nID0gdHJ1ZVxuXHRcdFx0XHRAZmllbGQudmFsdWUgPSAnb3JhJ1xuXHRcdFx0XHRoZWxwZXJzLnNpbXVsYXRlQWN0aW9uKEBpbnB1dEVsLCAnZG93bicpXG5cdFx0XHRcdGhlbHBlcnMuc2ltdWxhdGVBY3Rpb24oQGlucHV0RWwsICdkb3duJylcblx0XHRcdFx0ZXhwZWN0KEBmaWVsZC5kcm9wZG93bi5jdXJyZW50SGlnaGxpZ2h0ZWQpLnRvLmVxdWFsIEBjaG9pY2VzWzRdXG5cdFx0XHRcdGV4cGVjdChAZmllbGQudmFsdWUpLnRvLmVxdWFsICdvcmEnXG5cdFx0XHRcdGV4cGVjdChAaW5wdXRFbC52YWx1ZSkudG8uZXF1YWwgJ29yYSdcblx0XHRcdFx0XG5cdFx0XHRcdGhlbHBlcnMuc2ltdWxhdGVBY3Rpb24oQGlucHV0RWwsICdlbnRlcicpXG5cdFx0XHRcdGV4cGVjdChAZmllbGQudmFsdWUpLnRvLmVxdWFsICdzcGxpdCdcblx0XHRcdFx0ZXhwZWN0KEBpbnB1dEVsLnZhbHVlKS50by5lcXVhbCAnb3JhbmdlIHNwbGl0J1xuXHRcdFx0XHRcblx0XHRcdFx0QGZpZWxkLnZhbHVlID0gJ29yYW5nZSdcblx0XHRcdFx0ZXhwZWN0KEBmaWVsZC52YWx1ZSkudG8uZXF1YWwgJ29yYW5nZSdcblx0XHRcdFx0ZXhwZWN0KEBpbnB1dEVsLnZhbHVlKS50by5lcXVhbCAnb3JhbmdlJ1xuXHRcdFx0XHRcblx0XHRcdFx0QGZpZWxkLnZhbHVlID0gJ29yYW5nZSBzcGxpdCdcblx0XHRcdFx0ZXhwZWN0KEBmaWVsZC52YWx1ZSkudG8uZXF1YWwgJ3NwbGl0J1xuXHRcdFx0XHRleHBlY3QoQGlucHV0RWwudmFsdWUpLnRvLmVxdWFsICdvcmFuZ2Ugc3BsaXQnXG5cblxuXG5cdFx0c3VpdGUgXCJrZXlib2FyZC9jdXN0b20tdHlwZVwiLCAoKS0+XG5cdFx0XHR0ZXN0IFwicGFzc3dvcmRcIiwgKCktPlxuXHRcdFx0XHRmaWVsZCA9IHF1aWNrZmllbGQoe3R5cGU6J3RleHQnLCBsYWJlbDonUGFzc3dvcmQnLCBrZXlib2FyZDoncGFzc3dvcmQnfSkuYXBwZW5kVG8oc2FuZGJveClcblxuXG5cdFx0XHR0ZXN0IFwiZW1haWxcIiwgKCktPlxuXHRcdFx0XHRmaWVsZCA9IHF1aWNrZmllbGQoe3R5cGU6J3RleHQnLCBsYWJlbDonRW1haWwnLCBJRDonZW1haWwnLCBrZXlib2FyZDonZW1haWwnLCByZXF1aXJlZDp0cnVlfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOid0ZXh0JywgbGFiZWw6J0VtYWlsJywga2V5Ym9hcmQ6J2VtYWlsJywgbWFzazp7Z3VpZGU6ZmFsc2V9LCByZXF1aXJlZDp0cnVlfSkuYXBwZW5kVG8oc2FuZGJveClcblxuXG5cdFx0XHR0ZXN0IFwibnVtYmVyIChzaW1sdWF0ZWQpXCIsICgpLT5cblx0XHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOid0ZXh0JywgbGFiZWw6J051bWJlciAoc2ltbHVhdGVkKScsIGtleWJvYXJkOidudW1iZXInLCB2YWxpZFdoZW5SZWdleDovW14wXS8sIGF1dG9XaWR0aDp0cnVlfSkuYXBwZW5kVG8oc2FuZGJveClcblxuXG5cdFx0c3VpdGUgXCJtYXNrXCIsICgpLT5cblx0XHRcdHN1aXRlU2V0dXAgKCktPiBoZWxwZXJzLmFkZFRpdGxlKCdtYXNrJylcblx0XHRcdFxuXHRcdFx0dGVzdCBcImFscGhhXCIsICgpLT5cblx0XHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOid0ZXh0JywgbGFiZWw6J05hbWUnLCBtYXNrOidOQU1FJywgd2lkdGg6JzUwJSd9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0XHRmaWVsZCA9IHF1aWNrZmllbGQoe3R5cGU6J3RleHQnLCBsYWJlbDonRnVsbCBOYW1lJywgbWFzazonRlVMTE5BTUUnLCB3aWR0aDonNTAlJ30pLmFwcGVuZFRvKHNhbmRib3gpXG5cblx0XHRcdHRlc3QgXCJudW1lcmljXCIsICgpLT5cblx0XHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOid0ZXh0JywgbGFiZWw6J1Bob25lJywgZGlzdGFuY2U6MTAsIHdpZHRoOic1MCUnLCBtb2JpbGVXaWR0aDonMTAwJScsIG1hc2s6JygxMTEpIDExMS0xMTExJ30pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh7dHlwZTondGV4dCcsIGxhYmVsOidQaG9uZScsIGRpc3RhbmNlOjEwLCB3aWR0aDonNTAlJywgbW9iaWxlV2lkdGg6JzEwMCUnLCBrZXlib2FyZDoncGhvbmUnfSkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdFx0dGVzdCBcImFscGhhbnVtZXJpY1wiLCAoKS0+XG5cdFx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh7dHlwZTondGV4dCcsIGxhYmVsOidMaWNlbmNlIFBsYXRlJywgbWFzazp7cGF0dGVybjonYWFhLTExMScsIHRyYW5zZm9ybToodiktPiB2LnRvVXBwZXJDYXNlKCl9fSkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdFx0dGVzdCBcInByZWZpeFwiLCAoKS0+XG5cdFx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh7dHlwZTondGV4dCcsIGxhYmVsOidEb2xsYXInLCBtYXNrOntwYXR0ZXJuOidOVU1CRVInLCBwcmVmaXg6JyQnLCBkZWNpbWFsOnRydWUsIHNlcDp0cnVlfX0pLmFwcGVuZFRvKHNhbmRib3gpXG5cblx0XHRcdHRlc3QgXCJkYXRlXCIsICgpLT5cblx0XHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOid0ZXh0JywgbGFiZWw6J0RhdGUnLCBrZXlib2FyZDonZGF0ZScsIGF1dG9XaWR0aDp0cnVlfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOid0ZXh0JywgbGFiZWw6J0RhdGUnLCBtYXNrOntwYXR0ZXJuOlsnREFURScsJ21tIC8geXknXX0sIGF1dG9XaWR0aDp0cnVlfSkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdFx0dGVzdCBcImxpdGVyYWxcIiwgKCktPlxuXHRcdFx0XHRmaWVsZCA9IHF1aWNrZmllbGQoe3R5cGU6J3RleHQnLCBsYWJlbDonTGl0ZXJhbCcsIG1hc2s6J015IE5cXFxcYW1lIGlzIGErIEtcXFxcYWxlbid9KS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cdFx0XHR0ZXN0IFwib3B0aW9uYWxzXCIsICgpLT5cblx0XHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOid0ZXh0JywgbGFiZWw6J09wdGlvbmFscycsIG1hc2s6J2FhYVtBQUFdMTExJ30pLmFwcGVuZFRvKHNhbmRib3gpXG5cblx0XHRcdHRlc3QgXCJjdXN0b20gcGF0dGVybnNcIiwgKCktPlxuXHRcdFx0XHRmaWVsZCA9IHF1aWNrZmllbGQoe3R5cGU6J3RleHQnLCBsYWJlbDonT25seSBzcGVjaWZpYyBjaGFycycsIG1hc2s6e3BhdHRlcm46JyYmKy1hYS0xMTEtWyBhYStdJywgY3VzdG9tUGF0dGVybnM6XG5cdFx0XHRcdFx0JyYnOiAvW2FiMTJdL1xuXHRcdFx0XHRcdCdhJzogL1swLTRdL1xuXHRcdFx0XHR9fSkuYXBwZW5kVG8oc2FuZGJveClcblxuXG5cdHN1aXRlIFwibnVtYmVyIGZpZWxkXCIsICgpLT5cblx0XHRzdWl0ZVNldHVwICgpLT5cblx0XHRcdGhlbHBlcnMuYWRkVGl0bGUoJ251bWJlciBmaWVsZCcpXG5cblx0XHR0ZXN0IFwiYmFzaWNcIiwgKCktPlxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOidudW1iZXInLCBsYWJlbDonTnVtYmVyJywgYXV0b1dpZHRoOmZhbHNlfSkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdHRlc3Quc2tpcCBcImdldHRlci9zZXR0ZXJcIiwgKCktPlxuXHRcdFx0Z2V0dGVyID0gKHZhbHVlKS0+ICh2YWx1ZSBvciAwKSAqIDEwXG5cdFx0XHRzZXR0ZXIgPSAodmFsdWUpLT4gKHZhbHVlIG9yIDApICogMlxuXHRcdFx0ZmllbGRBID0gcXVpY2tmaWVsZCh7dHlwZTonbnVtYmVyJywgbGFiZWw6J051bWJlcicsIGF1dG9XaWR0aDp0cnVlLCBnZXR0ZXJ9KVxuXHRcdFx0ZmllbGRCID0gcXVpY2tmaWVsZCh7dHlwZTonbnVtYmVyJywgbGFiZWw6J051bWJlcicsIGF1dG9XaWR0aDp0cnVlLCBzZXR0ZXJ9KVxuXHRcdFx0ZmllbGRDID0gcXVpY2tmaWVsZCh7dHlwZTonbnVtYmVyJywgbGFiZWw6J051bWJlcicsIGF1dG9XaWR0aDp0cnVlLCBnZXR0ZXIsIHNldHRlcn0pXG5cblx0XHRcdGV4cGVjdChmaWVsZEEudmFsdWUpLnRvLmVxdWFsIDBcblx0XHRcdGV4cGVjdChmaWVsZEEuZWwuY2hpbGQuaW5wdXQucmF3LnZhbHVlKS50by5lcXVhbCAnJ1xuXHRcdFx0ZXhwZWN0KGZpZWxkQi52YWx1ZSkudG8uZXF1YWwgMFxuXHRcdFx0ZXhwZWN0KGZpZWxkQi5lbC5jaGlsZC5pbnB1dC5yYXcudmFsdWUpLnRvLmVxdWFsICcnXG5cdFx0XHRleHBlY3QoZmllbGRDLnZhbHVlKS50by5lcXVhbCAwXG5cdFx0XHRleHBlY3QoZmllbGRDLmVsLmNoaWxkLmlucHV0LnJhdy52YWx1ZSkudG8uZXF1YWwgJydcblxuXHRcdFx0aGVscGVycy5zaW11bGF0ZUtleXMoZmllbGRBLmVsLmNoaWxkLmlucHV0LnJhdywgJzMnKVxuXHRcdFx0aGVscGVycy5zaW11bGF0ZUtleXMoZmllbGRCLmVsLmNoaWxkLmlucHV0LnJhdywgJzMnKVxuXHRcdFx0aGVscGVycy5zaW11bGF0ZUtleXMoZmllbGRDLmVsLmNoaWxkLmlucHV0LnJhdywgJzMnKVxuXHRcdFx0ZXhwZWN0KGZpZWxkQS52YWx1ZSkudG8uZXF1YWwgMzBcblx0XHRcdGV4cGVjdChmaWVsZEEuZWwuY2hpbGQuaW5wdXQucmF3LnZhbHVlKS50by5lcXVhbCAnMydcblx0XHRcdGV4cGVjdChmaWVsZEIudmFsdWUpLnRvLmVxdWFsIDZcblx0XHRcdGV4cGVjdChmaWVsZEIuZWwuY2hpbGQuaW5wdXQucmF3LnZhbHVlKS50by5lcXVhbCAnNidcblx0XHRcdGV4cGVjdChmaWVsZEMudmFsdWUpLnRvLmVxdWFsIDYwXG5cdFx0XHRleHBlY3QoZmllbGRDLmVsLmNoaWxkLmlucHV0LnJhdy52YWx1ZSkudG8uZXF1YWwgJzYnXG5cblx0XHRcdGZpZWxkQS52YWx1ZSA9IDEyXG5cdFx0XHRmaWVsZEIudmFsdWUgPSAxMlxuXHRcdFx0ZmllbGRDLnZhbHVlID0gMTJcblx0XHRcdGV4cGVjdChmaWVsZEEudmFsdWUpLnRvLmVxdWFsIDEyMFxuXHRcdFx0ZXhwZWN0KGZpZWxkQS5lbC5jaGlsZC5pbnB1dC5yYXcudmFsdWUpLnRvLmVxdWFsICcxMidcblx0XHRcdGV4cGVjdChmaWVsZEIudmFsdWUpLnRvLmVxdWFsIDI0XG5cdFx0XHRleHBlY3QoZmllbGRCLmVsLmNoaWxkLmlucHV0LnJhdy52YWx1ZSkudG8uZXF1YWwgJzI0J1xuXHRcdFx0ZXhwZWN0KGZpZWxkQy52YWx1ZSkudG8uZXF1YWwgMjQwXG5cdFx0XHRleHBlY3QoZmllbGRDLmVsLmNoaWxkLmlucHV0LnJhdy52YWx1ZSkudG8uZXF1YWwgJzI0J1xuXG5cblx0XHR0ZXN0IFwibWluL21heFwiLCAoKS0+XG5cdFx0XHRmaWVsZCA9IHF1aWNrZmllbGQoe3R5cGU6J251bWJlcicsIGxhYmVsOidOdW1iZXIgKG1pbi9tYXgpJywgbWluVmFsdWU6MTAsIG1heFZhbHVlOjEwMDAsIGF1dG9XaWR0aDp0cnVlfSkuYXBwZW5kVG8oc2FuZGJveClcblxuXG5cdFx0dGVzdCBcIm1pbi9tYXgvc3RlcFwiLCAoKS0+XG5cdFx0XHRmaWVsZCA9IHF1aWNrZmllbGQoe3R5cGU6J251bWJlcicsIGxhYmVsOidOdW1iZXIgKG1pbi9tYXgvc3RlcCknLCBtaW5WYWx1ZToxMCwgbWF4VmFsdWU6MTAwLCBzdGVwOjMsIGF1dG9XaWR0aDp0cnVlfSkuYXBwZW5kVG8oc2FuZGJveClcblxuXG5cdFx0dGVzdCBcIm1pbi9tYXgvc3RlcCAoZW5mb3JjZWQpXCIsICgpLT5cblx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh7dHlwZTonbnVtYmVyJywgbGFiZWw6J051bWJlciAoZW5mb3JjZWQpJywgbWluVmFsdWU6MTAsIG1heFZhbHVlOjEwMCwgc3RlcDoxMiwgZW5mb3JjZTp0cnVlLCBhdXRvV2lkdGg6dHJ1ZX0pLmFwcGVuZFRvKHNhbmRib3gpXG5cblx0XHRcblx0XHR0ZXN0IFwiZGVjaW1hbCBzdGVwXCIsICgpLT5cblx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh7dHlwZTonbnVtYmVyJywgbGFiZWw6J051bWJlciAoZGVjaW1hbCBzdGVwKScsIG1pblZhbHVlOjAuMSwgbWF4VmFsdWU6MTAwLCBzdGVwOjAuMSwgYXV0b1dpZHRoOnRydWV9KS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cblx0c3VpdGUgXCJ0ZXh0YXJlYSBmaWVsZFwiLCAoKS0+XG5cdFx0c3VpdGVTZXR1cCAoKS0+XG5cdFx0XHRoZWxwZXJzLmFkZFRpdGxlKCd0ZXh0YXJlYSBmaWVsZCcpXG5cdFxuXHRcdHRlc3QgXCJiYXNpY1wiLCAoKS0+XG5cdFx0XHRmaWVsZCA9IHF1aWNrZmllbGQoe3R5cGU6J3RleHRhcmVhJywgbGFiZWw6J1RleHRhcmVhJywgd2lkdGg6JzMwMHB4JywgaGVpZ2h0OicyNTBweCcsIGF1dG9IZWlnaHQ6ZmFsc2V9KS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cdFx0dGVzdCBcImdldHRlci9zZXR0ZXJcIiwgKCktPlxuXHRcdFx0Z2V0dGVyID0gKHZhbHVlKS0+IFwiZXhhbXBsZS5jb20vI3t2YWx1ZX1cIlxuXHRcdFx0c2V0dGVyID0gKHZhbHVlKS0+IHZhbHVlLnRvTG93ZXJDYXNlKClcblx0XHRcdGZpZWxkQSA9IHF1aWNrZmllbGQoe3R5cGU6J3RleHRhcmVhJywgbGFiZWw6J3BhdGgnLCBnZXR0ZXJ9KVxuXHRcdFx0ZmllbGRCID0gcXVpY2tmaWVsZCh7dHlwZTondGV4dGFyZWEnLCBsYWJlbDoncGF0aCcsIHNldHRlcn0pXG5cdFx0XHRmaWVsZEMgPSBxdWlja2ZpZWxkKHt0eXBlOid0ZXh0YXJlYScsIGxhYmVsOidwYXRoJywgZ2V0dGVyLCBzZXR0ZXJ9KVxuXG5cdFx0XHRleHBlY3QoZmllbGRBLnZhbHVlKS50by5lcXVhbCAnZXhhbXBsZS5jb20vJ1xuXHRcdFx0ZXhwZWN0KGZpZWxkQS5lbC5jaGlsZC5pbnB1dC5yYXcudmFsdWUpLnRvLmVxdWFsICcnXG5cdFx0XHRleHBlY3QoZmllbGRCLnZhbHVlKS50by5lcXVhbCAnJ1xuXHRcdFx0ZXhwZWN0KGZpZWxkQi5lbC5jaGlsZC5pbnB1dC5yYXcudmFsdWUpLnRvLmVxdWFsICcnXG5cdFx0XHRleHBlY3QoZmllbGRDLnZhbHVlKS50by5lcXVhbCAnZXhhbXBsZS5jb20vJ1xuXHRcdFx0ZXhwZWN0KGZpZWxkQy5lbC5jaGlsZC5pbnB1dC5yYXcudmFsdWUpLnRvLmVxdWFsICcnXG5cblx0XHRcdGhlbHBlcnMuc2ltdWxhdGVLZXlzKGZpZWxkQS5lbC5jaGlsZC5pbnB1dC5yYXcsICdBYkMnKVxuXHRcdFx0aGVscGVycy5zaW11bGF0ZUtleXMoZmllbGRCLmVsLmNoaWxkLmlucHV0LnJhdywgJ0FiQycpXG5cdFx0XHRoZWxwZXJzLnNpbXVsYXRlS2V5cyhmaWVsZEMuZWwuY2hpbGQuaW5wdXQucmF3LCAnQWJDJylcblx0XHRcdGV4cGVjdChmaWVsZEEudmFsdWUpLnRvLmVxdWFsICdleGFtcGxlLmNvbS9BYkMnXG5cdFx0XHRleHBlY3QoZmllbGRBLmVsLmNoaWxkLmlucHV0LnJhdy52YWx1ZSkudG8uZXF1YWwgJ0FiQydcblx0XHRcdGV4cGVjdChmaWVsZEIudmFsdWUpLnRvLmVxdWFsICdhYmMnXG5cdFx0XHRleHBlY3QoZmllbGRCLmVsLmNoaWxkLmlucHV0LnJhdy52YWx1ZSkudG8uZXF1YWwgJ2FiYydcblx0XHRcdGV4cGVjdChmaWVsZEMudmFsdWUpLnRvLmVxdWFsICdleGFtcGxlLmNvbS9hYmMnXG5cdFx0XHRleHBlY3QoZmllbGRDLmVsLmNoaWxkLmlucHV0LnJhdy52YWx1ZSkudG8uZXF1YWwgJ2FiYydcblxuXHRcdFx0ZmllbGRBLnZhbHVlID0gJ0RlRidcblx0XHRcdGZpZWxkQi52YWx1ZSA9ICdEZUYnXG5cdFx0XHRmaWVsZEMudmFsdWUgPSAnRGVGJ1xuXHRcdFx0ZXhwZWN0KGZpZWxkQS52YWx1ZSkudG8uZXF1YWwgJ2V4YW1wbGUuY29tL0RlRidcblx0XHRcdGV4cGVjdChmaWVsZEEuZWwuY2hpbGQuaW5wdXQucmF3LnZhbHVlKS50by5lcXVhbCAnRGVGJ1xuXHRcdFx0ZXhwZWN0KGZpZWxkQi52YWx1ZSkudG8uZXF1YWwgJ2RlZidcblx0XHRcdGV4cGVjdChmaWVsZEIuZWwuY2hpbGQuaW5wdXQucmF3LnZhbHVlKS50by5lcXVhbCAnZGVmJ1xuXHRcdFx0ZXhwZWN0KGZpZWxkQy52YWx1ZSkudG8uZXF1YWwgJ2V4YW1wbGUuY29tL2RlZidcblx0XHRcdGV4cGVjdChmaWVsZEMuZWwuY2hpbGQuaW5wdXQucmF3LnZhbHVlKS50by5lcXVhbCAnZGVmJ1xuXG5cblx0XHR0ZXN0IFwiYXV0b2hlaWdodFwiLCAoKS0+XG5cdFx0XHRmaWVsZCA9IHF1aWNrZmllbGQoe3R5cGU6J3RleHRhcmVhJywgbGFiZWw6J1RleHRhcmVhIChhdXRvSGVpZ2h0KScsIHdpZHRoOiczMDBweCcsIG1heEhlaWdodDo1MDB9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFxuXHRcdHRlc3QgXCJhdXRvd2lkdGhcIiwgKCktPlxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOid0ZXh0YXJlYScsIGxhYmVsOidUZXh0YXJlYSAoYXV0b3dpZHRoKScsIGF1dG9XaWR0aDp0cnVlLCBtYXhXaWR0aDozMDB9KS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cblx0c3VpdGUgXCJzZWxlY3QgZmllbGRcIiwgKCktPlxuXHRcdHN1aXRlU2V0dXAgKCktPlxuXHRcdFx0aGVscGVycy5hZGRUaXRsZSgnc2VsZWN0IGZpZWxkJylcblxuXHRcdHRlc3QgXCJzaW5nbGUgc2VsZWN0YWJsZVwiLCAoKS0+XG5cdFx0XHRmaWVsZCA9IHF1aWNrZmllbGQoe3R5cGU6J3NlbGVjdCcsIGxhYmVsOidNeSBDaG9pY2VzIChzaW5nbGUpJywgY2hvaWNlczpbJ0FwcGxlJywgJ0FwcGxlIEp1aWNlJywgJ0JhbmFuYScsICdPcmFuZ2UnLCB7bGFiZWw6J0xlbW9uJywgdmFsdWU6J2xpbWUnLCBjb25kaXRpb25zOnsnZW1haWwnOid2YWxpZCd9fV19KS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cdFx0dGVzdCBcIm11bHRpIHNlbGVjdGFibGVcIiwgKCktPlxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOidzZWxlY3QnLCBsYWJlbDonTXkgQ2hvaWNlcyAobXVsdGkpJywgY2hvaWNlczpbJ0FwcGxlJywgJ0JhbmFuYScsICdPcmFuZ2UnLCAnTGltZScsICdLaXdpJ10sIG11bHRpcGxlOnRydWUsIGRlZmF1bHRWYWx1ZTonQXBwbGUnfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGFzc2VydC5lcXVhbCBmaWVsZC52YWx1ZSwgJ0FwcGxlJ1xuXG5cdFx0dGVzdCBcImRlZmF1bHQgdmFsdWVcIiwgKCktPlxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOidzZWxlY3QnLCBsYWJlbDonTXkgQ2hvaWNlcyAoZGVmYXVsdCknLCBjaG9pY2VzOlsnQXBwbGUnLCAnQmFuYW5hJywgJ09yYW5nZScsIHtsYWJlbDonTGVtb24nLCB2YWx1ZTonbGltZScsIGNvbmRpdGlvbnM6eydlbWFpbCc6J3ZhbGlkJ319XSwgdmFsdWU6J0JhbmFuYSd9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0YXNzZXJ0LmVxdWFsIGZpZWxkLnZhbHVlLCAnQmFuYW5hJ1xuXHRcdFx0XG5cdFx0XHRmaWVsZCA9IHF1aWNrZmllbGQoe3R5cGU6J3NlbGVjdCcsIGxhYmVsOidNeSBDaG9pY2VzIChkZWZhdWx0KScsIHZhbHVlOidCYW5hbmEnfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGFzc2VydC5lcXVhbCBmaWVsZC52YWx1ZSwgJ0JhbmFuYSdcblxuXHRcdHRlc3QgXCJjdXNvdG0gYm9yZGVyXCIsICgpLT5cblx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh7dHlwZTonc2VsZWN0JywgbGFiZWw6J0N1c3RvbSBCb3JkZXInLCBjaG9pY2VzOlsnQXBwbGUnLCAnQmFuYW5hJywgJ09yYW5nZSddLCBib3JkZXI6JzAgMCAycHggMCcsIG1hcmdpbjonMCAwIDMwcHgnfSkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdHRlc3QgXCJubyBjaG9pY2VzXCIsICgpLT5cblx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh7dHlwZTonc2VsZWN0JywgbGFiZWw6J05vIGNob2ljZXMnLCBhdXRvV2lkdGg6dHJ1ZX0pLmFwcGVuZFRvKHNhbmRib3gpXG5cblx0XHR0ZXN0IFwibWFueSBjaG9pY2VzXCIsICgpLT5cblx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh7dHlwZTonc2VsZWN0JywgbGFiZWw6J01hbnkgQ2hvaWNlcycsIGNob2ljZXM6aGVscGVycy5jb21wYW55TmFtZXMsIGF1dG9XaWR0aDp0cnVlfSkuYXBwZW5kVG8oc2FuZGJveClcblxuXG5cdHN1aXRlIFwiY2hvaWNlIGZpZWxkXCIsICgpLT5cblx0XHRzdWl0ZVNldHVwICgpLT5cblx0XHRcdGhlbHBlcnMuYWRkVGl0bGUoJ2Nob2ljZSBmaWVsZCcpXG5cdFx0XHRAY29udHJvbCA9IHF1aWNrZmllbGQoe3R5cGU6J2Nob2ljZScsIGNob2ljZXM6WydBcHBsZScsICdCYW5hbmEnLCAnT3JhbmdlJ10sIHJlcXVpcmVkOnRydWV9KVxuXHRcdFx0QGNvbnRyb2xNdWx0aSA9IHF1aWNrZmllbGQoe3R5cGU6J2Nob2ljZScsIGNob2ljZXM6WydBcHBsZScsICdCYW5hbmEnLCAnT3JhbmdlJ10sIHJlcXVpcmVkOnRydWUsIG11bHRpcGxlOnRydWV9KVxuXG5cdFx0dGVzdCBcInNpbmdsZSBzZWxlY3RhYmxlXCIsICgpLT5cblx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh7dHlwZTonY2hvaWNlJywgbGFiZWw6J015IENob2ljZXMgKHNpbmdsZSknLCBjaG9pY2VzOlsnQXBwbGUnLCAnQmFuYW5hJywgJ09yYW5nZSddfSkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdHRlc3QgXCJtdWx0aSBzZWxlY3RhYmxlXCIsICgpLT5cblx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh7dHlwZTonY2hvaWNlJywgbGFiZWw6J015IENob2ljZXMgKG11bHRpKScsIGNob2ljZXM6WydBcHBsZScsICdCYW5hbmEnLCAnT3JhbmdlJywgJ0xpbWUnLCAnS2l3aSddLCBwZXJHcm91cDozLCBtdWx0aXBsZTp0cnVlfSkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdHRlc3QgXCJkZWZhdWx0IHZhbHVlXCIsICgpLT5cblx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh7dHlwZTonY2hvaWNlJywgbGFiZWw6J015IENob2ljZXMgKHNpbmdsZSknLCBjaG9pY2VzOlsnQXBwbGUnLCAnQmFuYW5hJywgJ09yYW5nZSddLCB2YWx1ZTonT3JhbmdlJ30pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRhc3NlcnQuZXF1YWwgZmllbGQudmFsdWUsICdPcmFuZ2UnXG5cdFx0XHRhc3NlcnQuZXF1YWwgZmllbGQuZmluZENob2ljZSgnT3JhbmdlJykuc2VsZWN0ZWQsIHRydWVcblx0XHRcdFxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOidjaG9pY2UnLCBsYWJlbDonTXkgQ2hvaWNlcyAobXVsdGkpJywgY2hvaWNlczpbJ0FwcGxlJywgJ0JhbmFuYScsICdPcmFuZ2UnLCAnTGltZScsICdLaXdpJ10sIG11bHRpcGxlOnRydWUsIHZhbHVlOlsnQmFuYW5hJywgJ0xpbWUnXX0pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRhc3NlcnQuZGVlcEVxdWFsIGZpZWxkLnZhbHVlLCBbJ0JhbmFuYScsICdMaW1lJ11cblx0XHRcdGFzc2VydC5lcXVhbCBmaWVsZC5maW5kQ2hvaWNlKCdCYW5hbmEnKS5zZWxlY3RlZCwgdHJ1ZVxuXHRcdFx0YXNzZXJ0LmVxdWFsIGZpZWxkLmZpbmRDaG9pY2UoJ0xpbWUnKS5zZWxlY3RlZCwgdHJ1ZVxuXG5cdFx0dGVzdCBcImNvbmRpdGlvbnNcIiwgKCktPlxuXHRcdFx0bWFzdGVyID0gcXVpY2tmaWVsZCh7dHlwZTondGV4dCcsIElEOidtYXN0ZXInLCByZXF1aXJlZDp0cnVlfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh7dHlwZTonY2hvaWNlJywgbGFiZWw6J015IENob2ljZXMgKHNpbmdsZSknLCBjaG9pY2VzOltcblx0XHRcdFx0J0FwcGxlJ1xuXHRcdFx0XHR7bGFiZWw6J0JhbmFuYScsIHZhbHVlOidiYW5hbmEnLCBjb25kaXRpb25zOnsnbWFzdGVyJzovXmJhbmEvfX1cblx0XHRcdFx0J09yYW5nZSdcblx0XHRcdFx0e2xhYmVsOidMZW1vbicsIHZhbHVlOidsaW1lJywgY29uZGl0aW9uczp7J21hc3Rlcic6J3ZhbGlkJ319XG5cdFx0XHRdfSkuYXBwZW5kVG8oc2FuZGJveClcblxuXHRcdHRlc3QgXCJnZXR0ZXIvc2V0dGVyXCIsICgpLT5cblx0XHRcdGdldHRlciA9ICh2YWx1ZSktPiB2YWx1ZT8udG9VcHBlckNhc2UoKSBvciB2YWx1ZVxuXHRcdFx0c2V0dGVyID0gKHZhbHVlKS0+IGlmIHZhbHVlPy52YWx1ZSBpcyAnQmFuYW5hJyB0aGVuICdBcHBsZScgZWxzZSB2YWx1ZVxuXHRcdFx0ZmllbGRBID0gcXVpY2tmaWVsZCh7dHlwZTonY2hvaWNlJywgY2hvaWNlczpbJ0FwcGxlJywnQmFuYW5hJywnT3JhbmdlJ10sIGdldHRlcn0pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRmaWVsZEIgPSBxdWlja2ZpZWxkKHt0eXBlOidjaG9pY2UnLCBjaG9pY2VzOlsnQXBwbGUnLCdCYW5hbmEnLCdPcmFuZ2UnXSwgc2V0dGVyfSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdGZpZWxkQyA9IHF1aWNrZmllbGQoe3R5cGU6J2Nob2ljZScsIGNob2ljZXM6WydBcHBsZScsJ0JhbmFuYScsJ09yYW5nZSddLCBnZXR0ZXIsIHNldHRlcn0pLmFwcGVuZFRvKHNhbmRib3gpXG5cblx0XHRcdGV4cGVjdChmaWVsZEEudmFsdWUpLnRvLmVxdWFsIHVuZGVmaW5lZFxuXHRcdFx0ZXhwZWN0KGZpZWxkQS52YWx1ZVJhdykudG8uZXF1YWwgbnVsbFxuXHRcdFx0ZXhwZWN0KGZpZWxkQi52YWx1ZSkudG8uZXF1YWwgdW5kZWZpbmVkXG5cdFx0XHRleHBlY3QoZmllbGRCLnZhbHVlUmF3KS50by5lcXVhbCBudWxsXG5cdFx0XHRleHBlY3QoZmllbGRDLnZhbHVlKS50by5lcXVhbCB1bmRlZmluZWRcblx0XHRcdGV4cGVjdChmaWVsZEMudmFsdWVSYXcpLnRvLmVxdWFsIG51bGxcblxuXHRcdFx0ZmllbGRBLmNob2ljZXNbMV0uZWwuZW1pdCAnY2xpY2snXG5cdFx0XHRmaWVsZEIuY2hvaWNlc1sxXS5lbC5lbWl0ICdjbGljaydcblx0XHRcdGZpZWxkQy5jaG9pY2VzWzFdLmVsLmVtaXQgJ2NsaWNrJ1xuXHRcdFx0ZXhwZWN0KGZpZWxkQS52YWx1ZSkudG8uZXF1YWwgJ0JBTkFOQSdcblx0XHRcdGV4cGVjdChmaWVsZEEudmFsdWVSYXc/LnZhbHVlKS50by5lcXVhbCAnQmFuYW5hJ1xuXHRcdFx0ZXhwZWN0KGZpZWxkQi52YWx1ZSkudG8uZXF1YWwgJ0FwcGxlJ1xuXHRcdFx0ZXhwZWN0KGZpZWxkQi52YWx1ZVJhdz8udmFsdWUpLnRvLmVxdWFsICdBcHBsZSdcblx0XHRcdGV4cGVjdChmaWVsZEMudmFsdWUpLnRvLmVxdWFsICdBUFBMRSdcblx0XHRcdGV4cGVjdChmaWVsZEMudmFsdWVSYXc/LnZhbHVlKS50by5lcXVhbCAnQXBwbGUnXG5cblx0XHRcdGZpZWxkQS52YWx1ZSA9ICdPcmFuZ2UnXG5cdFx0XHRmaWVsZEIudmFsdWUgPSAnT3JhbmdlJ1xuXHRcdFx0ZmllbGRDLnZhbHVlID0gJ09yYW5nZSdcblx0XHRcdGV4cGVjdChmaWVsZEEudmFsdWUpLnRvLmVxdWFsICdPUkFOR0UnXG5cdFx0XHRleHBlY3QoZmllbGRBLnZhbHVlUmF3Py52YWx1ZSkudG8uZXF1YWwgJ09yYW5nZSdcblx0XHRcdGV4cGVjdChmaWVsZEIudmFsdWUpLnRvLmVxdWFsICdPcmFuZ2UnXG5cdFx0XHRleHBlY3QoZmllbGRCLnZhbHVlUmF3Py52YWx1ZSkudG8uZXF1YWwgJ09yYW5nZSdcblx0XHRcdGV4cGVjdChmaWVsZEMudmFsdWUpLnRvLmVxdWFsICdPUkFOR0UnXG5cdFx0XHRleHBlY3QoZmllbGRDLnZhbHVlUmF3Py52YWx1ZSkudG8uZXF1YWwgJ09yYW5nZSdcblxuXG5cdFx0dGVzdCBcInZhbGlkIHdoZW4gc2VsZWN0ZWRcIiwgKCktPlxuXHRcdFx0c2luZ2xlID0gcXVpY2tmaWVsZCh7dHlwZTonY2hvaWNlJywgY2hvaWNlczpbJ0FwcGxlJywgJ0JhbmFuYScsICdPcmFuZ2UnXSwgcmVxdWlyZWQ6dHJ1ZSwgdmFsaWRXaGVuU2VsZWN0ZWQ6dHJ1ZX0pXG5cdFx0XHRtdWx0aXBsZSA9IHF1aWNrZmllbGQoe3R5cGU6J2Nob2ljZScsIGNob2ljZXM6WydBcHBsZScsICdCYW5hbmEnLCAnT3JhbmdlJ10sIHJlcXVpcmVkOnRydWUsIHZhbGlkV2hlblNlbGVjdGVkOjIsIG11bHRpcGxlOnRydWV9KVxuXHRcdFx0ZXhwZWN0KHNpbmdsZS52YWxpZGF0ZSgpKS50by5lcXVhbCBmYWxzZVxuXHRcdFx0ZXhwZWN0KG11bHRpcGxlLnZhbGlkYXRlKCkpLnRvLmVxdWFsIGZhbHNlXG5cdFx0XHRleHBlY3QoQGNvbnRyb2wudmFsaWRhdGUoKSkudG8uZXF1YWwgZmFsc2Vcblx0XHRcdGV4cGVjdChAY29udHJvbE11bHRpLnZhbGlkYXRlKCkpLnRvLmVxdWFsIGZhbHNlXG5cdFx0XHRcblx0XHRcdHNpbmdsZS52YWx1ZSA9IG11bHRpcGxlLnZhbHVlID0gQGNvbnRyb2wudmFsdWUgPSBAY29udHJvbE11bHRpLnZhbHVlID0gJ0JhbmFuYSdcblx0XHRcdGV4cGVjdChzaW5nbGUudmFsaWRhdGUoKSkudG8uZXF1YWwgdHJ1ZVxuXHRcdFx0ZXhwZWN0KG11bHRpcGxlLnZhbGlkYXRlKCkpLnRvLmVxdWFsIGZhbHNlXG5cdFx0XHRleHBlY3QoQGNvbnRyb2wudmFsaWRhdGUoKSkudG8uZXF1YWwgdHJ1ZVxuXHRcdFx0ZXhwZWN0KEBjb250cm9sTXVsdGkudmFsaWRhdGUoKSkudG8uZXF1YWwgdHJ1ZVxuXHRcdFx0XG5cdFx0XHRtdWx0aXBsZS52YWx1ZSA9IFsnQXBwbGUnLCAnQmFuYW5hJ11cblx0XHRcdGV4cGVjdChtdWx0aXBsZS52YWxpZGF0ZSgpKS50by5lcXVhbCB0cnVlXG5cblxuXHRzdWl0ZSBcInRydWVmYWxzZSBmaWVsZFwiLCAoKS0+XG5cdFx0c3VpdGVTZXR1cCAoKS0+XG5cdFx0XHRoZWxwZXJzLmFkZFRpdGxlKCd0cnVlZmFsc2UgZmllbGQnKVxuXHRcdFxuXHRcdHRlc3QgXCJiYXNpY1wiLCAoKS0+XG5cdFx0XHRmaWVsZCA9IHF1aWNrZmllbGQoe3R5cGU6J3RydWVmYWxzZScsIGxhYmVsOidJcyBpdCB0cnVlIG9yIGZhbHNlPycsIHdpZHRoOidhdXRvJ30pLmFwcGVuZFRvKHNhbmRib3gpLmVsLnN0eWxlICdtYXJnaW5SaWdodCcsIDIwXG5cdFx0XHRhc3NlcnQuZXF1YWwgZmllbGQudmFsdWUsIG51bGxcblxuXHRcdHRlc3QgXCJkZWZhdWx0IHZhbHVlXCIsICgpLT5cblx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh7dHlwZTondHJ1ZWZhbHNlJywgbGFiZWw6J0l0XFwncyBmYWxzZSBieSBkZWZhdWx0Jywgd2lkdGg6J2F1dG8nLCBjaG9pY2VMYWJlbHM6WydZZXMnLCAnTm8nXSwgdmFsdWU6ZmFsc2V9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZmllbGQuZWwuc3R5bGUgJ21hcmdpblJpZ2h0JywgMjBcblx0XHRcdGFzc2VydC5lcXVhbCBmaWVsZC52YWx1ZSwgZmFsc2Vcblx0XHRcdFxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOid0cnVlZmFsc2UnLCBsYWJlbDonSXRcXCdzIHRydWUgYnkgZGVmYXVsdCcsIHdpZHRoOidhdXRvJywgY2hvaWNlTGFiZWxzOlsnWWVzJywgJ05vJ10sIHZhbHVlOnRydWV9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZmllbGQuZWwuc3R5bGUgJ21hcmdpblJpZ2h0JywgMjBcblx0XHRcdGFzc2VydC5lcXVhbCBmaWVsZC52YWx1ZSwgdHJ1ZVxuXG5cblx0c3VpdGUgXCJ0b2dnbGUgZmllbGRcIiwgKCktPlxuXHRcdHN1aXRlU2V0dXAgKCktPlxuXHRcdFx0aGVscGVycy5hZGRUaXRsZSgndG9nZ2xlIGZpZWxkJylcblx0XHRcblx0XHR0ZXN0IFwiYmFzaWNcIiwgKCktPlxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOid0b2dnbGUnLCBsYWJlbDonVGhlIHRvZ2dsZSBmaWVsZCcsIHdpZHRoOidhdXRvJ30pLmFwcGVuZFRvKHNhbmRib3gpLmVsLnN0eWxlICdtYXJnaW5SaWdodCcsIDIwXG5cblx0XHR0ZXN0IFwiZGVmYXVsdCB2YWx1ZVwiLCAoKS0+XG5cdFx0XHRmaWVsZCA9IHF1aWNrZmllbGQoe3R5cGU6J3RvZ2dsZScsIGxhYmVsOidUb2dnbGVkIGJ5IGRlZmF1bHQnLCB3aWR0aDonMTMwcHgnLCBkZWZhdWx0VmFsdWU6MX0pLmFwcGVuZFRvKHNhbmRib3gpLmVsLnN0eWxlICdtYXJnaW5SaWdodCcsIDIwXG5cblx0XHR0ZXN0IFwiY3VzdG9tIHNpemVcIiwgKCktPlxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOid0b2dnbGUnLCBsYWJlbDonQ3VzdG9tIHNpemUgdG9nZ2xlJywgd2lkdGg6J2F1dG8nLCBzaXplOjQwfSkuYXBwZW5kVG8oc2FuZGJveCkuZWwuc3R5bGUgJ21hcmdpblJpZ2h0JywgMjBcblxuXHRcdHRlc3QgXCJhbGlnbmVkIHN0eWxlXCIsICgpLT5cblx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh7dHlwZTondG9nZ2xlJywgbGFiZWw6J0FsaWduZWQgc3R5bGUnLCBzdHlsZTonYWxpZ25lZCcsIHdpZHRoOidhdXRvJ30pLmFwcGVuZFRvKHNhbmRib3gpXG5cblx0XHR0ZXN0IFwiYWxpZ25lZCBzdHlsZSArIGRlZmluZWQgd2lkdGhcIiwgKCktPlxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOid0b2dnbGUnLCBsYWJlbDonQWxpZ25lZCBzdHlsZSB3aXRoIGRlZmluZWQgd2lkdGgnLCBzdHlsZTonYWxpZ25lZCcsIHdpZHRoOic0MDBweCd9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOid0b2dnbGUnLCBsYWJlbDonQWxpZ25lZCBzdHlsZSB3aXRoIGRlZmluZWQgd2lkdGgnLCBzdHlsZTonYWxpZ25lZCcsIHdpZHRoOicyMDBweCd9KS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cdFxuXHRzdWl0ZSBcImNoZWNrYm94IGZpZWxkXCIsICgpLT5cblx0XHRzdWl0ZVNldHVwICgpLT5cblx0XHRcdGhlbHBlcnMuYWRkVGl0bGUoJ2NoZWNrYm94IGZpZWxkJylcblx0XHRcblx0XHR0ZXN0IFwiYmFzaWNcIiwgKCktPlxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOidjaGVja2JveCcsIGxhYmVsOidJcyBpdCB0cnVlIG9yIGZhbHNlPycsIHdpZHRoOidhdXRvJ30pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRmaWVsZC5lbC5zdHlsZSAnbWFyZ2luUmlnaHQnLCAyMFxuXHRcdFx0YXNzZXJ0LmVxdWFsIGZpZWxkLnZhbHVlLCBmYWxzZVxuXG5cdFx0dGVzdCBcImRlZmF1bHQgdmFsdWVcIiwgKCktPlxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOidjaGVja2JveCcsIGxhYmVsOidJdFxcJ3MgZmFsc2UgYnkgZGVmYXVsdCcsIHdpZHRoOidhdXRvJywgdmFsdWU6ZmFsc2V9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0ZmllbGQuZWwuc3R5bGUgJ21hcmdpblJpZ2h0JywgMjBcblx0XHRcdGFzc2VydC5lcXVhbCBmaWVsZC52YWx1ZSwgZmFsc2Vcblx0XHRcdFxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOidjaGVja2JveCcsIGxhYmVsOidJdFxcJ3MgdHJ1ZSBieSBkZWZhdWx0Jywgd2lkdGg6J2F1dG8nLCBjaG9pY2VMYWJlbHM6WydZZXMnLCAnTm8nXSwgdmFsdWU6dHJ1ZX0pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRmaWVsZC5lbC5zdHlsZSAnbWFyZ2luUmlnaHQnLCAyMFxuXHRcdFx0YXNzZXJ0LmVxdWFsIGZpZWxkLnZhbHVlLCB0cnVlXG5cblx0XHR0ZXN0IFwibXVsdGktbGluZSBkaXNwbGF5XCIsICgpLT5cblx0XHRcdGxhYmVsID0gJ0lzIGl0IHRydWUgb3IgZmFsc2U/IFRoaXMgaXMgYSBmYWlybHkgbG9uZyB0ZXh0IGFuZCBjYW4gZ2V0IGV2ZW4gPGI+bG9uZ2VyPC9iPiBpZiB3ZSBkb250IHN0b3AgdHlwaW5nLidcblx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh7dHlwZTonY2hlY2tib3gnLCBsYWJlbCwgbGFiZWxDbGlja3M6dHJ1ZSwgd2lkdGg6JzE1MHB4J30pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRmaWVsZC5lbC5zdHlsZSAnbWFyZ2luUmlnaHQnLCAyMFxuXHRcdFx0XG5cdFx0XHRhc3NlcnQuZXF1YWwgZmllbGQudmFsdWUsIGZhbHNlXG5cdFx0XHRcblx0XHRcdGZpZWxkLmVsLmNoaWxkLmxhYmVsLnJhdy5jbGljaygpXG5cdFx0XHRhc3NlcnQuZXF1YWwgZmllbGQudmFsdWUsIHRydWVcblxuXG5cdHN1aXRlIFwiZ3JvdXAgZmllbGRcIiwgKCktPlxuXHRcdHNldHVwIGhlbHBlcnMuYWRkRGl2aWRlclxuXHRcdHN1aXRlU2V0dXAgKCktPlxuXHRcdFx0aGVscGVycy5hZGRUaXRsZSgnZ3JvdXAgZmllbGQnKVxuXHRcdFx0QGZpZWxkcyA9IFxuXHRcdFx0XHRmaXJzdDpcblx0XHRcdFx0XHR0eXBlOiAndGV4dCdcblx0XHRcdFx0XHRsYWJlbDogJ0ZpcnN0J1xuXHRcdFx0XHRcdHdpZHRoOiAnNDklJ1xuXHRcdFx0XHRzZWNvbmQ6XG5cdFx0XHRcdFx0dHlwZTogJ3RleHQnXG5cdFx0XHRcdFx0bGFiZWw6ICdTZWNvbmQnXG5cdFx0XHRcdFx0d2lkdGg6ICc0OSUnXG5cdFx0XHRcdHRoaXJkOlxuXHRcdFx0XHRcdHR5cGU6ICdzZWxlY3QnXG5cdFx0XHRcdFx0bGFiZWw6ICdUaGlyZCdcblx0XHRcdFx0XHR3aWR0aDogJzc0JSdcblx0XHRcdFx0XHRjaG9pY2VzOiBbJ0FwcGxlJywgJ0JhbmFuYScsICdLaXdpJ11cblx0XHRcdFx0XHR2YWx1ZTogJ0tpd2knXG5cdFx0XHRcdGZvdXJ0aDpcblx0XHRcdFx0XHR0eXBlOiAndG9nZ2xlJ1xuXHRcdFx0XHRcdGxhYmVsOiAnRm91cnRoJ1xuXHRcdFx0XHRcdHN0eWxlOiAnYWxpZ25lZCdcblx0XHRcdFx0XHR3aWR0aDogJzI0JSdcblx0XHRcdFx0XHRjb25kaXRpb25zOiB0aGlyZDonS2l3aSdcblx0XHRcdFxuXHRcdFx0QGNvbnRyb2wgPSBxdWlja2ZpZWxkKHt0eXBlOidncm91cCcsIGxhYmVsOidCYXNpYyBHcm91cCcsIHdpZHRoOic3MCUnLCBmaWVsZE1hcmdpbjoxMCwgZmllbGRBbGlnbjonbWlkZGxlJywgQGZpZWxkc30pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XG5cdFx0dGVzdCBcImJhc2ljXCIsICgpLT5cblx0XHRcdGV4cGVjdChAY29udHJvbC52YWx1ZSkudG8uZXFsIHtmaXJzdDonJywgc2Vjb25kOicnLCB0aGlyZDonS2l3aScsIGZvdXJ0aDpmYWxzZX1cblx0XHRcdGV4cGVjdChAY29udHJvbC5zdGF0ZS5pbnRlcmFjdGVkKS50by5lcXVhbCBmYWxzZVxuXG5cdFx0XHRAY29udHJvbC52YWx1ZSA9IHtmaXJzdDondmFsdWVBJywgdGhpcmQ6J0thd2EnLCBmb3VydGg6dHJ1ZSwgZmlmdGg6JzUnfVxuXHRcdFx0ZXhwZWN0KEBjb250cm9sLnZhbHVlKS50by5lcWwge2ZpcnN0Oid2YWx1ZUEnLCBzZWNvbmQ6JycsIHRoaXJkOidLYXdhJywgZm91cnRoOnRydWV9XG5cdFx0XHRleHBlY3QoQGNvbnRyb2wuc3RhdGUuaW50ZXJhY3RlZCkudG8uZXF1YWwgdHJ1ZVxuXHRcdFx0XG5cdFx0XHRAY29udHJvbC52YWx1ZSA9IHtzZWNvbmQ6J3ZhbHVlQicsIHRoaXJkOidBcHBsZSd9XG5cdFx0XHRleHBlY3QoQGNvbnRyb2wudmFsdWUpLnRvLmVxbCB7Zmlyc3Q6J3ZhbHVlQScsIHNlY29uZDondmFsdWVCJywgdGhpcmQ6J0FwcGxlJywgZm91cnRoOnRydWV9XG5cblx0XHRcdEBjb250cm9sLnZhbHVlID0gbnVsbFxuXHRcdFx0ZXhwZWN0KEBjb250cm9sLnZhbHVlKS50by5lcWwge2ZpcnN0Oid2YWx1ZUEnLCBzZWNvbmQ6J3ZhbHVlQicsIHRoaXJkOidBcHBsZScsIGZvdXJ0aDp0cnVlfVxuXG5cblx0XHR0ZXN0IFwiY29sbGFwc2VkIGJ5IGRlZmF1bHRcIiwgKCktPlxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOidncm91cCcsIHdpZHRoOic3MCUnLCBmaWVsZE1hcmdpbjoxMCwgc3RhcnRDb2xsYXBzZWQ6dHJ1ZSwgQGZpZWxkc30pLmFwcGVuZFRvKHNhbmRib3gpXG5cdFx0XHRleHBlY3QoQGNvbnRyb2wuZWxzLmlubmVyd3JhcC5yYXcpLnRvLmJlLmRpc3BsYXllZFxuXHRcdFx0ZXhwZWN0KGZpZWxkLmVscy5pbm5lcndyYXAucmF3KS5ub3QudG8uYmUuZGlzcGxheWVkXG5cdFx0XHRcblx0XHRcdEBjb250cm9sLnN0YXRlLmNvbGxhcHNlZCA9IHRydWVcblx0XHRcdGZpZWxkLnN0YXRlLmNvbGxhcHNlZCA9IGZhbHNlXG5cdFx0XHRleHBlY3QoQGNvbnRyb2wuZWxzLmlubmVyd3JhcC5yYXcpLm5vdC50by5iZS5kaXNwbGF5ZWRcblx0XHRcdGV4cGVjdChmaWVsZC5lbHMuaW5uZXJ3cmFwLnJhdykudG8uYmUuZGlzcGxheWVkXG5cblx0XHRcdEBjb250cm9sLmVscy5jb2xsYXBzZS5lbWl0ICdjbGljaydcblx0XHRcdGZpZWxkLmVscy5jb2xsYXBzZS5lbWl0ICdjbGljaydcblx0XHRcdGV4cGVjdChAY29udHJvbC5lbHMuaW5uZXJ3cmFwLnJhdykudG8uYmUuZGlzcGxheWVkXG5cdFx0XHRleHBlY3QoZmllbGQuZWxzLmlubmVyd3JhcC5yYXcpLm5vdC50by5iZS5kaXNwbGF5ZWRcblxuXG5cdFx0dGVzdCBcImRlZmF1bHQgdmFsdWVcIiwgKCktPlxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHt0eXBlOidncm91cCcsIHdpZHRoOic3MCUnLCBmaWVsZE1hcmdpbjoxMCwgQGZpZWxkcywgdmFsdWU6e2ZpcnN0OidmaXJzdFZhbHVlJywgdGhpcmQ6J0JhbmFuYSd9fSlcblx0XHRcdGV4cGVjdChmaWVsZC52YWx1ZSkudG8uZXFsIHtmaXJzdDonZmlyc3RWYWx1ZScsIHNlY29uZDonJywgdGhpcmQ6J0JhbmFuYScsIGZvdXJ0aDpmYWxzZX1cblx0XHRcblx0XHQjIHRlc3QgXCJpbmxpbmUgbW9kZVwiLCAoKS0+XG5cdFx0IyBcdGZpZWxkID0gcXVpY2tmaWVsZCh7dHlwZTonZ3JvdXAnLCB3aWR0aDonNzAlJywgZmllbGRNYXJnaW46MTAsIEBmaWVsZHMsIHZhbHVlOntmaXJzdDonZmlyc3RWYWx1ZScsIHRoaXJkOidCYW5hbmEnfX0pXG5cdFx0IyBcdGV4cGVjdChmaWVsZC52YWx1ZSkudG8uZXFsIHtmaXJzdDonZmlyc3RWYWx1ZScsIHNlY29uZDonJywgdGhpcmQ6J0JhbmFuYScsIGZvdXJ0aDpmYWxzZX1cblxuXG5cdHN1aXRlIFwicmVwZWF0ZXIgZmllbGRcIiwgKCktPlxuXHRcdHNldHVwIGhlbHBlcnMuYWRkRGl2aWRlclxuXHRcdHN1aXRlU2V0dXAgKCktPlxuXHRcdFx0aGVscGVycy5hZGREaXZpZGVyKDQwKVxuXHRcdFx0QGZpZWxkcyA9IFxuXHRcdFx0XHRmaXJzdDpcblx0XHRcdFx0XHR0eXBlOiAndGV4dCdcblx0XHRcdFx0XHRuYW1lOiAnZmlyc3QnXG5cdFx0XHRcdFx0bGFiZWw6ICdGaXJzdCdcblx0XHRcdFx0XHR3aWR0aDogJzQ5JSdcblx0XHRcdFx0c2Vjb25kOlxuXHRcdFx0XHRcdHR5cGU6ICd0ZXh0J1xuXHRcdFx0XHRcdG5hbWU6ICdzZWNvbmQnXG5cdFx0XHRcdFx0bGFiZWw6ICdTZWNvbmQnXG5cdFx0XHRcdFx0d2lkdGg6ICc0OSUnXG5cdFx0XHRcblx0XHRcdEBjb250cm9sID0gcXVpY2tmaWVsZCh7dHlwZToncmVwZWF0ZXInLCBsYWJlbDonQmFzaWMgUmVwZWF0ZXInLCB3aWR0aDonNzAlJywgZmllbGRNYXJnaW46MTAsIG51bWJlcmluZzp0cnVlLCBjbG9uZWFibGU6dHJ1ZSwgZHJhZ2Ryb3A6dHJ1ZSwgQGZpZWxkc30pLmFwcGVuZFRvKHNhbmRib3gpXG5cblx0XHR0ZXN0IFwiYmxvY2tcIiwgKCktPlxuXHRcdFx0ZXhwZWN0KEBjb250cm9sLnZhbHVlKS50by5lcWwgW11cblx0XHRcdGV4cGVjdChAY29udHJvbC5zdGF0ZS5pbnRlcmFjdGVkKS50by5lcXVhbCBmYWxzZVxuXHRcdFx0XG5cdFx0XHRAY29udHJvbC5lbHMuYWRkQnV0dG9uLmVtaXQgJ2NsaWNrJ1xuXHRcdFx0ZXhwZWN0KEBjb250cm9sLnZhbHVlKS50by5lcWwgW3tmaXJzdDonJywgc2Vjb25kOicnfV1cblx0XHRcdGV4cGVjdChAY29udHJvbC5zdGF0ZS5pbnRlcmFjdGVkKS50by5lcXVhbCB0cnVlXG5cblx0XHRcdEBjb250cm9sLnZhbHVlID0ge2ZpcnN0OidhYmMnLCBzZWNvbmQ6J2RlZid9XG5cdFx0XHRleHBlY3QoQGNvbnRyb2wudmFsdWUpLnRvLmVxbCBbe2ZpcnN0OicnLCBzZWNvbmQ6Jyd9LCB7Zmlyc3Q6J2FiYycsIHNlY29uZDonZGVmJ31dXG5cdFx0XHRleHBlY3QoQGNvbnRyb2wuX3ZhbHVlWzBdLmVscy5sYWJlbC50ZXh0KS50by5lcXVhbCAnSXRlbSAxJ1xuXHRcdFx0ZXhwZWN0KEBjb250cm9sLl92YWx1ZVsxXS5lbHMubGFiZWwudGV4dCkudG8uZXF1YWwgJ0l0ZW0gMidcblxuXHRcdFx0QGNvbnRyb2wuX3ZhbHVlWzBdLmVscy5yZW1vdmUuZW1pdCAnY2xpY2snXG5cdFx0XHRleHBlY3QoQGNvbnRyb2wudmFsdWUpLnRvLmVxbCBbe2ZpcnN0OidhYmMnLCBzZWNvbmQ6J2RlZid9XVxuXHRcdFx0ZXhwZWN0KEBjb250cm9sLl92YWx1ZVswXS5lbHMubGFiZWwudGV4dCkudG8uZXF1YWwgJ0l0ZW0gMSdcblx0XHRcdFxuXHRcdFx0QGNvbnRyb2wudmFsdWUgPSBbe2ZpcnN0OidBQkMnfSwge3NlY29uZDonREVGJ31dXG5cdFx0XHRleHBlY3QoQGNvbnRyb2wudmFsdWUpLnRvLmVxbCBbe2ZpcnN0OidBQkMnLCBzZWNvbmQ6J2RlZid9LCB7Zmlyc3Q6JycsIHNlY29uZDonREVGJ31dXG5cblxuXHRcdHRlc3QgXCJpbmxpbmVcIiwgKCktPlxuXHRcdFx0ZmllbGQgPSBxdWlja2ZpZWxkKHtcblx0XHRcdFx0dHlwZToncmVwZWF0ZXInXG5cdFx0XHRcdGxhYmVsOidJbmxpbmUgUmVwZWF0ZXInXG5cdFx0XHRcdHdpZHRoOic3MCUnXG5cdFx0XHRcdGZpZWxkTWFyZ2luOjEwXG5cdFx0XHRcdG51bWJlcmluZzp0cnVlXG5cdFx0XHRcdGF1dG9SZW1vdmVFbXB0eTogdHJ1ZVxuXHRcdFx0XHRkcmFnZHJvcDogdHJ1ZVxuXHRcdFx0XHRzdHlsZTonaW5saW5lJ1xuXHRcdFx0XHR2YWx1ZTogW3tmaXJzdDonYWJjJywgc2Vjb25kOicxMjMnfSwge3NlY29uZDonNDU2J31dXG5cdFx0XHRcdGZpZWxkczpcblx0XHRcdFx0XHRmaXJzdDogZXh0ZW5kKHthdXRvV2lkdGg6dHJ1ZX0sIEBmaWVsZHMuZmlyc3QpXG5cdFx0XHRcdFx0c2Vjb25kOiBleHRlbmQoe2F1dG9XaWR0aDp0cnVlfSwgQGZpZWxkcy5zZWNvbmQpXG5cdFx0XHR9KS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cdFx0XHRleHBlY3QoZmllbGQudmFsdWUpLnRvLmVxbCBbXG5cdFx0XHRcdHtmaXJzdDonYWJjJywgc2Vjb25kOicxMjMnfVxuXHRcdFx0XHR7Zmlyc3Q6JycsIHNlY29uZDonNDU2J31cblx0XHRcdF1cblxuXG5cdFx0dGVzdCBcImlubGluZSBzaW5nbGVNb2RlXCIsICgpLT5cblx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh7XG5cdFx0XHRcdHR5cGU6J3JlcGVhdGVyJ1xuXHRcdFx0XHRsYWJlbDonSW5saW5lIFJlcGVhdGVyJ1xuXHRcdFx0XHR3aWR0aDonNzAlJ1xuXHRcdFx0XHRmaWVsZE1hcmdpbjogMTBcblx0XHRcdFx0YXV0b1dpZHRoOiBmYWxzZVxuXHRcdFx0XHRhdXRvUmVtb3ZlRW1wdHk6IHRydWVcblx0XHRcdFx0bnVtYmVyaW5nOnRydWVcblx0XHRcdFx0c3R5bGU6J2lubGluZSdcblx0XHRcdFx0c2luZ2xlTW9kZTogdHJ1ZVxuXHRcdFx0XHRkcmFnZHJvcDogdHJ1ZVxuXHRcdFx0XHRncm91cFNldHRpbmdzOiBpbmxpbmU6IHdpZHRoOiAnMTAwJSdcblx0XHRcdFx0ZmllbGRzOiBleHRlbmQuY2xvbmUoQGZpZWxkcy5maXJzdCwge3dpZHRoOicxMDAlJ30pXG5cdFx0XHR9KS5hcHBlbmRUbyhzYW5kYm94KVxuXG5cdFx0XHRleHBlY3QoZmllbGQudmFsdWUpLnRvLmVxbCBbXVxuXHRcdFx0ZmllbGQudmFsdWUgPSBbJ2FiYycsICcxMjMnXVxuXHRcdFx0ZXhwZWN0KGZpZWxkLnZhbHVlKS50by5lcWwgWydhYmMnLCAnMTIzJ11cblx0XHRcdGZpZWxkLnZhbHVlID0gJ2RlZidcblx0XHRcdGV4cGVjdChmaWVsZC52YWx1ZSkudG8uZXFsIFsnYWJjJywgJzEyMycsICdkZWYnXVxuXG5cblx0XHR0ZXN0IFwiZHluYW1pY0xhYmVsXCIsICgpLT5cblx0XHRcdGZpZWxkID0gcXVpY2tmaWVsZCh7XG5cdFx0XHRcdHR5cGU6J3JlcGVhdGVyJ1xuXHRcdFx0XHRsYWJlbDonSW5saW5lIFJlcGVhdGVyJ1xuXHRcdFx0XHR3aWR0aDonNzAlJ1xuXHRcdFx0XHRkeW5hbWljTGFiZWw6ICdmaXJzdCdcblx0XHRcdFx0ZmllbGRNYXJnaW46MTBcblx0XHRcdFx0YXV0b1JlbW92ZUVtcHR5OiB0cnVlXG5cdFx0XHRcdGRyYWdkcm9wOiB0cnVlXG5cdFx0XHRcdHZhbHVlOiBbe2ZpcnN0OidhYmMnLCBzZWNvbmQ6JzEyMyd9LCB7c2Vjb25kOic0NTYnfV1cblx0XHRcdFx0ZmllbGRzOlxuXHRcdFx0XHRcdGZpcnN0OiBleHRlbmQoe2F1dG9XaWR0aDp0cnVlfSwgQGZpZWxkcy5maXJzdClcblx0XHRcdFx0XHRzZWNvbmQ6IGV4dGVuZCh7YXV0b1dpZHRoOnRydWV9LCBAZmllbGRzLnNlY29uZClcblx0XHRcdH0pLmFwcGVuZFRvKHNhbmRib3gpXG5cblx0XHRcdGV4cGVjdChmaWVsZC5fdmFsdWVbMF0uZWwuY2hpbGQubGFiZWwudGV4dCkudG8uZXF1YWwgJ2FiYydcblx0XHRcdGV4cGVjdChmaWVsZC5fdmFsdWVbMV0uZWwuY2hpbGQubGFiZWwudGV4dCkudG8uZXF1YWwgJydcblxuXHRcdFx0ZmllbGQudmFsdWUgPSBbe2ZpcnN0OidkZWYnfSwge2ZpcnN0OicxMjMnfV1cblx0XHRcdGV4cGVjdChmaWVsZC5fdmFsdWVbMF0uZWwuY2hpbGQubGFiZWwudGV4dCkudG8uZXF1YWwgJ2RlZidcblx0XHRcdGV4cGVjdChmaWVsZC5fdmFsdWVbMV0uZWwuY2hpbGQubGFiZWwudGV4dCkudG8uZXF1YWwgJzEyMydcblx0XHRcdCMgZXhwZWN0KGZpZWxkLnZhbHVlKS50by5lcWwgW1xuXHRcdFx0IyBcdHtmaXJzdDonYWJjJywgc2Vjb25kOicxMjMnfVxuXHRcdFx0IyBcdHtmaXJzdDonJywgc2Vjb25kOic0NTYnfVxuXHRcdFx0IyBdXG5cblxuXHRzdWl0ZSBcIi5jb25maWcoKVwiLCAoKS0+XG5cdFx0dGVzdCBcImNyZWF0ZXMgYSBuZXcgY29weSBvZiBRdWlja0ZpZWxkIHdpdGggc2V0dGluZyBvdmVycmlkZXMgYW5kIHRlbXBsYXRlIG92ZXJyaWRlc1wiLCAoKS0+XG5cdFx0XHRxdWlja2ZpZWxkMiA9IHF1aWNrZmllbGQuY29uZmlnKFxuXHRcdFx0XHRnbG9iYWw6XG5cdFx0XHRcdFx0Zm9udEZhbWlseTogJ2hlbHZldGljYSdcblx0XHRcdFx0XHR3aWR0aDogJzUwJSdcblx0XHRcdFx0XHRyZXF1aXJlZDogdHJ1ZVxuXHRcdFx0XHRcdGJvcmRlcjogJzAgMCAycHggMCdcblx0XHRcdFx0XHRtYXJnaW46ICcwIDEwcHggMTBweCAwJ1xuXHRcdFx0XHRcdGZvbnRTaXplOiAxM1xuXHRcdFx0XHRcdGlucHV0UGFkZGluZzogOFxuXG5cdFx0XHRcdHRleHQ6XG5cdFx0XHRcdFx0aGVpZ2h0OiA0MFxuXHRcdFx0XHRcdGF1dG9XaWR0aDogdHJ1ZVxuXHRcdFx0XHRcdGlucHV0UGFkZGluZzogMFxuXHRcdFx0XHRcdGNoZWNrbWFyazogZmFsc2Vcblx0XHRcdFx0XHRtaW5MZW5ndGg6IDJcblx0XHRcdFx0XHRtYXNrOlxuXHRcdFx0XHRcdFx0cGxhY2Vob2xkZXI6ICcqJ1xuXHRcdFx0XHRcdFx0ZGVjaW1hbDogdHJ1ZVxuXG5cdFx0XHQsXG5cdFx0XHRcdGdsb2JhbDpcblx0XHRcdFx0XHRmaWVsZDpcblx0XHRcdFx0XHRcdG9wdGlvbnM6IHN0eWxlOlxuXHRcdFx0XHRcdFx0XHR2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJ1xuXG5cdFx0XHRcdFx0XHRjaGlsZHJlbjpcblx0XHRcdFx0XHRcdFx0bGFiZWw6IG9wdGlvbnM6IHN0eWxlOlxuXHRcdFx0XHRcdFx0XHRcdCRmb2N1czogY29sb3I6IENPTE9SUy5ncmVlblxuXHRcdFx0XHRcdFx0XHRpbm5lcndyYXA6IG9wdGlvbnM6IHN0eWxlOlxuXHRcdFx0XHRcdFx0XHRcdCRmb2N1czogYm9yZGVyQ29sb3I6IENPTE9SUy5ncmVlblxuXHRcdFx0XHRcblx0XHRcdFx0dGV4dDpcblx0XHRcdFx0XHRkZWZhdWx0OiBjaGlsZHJlbjpcblx0XHRcdFx0XHRcdGxhYmVsOiBvcHRpb25zOiBzdHlsZTpcblx0XHRcdFx0XHRcdFx0Zm9udFdlaWdodDogNzAwXG5cdFx0XHRcdFxuXHRcdFx0XHRjaG9pY2U6XG5cdFx0XHRcdFx0Y2hvaWNlOiBvcHRpb25zOiBzdHlsZTpcblx0XHRcdFx0XHRcdCRzZWxlY3RlZDogY29sb3I6IENPTE9SUy5ncmVlblxuXHRcdFx0KVxuXG5cdFx0XHRleHBlY3QocXVpY2tmaWVsZDIpLm5vdC50by5lcXVhbChxdWlja2ZpZWxkKVxuXHRcdFx0dGV4dEEgPSBxdWlja2ZpZWxkKHR5cGU6J3RleHQnLCBsYWJlbDondGV4dEEnKS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0dGV4dEIgPSBxdWlja2ZpZWxkMih0eXBlOid0ZXh0JywgbGFiZWw6J3RleHRCJywgYXV0b1dpZHRoOmZhbHNlKS5hcHBlbmRUbyhzYW5kYm94KTsgaGVscGVycy5hZGREaXZpZGVyKClcblx0XHRcdHRleHRDID0gcXVpY2tmaWVsZDIodHlwZTondGV4dCcsIGxhYmVsOid0ZXh0QycsIG1hc2s6e3BhdHRlcm46J05VTUJFUicsIHN1ZmZpeDonJSd9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0dGV4dEQgPSBxdWlja2ZpZWxkMih0eXBlOid0ZXh0JywgbGFiZWw6J3RleHREJywgbWFzazp7cGF0dGVybjonREFURScsIHN1ZmZpeDonJSd9KS5hcHBlbmRUbyhzYW5kYm94KVxuXHRcdFx0Y2hvaWNlID0gcXVpY2tmaWVsZDIodHlwZTonY2hvaWNlJywgY2hvaWNlczpbJ0FwcGxlJywgJ0JhbmFuYScsICdPcmFuZ2UnXSkuYXBwZW5kVG8oc2FuZGJveClcblx0XHRcdFxuXHRcdFx0ZXhwZWN0KHRleHRBLmVsLnN0eWxlICdmb250RmFtaWx5JykudG8uZXF1YWwgcXVpY2tmaWVsZC5GaWVsZDo6Z2xvYmFsRGVmYXVsdHMuZm9udEZhbWlseVxuXHRcdFx0ZXhwZWN0KHRleHRCLmVsLnN0eWxlICdmb250RmFtaWx5JykudG8uZXF1YWwgJ2hlbHZldGljYSdcblx0XHRcdGV4cGVjdCh0ZXh0QS5lbC5zdHlsZSAndmVydGljYWxBbGlnbicpLnRvLmVxdWFsICd0b3AnXG5cdFx0XHRleHBlY3QodGV4dEIuZWwuc3R5bGUgJ3ZlcnRpY2FsQWxpZ24nKS50by5lcXVhbCAnbWlkZGxlJ1xuXHRcdFx0ZXhwZWN0KHRleHRBLmVsLnN0eWxlUGFyc2VkICdtYXJnaW5Cb3R0b20nKS50by5lcXVhbCAwXG5cdFx0XHRleHBlY3QodGV4dEIuZWwuc3R5bGVQYXJzZWQgJ21hcmdpbkJvdHRvbScpLnRvLmVxdWFsIDEwXG5cdFx0XHRleHBlY3QodGV4dEEuZWwuc3R5bGVTYWZlICd3aWR0aCcsdHJ1ZSkudG8uZXF1YWwgJzEwMCUnXG5cdFx0XHRleHBlY3QodGV4dEIuZWwuc3R5bGVTYWZlICd3aWR0aCcsdHJ1ZSkudG8uZXF1YWwgJzUwJSdcblx0XHRcdGV4cGVjdCh0ZXh0QS5lbC5jaGlsZC5sYWJlbC5zdHlsZVBhcnNlZCAnZm9udFdlaWdodCcsdHJ1ZSkudG8uZXF1YWwgNjAwXG5cdFx0XHRleHBlY3QodGV4dEIuZWwuY2hpbGQubGFiZWwuc3R5bGVQYXJzZWQgJ2ZvbnRXZWlnaHQnLHRydWUpLnRvLmVxdWFsIDcwMFxuXHRcdFx0ZXhwZWN0KHRleHRBLmVsLmhlaWdodCkudG8uZXF1YWwgcXVpY2tmaWVsZC5GaWVsZC50ZXh0OjpkZWZhdWx0cy5oZWlnaHRcblx0XHRcdGV4cGVjdCh0ZXh0Qi5lbC5oZWlnaHQpLnRvLmVxdWFsIDQwXG5cdFx0XHRleHBlY3QodGV4dEEuZWwuY2hpbGQuY2hlY2ttYXJrKS50by5iZS5vYmplY3QoKVxuXHRcdFx0ZXhwZWN0KHRleHRCLmVsLmNoaWxkLmNoZWNrbWFyaykubm90LnRvLmJlLm9iamVjdCgpXG5cdFx0XHRleHBlY3QoaGVscGVycy5nZXRCb3JkZXJTaWRlcyh0ZXh0QS5lbHMuaW5uZXJ3cmFwKSkudG8uZXFsIHt0b3A6JzFweCcsIGxlZnQ6JzFweCcsIHJpZ2h0OicxcHgnLCBib3R0b206JzFweCd9XG5cdFx0XHRleHBlY3QoaGVscGVycy5nZXRCb3JkZXJTaWRlcyh0ZXh0Qi5lbHMuaW5uZXJ3cmFwKSkudG8uZXFsIHt0b3A6JzBweCcsIGxlZnQ6JzBweCcsIHJpZ2h0OicwcHgnLCBib3R0b206JzJweCd9XG5cdFx0XHRleHBlY3QodGV4dEEudmFsaWRhdGUoKSkudG8uZXF1YWwgdHJ1ZVxuXHRcdFx0ZXhwZWN0KHRleHRCLnZhbGlkYXRlKCkpLnRvLmVxdWFsIGZhbHNlXG5cblx0XHRcdGhlbHBlcnMuc2ltdWxhdGVLZXlzKHRleHRBLmVsLmNoaWxkLmlucHV0LnJhdywgJ2FiYycpXG5cdFx0XHRoZWxwZXJzLnNpbXVsYXRlS2V5cyh0ZXh0Qi5lbC5jaGlsZC5pbnB1dC5yYXcsICdhYmMnKVxuXHRcdFx0ZXhwZWN0KHRleHRBLnZhbGlkYXRlKCkpLnRvLmVxdWFsIHRydWVcblx0XHRcdGV4cGVjdCh0ZXh0Qi52YWxpZGF0ZSgpKS50by5lcXVhbCB0cnVlXG5cblx0XHRcdGhlbHBlcnMuc2ltdWxhdGVLZXlzKHRleHRELmVsLmNoaWxkLmlucHV0LnJhdywgJzEnKVxuXHRcdFx0ZXhwZWN0KHRleHRELnZhbHVlKS50by5lcXVhbCAnMSovKiovKioqKidcblxuXHRcdFx0RE9NLmJhdGNoKFt0ZXh0QS5lbHMubGFiZWwsIHRleHRCLmVscy5sYWJlbCwgdGV4dEEuZWxzLmlubmVyd3JhcCwgdGV4dEIuZWxzLmlubmVyd3JhcF0pLnN0eWxlICd0cmFuc2l0aW9uJywgbnVsbFxuXHRcdFx0dGV4dEEuc3RhdGUuZm9jdXNlZCA9IHRleHRCLnN0YXRlLmZvY3VzZWQgPSB0cnVlXG5cdFx0XHRleHBlY3QodGV4dEEuZWwuY2hpbGQubGFiZWwucmF3KS50by5oYXZlLnN0eWxlICdjb2xvcicsIENPTE9SUy5vcmFuZ2Vcblx0XHRcdGV4cGVjdCh0ZXh0Qi5lbC5jaGlsZC5sYWJlbC5yYXcpLnRvLmhhdmUuc3R5bGUgJ2NvbG9yJywgQ09MT1JTLmdyZWVuXG5cdFx0XHRleHBlY3QodGV4dEEuZWwuY2hpbGQuaW5uZXJ3cmFwLnJhdykudG8uaGF2ZS5zdHlsZSAnYm9yZGVyQ29sb3InLCBDT0xPUlMub3JhbmdlXG5cdFx0XHRleHBlY3QodGV4dEIuZWwuY2hpbGQuaW5uZXJ3cmFwLnJhdykudG8uaGF2ZS5zdHlsZSAnYm9yZGVyQ29sb3InLCBDT0xPUlMuZ3JlZW5cblx0XHRcdHRleHRBLmJsdXIoKVxuXHRcdFx0dGV4dEIuYmx1cigpXG5cblx0XHRcdGNob2ljZS52YWx1ZSA9ICdCYW5hbmEnXG5cdFx0XHRleHBlY3QoY2hvaWNlLnZhbHVlUmF3LmxhYmVsKS50by5lcXVhbCAnQmFuYW5hJ1xuXHRcdFx0ZXhwZWN0KGNob2ljZS52YWx1ZVJhdy5lbC5yYXcpLnRvLmhhdmUuc3R5bGUgJ2NvbG9yJywgQ09MT1JTLmdyZWVuXG5cblxuXG5cblxuXG5cblxuXG4iXSwibmFtZXMiOlsia2V5Ym9hcmQiLCJLZXlib2FyZCIsIlVTX0VOR0xJU0giLCJ0YXJnZXQiLCJrZXlzIiwidmFsdWUiLCJmb2N1cyIsImRpc3BhdGNoRXZlbnRzRm9ySW5wdXQiLCJkaXNwYXRjaEV2ZW50c0ZvckFjdGlvbiIsIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiUkVHRVhfTEVOX1ZBTCIsIlJFR0VYX0RJR0lUUyIsIlJFR0VYX1NQQUNFIiwiUkVHRVhfS0VCQUIiLCJJTVBPUlRBTlQiLCJQT1NTSUJMRV9QUkVGSVhFUyIsIlJFUVVJUkVTX1VOSVRfVkFMVUUiLCJRVUFEX1NIT1JUSEFORFMiLCJESVJFQ1RJT05TIiwiZm9yRWFjaCIsInByb3BlcnR5IiwiZGlyZWN0aW9uIiwiaSIsImxlbiIsInB1c2giLCJsZW5ndGgiLCJTQU1QTEVfU1RZTEUiLCJzdHlsZUNvbmZpZyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwiaW5jbHVkZXMiLCJpdGVtIiwiaW5kZXhPZiIsImlzSXRlcmFibGUiLCJub2RlVHlwZSIsInRvS2ViYWJDYXNlIiwic3RyaW5nIiwicmVwbGFjZSIsImUiLCJsZXR0ZXIiLCJjb25jYXQiLCJ0b0xvd2VyQ2FzZSIsImlzUHJvcFN1cHBvcnRlZCIsImlzVmFsdWVTdXBwb3J0ZWQiLCJ3aW5kb3ciLCJDU1MiLCJzdXBwb3J0cyIsImdldFByZWZpeCIsInNraXBJbml0aWFsQ2hlY2siLCJqIiwibGVuMSIsInByZWZpeCIsIm5vcm1hbGl6ZVByb3BlcnR5Iiwibm9ybWFsaXplVmFsdWUiLCJ0ZXN0Iiwic29ydCIsImFycmF5IiwiZ3JlYXQiLCJsZXNzIiwicGl2b3QiLCJoYXNoIiwiaHNoIiwiY2hhckNvZGVBdCIsInJ1bGVUb1N0cmluZyIsInJ1bGUiLCJpbXBvcnRhbnQiLCJvdXRwdXQiLCJwcm9wIiwicHJvcHMiLCJPYmplY3QiLCJpbmxpbmVTdHlsZUNvbmZpZyIsImNyZWF0ZSIsImlubGluZVN0eWxlIiwidmFsdWVUb1N0b3JlIiwibGV2ZWwiLCJjb25maWciLCJzdHlsZUVsIiwiaWQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJlbCIsImNvbnRlbnQiLCJjYWNoZSIsInRleHRDb250ZW50IiwiY2xlYXJJbmxpbmVTdHlsZSIsImtleSIsInZlcnNpb24iLCJfcXVpY2tjc3MiLCJpbmRleCIsInF1aWNrY3NzIiwidGFyZ2V0RWwiLCJjb21wdXRlZFN0eWxlIiwic3ViRWwiLCJzdWJQcm9wZXJ0eSIsInN1YlZhbHVlIiwiX2NvbXB1dGVkU3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwic2V0UHJvcGVydHkiLCJhbmltYXRpb24iLCJuYW1lJCQxIiwiZnJhbWVzIiwiZnJhbWUiLCJnZW5lcmF0ZWQiLCJydWxlcyIsInJlZ2lzdGVyIiwiY2xhc3NOYW1lIiwicmVmIiwiY2xlYXJSZWdpc3RlcmVkIiwiVU5TRVQiLCJzdXBwb3J0c1Byb3BlcnR5IiwiX2V4dGVuZCIsImlzQXJyYXkiLCJpc09iamVjdCIsIl9zaG91bGREZWVwRXh0ZW5kIiwiQXJyYXkiLCJ0b1N0cmluZyIsImNhbGwiLCJzaG91bGREZWVwRXh0ZW5kIiwib3B0aW9ucyIsInBhcmVudEtleSIsImRlZXAiLCJub3REZWVwIiwiZGVlcE9ubHkiLCJleHRlbmQiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlVmFsdWUiLCJzdWJUYXJnZXQiLCJ0YXJnZXRWYWx1ZSIsImFsbG93TnVsbCIsIm51bGxEZWxldGVzIiwibm90S2V5cyIsIm93biIsImhhc093blByb3BlcnR5IiwiZ2xvYmFsRmlsdGVyIiwiZmlsdGVycyIsImdsb2JhbFRyYW5zZm9ybSIsInRyYW5zZm9ybXMiLCJtb2RpZmllcnMiLCJuZXdCdWlsZGVyIiwibm9ybWFsaXplS2V5cyIsInByaW1hcnlCdWlsZGVyIiwiaXNCYXNlIiwiX2J1aWxkZXIiLCJidWlsZGVyIiwidGhlVGFyZ2V0IiwiJF9sZW4iLCJhcmd1bWVudHMiLCIkX2kiLCJzaGlmdCIsImRlZmluZVByb3BlcnRpZXMiLCJnZXQiLCJfIiwidHJhbnNmb3JtIiwiZmlsdGVyIiwicHJpbWFyeUJ1aWxkZXIkMSIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJkZWZpbmVQcm9wZXJ0eSIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImRlZmluZWQiLCJzdWJqZWN0Iiwib2JqZWN0Iiwib2JqZWN0UGxhaW4iLCJudW1iZXIiLCJpc05hTiIsIm51bWJlckxvb3NlIiwiTnVtYmVyIiwiaXRlcmFibGUiLCJmdW5jdGlvbl8iLCJuYXRpdmVzIiwiZnJlZXplIiwiZG9tRG9jIiwiZG9tRWwiLCJkb21UZXh0IiwiZG9tTm9kZSIsImRvbVRleHRhcmVhIiwibm9kZU5hbWUiLCJkb21JbnB1dCIsImRvbVNlbGVjdCIsImRvbUZpZWxkIiwiZG9tIiwiQVZBSUxfU0VUUyIsIkNoZWNrcyIsImFyZ3MiLCJzbGljZSIsInNldHMiLCJzZXQiLCJsb2FkIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsImFycjIiLCJpdGVyIiwiZnJvbSIsInRlbXBsYXRlIiwiZWxlbWVudCIsIklTIiwiSVNfIiwicXVpY2tEb21FbCIsIm5hbWUiLCJJUyQxIiwiUXVpY2tFbGVtZW50IiwiUXVpY2tXaW5kb3ciLCJfcXVpY2tkb20iLCJxdWlja2RvbSIsImFyZyIsInByZXZDb3VudCIsImNvdW50IiwiX3Bvc3RDcmVhdGlvbiIsImFyZ3NMZW5ndGgiLCJjaGlsZCIsImNoaWxkcmVuIiwidHlwZSIsImFwcGx5Iiwic3Bhd24iLCJ1cGRhdGVPcHRpb25zIiwiX3F1aWNrRWxlbWVudCIsImV4aXN0aW5nIiwidGV4dCIsImFwcGVuZCIsImh0bWwiLCJpbm5lckhUTUwiLCJjb250YWluZXIiLCJjaGlsZE5vZGVzIiwiYmF0Y2giLCJpc1F1aWNrRWwiLCJpc0VsIiwiaW5pdCIsIlF1aWNrRWxlbWVudF8iLCJRdWlja1dpbmRvd18iLCJyZW1vdmVJdGVtIiwiaXRlbUluZGV4Iiwic3BsaWNlIiwibm9ybWFsaXplRWxlbWVudEFyZyIsImlzU3RhdGVTdHlsZSIsInJlZ2lzdGVyU3R5bGUiLCJjYWNoZWQiLCJzdHlsZUNhY2hlIiwiZm5zIiwiX2NsYXNzIiwidmFsdWVzIiwiUkVHRVhfV0hJVEVTUEFDRSIsIm9uXyIsImV2ZW50TmFtZXMiLCJjYWxsYmFjayIsInVzZUNhcHR1cmUiLCJpc1ByaXZhdGUiLCJfdGhpcyIsImNhbGxiYWNrUmVmIiwic3BsaXQiLCJfZXZlbnRDYWxsYmFja3MiLCJfX3JlZnMiLCJmdW5jdGlvbiIsIl9pbnNlcnRlZCIsIl9wYXJlbnQiLCJldmVudE5hbWUiLCJiYXNlIiwiX2xpc3RlblRvIiwiZXZlbnQiLCJfaW52b2tlSGFuZGxlcnMiLCJvbmNlIiwiX3RoaXMyIiwiX29uY2VDYWxsYmFjayIsIm9uIiwib25jZUNhbGxiYWNrIiwib2ZmIiwib2ZmXyIsIl90aGlzMyIsImVtaXQiLCJidWJibGVzIiwidW5kZWZpbmVkIiwiY2FuY2VsYWJsZSIsImRhdGEiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJlbWl0UHJpdmF0ZSIsImNhbGxiYWNrcyIsImNiIiwiZXZlbnROYW1lVG9MaXN0ZW5Gb3IiLCJsaXN0ZW5NZXRob2QiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnRzIiwicmVzdWx0IiwicmVsYXRlZCIsImN1cnJlbnRTdGF0ZVN0eWxlIiwidGhlbiIsImZvcmNlU3R5bGUiLCJzdHlsZVNhZmUiLCJza2lwQ29tcHV0ZWQiLCJjb21wdXRlZCIsInNhbXBsZSIsInN0eWxlUGFyc2VkIiwicGFyc2VGbG9hdCIsInJlY2FsY1N0eWxlIiwicmVjYWxjQ2hpbGRyZW4iLCJ0YXJnZXRTdHlsZXMiLCJfcmVzb2x2ZUZuU3R5bGVzIiwiX2dldEFjdGl2ZVN0YXRlcyIsIl9jaGlsZHJlbiIsInN0YXRlIiwic3RhdGVzIiwiX3N0YXRlIiwiX3N0YXRlU2hhcmVkIiwiX3N0YXRlcyIsIl9zdHlsZXMiLCJoaWRlIiwic2hvdyIsImRpc3BsYXkiLCJvcmllbnRhdGlvbkdldHRlciIsIndpZHRoIiwiaGVpZ2h0IiwiYXNwZWN0UmF0aW9HZXR0ZXIiLCJzdHlsZSQxIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiUXVpY2tXaW5kb3ckMSIsIlF1aWNrV2luZG93JDIiLCJyYXciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJNZWRpYVF1ZXJ5IiwiUlVMRV9ERUlMSU1JVEVSIiwiTWVkaWFRdWVyeSQxIiwidGVzdFJ1bGUiLCJwYXJzZVF1ZXJ5IiwicXVlcnlTdHJpbmciLCJxdWVyeVNwbGl0IiwicGFyZW50IiwicGFyZW50TWF0Y2hpbmciLCJtYXAiLCJnZXR0ZXIiLCJrZXlQcmVmaXgiLCJtYXgiLCJtaW4iLCJvcmllbnRhdGlvbiIsImFzcGVjdFJhdGlvIiwicGFyc2VkVmFsdWUiLCJzdHJpbmdWYWx1ZSIsInF1ZXJ5IiwiY3VycmVudFZhbHVlIiwicGFzc2VkIiwiU3RhdGVDaGFpbiIsIlN0YXRlQ2hhaW4kMSIsImpvaW4iLCJ3aXRob3V0IiwiaXNBcHBsaWNhYmxlIiwib3RoZXJBY3RpdmUiLCJhY3RpdmUiLCJCQVNFX1NUQVRFX1RSSUdHRVJTIiwiQ0FDSEVEX0ZOX0lOU0VSVEVEIiwiX25vcm1hbGl6ZU9wdGlvbnMiLCJiYXNlMSIsImJhc2UyIiwiYmFzZTMiLCJiYXNlNCIsImJhc2U1IiwicmVsYXRlZEluc3RhbmNlIiwiY2xhc3MiLCJ1cmwiLCJocmVmIiwidW5wYXNzYWJsZVN0YXRlcyIsInBhc3NTdGF0ZVRvQ2hpbGRyZW4iLCJwYXNzRGF0YVRvQ2hpbGRyZW4iLCJzdGF0ZVRyaWdnZXJzIiwiY2xvbmUiLCJfcGFyc2VUZXh0cyIsIl90ZXh0cyIsIl9wYXJzZVN0eWxlcyIsInN0eWxlcyIsInN0b3JlIiwiX21lZGlhU3RhdGVzIiwiX3Byb3ZpZGVkU3RhdGVzIiwiX3Byb3ZpZGVkU3RhdGVzU2hhcmVkIiwiX2ZsYXR0ZW5OZXN0ZWRTdGF0ZXMiLCJzcGVjaWFsU3RhdGVzIiwic3RhdGVTdHlsZXMiLCJzdGF0ZV8iLCIkYmFzZSIsImZsYXR0ZW5OZXN0ZWRTdGF0ZXMiLCJzdHlsZU9iamVjdCIsImNoYWluIiwiaGFzTm9uU3RhdGVQcm9wcyIsInN0YXRlQ2hhaW4iLCJzdHlsZUtleXMiLCJ0ZXh0cyIsIl9hcHBseU9wdGlvbnMiLCJoYW5kbGVyIiwibWV0aG9kIiwicmVmMSIsInJlZjIiLCJhdHRyIiwic3JjIiwic2VsZWN0ZWQiLCJjaGVja2VkIiwiYXR0cnMiLCJfYXBwbHlSZWdpc3RlcmVkU3R5bGUiLCJzdHlsZUFmdGVySW5zZXJ0IiwiaW52b2tlQ29tcHV0ZXJzT25jZSIsIl9pbnZva2VkQ29tcHV0ZXJzIiwicmVjYWxjT25SZXNpemUiLCJtZXRob2RzIiwiY29tcHV0ZXJzIiwiYXBwbHlEYXRhIiwiX2luaXQiLCJfcnVuQ29tcHV0ZXIiLCJfYXR0YWNoU3RhdGVFdmVudHMiLCJmb3JjZSIsImRpc2FibGVyIiwiZW5hYmxlciIsInRyaWdnZXIiLCJfcHJveHlQYXJlbnQiLCJuZXdQYXJlbnQiLCJsYXN0UGFyZW50IiwicGFyZW50cyIsImRvY3VtZW50RWxlbWVudCIsIl91bnByb3h5UGFyZW50IiwibWVkaWFTdGF0ZXMiLCJyZXN1bHRzIiwiaW5pdCQxIiwiYWxpYXNlcyIsInBhcmVudHNVbnRpbCIsIl9nZXRQYXJlbnRzIiwiaXNSZWYiLCJuZXh0UGFyZW50Iiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnlBbGwiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX2dldENoaWxkUmVmcyIsImZyZXNoQ29weSIsImNoaWxkUmVmcyIsInJlZnMiLCJfY2hpbGRSZWZzIiwiX2dldEluZGV4QnlQcm9wIiwibWFpbiIsIl9maWx0ZXJFbGVtZW50cyIsInRyYXZlcnNpbmciLCJwYXJlbnROb2RlIiwibmV4dFNpYmxpbmciLCJuZXh0RWxlbWVudFNpYmxpbmciLCJuZXh0QWxsIiwic2libGluZ3MiLCJuZXh0IiwicHJldmlvdXNTaWJsaW5nIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInByZXZBbGwiLCJwcmV2U2libGluZyIsInByZXYiLCJyZXZlcnNlIiwiRFVNTVlfQVJSQVkiLCJ0YXJnZXRTdGF0ZSIsImFjdGl2ZVN0YXRlcyIsImRlc2lyZWRWYWx1ZSIsInRvZ2dsZSIsIl9zdGF0ZVBpcGVUYXJnZXQiLCJ0b2dnbGVTdGF0ZSIsInJlc2V0U3RhdGUiLCJhY3RpdmVTdGF0ZSIsInBpcGVTdGF0ZSIsInRhcmdldFN0eWxlIiwic3VwZXJpb3JTdGF0ZXMiLCJpbmNsdWRlQmFzZSIsInNraXBGbnMiLCJlbnRyeSIsImsiLCJzdXBlcmlvclN0eWxlcyIsImFkZENsYXNzIiwiX3JlbW92ZVJlZ2lzdGVyZWRTdHlsZSIsInJlc2V0VmFsdWUiLCJyZW1vdmVDbGFzcyIsIl90dXJuU3R5bGVPTiIsInNoYXJlZFN0YXRlcyIsIl9nZXRTdXBlcmlvclN0YXRlcyIsIl9nZXRTaGFyZWRTdGF0ZXMiLCJfdHVyblN0eWxlT0ZGIiwiYWN0aXZlU2hhcmVkU3RhdGVzIiwiX3R1cm5UZXh0T04iLCJ0YXJnZXRUZXh0IiwiX3R1cm5UZXh0T0ZGIiwic3RhdGVUb0V4Y2x1ZGUiLCJpbmNsdWRlU2hhcmVkU3RhdGVzIiwicGxhaW5TdGF0ZXMiLCJjYW5kaWRhdGUiLCJzdXBlcmlvciIsInRhcmdldFN0YXRlSW5kZXgiLCJzdGF0ZSQxIiwidG9UZW1wbGF0ZSIsImVsQ2xvbmUiLCJsZW4yIiwibmV3RWwiLCJjbG9uZU5vZGUiLCJwcmV2UGFyZW50IiwiX3JlbW92ZUNoaWxkIiwiX3JlZnJlc2hQYXJlbnQiLCJhcHBlbmRUbyIsInByZXBlbmQiLCJ1bnNoaWZ0IiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsInByZXBlbmRUbyIsImFmdGVyIiwibXlJbmRleCIsImluc2VydEFmdGVyIiwiYmVmb3JlIiwiZGV0YWNoIiwicmVtb3ZlIiwiZW1wdHkiLCJ3cmFwIiwiY3VycmVudFBhcmVudCIsInVud3JhcCIsImdyYW5kUGFyZW50IiwicGFyZW50Q2hpbGRyZW4iLCJwYXJlbnRTaWJsaW5nIiwiaGFzQ2xhc3MiLCJjbGFzc0xpc3QiLCJ0YXJnZXRJbmRleCIsInRvZ2dsZUNsYXNzIiwic2V0UmVmIiwidGFyZ2V0Q2hpbGQiLCJyZXBsYWNlbWVudENoaWxkIiwiaW5kZXhPZkNoaWxkIiwicmVwbGFjZUNoaWxkIiwicmVtb3ZlQ2hpbGQiLCJtYW5pcHVsYXRpb24iLCJuZXdWYWx1ZSIsInN2ZyIsImxpc3QiLCJwb3AiLCJ1cGRhdGVTdGF0ZVN0eWxlcyIsInBhcnNlZCIsInVwZGF0ZWRTdGF0ZXMiLCJ1cGRhdGVTdGF0ZVRleHRzIiwicGFzc1Rocm91Z2giLCJkZWZhdWx0cyIsImNvbXB1dGVyIiwiYXBwbGljYXRpb24iLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJhdHRyaWJ1dGVzQW5kUHJvcGVydGllcyIsIlF1aWNrRWxlbWVudCQxIiwic3ZnTmFtZXNwYWNlIiwiUXVpY2tFbGVtZW50JDIiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZUVsZW1lbnROUyIsInRvSlNPTiIsInNjaGVtYSIsIm1hdGNoZXNTY2hlbWEiLCJQQVJTRV9FUlJPUl9QUkVGSVgiLCJwYXJzZVRyZWUiLCJwYXJzZVRyZWUkMSIsInRyZWUiLCJwYXJzZUNoaWxkcmVuIiwiRXJyb3IiLCJTdHJpbmciLCJOT1RfREVFUF9LRVlTIiwiTk9UX0tFWVMiLCJfZXh0ZW5kQnlSZWYiLCJleHRlbmRUZW1wbGF0ZSIsImV4dGVuZFRlbXBsYXRlJDEiLCJjdXJyZW50T3B0cyIsIm5ld09wdHMiLCJnbG9iYWxPcHRzIiwiY3VycmVudENoaWxkIiwiY3VycmVudENoaWxkcmVuIiwiZ2xvYmFsT3B0c1RyYW5zZm9ybSIsIm1heExlbmd0aCIsIm5lZWRzVGVtcGxhdGVXcmFwIiwibmV3Q2hpbGQiLCJuZXdDaGlsZFByb2Nlc3NlZCIsIm5ld0NoaWxkcmVuIiwibm9DaGFuZ2VzIiwicmVtYWluaW5nTmV3Q2hpbGRyZW4iLCJvcHRzIiwiTWF0aCIsIlF1aWNrVGVtcGxhdGUkMSIsImV4dGVuZEJ5UmVmIiwibmV3Q2hpbGRyZW5SZWZzIiwiUXVpY2tUZW1wbGF0ZSIsImlzVHJlZSIsImV4dGVuZCQkMSIsIm5ld1ZhbHVlcyIsImNoaWxkRGF0YSIsIl9leHRlbmRUZW1wbGF0ZSIsImlzVGVtcGxhdGUiLCJRdWlja0JhdGNoIiwiUXVpY2tCYXRjaCQxIiwiZWxlbWVudHMiLCJyZXR1cm5SZXN1bHRzMSIsInJldHVyblJlc3VsdHMiLCJfcmV0dXJuIiwicmV0dXJuTmV4dCIsImxhc3RSZXN1bHRzIiwicmVzdWx0czEiLCJfZWxlbWVudCIsIlNIT1JUQ1VUUyIsInNob3J0Y3V0IiwicmVzdGFydFNhbmRib3giLCJmaWVsZCIsInNhbmRib3giLCJxdWlja2ZpZWxkIiwiaW5zdGFuY2VzIiwiRE9NIiwiZGl2IiwiYm9yZGVyIiwicGFkZGluZyIsImJveFNpemluZyIsImJvZHkiLCJ0aXRsZSIsIm1hcmdpbiIsIm1hcmdpblRvcCIsIm1hcmdpbkJvdHRvbSIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsImZvbnRGYW1pbHkiLCJ0b3AiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJwcm9taXNlIiwib25GaW5hbGx5IiwidmFsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJlcnIiLCJUaW1lb3V0RXJyb3IiLCJtZXNzYWdlIiwibXMiLCJmYWxsYmFjayIsInJlamVjdCIsInRpbWVyIiwic2V0VGltZW91dCIsInBGaW5hbGx5IiwiY2xlYXJUaW1lb3V0IiwiZW1pdHRlciIsImNhbmNlbCIsInJldCIsImFzc2lnbiIsInJlamVjdGlvbkV2ZW50cyIsIm11bHRpQXJncyIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYmluZCIsInJlc29sdmVIYW5kbGVyIiwicmVqZWN0SGFuZGxlciIsInJlYXNvbiIsInJlamVjdGlvbkV2ZW50IiwidGltZW91dCIsInBUaW1lb3V0IiwicmVkIiwiZ3JlZW4iLCJvcmFuZ2UiLCJibGFjayIsImdyZXlfZGFyayIsImdyZXkiLCJncmV5X3NlbWlfbGlnaHQiLCJncmV5X2xpZ2h0IiwiZ3JleV9saWdodDIiLCJncmV5X2xpZ2h0MyIsImdyZXlfbGlnaHQ0IiwiZXhjbHVkZSIsImV4Y2x1ZGVzIiwiZXhjbHVkZVByb3BzIiwicmVzIiwiZXh0ZW5kRXhjbHVkZSIsIkFzc2VydGlvbkVycm9yIiwiX3Byb3BzIiwic3NmIiwic2hvd0RpZmYiLCJjYWxsZWUiLCJjYXB0dXJlU3RhY2tUcmFjZSIsInN0YWNrIiwiaGFzUHJvcGVydHkiLCJwYXJzZVBhdGgiLCJwYXRoIiwic3RyIiwicGFydHMiLCJtYXRjaCIsIm1hcE1hdGNoZXMiLCJyZWdleHAiLCJtQXJyIiwiZXhlYyIsInAiLCJpbnRlcm5hbEdldFBhdGhWYWx1ZSIsInBhdGhEZXB0aCIsInRlbXBvcmFyeVZhbHVlIiwicGFydCIsImludGVybmFsU2V0UGF0aFZhbHVlIiwidGVtcE9iaiIsInByb3BOYW1lIiwicHJvcFZhbCIsImdldFBhdGhJbmZvIiwibGFzdCIsImluZm8iLCJleGlzdHMiLCJnZXRQYXRoVmFsdWUiLCJzZXRQYXRoVmFsdWUiLCJmbGFnIiwiZmxhZ3MiLCJfX2ZsYWdzIiwibmVnYXRlIiwiZXhwciIsInByb21pc2VFeGlzdHMiLCJnbG9iYWxPYmplY3QiLCJnbG9iYWwiLCJzZWxmIiwiaXNEb20iLCJzeW1ib2xFeGlzdHMiLCJtYXBFeGlzdHMiLCJNYXAiLCJzZXRFeGlzdHMiLCJTZXQiLCJ3ZWFrTWFwRXhpc3RzIiwiV2Vha01hcCIsIndlYWtTZXRFeGlzdHMiLCJXZWFrU2V0IiwiZGF0YVZpZXdFeGlzdHMiLCJEYXRhVmlldyIsInN5bWJvbEl0ZXJhdG9yRXhpc3RzIiwic3ltYm9sVG9TdHJpbmdUYWdFeGlzdHMiLCJ0b1N0cmluZ1RhZyIsInNldEVudHJpZXNFeGlzdHMiLCJlbnRyaWVzIiwibWFwRW50cmllc0V4aXN0cyIsInNldEl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJtYXBJdGVyYXRvclByb3RvdHlwZSIsImFycmF5SXRlcmF0b3JFeGlzdHMiLCJhcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwic3RyaW5nSXRlcmF0b3JFeGlzdHMiLCJzdHJpbmdJdGVyYXRvclByb3RvdHlwZSIsInRvU3RyaW5nTGVmdFNsaWNlTGVuZ3RoIiwidG9TdHJpbmdSaWdodFNsaWNlTGVuZ3RoIiwibW9kdWxlIiwidHlwZURldGVjdCIsInR5cGVvZk9iaiIsImxvY2F0aW9uIiwibmF2aWdhdG9yIiwibWltZVR5cGVzIiwicGx1Z2lucyIsIkhUTUxFbGVtZW50IiwidGFnTmFtZSIsInN0cmluZ1RhZyIsIm9ialByb3RvdHlwZSIsIlJlZ0V4cCIsIkRhdGUiLCJleHBvcnRzIiwiZXhwZWN0VHlwZXMiLCJ0eXBlcyIsImZsYWdNc2ciLCJzc2ZpIiwidCIsImFydCIsImNoYXJBdCIsIm9yIiwib2JqVHlwZSIsInNvbWUiLCJleHBlY3RlZCIsImdldEFjdHVhbCIsIl9vYmoiLCJGdW5jdGlvbiIsImZ1bmN0aW9uTmFtZU1hdGNoIiwiZ2V0RnVuY05hbWUiLCJhRnVuYyIsImdldFByb3BlcnRpZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiYWRkUHJvcGVydHkiLCJwcm90byIsImdldEVudW1lcmFibGVQcm9wZXJ0aWVzIiwiaW5jbHVkZVN0YWNrIiwidHJ1bmNhdGVUaHJlc2hvbGQiLCJ1c2VQcm94eSIsInByb3h5RXhjbHVkZWRLZXlzIiwiaW5zcGVjdCIsInNob3dIaWRkZW4iLCJkZXB0aCIsImNvbG9ycyIsImN0eCIsInNlZW4iLCJzdHlsaXplIiwiZm9ybWF0VmFsdWUiLCJpc0RPTUVsZW1lbnQiLCJyZWN1cnNlVGltZXMiLCJwcmltaXRpdmUiLCJmb3JtYXRQcmltaXRpdmUiLCJvdXRlckhUTUwiLCJ4bWxWZXJzaW9uIiwieG1sU2VyaWFsaXplciIsIlhNTFNlcmlhbGl6ZXIiLCJzZXJpYWxpemVUb1N0cmluZyIsIm5zIiwidmlzaWJsZUtleXMiLCJuYW1lU3VmZml4IiwiaXNFcnJvciIsImdldE5hbWUiLCJpc1JlZ0V4cCIsImlzRGF0ZSIsInRvVVRDU3RyaW5nIiwiZm9ybWF0RXJyb3IiLCJ0eXBlZEFycmF5IiwiYnJhY2VzIiwiaXNUeXBlZEFycmF5IiwiZm9ybWF0QXJyYXkiLCJmb3JtYXRUeXBlZEFycmF5IiwiZm9ybWF0UHJvcGVydHkiLCJyZWR1Y2VUb1NpbmdsZVN0cmluZyIsInNpbXBsZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJJbmZpbml0eSIsImwiLCJwcm9wRGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImxpbmUiLCJzdWJzdHIiLCJyZWR1Y2UiLCJjdXIiLCJudW1MaW5lc0VzdCIsImFyIiwib2JqZWN0VG9TdHJpbmciLCJyZSIsImQiLCJvIiwib2JqRGlzcGxheSIsImtzdHIiLCJnZXRNZXNzYWdlIiwiYWN0dWFsIiwibXNnIiwidHJhbnNmZXJGbGFncyIsImFzc2VydGlvbiIsImluY2x1ZGVBbGwiLCJGYWtlTWFwIiwiX2tleSIsInJhbmRvbSIsIm5vdyIsImdldE1hcCIsInNldE1hcCIsImlzRXh0ZW5zaWJsZSIsIk1lbW9pemVNYXAiLCJtZW1vaXplQ29tcGFyZSIsImxlZnRIYW5kT3BlcmFuZCIsInJpZ2h0SGFuZE9wZXJhbmQiLCJtZW1vaXplTWFwIiwiaXNQcmltaXRpdmUiLCJsZWZ0SGFuZE1hcCIsIm1lbW9pemVTZXQiLCJkZWVwRXF1YWwiLCJjb21wYXJhdG9yIiwiZXh0ZW5zaXZlRGVlcEVxdWFsIiwic2ltcGxlUmVzdWx0Iiwic2ltcGxlRXF1YWwiLCJtZW1vaXplIiwibWVtb2l6ZVJlc3VsdExlZnQiLCJtZW1vaXplUmVzdWx0UmlnaHQiLCJjb21wYXJhdG9yUmVzdWx0IiwibGVmdEhhbmRUeXBlIiwiZXh0ZW5zaXZlRGVlcEVxdWFsQnlUeXBlIiwidmFsdWVPZiIsIml0ZXJhYmxlRXF1YWwiLCJyZWdleHBFcXVhbCIsImdlbmVyYXRvckVxdWFsIiwiVWludDhBcnJheSIsImJ1ZmZlciIsImVudHJpZXNFcXVhbCIsIm9iamVjdEVxdWFsIiwic2l6ZSIsImxlZnRIYW5kSXRlbXMiLCJyaWdodEhhbmRJdGVtcyIsImdhdGhlckVudHJpZXMiLCJnZXRHZW5lcmF0b3JFbnRyaWVzIiwiaGFzSXRlcmF0b3JGdW5jdGlvbiIsImdldEl0ZXJhdG9yRW50cmllcyIsIml0ZXJhdG9yRXJyb3IiLCJnZW5lcmF0b3IiLCJnZW5lcmF0b3JSZXN1bHQiLCJhY2N1bXVsYXRvciIsImRvbmUiLCJnZXRFbnVtZXJhYmxlS2V5cyIsImtleXNFcXVhbCIsImxlZnRIYW5kS2V5cyIsInJpZ2h0SGFuZEtleXMiLCJsZWZ0SGFuZEVudHJpZXMiLCJyaWdodEhhbmRFbnRyaWVzIiwiaXNQcm94eUVuYWJsZWQiLCJQcm94eSIsIlJlZmxlY3QiLCJwcm9wZXJ0eUdldHRlciIsIm5ld0Fzc2VydGlvbiIsImNoYWkiLCJBc3NlcnRpb24iLCJmbkxlbmd0aERlc2MiLCJhZGRMZW5ndGhHdWFyZCIsImZuIiwiYXNzZXJ0aW9uTmFtZSIsImlzQ2hhaW5hYmxlIiwiYnVpbHRpbnMiLCJwcm94aWZ5Iiwibm9uQ2hhaW5hYmxlTWV0aG9kTmFtZSIsInByb3h5R2V0dGVyIiwiaGFzIiwib3JkZXJlZFByb3BlcnRpZXMiLCJhIiwiYiIsInN0cmluZ0Rpc3RhbmNlIiwic3RyQSIsInN0ckIiLCJtZW1vIiwiYWRkTWV0aG9kIiwibWV0aG9kV3JhcHBlciIsIm92ZXJ3cml0ZVByb3BlcnR5IiwiX2dldCIsIl9zdXBlciIsIm92ZXJ3cml0aW5nUHJvcGVydHlHZXR0ZXIiLCJvcmlnTG9ja1NzZmkiLCJvdmVyd3JpdGVNZXRob2QiLCJfbWV0aG9kIiwib3ZlcndyaXRpbmdNZXRob2RXcmFwcGVyIiwiY2FuU2V0UHJvdG90eXBlIiwic2V0UHJvdG90eXBlT2YiLCJ0ZXN0Rm4iLCJleGNsdWRlTmFtZXMiLCJwcm9wRGVzYyIsImFkZENoYWluYWJsZU1ldGhvZCIsImNoYWluaW5nQmVoYXZpb3IiLCJjaGFpbmFibGVCZWhhdmlvciIsIl9fbWV0aG9kcyIsImNoYWluYWJsZU1ldGhvZEdldHRlciIsImNoYWluYWJsZU1ldGhvZFdyYXBwZXIiLCJhc3NlcnRlck5hbWVzIiwiYXNzZXJ0ZXJOYW1lIiwicGQiLCJvdmVyd3JpdGVDaGFpbmFibGVNZXRob2QiLCJfY2hhaW5pbmdCZWhhdmlvciIsIm92ZXJ3cml0aW5nQ2hhaW5hYmxlTWV0aG9kR2V0dGVyIiwib3ZlcndyaXRpbmdDaGFpbmFibGVNZXRob2RXcmFwcGVyIiwiY29tcGFyZUJ5SW5zcGVjdCIsImdldE93bkVudW1lcmFibGVQcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW0iLCJnZXRPd25FbnVtZXJhYmxlUHJvcGVydGllcyIsImNvbXBhdGlibGVJbnN0YW5jZSIsInRocm93biIsImVycm9yTGlrZSIsImNvbXBhdGlibGVDb25zdHJ1Y3RvciIsImNvbXBhdGlibGVNZXNzYWdlIiwiZXJyTWF0Y2hlciIsImNvbXBhcmlzb25TdHJpbmciLCJnZXRGdW5jdGlvbk5hbWUiLCJjb25zdHJ1Y3RvckZuIiwiZ2V0Q29uc3RydWN0b3JOYW1lIiwiY29uc3RydWN0b3JOYW1lIiwidHJpbSIsInJlcXVpcmUkJDAiLCJyZXF1aXJlJCQxIiwicmVxdWlyZSQkMiIsInJlcXVpcmUkJDMiLCJyZXF1aXJlJCQ0IiwicmVxdWlyZSQkNSIsInJlcXVpcmUkJDYiLCJyZXF1aXJlJCQ3IiwicmVxdWlyZSQkOCIsInJlcXVpcmUkJDkiLCJwYXRodmFsIiwicmVxdWlyZSQkMTAiLCJyZXF1aXJlJCQxMSIsInJlcXVpcmUkJDEyIiwicmVxdWlyZSQkMTMiLCJyZXF1aXJlJCQxNCIsInJlcXVpcmUkJDE1IiwicmVxdWlyZSQkMTYiLCJyZXF1aXJlJCQxNyIsInJlcXVpcmUkJDE4IiwicmVxdWlyZSQkMTkiLCJyZXF1aXJlJCQyMCIsInJlcXVpcmUkJDIxIiwicmVxdWlyZSQkMjIiLCJyZXF1aXJlJCQyMyIsInJlcXVpcmUkJDI0IiwiX2NoYWkiLCJ1dGlsIiwibG9ja1NzZmkiLCJjb25zb2xlIiwid2FybiIsImFzc2VydCIsIm5lZ2F0ZU1zZyIsIl9hY3R1YWwiLCJvayIsImFuIiwiYXJ0aWNsZSIsIlNhbWVWYWx1ZVplcm8iLCJpbmNsdWRlQ2hhaW5pbmdCZWhhdmlvciIsImluY2x1ZGUiLCJpc0RlZXAiLCJpbmNsdWRlZCIsImlzRXFsIiwiZXFsIiwiZmlyc3RFcnIiLCJudW1FcnJzIiwicHJvcEFzc2VydGlvbiIsImNoZWNrRXJyb3IiLCJpdGVtc0NvdW50IiwiY2hlY2tBcmd1bWVudHMiLCJhc3NlcnRFcXVhbCIsImFzc2VydEVxbCIsImFzc2VydEFib3ZlIiwibiIsImRvTGVuZ3RoIiwibXNnUHJlZml4IiwiblR5cGUiLCJzaG91bGRUaHJvdyIsInRvIiwiaGF2ZSIsImVycm9yTWVzc2FnZSIsInByaW50T2JqIiwiYXNzZXJ0TGVhc3QiLCJhc3NlcnRCZWxvdyIsImFzc2VydE1vc3QiLCJzdGFydCIsImZpbmlzaCIsInN0YXJ0VHlwZSIsImZpbmlzaFR5cGUiLCJyYW5nZSIsImFzc2VydEluc3RhbmNlT2YiLCJpc0luc3RhbmNlT2YiLCJhc3NlcnRQcm9wZXJ0eSIsImlzTmVzdGVkIiwiaXNPd24iLCJwYXRoSW5mbyIsImFzc2VydE93blByb3BlcnR5IiwiYXNzZXJ0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiYWN0dWFsRGVzY3JpcHRvciIsImFzc2VydExlbmd0aENoYWluIiwiYXNzZXJ0TGVuZ3RoIiwiYXNzZXJ0TWF0Y2giLCJpcyIsImFzc2VydEtleXMiLCJrZXlzVHlwZSIsImRlZXBTdHIiLCJtaXhlZEFyZ3NNc2ciLCJhbnkiLCJhbGwiLCJleHBlY3RlZEtleSIsImFjdHVhbEtleSIsImV2ZXJ5IiwiYXNzZXJ0VGhyb3dzIiwiZXJyTXNnTWF0Y2hlciIsImNhdWdodEVyciIsImV2ZXJ5QXJnSXNVbmRlZmluZWQiLCJldmVyeUFyZ0lzRGVmaW5lZCIsIkJvb2xlYW4iLCJlcnJvckxpa2VGYWlsIiwiZXJyTXNnTWF0Y2hlckZhaWwiLCJlcnJvckxpa2VTdHJpbmciLCJpc0NvbXBhdGlibGVJbnN0YW5jZSIsImlzQ29tcGF0aWJsZUNvbnN0cnVjdG9yIiwicGxhY2Vob2xkZXIiLCJpc0NvbXBhdGlibGVNZXNzYWdlIiwicmVzcG9uZFRvIiwiaXRzZWxmIiwiY29udGV4dCIsInNhdGlzZnkiLCJtYXRjaGVyIiwiY2xvc2VUbyIsImRlbHRhIiwiYWJzIiwiaXNTdWJzZXRPZiIsInN1YnNldCIsInN1cGVyc2V0IiwiY21wIiwiY29udGFpbnMiLCJvcmRlcmVkIiwiZWxlbSIsImlkeCIsIm1hdGNoSWR4IiwiZWxlbTIiLCJiZSIsImZhaWxNc2ciLCJmYWlsTmVnYXRlTXNnIiwib25lT2YiLCJhc3NlcnRDaGFuZ2VzIiwiaW5pdGlhbCIsImZpbmFsIiwibXNnT2JqIiwiYXNzZXJ0SW5jcmVhc2VzIiwiYXNzZXJ0RGVjcmVhc2VzIiwiYXNzZXJ0RGVsdGEiLCJiZWhhdmlvciIsInJlYWxEZWx0YSIsImV4cHJlc3Npb24iLCJpc1NlYWxlZCIsImlzRnJvemVuIiwiaXNGaW5pdGUiLCJleHBlY3QiLCJmYWlsIiwib3BlcmF0b3IiLCJsb2FkU2hvdWxkIiwic2hvdWxkR2V0dGVyIiwic2hvdWxkU2V0dGVyIiwic2hvdWxkIiwiZXF1YWwiLCJ2YWwxIiwidmFsMiIsIlRocm93IiwiZXJydCIsImVycnMiLCJleGlzdCIsIm5vdCIsIlNob3VsZCIsImV4cHJlc3MiLCJlcnJtc2ciLCJpc09rIiwiaXNOb3RPayIsImFjdCIsImV4cCIsIm5vdEVxdWFsIiwic3RyaWN0RXF1YWwiLCJub3RTdHJpY3RFcXVhbCIsImRlZXBTdHJpY3RFcXVhbCIsIm5vdERlZXBFcXVhbCIsImlzQWJvdmUiLCJhYnYiLCJhYm92ZSIsImlzQXRMZWFzdCIsImF0bHN0IiwibGVhc3QiLCJpc0JlbG93IiwiYmx3IiwiYmVsb3ciLCJpc0F0TW9zdCIsImF0bXN0IiwibW9zdCIsImlzVHJ1ZSIsImlzTm90VHJ1ZSIsImlzRmFsc2UiLCJpc05vdEZhbHNlIiwiaXNOdWxsIiwiaXNOb3ROdWxsIiwiTmFOIiwiaXNOb3ROYU4iLCJub3RFeGlzdHMiLCJpc1VuZGVmaW5lZCIsImlzRGVmaW5lZCIsImlzRnVuY3Rpb24iLCJpc05vdEZ1bmN0aW9uIiwiaXNOb3RPYmplY3QiLCJpc05vdEFycmF5IiwiaXNTdHJpbmciLCJpc05vdFN0cmluZyIsImlzTnVtYmVyIiwiaXNOb3ROdW1iZXIiLCJmaW5pdGUiLCJpc0Jvb2xlYW4iLCJpc05vdEJvb2xlYW4iLCJ0eXBlT2YiLCJub3RUeXBlT2YiLCJpbnN0YW5jZU9mIiwibm90SW5zdGFuY2VPZiIsImluYyIsIm5vdEluY2x1ZGUiLCJkZWVwSW5jbHVkZSIsIm5vdERlZXBJbmNsdWRlIiwibmVzdGVkSW5jbHVkZSIsIm5lc3RlZCIsIm5vdE5lc3RlZEluY2x1ZGUiLCJkZWVwTmVzdGVkSW5jbHVkZSIsIm5vdERlZXBOZXN0ZWRJbmNsdWRlIiwib3duSW5jbHVkZSIsIm5vdE93bkluY2x1ZGUiLCJkZWVwT3duSW5jbHVkZSIsIm5vdERlZXBPd25JbmNsdWRlIiwibm90TWF0Y2giLCJub3RQcm9wZXJ0eSIsInByb3BlcnR5VmFsIiwibm90UHJvcGVydHlWYWwiLCJkZWVwUHJvcGVydHlWYWwiLCJub3REZWVwUHJvcGVydHlWYWwiLCJvd25Qcm9wZXJ0eSIsIm5vdE93blByb3BlcnR5Iiwib3duUHJvcGVydHlWYWwiLCJub3RPd25Qcm9wZXJ0eVZhbCIsImRlZXBPd25Qcm9wZXJ0eVZhbCIsIm5vdERlZXBPd25Qcm9wZXJ0eVZhbCIsIm5lc3RlZFByb3BlcnR5Iiwibm90TmVzdGVkUHJvcGVydHkiLCJuZXN0ZWRQcm9wZXJ0eVZhbCIsIm5vdE5lc3RlZFByb3BlcnR5VmFsIiwiZGVlcE5lc3RlZFByb3BlcnR5VmFsIiwibm90RGVlcE5lc3RlZFByb3BlcnR5VmFsIiwibGVuZ3RoT2YiLCJoYXNBbnlLZXlzIiwiaGFzQWxsS2V5cyIsImNvbnRhaW5zQWxsS2V5cyIsImNvbnRhaW4iLCJkb2VzTm90SGF2ZUFueUtleXMiLCJkb2VzTm90SGF2ZUFsbEtleXMiLCJoYXNBbnlEZWVwS2V5cyIsImhhc0FsbERlZXBLZXlzIiwiY29udGFpbnNBbGxEZWVwS2V5cyIsImRvZXNOb3RIYXZlQW55RGVlcEtleXMiLCJkb2VzTm90SGF2ZUFsbERlZXBLZXlzIiwidGhyb3dzIiwiYXNzZXJ0RXJyIiwidGhyb3ciLCJkb2VzTm90VGhyb3ciLCJhcHByb3hpbWF0ZWx5Iiwic2FtZU1lbWJlcnMiLCJzZXQxIiwic2V0MiIsInNhbWUiLCJtZW1iZXJzIiwibm90U2FtZU1lbWJlcnMiLCJzYW1lRGVlcE1lbWJlcnMiLCJub3RTYW1lRGVlcE1lbWJlcnMiLCJzYW1lT3JkZXJlZE1lbWJlcnMiLCJub3RTYW1lT3JkZXJlZE1lbWJlcnMiLCJzYW1lRGVlcE9yZGVyZWRNZW1iZXJzIiwibm90U2FtZURlZXBPcmRlcmVkTWVtYmVycyIsImluY2x1ZGVNZW1iZXJzIiwibm90SW5jbHVkZU1lbWJlcnMiLCJpbmNsdWRlRGVlcE1lbWJlcnMiLCJub3RJbmNsdWRlRGVlcE1lbWJlcnMiLCJpbmNsdWRlT3JkZXJlZE1lbWJlcnMiLCJub3RJbmNsdWRlT3JkZXJlZE1lbWJlcnMiLCJpbmNsdWRlRGVlcE9yZGVyZWRNZW1iZXJzIiwibm90SW5jbHVkZURlZXBPcmRlcmVkTWVtYmVycyIsImluTGlzdCIsImNoYW5nZXMiLCJjaGFuZ2UiLCJjaGFuZ2VzQnkiLCJ0bXBNc2ciLCJieSIsImRvZXNOb3RDaGFuZ2UiLCJjaGFuZ2VzQnV0Tm90QnkiLCJidXQiLCJpbmNyZWFzZXMiLCJpbmNyZWFzZSIsImluY3JlYXNlc0J5IiwiZG9lc05vdEluY3JlYXNlIiwiaW5jcmVhc2VzQnV0Tm90QnkiLCJkZWNyZWFzZXMiLCJkZWNyZWFzZSIsImRlY3JlYXNlc0J5IiwiZG9lc05vdERlY3JlYXNlIiwiZG9lc05vdERlY3JlYXNlQnkiLCJkZWNyZWFzZXNCdXROb3RCeSIsImlmRXJyb3IiLCJleHRlbnNpYmxlIiwiaXNOb3RFeHRlbnNpYmxlIiwic2VhbGVkIiwiaXNOb3RTZWFsZWQiLCJmcm96ZW4iLCJpc05vdEZyb3plbiIsImlzRW1wdHkiLCJpc05vdEVtcHR5IiwiYWxpYXMiLCJhcyIsInVzZWQiLCJ1c2UiLCJjb3JlIiwiY2hhaURvbSIsInJlcXVpcmUiLCJ1dGlscyIsImVsVG9TdHJpbmciLCJkZXNjIiwiTm9kZUxpc3QiLCJhdHRyaWJ1dGVzIiwiYXR0ckFzc2VydCIsIm9iakRlc2MiLCJhY3R1YWxMZW5ndGgiLCJtYXRjaGVzIiwic3ViaXRlbSIsImNoYWlTdHlsZSIsImlzTm9uQ29sb3JzIiwicHJvcGVydHlWYWx1ZSIsImNvbXBhcmVDU1NWYWx1ZSIsImVsZW1lbnRUYWciLCJ0aHJvd01lc3NhZ2UiLCJ0aHJvd01lc3NhZ2VOZWdhdGl2ZSIsInByb3BlcnR5SGlmZW5DYXNlIiwiZmFrZSIsImlmcmFtZSIsInZpc2liaWxpdHkiLCJmYWtlU3R5bGUiLCJoYXNBdXRvVmFsdWUiLCJyZWciLCJlc2NhcGVSZWdFeHAiLCJnZXRQcm90b3R5cGVPZkV4aXN0cyIsImh0bWxFbGVtZW50RXhpc3RzIiwiaXNBcnJheUV4aXN0cyIsImNsZWFyIiwiY2xlYXJNYXAiLCJkZWxldGUiLCJkZWxldGVNYXAiLCJERUZBVUxUX1RPTEVSQU5DRSIsImJvdGhOdW1iZXJzIiwiYWxtb3N0RXF1YWwiLCJ0b2wiLCJ0b2xlcmFuY2UiLCJjaGFpQWxtb3N0IiwiY3VzdG9tVG9sZXJhbmNlIiwic3RhbmRhcmRUb2xlcmFuY2UiLCJvdmVycmlkZUFzc2VydEVxdWFsIiwib3ZlcnJpZGVBc3NlcnRFcWwiLCJ0b2xlcmFuY2VPdmVycmlkZSIsImdsb2JhbHMiLCJzdHJpbmdzIiwibWVzc2FnZXMiLCJwcmVkaWNhdGVzIiwiZnVuY3Rpb25zIiwibWF5YmUiLCJjb2xsZWN0aW9ucyIsIm5lZ2luZiIsInBvc2luZiIsImhhdmVTeW1ib2xzIiwidiIsInMiLCJhbCIsImYiLCJhc3NpZ25lZCIsInplcm8iLCJpbmZpbml0eSIsImludGVnZXIiLCJldmVuIiwib2RkIiwiZ3JlYXRlciIsImJldHdlZW4iLCJncmVhdGVyT3JFcXVhbCIsImxlc3NPckVxdWFsIiwiaW5SYW5nZSIsInBvc2l0aXZlIiwibmVnYXRpdmUiLCJlbXB0eVN0cmluZyIsIm5vbkVtcHR5U3RyaW5nIiwiYm9vbGVhbiIsImVtcHR5T2JqZWN0Iiwibm9uRW1wdHlPYmplY3QiLCJpbnN0YW5jZVN0cmljdCIsImxpa2UiLCJlbXB0eUFycmF5Iiwibm9uRW1wdHlBcnJheSIsImFycmF5TGlrZSIsImRhdGUiLCJoYXNMZW5ndGgiLCJORUdBVElWRV9JTkZJTklUWSIsIlBPU0lUSVZFX0lORklOSVRZIiwibWl4aW4iLCJjcmVhdGVNb2RpZmllZFByZWRpY2F0ZXMiLCJhc3NlcnRNb2RpZmllciIsImFzc2VydEltcGwiLCJub3RNb2RpZmllciIsIm5vdEltcGwiLCJtYXliZU1vZGlmaWVyIiwibWF5YmVJbXBsIiwiY3JlYXRlTW9kaWZpZWRNb2RpZmllciIsImNyZWF0ZU9mUHJlZGljYXRlcyIsImNyZWF0ZU9mTW9kaWZpZXJzIiwiY3JlYXRlTWF5YmVPZk1vZGlmaWVycyIsImV4cG9ydEZ1bmN0aW9ucyIsImxocyIsInJocyIsIngiLCJ5Iiwic3Vic3RyaW5nIiwicmVnZXgiLCJlcnJvciIsImFyY2hldHlwZSIsIml0ZXJhdGlvbiIsImdldFRpbWUiLCJtYXBTaW1wbGUiLCJtYXBDb21wbGV4IiwicHJlZGljYXRlIiwibSIsInRlc3RBcnJheSIsInRlc3RPYmplY3QiLCJkZWZhdWx0TWVzc2FnZSIsImFzc2VydFByZWRpY2F0ZSIsImFyZ0NvdW50IiwiRXJyb3JUeXBlIiwibW9kaWZpZWRQcmVkaWNhdGUiLCJvZk1vZGlmaWVyIiwiY29sbGVjdGlvbiIsImNvZXJjZUNvbGxlY3Rpb24iLCJpZ25vcmUiLCJtb2RpZmllciIsImNyZWF0ZU1vZGlmaWVkRnVuY3Rpb25zIiwibW9kaWZpZWQiLCJvZiIsImNoZWNrIiwidGhpcyIsInBsdWdpbiIsImlzRW1pdHRlciIsIkV2ZW50RW1pdHRlciIsIkV2ZW50VGFyZ2V0Iiwibm9kZSIsImJyb3dzZXIiLCJyZWdpc3RlcmVkIiwicmVnaXN0ZXJBbmltYXRpb25zIiwib3BhY2l0eSIsIm9iamVjdGFibGUiLCJsb2ciLCJyIiwiaCIsInUiLCJzaWxlbnQiLCJPIiwiaUEiLCJDIiwiYyIsImRlbGF5IiwidGhyb3R0bGUiLCJzaW1wbGVTZWxlY3RvciIsInByb21pc2VUcmFuc2Zvcm1zIiwiZGlzcGF0Y2hFdmVudHMiLCJzZW5kQXJyYXlDb3BpZXMiLCJ1cGRhdGVFdmVuSWZTYW1lIiwidXBkYXRlT25CaW5kIiwiX3NiIiwiRWxlbWVudCIsInVBUyIsImciLCJIIiwic1UiLCJSIiwic1YiLCJmRFYiLCJEIiwiaUQiLCJpTyIsImlTIiwiaU4iLCJpRiIsImlCSSIsIlgiLCJpQiIsImlzSSIsIkRNIiwiZEkiLCJkUiIsImRDIiwiZUMiLCJIVE1MQ29sbGVjdGlvbiIsImpRdWVyeSIsImVBUyIsImROIiwiTSIsIkkiLCJPRCIsInByIiwib1IiLCJ0ZlMiLCJpc0wiLCJPRyIsIk9TIiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIlMiLCJFIiwiUCIsIl9zYl9JRCIsIl9zYl9tYXAiLCJnQiIsIklEIiwic2UiLCJWIiwiTiIsIkEiLCJCIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIkYiLCJUIiwiRyIsIkwiLCJ3IiwiZXJJUCIsImVyRk4iLCJlckVWIiwiZW1wdHlMaXN0IiwiZXJPRCIsImVyTVgiLCJzbyIsImNDIiwic1MiLCJzUCIsInNDIiwic2V0dGluZ3MiLCJkZWZhdWx0T3B0aW9ucyIsInVuQmluZEFsbCIsInJBUyIsIm9EIiwic3VicyIsInNNIiwicE0iLCJhdEVWIiwibUMiLCJjSCIsImFTIiwidEYiLCJkZSIsInBCIiwic1BIIiwicFZMIiwiUGgiLCJ0eE4iLCJhRVYiLCJpc011bHRpIiwiYmluZGluZ3MiLCJ1TyIsIlZSIiwiclMiLCJERVMiLCJyUEkiLCJ1ckVWRSIsInNlbGVjdGlvblN0YXJ0Iiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJwQ1QiLCJwSU0iLCJwcyIsImlFIiwiZUUiLCJ1UyIsImRMIiwibFUiLCJ1VCIsImNOIiwiYU0iLCJzcyIsImFEIiwiYVBJIiwiUEkiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJhVVYiLCJldk4iLCJyRVZFIiwiZXZIIiwiVSIsImVNIiwibGlzdGVuIiwiZXZPIiwiYmluZGluZ0RhdGEiLCJzRyIsIm9QIiwiZE0iLCJvcmlnaW5hbCIsIm9iamVjdHMiLCJzdWJzY3JpYmVycyIsImNyZWF0ZUJQIiwicGF0Y2hDYWNoZWRCUCIsInBhcnNlSW50IiwicmVtb3ZlTWV0aG9kIiwiZW1pdE1ldGhvZCIsIm50IiwiYVAiLCJXIiwiJCIsImNoYWluVG8iLCJZIiwidHJhbnNmb3JtU2VsZiIsIlEiLCJxIiwidHJhbnNmb3JtQWxsIiwieiIsImNvbmRpdGlvbiIsIkoiLCJjb25kaXRpb25BbGwiLCJLIiwiYm90aFdheXMiLCJaIiwidW5CaW5kIiwidHQiLCJwb2xsRXZlcnkiLCJldCIsInN0b3BQb2xsaW5nIiwiaXQiLCJzZXRPcHRpb24iLCJzdCIsImRpc2FsbG93RnJvbSIsInVwZGF0ZU9uIiwicmVtb3ZlVXBkYXRlciIsImFuZCIsImFkZEJQIiwidXBkYXRlIiwidHdvV2F5IiwicGlwZSIsIkluIiwicnQiLCJkZWZpbmUiLCJ1bWQiLCJzaW1wbHliaW5kIiwiUkVHRVgiLCJ3aGl0ZVNwYWNlIiwibnVtZXJpYyIsIndpZGVudW1lcmljIiwiYWxwaGFudW1lcmljIiwiZW1haWwiLCJub29wIiwicmVwZWF0IiwibmV3SXRlbSIsImhleFRvUkdCQSIsImhleCIsImFscGhhIiwiZGVmYXVsdENvbG9yIiwiY29sb3IiLCJjYWxjUGFkZGluZyIsImRlc2lyZWRIZWlnaHQiLCJjZWlsIiwidW5sb2NrU2Nyb2xsIiwiZXhjbHVkZWRFbCIsIl9pc0xvY2tlZCIsImxvY2tTY3JvbGwiLCJ3aGVlbERlbHRhIiwic2Nyb2xsVG9wIiwicHJldmVudERlZmF1bHQiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJmdXp6eU1hdGNoIiwibmVlZGxlIiwiaGF5c3RhY2siLCJjYXNlU2Vuc2l0aXZlIiwiaEkiLCJoTGVuZ3RoIiwibWF0Y2hlZENvdW50IiwibkkiLCJuTGVuZ3RoIiwibmVlZGxlQ2hhciIsInRvVXBwZXJDYXNlIiwic3RhcnRzV2l0aCIsImdldEluZGV4T2ZGaXJzdERpZmYiLCJzb3VyY2VTdHJpbmciLCJjb21wYXJlU3RyaW5nIiwiY3VycmVudFBvcyIsInBhcnNlQ3NzU2hvcnRoYW5kVmFsdWUiLCJzaG9ydGhhbmRTaWRlVmFsdWUiLCJzaWRlIiwidXBkYXRlU2hvcnRoYW5kVmFsdWUiLCJpbmhlcml0UHJvdG8iLCJSRVFVSVJFRF9GSUVMRF9NRVRIT0RTIiwid2luIiwiZGVidWciLCJyYWYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc1JlcXVlc3RBbmltYXRpb25GcmFtZSIsIkZhc3REb20iLCJyZWFkcyIsIndyaXRlcyIsIm1lYXN1cmUiLCJ0YXNrIiwic2NoZWR1bGVGbHVzaCIsIm11dGF0ZSIsImZhc3Rkb20iLCJpbml0aWFsaXplIiwiY2F0Y2giLCJzY2hlZHVsZWQiLCJmbHVzaCIsInJ1blRhc2tzIiwidGFza3MiLCJDb25kaXRpb24iLCJmaWVsZDEiLCJjYWxsYmFjazEiLCJzYXRpc2ZpZWQiLCJhbGxGaWVsZHMiLCJTaW1wbHlCaW5kIiwib2xkVmFsdWUiLCJjb21wYXJpc29uIiwiY29tcGFyaXNvbk9wZXJhdG9ycyIsInBhc3NlZENvbXBhcmlzb25zIiwidmlzaWJsZSIsInZhbGlkYXRlIiwibmVzdGVkT2JqZWN0IiwicHJvcGVydHlDaGFpbiIsInNlZWtlZFZhbHVlIiwiaGVscGVycyIsInRlc3RNYXNrIiwiY29uZGl0aW9ucyIsInZhbGlkQ29uZGl0aW9ucyIsInZhbGlkYXRlQ29uZGl0aW9ucyIsIkNvbmRpdGlvbiQxIiwidHJhbnNmb3JtU2V0dGluZ3MiLCJjaG9pY2VzIiwibGFiZWwiLCJ2YWxpZFdoZW5SZWdleCIsImdsb2JhbERlZmF1bHRzIiwidGVtcGxhdGVzIiwiaGVscCIsInJlcXVpcmVkIiwiZGlzYWJsZWQiLCJkZWZhdWx0VmFsdWUiLCJtb2JpbGVXaWR0aCIsIm1vYmlsZVRocmVzaG9sZCIsImRpc3RhbmNlIiwiaW5wdXRQYWRkaW5nIiwibGFiZWxTaXplIiwiaWNvbiIsImljb25TaXplIiwic2V0dGVyIiwidmFsaWRhdG9yIiwiY2xlYXJFcnJvck9uVmFsaWQiLCJtYWtlUm9vbUZvckhlbHAiLCJGaWVsZCIsImN1cnJlbnRJRCIsInNldHRpbmdPdmVycmlkZXMiLCJ0ZW1wbGF0ZU92ZXJyaWRlcyIsInNoYWxsb3dTZXR0aW5ncyIsInRyYW5zZm9ybVNldHRpbmdzXyIsImRlZmF1bHQiLCJmaWVsZEluc3RhbmNlcyIsIl92YWx1ZSIsInZhbGlkIiwiZm9jdXNlZCIsImhvdmVyZWQiLCJmaWxsZWQiLCJpbnRlcmFjdGVkIiwiaXNNb2JpbGUiLCJzaG93TGFiZWwiLCJzaG93SGVscCIsInNob3dFcnJvciIsIl9jb25zdHJ1Y3RvckVuZCIsImNoaWxkZiIsIm11bHRpcGxlIiwicHJldlNob3ciLCJjaGFuZ2VBbW91bnQiLCJfcXVpY2tGaWVsZCIsIl9mb3JtYXRXaWR0aCIsImRlc3Ryb3kiLCJyZW1vdmVGcm9tRE9NIiwiX2Rlc3Ryb3kiLCJwcm92aWRlZFZhbHVlIiwiY29yZVZhbHVlUHJvcCIsInRlc3RVbnJlcXVpcmVkIiwicmVwb3J0IiwiaXNWYWxpZCIsIl92YWxpZGF0ZSIsInBhc3NlZENvbmRpdGlvbnMiLCJ0b2dnbGVWaXNpYmlsaXR5IiwidmFsaWRhdGVBbmRSZXBvcnQiLCJfZ2V0VmFsdWUiLCJfc2V0VmFsdWUiLCJGaWVsZCQxIiwia2V5Q29kZXMiLCJLRVlDT0RFUyIsImVudGVyIiwiZXNjIiwiY3RybCIsImFsdCIsInN1cGVyIiwic3VwZXIyIiwidXAiLCJkb3duIiwiaHlwaGVuIiwidW5kZXJzY29yZSIsInF1ZXN0aW9uIiwiZXhjbGFtYXRpb24iLCJmcm9udHNsYXNoIiwiYmFja3NsYXNoIiwiY29tbWEiLCJwZXJpb2QiLCJzcGFjZSIsImFueUFycm93IiwiY29kZSIsImFueU1vZGlmaWVyIiwiYW55QWxwaGEiLCJhbnlOdW1lcmljIiwiYW55QWxwaGFOdW1lcmljIiwiYW55UHJpbnRhYmxlIiwiY2hlY2ttYXJrIiwidmlld0JveCIsInRhYmluZGV4IiwiZm9jdXNhYmxlIiwiZmlsbCIsInBvaW50cyIsImFuZ2xlRG93biIsIm91dGxpbmUiLCJjYXJldFVwIiwiY2FyZXREb3duIiwicGx1cyIsInBvc2l0aW9uIiwiekluZGV4Iiwib3ZlcmZsb3ciLCJkcm9wZG93biIsInJlY3QiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3hTaGFkb3ciLCJib3JkZXJXaWR0aCIsImJvcmRlclN0eWxlIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJSYWRpdXMiLCIkaXNPcGVuIiwiJGhhc1Zpc2libGVDaG9pY2VzIiwib3ZlcmZsb3dTY3JvbGxpbmciLCJvdmVyZmxvd1N0eWxlIiwiY2hvaWNlIiwidXNlclNlbGVjdCIsImxpbmVIZWlnaHQiLCJjdXJzb3IiLCIkdmlzaWJsZSIsIiR1bmF2YWlsYWJsZSIsIiRob3ZlciIsInZlcnRpY2FsQWxpZ24iLCJ0ZXh0QWxpZ24iLCJzdHJva2UiLCIkc2VsZWN0ZWQiLCJ0ZXh0T3ZlcmZsb3ciLCJ3b3JkV3JhcCIsIm1heFdpZHRoIiwicGFkZGluZ1JpZ2h0Iiwic2Nyb2xsSW5kaWNhdG9yVXAiLCJzY3JvbGxJbmRpY2F0b3JEb3duIiwiYm9yZGVyVG9wIiwiJHNob3dIZWxwIiwidGVtcGxhdGUkMSIsIm1heEhlaWdodCIsInR5cGVCdWZmZXIiLCJDaG9pY2UiLCJEcm9wZG93biIsIkxpc3QiLCJpbml0aWFsQ2hvaWNlcyIsImlzT3BlbiIsIl9zZXR0aW5nRmlsdGVycyIsImxhc3RTZWxlY3RlZCIsImN1cnJlbnRIaWdobGlnaHRlZCIsInZpc2libGVDaG9pY2VzQ291bnQiLCJ2aXNpYmxlQ2hvaWNlcyIsImVscyIsIl9zZWxlY3RlZENhbGxiYWNrIiwiX2NyZWF0ZUVsZW1lbnRzIiwiX2F0dGFjaEJpbmRpbmdzIiwiYWRkQ2hvaWNlIiwiX2F0dGFjaEJpbmRpbmdzX2VsU3RhdGUiLCJfYXR0YWNoQmluZGluZ3NfZGlzcGxheSIsIl9hdHRhY2hCaW5kaW5nc19zY3JvbGxJbmRpY2F0b3JzIiwiY3VycmVudCIsImFwcGVuZENob2ljZXMiLCJjYWxjRGlzcGxheSIsInNjcm9sbFRvQ2hvaWNlIiwic2V0VHJhbnNsYXRlIiwibmV3Q2hvaWNlIiwicHJldkNob2ljZSIsImlucHV0Iiwia2V5Q29kZSIsImhpZ2hsaWdodFByZXYiLCJoaWdobGlnaHROZXh0IiwidHlwZUJ1ZmZlclRpbWVvdXQiLCJjaG9pY2VJblZpZXciLCJfdXBkYXRlU2Nyb2xsSW5kaWNhdG9yVmlzaWJpbGl0eSIsInN0YXJ0U2Nyb2xsaW5nIiwic3RvcFNjcm9sbGluZyIsInNob3dCb3R0b21JbmRpY2F0b3IiLCJzaG93VG9wSW5kaWNhdG9yIiwiYXBwZW5kZWRDaG9pY2VzIiwicmVtb3ZlQ2hvaWNlIiwiZmluZENob2ljZUFueSIsInJlcGxhY2VDaG9pY2VzIiwibmV3Q2hvaWNlcyIsIm9uU2VsZWN0ZWQiLCJmaW5kQ2hvaWNlIiwiYnlMYWJlbCIsImN1cnJlbnRJbmRleCIsInNjcm9sbFVwIiwic2Nyb2xsRG93biIsImJvdHRvbUN1dG9mZiIsImNsaXBwaW5nUGFyZW50IiwiY2xpcHBpbmdSZWN0IiwiY3V0b2ZmIiwiaXNCb3R0b21DdXRvZmYiLCJpc1RvcEN1dG9mZiIsIm5lZWRzTmV3SGVpZ2h0Iiwic2VsZlJlY3QiLCJ0b3BDdXRvZmYiLCJ0cmFuc2xhdGlvbiIsIndpbmRvd0N1dG9mZiIsIndpbmRvd0hlaWdodCIsInNldERpbWVuc2lvbnMiLCJpbm5lcndyYXAiLCJvZmZzZXQiLCJkaXN0YW5lRnJvbVRvcCIsInNlbGVjdGVkSGVpZ2h0Iiwib2Zmc2V0VG9wIiwiY2hvaWNlUmVjdCIsImRvd25QYWRkaW5nIiwibGlzdFJlY3QiLCJ1cFBhZGRpbmciLCJzY3JvbGxJbnRlcnZhbElEIiwidW5hdmFpbGFibGUiLCJpbml0aWFsaXplZCIsInN0b3BQcm9wYWdhdGlvbiIsIm5ld1N0YXRlIiwicHJldlN0YXRlIiwid2FzU2VsZWN0ZWQiLCJEcm9wZG93biQxIiwibG9hZGVkIiwiX19lc01vZHVsZSIsInBsYWNlaG9sZGVyQ2hhciIsInByZXZpb3VzQ29uZm9ybWVkVmFsdWUiLCJwcmV2aW91c1BsYWNlaG9sZGVyIiwiY3VycmVudENhcmV0UG9zaXRpb24iLCJjb25mb3JtZWRWYWx1ZSIsInJhd1ZhbHVlIiwiaW5kZXhlc09mUGlwZWRDaGFycyIsImNhcmV0VHJhcEluZGV4ZXMiLCJndWlkZSIsImNvbnZlcnRNYXNrVG9QbGFjZWhvbGRlciIsImtlZXBDaGFyUG9zaXRpb25zIiwiY2hhciIsImlzTmV3IiwibWV0YSIsInNvbWVDaGFyc1JlamVjdGVkIiwibWFza1dpdGhvdXRDYXJldFRyYXBzIiwiaW5kZXhlcyIsInByb2Nlc3NDYXJldFRyYXBzIiwiaW5wdXRFbGVtZW50IiwibWFzayIsInNob3dNYXNrIiwic2VsZWN0aW9uRW5kIiwicmVqZWN0ZWQiLCJhY3RpdmVFbGVtZW50IiwidXNlckFnZW50IiwiZGQiLCJtbSIsInl5IiwieXl5eSIsImxhc3RJbmRleE9mIiwic3VmZml4IiwiaW5jbHVkZVRob3VzYW5kc1NlcGFyYXRvciIsInRob3VzYW5kc1NlcGFyYXRvclN5bWJvbCIsImFsbG93RGVjaW1hbCIsImRlY2ltYWxTeW1ib2wiLCJkZWNpbWFsTGltaXQiLCJyZXF1aXJlRGVjaW1hbCIsImFsbG93TmVnYXRpdmUiLCJhbGxvd0xlYWRpbmdaZXJvZXMiLCJpbnRlZ2VyTGltaXQiLCJNYXNrIiwiZGVmYXVsdFBhdHRlcm5DaGFycyIsInByZXZWYWx1ZSIsInByZXZDdXJzb3IiLCJwYXR0ZXJuIiwicGF0dGVyblJhdyIsInBhdHRlcm5TZXR0ZXIiLCJwbGFjZWhvbGRlclJlZ2V4IiwiY2hhcnMiLCJjdXN0b21QYXR0ZXJucyIsInNldFBhdHRlcm4iLCJnZXRTdGF0ZSIsInNlbGVjdGlvbiIsImVuZCIsImdldFBsYWNlaG9sZGVyIiwicmVzb2x2ZVBhdHRlcm4iLCJjb3B5IiwidHJhcEluZGV4ZXMiLCJwcmV2UGF0dGVybiIsInJlc29sdmVkUGF0dGVybiIsInVwZGF0ZVZhbHVlIiwidXBkYXRlRmllbGQiLCJwYXJzZVBhdHRlcm4iLCJwYXJzZVRyYW5zZm9ybSIsInNldFZhbHVlIiwiZXNjYXBlZCIsIm1hc2tBZGRvbnMiLCJlbWFpbE1hc2siLCJjcmVhdGVOdW1iZXJNYXNrIiwic2VwIiwiZGVjaW1hbCIsImxpbWl0IiwiY3JlYXRlQXV0b0NvcnJlY3RlZERhdGVQaXBlIiwibmV3UGF0dGVybiIsInRyYW5zZm9ybWVkIiwibWFza0NvcmUiLCJjb25mb3JtVG9NYXNrIiwiYWRqdXN0Q2FyZXRQb3NpdGlvbiIsIk1hc2skMSIsIkNPTE9SUyIsInRleHRGaWVsZFRlbXBsYXRlIiwiJHNob3dFcnJvciIsInRyYW5zaXRpb24iLCJwb2ludGVyRXZlbnRzIiwiJGZpbGxlZCIsIiRzaG93TGFiZWwiLCIkZm9jdXMiLCIkZGlzYWJsZWQiLCJpY29uU2libGluZyIsImlucHV0U2libGluZyIsInBhZGRpbmdMZWZ0Iiwic3VidHJhY3QiLCJhdXRvV2lkdGgiLCJhcHBlYXJhbmNlIiwiYmFja2dyb3VuZENsaXAiLCJ0b3RhbEhlaWdodCIsIndvcmthYmxlSGVpZ2h0IiwiZmxvb3IiLCJob3JpeiIsInZlcnRpIiwicGFkZGluZ1RvcCIsIm9mZnNldFdpZHRoIiwidHJhbnNmb3JtT3JpZ2luIiwiJGludmFsaWQiLCJ2YWxpZFdoZW5Jc0Nob2ljZSIsIm1pbldpZHRoIiwibWluTGVuZ3RoIiwiVGV4dEZpZWxkIiwidHlwaW5nIiwiX3JlY2FsY0Rpc3BsYXkiLCJfYXR0YWNoQmluZGluZ3NfZGlzcGxheV9hdXRvV2lkdGgiLCJfYXR0YWNoQmluZGluZ3NfdmFsdWUiLCJfYXR0YWNoQmluZGluZ3NfYXV0b2NvbXBsZXRlIiwiX2F0dGFjaEJpbmRpbmdzX3N0YXRlVHJpZ2dlcnMiLCJjaGVja21hcmtfbWFzazEiLCJjaGVja21hcmtfbWFzazIiLCJjaGVja21hcmtfcGF0Y2giLCJfZ2V0SW5wdXRBdXRvV2lkdGgiLCJyZXNldElucHV0IiwiaXNUeXBpbmciLCJzaG91bGRCZVZpc2libGUiLCJzZWxlY3RlZENob2ljZSIsImJsdXIiLCJfc2NoZWR1bGVDdXJzb3JSZXNldCIsImN1cnJlbnRDdXJzb3IiLCJkaWZmSW5kZXgiLCJuZXdDdXJzb3IiLCJub3JtYWxpemVDdXJzb3JQb3MiLCJfc2V0VmFsdWVJZk5vdFNldCIsImlucHV0V2lkdGgiLCJsYWJlbFdpZHRoIiwic2Nyb2xsTGVmdCIsInNjcm9sbFdpZHRoIiwiX2dldFdpZHRoU2V0dGluZyIsInBhcmVudFdpZHRoIiwibWF0Y2hpbmdDaG9pY2UiLCJUZXh0RmllbGQkMSIsImNyZWF0ZUJ1aWxkZXIiLCJ0YXJnZXRGaWVsZCIsInJlcXVpcmVkTWV0aG9kIiwibmV3U2V0dGluZ3MiLCJuZXdUZW1wbGF0ZXMiLCJnbG9iYWxDb25maWciLCJvcmlnaW5hbFRlbXBsYXRlcyIsIm91dHB1dFNldHRpbmdzIiwib3V0cHV0VGVtcGxhdGVzIiwicXVpY2tmaWVsZCQxIiwiYXV0b0hlaWdodCIsIm1pbkhlaWdodCIsImNvdW50ZXIiLCJyZXNpemUiLCJUZXh0YXJlYUZpZWxkIiwiZm9yY2VPcHRzIiwiX2F0dGFjaEJpbmRpbmdzX2Rpc3BsYXlfYXV0b0hlaWdodCIsIl9nZXRJbnB1dEF1dG9IZWlnaHQiLCJpbnB1dEhlaWdodCIsInByZXZIZWlnaHQiLCJUZXh0YXJlYUZpZWxkJDEiLCJ2YWxpZFdoZW5NaW4iLCJ2YWxpZFdoZW5NYXgiLCJidXR0b25zIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsInN0ZXAiLCJlbmZvcmNlIiwic3RlcEJ1dHRvbiIsIiRhY3RpdmUiLCJOdW1iZXJGaWVsZCIsInByZWNpc2lvbiIsIl9ub3JtYWxpemVWYWx1ZSIsIl9hdHRhY2hCaW5kaW5nc19zdGVwRXZlbnRzIiwic2VsZWN0TnVtYmVyUGFydCIsInN0ZXBVcCIsInN0ZXBEb3duIiwiX3JvdW5kVG9OZWFyZXN0IiwibXVsdGlwbGllciIsInRvRml4ZWQiLCJyb3VuZGVkIiwiTnVtYmVyRmllbGQkMSIsInZhbGlkV2hlbkNob3NlTWluIiwibGFiZWxGaWx0ZXIiLCJ0YWJJbmRleCIsIlNlbGVjdEZpZWxkIiwic2V0Q2hvaWNlIiwidmFsdWVMYWJlbCIsIl9hdHRhY2hCaW5kaW5nc19kcm9wZG93biIsImxhYmVsRm9ybWF0IiwiZXNjTGlzdGVuZXIiLCJ0cmlnZ2VyaW5nS2V5Y29kZXMiLCJ2YWxpZENob2ljZXMiLCJvcHRpb24iLCJTZWxlY3RGaWVsZCQxIiwiY2hvaWNlR3JvdXAiLCJzcGFjaW5nIiwibWFyZ2luTGVmdCIsIiRkZWZpbmVkV2lkdGgiLCJwZXJHcm91cCIsImNob2ljZUljb24iLCJ2YWxpZFdoZW5TZWxlY3RlZCIsInNob3dTZWxlY3RBbGwiLCJDaG9pY2VGaWVsZCIsImNob2ljZUdyb3VwcyIsImdyb3VwSW5kZXgiLCJncm91cEVsIiwiaW5kZXgxIiwiaWNvbkVsIiwidG90YWxJbmRleCIsIkNob2ljZUZpZWxkJDEiLCJjaG9pY2UkMSIsImNob2ljZUljb24kMSIsImNob2ljZUdyb3VwJDEiLCJ2YWxpZFdoZW5UcnVlIiwiY2hvaWNlTGFiZWxzIiwiVHJ1ZUZhbHNlRmllbGQiLCJUcnVlRmFsc2VGaWVsZCQxIiwiYmFja2dyb3VuZCIsInRyaWdnZXJFdmVudCIsIiRhbGlnbmVkU3R5bGUiLCIkdG9nZ2xlZCIsIlRvZ2dsZUZpZWxkIiwiVG9nZ2xlRmllbGQkMSIsImZpZWxkcyIsImNvbGxhcHNhYmxlIiwic3RhcnRDb2xsYXBzZWQiLCJmaWVsZE1hcmdpbiIsImZpZWxkQWxpZ24iLCJhY3Rpb24iLCJpbnNlcnRlZCIsImNvbGxhcHNlSWNvbnMiLCIkY29sbGFwc2VkIiwidGV4dEp1c3RpZnkiLCJHcm91cEZpZWxkIiwiX2NhbGNGb2N1c1N0YXRlIiwiX2NhbGNCbHVyU3RhdGUiLCJfZW1pdFN1Ym1pdCIsImNvbGxhcHNlZCIsImZpZWxkc0FycmF5IiwiYWRkQWN0aW9uIiwidG9nZ2xlQ29sbGFwc2UiLCJjb2xsYXBzZSIsImZpZWxkTmFtZSIsInNvbWVJbnZhbGlkIiwiaWNvbnMiLCJhY3Rpb25zIiwiR3JvdXBGaWVsZCQxIiwiJGNvbGxhcHNhYmxlIiwiJGlubGluZVN0eWxlIiwiZ3JvdXBNYXJnaW4iLCJjbG9uZUljb24iLCJyZW1vdmVJY29uIiwiYmxvY2tHcm91cCIsImlubGluZUdyb3VwIiwiZ3JvdXBXaWR0aCIsImF1dG9SZW1vdmVFbXB0eSIsImR5bmFtaWNMYWJlbCIsIm1pbkl0ZW1zIiwibWF4SXRlbXMiLCJkcmFnZ2FibGUiLCJjbG9uZWFibGUiLCJyZW1vdmVhYmxlIiwic2luZ2xlTW9kZSIsIm51bWJlcmluZyIsImRyYWdkcm9wIiwiZ3JvdXBTZXR0aW5ncyIsImlubGluZSIsImJsb2NrIiwiYXRvYSIsInNpIiwic2V0SW1tZWRpYXRlIiwidGljayIsImRlYm91bmNlIiwidGlja3kiLCJydW4iLCJ0aGluZyIsImV2dCIsIl9vbmNlIiwiZW1pdHRlclNuYXBzaG90IiwiYXN5bmMiLCJOYXRpdmVDdXN0b21FdmVudCIsIkN1c3RvbUV2ZW50IiwidXNlTmF0aXZlIiwiZGV0YWlsIiwiZm9vIiwicGFyYW1zIiwiaW5pdEN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnRPYmplY3QiLCJldmVudG1hcCIsImV2ZW50bmFtZSIsInJvbiIsImRvYyIsImFkZEV2ZW50IiwiYWRkRXZlbnRFYXN5IiwicmVtb3ZlRXZlbnQiLCJyZW1vdmVFdmVudEVhc3kiLCJoYXJkQ2FjaGUiLCJhZGRFdmVudEhhcmQiLCJyZW1vdmVFdmVudEhhcmQiLCJhZGQiLCJmYWJyaWNhdGUiLCJmYWJyaWNhdGVFdmVudCIsImNhcHR1cmluZyIsImF0dGFjaEV2ZW50IiwibGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsIm1vZGVsIiwibWFrZUN1c3RvbUV2ZW50IiwibWFrZUNsYXNzaWNFdmVudCIsImZpcmVFdmVudCIsImN1c3RvbUV2ZW50Iiwid3JhcHBlckZhY3RvcnkiLCJ3cmFwcGVyIiwib3JpZ2luYWxFdmVudCIsInNyY0VsZW1lbnQiLCJyZXR1cm5WYWx1ZSIsImNhbmNlbEJ1YmJsZSIsIndoaWNoIiwiZmluZCIsImxvb2t1cENsYXNzIiwibGFzdEluZGV4Iiwicm1DbGFzcyIsInJtIiwiZHJhZ3VsYSIsImluaXRpYWxDb250YWluZXJzIiwiX21pcnJvciIsIl9zb3VyY2UiLCJfaXRlbSIsIl9vZmZzZXRYIiwiX29mZnNldFkiLCJfbW92ZVgiLCJfbW92ZVkiLCJfaW5pdGlhbFNpYmxpbmciLCJfY3VycmVudFNpYmxpbmciLCJfY29weSIsIl9yZW5kZXJUaW1lciIsIl9sYXN0RHJvcFRhcmdldCIsIl9ncmFiYmVkIiwibW92ZXMiLCJhbHdheXMiLCJhY2NlcHRzIiwiaW52YWxpZCIsImludmFsaWRUYXJnZXQiLCJjb250YWluZXJzIiwiaXNDb250YWluZXIiLCJuZXZlciIsImNvcHlTb3J0U291cmNlIiwicmV2ZXJ0T25TcGlsbCIsInJlbW92ZU9uU3BpbGwiLCJpZ25vcmVJbnB1dFRleHRTZWxlY3Rpb24iLCJtaXJyb3JDb250YWluZXIiLCJkcmFrZSIsIm1hbnVhbFN0YXJ0IiwiY2FuTW92ZSIsImRyYWdnaW5nIiwic3BpbGxPdmVyIiwic3BpbGxPdXQiLCJvcCIsInRvdWNoeSIsImdyYWIiLCJyZWxlYXNlIiwiZXZlbnR1YWxNb3ZlbWVudHMiLCJzdGFydEJlY2F1c2VNb3VzZU1vdmVkIiwibW92ZW1lbnRzIiwiY3Jvc3N2ZW50IiwicHJldmVudEdyYWJiZWQiLCJjbGllbnRYIiwiY2xpZW50WSIsIndoaWNoTW91c2VCdXR0b24iLCJtZXRhS2V5IiwiY3RybEtleSIsImNhblN0YXJ0IiwiaXNJbnB1dCIsImdldENvb3JkIiwiZWxlbWVudEJlaGluZEN1cnNvciIsImVsZW1lbnRGcm9tUG9pbnQiLCJncmFiYmVkIiwiZ2V0T2Zmc2V0IiwiY2xhc3NlcyIsInJlbmRlck1pcnJvckltYWdlIiwiZHJhZyIsImhhbmRsZSIsImdldFBhcmVudCIsIm1vdmFibGUiLCJuZXh0RWwiLCJpc0NvcHkiLCJkcm9wIiwidW5ncmFiIiwiZ2V0RWxlbWVudEJlaGluZFBvaW50IiwiZHJvcFRhcmdldCIsImZpbmREcm9wVGFyZ2V0IiwiaXNJbml0aWFsUGxhY2VtZW50IiwiY2xlYW51cCIsInJldmVydCIsInJldmVydHMiLCJyZW1vdmVNaXJyb3JJbWFnZSIsInNpYmxpbmciLCJhY2NlcHRlZCIsImRyb3BwYWJsZSIsImltbWVkaWF0ZSIsImdldEltbWVkaWF0ZUNoaWxkIiwicmVmZXJlbmNlIiwiZ2V0UmVmZXJlbmNlIiwiY2hhbmdlZCIsIm91dCIsIm92ZXIiLCJtb3ZlZCIsImdldFJlY3RXaWR0aCIsImdldFJlY3RIZWlnaHQiLCJob3Jpem9udGFsIiwiaW5zaWRlIiwib3V0c2lkZSIsInRvdWNoIiwibW91c2V1cCIsIm1vdXNlZG93biIsIm1vdXNlbW92ZSIsInBvaW50ZXJzIiwibWljcm9zb2Z0IiwicG9pbnRlckVuYWJsZWQiLCJtc1BvaW50ZXJFbmFibGVkIiwidG91Y2hlcyIsImJ1dHRvbiIsImdldFNjcm9sbCIsInNjcm9sbFByb3AiLCJvZmZzZXRQcm9wIiwicG9pbnQiLCJpc0VkaXRhYmxlIiwiY29udGVudEVkaXRhYmxlIiwibWFudWFsbHkiLCJnZXRFdmVudEhvc3QiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJjb29yZCIsImhvc3QiLCJtaXNzTWFwIiwicGFnZVgiLCJwYWdlWSIsImNzcyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2hlZXQiLCJSZXBlYXRlckZpZWxkIiwiZGlmZiIsImdyb3VwTGFiZWwiLCJsYWJlbFJlZ2V4IiwiX2dyb3VwU2V0dGluZ3MiLCJncm91cCIsImFkZEl0ZW0iLCJkcmFnZ2VyIiwicmVPcmdhbml6ZSIsIl9yZWNhbGNMYWJlbHMiLCJhZGRCdXR0b24iLCJfcmVjYWxjTGFiZWwiLCJleGlzdGluZ0xhYmVsIiwibmV3TGFiZWwiLCJza2lwSW5zZXJ0Iiwic2tpcEVtaXQiLCJmaXJzdEZpZWxkIiwicmVmcmVzaENoaWxkcmVuIiwiY2xvbmVJdGVtIiwicmVtb3ZlZCIsIlJlcGVhdGVyRmllbGQkMSIsImFsd2F5c1ZhbGlkIiwibGFiZWxDbGlja3MiLCJzeW1ib2wiLCJmbGV4V3JhcCIsImFsaWduQ29udGVudCIsImFsaWduSXRlbXMiLCJhbGlnblNlbGYiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJDaGVja2JveEZpZWxkIiwiQ2hlY2tib3hGaWVsZCQxIiwiZW1pdEV2ZW50IiwiY2hhaUFzc2VydHR5cGUiLCJjaGFpRXZlbnRzIiwibW9jaGEiLCJzZXR1cCIsInNsb3ciLCJfX2thcm1hX18iLCJiYWlsIiwiVHJ1ZWZhbHNlRmllbGQiLCJwcm9taXNlRXZlbnQiLCJzdWl0ZSIsInRlYXJkb3duIiwibGFzdENoaWxkIiwic3VpdGVTZXR1cCIsImZpZWxkMiIsImNvbnRyb2wiLCJmaWVsZEEiLCJmaWVsZEIiLCJmaWVsZEMiLCJpbml0aWFsVG9wIiwid2l0aExhYmVsIiwid2l0aG91dExhYmVsIiwiaWNvbkZpZWxkIiwiY3VzdG9tIiwibWFzdGVyIiwic2xhdmUiLCJkcm9wZG93bkVsIiwiaW5wdXRFbCIsImRpc3BsYXllZCIsImdldFZpc2libGUiLCJza2lwIiwiY29udHJvbE11bHRpIiwicmVmMyIsInJlZjQiLCJyZWY1IiwidmFsdWVSYXciLCJzaW5nbGUiLCJjbGljayIsImZpcnN0Iiwic2Vjb25kIiwidGhpcmQiLCJmb3VydGgiLCJmaWZ0aCIsInF1aWNrZmllbGQyIiwidGV4dEEiLCJ0ZXh0QiIsInRleHRDIiwidGV4dEQiXSwibWFwcGluZ3MiOiI0RkFBQSxtQkFBZSxDQUNiLFdBRGEsRUFFYixnQkFGYSxFQUdiLDhCQUhhLEVBSWIseUJBSmEsRUFLYixjQUxhLEVBTWIsdUJBTmEsRUFPYiwwQkFQYSxFQVFiLGdCQVJhLEVBU2IsZ0JBVGEsRUFVYiw2QkFWYSxFQVdiLGdCQVhhLEVBWWIsOEJBWmEsRUFhYixpQkFiYSxFQWNiLGdCQWRhLEVBZWIsNkJBZmEsRUFnQmIsNEJBaEJhLEVBaUJiLGVBakJhLEVBa0JiLFlBbEJhLEVBbUJiLHNCQW5CYSxFQW9CYixnQkFwQmEsRUFxQmIsMkJBckJhLEVBc0JiLGlCQXRCYSxFQXVCYiwrQkF2QmEsRUF3QmIsa0JBeEJhLEVBeUJiLG1CQXpCYSxFQTBCYixnQkExQmEsRUEyQmIsZ0JBM0JhLEVBNEJiLDJCQTVCYSxFQTZCYixnQkE3QmEsRUE4QmIsZ0JBOUJhLEVBK0JiLGtCQS9CYSxFQWdDYix5QkFoQ2EsRUFpQ2IsNEJBakNhLEVBa0NiLGdCQWxDYSxFQW1DYiw0QkFuQ2EsRUFvQ2IsMkJBcENhLEVBcUNiLGlCQXJDYSxFQXNDYixnQkF0Q2EsRUF1Q2IsZ0JBdkNhLEVBd0NiLGdCQXhDYSxFQXlDYiwwQkF6Q2EsRUEwQ2Isd0JBMUNhLEVBMkNiLDBCQTNDYSxFQTRDYixnQkE1Q2EsRUE2Q2Isa0JBN0NhLEVBOENiLGVBOUNhLEVBK0NiLGNBL0NhLEVBZ0RiLFlBaERhLEVBaURiLGdDQWpEYSxFQWtEYix1QkFsRGEsQ0FBZixDQ0FBLElBQUksVUFBVSxH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QUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO0VBQzdCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO0VBQ3pCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO0VBQ3pCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO0VBQ3pCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO0VBQ3pCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3hCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3hCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3hCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3hCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3hCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3hCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3hCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3hCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3hCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3hCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO0VBQzdCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO0VBQ3pCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO0VBQzdCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO0VBQ3pCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO0VBQzdCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO0VBQzdCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0VBQzVCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO0VBQ3pCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO0VBQ3pCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO0VBQ3pCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDO0VBQ3pCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3hCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3hCLEVBQUUsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3hCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO0VBQ3pCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO0VBQzlCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO0VBQzlCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO0VBQzlCLEdBQUcsRUFBRSxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO0NBQy9CLENBQUM7O0FBRUYsSUFBSSw2QkFBNkIsR0FBRztFQUNsQyxTQUFTLEVBQUUsQ0FBQztFQUNaLEdBQUcsRUFBRSxDQUFDO0VBQ04sS0FBSyxFQUFFLEVBQUU7RUFDVCxLQUFLLEVBQUUsRUFBRTtFQUNULElBQUksRUFBRSxFQUFFO0VBQ1IsR0FBRyxFQUFFLEVBQUU7RUFDUCxLQUFLLEVBQUUsRUFBRTtFQUNULFFBQVEsRUFBRSxFQUFFO0VBQ1osTUFBTSxFQUFFLEVB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
